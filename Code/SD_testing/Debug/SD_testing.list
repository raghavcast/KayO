
SD_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005208  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  080053a8  080053a8  000153a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054f4  080054f4  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080054f4  080054f4  000154f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054fc  080054fc  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054fc  080054fc  000154fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005500  08005500  00015500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08005504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000088  0800558c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  0800558c  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e101  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022cb  00000000  00000000  0002e1b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  00030488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b58  00000000  00000000  000310d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182b6  00000000  00000000  00031c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010931  00000000  00000000  00049ee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a845  00000000  00000000  0005a817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e505c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039a4  00000000  00000000  000e50ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005390 	.word	0x08005390

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08005390 	.word	0x08005390

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800058c:	1d39      	adds	r1, r7, #4
 800058e:	f04f 33ff 	mov.w	r3, #4294967295
 8000592:	2201      	movs	r2, #1
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <__io_putchar+0x20>)
 8000596:	f001 ffd2 	bl	800253e <HAL_UART_Transmit>
  return ch;
 800059a:	687b      	ldr	r3, [r7, #4]
}
 800059c:	4618      	mov	r0, r3
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200000fc 	.word	0x200000fc

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	f5ad 6d8f 	sub.w	sp, sp, #1144	; 0x478
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 fb94 	bl	8000cdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f870 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 f936 	bl	8000828 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005bc:	f000 f90a 	bl	80007d4 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80005c0:	f000 f8d2 	bl	8000768 <MX_SPI2_Init>
  MX_FATFS_Init();
 80005c4:	f002 fb30 	bl	8002c28 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  printf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 80005c8:	482e      	ldr	r0, [pc, #184]	; (8000684 <main+0xdc>)
 80005ca:	f003 ff63 	bl	8004494 <puts>

  HAL_Delay(1000); //a short delay is important to let the SD card settle
 80005ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d2:	f000 fbf5 	bl	8000dc0 <HAL_Delay>
  FATFS FatFs; 	//Fatfs handle
  FIL fil; 		//File handle
  FRESULT fres; //Result after operations

  //Open the file system
  fres = f_mount(&FatFs, "", 1); //1=mount now
 80005d6:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80005da:	2201      	movs	r2, #1
 80005dc:	492a      	ldr	r1, [pc, #168]	; (8000688 <main+0xe0>)
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 fd48 	bl	8004074 <f_mount>
 80005e4:	4603      	mov	r3, r0
 80005e6:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
  if (fres != FR_OK) {
 80005ea:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d006      	beq.n	8000600 <main+0x58>
	printf("f_mount error (%i)\r\n", fres);
 80005f2:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 80005f6:	4619      	mov	r1, r3
 80005f8:	4824      	ldr	r0, [pc, #144]	; (800068c <main+0xe4>)
 80005fa:	f003 fec5 	bl	8004388 <iprintf>
	while(1);
 80005fe:	e7fe      	b.n	80005fe <main+0x56>
  //Let's get some statistics from the SD card
  DWORD free_clusters, free_sectors, total_sectors;

  FATFS* getFreeFs;

  fres = f_getfree("", &free_clusters, &getFreeFs);
 8000600:	1d3a      	adds	r2, r7, #4
 8000602:	f107 0308 	add.w	r3, r7, #8
 8000606:	4619      	mov	r1, r3
 8000608:	481f      	ldr	r0, [pc, #124]	; (8000688 <main+0xe0>)
 800060a:	f003 fd79 	bl	8004100 <f_getfree>
 800060e:	4603      	mov	r3, r0
 8000610:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
  if (fres != FR_OK) {
 8000614:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 8000618:	2b00      	cmp	r3, #0
 800061a:	d006      	beq.n	800062a <main+0x82>
	printf("f_getfree error (%i)\r\n", fres);
 800061c:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 8000620:	4619      	mov	r1, r3
 8000622:	481b      	ldr	r0, [pc, #108]	; (8000690 <main+0xe8>)
 8000624:	f003 feb0 	bl	8004388 <iprintf>
	while(1);
 8000628:	e7fe      	b.n	8000628 <main+0x80>
  }

  //Formula comes from ChaN's documentation
  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 800062a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800062e:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	3b02      	subs	r3, #2
 8000638:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 800063c:	f2a2 4274 	subw	r2, r2, #1140	; 0x474
 8000640:	6812      	ldr	r2, [r2, #0]
 8000642:	8952      	ldrh	r2, [r2, #10]
 8000644:	fb02 f303 	mul.w	r3, r2, r3
 8000648:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
  free_sectors = free_clusters * getFreeFs->csize;
 800064c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8000650:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	895b      	ldrh	r3, [r3, #10]
 8000658:	461a      	mov	r2, r3
 800065a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800065e:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	fb02 f303 	mul.w	r3, r2, r3
 8000668:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c

  printf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 800066c:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8000670:	0859      	lsrs	r1, r3, #1
 8000672:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8000676:	085b      	lsrs	r3, r3, #1
 8000678:	461a      	mov	r2, r3
 800067a:	4806      	ldr	r0, [pc, #24]	; (8000694 <main+0xec>)
 800067c:	f003 fe84 	bl	8004388 <iprintf>
//  f_mount(NULL, "", 0);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000680:	e7fe      	b.n	8000680 <main+0xd8>
 8000682:	bf00      	nop
 8000684:	080053a8 	.word	0x080053a8
 8000688:	080053c8 	.word	0x080053c8
 800068c:	080053cc 	.word	0x080053cc
 8000690:	080053e4 	.word	0x080053e4
 8000694:	080053fc 	.word	0x080053fc

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	; 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	2230      	movs	r2, #48	; 0x30
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f003 fe66 	bl	8004378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	4b27      	ldr	r3, [pc, #156]	; (8000760 <SystemClock_Config+0xc8>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	4a26      	ldr	r2, [pc, #152]	; (8000760 <SystemClock_Config+0xc8>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	; 0x40
 80006cc:	4b24      	ldr	r3, [pc, #144]	; (8000760 <SystemClock_Config+0xc8>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	4b21      	ldr	r3, [pc, #132]	; (8000764 <SystemClock_Config+0xcc>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a20      	ldr	r2, [pc, #128]	; (8000764 <SystemClock_Config+0xcc>)
 80006e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b1e      	ldr	r3, [pc, #120]	; (8000764 <SystemClock_Config+0xcc>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f4:	2301      	movs	r3, #1
 80006f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006f8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fe:	2302      	movs	r3, #2
 8000700:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000702:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000706:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000708:	2304      	movs	r3, #4
 800070a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800070c:	2348      	movs	r3, #72	; 0x48
 800070e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000710:	2302      	movs	r3, #2
 8000712:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000714:	2303      	movs	r3, #3
 8000716:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	f107 0320 	add.w	r3, r7, #32
 800071c:	4618      	mov	r0, r3
 800071e:	f000 fdf7 	bl	8001310 <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000728:	f000 f910 	bl	800094c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	230f      	movs	r3, #15
 800072e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000730:	2302      	movs	r3, #2
 8000732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	2102      	movs	r1, #2
 8000748:	4618      	mov	r0, r3
 800074a:	f001 f859 	bl	8001800 <HAL_RCC_ClockConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000754:	f000 f8fa 	bl	800094c <Error_Handler>
  }
}
 8000758:	bf00      	nop
 800075a:	3750      	adds	r7, #80	; 0x50
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800076c:	4b17      	ldr	r3, [pc, #92]	; (80007cc <MX_SPI2_Init+0x64>)
 800076e:	4a18      	ldr	r2, [pc, #96]	; (80007d0 <MX_SPI2_Init+0x68>)
 8000770:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000772:	4b16      	ldr	r3, [pc, #88]	; (80007cc <MX_SPI2_Init+0x64>)
 8000774:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000778:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_SPI2_Init+0x64>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_SPI2_Init+0x64>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_SPI2_Init+0x64>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_SPI2_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_SPI2_Init+0x64>)
 8000794:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000798:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_SPI2_Init+0x64>)
 800079c:	2210      	movs	r2, #16
 800079e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007a0:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <MX_SPI2_Init+0x64>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_SPI2_Init+0x64>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <MX_SPI2_Init+0x64>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_SPI2_Init+0x64>)
 80007b4:	220a      	movs	r2, #10
 80007b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <MX_SPI2_Init+0x64>)
 80007ba:	f001 fa41 	bl	8001c40 <HAL_SPI_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80007c4:	f000 f8c2 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	200000a4 	.word	0x200000a4
 80007d0:	40003800 	.word	0x40003800

080007d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007da:	4a12      	ldr	r2, [pc, #72]	; (8000824 <MX_USART2_UART_Init+0x50>)
 80007dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 800080c:	f001 fe4a 	bl	80024a4 <HAL_UART_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000816:	f000 f899 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200000fc 	.word	0x200000fc
 8000824:	40004400 	.word	0x40004400

08000828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	; 0x28
 800082c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	4b3e      	ldr	r3, [pc, #248]	; (800093c <MX_GPIO_Init+0x114>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a3d      	ldr	r2, [pc, #244]	; (800093c <MX_GPIO_Init+0x114>)
 8000848:	f043 0304 	orr.w	r3, r3, #4
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b3b      	ldr	r3, [pc, #236]	; (800093c <MX_GPIO_Init+0x114>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0304 	and.w	r3, r3, #4
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	4b37      	ldr	r3, [pc, #220]	; (800093c <MX_GPIO_Init+0x114>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a36      	ldr	r2, [pc, #216]	; (800093c <MX_GPIO_Init+0x114>)
 8000864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b34      	ldr	r3, [pc, #208]	; (800093c <MX_GPIO_Init+0x114>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	4b30      	ldr	r3, [pc, #192]	; (800093c <MX_GPIO_Init+0x114>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a2f      	ldr	r2, [pc, #188]	; (800093c <MX_GPIO_Init+0x114>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b2d      	ldr	r3, [pc, #180]	; (800093c <MX_GPIO_Init+0x114>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b29      	ldr	r3, [pc, #164]	; (800093c <MX_GPIO_Init+0x114>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a28      	ldr	r2, [pc, #160]	; (800093c <MX_GPIO_Init+0x114>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b26      	ldr	r3, [pc, #152]	; (800093c <MX_GPIO_Init+0x114>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2120      	movs	r1, #32
 80008b2:	4823      	ldr	r0, [pc, #140]	; (8000940 <MX_GPIO_Init+0x118>)
 80008b4:	f000 fd12 	bl	80012dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80008b8:	2201      	movs	r2, #1
 80008ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008be:	4821      	ldr	r0, [pc, #132]	; (8000944 <MX_GPIO_Init+0x11c>)
 80008c0:	f000 fd0c 	bl	80012dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	481b      	ldr	r0, [pc, #108]	; (8000948 <MX_GPIO_Init+0x120>)
 80008dc:	f000 fb7a 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008e0:	2320      	movs	r3, #32
 80008e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e4:	2301      	movs	r3, #1
 80008e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	4619      	mov	r1, r3
 80008f6:	4812      	ldr	r0, [pc, #72]	; (8000940 <MX_GPIO_Init+0x118>)
 80008f8:	f000 fb6c 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 80008fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000902:	2300      	movs	r3, #0
 8000904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000906:	2301      	movs	r3, #1
 8000908:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	480c      	ldr	r0, [pc, #48]	; (8000944 <MX_GPIO_Init+0x11c>)
 8000912:	f000 fb5f 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000916:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800091a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000920:	2301      	movs	r3, #1
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000924:	2302      	movs	r3, #2
 8000926:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	4619      	mov	r1, r3
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_GPIO_Init+0x11c>)
 8000930:	f000 fb50 	bl	8000fd4 <HAL_GPIO_Init>

}
 8000934:	bf00      	nop
 8000936:	3728      	adds	r7, #40	; 0x28
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40023800 	.word	0x40023800
 8000940:	40020000 	.word	0x40020000
 8000944:	40020400 	.word	0x40020400
 8000948:	40020800 	.word	0x40020800

0800094c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
}
 8000952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000954:	e7fe      	b.n	8000954 <Error_Handler+0x8>
	...

08000958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <HAL_MspInit+0x4c>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	4a0f      	ldr	r2, [pc, #60]	; (80009a4 <HAL_MspInit+0x4c>)
 8000968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800096c:	6453      	str	r3, [r2, #68]	; 0x44
 800096e:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <HAL_MspInit+0x4c>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <HAL_MspInit+0x4c>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000988:	6413      	str	r3, [r2, #64]	; 0x40
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_MspInit+0x4c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000996:	2007      	movs	r0, #7
 8000998:	f000 fae8 	bl	8000f6c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40023800 	.word	0x40023800

080009a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a19      	ldr	r2, [pc, #100]	; (8000a2c <HAL_SPI_MspInit+0x84>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d12c      	bne.n	8000a24 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <HAL_SPI_MspInit+0x88>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	4a17      	ldr	r2, [pc, #92]	; (8000a30 <HAL_SPI_MspInit+0x88>)
 80009d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d8:	6413      	str	r3, [r2, #64]	; 0x40
 80009da:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <HAL_SPI_MspInit+0x88>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <HAL_SPI_MspInit+0x88>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a10      	ldr	r2, [pc, #64]	; (8000a30 <HAL_SPI_MspInit+0x88>)
 80009f0:	f043 0302 	orr.w	r3, r3, #2
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <HAL_SPI_MspInit+0x88>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a02:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a10:	2303      	movs	r3, #3
 8000a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a14:	2305      	movs	r3, #5
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <HAL_SPI_MspInit+0x8c>)
 8000a20:	f000 fad8 	bl	8000fd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a24:	bf00      	nop
 8000a26:	3728      	adds	r7, #40	; 0x28
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40003800 	.word	0x40003800
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40020400 	.word	0x40020400

08000a38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	; 0x28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a19      	ldr	r2, [pc, #100]	; (8000abc <HAL_UART_MspInit+0x84>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d12b      	bne.n	8000ab2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	4a17      	ldr	r2, [pc, #92]	; (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a68:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a10      	ldr	r2, [pc, #64]	; (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a92:	230c      	movs	r3, #12
 8000a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aa2:	2307      	movs	r3, #7
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <HAL_UART_MspInit+0x8c>)
 8000aae:	f000 fa91 	bl	8000fd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ab2:	bf00      	nop
 8000ab4:	3728      	adds	r7, #40	; 0x28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40004400 	.word	0x40004400
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020000 	.word	0x40020000

08000ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <NMI_Handler+0x4>

08000ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <HardFault_Handler+0x4>

08000ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <MemManage_Handler+0x4>

08000ada <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <BusFault_Handler+0x4>

08000ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <UsageFault_Handler+0x4>

08000ae6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b14:	f000 f934 	bl	8000d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	e00a      	b.n	8000b44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b2e:	f3af 8000 	nop.w
 8000b32:	4601      	mov	r1, r0
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	1c5a      	adds	r2, r3, #1
 8000b38:	60ba      	str	r2, [r7, #8]
 8000b3a:	b2ca      	uxtb	r2, r1
 8000b3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	3301      	adds	r3, #1
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	697a      	ldr	r2, [r7, #20]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	dbf0      	blt.n	8000b2e <_read+0x12>
  }

  return len;
 8000b4c:	687b      	ldr	r3, [r7, #4]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3718      	adds	r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b086      	sub	sp, #24
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	60f8      	str	r0, [r7, #12]
 8000b5e:	60b9      	str	r1, [r7, #8]
 8000b60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
 8000b66:	e009      	b.n	8000b7c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	1c5a      	adds	r2, r3, #1
 8000b6c:	60ba      	str	r2, [r7, #8]
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff fd07 	bl	8000584 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	617b      	str	r3, [r7, #20]
 8000b7c:	697a      	ldr	r2, [r7, #20]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	dbf1      	blt.n	8000b68 <_write+0x12>
  }
  return len;
 8000b84:	687b      	ldr	r3, [r7, #4]
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3718      	adds	r7, #24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <_close>:

int _close(int file)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	b083      	sub	sp, #12
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bb6:	605a      	str	r2, [r3, #4]
  return 0;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <_isatty>:

int _isatty(int file)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
	...

08000bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c00:	4a14      	ldr	r2, [pc, #80]	; (8000c54 <_sbrk+0x5c>)
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <_sbrk+0x60>)
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c0c:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d102      	bne.n	8000c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <_sbrk+0x64>)
 8000c16:	4a12      	ldr	r2, [pc, #72]	; (8000c60 <_sbrk+0x68>)
 8000c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <_sbrk+0x64>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d207      	bcs.n	8000c38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c28:	f003 fb7c 	bl	8004324 <__errno>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	220c      	movs	r2, #12
 8000c30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295
 8000c36:	e009      	b.n	8000c4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <_sbrk+0x64>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c3e:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <_sbrk+0x64>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	4a05      	ldr	r2, [pc, #20]	; (8000c5c <_sbrk+0x64>)
 8000c48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20020000 	.word	0x20020000
 8000c58:	00000400 	.word	0x00000400
 8000c5c:	20000140 	.word	0x20000140
 8000c60:	200001a0 	.word	0x200001a0

08000c64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <SystemInit+0x20>)
 8000c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <SystemInit+0x20>)
 8000c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c8c:	480d      	ldr	r0, [pc, #52]	; (8000cc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c8e:	490e      	ldr	r1, [pc, #56]	; (8000cc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c90:	4a0e      	ldr	r2, [pc, #56]	; (8000ccc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c94:	e002      	b.n	8000c9c <LoopCopyDataInit>

08000c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9a:	3304      	adds	r3, #4

08000c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca0:	d3f9      	bcc.n	8000c96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca2:	4a0b      	ldr	r2, [pc, #44]	; (8000cd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ca4:	4c0b      	ldr	r4, [pc, #44]	; (8000cd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca8:	e001      	b.n	8000cae <LoopFillZerobss>

08000caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cac:	3204      	adds	r2, #4

08000cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb0:	d3fb      	bcc.n	8000caa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cb2:	f7ff ffd7 	bl	8000c64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cb6:	f003 fb3b 	bl	8004330 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cba:	f7ff fc75 	bl	80005a8 <main>
  bx  lr    
 8000cbe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000ccc:	08005504 	.word	0x08005504
  ldr r2, =_sbss
 8000cd0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000cd4:	200001a0 	.word	0x200001a0

08000cd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd8:	e7fe      	b.n	8000cd8 <ADC_IRQHandler>
	...

08000cdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ce0:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <HAL_Init+0x40>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a0d      	ldr	r2, [pc, #52]	; (8000d1c <HAL_Init+0x40>)
 8000ce6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cec:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <HAL_Init+0x40>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <HAL_Init+0x40>)
 8000cf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <HAL_Init+0x40>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a07      	ldr	r2, [pc, #28]	; (8000d1c <HAL_Init+0x40>)
 8000cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d04:	2003      	movs	r0, #3
 8000d06:	f000 f931 	bl	8000f6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f000 f808 	bl	8000d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d10:	f7ff fe22 	bl	8000958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40023c00 	.word	0x40023c00

08000d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d28:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <HAL_InitTick+0x54>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <HAL_InitTick+0x58>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	4619      	mov	r1, r3
 8000d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 f93b 	bl	8000fba <HAL_SYSTICK_Config>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e00e      	b.n	8000d6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2b0f      	cmp	r3, #15
 8000d52:	d80a      	bhi.n	8000d6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d54:	2200      	movs	r2, #0
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295
 8000d5c:	f000 f911 	bl	8000f82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d60:	4a06      	ldr	r2, [pc, #24]	; (8000d7c <HAL_InitTick+0x5c>)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d66:	2300      	movs	r3, #0
 8000d68:	e000      	b.n	8000d6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000000 	.word	0x20000000
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	20000004 	.word	0x20000004

08000d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_IncTick+0x20>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_IncTick+0x24>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4413      	add	r3, r2
 8000d90:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <HAL_IncTick+0x24>)
 8000d92:	6013      	str	r3, [r2, #0]
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000008 	.word	0x20000008
 8000da4:	20000144 	.word	0x20000144

08000da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dac:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <HAL_GetTick+0x14>)
 8000dae:	681b      	ldr	r3, [r3, #0]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	20000144 	.word	0x20000144

08000dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc8:	f7ff ffee 	bl	8000da8 <HAL_GetTick>
 8000dcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd8:	d005      	beq.n	8000de6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dda:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <HAL_Delay+0x44>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4413      	add	r3, r2
 8000de4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000de6:	bf00      	nop
 8000de8:	f7ff ffde 	bl	8000da8 <HAL_GetTick>
 8000dec:	4602      	mov	r2, r0
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d8f7      	bhi.n	8000de8 <HAL_Delay+0x28>
  {
  }
}
 8000df8:	bf00      	nop
 8000dfa:	bf00      	nop
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000008 	.word	0x20000008

08000e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <__NVIC_SetPriorityGrouping+0x44>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e24:	4013      	ands	r3, r2
 8000e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e3a:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <__NVIC_SetPriorityGrouping+0x44>)
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	60d3      	str	r3, [r2, #12]
}
 8000e40:	bf00      	nop
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e54:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <__NVIC_GetPriorityGrouping+0x18>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	0a1b      	lsrs	r3, r3, #8
 8000e5a:	f003 0307 	and.w	r3, r3, #7
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	6039      	str	r1, [r7, #0]
 8000e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	db0a      	blt.n	8000e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	490c      	ldr	r1, [pc, #48]	; (8000eb8 <__NVIC_SetPriority+0x4c>)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	0112      	lsls	r2, r2, #4
 8000e8c:	b2d2      	uxtb	r2, r2
 8000e8e:	440b      	add	r3, r1
 8000e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e94:	e00a      	b.n	8000eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	4908      	ldr	r1, [pc, #32]	; (8000ebc <__NVIC_SetPriority+0x50>)
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	f003 030f 	and.w	r3, r3, #15
 8000ea2:	3b04      	subs	r3, #4
 8000ea4:	0112      	lsls	r2, r2, #4
 8000ea6:	b2d2      	uxtb	r2, r2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	761a      	strb	r2, [r3, #24]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000e100 	.word	0xe000e100
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b089      	sub	sp, #36	; 0x24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f1c3 0307 	rsb	r3, r3, #7
 8000eda:	2b04      	cmp	r3, #4
 8000edc:	bf28      	it	cs
 8000ede:	2304      	movcs	r3, #4
 8000ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	2b06      	cmp	r3, #6
 8000ee8:	d902      	bls.n	8000ef0 <NVIC_EncodePriority+0x30>
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3b03      	subs	r3, #3
 8000eee:	e000      	b.n	8000ef2 <NVIC_EncodePriority+0x32>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43da      	mvns	r2, r3
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	401a      	ands	r2, r3
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f08:	f04f 31ff 	mov.w	r1, #4294967295
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f12:	43d9      	mvns	r1, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	4313      	orrs	r3, r2
         );
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3724      	adds	r7, #36	; 0x24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
	...

08000f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f38:	d301      	bcc.n	8000f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e00f      	b.n	8000f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <SysTick_Config+0x40>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f46:	210f      	movs	r1, #15
 8000f48:	f04f 30ff 	mov.w	r0, #4294967295
 8000f4c:	f7ff ff8e 	bl	8000e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <SysTick_Config+0x40>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f56:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <SysTick_Config+0x40>)
 8000f58:	2207      	movs	r2, #7
 8000f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	e000e010 	.word	0xe000e010

08000f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff ff47 	bl	8000e08 <__NVIC_SetPriorityGrouping>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b086      	sub	sp, #24
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	4603      	mov	r3, r0
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
 8000f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f94:	f7ff ff5c 	bl	8000e50 <__NVIC_GetPriorityGrouping>
 8000f98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	68b9      	ldr	r1, [r7, #8]
 8000f9e:	6978      	ldr	r0, [r7, #20]
 8000fa0:	f7ff ff8e 	bl	8000ec0 <NVIC_EncodePriority>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000faa:	4611      	mov	r1, r2
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ff5d 	bl	8000e6c <__NVIC_SetPriority>
}
 8000fb2:	bf00      	nop
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff ffb0 	bl	8000f28 <SysTick_Config>
 8000fc8:	4603      	mov	r3, r0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b089      	sub	sp, #36	; 0x24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
 8000fee:	e159      	b.n	80012a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	429a      	cmp	r2, r3
 800100a:	f040 8148 	bne.w	800129e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f003 0303 	and.w	r3, r3, #3
 8001016:	2b01      	cmp	r3, #1
 8001018:	d005      	beq.n	8001026 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001022:	2b02      	cmp	r3, #2
 8001024:	d130      	bne.n	8001088 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	2203      	movs	r2, #3
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	68da      	ldr	r2, [r3, #12]
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800105c:	2201      	movs	r2, #1
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	091b      	lsrs	r3, r3, #4
 8001072:	f003 0201 	and.w	r2, r3, #1
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 0303 	and.w	r3, r3, #3
 8001090:	2b03      	cmp	r3, #3
 8001092:	d017      	beq.n	80010c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	2203      	movs	r2, #3
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	689a      	ldr	r2, [r3, #8]
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 0303 	and.w	r3, r3, #3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d123      	bne.n	8001118 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	08da      	lsrs	r2, r3, #3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3208      	adds	r2, #8
 80010d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	f003 0307 	and.w	r3, r3, #7
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	220f      	movs	r2, #15
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	691a      	ldr	r2, [r3, #16]
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	08da      	lsrs	r2, r3, #3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3208      	adds	r2, #8
 8001112:	69b9      	ldr	r1, [r7, #24]
 8001114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	2203      	movs	r2, #3
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 0203 	and.w	r2, r3, #3
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001154:	2b00      	cmp	r3, #0
 8001156:	f000 80a2 	beq.w	800129e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	4b57      	ldr	r3, [pc, #348]	; (80012bc <HAL_GPIO_Init+0x2e8>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	4a56      	ldr	r2, [pc, #344]	; (80012bc <HAL_GPIO_Init+0x2e8>)
 8001164:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001168:	6453      	str	r3, [r2, #68]	; 0x44
 800116a:	4b54      	ldr	r3, [pc, #336]	; (80012bc <HAL_GPIO_Init+0x2e8>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001176:	4a52      	ldr	r2, [pc, #328]	; (80012c0 <HAL_GPIO_Init+0x2ec>)
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	089b      	lsrs	r3, r3, #2
 800117c:	3302      	adds	r3, #2
 800117e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f003 0303 	and.w	r3, r3, #3
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	220f      	movs	r2, #15
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a49      	ldr	r2, [pc, #292]	; (80012c4 <HAL_GPIO_Init+0x2f0>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d019      	beq.n	80011d6 <HAL_GPIO_Init+0x202>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a48      	ldr	r2, [pc, #288]	; (80012c8 <HAL_GPIO_Init+0x2f4>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d013      	beq.n	80011d2 <HAL_GPIO_Init+0x1fe>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a47      	ldr	r2, [pc, #284]	; (80012cc <HAL_GPIO_Init+0x2f8>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d00d      	beq.n	80011ce <HAL_GPIO_Init+0x1fa>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a46      	ldr	r2, [pc, #280]	; (80012d0 <HAL_GPIO_Init+0x2fc>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d007      	beq.n	80011ca <HAL_GPIO_Init+0x1f6>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a45      	ldr	r2, [pc, #276]	; (80012d4 <HAL_GPIO_Init+0x300>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d101      	bne.n	80011c6 <HAL_GPIO_Init+0x1f2>
 80011c2:	2304      	movs	r3, #4
 80011c4:	e008      	b.n	80011d8 <HAL_GPIO_Init+0x204>
 80011c6:	2307      	movs	r3, #7
 80011c8:	e006      	b.n	80011d8 <HAL_GPIO_Init+0x204>
 80011ca:	2303      	movs	r3, #3
 80011cc:	e004      	b.n	80011d8 <HAL_GPIO_Init+0x204>
 80011ce:	2302      	movs	r3, #2
 80011d0:	e002      	b.n	80011d8 <HAL_GPIO_Init+0x204>
 80011d2:	2301      	movs	r3, #1
 80011d4:	e000      	b.n	80011d8 <HAL_GPIO_Init+0x204>
 80011d6:	2300      	movs	r3, #0
 80011d8:	69fa      	ldr	r2, [r7, #28]
 80011da:	f002 0203 	and.w	r2, r2, #3
 80011de:	0092      	lsls	r2, r2, #2
 80011e0:	4093      	lsls	r3, r2
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e8:	4935      	ldr	r1, [pc, #212]	; (80012c0 <HAL_GPIO_Init+0x2ec>)
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	089b      	lsrs	r3, r3, #2
 80011ee:	3302      	adds	r3, #2
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011f6:	4b38      	ldr	r3, [pc, #224]	; (80012d8 <HAL_GPIO_Init+0x304>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800121a:	4a2f      	ldr	r2, [pc, #188]	; (80012d8 <HAL_GPIO_Init+0x304>)
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001220:	4b2d      	ldr	r3, [pc, #180]	; (80012d8 <HAL_GPIO_Init+0x304>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001244:	4a24      	ldr	r2, [pc, #144]	; (80012d8 <HAL_GPIO_Init+0x304>)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800124a:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <HAL_GPIO_Init+0x304>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800126e:	4a1a      	ldr	r2, [pc, #104]	; (80012d8 <HAL_GPIO_Init+0x304>)
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001274:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <HAL_GPIO_Init+0x304>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001298:	4a0f      	ldr	r2, [pc, #60]	; (80012d8 <HAL_GPIO_Init+0x304>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3301      	adds	r3, #1
 80012a2:	61fb      	str	r3, [r7, #28]
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	2b0f      	cmp	r3, #15
 80012a8:	f67f aea2 	bls.w	8000ff0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	3724      	adds	r7, #36	; 0x24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40013800 	.word	0x40013800
 80012c4:	40020000 	.word	0x40020000
 80012c8:	40020400 	.word	0x40020400
 80012cc:	40020800 	.word	0x40020800
 80012d0:	40020c00 	.word	0x40020c00
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40013c00 	.word	0x40013c00

080012dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	460b      	mov	r3, r1
 80012e6:	807b      	strh	r3, [r7, #2]
 80012e8:	4613      	mov	r3, r2
 80012ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012ec:	787b      	ldrb	r3, [r7, #1]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012f2:	887a      	ldrh	r2, [r7, #2]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012f8:	e003      	b.n	8001302 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012fa:	887b      	ldrh	r3, [r7, #2]
 80012fc:	041a      	lsls	r2, r3, #16
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	619a      	str	r2, [r3, #24]
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e267      	b.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	2b00      	cmp	r3, #0
 800132c:	d075      	beq.n	800141a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800132e:	4b88      	ldr	r3, [pc, #544]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 030c 	and.w	r3, r3, #12
 8001336:	2b04      	cmp	r3, #4
 8001338:	d00c      	beq.n	8001354 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800133a:	4b85      	ldr	r3, [pc, #532]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001342:	2b08      	cmp	r3, #8
 8001344:	d112      	bne.n	800136c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001346:	4b82      	ldr	r3, [pc, #520]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800134e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001352:	d10b      	bne.n	800136c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001354:	4b7e      	ldr	r3, [pc, #504]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d05b      	beq.n	8001418 <HAL_RCC_OscConfig+0x108>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d157      	bne.n	8001418 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e242      	b.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001374:	d106      	bne.n	8001384 <HAL_RCC_OscConfig+0x74>
 8001376:	4b76      	ldr	r3, [pc, #472]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a75      	ldr	r2, [pc, #468]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 800137c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	e01d      	b.n	80013c0 <HAL_RCC_OscConfig+0xb0>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800138c:	d10c      	bne.n	80013a8 <HAL_RCC_OscConfig+0x98>
 800138e:	4b70      	ldr	r3, [pc, #448]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a6f      	ldr	r2, [pc, #444]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 8001394:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	4b6d      	ldr	r3, [pc, #436]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a6c      	ldr	r2, [pc, #432]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 80013a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	e00b      	b.n	80013c0 <HAL_RCC_OscConfig+0xb0>
 80013a8:	4b69      	ldr	r3, [pc, #420]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a68      	ldr	r2, [pc, #416]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 80013ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013b2:	6013      	str	r3, [r2, #0]
 80013b4:	4b66      	ldr	r3, [pc, #408]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a65      	ldr	r2, [pc, #404]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 80013ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d013      	beq.n	80013f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c8:	f7ff fcee 	bl	8000da8 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013d0:	f7ff fcea 	bl	8000da8 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b64      	cmp	r3, #100	; 0x64
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e207      	b.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e2:	4b5b      	ldr	r3, [pc, #364]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0f0      	beq.n	80013d0 <HAL_RCC_OscConfig+0xc0>
 80013ee:	e014      	b.n	800141a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f0:	f7ff fcda 	bl	8000da8 <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013f8:	f7ff fcd6 	bl	8000da8 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b64      	cmp	r3, #100	; 0x64
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e1f3      	b.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800140a:	4b51      	ldr	r3, [pc, #324]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f0      	bne.n	80013f8 <HAL_RCC_OscConfig+0xe8>
 8001416:	e000      	b.n	800141a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d063      	beq.n	80014ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001426:	4b4a      	ldr	r3, [pc, #296]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f003 030c 	and.w	r3, r3, #12
 800142e:	2b00      	cmp	r3, #0
 8001430:	d00b      	beq.n	800144a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001432:	4b47      	ldr	r3, [pc, #284]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800143a:	2b08      	cmp	r3, #8
 800143c:	d11c      	bne.n	8001478 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800143e:	4b44      	ldr	r3, [pc, #272]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d116      	bne.n	8001478 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800144a:	4b41      	ldr	r3, [pc, #260]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d005      	beq.n	8001462 <HAL_RCC_OscConfig+0x152>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d001      	beq.n	8001462 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e1c7      	b.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001462:	4b3b      	ldr	r3, [pc, #236]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	691b      	ldr	r3, [r3, #16]
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	4937      	ldr	r1, [pc, #220]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 8001472:	4313      	orrs	r3, r2
 8001474:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001476:	e03a      	b.n	80014ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d020      	beq.n	80014c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001480:	4b34      	ldr	r3, [pc, #208]	; (8001554 <HAL_RCC_OscConfig+0x244>)
 8001482:	2201      	movs	r2, #1
 8001484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001486:	f7ff fc8f 	bl	8000da8 <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800148e:	f7ff fc8b 	bl	8000da8 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e1a8      	b.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a0:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d0f0      	beq.n	800148e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ac:	4b28      	ldr	r3, [pc, #160]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	4925      	ldr	r1, [pc, #148]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	600b      	str	r3, [r1, #0]
 80014c0:	e015      	b.n	80014ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014c2:	4b24      	ldr	r3, [pc, #144]	; (8001554 <HAL_RCC_OscConfig+0x244>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c8:	f7ff fc6e 	bl	8000da8 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014d0:	f7ff fc6a 	bl	8000da8 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e187      	b.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014e2:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1f0      	bne.n	80014d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0308 	and.w	r3, r3, #8
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d036      	beq.n	8001568 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d016      	beq.n	8001530 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <HAL_RCC_OscConfig+0x248>)
 8001504:	2201      	movs	r2, #1
 8001506:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001508:	f7ff fc4e 	bl	8000da8 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001510:	f7ff fc4a 	bl	8000da8 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e167      	b.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001522:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 8001524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0f0      	beq.n	8001510 <HAL_RCC_OscConfig+0x200>
 800152e:	e01b      	b.n	8001568 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001530:	4b09      	ldr	r3, [pc, #36]	; (8001558 <HAL_RCC_OscConfig+0x248>)
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001536:	f7ff fc37 	bl	8000da8 <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800153c:	e00e      	b.n	800155c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800153e:	f7ff fc33 	bl	8000da8 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d907      	bls.n	800155c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e150      	b.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
 8001550:	40023800 	.word	0x40023800
 8001554:	42470000 	.word	0x42470000
 8001558:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800155c:	4b88      	ldr	r3, [pc, #544]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 800155e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1ea      	bne.n	800153e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 8097 	beq.w	80016a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001576:	2300      	movs	r3, #0
 8001578:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800157a:	4b81      	ldr	r3, [pc, #516]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10f      	bne.n	80015a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	4b7d      	ldr	r3, [pc, #500]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	4a7c      	ldr	r2, [pc, #496]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 8001590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001594:	6413      	str	r3, [r2, #64]	; 0x40
 8001596:	4b7a      	ldr	r3, [pc, #488]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015a2:	2301      	movs	r3, #1
 80015a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a6:	4b77      	ldr	r3, [pc, #476]	; (8001784 <HAL_RCC_OscConfig+0x474>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d118      	bne.n	80015e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015b2:	4b74      	ldr	r3, [pc, #464]	; (8001784 <HAL_RCC_OscConfig+0x474>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a73      	ldr	r2, [pc, #460]	; (8001784 <HAL_RCC_OscConfig+0x474>)
 80015b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015be:	f7ff fbf3 	bl	8000da8 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015c6:	f7ff fbef 	bl	8000da8 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e10c      	b.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d8:	4b6a      	ldr	r3, [pc, #424]	; (8001784 <HAL_RCC_OscConfig+0x474>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0f0      	beq.n	80015c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d106      	bne.n	80015fa <HAL_RCC_OscConfig+0x2ea>
 80015ec:	4b64      	ldr	r3, [pc, #400]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 80015ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f0:	4a63      	ldr	r2, [pc, #396]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	6713      	str	r3, [r2, #112]	; 0x70
 80015f8:	e01c      	b.n	8001634 <HAL_RCC_OscConfig+0x324>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	2b05      	cmp	r3, #5
 8001600:	d10c      	bne.n	800161c <HAL_RCC_OscConfig+0x30c>
 8001602:	4b5f      	ldr	r3, [pc, #380]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 8001604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001606:	4a5e      	ldr	r2, [pc, #376]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 8001608:	f043 0304 	orr.w	r3, r3, #4
 800160c:	6713      	str	r3, [r2, #112]	; 0x70
 800160e:	4b5c      	ldr	r3, [pc, #368]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 8001610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001612:	4a5b      	ldr	r2, [pc, #364]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6713      	str	r3, [r2, #112]	; 0x70
 800161a:	e00b      	b.n	8001634 <HAL_RCC_OscConfig+0x324>
 800161c:	4b58      	ldr	r3, [pc, #352]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 800161e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001620:	4a57      	ldr	r2, [pc, #348]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 8001622:	f023 0301 	bic.w	r3, r3, #1
 8001626:	6713      	str	r3, [r2, #112]	; 0x70
 8001628:	4b55      	ldr	r3, [pc, #340]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 800162a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800162c:	4a54      	ldr	r2, [pc, #336]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 800162e:	f023 0304 	bic.w	r3, r3, #4
 8001632:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d015      	beq.n	8001668 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800163c:	f7ff fbb4 	bl	8000da8 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001642:	e00a      	b.n	800165a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001644:	f7ff fbb0 	bl	8000da8 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001652:	4293      	cmp	r3, r2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e0cb      	b.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800165a:	4b49      	ldr	r3, [pc, #292]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 800165c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0ee      	beq.n	8001644 <HAL_RCC_OscConfig+0x334>
 8001666:	e014      	b.n	8001692 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001668:	f7ff fb9e 	bl	8000da8 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800166e:	e00a      	b.n	8001686 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001670:	f7ff fb9a 	bl	8000da8 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	f241 3288 	movw	r2, #5000	; 0x1388
 800167e:	4293      	cmp	r3, r2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e0b5      	b.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001686:	4b3e      	ldr	r3, [pc, #248]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 8001688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1ee      	bne.n	8001670 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001692:	7dfb      	ldrb	r3, [r7, #23]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d105      	bne.n	80016a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001698:	4b39      	ldr	r3, [pc, #228]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	4a38      	ldr	r2, [pc, #224]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 800169e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f000 80a1 	beq.w	80017f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016ae:	4b34      	ldr	r3, [pc, #208]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 030c 	and.w	r3, r3, #12
 80016b6:	2b08      	cmp	r3, #8
 80016b8:	d05c      	beq.n	8001774 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d141      	bne.n	8001746 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c2:	4b31      	ldr	r3, [pc, #196]	; (8001788 <HAL_RCC_OscConfig+0x478>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c8:	f7ff fb6e 	bl	8000da8 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d0:	f7ff fb6a 	bl	8000da8 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e087      	b.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e2:	4b27      	ldr	r3, [pc, #156]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1f0      	bne.n	80016d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69da      	ldr	r2, [r3, #28]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	431a      	orrs	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fc:	019b      	lsls	r3, r3, #6
 80016fe:	431a      	orrs	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001704:	085b      	lsrs	r3, r3, #1
 8001706:	3b01      	subs	r3, #1
 8001708:	041b      	lsls	r3, r3, #16
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001710:	061b      	lsls	r3, r3, #24
 8001712:	491b      	ldr	r1, [pc, #108]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 8001714:	4313      	orrs	r3, r2
 8001716:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001718:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <HAL_RCC_OscConfig+0x478>)
 800171a:	2201      	movs	r2, #1
 800171c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171e:	f7ff fb43 	bl	8000da8 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001726:	f7ff fb3f 	bl	8000da8 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e05c      	b.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0f0      	beq.n	8001726 <HAL_RCC_OscConfig+0x416>
 8001744:	e054      	b.n	80017f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001746:	4b10      	ldr	r3, [pc, #64]	; (8001788 <HAL_RCC_OscConfig+0x478>)
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174c:	f7ff fb2c 	bl	8000da8 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001754:	f7ff fb28 	bl	8000da8 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e045      	b.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001766:	4b06      	ldr	r3, [pc, #24]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f0      	bne.n	8001754 <HAL_RCC_OscConfig+0x444>
 8001772:	e03d      	b.n	80017f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d107      	bne.n	800178c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e038      	b.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
 8001780:	40023800 	.word	0x40023800
 8001784:	40007000 	.word	0x40007000
 8001788:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800178c:	4b1b      	ldr	r3, [pc, #108]	; (80017fc <HAL_RCC_OscConfig+0x4ec>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d028      	beq.n	80017ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d121      	bne.n	80017ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d11a      	bne.n	80017ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017bc:	4013      	ands	r3, r2
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d111      	bne.n	80017ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d2:	085b      	lsrs	r3, r3, #1
 80017d4:	3b01      	subs	r3, #1
 80017d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017d8:	429a      	cmp	r2, r3
 80017da:	d107      	bne.n	80017ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d001      	beq.n	80017f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e000      	b.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40023800 	.word	0x40023800

08001800 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d101      	bne.n	8001814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e0cc      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001814:	4b68      	ldr	r3, [pc, #416]	; (80019b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	d90c      	bls.n	800183c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001822:	4b65      	ldr	r3, [pc, #404]	; (80019b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800182a:	4b63      	ldr	r3, [pc, #396]	; (80019b8 <HAL_RCC_ClockConfig+0x1b8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d001      	beq.n	800183c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e0b8      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d020      	beq.n	800188a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b00      	cmp	r3, #0
 8001852:	d005      	beq.n	8001860 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001854:	4b59      	ldr	r3, [pc, #356]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	4a58      	ldr	r2, [pc, #352]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800185e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0308 	and.w	r3, r3, #8
 8001868:	2b00      	cmp	r3, #0
 800186a:	d005      	beq.n	8001878 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800186c:	4b53      	ldr	r3, [pc, #332]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	4a52      	ldr	r2, [pc, #328]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001876:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001878:	4b50      	ldr	r3, [pc, #320]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	494d      	ldr	r1, [pc, #308]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	4313      	orrs	r3, r2
 8001888:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d044      	beq.n	8001920 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d107      	bne.n	80018ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189e:	4b47      	ldr	r3, [pc, #284]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d119      	bne.n	80018de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e07f      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d003      	beq.n	80018be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ba:	2b03      	cmp	r3, #3
 80018bc:	d107      	bne.n	80018ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018be:	4b3f      	ldr	r3, [pc, #252]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d109      	bne.n	80018de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e06f      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ce:	4b3b      	ldr	r3, [pc, #236]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e067      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018de:	4b37      	ldr	r3, [pc, #220]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f023 0203 	bic.w	r2, r3, #3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	4934      	ldr	r1, [pc, #208]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018f0:	f7ff fa5a 	bl	8000da8 <HAL_GetTick>
 80018f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f6:	e00a      	b.n	800190e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018f8:	f7ff fa56 	bl	8000da8 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	f241 3288 	movw	r2, #5000	; 0x1388
 8001906:	4293      	cmp	r3, r2
 8001908:	d901      	bls.n	800190e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e04f      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800190e:	4b2b      	ldr	r3, [pc, #172]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 020c 	and.w	r2, r3, #12
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	429a      	cmp	r2, r3
 800191e:	d1eb      	bne.n	80018f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001920:	4b25      	ldr	r3, [pc, #148]	; (80019b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0307 	and.w	r3, r3, #7
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	429a      	cmp	r2, r3
 800192c:	d20c      	bcs.n	8001948 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192e:	4b22      	ldr	r3, [pc, #136]	; (80019b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001936:	4b20      	ldr	r3, [pc, #128]	; (80019b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d001      	beq.n	8001948 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e032      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b00      	cmp	r3, #0
 8001952:	d008      	beq.n	8001966 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001954:	4b19      	ldr	r3, [pc, #100]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	4916      	ldr	r1, [pc, #88]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	4313      	orrs	r3, r2
 8001964:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	2b00      	cmp	r3, #0
 8001970:	d009      	beq.n	8001986 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001972:	4b12      	ldr	r3, [pc, #72]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	490e      	ldr	r1, [pc, #56]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	4313      	orrs	r3, r2
 8001984:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001986:	f000 f821 	bl	80019cc <HAL_RCC_GetSysClockFreq>
 800198a:	4602      	mov	r2, r0
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	091b      	lsrs	r3, r3, #4
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	490a      	ldr	r1, [pc, #40]	; (80019c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001998:	5ccb      	ldrb	r3, [r1, r3]
 800199a:	fa22 f303 	lsr.w	r3, r2, r3
 800199e:	4a09      	ldr	r2, [pc, #36]	; (80019c4 <HAL_RCC_ClockConfig+0x1c4>)
 80019a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <HAL_RCC_ClockConfig+0x1c8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff f9ba 	bl	8000d20 <HAL_InitTick>

  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40023c00 	.word	0x40023c00
 80019bc:	40023800 	.word	0x40023800
 80019c0:	08005444 	.word	0x08005444
 80019c4:	20000000 	.word	0x20000000
 80019c8:	20000004 	.word	0x20000004

080019cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019d0:	b094      	sub	sp, #80	; 0x50
 80019d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019d4:	2300      	movs	r3, #0
 80019d6:	647b      	str	r3, [r7, #68]	; 0x44
 80019d8:	2300      	movs	r3, #0
 80019da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019dc:	2300      	movs	r3, #0
 80019de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019e4:	4b79      	ldr	r3, [pc, #484]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x200>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 030c 	and.w	r3, r3, #12
 80019ec:	2b08      	cmp	r3, #8
 80019ee:	d00d      	beq.n	8001a0c <HAL_RCC_GetSysClockFreq+0x40>
 80019f0:	2b08      	cmp	r3, #8
 80019f2:	f200 80e1 	bhi.w	8001bb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d002      	beq.n	8001a00 <HAL_RCC_GetSysClockFreq+0x34>
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	d003      	beq.n	8001a06 <HAL_RCC_GetSysClockFreq+0x3a>
 80019fe:	e0db      	b.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a00:	4b73      	ldr	r3, [pc, #460]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a02:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a04:	e0db      	b.n	8001bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a06:	4b73      	ldr	r3, [pc, #460]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a0a:	e0d8      	b.n	8001bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a0c:	4b6f      	ldr	r3, [pc, #444]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a14:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a16:	4b6d      	ldr	r3, [pc, #436]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d063      	beq.n	8001aea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a22:	4b6a      	ldr	r3, [pc, #424]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	099b      	lsrs	r3, r3, #6
 8001a28:	2200      	movs	r2, #0
 8001a2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a34:	633b      	str	r3, [r7, #48]	; 0x30
 8001a36:	2300      	movs	r3, #0
 8001a38:	637b      	str	r3, [r7, #52]	; 0x34
 8001a3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a3e:	4622      	mov	r2, r4
 8001a40:	462b      	mov	r3, r5
 8001a42:	f04f 0000 	mov.w	r0, #0
 8001a46:	f04f 0100 	mov.w	r1, #0
 8001a4a:	0159      	lsls	r1, r3, #5
 8001a4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a50:	0150      	lsls	r0, r2, #5
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	4621      	mov	r1, r4
 8001a58:	1a51      	subs	r1, r2, r1
 8001a5a:	6139      	str	r1, [r7, #16]
 8001a5c:	4629      	mov	r1, r5
 8001a5e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a70:	4659      	mov	r1, fp
 8001a72:	018b      	lsls	r3, r1, #6
 8001a74:	4651      	mov	r1, sl
 8001a76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a7a:	4651      	mov	r1, sl
 8001a7c:	018a      	lsls	r2, r1, #6
 8001a7e:	4651      	mov	r1, sl
 8001a80:	ebb2 0801 	subs.w	r8, r2, r1
 8001a84:	4659      	mov	r1, fp
 8001a86:	eb63 0901 	sbc.w	r9, r3, r1
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	f04f 0300 	mov.w	r3, #0
 8001a92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a9e:	4690      	mov	r8, r2
 8001aa0:	4699      	mov	r9, r3
 8001aa2:	4623      	mov	r3, r4
 8001aa4:	eb18 0303 	adds.w	r3, r8, r3
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	462b      	mov	r3, r5
 8001aac:	eb49 0303 	adc.w	r3, r9, r3
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	f04f 0300 	mov.w	r3, #0
 8001aba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001abe:	4629      	mov	r1, r5
 8001ac0:	024b      	lsls	r3, r1, #9
 8001ac2:	4621      	mov	r1, r4
 8001ac4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ac8:	4621      	mov	r1, r4
 8001aca:	024a      	lsls	r2, r1, #9
 8001acc:	4610      	mov	r0, r2
 8001ace:	4619      	mov	r1, r3
 8001ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ad6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ad8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001adc:	f7fe fbd0 	bl	8000280 <__aeabi_uldivmod>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ae8:	e058      	b.n	8001b9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aea:	4b38      	ldr	r3, [pc, #224]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	099b      	lsrs	r3, r3, #6
 8001af0:	2200      	movs	r2, #0
 8001af2:	4618      	mov	r0, r3
 8001af4:	4611      	mov	r1, r2
 8001af6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001afa:	623b      	str	r3, [r7, #32]
 8001afc:	2300      	movs	r3, #0
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
 8001b00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b04:	4642      	mov	r2, r8
 8001b06:	464b      	mov	r3, r9
 8001b08:	f04f 0000 	mov.w	r0, #0
 8001b0c:	f04f 0100 	mov.w	r1, #0
 8001b10:	0159      	lsls	r1, r3, #5
 8001b12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b16:	0150      	lsls	r0, r2, #5
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4641      	mov	r1, r8
 8001b1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b22:	4649      	mov	r1, r9
 8001b24:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	f04f 0300 	mov.w	r3, #0
 8001b30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b3c:	ebb2 040a 	subs.w	r4, r2, sl
 8001b40:	eb63 050b 	sbc.w	r5, r3, fp
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	f04f 0300 	mov.w	r3, #0
 8001b4c:	00eb      	lsls	r3, r5, #3
 8001b4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b52:	00e2      	lsls	r2, r4, #3
 8001b54:	4614      	mov	r4, r2
 8001b56:	461d      	mov	r5, r3
 8001b58:	4643      	mov	r3, r8
 8001b5a:	18e3      	adds	r3, r4, r3
 8001b5c:	603b      	str	r3, [r7, #0]
 8001b5e:	464b      	mov	r3, r9
 8001b60:	eb45 0303 	adc.w	r3, r5, r3
 8001b64:	607b      	str	r3, [r7, #4]
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	f04f 0300 	mov.w	r3, #0
 8001b6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b72:	4629      	mov	r1, r5
 8001b74:	028b      	lsls	r3, r1, #10
 8001b76:	4621      	mov	r1, r4
 8001b78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b7c:	4621      	mov	r1, r4
 8001b7e:	028a      	lsls	r2, r1, #10
 8001b80:	4610      	mov	r0, r2
 8001b82:	4619      	mov	r1, r3
 8001b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b86:	2200      	movs	r2, #0
 8001b88:	61bb      	str	r3, [r7, #24]
 8001b8a:	61fa      	str	r2, [r7, #28]
 8001b8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b90:	f7fe fb76 	bl	8000280 <__aeabi_uldivmod>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4613      	mov	r3, r2
 8001b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	0c1b      	lsrs	r3, r3, #16
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001bac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bb6:	e002      	b.n	8001bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bb8:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3750      	adds	r7, #80	; 0x50
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	00f42400 	.word	0x00f42400
 8001bd4:	007a1200 	.word	0x007a1200

08001bd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bdc:	4b03      	ldr	r3, [pc, #12]	; (8001bec <HAL_RCC_GetHCLKFreq+0x14>)
 8001bde:	681b      	ldr	r3, [r3, #0]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	20000000 	.word	0x20000000

08001bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bf4:	f7ff fff0 	bl	8001bd8 <HAL_RCC_GetHCLKFreq>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	0a9b      	lsrs	r3, r3, #10
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	4903      	ldr	r1, [pc, #12]	; (8001c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c06:	5ccb      	ldrb	r3, [r1, r3]
 8001c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40023800 	.word	0x40023800
 8001c14:	08005454 	.word	0x08005454

08001c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c1c:	f7ff ffdc 	bl	8001bd8 <HAL_RCC_GetHCLKFreq>
 8001c20:	4602      	mov	r2, r0
 8001c22:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	0b5b      	lsrs	r3, r3, #13
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	4903      	ldr	r1, [pc, #12]	; (8001c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c2e:	5ccb      	ldrb	r3, [r1, r3]
 8001c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	08005454 	.word	0x08005454

08001c40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e07b      	b.n	8001d4a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d108      	bne.n	8001c6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c62:	d009      	beq.n	8001c78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	61da      	str	r2, [r3, #28]
 8001c6a:	e005      	b.n	8001c78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d106      	bne.n	8001c98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7fe fe88 	bl	80009a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfc:	ea42 0103 	orr.w	r1, r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	0c1b      	lsrs	r3, r3, #16
 8001d16:	f003 0104 	and.w	r1, r3, #4
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	f003 0210 	and.w	r2, r3, #16
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	430a      	orrs	r2, r1
 8001d28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	69da      	ldr	r2, [r3, #28]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b088      	sub	sp, #32
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	60f8      	str	r0, [r7, #12]
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	603b      	str	r3, [r7, #0]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d62:	2300      	movs	r3, #0
 8001d64:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d101      	bne.n	8001d74 <HAL_SPI_Transmit+0x22>
 8001d70:	2302      	movs	r3, #2
 8001d72:	e126      	b.n	8001fc2 <HAL_SPI_Transmit+0x270>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d7c:	f7ff f814 	bl	8000da8 <HAL_GetTick>
 8001d80:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001d82:	88fb      	ldrh	r3, [r7, #6]
 8001d84:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d002      	beq.n	8001d98 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001d92:	2302      	movs	r3, #2
 8001d94:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001d96:	e10b      	b.n	8001fb0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <HAL_SPI_Transmit+0x52>
 8001d9e:	88fb      	ldrh	r3, [r7, #6]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d102      	bne.n	8001daa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001da8:	e102      	b.n	8001fb0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2203      	movs	r2, #3
 8001dae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	88fa      	ldrh	r2, [r7, #6]
 8001dc2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	88fa      	ldrh	r2, [r7, #6]
 8001dc8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2200      	movs	r2, #0
 8001de0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001df0:	d10f      	bne.n	8001e12 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e10:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e1c:	2b40      	cmp	r3, #64	; 0x40
 8001e1e:	d007      	beq.n	8001e30 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e38:	d14b      	bne.n	8001ed2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d002      	beq.n	8001e48 <HAL_SPI_Transmit+0xf6>
 8001e42:	8afb      	ldrh	r3, [r7, #22]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d13e      	bne.n	8001ec6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4c:	881a      	ldrh	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e58:	1c9a      	adds	r2, r3, #2
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	3b01      	subs	r3, #1
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001e6c:	e02b      	b.n	8001ec6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d112      	bne.n	8001ea2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e80:	881a      	ldrh	r2, [r3, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8c:	1c9a      	adds	r2, r3, #2
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	86da      	strh	r2, [r3, #54]	; 0x36
 8001ea0:	e011      	b.n	8001ec6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ea2:	f7fe ff81 	bl	8000da8 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d803      	bhi.n	8001eba <HAL_SPI_Transmit+0x168>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb8:	d102      	bne.n	8001ec0 <HAL_SPI_Transmit+0x16e>
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d102      	bne.n	8001ec6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001ec4:	e074      	b.n	8001fb0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1ce      	bne.n	8001e6e <HAL_SPI_Transmit+0x11c>
 8001ed0:	e04c      	b.n	8001f6c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d002      	beq.n	8001ee0 <HAL_SPI_Transmit+0x18e>
 8001eda:	8afb      	ldrh	r3, [r7, #22]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d140      	bne.n	8001f62 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	330c      	adds	r3, #12
 8001eea:	7812      	ldrb	r2, [r2, #0]
 8001eec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	1c5a      	adds	r2, r3, #1
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	3b01      	subs	r3, #1
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001f06:	e02c      	b.n	8001f62 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d113      	bne.n	8001f3e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	330c      	adds	r3, #12
 8001f20:	7812      	ldrb	r2, [r2, #0]
 8001f22:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f28:	1c5a      	adds	r2, r3, #1
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	3b01      	subs	r3, #1
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f3c:	e011      	b.n	8001f62 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f3e:	f7fe ff33 	bl	8000da8 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d803      	bhi.n	8001f56 <HAL_SPI_Transmit+0x204>
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f54:	d102      	bne.n	8001f5c <HAL_SPI_Transmit+0x20a>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d102      	bne.n	8001f62 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001f60:	e026      	b.n	8001fb0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1cd      	bne.n	8001f08 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	6839      	ldr	r1, [r7, #0]
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f000 fa55 	bl	8002420 <SPI_EndRxTxTransaction>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d002      	beq.n	8001f82 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10a      	bne.n	8001fa0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d002      	beq.n	8001fae <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	77fb      	strb	r3, [r7, #31]
 8001fac:	e000      	b.n	8001fb0 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001fae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001fc0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3720      	adds	r7, #32
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b08c      	sub	sp, #48	; 0x30
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
 8001fd6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <HAL_SPI_TransmitReceive+0x26>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e18a      	b.n	8002306 <HAL_SPI_TransmitReceive+0x33c>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ff8:	f7fe fed6 	bl	8000da8 <HAL_GetTick>
 8001ffc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002004:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800200e:	887b      	ldrh	r3, [r7, #2]
 8002010:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002012:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002016:	2b01      	cmp	r3, #1
 8002018:	d00f      	beq.n	800203a <HAL_SPI_TransmitReceive+0x70>
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002020:	d107      	bne.n	8002032 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d103      	bne.n	8002032 <HAL_SPI_TransmitReceive+0x68>
 800202a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800202e:	2b04      	cmp	r3, #4
 8002030:	d003      	beq.n	800203a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002032:	2302      	movs	r3, #2
 8002034:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002038:	e15b      	b.n	80022f2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <HAL_SPI_TransmitReceive+0x82>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d002      	beq.n	800204c <HAL_SPI_TransmitReceive+0x82>
 8002046:	887b      	ldrh	r3, [r7, #2]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d103      	bne.n	8002054 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002052:	e14e      	b.n	80022f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b04      	cmp	r3, #4
 800205e:	d003      	beq.n	8002068 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2205      	movs	r2, #5
 8002064:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	887a      	ldrh	r2, [r7, #2]
 8002078:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	887a      	ldrh	r2, [r7, #2]
 800207e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	887a      	ldrh	r2, [r7, #2]
 800208a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	887a      	ldrh	r2, [r7, #2]
 8002090:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a8:	2b40      	cmp	r3, #64	; 0x40
 80020aa:	d007      	beq.n	80020bc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020c4:	d178      	bne.n	80021b8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d002      	beq.n	80020d4 <HAL_SPI_TransmitReceive+0x10a>
 80020ce:	8b7b      	ldrh	r3, [r7, #26]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d166      	bne.n	80021a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d8:	881a      	ldrh	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e4:	1c9a      	adds	r2, r3, #2
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	3b01      	subs	r3, #1
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020f8:	e053      	b.n	80021a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b02      	cmp	r3, #2
 8002106:	d11b      	bne.n	8002140 <HAL_SPI_TransmitReceive+0x176>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800210c:	b29b      	uxth	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d016      	beq.n	8002140 <HAL_SPI_TransmitReceive+0x176>
 8002112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002114:	2b01      	cmp	r3, #1
 8002116:	d113      	bne.n	8002140 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211c:	881a      	ldrh	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002128:	1c9a      	adds	r2, r3, #2
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002132:	b29b      	uxth	r3, r3
 8002134:	3b01      	subs	r3, #1
 8002136:	b29a      	uxth	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b01      	cmp	r3, #1
 800214c:	d119      	bne.n	8002182 <HAL_SPI_TransmitReceive+0x1b8>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002152:	b29b      	uxth	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	d014      	beq.n	8002182 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002162:	b292      	uxth	r2, r2
 8002164:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800216a:	1c9a      	adds	r2, r3, #2
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002174:	b29b      	uxth	r3, r3
 8002176:	3b01      	subs	r3, #1
 8002178:	b29a      	uxth	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800217e:	2301      	movs	r3, #1
 8002180:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002182:	f7fe fe11 	bl	8000da8 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800218e:	429a      	cmp	r2, r3
 8002190:	d807      	bhi.n	80021a2 <HAL_SPI_TransmitReceive+0x1d8>
 8002192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002198:	d003      	beq.n	80021a2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80021a0:	e0a7      	b.n	80022f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1a6      	bne.n	80020fa <HAL_SPI_TransmitReceive+0x130>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1a1      	bne.n	80020fa <HAL_SPI_TransmitReceive+0x130>
 80021b6:	e07c      	b.n	80022b2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d002      	beq.n	80021c6 <HAL_SPI_TransmitReceive+0x1fc>
 80021c0:	8b7b      	ldrh	r3, [r7, #26]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d16b      	bne.n	800229e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	330c      	adds	r3, #12
 80021d0:	7812      	ldrb	r2, [r2, #0]
 80021d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	3b01      	subs	r3, #1
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021ec:	e057      	b.n	800229e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d11c      	bne.n	8002236 <HAL_SPI_TransmitReceive+0x26c>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002200:	b29b      	uxth	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d017      	beq.n	8002236 <HAL_SPI_TransmitReceive+0x26c>
 8002206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002208:	2b01      	cmp	r3, #1
 800220a:	d114      	bne.n	8002236 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	330c      	adds	r3, #12
 8002216:	7812      	ldrb	r2, [r2, #0]
 8002218:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	1c5a      	adds	r2, r3, #1
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002228:	b29b      	uxth	r3, r3
 800222a:	3b01      	subs	r3, #1
 800222c:	b29a      	uxth	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002232:	2300      	movs	r3, #0
 8002234:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	2b01      	cmp	r3, #1
 8002242:	d119      	bne.n	8002278 <HAL_SPI_TransmitReceive+0x2ae>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002248:	b29b      	uxth	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d014      	beq.n	8002278 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68da      	ldr	r2, [r3, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002260:	1c5a      	adds	r2, r3, #1
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800226a:	b29b      	uxth	r3, r3
 800226c:	3b01      	subs	r3, #1
 800226e:	b29a      	uxth	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002274:	2301      	movs	r3, #1
 8002276:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002278:	f7fe fd96 	bl	8000da8 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002284:	429a      	cmp	r2, r3
 8002286:	d803      	bhi.n	8002290 <HAL_SPI_TransmitReceive+0x2c6>
 8002288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800228a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800228e:	d102      	bne.n	8002296 <HAL_SPI_TransmitReceive+0x2cc>
 8002290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002292:	2b00      	cmp	r3, #0
 8002294:	d103      	bne.n	800229e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800229c:	e029      	b.n	80022f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1a2      	bne.n	80021ee <HAL_SPI_TransmitReceive+0x224>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d19d      	bne.n	80021ee <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 f8b2 	bl	8002420 <SPI_EndRxTxTransaction>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d006      	beq.n	80022d0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2220      	movs	r2, #32
 80022cc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80022ce:	e010      	b.n	80022f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10b      	bne.n	80022f0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	e000      	b.n	80022f2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80022f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002302:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002306:	4618      	mov	r0, r3
 8002308:	3730      	adds	r7, #48	; 0x30
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b088      	sub	sp, #32
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	603b      	str	r3, [r7, #0]
 800231c:	4613      	mov	r3, r2
 800231e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002320:	f7fe fd42 	bl	8000da8 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002328:	1a9b      	subs	r3, r3, r2
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	4413      	add	r3, r2
 800232e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002330:	f7fe fd3a 	bl	8000da8 <HAL_GetTick>
 8002334:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002336:	4b39      	ldr	r3, [pc, #228]	; (800241c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	015b      	lsls	r3, r3, #5
 800233c:	0d1b      	lsrs	r3, r3, #20
 800233e:	69fa      	ldr	r2, [r7, #28]
 8002340:	fb02 f303 	mul.w	r3, r2, r3
 8002344:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002346:	e054      	b.n	80023f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234e:	d050      	beq.n	80023f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002350:	f7fe fd2a 	bl	8000da8 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	69fa      	ldr	r2, [r7, #28]
 800235c:	429a      	cmp	r2, r3
 800235e:	d902      	bls.n	8002366 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d13d      	bne.n	80023e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002374:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800237e:	d111      	bne.n	80023a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002388:	d004      	beq.n	8002394 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002392:	d107      	bne.n	80023a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023ac:	d10f      	bne.n	80023ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e017      	b.n	8002412 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	4013      	ands	r3, r2
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	429a      	cmp	r2, r3
 8002400:	bf0c      	ite	eq
 8002402:	2301      	moveq	r3, #1
 8002404:	2300      	movne	r3, #0
 8002406:	b2db      	uxtb	r3, r3
 8002408:	461a      	mov	r2, r3
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	429a      	cmp	r2, r3
 800240e:	d19b      	bne.n	8002348 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3720      	adds	r7, #32
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20000000 	.word	0x20000000

08002420 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b088      	sub	sp, #32
 8002424:	af02      	add	r7, sp, #8
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800242c:	4b1b      	ldr	r3, [pc, #108]	; (800249c <SPI_EndRxTxTransaction+0x7c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a1b      	ldr	r2, [pc, #108]	; (80024a0 <SPI_EndRxTxTransaction+0x80>)
 8002432:	fba2 2303 	umull	r2, r3, r2, r3
 8002436:	0d5b      	lsrs	r3, r3, #21
 8002438:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800243c:	fb02 f303 	mul.w	r3, r2, r3
 8002440:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800244a:	d112      	bne.n	8002472 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2200      	movs	r2, #0
 8002454:	2180      	movs	r1, #128	; 0x80
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f7ff ff5a 	bl	8002310 <SPI_WaitFlagStateUntilTimeout>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d016      	beq.n	8002490 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002466:	f043 0220 	orr.w	r2, r3, #32
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e00f      	b.n	8002492 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00a      	beq.n	800248e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	3b01      	subs	r3, #1
 800247c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002488:	2b80      	cmp	r3, #128	; 0x80
 800248a:	d0f2      	beq.n	8002472 <SPI_EndRxTxTransaction+0x52>
 800248c:	e000      	b.n	8002490 <SPI_EndRxTxTransaction+0x70>
        break;
 800248e:	bf00      	nop
  }

  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3718      	adds	r7, #24
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20000000 	.word	0x20000000
 80024a0:	165e9f81 	.word	0x165e9f81

080024a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e03f      	b.n	8002536 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d106      	bne.n	80024d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7fe fab4 	bl	8000a38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2224      	movs	r2, #36	; 0x24
 80024d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 f929 	bl	8002740 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	691a      	ldr	r2, [r3, #16]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	695a      	ldr	r2, [r3, #20]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800250c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68da      	ldr	r2, [r3, #12]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800251c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2220      	movs	r2, #32
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b08a      	sub	sp, #40	; 0x28
 8002542:	af02      	add	r7, sp, #8
 8002544:	60f8      	str	r0, [r7, #12]
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	603b      	str	r3, [r7, #0]
 800254a:	4613      	mov	r3, r2
 800254c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b20      	cmp	r3, #32
 800255c:	d17c      	bne.n	8002658 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d002      	beq.n	800256a <HAL_UART_Transmit+0x2c>
 8002564:	88fb      	ldrh	r3, [r7, #6]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e075      	b.n	800265a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002574:	2b01      	cmp	r3, #1
 8002576:	d101      	bne.n	800257c <HAL_UART_Transmit+0x3e>
 8002578:	2302      	movs	r3, #2
 800257a:	e06e      	b.n	800265a <HAL_UART_Transmit+0x11c>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2221      	movs	r2, #33	; 0x21
 800258e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002592:	f7fe fc09 	bl	8000da8 <HAL_GetTick>
 8002596:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	88fa      	ldrh	r2, [r7, #6]
 800259c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	88fa      	ldrh	r2, [r7, #6]
 80025a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ac:	d108      	bne.n	80025c0 <HAL_UART_Transmit+0x82>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d104      	bne.n	80025c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	61bb      	str	r3, [r7, #24]
 80025be:	e003      	b.n	80025c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80025d0:	e02a      	b.n	8002628 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	2200      	movs	r2, #0
 80025da:	2180      	movs	r1, #128	; 0x80
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 f840 	bl	8002662 <UART_WaitOnFlagUntilTimeout>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e036      	b.n	800265a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10b      	bne.n	800260a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	461a      	mov	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002600:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	3302      	adds	r3, #2
 8002606:	61bb      	str	r3, [r7, #24]
 8002608:	e007      	b.n	800261a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	781a      	ldrb	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	3301      	adds	r3, #1
 8002618:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800261e:	b29b      	uxth	r3, r3
 8002620:	3b01      	subs	r3, #1
 8002622:	b29a      	uxth	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800262c:	b29b      	uxth	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1cf      	bne.n	80025d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	2200      	movs	r2, #0
 800263a:	2140      	movs	r1, #64	; 0x40
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f000 f810 	bl	8002662 <UART_WaitOnFlagUntilTimeout>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e006      	b.n	800265a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2220      	movs	r2, #32
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002654:	2300      	movs	r3, #0
 8002656:	e000      	b.n	800265a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002658:	2302      	movs	r3, #2
  }
}
 800265a:	4618      	mov	r0, r3
 800265c:	3720      	adds	r7, #32
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b090      	sub	sp, #64	; 0x40
 8002666:	af00      	add	r7, sp, #0
 8002668:	60f8      	str	r0, [r7, #12]
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	603b      	str	r3, [r7, #0]
 800266e:	4613      	mov	r3, r2
 8002670:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002672:	e050      	b.n	8002716 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800267a:	d04c      	beq.n	8002716 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800267c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800267e:	2b00      	cmp	r3, #0
 8002680:	d007      	beq.n	8002692 <UART_WaitOnFlagUntilTimeout+0x30>
 8002682:	f7fe fb91 	bl	8000da8 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800268e:	429a      	cmp	r2, r3
 8002690:	d241      	bcs.n	8002716 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	330c      	adds	r3, #12
 8002698:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800269a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269c:	e853 3f00 	ldrex	r3, [r3]
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80026a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	330c      	adds	r3, #12
 80026b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026b2:	637a      	str	r2, [r7, #52]	; 0x34
 80026b4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026ba:	e841 2300 	strex	r3, r2, [r1]
 80026be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80026c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1e5      	bne.n	8002692 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	3314      	adds	r3, #20
 80026cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	e853 3f00 	ldrex	r3, [r3]
 80026d4:	613b      	str	r3, [r7, #16]
   return(result);
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	f023 0301 	bic.w	r3, r3, #1
 80026dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	3314      	adds	r3, #20
 80026e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026e6:	623a      	str	r2, [r7, #32]
 80026e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ea:	69f9      	ldr	r1, [r7, #28]
 80026ec:	6a3a      	ldr	r2, [r7, #32]
 80026ee:	e841 2300 	strex	r3, r2, [r1]
 80026f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1e5      	bne.n	80026c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2220      	movs	r2, #32
 80026fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2220      	movs	r2, #32
 8002706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e00f      	b.n	8002736 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	4013      	ands	r3, r2
 8002720:	68ba      	ldr	r2, [r7, #8]
 8002722:	429a      	cmp	r2, r3
 8002724:	bf0c      	ite	eq
 8002726:	2301      	moveq	r3, #1
 8002728:	2300      	movne	r3, #0
 800272a:	b2db      	uxtb	r3, r3
 800272c:	461a      	mov	r2, r3
 800272e:	79fb      	ldrb	r3, [r7, #7]
 8002730:	429a      	cmp	r2, r3
 8002732:	d09f      	beq.n	8002674 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3740      	adds	r7, #64	; 0x40
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002744:	b0c0      	sub	sp, #256	; 0x100
 8002746:	af00      	add	r7, sp, #0
 8002748:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800274c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800275c:	68d9      	ldr	r1, [r3, #12]
 800275e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	ea40 0301 	orr.w	r3, r0, r1
 8002768:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800276a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	431a      	orrs	r2, r3
 8002778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	431a      	orrs	r2, r3
 8002780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800278c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002798:	f021 010c 	bic.w	r1, r1, #12
 800279c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80027a6:	430b      	orrs	r3, r1
 80027a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80027b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ba:	6999      	ldr	r1, [r3, #24]
 80027bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	ea40 0301 	orr.w	r3, r0, r1
 80027c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	4b8f      	ldr	r3, [pc, #572]	; (8002a0c <UART_SetConfig+0x2cc>)
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d005      	beq.n	80027e0 <UART_SetConfig+0xa0>
 80027d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	4b8d      	ldr	r3, [pc, #564]	; (8002a10 <UART_SetConfig+0x2d0>)
 80027dc:	429a      	cmp	r2, r3
 80027de:	d104      	bne.n	80027ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80027e0:	f7ff fa1a 	bl	8001c18 <HAL_RCC_GetPCLK2Freq>
 80027e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80027e8:	e003      	b.n	80027f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80027ea:	f7ff fa01 	bl	8001bf0 <HAL_RCC_GetPCLK1Freq>
 80027ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027fc:	f040 810c 	bne.w	8002a18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002800:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002804:	2200      	movs	r2, #0
 8002806:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800280a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800280e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002812:	4622      	mov	r2, r4
 8002814:	462b      	mov	r3, r5
 8002816:	1891      	adds	r1, r2, r2
 8002818:	65b9      	str	r1, [r7, #88]	; 0x58
 800281a:	415b      	adcs	r3, r3
 800281c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800281e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002822:	4621      	mov	r1, r4
 8002824:	eb12 0801 	adds.w	r8, r2, r1
 8002828:	4629      	mov	r1, r5
 800282a:	eb43 0901 	adc.w	r9, r3, r1
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	f04f 0300 	mov.w	r3, #0
 8002836:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800283a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800283e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002842:	4690      	mov	r8, r2
 8002844:	4699      	mov	r9, r3
 8002846:	4623      	mov	r3, r4
 8002848:	eb18 0303 	adds.w	r3, r8, r3
 800284c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002850:	462b      	mov	r3, r5
 8002852:	eb49 0303 	adc.w	r3, r9, r3
 8002856:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800285a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002866:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800286a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800286e:	460b      	mov	r3, r1
 8002870:	18db      	adds	r3, r3, r3
 8002872:	653b      	str	r3, [r7, #80]	; 0x50
 8002874:	4613      	mov	r3, r2
 8002876:	eb42 0303 	adc.w	r3, r2, r3
 800287a:	657b      	str	r3, [r7, #84]	; 0x54
 800287c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002880:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002884:	f7fd fcfc 	bl	8000280 <__aeabi_uldivmod>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	4b61      	ldr	r3, [pc, #388]	; (8002a14 <UART_SetConfig+0x2d4>)
 800288e:	fba3 2302 	umull	r2, r3, r3, r2
 8002892:	095b      	lsrs	r3, r3, #5
 8002894:	011c      	lsls	r4, r3, #4
 8002896:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800289a:	2200      	movs	r2, #0
 800289c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80028a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80028a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80028a8:	4642      	mov	r2, r8
 80028aa:	464b      	mov	r3, r9
 80028ac:	1891      	adds	r1, r2, r2
 80028ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80028b0:	415b      	adcs	r3, r3
 80028b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80028b8:	4641      	mov	r1, r8
 80028ba:	eb12 0a01 	adds.w	sl, r2, r1
 80028be:	4649      	mov	r1, r9
 80028c0:	eb43 0b01 	adc.w	fp, r3, r1
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80028d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80028d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028d8:	4692      	mov	sl, r2
 80028da:	469b      	mov	fp, r3
 80028dc:	4643      	mov	r3, r8
 80028de:	eb1a 0303 	adds.w	r3, sl, r3
 80028e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80028e6:	464b      	mov	r3, r9
 80028e8:	eb4b 0303 	adc.w	r3, fp, r3
 80028ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80028f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002900:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002904:	460b      	mov	r3, r1
 8002906:	18db      	adds	r3, r3, r3
 8002908:	643b      	str	r3, [r7, #64]	; 0x40
 800290a:	4613      	mov	r3, r2
 800290c:	eb42 0303 	adc.w	r3, r2, r3
 8002910:	647b      	str	r3, [r7, #68]	; 0x44
 8002912:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002916:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800291a:	f7fd fcb1 	bl	8000280 <__aeabi_uldivmod>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	4611      	mov	r1, r2
 8002924:	4b3b      	ldr	r3, [pc, #236]	; (8002a14 <UART_SetConfig+0x2d4>)
 8002926:	fba3 2301 	umull	r2, r3, r3, r1
 800292a:	095b      	lsrs	r3, r3, #5
 800292c:	2264      	movs	r2, #100	; 0x64
 800292e:	fb02 f303 	mul.w	r3, r2, r3
 8002932:	1acb      	subs	r3, r1, r3
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800293a:	4b36      	ldr	r3, [pc, #216]	; (8002a14 <UART_SetConfig+0x2d4>)
 800293c:	fba3 2302 	umull	r2, r3, r3, r2
 8002940:	095b      	lsrs	r3, r3, #5
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002948:	441c      	add	r4, r3
 800294a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800294e:	2200      	movs	r2, #0
 8002950:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002954:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002958:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800295c:	4642      	mov	r2, r8
 800295e:	464b      	mov	r3, r9
 8002960:	1891      	adds	r1, r2, r2
 8002962:	63b9      	str	r1, [r7, #56]	; 0x38
 8002964:	415b      	adcs	r3, r3
 8002966:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002968:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800296c:	4641      	mov	r1, r8
 800296e:	1851      	adds	r1, r2, r1
 8002970:	6339      	str	r1, [r7, #48]	; 0x30
 8002972:	4649      	mov	r1, r9
 8002974:	414b      	adcs	r3, r1
 8002976:	637b      	str	r3, [r7, #52]	; 0x34
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002984:	4659      	mov	r1, fp
 8002986:	00cb      	lsls	r3, r1, #3
 8002988:	4651      	mov	r1, sl
 800298a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800298e:	4651      	mov	r1, sl
 8002990:	00ca      	lsls	r2, r1, #3
 8002992:	4610      	mov	r0, r2
 8002994:	4619      	mov	r1, r3
 8002996:	4603      	mov	r3, r0
 8002998:	4642      	mov	r2, r8
 800299a:	189b      	adds	r3, r3, r2
 800299c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029a0:	464b      	mov	r3, r9
 80029a2:	460a      	mov	r2, r1
 80029a4:	eb42 0303 	adc.w	r3, r2, r3
 80029a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80029b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80029bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80029c0:	460b      	mov	r3, r1
 80029c2:	18db      	adds	r3, r3, r3
 80029c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80029c6:	4613      	mov	r3, r2
 80029c8:	eb42 0303 	adc.w	r3, r2, r3
 80029cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80029d6:	f7fd fc53 	bl	8000280 <__aeabi_uldivmod>
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	4b0d      	ldr	r3, [pc, #52]	; (8002a14 <UART_SetConfig+0x2d4>)
 80029e0:	fba3 1302 	umull	r1, r3, r3, r2
 80029e4:	095b      	lsrs	r3, r3, #5
 80029e6:	2164      	movs	r1, #100	; 0x64
 80029e8:	fb01 f303 	mul.w	r3, r1, r3
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	3332      	adds	r3, #50	; 0x32
 80029f2:	4a08      	ldr	r2, [pc, #32]	; (8002a14 <UART_SetConfig+0x2d4>)
 80029f4:	fba2 2303 	umull	r2, r3, r2, r3
 80029f8:	095b      	lsrs	r3, r3, #5
 80029fa:	f003 0207 	and.w	r2, r3, #7
 80029fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4422      	add	r2, r4
 8002a06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a08:	e105      	b.n	8002c16 <UART_SetConfig+0x4d6>
 8002a0a:	bf00      	nop
 8002a0c:	40011000 	.word	0x40011000
 8002a10:	40011400 	.word	0x40011400
 8002a14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002a22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002a26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002a2a:	4642      	mov	r2, r8
 8002a2c:	464b      	mov	r3, r9
 8002a2e:	1891      	adds	r1, r2, r2
 8002a30:	6239      	str	r1, [r7, #32]
 8002a32:	415b      	adcs	r3, r3
 8002a34:	627b      	str	r3, [r7, #36]	; 0x24
 8002a36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a3a:	4641      	mov	r1, r8
 8002a3c:	1854      	adds	r4, r2, r1
 8002a3e:	4649      	mov	r1, r9
 8002a40:	eb43 0501 	adc.w	r5, r3, r1
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	f04f 0300 	mov.w	r3, #0
 8002a4c:	00eb      	lsls	r3, r5, #3
 8002a4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a52:	00e2      	lsls	r2, r4, #3
 8002a54:	4614      	mov	r4, r2
 8002a56:	461d      	mov	r5, r3
 8002a58:	4643      	mov	r3, r8
 8002a5a:	18e3      	adds	r3, r4, r3
 8002a5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002a60:	464b      	mov	r3, r9
 8002a62:	eb45 0303 	adc.w	r3, r5, r3
 8002a66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	f04f 0300 	mov.w	r3, #0
 8002a82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002a86:	4629      	mov	r1, r5
 8002a88:	008b      	lsls	r3, r1, #2
 8002a8a:	4621      	mov	r1, r4
 8002a8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a90:	4621      	mov	r1, r4
 8002a92:	008a      	lsls	r2, r1, #2
 8002a94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002a98:	f7fd fbf2 	bl	8000280 <__aeabi_uldivmod>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4b60      	ldr	r3, [pc, #384]	; (8002c24 <UART_SetConfig+0x4e4>)
 8002aa2:	fba3 2302 	umull	r2, r3, r3, r2
 8002aa6:	095b      	lsrs	r3, r3, #5
 8002aa8:	011c      	lsls	r4, r3, #4
 8002aaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ab4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ab8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002abc:	4642      	mov	r2, r8
 8002abe:	464b      	mov	r3, r9
 8002ac0:	1891      	adds	r1, r2, r2
 8002ac2:	61b9      	str	r1, [r7, #24]
 8002ac4:	415b      	adcs	r3, r3
 8002ac6:	61fb      	str	r3, [r7, #28]
 8002ac8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002acc:	4641      	mov	r1, r8
 8002ace:	1851      	adds	r1, r2, r1
 8002ad0:	6139      	str	r1, [r7, #16]
 8002ad2:	4649      	mov	r1, r9
 8002ad4:	414b      	adcs	r3, r1
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	f04f 0200 	mov.w	r2, #0
 8002adc:	f04f 0300 	mov.w	r3, #0
 8002ae0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ae4:	4659      	mov	r1, fp
 8002ae6:	00cb      	lsls	r3, r1, #3
 8002ae8:	4651      	mov	r1, sl
 8002aea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002aee:	4651      	mov	r1, sl
 8002af0:	00ca      	lsls	r2, r1, #3
 8002af2:	4610      	mov	r0, r2
 8002af4:	4619      	mov	r1, r3
 8002af6:	4603      	mov	r3, r0
 8002af8:	4642      	mov	r2, r8
 8002afa:	189b      	adds	r3, r3, r2
 8002afc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b00:	464b      	mov	r3, r9
 8002b02:	460a      	mov	r2, r1
 8002b04:	eb42 0303 	adc.w	r3, r2, r3
 8002b08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b16:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002b24:	4649      	mov	r1, r9
 8002b26:	008b      	lsls	r3, r1, #2
 8002b28:	4641      	mov	r1, r8
 8002b2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b2e:	4641      	mov	r1, r8
 8002b30:	008a      	lsls	r2, r1, #2
 8002b32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002b36:	f7fd fba3 	bl	8000280 <__aeabi_uldivmod>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4b39      	ldr	r3, [pc, #228]	; (8002c24 <UART_SetConfig+0x4e4>)
 8002b40:	fba3 1302 	umull	r1, r3, r3, r2
 8002b44:	095b      	lsrs	r3, r3, #5
 8002b46:	2164      	movs	r1, #100	; 0x64
 8002b48:	fb01 f303 	mul.w	r3, r1, r3
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	3332      	adds	r3, #50	; 0x32
 8002b52:	4a34      	ldr	r2, [pc, #208]	; (8002c24 <UART_SetConfig+0x4e4>)
 8002b54:	fba2 2303 	umull	r2, r3, r2, r3
 8002b58:	095b      	lsrs	r3, r3, #5
 8002b5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b5e:	441c      	add	r4, r3
 8002b60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b64:	2200      	movs	r2, #0
 8002b66:	673b      	str	r3, [r7, #112]	; 0x70
 8002b68:	677a      	str	r2, [r7, #116]	; 0x74
 8002b6a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002b6e:	4642      	mov	r2, r8
 8002b70:	464b      	mov	r3, r9
 8002b72:	1891      	adds	r1, r2, r2
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	415b      	adcs	r3, r3
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b7e:	4641      	mov	r1, r8
 8002b80:	1851      	adds	r1, r2, r1
 8002b82:	6039      	str	r1, [r7, #0]
 8002b84:	4649      	mov	r1, r9
 8002b86:	414b      	adcs	r3, r1
 8002b88:	607b      	str	r3, [r7, #4]
 8002b8a:	f04f 0200 	mov.w	r2, #0
 8002b8e:	f04f 0300 	mov.w	r3, #0
 8002b92:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b96:	4659      	mov	r1, fp
 8002b98:	00cb      	lsls	r3, r1, #3
 8002b9a:	4651      	mov	r1, sl
 8002b9c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ba0:	4651      	mov	r1, sl
 8002ba2:	00ca      	lsls	r2, r1, #3
 8002ba4:	4610      	mov	r0, r2
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4603      	mov	r3, r0
 8002baa:	4642      	mov	r2, r8
 8002bac:	189b      	adds	r3, r3, r2
 8002bae:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bb0:	464b      	mov	r3, r9
 8002bb2:	460a      	mov	r2, r1
 8002bb4:	eb42 0303 	adc.w	r3, r2, r3
 8002bb8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	663b      	str	r3, [r7, #96]	; 0x60
 8002bc4:	667a      	str	r2, [r7, #100]	; 0x64
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	f04f 0300 	mov.w	r3, #0
 8002bce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002bd2:	4649      	mov	r1, r9
 8002bd4:	008b      	lsls	r3, r1, #2
 8002bd6:	4641      	mov	r1, r8
 8002bd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bdc:	4641      	mov	r1, r8
 8002bde:	008a      	lsls	r2, r1, #2
 8002be0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002be4:	f7fd fb4c 	bl	8000280 <__aeabi_uldivmod>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <UART_SetConfig+0x4e4>)
 8002bee:	fba3 1302 	umull	r1, r3, r3, r2
 8002bf2:	095b      	lsrs	r3, r3, #5
 8002bf4:	2164      	movs	r1, #100	; 0x64
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	3332      	adds	r3, #50	; 0x32
 8002c00:	4a08      	ldr	r2, [pc, #32]	; (8002c24 <UART_SetConfig+0x4e4>)
 8002c02:	fba2 2303 	umull	r2, r3, r2, r3
 8002c06:	095b      	lsrs	r3, r3, #5
 8002c08:	f003 020f 	and.w	r2, r3, #15
 8002c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4422      	add	r2, r4
 8002c14:	609a      	str	r2, [r3, #8]
}
 8002c16:	bf00      	nop
 8002c18:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c22:	bf00      	nop
 8002c24:	51eb851f 	.word	0x51eb851f

08002c28 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002c2c:	4904      	ldr	r1, [pc, #16]	; (8002c40 <MX_FATFS_Init+0x18>)
 8002c2e:	4805      	ldr	r0, [pc, #20]	; (8002c44 <MX_FATFS_Init+0x1c>)
 8002c30:	f001 fb68 	bl	8004304 <FATFS_LinkDriver>
 8002c34:	4603      	mov	r3, r0
 8002c36:	461a      	mov	r2, r3
 8002c38:	4b03      	ldr	r3, [pc, #12]	; (8002c48 <MX_FATFS_Init+0x20>)
 8002c3a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002c3c:	bf00      	nop
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	2000014c 	.word	0x2000014c
 8002c44:	2000000c 	.word	0x2000000c
 8002c48:	20000148 	.word	0x20000148

08002c4c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8002c56:	79fb      	ldrb	r3, [r7, #7]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f000 f9d7 	bl	800300c <USER_SPI_initialize>
 8002c5e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f000 fab5 	bl	80031e4 <USER_SPI_status>
 8002c7a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60b9      	str	r1, [r7, #8]
 8002c8c:	607a      	str	r2, [r7, #4]
 8002c8e:	603b      	str	r3, [r7, #0]
 8002c90:	4603      	mov	r3, r0
 8002c92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8002c94:	7bf8      	ldrb	r0, [r7, #15]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	68b9      	ldr	r1, [r7, #8]
 8002c9c:	f000 fab8 	bl	8003210 <USER_SPI_read>
 8002ca0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b084      	sub	sp, #16
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
 8002cb4:	603b      	str	r3, [r7, #0]
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 8002cba:	7bf8      	ldrb	r0, [r7, #15]
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	68b9      	ldr	r1, [r7, #8]
 8002cc2:	f000 fb0b 	bl	80032dc <USER_SPI_write>
 8002cc6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	603a      	str	r2, [r7, #0]
 8002cda:	71fb      	strb	r3, [r7, #7]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8002ce0:	79b9      	ldrb	r1, [r7, #6]
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 fb74 	bl	80033d4 <USER_SPI_ioctl>
 8002cec:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
	...

08002cf8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8002d00:	f7fe f852 	bl	8000da8 <HAL_GetTick>
 8002d04:	4603      	mov	r3, r0
 8002d06:	4a04      	ldr	r2, [pc, #16]	; (8002d18 <SPI_Timer_On+0x20>)
 8002d08:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8002d0a:	4a04      	ldr	r2, [pc, #16]	; (8002d1c <SPI_Timer_On+0x24>)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6013      	str	r3, [r2, #0]
}
 8002d10:	bf00      	nop
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	20000154 	.word	0x20000154
 8002d1c:	20000158 	.word	0x20000158

08002d20 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8002d24:	f7fe f840 	bl	8000da8 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <SPI_Timer_Status+0x24>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	1ad2      	subs	r2, r2, r3
 8002d30:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <SPI_Timer_Status+0x28>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	bf34      	ite	cc
 8002d38:	2301      	movcc	r3, #1
 8002d3a:	2300      	movcs	r3, #0
 8002d3c:	b2db      	uxtb	r3, r3
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20000154 	.word	0x20000154
 8002d48:	20000158 	.word	0x20000158

08002d4c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af02      	add	r7, sp, #8
 8002d52:	4603      	mov	r3, r0
 8002d54:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8002d56:	f107 020f 	add.w	r2, r7, #15
 8002d5a:	1df9      	adds	r1, r7, #7
 8002d5c:	2332      	movs	r3, #50	; 0x32
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	2301      	movs	r3, #1
 8002d62:	4804      	ldr	r0, [pc, #16]	; (8002d74 <xchg_spi+0x28>)
 8002d64:	f7ff f931 	bl	8001fca <HAL_SPI_TransmitReceive>
    return rxDat;
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	200000a4 	.word	0x200000a4

08002d78 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8002d78:	b590      	push	{r4, r7, lr}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8002d82:	2300      	movs	r3, #0
 8002d84:	60fb      	str	r3, [r7, #12]
 8002d86:	e00a      	b.n	8002d9e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	18d4      	adds	r4, r2, r3
 8002d8e:	20ff      	movs	r0, #255	; 0xff
 8002d90:	f7ff ffdc 	bl	8002d4c <xchg_spi>
 8002d94:	4603      	mov	r3, r0
 8002d96:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d3f0      	bcc.n	8002d88 <rcvr_spi_multi+0x10>
	}
}
 8002da6:	bf00      	nop
 8002da8:	bf00      	nop
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd90      	pop	{r4, r7, pc}

08002db0 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	4803      	ldr	r0, [pc, #12]	; (8002dd4 <xmit_spi_multi+0x24>)
 8002dc6:	f7fe ffc4 	bl	8001d52 <HAL_SPI_Transmit>
}
 8002dca:	bf00      	nop
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	200000a4 	.word	0x200000a4

08002dd8 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8002de0:	f7fd ffe2 	bl	8000da8 <HAL_GetTick>
 8002de4:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8002dea:	20ff      	movs	r0, #255	; 0xff
 8002dec:	f7ff ffae 	bl	8002d4c <xchg_spi>
 8002df0:	4603      	mov	r3, r0
 8002df2:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
 8002df6:	2bff      	cmp	r3, #255	; 0xff
 8002df8:	d007      	beq.n	8002e0a <wait_ready+0x32>
 8002dfa:	f7fd ffd5 	bl	8000da8 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d8ef      	bhi.n	8002dea <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8002e0a:	7bfb      	ldrb	r3, [r7, #15]
 8002e0c:	2bff      	cmp	r3, #255	; 0xff
 8002e0e:	bf0c      	ite	eq
 8002e10:	2301      	moveq	r3, #1
 8002e12:	2300      	movne	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3718      	adds	r7, #24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
	...

08002e20 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8002e24:	2201      	movs	r2, #1
 8002e26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e2a:	4804      	ldr	r0, [pc, #16]	; (8002e3c <despiselect+0x1c>)
 8002e2c:	f7fe fa56 	bl	80012dc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8002e30:	20ff      	movs	r0, #255	; 0xff
 8002e32:	f7ff ff8b 	bl	8002d4c <xchg_spi>

}
 8002e36:	bf00      	nop
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40020400 	.word	0x40020400

08002e40 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8002e44:	2200      	movs	r2, #0
 8002e46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e4a:	480a      	ldr	r0, [pc, #40]	; (8002e74 <spiselect+0x34>)
 8002e4c:	f7fe fa46 	bl	80012dc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8002e50:	20ff      	movs	r0, #255	; 0xff
 8002e52:	f7ff ff7b 	bl	8002d4c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8002e56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e5a:	f7ff ffbd 	bl	8002dd8 <wait_ready>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <spiselect+0x28>
 8002e64:	2301      	movs	r3, #1
 8002e66:	e002      	b.n	8002e6e <spiselect+0x2e>

	despiselect();
 8002e68:	f7ff ffda 	bl	8002e20 <despiselect>
	return 0;	/* Timeout */
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40020400 	.word	0x40020400

08002e78 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8002e82:	20c8      	movs	r0, #200	; 0xc8
 8002e84:	f7ff ff38 	bl	8002cf8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8002e88:	20ff      	movs	r0, #255	; 0xff
 8002e8a:	f7ff ff5f 	bl	8002d4c <xchg_spi>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
 8002e94:	2bff      	cmp	r3, #255	; 0xff
 8002e96:	d104      	bne.n	8002ea2 <rcvr_datablock+0x2a>
 8002e98:	f7ff ff42 	bl	8002d20 <SPI_Timer_Status>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1f2      	bne.n	8002e88 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
 8002ea4:	2bfe      	cmp	r3, #254	; 0xfe
 8002ea6:	d001      	beq.n	8002eac <rcvr_datablock+0x34>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	e00a      	b.n	8002ec2 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8002eac:	6839      	ldr	r1, [r7, #0]
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7ff ff62 	bl	8002d78 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8002eb4:	20ff      	movs	r0, #255	; 0xff
 8002eb6:	f7ff ff49 	bl	8002d4c <xchg_spi>
 8002eba:	20ff      	movs	r0, #255	; 0xff
 8002ebc:	f7ff ff46 	bl	8002d4c <xchg_spi>

	return 1;						/* Function succeeded */
 8002ec0:	2301      	movs	r3, #1
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b084      	sub	sp, #16
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8002ed6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002eda:	f7ff ff7d 	bl	8002dd8 <wait_ready>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <xmit_datablock+0x1e>
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	e01e      	b.n	8002f26 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8002ee8:	78fb      	ldrb	r3, [r7, #3]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff ff2e 	bl	8002d4c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8002ef0:	78fb      	ldrb	r3, [r7, #3]
 8002ef2:	2bfd      	cmp	r3, #253	; 0xfd
 8002ef4:	d016      	beq.n	8002f24 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8002ef6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7ff ff58 	bl	8002db0 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8002f00:	20ff      	movs	r0, #255	; 0xff
 8002f02:	f7ff ff23 	bl	8002d4c <xchg_spi>
 8002f06:	20ff      	movs	r0, #255	; 0xff
 8002f08:	f7ff ff20 	bl	8002d4c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8002f0c:	20ff      	movs	r0, #255	; 0xff
 8002f0e:	f7ff ff1d 	bl	8002d4c <xchg_spi>
 8002f12:	4603      	mov	r3, r0
 8002f14:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8002f16:	7bfb      	ldrb	r3, [r7, #15]
 8002f18:	f003 031f 	and.w	r3, r3, #31
 8002f1c:	2b05      	cmp	r3, #5
 8002f1e:	d001      	beq.n	8002f24 <xmit_datablock+0x5a>
 8002f20:	2300      	movs	r3, #0
 8002f22:	e000      	b.n	8002f26 <xmit_datablock+0x5c>
	}
	return 1;
 8002f24:	2301      	movs	r3, #1
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b084      	sub	sp, #16
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	4603      	mov	r3, r0
 8002f36:	6039      	str	r1, [r7, #0]
 8002f38:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8002f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	da0e      	bge.n	8002f60 <send_cmd+0x32>
		cmd &= 0x7F;
 8002f42:	79fb      	ldrb	r3, [r7, #7]
 8002f44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f48:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	2037      	movs	r0, #55	; 0x37
 8002f4e:	f7ff ffee 	bl	8002f2e <send_cmd>
 8002f52:	4603      	mov	r3, r0
 8002f54:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8002f56:	7bbb      	ldrb	r3, [r7, #14]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d901      	bls.n	8002f60 <send_cmd+0x32>
 8002f5c:	7bbb      	ldrb	r3, [r7, #14]
 8002f5e:	e051      	b.n	8003004 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8002f60:	79fb      	ldrb	r3, [r7, #7]
 8002f62:	2b0c      	cmp	r3, #12
 8002f64:	d008      	beq.n	8002f78 <send_cmd+0x4a>
		despiselect();
 8002f66:	f7ff ff5b 	bl	8002e20 <despiselect>
		if (!spiselect()) return 0xFF;
 8002f6a:	f7ff ff69 	bl	8002e40 <spiselect>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <send_cmd+0x4a>
 8002f74:	23ff      	movs	r3, #255	; 0xff
 8002f76:	e045      	b.n	8003004 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff fee3 	bl	8002d4c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	0e1b      	lsrs	r3, r3, #24
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff fedd 	bl	8002d4c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	0c1b      	lsrs	r3, r3, #16
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff fed7 	bl	8002d4c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	0a1b      	lsrs	r3, r3, #8
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff fed1 	bl	8002d4c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff fecc 	bl	8002d4c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8002fb8:	79fb      	ldrb	r3, [r7, #7]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <send_cmd+0x94>
 8002fbe:	2395      	movs	r3, #149	; 0x95
 8002fc0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8002fc2:	79fb      	ldrb	r3, [r7, #7]
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d101      	bne.n	8002fcc <send_cmd+0x9e>
 8002fc8:	2387      	movs	r3, #135	; 0x87
 8002fca:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8002fcc:	7bfb      	ldrb	r3, [r7, #15]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff febc 	bl	8002d4c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	2b0c      	cmp	r3, #12
 8002fd8:	d102      	bne.n	8002fe0 <send_cmd+0xb2>
 8002fda:	20ff      	movs	r0, #255	; 0xff
 8002fdc:	f7ff feb6 	bl	8002d4c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8002fe0:	230a      	movs	r3, #10
 8002fe2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8002fe4:	20ff      	movs	r0, #255	; 0xff
 8002fe6:	f7ff feb1 	bl	8002d4c <xchg_spi>
 8002fea:	4603      	mov	r3, r0
 8002fec:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8002fee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	da05      	bge.n	8003002 <send_cmd+0xd4>
 8002ff6:	7bfb      	ldrb	r3, [r7, #15]
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	73fb      	strb	r3, [r7, #15]
 8002ffc:	7bfb      	ldrb	r3, [r7, #15]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <send_cmd+0xb6>

	return res;							/* Return received response */
 8003002:	7bbb      	ldrb	r3, [r7, #14]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800300c:	b590      	push	{r4, r7, lr}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8003016:	79fb      	ldrb	r3, [r7, #7]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <USER_SPI_initialize+0x14>
 800301c:	2301      	movs	r3, #1
 800301e:	e0d6      	b.n	80031ce <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8003020:	4b6d      	ldr	r3, [pc, #436]	; (80031d8 <USER_SPI_initialize+0x1cc>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	b2db      	uxtb	r3, r3
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <USER_SPI_initialize+0x2a>
 800302e:	4b6a      	ldr	r3, [pc, #424]	; (80031d8 <USER_SPI_initialize+0x1cc>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	b2db      	uxtb	r3, r3
 8003034:	e0cb      	b.n	80031ce <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8003036:	4b69      	ldr	r3, [pc, #420]	; (80031dc <USER_SPI_initialize+0x1d0>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003040:	4b66      	ldr	r3, [pc, #408]	; (80031dc <USER_SPI_initialize+0x1d0>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8003048:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800304a:	230a      	movs	r3, #10
 800304c:	73fb      	strb	r3, [r7, #15]
 800304e:	e005      	b.n	800305c <USER_SPI_initialize+0x50>
 8003050:	20ff      	movs	r0, #255	; 0xff
 8003052:	f7ff fe7b 	bl	8002d4c <xchg_spi>
 8003056:	7bfb      	ldrb	r3, [r7, #15]
 8003058:	3b01      	subs	r3, #1
 800305a:	73fb      	strb	r3, [r7, #15]
 800305c:	7bfb      	ldrb	r3, [r7, #15]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f6      	bne.n	8003050 <USER_SPI_initialize+0x44>

	ty = 0;
 8003062:	2300      	movs	r3, #0
 8003064:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8003066:	2100      	movs	r1, #0
 8003068:	2000      	movs	r0, #0
 800306a:	f7ff ff60 	bl	8002f2e <send_cmd>
 800306e:	4603      	mov	r3, r0
 8003070:	2b01      	cmp	r3, #1
 8003072:	f040 808b 	bne.w	800318c <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8003076:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800307a:	f7ff fe3d 	bl	8002cf8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800307e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003082:	2008      	movs	r0, #8
 8003084:	f7ff ff53 	bl	8002f2e <send_cmd>
 8003088:	4603      	mov	r3, r0
 800308a:	2b01      	cmp	r3, #1
 800308c:	d151      	bne.n	8003132 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800308e:	2300      	movs	r3, #0
 8003090:	73fb      	strb	r3, [r7, #15]
 8003092:	e00d      	b.n	80030b0 <USER_SPI_initialize+0xa4>
 8003094:	7bfc      	ldrb	r4, [r7, #15]
 8003096:	20ff      	movs	r0, #255	; 0xff
 8003098:	f7ff fe58 	bl	8002d4c <xchg_spi>
 800309c:	4603      	mov	r3, r0
 800309e:	461a      	mov	r2, r3
 80030a0:	f104 0310 	add.w	r3, r4, #16
 80030a4:	443b      	add	r3, r7
 80030a6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80030aa:	7bfb      	ldrb	r3, [r7, #15]
 80030ac:	3301      	adds	r3, #1
 80030ae:	73fb      	strb	r3, [r7, #15]
 80030b0:	7bfb      	ldrb	r3, [r7, #15]
 80030b2:	2b03      	cmp	r3, #3
 80030b4:	d9ee      	bls.n	8003094 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80030b6:	7abb      	ldrb	r3, [r7, #10]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d167      	bne.n	800318c <USER_SPI_initialize+0x180>
 80030bc:	7afb      	ldrb	r3, [r7, #11]
 80030be:	2baa      	cmp	r3, #170	; 0xaa
 80030c0:	d164      	bne.n	800318c <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80030c2:	bf00      	nop
 80030c4:	f7ff fe2c 	bl	8002d20 <SPI_Timer_Status>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d007      	beq.n	80030de <USER_SPI_initialize+0xd2>
 80030ce:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80030d2:	20a9      	movs	r0, #169	; 0xa9
 80030d4:	f7ff ff2b 	bl	8002f2e <send_cmd>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1f2      	bne.n	80030c4 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80030de:	f7ff fe1f 	bl	8002d20 <SPI_Timer_Status>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d051      	beq.n	800318c <USER_SPI_initialize+0x180>
 80030e8:	2100      	movs	r1, #0
 80030ea:	203a      	movs	r0, #58	; 0x3a
 80030ec:	f7ff ff1f 	bl	8002f2e <send_cmd>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d14a      	bne.n	800318c <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80030f6:	2300      	movs	r3, #0
 80030f8:	73fb      	strb	r3, [r7, #15]
 80030fa:	e00d      	b.n	8003118 <USER_SPI_initialize+0x10c>
 80030fc:	7bfc      	ldrb	r4, [r7, #15]
 80030fe:	20ff      	movs	r0, #255	; 0xff
 8003100:	f7ff fe24 	bl	8002d4c <xchg_spi>
 8003104:	4603      	mov	r3, r0
 8003106:	461a      	mov	r2, r3
 8003108:	f104 0310 	add.w	r3, r4, #16
 800310c:	443b      	add	r3, r7
 800310e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003112:	7bfb      	ldrb	r3, [r7, #15]
 8003114:	3301      	adds	r3, #1
 8003116:	73fb      	strb	r3, [r7, #15]
 8003118:	7bfb      	ldrb	r3, [r7, #15]
 800311a:	2b03      	cmp	r3, #3
 800311c:	d9ee      	bls.n	80030fc <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800311e:	7a3b      	ldrb	r3, [r7, #8]
 8003120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <USER_SPI_initialize+0x120>
 8003128:	230c      	movs	r3, #12
 800312a:	e000      	b.n	800312e <USER_SPI_initialize+0x122>
 800312c:	2304      	movs	r3, #4
 800312e:	737b      	strb	r3, [r7, #13]
 8003130:	e02c      	b.n	800318c <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8003132:	2100      	movs	r1, #0
 8003134:	20a9      	movs	r0, #169	; 0xa9
 8003136:	f7ff fefa 	bl	8002f2e <send_cmd>
 800313a:	4603      	mov	r3, r0
 800313c:	2b01      	cmp	r3, #1
 800313e:	d804      	bhi.n	800314a <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8003140:	2302      	movs	r3, #2
 8003142:	737b      	strb	r3, [r7, #13]
 8003144:	23a9      	movs	r3, #169	; 0xa9
 8003146:	73bb      	strb	r3, [r7, #14]
 8003148:	e003      	b.n	8003152 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800314a:	2301      	movs	r3, #1
 800314c:	737b      	strb	r3, [r7, #13]
 800314e:	2301      	movs	r3, #1
 8003150:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8003152:	bf00      	nop
 8003154:	f7ff fde4 	bl	8002d20 <SPI_Timer_Status>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d007      	beq.n	800316e <USER_SPI_initialize+0x162>
 800315e:	7bbb      	ldrb	r3, [r7, #14]
 8003160:	2100      	movs	r1, #0
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff fee3 	bl	8002f2e <send_cmd>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f2      	bne.n	8003154 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800316e:	f7ff fdd7 	bl	8002d20 <SPI_Timer_Status>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d007      	beq.n	8003188 <USER_SPI_initialize+0x17c>
 8003178:	f44f 7100 	mov.w	r1, #512	; 0x200
 800317c:	2010      	movs	r0, #16
 800317e:	f7ff fed6 	bl	8002f2e <send_cmd>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <USER_SPI_initialize+0x180>
				ty = 0;
 8003188:	2300      	movs	r3, #0
 800318a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800318c:	4a14      	ldr	r2, [pc, #80]	; (80031e0 <USER_SPI_initialize+0x1d4>)
 800318e:	7b7b      	ldrb	r3, [r7, #13]
 8003190:	7013      	strb	r3, [r2, #0]
	despiselect();
 8003192:	f7ff fe45 	bl	8002e20 <despiselect>

	if (ty) {			/* OK */
 8003196:	7b7b      	ldrb	r3, [r7, #13]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d012      	beq.n	80031c2 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 800319c:	4b0f      	ldr	r3, [pc, #60]	; (80031dc <USER_SPI_initialize+0x1d0>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80031a6:	4b0d      	ldr	r3, [pc, #52]	; (80031dc <USER_SPI_initialize+0x1d0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 0210 	orr.w	r2, r2, #16
 80031ae:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80031b0:	4b09      	ldr	r3, [pc, #36]	; (80031d8 <USER_SPI_initialize+0x1cc>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	f023 0301 	bic.w	r3, r3, #1
 80031ba:	b2da      	uxtb	r2, r3
 80031bc:	4b06      	ldr	r3, [pc, #24]	; (80031d8 <USER_SPI_initialize+0x1cc>)
 80031be:	701a      	strb	r2, [r3, #0]
 80031c0:	e002      	b.n	80031c8 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80031c2:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <USER_SPI_initialize+0x1cc>)
 80031c4:	2201      	movs	r2, #1
 80031c6:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80031c8:	4b03      	ldr	r3, [pc, #12]	; (80031d8 <USER_SPI_initialize+0x1cc>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	b2db      	uxtb	r3, r3
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd90      	pop	{r4, r7, pc}
 80031d6:	bf00      	nop
 80031d8:	20000020 	.word	0x20000020
 80031dc:	200000a4 	.word	0x200000a4
 80031e0:	20000150 	.word	0x20000150

080031e4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	4603      	mov	r3, r0
 80031ec:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80031ee:	79fb      	ldrb	r3, [r7, #7]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <USER_SPI_status+0x14>
 80031f4:	2301      	movs	r3, #1
 80031f6:	e002      	b.n	80031fe <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80031f8:	4b04      	ldr	r3, [pc, #16]	; (800320c <USER_SPI_status+0x28>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	b2db      	uxtb	r3, r3
}
 80031fe:	4618      	mov	r0, r3
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	20000020 	.word	0x20000020

08003210 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	60b9      	str	r1, [r7, #8]
 8003218:	607a      	str	r2, [r7, #4]
 800321a:	603b      	str	r3, [r7, #0]
 800321c:	4603      	mov	r3, r0
 800321e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003220:	7bfb      	ldrb	r3, [r7, #15]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d102      	bne.n	800322c <USER_SPI_read+0x1c>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <USER_SPI_read+0x20>
 800322c:	2304      	movs	r3, #4
 800322e:	e04d      	b.n	80032cc <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003230:	4b28      	ldr	r3, [pc, #160]	; (80032d4 <USER_SPI_read+0xc4>)
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	b2db      	uxtb	r3, r3
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <USER_SPI_read+0x32>
 800323e:	2303      	movs	r3, #3
 8003240:	e044      	b.n	80032cc <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8003242:	4b25      	ldr	r3, [pc, #148]	; (80032d8 <USER_SPI_read+0xc8>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	2b00      	cmp	r3, #0
 800324c:	d102      	bne.n	8003254 <USER_SPI_read+0x44>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	025b      	lsls	r3, r3, #9
 8003252:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d111      	bne.n	800327e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	2011      	movs	r0, #17
 800325e:	f7ff fe66 	bl	8002f2e <send_cmd>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d129      	bne.n	80032bc <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8003268:	f44f 7100 	mov.w	r1, #512	; 0x200
 800326c:	68b8      	ldr	r0, [r7, #8]
 800326e:	f7ff fe03 	bl	8002e78 <rcvr_datablock>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d021      	beq.n	80032bc <USER_SPI_read+0xac>
			count = 0;
 8003278:	2300      	movs	r3, #0
 800327a:	603b      	str	r3, [r7, #0]
 800327c:	e01e      	b.n	80032bc <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	2012      	movs	r0, #18
 8003282:	f7ff fe54 	bl	8002f2e <send_cmd>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d117      	bne.n	80032bc <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800328c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003290:	68b8      	ldr	r0, [r7, #8]
 8003292:	f7ff fdf1 	bl	8002e78 <rcvr_datablock>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00a      	beq.n	80032b2 <USER_SPI_read+0xa2>
				buff += 512;
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80032a2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	603b      	str	r3, [r7, #0]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1ed      	bne.n	800328c <USER_SPI_read+0x7c>
 80032b0:	e000      	b.n	80032b4 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80032b2:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80032b4:	2100      	movs	r1, #0
 80032b6:	200c      	movs	r0, #12
 80032b8:	f7ff fe39 	bl	8002f2e <send_cmd>
		}
	}
	despiselect();
 80032bc:	f7ff fdb0 	bl	8002e20 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	bf14      	ite	ne
 80032c6:	2301      	movne	r3, #1
 80032c8:	2300      	moveq	r3, #0
 80032ca:	b2db      	uxtb	r3, r3
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	20000020 	.word	0x20000020
 80032d8:	20000150 	.word	0x20000150

080032dc <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60b9      	str	r1, [r7, #8]
 80032e4:	607a      	str	r2, [r7, #4]
 80032e6:	603b      	str	r3, [r7, #0]
 80032e8:	4603      	mov	r3, r0
 80032ea:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80032ec:	7bfb      	ldrb	r3, [r7, #15]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d102      	bne.n	80032f8 <USER_SPI_write+0x1c>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d101      	bne.n	80032fc <USER_SPI_write+0x20>
 80032f8:	2304      	movs	r3, #4
 80032fa:	e063      	b.n	80033c4 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80032fc:	4b33      	ldr	r3, [pc, #204]	; (80033cc <USER_SPI_write+0xf0>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	b2db      	uxtb	r3, r3
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <USER_SPI_write+0x32>
 800330a:	2303      	movs	r3, #3
 800330c:	e05a      	b.n	80033c4 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800330e:	4b2f      	ldr	r3, [pc, #188]	; (80033cc <USER_SPI_write+0xf0>)
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	b2db      	uxtb	r3, r3
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <USER_SPI_write+0x44>
 800331c:	2302      	movs	r3, #2
 800331e:	e051      	b.n	80033c4 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8003320:	4b2b      	ldr	r3, [pc, #172]	; (80033d0 <USER_SPI_write+0xf4>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	f003 0308 	and.w	r3, r3, #8
 8003328:	2b00      	cmp	r3, #0
 800332a:	d102      	bne.n	8003332 <USER_SPI_write+0x56>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	025b      	lsls	r3, r3, #9
 8003330:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d110      	bne.n	800335a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	2018      	movs	r0, #24
 800333c:	f7ff fdf7 	bl	8002f2e <send_cmd>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d136      	bne.n	80033b4 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8003346:	21fe      	movs	r1, #254	; 0xfe
 8003348:	68b8      	ldr	r0, [r7, #8]
 800334a:	f7ff fdbe 	bl	8002eca <xmit_datablock>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d02f      	beq.n	80033b4 <USER_SPI_write+0xd8>
			count = 0;
 8003354:	2300      	movs	r3, #0
 8003356:	603b      	str	r3, [r7, #0]
 8003358:	e02c      	b.n	80033b4 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800335a:	4b1d      	ldr	r3, [pc, #116]	; (80033d0 <USER_SPI_write+0xf4>)
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	f003 0306 	and.w	r3, r3, #6
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <USER_SPI_write+0x92>
 8003366:	6839      	ldr	r1, [r7, #0]
 8003368:	2097      	movs	r0, #151	; 0x97
 800336a:	f7ff fde0 	bl	8002f2e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	2019      	movs	r0, #25
 8003372:	f7ff fddc 	bl	8002f2e <send_cmd>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d11b      	bne.n	80033b4 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800337c:	21fc      	movs	r1, #252	; 0xfc
 800337e:	68b8      	ldr	r0, [r7, #8]
 8003380:	f7ff fda3 	bl	8002eca <xmit_datablock>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00a      	beq.n	80033a0 <USER_SPI_write+0xc4>
				buff += 512;
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003390:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	3b01      	subs	r3, #1
 8003396:	603b      	str	r3, [r7, #0]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1ee      	bne.n	800337c <USER_SPI_write+0xa0>
 800339e:	e000      	b.n	80033a2 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80033a0:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80033a2:	21fd      	movs	r1, #253	; 0xfd
 80033a4:	2000      	movs	r0, #0
 80033a6:	f7ff fd90 	bl	8002eca <xmit_datablock>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <USER_SPI_write+0xd8>
 80033b0:	2301      	movs	r3, #1
 80033b2:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80033b4:	f7ff fd34 	bl	8002e20 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	bf14      	ite	ne
 80033be:	2301      	movne	r3, #1
 80033c0:	2300      	moveq	r3, #0
 80033c2:	b2db      	uxtb	r3, r3
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	20000020 	.word	0x20000020
 80033d0:	20000150 	.word	0x20000150

080033d4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08c      	sub	sp, #48	; 0x30
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	603a      	str	r2, [r7, #0]
 80033de:	71fb      	strb	r3, [r7, #7]
 80033e0:	460b      	mov	r3, r1
 80033e2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <USER_SPI_ioctl+0x1a>
 80033ea:	2304      	movs	r3, #4
 80033ec:	e15a      	b.n	80036a4 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80033ee:	4baf      	ldr	r3, [pc, #700]	; (80036ac <USER_SPI_ioctl+0x2d8>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <USER_SPI_ioctl+0x2c>
 80033fc:	2303      	movs	r3, #3
 80033fe:	e151      	b.n	80036a4 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8003406:	79bb      	ldrb	r3, [r7, #6]
 8003408:	2b04      	cmp	r3, #4
 800340a:	f200 8136 	bhi.w	800367a <USER_SPI_ioctl+0x2a6>
 800340e:	a201      	add	r2, pc, #4	; (adr r2, 8003414 <USER_SPI_ioctl+0x40>)
 8003410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003414:	08003429 	.word	0x08003429
 8003418:	0800343d 	.word	0x0800343d
 800341c:	0800367b 	.word	0x0800367b
 8003420:	080034e9 	.word	0x080034e9
 8003424:	080035df 	.word	0x080035df
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8003428:	f7ff fd0a 	bl	8002e40 <spiselect>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 8127 	beq.w	8003682 <USER_SPI_ioctl+0x2ae>
 8003434:	2300      	movs	r3, #0
 8003436:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800343a:	e122      	b.n	8003682 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800343c:	2100      	movs	r1, #0
 800343e:	2009      	movs	r0, #9
 8003440:	f7ff fd75 	bl	8002f2e <send_cmd>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	f040 811d 	bne.w	8003686 <USER_SPI_ioctl+0x2b2>
 800344c:	f107 030c 	add.w	r3, r7, #12
 8003450:	2110      	movs	r1, #16
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff fd10 	bl	8002e78 <rcvr_datablock>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 8113 	beq.w	8003686 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8003460:	7b3b      	ldrb	r3, [r7, #12]
 8003462:	099b      	lsrs	r3, r3, #6
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b01      	cmp	r3, #1
 8003468:	d111      	bne.n	800348e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800346a:	7d7b      	ldrb	r3, [r7, #21]
 800346c:	461a      	mov	r2, r3
 800346e:	7d3b      	ldrb	r3, [r7, #20]
 8003470:	021b      	lsls	r3, r3, #8
 8003472:	4413      	add	r3, r2
 8003474:	461a      	mov	r2, r3
 8003476:	7cfb      	ldrb	r3, [r7, #19]
 8003478:	041b      	lsls	r3, r3, #16
 800347a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800347e:	4413      	add	r3, r2
 8003480:	3301      	adds	r3, #1
 8003482:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	029a      	lsls	r2, r3, #10
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	e028      	b.n	80034e0 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800348e:	7c7b      	ldrb	r3, [r7, #17]
 8003490:	f003 030f 	and.w	r3, r3, #15
 8003494:	b2da      	uxtb	r2, r3
 8003496:	7dbb      	ldrb	r3, [r7, #22]
 8003498:	09db      	lsrs	r3, r3, #7
 800349a:	b2db      	uxtb	r3, r3
 800349c:	4413      	add	r3, r2
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	7d7b      	ldrb	r3, [r7, #21]
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	f003 0306 	and.w	r3, r3, #6
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	4413      	add	r3, r2
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	3302      	adds	r3, #2
 80034b2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80034b6:	7d3b      	ldrb	r3, [r7, #20]
 80034b8:	099b      	lsrs	r3, r3, #6
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	461a      	mov	r2, r3
 80034be:	7cfb      	ldrb	r3, [r7, #19]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	441a      	add	r2, r3
 80034c4:	7cbb      	ldrb	r3, [r7, #18]
 80034c6:	029b      	lsls	r3, r3, #10
 80034c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80034cc:	4413      	add	r3, r2
 80034ce:	3301      	adds	r3, #1
 80034d0:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80034d2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80034d6:	3b09      	subs	r3, #9
 80034d8:	69fa      	ldr	r2, [r7, #28]
 80034da:	409a      	lsls	r2, r3
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80034e0:	2300      	movs	r3, #0
 80034e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80034e6:	e0ce      	b.n	8003686 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80034e8:	4b71      	ldr	r3, [pc, #452]	; (80036b0 <USER_SPI_ioctl+0x2dc>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d031      	beq.n	8003558 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80034f4:	2100      	movs	r1, #0
 80034f6:	208d      	movs	r0, #141	; 0x8d
 80034f8:	f7ff fd19 	bl	8002f2e <send_cmd>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f040 80c3 	bne.w	800368a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8003504:	20ff      	movs	r0, #255	; 0xff
 8003506:	f7ff fc21 	bl	8002d4c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800350a:	f107 030c 	add.w	r3, r7, #12
 800350e:	2110      	movs	r1, #16
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff fcb1 	bl	8002e78 <rcvr_datablock>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 80b6 	beq.w	800368a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800351e:	2330      	movs	r3, #48	; 0x30
 8003520:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003524:	e007      	b.n	8003536 <USER_SPI_ioctl+0x162>
 8003526:	20ff      	movs	r0, #255	; 0xff
 8003528:	f7ff fc10 	bl	8002d4c <xchg_spi>
 800352c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003530:	3b01      	subs	r3, #1
 8003532:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003536:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f3      	bne.n	8003526 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800353e:	7dbb      	ldrb	r3, [r7, #22]
 8003540:	091b      	lsrs	r3, r3, #4
 8003542:	b2db      	uxtb	r3, r3
 8003544:	461a      	mov	r2, r3
 8003546:	2310      	movs	r3, #16
 8003548:	fa03 f202 	lsl.w	r2, r3, r2
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8003550:	2300      	movs	r3, #0
 8003552:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8003556:	e098      	b.n	800368a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8003558:	2100      	movs	r1, #0
 800355a:	2009      	movs	r0, #9
 800355c:	f7ff fce7 	bl	8002f2e <send_cmd>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	f040 8091 	bne.w	800368a <USER_SPI_ioctl+0x2b6>
 8003568:	f107 030c 	add.w	r3, r7, #12
 800356c:	2110      	movs	r1, #16
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff fc82 	bl	8002e78 <rcvr_datablock>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 8087 	beq.w	800368a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800357c:	4b4c      	ldr	r3, [pc, #304]	; (80036b0 <USER_SPI_ioctl+0x2dc>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d012      	beq.n	80035ae <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8003588:	7dbb      	ldrb	r3, [r7, #22]
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003590:	7dfa      	ldrb	r2, [r7, #23]
 8003592:	09d2      	lsrs	r2, r2, #7
 8003594:	b2d2      	uxtb	r2, r2
 8003596:	4413      	add	r3, r2
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	7e7b      	ldrb	r3, [r7, #25]
 800359c:	099b      	lsrs	r3, r3, #6
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	3b01      	subs	r3, #1
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	461a      	mov	r2, r3
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	e013      	b.n	80035d6 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80035ae:	7dbb      	ldrb	r3, [r7, #22]
 80035b0:	109b      	asrs	r3, r3, #2
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	f003 031f 	and.w	r3, r3, #31
 80035b8:	3301      	adds	r3, #1
 80035ba:	7dfa      	ldrb	r2, [r7, #23]
 80035bc:	00d2      	lsls	r2, r2, #3
 80035be:	f002 0218 	and.w	r2, r2, #24
 80035c2:	7df9      	ldrb	r1, [r7, #23]
 80035c4:	0949      	lsrs	r1, r1, #5
 80035c6:	b2c9      	uxtb	r1, r1
 80035c8:	440a      	add	r2, r1
 80035ca:	3201      	adds	r2, #1
 80035cc:	fb02 f303 	mul.w	r3, r2, r3
 80035d0:	461a      	mov	r2, r3
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80035d6:	2300      	movs	r3, #0
 80035d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80035dc:	e055      	b.n	800368a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80035de:	4b34      	ldr	r3, [pc, #208]	; (80036b0 <USER_SPI_ioctl+0x2dc>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	f003 0306 	and.w	r3, r3, #6
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d051      	beq.n	800368e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80035ea:	f107 020c 	add.w	r2, r7, #12
 80035ee:	79fb      	ldrb	r3, [r7, #7]
 80035f0:	210b      	movs	r1, #11
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7ff feee 	bl	80033d4 <USER_SPI_ioctl>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d149      	bne.n	8003692 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80035fe:	7b3b      	ldrb	r3, [r7, #12]
 8003600:	099b      	lsrs	r3, r3, #6
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	d104      	bne.n	8003612 <USER_SPI_ioctl+0x23e>
 8003608:	7dbb      	ldrb	r3, [r7, #22]
 800360a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360e:	2b00      	cmp	r3, #0
 8003610:	d041      	beq.n	8003696 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	623b      	str	r3, [r7, #32]
 8003616:	6a3b      	ldr	r3, [r7, #32]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	62bb      	str	r3, [r7, #40]	; 0x28
 800361c:	6a3b      	ldr	r3, [r7, #32]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8003622:	4b23      	ldr	r3, [pc, #140]	; (80036b0 <USER_SPI_ioctl+0x2dc>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	f003 0308 	and.w	r3, r3, #8
 800362a:	2b00      	cmp	r3, #0
 800362c:	d105      	bne.n	800363a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800362e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003630:	025b      	lsls	r3, r3, #9
 8003632:	62bb      	str	r3, [r7, #40]	; 0x28
 8003634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003636:	025b      	lsls	r3, r3, #9
 8003638:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800363a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800363c:	2020      	movs	r0, #32
 800363e:	f7ff fc76 	bl	8002f2e <send_cmd>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d128      	bne.n	800369a <USER_SPI_ioctl+0x2c6>
 8003648:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800364a:	2021      	movs	r0, #33	; 0x21
 800364c:	f7ff fc6f 	bl	8002f2e <send_cmd>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d121      	bne.n	800369a <USER_SPI_ioctl+0x2c6>
 8003656:	2100      	movs	r1, #0
 8003658:	2026      	movs	r0, #38	; 0x26
 800365a:	f7ff fc68 	bl	8002f2e <send_cmd>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d11a      	bne.n	800369a <USER_SPI_ioctl+0x2c6>
 8003664:	f247 5030 	movw	r0, #30000	; 0x7530
 8003668:	f7ff fbb6 	bl	8002dd8 <wait_ready>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d013      	beq.n	800369a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8003672:	2300      	movs	r3, #0
 8003674:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8003678:	e00f      	b.n	800369a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800367a:	2304      	movs	r3, #4
 800367c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003680:	e00c      	b.n	800369c <USER_SPI_ioctl+0x2c8>
		break;
 8003682:	bf00      	nop
 8003684:	e00a      	b.n	800369c <USER_SPI_ioctl+0x2c8>
		break;
 8003686:	bf00      	nop
 8003688:	e008      	b.n	800369c <USER_SPI_ioctl+0x2c8>
		break;
 800368a:	bf00      	nop
 800368c:	e006      	b.n	800369c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800368e:	bf00      	nop
 8003690:	e004      	b.n	800369c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003692:	bf00      	nop
 8003694:	e002      	b.n	800369c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003696:	bf00      	nop
 8003698:	e000      	b.n	800369c <USER_SPI_ioctl+0x2c8>
		break;
 800369a:	bf00      	nop
	}

	despiselect();
 800369c:	f7ff fbc0 	bl	8002e20 <despiselect>

	return res;
 80036a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3730      	adds	r7, #48	; 0x30
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	20000020 	.word	0x20000020
 80036b0:	20000150 	.word	0x20000150

080036b4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	4603      	mov	r3, r0
 80036bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80036be:	79fb      	ldrb	r3, [r7, #7]
 80036c0:	4a08      	ldr	r2, [pc, #32]	; (80036e4 <disk_status+0x30>)
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	79fa      	ldrb	r2, [r7, #7]
 80036cc:	4905      	ldr	r1, [pc, #20]	; (80036e4 <disk_status+0x30>)
 80036ce:	440a      	add	r2, r1
 80036d0:	7a12      	ldrb	r2, [r2, #8]
 80036d2:	4610      	mov	r0, r2
 80036d4:	4798      	blx	r3
 80036d6:	4603      	mov	r3, r0
 80036d8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80036da:	7bfb      	ldrb	r3, [r7, #15]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	20000184 	.word	0x20000184

080036e8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	4603      	mov	r3, r0
 80036f0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80036f2:	2300      	movs	r3, #0
 80036f4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80036f6:	79fb      	ldrb	r3, [r7, #7]
 80036f8:	4a0d      	ldr	r2, [pc, #52]	; (8003730 <disk_initialize+0x48>)
 80036fa:	5cd3      	ldrb	r3, [r2, r3]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d111      	bne.n	8003724 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003700:	79fb      	ldrb	r3, [r7, #7]
 8003702:	4a0b      	ldr	r2, [pc, #44]	; (8003730 <disk_initialize+0x48>)
 8003704:	2101      	movs	r1, #1
 8003706:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003708:	79fb      	ldrb	r3, [r7, #7]
 800370a:	4a09      	ldr	r2, [pc, #36]	; (8003730 <disk_initialize+0x48>)
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4413      	add	r3, r2
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	79fa      	ldrb	r2, [r7, #7]
 8003716:	4906      	ldr	r1, [pc, #24]	; (8003730 <disk_initialize+0x48>)
 8003718:	440a      	add	r2, r1
 800371a:	7a12      	ldrb	r2, [r2, #8]
 800371c:	4610      	mov	r0, r2
 800371e:	4798      	blx	r3
 8003720:	4603      	mov	r3, r0
 8003722:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003724:	7bfb      	ldrb	r3, [r7, #15]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	20000184 	.word	0x20000184

08003734 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003734:	b590      	push	{r4, r7, lr}
 8003736:	b087      	sub	sp, #28
 8003738:	af00      	add	r7, sp, #0
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	607a      	str	r2, [r7, #4]
 800373e:	603b      	str	r3, [r7, #0]
 8003740:	4603      	mov	r3, r0
 8003742:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003744:	7bfb      	ldrb	r3, [r7, #15]
 8003746:	4a0a      	ldr	r2, [pc, #40]	; (8003770 <disk_read+0x3c>)
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4413      	add	r3, r2
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	689c      	ldr	r4, [r3, #8]
 8003750:	7bfb      	ldrb	r3, [r7, #15]
 8003752:	4a07      	ldr	r2, [pc, #28]	; (8003770 <disk_read+0x3c>)
 8003754:	4413      	add	r3, r2
 8003756:	7a18      	ldrb	r0, [r3, #8]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	68b9      	ldr	r1, [r7, #8]
 800375e:	47a0      	blx	r4
 8003760:	4603      	mov	r3, r0
 8003762:	75fb      	strb	r3, [r7, #23]
  return res;
 8003764:	7dfb      	ldrb	r3, [r7, #23]
}
 8003766:	4618      	mov	r0, r3
 8003768:	371c      	adds	r7, #28
 800376a:	46bd      	mov	sp, r7
 800376c:	bd90      	pop	{r4, r7, pc}
 800376e:	bf00      	nop
 8003770:	20000184 	.word	0x20000184

08003774 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003774:	b590      	push	{r4, r7, lr}
 8003776:	b087      	sub	sp, #28
 8003778:	af00      	add	r7, sp, #0
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	607a      	str	r2, [r7, #4]
 800377e:	603b      	str	r3, [r7, #0]
 8003780:	4603      	mov	r3, r0
 8003782:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003784:	7bfb      	ldrb	r3, [r7, #15]
 8003786:	4a0a      	ldr	r2, [pc, #40]	; (80037b0 <disk_write+0x3c>)
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4413      	add	r3, r2
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	68dc      	ldr	r4, [r3, #12]
 8003790:	7bfb      	ldrb	r3, [r7, #15]
 8003792:	4a07      	ldr	r2, [pc, #28]	; (80037b0 <disk_write+0x3c>)
 8003794:	4413      	add	r3, r2
 8003796:	7a18      	ldrb	r0, [r3, #8]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	68b9      	ldr	r1, [r7, #8]
 800379e:	47a0      	blx	r4
 80037a0:	4603      	mov	r3, r0
 80037a2:	75fb      	strb	r3, [r7, #23]
  return res;
 80037a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	371c      	adds	r7, #28
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd90      	pop	{r4, r7, pc}
 80037ae:	bf00      	nop
 80037b0:	20000184 	.word	0x20000184

080037b4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3301      	adds	r3, #1
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80037c4:	89fb      	ldrh	r3, [r7, #14]
 80037c6:	021b      	lsls	r3, r3, #8
 80037c8:	b21a      	sxth	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	b21b      	sxth	r3, r3
 80037d0:	4313      	orrs	r3, r2
 80037d2:	b21b      	sxth	r3, r3
 80037d4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80037d6:	89fb      	ldrh	r3, [r7, #14]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3303      	adds	r3, #3
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	021b      	lsls	r3, r3, #8
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	3202      	adds	r2, #2
 80037fc:	7812      	ldrb	r2, [r2, #0]
 80037fe:	4313      	orrs	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	021b      	lsls	r3, r3, #8
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	3201      	adds	r2, #1
 800380a:	7812      	ldrb	r2, [r2, #0]
 800380c:	4313      	orrs	r3, r2
 800380e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	021b      	lsls	r3, r3, #8
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	7812      	ldrb	r2, [r2, #0]
 8003818:	4313      	orrs	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]
	return rv;
 800381c:	68fb      	ldr	r3, [r7, #12]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
	...

0800382c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003834:	2300      	movs	r3, #0
 8003836:	60fb      	str	r3, [r7, #12]
 8003838:	e010      	b.n	800385c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800383a:	4a0d      	ldr	r2, [pc, #52]	; (8003870 <clear_lock+0x44>)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	011b      	lsls	r3, r3, #4
 8003840:	4413      	add	r3, r2
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	429a      	cmp	r2, r3
 8003848:	d105      	bne.n	8003856 <clear_lock+0x2a>
 800384a:	4a09      	ldr	r2, [pc, #36]	; (8003870 <clear_lock+0x44>)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	011b      	lsls	r3, r3, #4
 8003850:	4413      	add	r3, r2
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	3301      	adds	r3, #1
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d9eb      	bls.n	800383a <clear_lock+0xe>
	}
}
 8003862:	bf00      	nop
 8003864:	bf00      	nop
 8003866:	3714      	adds	r7, #20
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	20000164 	.word	0x20000164

08003874 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800387c:	2300      	movs	r3, #0
 800387e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	78db      	ldrb	r3, [r3, #3]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d034      	beq.n	80038f2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	7858      	ldrb	r0, [r3, #1]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003898:	2301      	movs	r3, #1
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	f7ff ff6a 	bl	8003774 <disk_write>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d002      	beq.n	80038ac <sync_window+0x38>
			res = FR_DISK_ERR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	73fb      	strb	r3, [r7, #15]
 80038aa:	e022      	b.n	80038f2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	1ad2      	subs	r2, r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d217      	bcs.n	80038f2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	789b      	ldrb	r3, [r3, #2]
 80038c6:	613b      	str	r3, [r7, #16]
 80038c8:	e010      	b.n	80038ec <sync_window+0x78>
					wsect += fs->fsize;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	4413      	add	r3, r2
 80038d2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	7858      	ldrb	r0, [r3, #1]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80038de:	2301      	movs	r3, #1
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	f7ff ff47 	bl	8003774 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	3b01      	subs	r3, #1
 80038ea:	613b      	str	r3, [r7, #16]
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d8eb      	bhi.n	80038ca <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80038f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003906:	2300      	movs	r3, #0
 8003908:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	429a      	cmp	r2, r3
 8003912:	d01b      	beq.n	800394c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7ff ffad 	bl	8003874 <sync_window>
 800391a:	4603      	mov	r3, r0
 800391c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d113      	bne.n	800394c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	7858      	ldrb	r0, [r3, #1]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800392e:	2301      	movs	r3, #1
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	f7ff feff 	bl	8003734 <disk_read>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d004      	beq.n	8003946 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800393c:	f04f 33ff 	mov.w	r3, #4294967295
 8003940:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003942:	2301      	movs	r3, #1
 8003944:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800394c:	7bfb      	ldrb	r3, [r7, #15]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b086      	sub	sp, #24
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d904      	bls.n	8003976 <get_fat+0x20>
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d302      	bcc.n	800397c <get_fat+0x26>
		val = 1;	/* Internal error */
 8003976:	2301      	movs	r3, #1
 8003978:	617b      	str	r3, [r7, #20]
 800397a:	e08f      	b.n	8003a9c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800397c:	f04f 33ff 	mov.w	r3, #4294967295
 8003980:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b03      	cmp	r3, #3
 8003988:	d062      	beq.n	8003a50 <get_fat+0xfa>
 800398a:	2b03      	cmp	r3, #3
 800398c:	dc7c      	bgt.n	8003a88 <get_fat+0x132>
 800398e:	2b01      	cmp	r3, #1
 8003990:	d002      	beq.n	8003998 <get_fat+0x42>
 8003992:	2b02      	cmp	r3, #2
 8003994:	d042      	beq.n	8003a1c <get_fat+0xc6>
 8003996:	e077      	b.n	8003a88 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	085b      	lsrs	r3, r3, #1
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	4413      	add	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	6a1a      	ldr	r2, [r3, #32]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	0a5b      	lsrs	r3, r3, #9
 80039ae:	4413      	add	r3, r2
 80039b0:	4619      	mov	r1, r3
 80039b2:	6938      	ldr	r0, [r7, #16]
 80039b4:	f7ff ffa2 	bl	80038fc <move_window>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d167      	bne.n	8003a8e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	1c5a      	adds	r2, r3, #1
 80039c2:	60fa      	str	r2, [r7, #12]
 80039c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	4413      	add	r3, r2
 80039cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039d0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	6a1a      	ldr	r2, [r3, #32]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	0a5b      	lsrs	r3, r3, #9
 80039da:	4413      	add	r3, r2
 80039dc:	4619      	mov	r1, r3
 80039de:	6938      	ldr	r0, [r7, #16]
 80039e0:	f7ff ff8c 	bl	80038fc <move_window>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d153      	bne.n	8003a92 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	4413      	add	r3, r2
 80039f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039f8:	021b      	lsls	r3, r3, #8
 80039fa:	461a      	mov	r2, r3
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <get_fat+0xbc>
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	091b      	lsrs	r3, r3, #4
 8003a10:	e002      	b.n	8003a18 <get_fat+0xc2>
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a18:	617b      	str	r3, [r7, #20]
			break;
 8003a1a:	e03f      	b.n	8003a9c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	6a1a      	ldr	r2, [r3, #32]
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	0a1b      	lsrs	r3, r3, #8
 8003a24:	4413      	add	r3, r2
 8003a26:	4619      	mov	r1, r3
 8003a28:	6938      	ldr	r0, [r7, #16]
 8003a2a:	f7ff ff67 	bl	80038fc <move_window>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d130      	bne.n	8003a96 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003a42:	4413      	add	r3, r2
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff feb5 	bl	80037b4 <ld_word>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	617b      	str	r3, [r7, #20]
			break;
 8003a4e:	e025      	b.n	8003a9c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	6a1a      	ldr	r2, [r3, #32]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	09db      	lsrs	r3, r3, #7
 8003a58:	4413      	add	r3, r2
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	6938      	ldr	r0, [r7, #16]
 8003a5e:	f7ff ff4d 	bl	80038fc <move_window>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d118      	bne.n	8003a9a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003a76:	4413      	add	r3, r2
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff feb3 	bl	80037e4 <ld_dword>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003a84:	617b      	str	r3, [r7, #20]
			break;
 8003a86:	e009      	b.n	8003a9c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8003a88:	2301      	movs	r3, #1
 8003a8a:	617b      	str	r3, [r7, #20]
 8003a8c:	e006      	b.n	8003a9c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003a8e:	bf00      	nop
 8003a90:	e004      	b.n	8003a9c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003a92:	bf00      	nop
 8003a94:	e002      	b.n	8003a9c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003a96:	bf00      	nop
 8003a98:	e000      	b.n	8003a9c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003a9a:	bf00      	nop
		}
	}

	return val;
 8003a9c:	697b      	ldr	r3, [r7, #20]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b087      	sub	sp, #28
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8003aae:	f04f 33ff 	mov.w	r3, #4294967295
 8003ab2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d031      	beq.n	8003b20 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	617b      	str	r3, [r7, #20]
 8003ac2:	e002      	b.n	8003aca <get_ldnumber+0x24>
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	617b      	str	r3, [r7, #20]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	2b20      	cmp	r3, #32
 8003ad0:	d903      	bls.n	8003ada <get_ldnumber+0x34>
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2b3a      	cmp	r3, #58	; 0x3a
 8003ad8:	d1f4      	bne.n	8003ac4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b3a      	cmp	r3, #58	; 0x3a
 8003ae0:	d11c      	bne.n	8003b1c <get_ldnumber+0x76>
			tp = *path;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	60fa      	str	r2, [r7, #12]
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	3b30      	subs	r3, #48	; 0x30
 8003af2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	2b09      	cmp	r3, #9
 8003af8:	d80e      	bhi.n	8003b18 <get_ldnumber+0x72>
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d10a      	bne.n	8003b18 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d107      	bne.n	8003b18 <get_ldnumber+0x72>
					vol = (int)i;
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	617b      	str	r3, [r7, #20]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	e002      	b.n	8003b22 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8003b20:	693b      	ldr	r3, [r7, #16]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	371c      	adds	r7, #28
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
	...

08003b30 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	70da      	strb	r2, [r3, #3]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f04f 32ff 	mov.w	r2, #4294967295
 8003b46:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8003b48:	6839      	ldr	r1, [r7, #0]
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7ff fed6 	bl	80038fc <move_window>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <check_fs+0x2a>
 8003b56:	2304      	movs	r3, #4
 8003b58:	e038      	b.n	8003bcc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	3330      	adds	r3, #48	; 0x30
 8003b5e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7ff fe26 	bl	80037b4 <ld_word>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d001      	beq.n	8003b78 <check_fs+0x48>
 8003b74:	2303      	movs	r3, #3
 8003b76:	e029      	b.n	8003bcc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b7e:	2be9      	cmp	r3, #233	; 0xe9
 8003b80:	d009      	beq.n	8003b96 <check_fs+0x66>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b88:	2beb      	cmp	r3, #235	; 0xeb
 8003b8a:	d11e      	bne.n	8003bca <check_fs+0x9a>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003b92:	2b90      	cmp	r3, #144	; 0x90
 8003b94:	d119      	bne.n	8003bca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3330      	adds	r3, #48	; 0x30
 8003b9a:	3336      	adds	r3, #54	; 0x36
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7ff fe21 	bl	80037e4 <ld_dword>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003ba8:	4a0a      	ldr	r2, [pc, #40]	; (8003bd4 <check_fs+0xa4>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d101      	bne.n	8003bb2 <check_fs+0x82>
 8003bae:	2300      	movs	r3, #0
 8003bb0:	e00c      	b.n	8003bcc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	3330      	adds	r3, #48	; 0x30
 8003bb6:	3352      	adds	r3, #82	; 0x52
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7ff fe13 	bl	80037e4 <ld_dword>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	4a05      	ldr	r2, [pc, #20]	; (8003bd8 <check_fs+0xa8>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d101      	bne.n	8003bca <check_fs+0x9a>
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	e000      	b.n	8003bcc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8003bca:	2302      	movs	r3, #2
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	00544146 	.word	0x00544146
 8003bd8:	33544146 	.word	0x33544146

08003bdc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b096      	sub	sp, #88	; 0x58
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	4613      	mov	r3, r2
 8003be8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f7ff ff58 	bl	8003aa6 <get_ldnumber>
 8003bf6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8003bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	da01      	bge.n	8003c02 <find_volume+0x26>
 8003bfe:	230b      	movs	r3, #11
 8003c00:	e22d      	b.n	800405e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8003c02:	4aa1      	ldr	r2, [pc, #644]	; (8003e88 <find_volume+0x2ac>)
 8003c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c0a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8003c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <find_volume+0x3a>
 8003c12:	230c      	movs	r3, #12
 8003c14:	e223      	b.n	800405e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c1a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8003c1c:	79fb      	ldrb	r3, [r7, #7]
 8003c1e:	f023 0301 	bic.w	r3, r3, #1
 8003c22:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8003c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d01a      	beq.n	8003c62 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8003c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2e:	785b      	ldrb	r3, [r3, #1]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7ff fd3f 	bl	80036b4 <disk_status>
 8003c36:	4603      	mov	r3, r0
 8003c38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8003c3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10c      	bne.n	8003c62 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8003c48:	79fb      	ldrb	r3, [r7, #7]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d007      	beq.n	8003c5e <find_volume+0x82>
 8003c4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003c52:	f003 0304 	and.w	r3, r3, #4
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8003c5a:	230a      	movs	r3, #10
 8003c5c:	e1ff      	b.n	800405e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8003c5e:	2300      	movs	r3, #0
 8003c60:	e1fd      	b.n	800405e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8003c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c64:	2200      	movs	r2, #0
 8003c66:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8003c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c6a:	b2da      	uxtb	r2, r3
 8003c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8003c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c72:	785b      	ldrb	r3, [r3, #1]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7ff fd37 	bl	80036e8 <disk_initialize>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8003c80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d001      	beq.n	8003c90 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e1e6      	b.n	800405e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8003c90:	79fb      	ldrb	r3, [r7, #7]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d007      	beq.n	8003ca6 <find_volume+0xca>
 8003c96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003c9a:	f003 0304 	and.w	r3, r3, #4
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8003ca2:	230a      	movs	r3, #10
 8003ca4:	e1db      	b.n	800405e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8003caa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003cac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003cae:	f7ff ff3f 	bl	8003b30 <check_fs>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8003cb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d149      	bne.n	8003d54 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	643b      	str	r3, [r7, #64]	; 0x40
 8003cc4:	e01e      	b.n	8003d04 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8003cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cce:	011b      	lsls	r3, r3, #4
 8003cd0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8003cd4:	4413      	add	r3, r2
 8003cd6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cda:	3304      	adds	r3, #4
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d006      	beq.n	8003cf0 <find_volume+0x114>
 8003ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce4:	3308      	adds	r3, #8
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff fd7c 	bl	80037e4 <ld_dword>
 8003cec:	4602      	mov	r2, r0
 8003cee:	e000      	b.n	8003cf2 <find_volume+0x116>
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	3358      	adds	r3, #88	; 0x58
 8003cf8:	443b      	add	r3, r7
 8003cfa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8003cfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d00:	3301      	adds	r3, #1
 8003d02:	643b      	str	r3, [r7, #64]	; 0x40
 8003d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d06:	2b03      	cmp	r3, #3
 8003d08:	d9dd      	bls.n	8003cc6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8003d0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d002      	beq.n	8003d1a <find_volume+0x13e>
 8003d14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d16:	3b01      	subs	r3, #1
 8003d18:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8003d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	3358      	adds	r3, #88	; 0x58
 8003d20:	443b      	add	r3, r7
 8003d22:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8003d26:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8003d28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d005      	beq.n	8003d3a <find_volume+0x15e>
 8003d2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003d30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003d32:	f7ff fefd 	bl	8003b30 <check_fs>
 8003d36:	4603      	mov	r3, r0
 8003d38:	e000      	b.n	8003d3c <find_volume+0x160>
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8003d40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d905      	bls.n	8003d54 <find_volume+0x178>
 8003d48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	643b      	str	r3, [r7, #64]	; 0x40
 8003d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d50:	2b03      	cmp	r3, #3
 8003d52:	d9e2      	bls.n	8003d1a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8003d54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003d58:	2b04      	cmp	r3, #4
 8003d5a:	d101      	bne.n	8003d60 <find_volume+0x184>
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e17e      	b.n	800405e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8003d60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d901      	bls.n	8003d6c <find_volume+0x190>
 8003d68:	230d      	movs	r3, #13
 8003d6a:	e178      	b.n	800405e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8003d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6e:	3330      	adds	r3, #48	; 0x30
 8003d70:	330b      	adds	r3, #11
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff fd1e 	bl	80037b4 <ld_word>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d7e:	d001      	beq.n	8003d84 <find_volume+0x1a8>
 8003d80:	230d      	movs	r3, #13
 8003d82:	e16c      	b.n	800405e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8003d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d86:	3330      	adds	r3, #48	; 0x30
 8003d88:	3316      	adds	r3, #22
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff fd12 	bl	80037b4 <ld_word>
 8003d90:	4603      	mov	r3, r0
 8003d92:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8003d94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d106      	bne.n	8003da8 <find_volume+0x1cc>
 8003d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9c:	3330      	adds	r3, #48	; 0x30
 8003d9e:	3324      	adds	r3, #36	; 0x24
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff fd1f 	bl	80037e4 <ld_dword>
 8003da6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8003da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003daa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003dac:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8003dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8003db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8003db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dba:	789b      	ldrb	r3, [r3, #2]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d005      	beq.n	8003dcc <find_volume+0x1f0>
 8003dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc2:	789b      	ldrb	r3, [r3, #2]
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d001      	beq.n	8003dcc <find_volume+0x1f0>
 8003dc8:	230d      	movs	r3, #13
 8003dca:	e148      	b.n	800405e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8003dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dce:	789b      	ldrb	r3, [r3, #2]
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dd4:	fb02 f303 	mul.w	r3, r2, r3
 8003dd8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8003dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8003de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de8:	895b      	ldrh	r3, [r3, #10]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d008      	beq.n	8003e00 <find_volume+0x224>
 8003dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df0:	895b      	ldrh	r3, [r3, #10]
 8003df2:	461a      	mov	r2, r3
 8003df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df6:	895b      	ldrh	r3, [r3, #10]
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <find_volume+0x228>
 8003e00:	230d      	movs	r3, #13
 8003e02:	e12c      	b.n	800405e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8003e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e06:	3330      	adds	r3, #48	; 0x30
 8003e08:	3311      	adds	r3, #17
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff fcd2 	bl	80037b4 <ld_word>
 8003e10:	4603      	mov	r3, r0
 8003e12:	461a      	mov	r2, r3
 8003e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e16:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8003e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1a:	891b      	ldrh	r3, [r3, #8]
 8003e1c:	f003 030f 	and.w	r3, r3, #15
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <find_volume+0x24e>
 8003e26:	230d      	movs	r3, #13
 8003e28:	e119      	b.n	800405e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8003e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2c:	3330      	adds	r3, #48	; 0x30
 8003e2e:	3313      	adds	r3, #19
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff fcbf 	bl	80037b4 <ld_word>
 8003e36:	4603      	mov	r3, r0
 8003e38:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8003e3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d106      	bne.n	8003e4e <find_volume+0x272>
 8003e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e42:	3330      	adds	r3, #48	; 0x30
 8003e44:	3320      	adds	r3, #32
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7ff fccc 	bl	80037e4 <ld_dword>
 8003e4c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8003e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e50:	3330      	adds	r3, #48	; 0x30
 8003e52:	330e      	adds	r3, #14
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff fcad 	bl	80037b4 <ld_word>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8003e5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <find_volume+0x28c>
 8003e64:	230d      	movs	r3, #13
 8003e66:	e0fa      	b.n	800405e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8003e68:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e6c:	4413      	add	r3, r2
 8003e6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e70:	8912      	ldrh	r2, [r2, #8]
 8003e72:	0912      	lsrs	r2, r2, #4
 8003e74:	b292      	uxth	r2, r2
 8003e76:	4413      	add	r3, r2
 8003e78:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8003e7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d204      	bcs.n	8003e8c <find_volume+0x2b0>
 8003e82:	230d      	movs	r3, #13
 8003e84:	e0eb      	b.n	800405e <find_volume+0x482>
 8003e86:	bf00      	nop
 8003e88:	2000015c 	.word	0x2000015c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8003e8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e94:	8952      	ldrh	r2, [r2, #10]
 8003e96:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e9a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <find_volume+0x2ca>
 8003ea2:	230d      	movs	r3, #13
 8003ea4:	e0db      	b.n	800405e <find_volume+0x482>
		fmt = FS_FAT32;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d802      	bhi.n	8003ebc <find_volume+0x2e0>
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	f640 72f5 	movw	r2, #4085	; 0xff5
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d802      	bhi.n	8003ecc <find_volume+0x2f0>
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	1c9a      	adds	r2, r3, #2
 8003ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8003ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003ed8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8003eda:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003edc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ede:	441a      	add	r2, r3
 8003ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8003ee4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee8:	441a      	add	r2, r3
 8003eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eec:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8003eee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003ef2:	2b03      	cmp	r3, #3
 8003ef4:	d11e      	bne.n	8003f34 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8003ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef8:	3330      	adds	r3, #48	; 0x30
 8003efa:	332a      	adds	r3, #42	; 0x2a
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7ff fc59 	bl	80037b4 <ld_word>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <find_volume+0x330>
 8003f08:	230d      	movs	r3, #13
 8003f0a:	e0a8      	b.n	800405e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8003f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f0e:	891b      	ldrh	r3, [r3, #8]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <find_volume+0x33c>
 8003f14:	230d      	movs	r3, #13
 8003f16:	e0a2      	b.n	800405e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8003f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f1a:	3330      	adds	r3, #48	; 0x30
 8003f1c:	332c      	adds	r3, #44	; 0x2c
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff fc60 	bl	80037e4 <ld_dword>
 8003f24:	4602      	mov	r2, r0
 8003f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f28:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8003f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	647b      	str	r3, [r7, #68]	; 0x44
 8003f32:	e01f      	b.n	8003f74 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8003f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f36:	891b      	ldrh	r3, [r3, #8]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d101      	bne.n	8003f40 <find_volume+0x364>
 8003f3c:	230d      	movs	r3, #13
 8003f3e:	e08e      	b.n	800405e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8003f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f42:	6a1a      	ldr	r2, [r3, #32]
 8003f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f46:	441a      	add	r2, r3
 8003f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003f4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d103      	bne.n	8003f5c <find_volume+0x380>
 8003f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	e00a      	b.n	8003f72 <find_volume+0x396>
 8003f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5e:	695a      	ldr	r2, [r3, #20]
 8003f60:	4613      	mov	r3, r2
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	4413      	add	r3, r2
 8003f66:	085a      	lsrs	r2, r3, #1
 8003f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8003f72:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8003f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f76:	699a      	ldr	r2, [r3, #24]
 8003f78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f7a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003f7e:	0a5b      	lsrs	r3, r3, #9
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d201      	bcs.n	8003f88 <find_volume+0x3ac>
 8003f84:	230d      	movs	r3, #13
 8003f86:	e06a      	b.n	800405e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8003f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f8e:	611a      	str	r2, [r3, #16]
 8003f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f92:	691a      	ldr	r2, [r3, #16]
 8003f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f96:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8003f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f9a:	2280      	movs	r2, #128	; 0x80
 8003f9c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8003f9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003fa2:	2b03      	cmp	r3, #3
 8003fa4:	d149      	bne.n	800403a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8003fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa8:	3330      	adds	r3, #48	; 0x30
 8003faa:	3330      	adds	r3, #48	; 0x30
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7ff fc01 	bl	80037b4 <ld_word>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d140      	bne.n	800403a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8003fb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fba:	3301      	adds	r3, #1
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003fc0:	f7ff fc9c 	bl	80038fc <move_window>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d137      	bne.n	800403a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8003fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fcc:	2200      	movs	r2, #0
 8003fce:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8003fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd2:	3330      	adds	r3, #48	; 0x30
 8003fd4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff fbeb 	bl	80037b4 <ld_word>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d127      	bne.n	800403a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8003fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fec:	3330      	adds	r3, #48	; 0x30
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7ff fbf8 	bl	80037e4 <ld_dword>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	4a1c      	ldr	r2, [pc, #112]	; (8004068 <find_volume+0x48c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d11e      	bne.n	800403a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8003ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ffe:	3330      	adds	r3, #48	; 0x30
 8004000:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004004:	4618      	mov	r0, r3
 8004006:	f7ff fbed 	bl	80037e4 <ld_dword>
 800400a:	4603      	mov	r3, r0
 800400c:	4a17      	ldr	r2, [pc, #92]	; (800406c <find_volume+0x490>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d113      	bne.n	800403a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004014:	3330      	adds	r3, #48	; 0x30
 8004016:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800401a:	4618      	mov	r0, r3
 800401c:	f7ff fbe2 	bl	80037e4 <ld_dword>
 8004020:	4602      	mov	r2, r0
 8004022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004024:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004028:	3330      	adds	r3, #48	; 0x30
 800402a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800402e:	4618      	mov	r0, r3
 8004030:	f7ff fbd8 	bl	80037e4 <ld_dword>
 8004034:	4602      	mov	r2, r0
 8004036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004038:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800403a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004040:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8004042:	4b0b      	ldr	r3, [pc, #44]	; (8004070 <find_volume+0x494>)
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	3301      	adds	r3, #1
 8004048:	b29a      	uxth	r2, r3
 800404a:	4b09      	ldr	r3, [pc, #36]	; (8004070 <find_volume+0x494>)
 800404c:	801a      	strh	r2, [r3, #0]
 800404e:	4b08      	ldr	r3, [pc, #32]	; (8004070 <find_volume+0x494>)
 8004050:	881a      	ldrh	r2, [r3, #0]
 8004052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004054:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8004056:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004058:	f7ff fbe8 	bl	800382c <clear_lock>
#endif
	return FR_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3758      	adds	r7, #88	; 0x58
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	41615252 	.word	0x41615252
 800406c:	61417272 	.word	0x61417272
 8004070:	20000160 	.word	0x20000160

08004074 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b088      	sub	sp, #32
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	4613      	mov	r3, r2
 8004080:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8004086:	f107 0310 	add.w	r3, r7, #16
 800408a:	4618      	mov	r0, r3
 800408c:	f7ff fd0b 	bl	8003aa6 <get_ldnumber>
 8004090:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	2b00      	cmp	r3, #0
 8004096:	da01      	bge.n	800409c <f_mount+0x28>
 8004098:	230b      	movs	r3, #11
 800409a:	e02b      	b.n	80040f4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800409c:	4a17      	ldr	r2, [pc, #92]	; (80040fc <f_mount+0x88>)
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040a4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d005      	beq.n	80040b8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80040ac:	69b8      	ldr	r0, [r7, #24]
 80040ae:	f7ff fbbd 	bl	800382c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	2200      	movs	r2, #0
 80040b6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d002      	beq.n	80040c4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	490d      	ldr	r1, [pc, #52]	; (80040fc <f_mount+0x88>)
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d002      	beq.n	80040da <f_mount+0x66>
 80040d4:	79fb      	ldrb	r3, [r7, #7]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d001      	beq.n	80040de <f_mount+0x6a>
 80040da:	2300      	movs	r3, #0
 80040dc:	e00a      	b.n	80040f4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80040de:	f107 010c 	add.w	r1, r7, #12
 80040e2:	f107 0308 	add.w	r3, r7, #8
 80040e6:	2200      	movs	r2, #0
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7ff fd77 	bl	8003bdc <find_volume>
 80040ee:	4603      	mov	r3, r0
 80040f0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80040f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3720      	adds	r7, #32
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	2000015c 	.word	0x2000015c

08004100 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b092      	sub	sp, #72	; 0x48
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800410c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004110:	f107 030c 	add.w	r3, r7, #12
 8004114:	2200      	movs	r2, #0
 8004116:	4618      	mov	r0, r3
 8004118:	f7ff fd60 	bl	8003bdc <find_volume>
 800411c:	4603      	mov	r3, r0
 800411e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8004122:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004126:	2b00      	cmp	r3, #0
 8004128:	f040 8099 	bne.w	800425e <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800412c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8004132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004134:	691a      	ldr	r2, [r3, #16]
 8004136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	3b02      	subs	r3, #2
 800413c:	429a      	cmp	r2, r3
 800413e:	d804      	bhi.n	800414a <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8004140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004142:	691a      	ldr	r2, [r3, #16]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	e089      	b.n	800425e <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800414a:	2300      	movs	r3, #0
 800414c:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800414e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d128      	bne.n	80041a8 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8004156:	2302      	movs	r3, #2
 8004158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800415a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415c:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800415e:	f107 0314 	add.w	r3, r7, #20
 8004162:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004164:	4618      	mov	r0, r3
 8004166:	f7ff fbf6 	bl	8003956 <get_fat>
 800416a:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800416c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004172:	d103      	bne.n	800417c <f_getfree+0x7c>
 8004174:	2301      	movs	r3, #1
 8004176:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800417a:	e063      	b.n	8004244 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800417c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417e:	2b01      	cmp	r3, #1
 8004180:	d103      	bne.n	800418a <f_getfree+0x8a>
 8004182:	2302      	movs	r3, #2
 8004184:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004188:	e05c      	b.n	8004244 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800418a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418c:	2b00      	cmp	r3, #0
 800418e:	d102      	bne.n	8004196 <f_getfree+0x96>
 8004190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004192:	3301      	adds	r3, #1
 8004194:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8004196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004198:	3301      	adds	r3, #1
 800419a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800419c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d3db      	bcc.n	800415e <f_getfree+0x5e>
 80041a6:	e04d      	b.n	8004244 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80041a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80041b4:	2300      	movs	r3, #0
 80041b6:	637b      	str	r3, [r7, #52]	; 0x34
 80041b8:	2300      	movs	r3, #0
 80041ba:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80041bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d113      	bne.n	80041ea <f_getfree+0xea>
							res = move_window(fs, sect++);
 80041c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	63ba      	str	r2, [r7, #56]	; 0x38
 80041ca:	4619      	mov	r1, r3
 80041cc:	f7ff fb96 	bl	80038fc <move_window>
 80041d0:	4603      	mov	r3, r0
 80041d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80041d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d131      	bne.n	8004242 <f_getfree+0x142>
							p = fs->win;
 80041de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e0:	3330      	adds	r3, #48	; 0x30
 80041e2:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80041e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041e8:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80041ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d10f      	bne.n	8004212 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80041f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041f4:	f7ff fade 	bl	80037b4 <ld_word>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d102      	bne.n	8004204 <f_getfree+0x104>
 80041fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004200:	3301      	adds	r3, #1
 8004202:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8004204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004206:	3302      	adds	r3, #2
 8004208:	633b      	str	r3, [r7, #48]	; 0x30
 800420a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800420c:	3b02      	subs	r3, #2
 800420e:	637b      	str	r3, [r7, #52]	; 0x34
 8004210:	e010      	b.n	8004234 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8004212:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004214:	f7ff fae6 	bl	80037e4 <ld_dword>
 8004218:	4603      	mov	r3, r0
 800421a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d102      	bne.n	8004228 <f_getfree+0x128>
 8004222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004224:	3301      	adds	r3, #1
 8004226:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8004228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422a:	3304      	adds	r3, #4
 800422c:	633b      	str	r3, [r7, #48]	; 0x30
 800422e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004230:	3b04      	subs	r3, #4
 8004232:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8004234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004236:	3b01      	subs	r3, #1
 8004238:	63fb      	str	r3, [r7, #60]	; 0x3c
 800423a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1bd      	bne.n	80041bc <f_getfree+0xbc>
 8004240:	e000      	b.n	8004244 <f_getfree+0x144>
							if (res != FR_OK) break;
 8004242:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004248:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800424a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800424e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8004250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004252:	791a      	ldrb	r2, [r3, #4]
 8004254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004256:	f042 0201 	orr.w	r2, r2, #1
 800425a:	b2d2      	uxtb	r2, r2
 800425c:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800425e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8004262:	4618      	mov	r0, r3
 8004264:	3748      	adds	r7, #72	; 0x48
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
	...

0800426c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800426c:	b480      	push	{r7}
 800426e:	b087      	sub	sp, #28
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	4613      	mov	r3, r2
 8004278:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800427a:	2301      	movs	r3, #1
 800427c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800427e:	2300      	movs	r3, #0
 8004280:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8004282:	4b1f      	ldr	r3, [pc, #124]	; (8004300 <FATFS_LinkDriverEx+0x94>)
 8004284:	7a5b      	ldrb	r3, [r3, #9]
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b00      	cmp	r3, #0
 800428a:	d131      	bne.n	80042f0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800428c:	4b1c      	ldr	r3, [pc, #112]	; (8004300 <FATFS_LinkDriverEx+0x94>)
 800428e:	7a5b      	ldrb	r3, [r3, #9]
 8004290:	b2db      	uxtb	r3, r3
 8004292:	461a      	mov	r2, r3
 8004294:	4b1a      	ldr	r3, [pc, #104]	; (8004300 <FATFS_LinkDriverEx+0x94>)
 8004296:	2100      	movs	r1, #0
 8004298:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800429a:	4b19      	ldr	r3, [pc, #100]	; (8004300 <FATFS_LinkDriverEx+0x94>)
 800429c:	7a5b      	ldrb	r3, [r3, #9]
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	4a17      	ldr	r2, [pc, #92]	; (8004300 <FATFS_LinkDriverEx+0x94>)
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80042aa:	4b15      	ldr	r3, [pc, #84]	; (8004300 <FATFS_LinkDriverEx+0x94>)
 80042ac:	7a5b      	ldrb	r3, [r3, #9]
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	461a      	mov	r2, r3
 80042b2:	4b13      	ldr	r3, [pc, #76]	; (8004300 <FATFS_LinkDriverEx+0x94>)
 80042b4:	4413      	add	r3, r2
 80042b6:	79fa      	ldrb	r2, [r7, #7]
 80042b8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80042ba:	4b11      	ldr	r3, [pc, #68]	; (8004300 <FATFS_LinkDriverEx+0x94>)
 80042bc:	7a5b      	ldrb	r3, [r3, #9]
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	1c5a      	adds	r2, r3, #1
 80042c2:	b2d1      	uxtb	r1, r2
 80042c4:	4a0e      	ldr	r2, [pc, #56]	; (8004300 <FATFS_LinkDriverEx+0x94>)
 80042c6:	7251      	strb	r1, [r2, #9]
 80042c8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80042ca:	7dbb      	ldrb	r3, [r7, #22]
 80042cc:	3330      	adds	r3, #48	; 0x30
 80042ce:	b2da      	uxtb	r2, r3
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	3301      	adds	r3, #1
 80042d8:	223a      	movs	r2, #58	; 0x3a
 80042da:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	3302      	adds	r3, #2
 80042e0:	222f      	movs	r2, #47	; 0x2f
 80042e2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	3303      	adds	r3, #3
 80042e8:	2200      	movs	r2, #0
 80042ea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80042ec:	2300      	movs	r3, #0
 80042ee:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80042f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	371c      	adds	r7, #28
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	20000184 	.word	0x20000184

08004304 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800430e:	2200      	movs	r2, #0
 8004310:	6839      	ldr	r1, [r7, #0]
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7ff ffaa 	bl	800426c <FATFS_LinkDriverEx>
 8004318:	4603      	mov	r3, r0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <__errno>:
 8004324:	4b01      	ldr	r3, [pc, #4]	; (800432c <__errno+0x8>)
 8004326:	6818      	ldr	r0, [r3, #0]
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	20000024 	.word	0x20000024

08004330 <__libc_init_array>:
 8004330:	b570      	push	{r4, r5, r6, lr}
 8004332:	4d0d      	ldr	r5, [pc, #52]	; (8004368 <__libc_init_array+0x38>)
 8004334:	4c0d      	ldr	r4, [pc, #52]	; (800436c <__libc_init_array+0x3c>)
 8004336:	1b64      	subs	r4, r4, r5
 8004338:	10a4      	asrs	r4, r4, #2
 800433a:	2600      	movs	r6, #0
 800433c:	42a6      	cmp	r6, r4
 800433e:	d109      	bne.n	8004354 <__libc_init_array+0x24>
 8004340:	4d0b      	ldr	r5, [pc, #44]	; (8004370 <__libc_init_array+0x40>)
 8004342:	4c0c      	ldr	r4, [pc, #48]	; (8004374 <__libc_init_array+0x44>)
 8004344:	f001 f824 	bl	8005390 <_init>
 8004348:	1b64      	subs	r4, r4, r5
 800434a:	10a4      	asrs	r4, r4, #2
 800434c:	2600      	movs	r6, #0
 800434e:	42a6      	cmp	r6, r4
 8004350:	d105      	bne.n	800435e <__libc_init_array+0x2e>
 8004352:	bd70      	pop	{r4, r5, r6, pc}
 8004354:	f855 3b04 	ldr.w	r3, [r5], #4
 8004358:	4798      	blx	r3
 800435a:	3601      	adds	r6, #1
 800435c:	e7ee      	b.n	800433c <__libc_init_array+0xc>
 800435e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004362:	4798      	blx	r3
 8004364:	3601      	adds	r6, #1
 8004366:	e7f2      	b.n	800434e <__libc_init_array+0x1e>
 8004368:	080054fc 	.word	0x080054fc
 800436c:	080054fc 	.word	0x080054fc
 8004370:	080054fc 	.word	0x080054fc
 8004374:	08005500 	.word	0x08005500

08004378 <memset>:
 8004378:	4402      	add	r2, r0
 800437a:	4603      	mov	r3, r0
 800437c:	4293      	cmp	r3, r2
 800437e:	d100      	bne.n	8004382 <memset+0xa>
 8004380:	4770      	bx	lr
 8004382:	f803 1b01 	strb.w	r1, [r3], #1
 8004386:	e7f9      	b.n	800437c <memset+0x4>

08004388 <iprintf>:
 8004388:	b40f      	push	{r0, r1, r2, r3}
 800438a:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <iprintf+0x2c>)
 800438c:	b513      	push	{r0, r1, r4, lr}
 800438e:	681c      	ldr	r4, [r3, #0]
 8004390:	b124      	cbz	r4, 800439c <iprintf+0x14>
 8004392:	69a3      	ldr	r3, [r4, #24]
 8004394:	b913      	cbnz	r3, 800439c <iprintf+0x14>
 8004396:	4620      	mov	r0, r4
 8004398:	f000 fa5e 	bl	8004858 <__sinit>
 800439c:	ab05      	add	r3, sp, #20
 800439e:	9a04      	ldr	r2, [sp, #16]
 80043a0:	68a1      	ldr	r1, [r4, #8]
 80043a2:	9301      	str	r3, [sp, #4]
 80043a4:	4620      	mov	r0, r4
 80043a6:	f000 fc67 	bl	8004c78 <_vfiprintf_r>
 80043aa:	b002      	add	sp, #8
 80043ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043b0:	b004      	add	sp, #16
 80043b2:	4770      	bx	lr
 80043b4:	20000024 	.word	0x20000024

080043b8 <_puts_r>:
 80043b8:	b570      	push	{r4, r5, r6, lr}
 80043ba:	460e      	mov	r6, r1
 80043bc:	4605      	mov	r5, r0
 80043be:	b118      	cbz	r0, 80043c8 <_puts_r+0x10>
 80043c0:	6983      	ldr	r3, [r0, #24]
 80043c2:	b90b      	cbnz	r3, 80043c8 <_puts_r+0x10>
 80043c4:	f000 fa48 	bl	8004858 <__sinit>
 80043c8:	69ab      	ldr	r3, [r5, #24]
 80043ca:	68ac      	ldr	r4, [r5, #8]
 80043cc:	b913      	cbnz	r3, 80043d4 <_puts_r+0x1c>
 80043ce:	4628      	mov	r0, r5
 80043d0:	f000 fa42 	bl	8004858 <__sinit>
 80043d4:	4b2c      	ldr	r3, [pc, #176]	; (8004488 <_puts_r+0xd0>)
 80043d6:	429c      	cmp	r4, r3
 80043d8:	d120      	bne.n	800441c <_puts_r+0x64>
 80043da:	686c      	ldr	r4, [r5, #4]
 80043dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043de:	07db      	lsls	r3, r3, #31
 80043e0:	d405      	bmi.n	80043ee <_puts_r+0x36>
 80043e2:	89a3      	ldrh	r3, [r4, #12]
 80043e4:	0598      	lsls	r0, r3, #22
 80043e6:	d402      	bmi.n	80043ee <_puts_r+0x36>
 80043e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043ea:	f000 fad3 	bl	8004994 <__retarget_lock_acquire_recursive>
 80043ee:	89a3      	ldrh	r3, [r4, #12]
 80043f0:	0719      	lsls	r1, r3, #28
 80043f2:	d51d      	bpl.n	8004430 <_puts_r+0x78>
 80043f4:	6923      	ldr	r3, [r4, #16]
 80043f6:	b1db      	cbz	r3, 8004430 <_puts_r+0x78>
 80043f8:	3e01      	subs	r6, #1
 80043fa:	68a3      	ldr	r3, [r4, #8]
 80043fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004400:	3b01      	subs	r3, #1
 8004402:	60a3      	str	r3, [r4, #8]
 8004404:	bb39      	cbnz	r1, 8004456 <_puts_r+0x9e>
 8004406:	2b00      	cmp	r3, #0
 8004408:	da38      	bge.n	800447c <_puts_r+0xc4>
 800440a:	4622      	mov	r2, r4
 800440c:	210a      	movs	r1, #10
 800440e:	4628      	mov	r0, r5
 8004410:	f000 f848 	bl	80044a4 <__swbuf_r>
 8004414:	3001      	adds	r0, #1
 8004416:	d011      	beq.n	800443c <_puts_r+0x84>
 8004418:	250a      	movs	r5, #10
 800441a:	e011      	b.n	8004440 <_puts_r+0x88>
 800441c:	4b1b      	ldr	r3, [pc, #108]	; (800448c <_puts_r+0xd4>)
 800441e:	429c      	cmp	r4, r3
 8004420:	d101      	bne.n	8004426 <_puts_r+0x6e>
 8004422:	68ac      	ldr	r4, [r5, #8]
 8004424:	e7da      	b.n	80043dc <_puts_r+0x24>
 8004426:	4b1a      	ldr	r3, [pc, #104]	; (8004490 <_puts_r+0xd8>)
 8004428:	429c      	cmp	r4, r3
 800442a:	bf08      	it	eq
 800442c:	68ec      	ldreq	r4, [r5, #12]
 800442e:	e7d5      	b.n	80043dc <_puts_r+0x24>
 8004430:	4621      	mov	r1, r4
 8004432:	4628      	mov	r0, r5
 8004434:	f000 f888 	bl	8004548 <__swsetup_r>
 8004438:	2800      	cmp	r0, #0
 800443a:	d0dd      	beq.n	80043f8 <_puts_r+0x40>
 800443c:	f04f 35ff 	mov.w	r5, #4294967295
 8004440:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004442:	07da      	lsls	r2, r3, #31
 8004444:	d405      	bmi.n	8004452 <_puts_r+0x9a>
 8004446:	89a3      	ldrh	r3, [r4, #12]
 8004448:	059b      	lsls	r3, r3, #22
 800444a:	d402      	bmi.n	8004452 <_puts_r+0x9a>
 800444c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800444e:	f000 faa2 	bl	8004996 <__retarget_lock_release_recursive>
 8004452:	4628      	mov	r0, r5
 8004454:	bd70      	pop	{r4, r5, r6, pc}
 8004456:	2b00      	cmp	r3, #0
 8004458:	da04      	bge.n	8004464 <_puts_r+0xac>
 800445a:	69a2      	ldr	r2, [r4, #24]
 800445c:	429a      	cmp	r2, r3
 800445e:	dc06      	bgt.n	800446e <_puts_r+0xb6>
 8004460:	290a      	cmp	r1, #10
 8004462:	d004      	beq.n	800446e <_puts_r+0xb6>
 8004464:	6823      	ldr	r3, [r4, #0]
 8004466:	1c5a      	adds	r2, r3, #1
 8004468:	6022      	str	r2, [r4, #0]
 800446a:	7019      	strb	r1, [r3, #0]
 800446c:	e7c5      	b.n	80043fa <_puts_r+0x42>
 800446e:	4622      	mov	r2, r4
 8004470:	4628      	mov	r0, r5
 8004472:	f000 f817 	bl	80044a4 <__swbuf_r>
 8004476:	3001      	adds	r0, #1
 8004478:	d1bf      	bne.n	80043fa <_puts_r+0x42>
 800447a:	e7df      	b.n	800443c <_puts_r+0x84>
 800447c:	6823      	ldr	r3, [r4, #0]
 800447e:	250a      	movs	r5, #10
 8004480:	1c5a      	adds	r2, r3, #1
 8004482:	6022      	str	r2, [r4, #0]
 8004484:	701d      	strb	r5, [r3, #0]
 8004486:	e7db      	b.n	8004440 <_puts_r+0x88>
 8004488:	08005480 	.word	0x08005480
 800448c:	080054a0 	.word	0x080054a0
 8004490:	08005460 	.word	0x08005460

08004494 <puts>:
 8004494:	4b02      	ldr	r3, [pc, #8]	; (80044a0 <puts+0xc>)
 8004496:	4601      	mov	r1, r0
 8004498:	6818      	ldr	r0, [r3, #0]
 800449a:	f7ff bf8d 	b.w	80043b8 <_puts_r>
 800449e:	bf00      	nop
 80044a0:	20000024 	.word	0x20000024

080044a4 <__swbuf_r>:
 80044a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044a6:	460e      	mov	r6, r1
 80044a8:	4614      	mov	r4, r2
 80044aa:	4605      	mov	r5, r0
 80044ac:	b118      	cbz	r0, 80044b6 <__swbuf_r+0x12>
 80044ae:	6983      	ldr	r3, [r0, #24]
 80044b0:	b90b      	cbnz	r3, 80044b6 <__swbuf_r+0x12>
 80044b2:	f000 f9d1 	bl	8004858 <__sinit>
 80044b6:	4b21      	ldr	r3, [pc, #132]	; (800453c <__swbuf_r+0x98>)
 80044b8:	429c      	cmp	r4, r3
 80044ba:	d12b      	bne.n	8004514 <__swbuf_r+0x70>
 80044bc:	686c      	ldr	r4, [r5, #4]
 80044be:	69a3      	ldr	r3, [r4, #24]
 80044c0:	60a3      	str	r3, [r4, #8]
 80044c2:	89a3      	ldrh	r3, [r4, #12]
 80044c4:	071a      	lsls	r2, r3, #28
 80044c6:	d52f      	bpl.n	8004528 <__swbuf_r+0x84>
 80044c8:	6923      	ldr	r3, [r4, #16]
 80044ca:	b36b      	cbz	r3, 8004528 <__swbuf_r+0x84>
 80044cc:	6923      	ldr	r3, [r4, #16]
 80044ce:	6820      	ldr	r0, [r4, #0]
 80044d0:	1ac0      	subs	r0, r0, r3
 80044d2:	6963      	ldr	r3, [r4, #20]
 80044d4:	b2f6      	uxtb	r6, r6
 80044d6:	4283      	cmp	r3, r0
 80044d8:	4637      	mov	r7, r6
 80044da:	dc04      	bgt.n	80044e6 <__swbuf_r+0x42>
 80044dc:	4621      	mov	r1, r4
 80044de:	4628      	mov	r0, r5
 80044e0:	f000 f926 	bl	8004730 <_fflush_r>
 80044e4:	bb30      	cbnz	r0, 8004534 <__swbuf_r+0x90>
 80044e6:	68a3      	ldr	r3, [r4, #8]
 80044e8:	3b01      	subs	r3, #1
 80044ea:	60a3      	str	r3, [r4, #8]
 80044ec:	6823      	ldr	r3, [r4, #0]
 80044ee:	1c5a      	adds	r2, r3, #1
 80044f0:	6022      	str	r2, [r4, #0]
 80044f2:	701e      	strb	r6, [r3, #0]
 80044f4:	6963      	ldr	r3, [r4, #20]
 80044f6:	3001      	adds	r0, #1
 80044f8:	4283      	cmp	r3, r0
 80044fa:	d004      	beq.n	8004506 <__swbuf_r+0x62>
 80044fc:	89a3      	ldrh	r3, [r4, #12]
 80044fe:	07db      	lsls	r3, r3, #31
 8004500:	d506      	bpl.n	8004510 <__swbuf_r+0x6c>
 8004502:	2e0a      	cmp	r6, #10
 8004504:	d104      	bne.n	8004510 <__swbuf_r+0x6c>
 8004506:	4621      	mov	r1, r4
 8004508:	4628      	mov	r0, r5
 800450a:	f000 f911 	bl	8004730 <_fflush_r>
 800450e:	b988      	cbnz	r0, 8004534 <__swbuf_r+0x90>
 8004510:	4638      	mov	r0, r7
 8004512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004514:	4b0a      	ldr	r3, [pc, #40]	; (8004540 <__swbuf_r+0x9c>)
 8004516:	429c      	cmp	r4, r3
 8004518:	d101      	bne.n	800451e <__swbuf_r+0x7a>
 800451a:	68ac      	ldr	r4, [r5, #8]
 800451c:	e7cf      	b.n	80044be <__swbuf_r+0x1a>
 800451e:	4b09      	ldr	r3, [pc, #36]	; (8004544 <__swbuf_r+0xa0>)
 8004520:	429c      	cmp	r4, r3
 8004522:	bf08      	it	eq
 8004524:	68ec      	ldreq	r4, [r5, #12]
 8004526:	e7ca      	b.n	80044be <__swbuf_r+0x1a>
 8004528:	4621      	mov	r1, r4
 800452a:	4628      	mov	r0, r5
 800452c:	f000 f80c 	bl	8004548 <__swsetup_r>
 8004530:	2800      	cmp	r0, #0
 8004532:	d0cb      	beq.n	80044cc <__swbuf_r+0x28>
 8004534:	f04f 37ff 	mov.w	r7, #4294967295
 8004538:	e7ea      	b.n	8004510 <__swbuf_r+0x6c>
 800453a:	bf00      	nop
 800453c:	08005480 	.word	0x08005480
 8004540:	080054a0 	.word	0x080054a0
 8004544:	08005460 	.word	0x08005460

08004548 <__swsetup_r>:
 8004548:	4b32      	ldr	r3, [pc, #200]	; (8004614 <__swsetup_r+0xcc>)
 800454a:	b570      	push	{r4, r5, r6, lr}
 800454c:	681d      	ldr	r5, [r3, #0]
 800454e:	4606      	mov	r6, r0
 8004550:	460c      	mov	r4, r1
 8004552:	b125      	cbz	r5, 800455e <__swsetup_r+0x16>
 8004554:	69ab      	ldr	r3, [r5, #24]
 8004556:	b913      	cbnz	r3, 800455e <__swsetup_r+0x16>
 8004558:	4628      	mov	r0, r5
 800455a:	f000 f97d 	bl	8004858 <__sinit>
 800455e:	4b2e      	ldr	r3, [pc, #184]	; (8004618 <__swsetup_r+0xd0>)
 8004560:	429c      	cmp	r4, r3
 8004562:	d10f      	bne.n	8004584 <__swsetup_r+0x3c>
 8004564:	686c      	ldr	r4, [r5, #4]
 8004566:	89a3      	ldrh	r3, [r4, #12]
 8004568:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800456c:	0719      	lsls	r1, r3, #28
 800456e:	d42c      	bmi.n	80045ca <__swsetup_r+0x82>
 8004570:	06dd      	lsls	r5, r3, #27
 8004572:	d411      	bmi.n	8004598 <__swsetup_r+0x50>
 8004574:	2309      	movs	r3, #9
 8004576:	6033      	str	r3, [r6, #0]
 8004578:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800457c:	81a3      	strh	r3, [r4, #12]
 800457e:	f04f 30ff 	mov.w	r0, #4294967295
 8004582:	e03e      	b.n	8004602 <__swsetup_r+0xba>
 8004584:	4b25      	ldr	r3, [pc, #148]	; (800461c <__swsetup_r+0xd4>)
 8004586:	429c      	cmp	r4, r3
 8004588:	d101      	bne.n	800458e <__swsetup_r+0x46>
 800458a:	68ac      	ldr	r4, [r5, #8]
 800458c:	e7eb      	b.n	8004566 <__swsetup_r+0x1e>
 800458e:	4b24      	ldr	r3, [pc, #144]	; (8004620 <__swsetup_r+0xd8>)
 8004590:	429c      	cmp	r4, r3
 8004592:	bf08      	it	eq
 8004594:	68ec      	ldreq	r4, [r5, #12]
 8004596:	e7e6      	b.n	8004566 <__swsetup_r+0x1e>
 8004598:	0758      	lsls	r0, r3, #29
 800459a:	d512      	bpl.n	80045c2 <__swsetup_r+0x7a>
 800459c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800459e:	b141      	cbz	r1, 80045b2 <__swsetup_r+0x6a>
 80045a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045a4:	4299      	cmp	r1, r3
 80045a6:	d002      	beq.n	80045ae <__swsetup_r+0x66>
 80045a8:	4630      	mov	r0, r6
 80045aa:	f000 fa5b 	bl	8004a64 <_free_r>
 80045ae:	2300      	movs	r3, #0
 80045b0:	6363      	str	r3, [r4, #52]	; 0x34
 80045b2:	89a3      	ldrh	r3, [r4, #12]
 80045b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80045b8:	81a3      	strh	r3, [r4, #12]
 80045ba:	2300      	movs	r3, #0
 80045bc:	6063      	str	r3, [r4, #4]
 80045be:	6923      	ldr	r3, [r4, #16]
 80045c0:	6023      	str	r3, [r4, #0]
 80045c2:	89a3      	ldrh	r3, [r4, #12]
 80045c4:	f043 0308 	orr.w	r3, r3, #8
 80045c8:	81a3      	strh	r3, [r4, #12]
 80045ca:	6923      	ldr	r3, [r4, #16]
 80045cc:	b94b      	cbnz	r3, 80045e2 <__swsetup_r+0x9a>
 80045ce:	89a3      	ldrh	r3, [r4, #12]
 80045d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80045d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045d8:	d003      	beq.n	80045e2 <__swsetup_r+0x9a>
 80045da:	4621      	mov	r1, r4
 80045dc:	4630      	mov	r0, r6
 80045de:	f000 fa01 	bl	80049e4 <__smakebuf_r>
 80045e2:	89a0      	ldrh	r0, [r4, #12]
 80045e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80045e8:	f010 0301 	ands.w	r3, r0, #1
 80045ec:	d00a      	beq.n	8004604 <__swsetup_r+0xbc>
 80045ee:	2300      	movs	r3, #0
 80045f0:	60a3      	str	r3, [r4, #8]
 80045f2:	6963      	ldr	r3, [r4, #20]
 80045f4:	425b      	negs	r3, r3
 80045f6:	61a3      	str	r3, [r4, #24]
 80045f8:	6923      	ldr	r3, [r4, #16]
 80045fa:	b943      	cbnz	r3, 800460e <__swsetup_r+0xc6>
 80045fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004600:	d1ba      	bne.n	8004578 <__swsetup_r+0x30>
 8004602:	bd70      	pop	{r4, r5, r6, pc}
 8004604:	0781      	lsls	r1, r0, #30
 8004606:	bf58      	it	pl
 8004608:	6963      	ldrpl	r3, [r4, #20]
 800460a:	60a3      	str	r3, [r4, #8]
 800460c:	e7f4      	b.n	80045f8 <__swsetup_r+0xb0>
 800460e:	2000      	movs	r0, #0
 8004610:	e7f7      	b.n	8004602 <__swsetup_r+0xba>
 8004612:	bf00      	nop
 8004614:	20000024 	.word	0x20000024
 8004618:	08005480 	.word	0x08005480
 800461c:	080054a0 	.word	0x080054a0
 8004620:	08005460 	.word	0x08005460

08004624 <__sflush_r>:
 8004624:	898a      	ldrh	r2, [r1, #12]
 8004626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800462a:	4605      	mov	r5, r0
 800462c:	0710      	lsls	r0, r2, #28
 800462e:	460c      	mov	r4, r1
 8004630:	d458      	bmi.n	80046e4 <__sflush_r+0xc0>
 8004632:	684b      	ldr	r3, [r1, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	dc05      	bgt.n	8004644 <__sflush_r+0x20>
 8004638:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800463a:	2b00      	cmp	r3, #0
 800463c:	dc02      	bgt.n	8004644 <__sflush_r+0x20>
 800463e:	2000      	movs	r0, #0
 8004640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004644:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004646:	2e00      	cmp	r6, #0
 8004648:	d0f9      	beq.n	800463e <__sflush_r+0x1a>
 800464a:	2300      	movs	r3, #0
 800464c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004650:	682f      	ldr	r7, [r5, #0]
 8004652:	602b      	str	r3, [r5, #0]
 8004654:	d032      	beq.n	80046bc <__sflush_r+0x98>
 8004656:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004658:	89a3      	ldrh	r3, [r4, #12]
 800465a:	075a      	lsls	r2, r3, #29
 800465c:	d505      	bpl.n	800466a <__sflush_r+0x46>
 800465e:	6863      	ldr	r3, [r4, #4]
 8004660:	1ac0      	subs	r0, r0, r3
 8004662:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004664:	b10b      	cbz	r3, 800466a <__sflush_r+0x46>
 8004666:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004668:	1ac0      	subs	r0, r0, r3
 800466a:	2300      	movs	r3, #0
 800466c:	4602      	mov	r2, r0
 800466e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004670:	6a21      	ldr	r1, [r4, #32]
 8004672:	4628      	mov	r0, r5
 8004674:	47b0      	blx	r6
 8004676:	1c43      	adds	r3, r0, #1
 8004678:	89a3      	ldrh	r3, [r4, #12]
 800467a:	d106      	bne.n	800468a <__sflush_r+0x66>
 800467c:	6829      	ldr	r1, [r5, #0]
 800467e:	291d      	cmp	r1, #29
 8004680:	d82c      	bhi.n	80046dc <__sflush_r+0xb8>
 8004682:	4a2a      	ldr	r2, [pc, #168]	; (800472c <__sflush_r+0x108>)
 8004684:	40ca      	lsrs	r2, r1
 8004686:	07d6      	lsls	r6, r2, #31
 8004688:	d528      	bpl.n	80046dc <__sflush_r+0xb8>
 800468a:	2200      	movs	r2, #0
 800468c:	6062      	str	r2, [r4, #4]
 800468e:	04d9      	lsls	r1, r3, #19
 8004690:	6922      	ldr	r2, [r4, #16]
 8004692:	6022      	str	r2, [r4, #0]
 8004694:	d504      	bpl.n	80046a0 <__sflush_r+0x7c>
 8004696:	1c42      	adds	r2, r0, #1
 8004698:	d101      	bne.n	800469e <__sflush_r+0x7a>
 800469a:	682b      	ldr	r3, [r5, #0]
 800469c:	b903      	cbnz	r3, 80046a0 <__sflush_r+0x7c>
 800469e:	6560      	str	r0, [r4, #84]	; 0x54
 80046a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046a2:	602f      	str	r7, [r5, #0]
 80046a4:	2900      	cmp	r1, #0
 80046a6:	d0ca      	beq.n	800463e <__sflush_r+0x1a>
 80046a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046ac:	4299      	cmp	r1, r3
 80046ae:	d002      	beq.n	80046b6 <__sflush_r+0x92>
 80046b0:	4628      	mov	r0, r5
 80046b2:	f000 f9d7 	bl	8004a64 <_free_r>
 80046b6:	2000      	movs	r0, #0
 80046b8:	6360      	str	r0, [r4, #52]	; 0x34
 80046ba:	e7c1      	b.n	8004640 <__sflush_r+0x1c>
 80046bc:	6a21      	ldr	r1, [r4, #32]
 80046be:	2301      	movs	r3, #1
 80046c0:	4628      	mov	r0, r5
 80046c2:	47b0      	blx	r6
 80046c4:	1c41      	adds	r1, r0, #1
 80046c6:	d1c7      	bne.n	8004658 <__sflush_r+0x34>
 80046c8:	682b      	ldr	r3, [r5, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d0c4      	beq.n	8004658 <__sflush_r+0x34>
 80046ce:	2b1d      	cmp	r3, #29
 80046d0:	d001      	beq.n	80046d6 <__sflush_r+0xb2>
 80046d2:	2b16      	cmp	r3, #22
 80046d4:	d101      	bne.n	80046da <__sflush_r+0xb6>
 80046d6:	602f      	str	r7, [r5, #0]
 80046d8:	e7b1      	b.n	800463e <__sflush_r+0x1a>
 80046da:	89a3      	ldrh	r3, [r4, #12]
 80046dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046e0:	81a3      	strh	r3, [r4, #12]
 80046e2:	e7ad      	b.n	8004640 <__sflush_r+0x1c>
 80046e4:	690f      	ldr	r7, [r1, #16]
 80046e6:	2f00      	cmp	r7, #0
 80046e8:	d0a9      	beq.n	800463e <__sflush_r+0x1a>
 80046ea:	0793      	lsls	r3, r2, #30
 80046ec:	680e      	ldr	r6, [r1, #0]
 80046ee:	bf08      	it	eq
 80046f0:	694b      	ldreq	r3, [r1, #20]
 80046f2:	600f      	str	r7, [r1, #0]
 80046f4:	bf18      	it	ne
 80046f6:	2300      	movne	r3, #0
 80046f8:	eba6 0807 	sub.w	r8, r6, r7
 80046fc:	608b      	str	r3, [r1, #8]
 80046fe:	f1b8 0f00 	cmp.w	r8, #0
 8004702:	dd9c      	ble.n	800463e <__sflush_r+0x1a>
 8004704:	6a21      	ldr	r1, [r4, #32]
 8004706:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004708:	4643      	mov	r3, r8
 800470a:	463a      	mov	r2, r7
 800470c:	4628      	mov	r0, r5
 800470e:	47b0      	blx	r6
 8004710:	2800      	cmp	r0, #0
 8004712:	dc06      	bgt.n	8004722 <__sflush_r+0xfe>
 8004714:	89a3      	ldrh	r3, [r4, #12]
 8004716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800471a:	81a3      	strh	r3, [r4, #12]
 800471c:	f04f 30ff 	mov.w	r0, #4294967295
 8004720:	e78e      	b.n	8004640 <__sflush_r+0x1c>
 8004722:	4407      	add	r7, r0
 8004724:	eba8 0800 	sub.w	r8, r8, r0
 8004728:	e7e9      	b.n	80046fe <__sflush_r+0xda>
 800472a:	bf00      	nop
 800472c:	20400001 	.word	0x20400001

08004730 <_fflush_r>:
 8004730:	b538      	push	{r3, r4, r5, lr}
 8004732:	690b      	ldr	r3, [r1, #16]
 8004734:	4605      	mov	r5, r0
 8004736:	460c      	mov	r4, r1
 8004738:	b913      	cbnz	r3, 8004740 <_fflush_r+0x10>
 800473a:	2500      	movs	r5, #0
 800473c:	4628      	mov	r0, r5
 800473e:	bd38      	pop	{r3, r4, r5, pc}
 8004740:	b118      	cbz	r0, 800474a <_fflush_r+0x1a>
 8004742:	6983      	ldr	r3, [r0, #24]
 8004744:	b90b      	cbnz	r3, 800474a <_fflush_r+0x1a>
 8004746:	f000 f887 	bl	8004858 <__sinit>
 800474a:	4b14      	ldr	r3, [pc, #80]	; (800479c <_fflush_r+0x6c>)
 800474c:	429c      	cmp	r4, r3
 800474e:	d11b      	bne.n	8004788 <_fflush_r+0x58>
 8004750:	686c      	ldr	r4, [r5, #4]
 8004752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d0ef      	beq.n	800473a <_fflush_r+0xa>
 800475a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800475c:	07d0      	lsls	r0, r2, #31
 800475e:	d404      	bmi.n	800476a <_fflush_r+0x3a>
 8004760:	0599      	lsls	r1, r3, #22
 8004762:	d402      	bmi.n	800476a <_fflush_r+0x3a>
 8004764:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004766:	f000 f915 	bl	8004994 <__retarget_lock_acquire_recursive>
 800476a:	4628      	mov	r0, r5
 800476c:	4621      	mov	r1, r4
 800476e:	f7ff ff59 	bl	8004624 <__sflush_r>
 8004772:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004774:	07da      	lsls	r2, r3, #31
 8004776:	4605      	mov	r5, r0
 8004778:	d4e0      	bmi.n	800473c <_fflush_r+0xc>
 800477a:	89a3      	ldrh	r3, [r4, #12]
 800477c:	059b      	lsls	r3, r3, #22
 800477e:	d4dd      	bmi.n	800473c <_fflush_r+0xc>
 8004780:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004782:	f000 f908 	bl	8004996 <__retarget_lock_release_recursive>
 8004786:	e7d9      	b.n	800473c <_fflush_r+0xc>
 8004788:	4b05      	ldr	r3, [pc, #20]	; (80047a0 <_fflush_r+0x70>)
 800478a:	429c      	cmp	r4, r3
 800478c:	d101      	bne.n	8004792 <_fflush_r+0x62>
 800478e:	68ac      	ldr	r4, [r5, #8]
 8004790:	e7df      	b.n	8004752 <_fflush_r+0x22>
 8004792:	4b04      	ldr	r3, [pc, #16]	; (80047a4 <_fflush_r+0x74>)
 8004794:	429c      	cmp	r4, r3
 8004796:	bf08      	it	eq
 8004798:	68ec      	ldreq	r4, [r5, #12]
 800479a:	e7da      	b.n	8004752 <_fflush_r+0x22>
 800479c:	08005480 	.word	0x08005480
 80047a0:	080054a0 	.word	0x080054a0
 80047a4:	08005460 	.word	0x08005460

080047a8 <std>:
 80047a8:	2300      	movs	r3, #0
 80047aa:	b510      	push	{r4, lr}
 80047ac:	4604      	mov	r4, r0
 80047ae:	e9c0 3300 	strd	r3, r3, [r0]
 80047b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80047b6:	6083      	str	r3, [r0, #8]
 80047b8:	8181      	strh	r1, [r0, #12]
 80047ba:	6643      	str	r3, [r0, #100]	; 0x64
 80047bc:	81c2      	strh	r2, [r0, #14]
 80047be:	6183      	str	r3, [r0, #24]
 80047c0:	4619      	mov	r1, r3
 80047c2:	2208      	movs	r2, #8
 80047c4:	305c      	adds	r0, #92	; 0x5c
 80047c6:	f7ff fdd7 	bl	8004378 <memset>
 80047ca:	4b05      	ldr	r3, [pc, #20]	; (80047e0 <std+0x38>)
 80047cc:	6263      	str	r3, [r4, #36]	; 0x24
 80047ce:	4b05      	ldr	r3, [pc, #20]	; (80047e4 <std+0x3c>)
 80047d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80047d2:	4b05      	ldr	r3, [pc, #20]	; (80047e8 <std+0x40>)
 80047d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80047d6:	4b05      	ldr	r3, [pc, #20]	; (80047ec <std+0x44>)
 80047d8:	6224      	str	r4, [r4, #32]
 80047da:	6323      	str	r3, [r4, #48]	; 0x30
 80047dc:	bd10      	pop	{r4, pc}
 80047de:	bf00      	nop
 80047e0:	08005221 	.word	0x08005221
 80047e4:	08005243 	.word	0x08005243
 80047e8:	0800527b 	.word	0x0800527b
 80047ec:	0800529f 	.word	0x0800529f

080047f0 <_cleanup_r>:
 80047f0:	4901      	ldr	r1, [pc, #4]	; (80047f8 <_cleanup_r+0x8>)
 80047f2:	f000 b8af 	b.w	8004954 <_fwalk_reent>
 80047f6:	bf00      	nop
 80047f8:	08004731 	.word	0x08004731

080047fc <__sfmoreglue>:
 80047fc:	b570      	push	{r4, r5, r6, lr}
 80047fe:	2268      	movs	r2, #104	; 0x68
 8004800:	1e4d      	subs	r5, r1, #1
 8004802:	4355      	muls	r5, r2
 8004804:	460e      	mov	r6, r1
 8004806:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800480a:	f000 f997 	bl	8004b3c <_malloc_r>
 800480e:	4604      	mov	r4, r0
 8004810:	b140      	cbz	r0, 8004824 <__sfmoreglue+0x28>
 8004812:	2100      	movs	r1, #0
 8004814:	e9c0 1600 	strd	r1, r6, [r0]
 8004818:	300c      	adds	r0, #12
 800481a:	60a0      	str	r0, [r4, #8]
 800481c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004820:	f7ff fdaa 	bl	8004378 <memset>
 8004824:	4620      	mov	r0, r4
 8004826:	bd70      	pop	{r4, r5, r6, pc}

08004828 <__sfp_lock_acquire>:
 8004828:	4801      	ldr	r0, [pc, #4]	; (8004830 <__sfp_lock_acquire+0x8>)
 800482a:	f000 b8b3 	b.w	8004994 <__retarget_lock_acquire_recursive>
 800482e:	bf00      	nop
 8004830:	20000191 	.word	0x20000191

08004834 <__sfp_lock_release>:
 8004834:	4801      	ldr	r0, [pc, #4]	; (800483c <__sfp_lock_release+0x8>)
 8004836:	f000 b8ae 	b.w	8004996 <__retarget_lock_release_recursive>
 800483a:	bf00      	nop
 800483c:	20000191 	.word	0x20000191

08004840 <__sinit_lock_acquire>:
 8004840:	4801      	ldr	r0, [pc, #4]	; (8004848 <__sinit_lock_acquire+0x8>)
 8004842:	f000 b8a7 	b.w	8004994 <__retarget_lock_acquire_recursive>
 8004846:	bf00      	nop
 8004848:	20000192 	.word	0x20000192

0800484c <__sinit_lock_release>:
 800484c:	4801      	ldr	r0, [pc, #4]	; (8004854 <__sinit_lock_release+0x8>)
 800484e:	f000 b8a2 	b.w	8004996 <__retarget_lock_release_recursive>
 8004852:	bf00      	nop
 8004854:	20000192 	.word	0x20000192

08004858 <__sinit>:
 8004858:	b510      	push	{r4, lr}
 800485a:	4604      	mov	r4, r0
 800485c:	f7ff fff0 	bl	8004840 <__sinit_lock_acquire>
 8004860:	69a3      	ldr	r3, [r4, #24]
 8004862:	b11b      	cbz	r3, 800486c <__sinit+0x14>
 8004864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004868:	f7ff bff0 	b.w	800484c <__sinit_lock_release>
 800486c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004870:	6523      	str	r3, [r4, #80]	; 0x50
 8004872:	4b13      	ldr	r3, [pc, #76]	; (80048c0 <__sinit+0x68>)
 8004874:	4a13      	ldr	r2, [pc, #76]	; (80048c4 <__sinit+0x6c>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	62a2      	str	r2, [r4, #40]	; 0x28
 800487a:	42a3      	cmp	r3, r4
 800487c:	bf04      	itt	eq
 800487e:	2301      	moveq	r3, #1
 8004880:	61a3      	streq	r3, [r4, #24]
 8004882:	4620      	mov	r0, r4
 8004884:	f000 f820 	bl	80048c8 <__sfp>
 8004888:	6060      	str	r0, [r4, #4]
 800488a:	4620      	mov	r0, r4
 800488c:	f000 f81c 	bl	80048c8 <__sfp>
 8004890:	60a0      	str	r0, [r4, #8]
 8004892:	4620      	mov	r0, r4
 8004894:	f000 f818 	bl	80048c8 <__sfp>
 8004898:	2200      	movs	r2, #0
 800489a:	60e0      	str	r0, [r4, #12]
 800489c:	2104      	movs	r1, #4
 800489e:	6860      	ldr	r0, [r4, #4]
 80048a0:	f7ff ff82 	bl	80047a8 <std>
 80048a4:	68a0      	ldr	r0, [r4, #8]
 80048a6:	2201      	movs	r2, #1
 80048a8:	2109      	movs	r1, #9
 80048aa:	f7ff ff7d 	bl	80047a8 <std>
 80048ae:	68e0      	ldr	r0, [r4, #12]
 80048b0:	2202      	movs	r2, #2
 80048b2:	2112      	movs	r1, #18
 80048b4:	f7ff ff78 	bl	80047a8 <std>
 80048b8:	2301      	movs	r3, #1
 80048ba:	61a3      	str	r3, [r4, #24]
 80048bc:	e7d2      	b.n	8004864 <__sinit+0xc>
 80048be:	bf00      	nop
 80048c0:	0800545c 	.word	0x0800545c
 80048c4:	080047f1 	.word	0x080047f1

080048c8 <__sfp>:
 80048c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ca:	4607      	mov	r7, r0
 80048cc:	f7ff ffac 	bl	8004828 <__sfp_lock_acquire>
 80048d0:	4b1e      	ldr	r3, [pc, #120]	; (800494c <__sfp+0x84>)
 80048d2:	681e      	ldr	r6, [r3, #0]
 80048d4:	69b3      	ldr	r3, [r6, #24]
 80048d6:	b913      	cbnz	r3, 80048de <__sfp+0x16>
 80048d8:	4630      	mov	r0, r6
 80048da:	f7ff ffbd 	bl	8004858 <__sinit>
 80048de:	3648      	adds	r6, #72	; 0x48
 80048e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80048e4:	3b01      	subs	r3, #1
 80048e6:	d503      	bpl.n	80048f0 <__sfp+0x28>
 80048e8:	6833      	ldr	r3, [r6, #0]
 80048ea:	b30b      	cbz	r3, 8004930 <__sfp+0x68>
 80048ec:	6836      	ldr	r6, [r6, #0]
 80048ee:	e7f7      	b.n	80048e0 <__sfp+0x18>
 80048f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80048f4:	b9d5      	cbnz	r5, 800492c <__sfp+0x64>
 80048f6:	4b16      	ldr	r3, [pc, #88]	; (8004950 <__sfp+0x88>)
 80048f8:	60e3      	str	r3, [r4, #12]
 80048fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80048fe:	6665      	str	r5, [r4, #100]	; 0x64
 8004900:	f000 f847 	bl	8004992 <__retarget_lock_init_recursive>
 8004904:	f7ff ff96 	bl	8004834 <__sfp_lock_release>
 8004908:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800490c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004910:	6025      	str	r5, [r4, #0]
 8004912:	61a5      	str	r5, [r4, #24]
 8004914:	2208      	movs	r2, #8
 8004916:	4629      	mov	r1, r5
 8004918:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800491c:	f7ff fd2c 	bl	8004378 <memset>
 8004920:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004924:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004928:	4620      	mov	r0, r4
 800492a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800492c:	3468      	adds	r4, #104	; 0x68
 800492e:	e7d9      	b.n	80048e4 <__sfp+0x1c>
 8004930:	2104      	movs	r1, #4
 8004932:	4638      	mov	r0, r7
 8004934:	f7ff ff62 	bl	80047fc <__sfmoreglue>
 8004938:	4604      	mov	r4, r0
 800493a:	6030      	str	r0, [r6, #0]
 800493c:	2800      	cmp	r0, #0
 800493e:	d1d5      	bne.n	80048ec <__sfp+0x24>
 8004940:	f7ff ff78 	bl	8004834 <__sfp_lock_release>
 8004944:	230c      	movs	r3, #12
 8004946:	603b      	str	r3, [r7, #0]
 8004948:	e7ee      	b.n	8004928 <__sfp+0x60>
 800494a:	bf00      	nop
 800494c:	0800545c 	.word	0x0800545c
 8004950:	ffff0001 	.word	0xffff0001

08004954 <_fwalk_reent>:
 8004954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004958:	4606      	mov	r6, r0
 800495a:	4688      	mov	r8, r1
 800495c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004960:	2700      	movs	r7, #0
 8004962:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004966:	f1b9 0901 	subs.w	r9, r9, #1
 800496a:	d505      	bpl.n	8004978 <_fwalk_reent+0x24>
 800496c:	6824      	ldr	r4, [r4, #0]
 800496e:	2c00      	cmp	r4, #0
 8004970:	d1f7      	bne.n	8004962 <_fwalk_reent+0xe>
 8004972:	4638      	mov	r0, r7
 8004974:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004978:	89ab      	ldrh	r3, [r5, #12]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d907      	bls.n	800498e <_fwalk_reent+0x3a>
 800497e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004982:	3301      	adds	r3, #1
 8004984:	d003      	beq.n	800498e <_fwalk_reent+0x3a>
 8004986:	4629      	mov	r1, r5
 8004988:	4630      	mov	r0, r6
 800498a:	47c0      	blx	r8
 800498c:	4307      	orrs	r7, r0
 800498e:	3568      	adds	r5, #104	; 0x68
 8004990:	e7e9      	b.n	8004966 <_fwalk_reent+0x12>

08004992 <__retarget_lock_init_recursive>:
 8004992:	4770      	bx	lr

08004994 <__retarget_lock_acquire_recursive>:
 8004994:	4770      	bx	lr

08004996 <__retarget_lock_release_recursive>:
 8004996:	4770      	bx	lr

08004998 <__swhatbuf_r>:
 8004998:	b570      	push	{r4, r5, r6, lr}
 800499a:	460e      	mov	r6, r1
 800499c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049a0:	2900      	cmp	r1, #0
 80049a2:	b096      	sub	sp, #88	; 0x58
 80049a4:	4614      	mov	r4, r2
 80049a6:	461d      	mov	r5, r3
 80049a8:	da08      	bge.n	80049bc <__swhatbuf_r+0x24>
 80049aa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	602a      	str	r2, [r5, #0]
 80049b2:	061a      	lsls	r2, r3, #24
 80049b4:	d410      	bmi.n	80049d8 <__swhatbuf_r+0x40>
 80049b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049ba:	e00e      	b.n	80049da <__swhatbuf_r+0x42>
 80049bc:	466a      	mov	r2, sp
 80049be:	f000 fc95 	bl	80052ec <_fstat_r>
 80049c2:	2800      	cmp	r0, #0
 80049c4:	dbf1      	blt.n	80049aa <__swhatbuf_r+0x12>
 80049c6:	9a01      	ldr	r2, [sp, #4]
 80049c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80049cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80049d0:	425a      	negs	r2, r3
 80049d2:	415a      	adcs	r2, r3
 80049d4:	602a      	str	r2, [r5, #0]
 80049d6:	e7ee      	b.n	80049b6 <__swhatbuf_r+0x1e>
 80049d8:	2340      	movs	r3, #64	; 0x40
 80049da:	2000      	movs	r0, #0
 80049dc:	6023      	str	r3, [r4, #0]
 80049de:	b016      	add	sp, #88	; 0x58
 80049e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080049e4 <__smakebuf_r>:
 80049e4:	898b      	ldrh	r3, [r1, #12]
 80049e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80049e8:	079d      	lsls	r5, r3, #30
 80049ea:	4606      	mov	r6, r0
 80049ec:	460c      	mov	r4, r1
 80049ee:	d507      	bpl.n	8004a00 <__smakebuf_r+0x1c>
 80049f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80049f4:	6023      	str	r3, [r4, #0]
 80049f6:	6123      	str	r3, [r4, #16]
 80049f8:	2301      	movs	r3, #1
 80049fa:	6163      	str	r3, [r4, #20]
 80049fc:	b002      	add	sp, #8
 80049fe:	bd70      	pop	{r4, r5, r6, pc}
 8004a00:	ab01      	add	r3, sp, #4
 8004a02:	466a      	mov	r2, sp
 8004a04:	f7ff ffc8 	bl	8004998 <__swhatbuf_r>
 8004a08:	9900      	ldr	r1, [sp, #0]
 8004a0a:	4605      	mov	r5, r0
 8004a0c:	4630      	mov	r0, r6
 8004a0e:	f000 f895 	bl	8004b3c <_malloc_r>
 8004a12:	b948      	cbnz	r0, 8004a28 <__smakebuf_r+0x44>
 8004a14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a18:	059a      	lsls	r2, r3, #22
 8004a1a:	d4ef      	bmi.n	80049fc <__smakebuf_r+0x18>
 8004a1c:	f023 0303 	bic.w	r3, r3, #3
 8004a20:	f043 0302 	orr.w	r3, r3, #2
 8004a24:	81a3      	strh	r3, [r4, #12]
 8004a26:	e7e3      	b.n	80049f0 <__smakebuf_r+0xc>
 8004a28:	4b0d      	ldr	r3, [pc, #52]	; (8004a60 <__smakebuf_r+0x7c>)
 8004a2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004a2c:	89a3      	ldrh	r3, [r4, #12]
 8004a2e:	6020      	str	r0, [r4, #0]
 8004a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a34:	81a3      	strh	r3, [r4, #12]
 8004a36:	9b00      	ldr	r3, [sp, #0]
 8004a38:	6163      	str	r3, [r4, #20]
 8004a3a:	9b01      	ldr	r3, [sp, #4]
 8004a3c:	6120      	str	r0, [r4, #16]
 8004a3e:	b15b      	cbz	r3, 8004a58 <__smakebuf_r+0x74>
 8004a40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a44:	4630      	mov	r0, r6
 8004a46:	f000 fc63 	bl	8005310 <_isatty_r>
 8004a4a:	b128      	cbz	r0, 8004a58 <__smakebuf_r+0x74>
 8004a4c:	89a3      	ldrh	r3, [r4, #12]
 8004a4e:	f023 0303 	bic.w	r3, r3, #3
 8004a52:	f043 0301 	orr.w	r3, r3, #1
 8004a56:	81a3      	strh	r3, [r4, #12]
 8004a58:	89a0      	ldrh	r0, [r4, #12]
 8004a5a:	4305      	orrs	r5, r0
 8004a5c:	81a5      	strh	r5, [r4, #12]
 8004a5e:	e7cd      	b.n	80049fc <__smakebuf_r+0x18>
 8004a60:	080047f1 	.word	0x080047f1

08004a64 <_free_r>:
 8004a64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a66:	2900      	cmp	r1, #0
 8004a68:	d044      	beq.n	8004af4 <_free_r+0x90>
 8004a6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a6e:	9001      	str	r0, [sp, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f1a1 0404 	sub.w	r4, r1, #4
 8004a76:	bfb8      	it	lt
 8004a78:	18e4      	addlt	r4, r4, r3
 8004a7a:	f000 fc6b 	bl	8005354 <__malloc_lock>
 8004a7e:	4a1e      	ldr	r2, [pc, #120]	; (8004af8 <_free_r+0x94>)
 8004a80:	9801      	ldr	r0, [sp, #4]
 8004a82:	6813      	ldr	r3, [r2, #0]
 8004a84:	b933      	cbnz	r3, 8004a94 <_free_r+0x30>
 8004a86:	6063      	str	r3, [r4, #4]
 8004a88:	6014      	str	r4, [r2, #0]
 8004a8a:	b003      	add	sp, #12
 8004a8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a90:	f000 bc66 	b.w	8005360 <__malloc_unlock>
 8004a94:	42a3      	cmp	r3, r4
 8004a96:	d908      	bls.n	8004aaa <_free_r+0x46>
 8004a98:	6825      	ldr	r5, [r4, #0]
 8004a9a:	1961      	adds	r1, r4, r5
 8004a9c:	428b      	cmp	r3, r1
 8004a9e:	bf01      	itttt	eq
 8004aa0:	6819      	ldreq	r1, [r3, #0]
 8004aa2:	685b      	ldreq	r3, [r3, #4]
 8004aa4:	1949      	addeq	r1, r1, r5
 8004aa6:	6021      	streq	r1, [r4, #0]
 8004aa8:	e7ed      	b.n	8004a86 <_free_r+0x22>
 8004aaa:	461a      	mov	r2, r3
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	b10b      	cbz	r3, 8004ab4 <_free_r+0x50>
 8004ab0:	42a3      	cmp	r3, r4
 8004ab2:	d9fa      	bls.n	8004aaa <_free_r+0x46>
 8004ab4:	6811      	ldr	r1, [r2, #0]
 8004ab6:	1855      	adds	r5, r2, r1
 8004ab8:	42a5      	cmp	r5, r4
 8004aba:	d10b      	bne.n	8004ad4 <_free_r+0x70>
 8004abc:	6824      	ldr	r4, [r4, #0]
 8004abe:	4421      	add	r1, r4
 8004ac0:	1854      	adds	r4, r2, r1
 8004ac2:	42a3      	cmp	r3, r4
 8004ac4:	6011      	str	r1, [r2, #0]
 8004ac6:	d1e0      	bne.n	8004a8a <_free_r+0x26>
 8004ac8:	681c      	ldr	r4, [r3, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	6053      	str	r3, [r2, #4]
 8004ace:	4421      	add	r1, r4
 8004ad0:	6011      	str	r1, [r2, #0]
 8004ad2:	e7da      	b.n	8004a8a <_free_r+0x26>
 8004ad4:	d902      	bls.n	8004adc <_free_r+0x78>
 8004ad6:	230c      	movs	r3, #12
 8004ad8:	6003      	str	r3, [r0, #0]
 8004ada:	e7d6      	b.n	8004a8a <_free_r+0x26>
 8004adc:	6825      	ldr	r5, [r4, #0]
 8004ade:	1961      	adds	r1, r4, r5
 8004ae0:	428b      	cmp	r3, r1
 8004ae2:	bf04      	itt	eq
 8004ae4:	6819      	ldreq	r1, [r3, #0]
 8004ae6:	685b      	ldreq	r3, [r3, #4]
 8004ae8:	6063      	str	r3, [r4, #4]
 8004aea:	bf04      	itt	eq
 8004aec:	1949      	addeq	r1, r1, r5
 8004aee:	6021      	streq	r1, [r4, #0]
 8004af0:	6054      	str	r4, [r2, #4]
 8004af2:	e7ca      	b.n	8004a8a <_free_r+0x26>
 8004af4:	b003      	add	sp, #12
 8004af6:	bd30      	pop	{r4, r5, pc}
 8004af8:	20000194 	.word	0x20000194

08004afc <sbrk_aligned>:
 8004afc:	b570      	push	{r4, r5, r6, lr}
 8004afe:	4e0e      	ldr	r6, [pc, #56]	; (8004b38 <sbrk_aligned+0x3c>)
 8004b00:	460c      	mov	r4, r1
 8004b02:	6831      	ldr	r1, [r6, #0]
 8004b04:	4605      	mov	r5, r0
 8004b06:	b911      	cbnz	r1, 8004b0e <sbrk_aligned+0x12>
 8004b08:	f000 fb7a 	bl	8005200 <_sbrk_r>
 8004b0c:	6030      	str	r0, [r6, #0]
 8004b0e:	4621      	mov	r1, r4
 8004b10:	4628      	mov	r0, r5
 8004b12:	f000 fb75 	bl	8005200 <_sbrk_r>
 8004b16:	1c43      	adds	r3, r0, #1
 8004b18:	d00a      	beq.n	8004b30 <sbrk_aligned+0x34>
 8004b1a:	1cc4      	adds	r4, r0, #3
 8004b1c:	f024 0403 	bic.w	r4, r4, #3
 8004b20:	42a0      	cmp	r0, r4
 8004b22:	d007      	beq.n	8004b34 <sbrk_aligned+0x38>
 8004b24:	1a21      	subs	r1, r4, r0
 8004b26:	4628      	mov	r0, r5
 8004b28:	f000 fb6a 	bl	8005200 <_sbrk_r>
 8004b2c:	3001      	adds	r0, #1
 8004b2e:	d101      	bne.n	8004b34 <sbrk_aligned+0x38>
 8004b30:	f04f 34ff 	mov.w	r4, #4294967295
 8004b34:	4620      	mov	r0, r4
 8004b36:	bd70      	pop	{r4, r5, r6, pc}
 8004b38:	20000198 	.word	0x20000198

08004b3c <_malloc_r>:
 8004b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b40:	1ccd      	adds	r5, r1, #3
 8004b42:	f025 0503 	bic.w	r5, r5, #3
 8004b46:	3508      	adds	r5, #8
 8004b48:	2d0c      	cmp	r5, #12
 8004b4a:	bf38      	it	cc
 8004b4c:	250c      	movcc	r5, #12
 8004b4e:	2d00      	cmp	r5, #0
 8004b50:	4607      	mov	r7, r0
 8004b52:	db01      	blt.n	8004b58 <_malloc_r+0x1c>
 8004b54:	42a9      	cmp	r1, r5
 8004b56:	d905      	bls.n	8004b64 <_malloc_r+0x28>
 8004b58:	230c      	movs	r3, #12
 8004b5a:	603b      	str	r3, [r7, #0]
 8004b5c:	2600      	movs	r6, #0
 8004b5e:	4630      	mov	r0, r6
 8004b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b64:	4e2e      	ldr	r6, [pc, #184]	; (8004c20 <_malloc_r+0xe4>)
 8004b66:	f000 fbf5 	bl	8005354 <__malloc_lock>
 8004b6a:	6833      	ldr	r3, [r6, #0]
 8004b6c:	461c      	mov	r4, r3
 8004b6e:	bb34      	cbnz	r4, 8004bbe <_malloc_r+0x82>
 8004b70:	4629      	mov	r1, r5
 8004b72:	4638      	mov	r0, r7
 8004b74:	f7ff ffc2 	bl	8004afc <sbrk_aligned>
 8004b78:	1c43      	adds	r3, r0, #1
 8004b7a:	4604      	mov	r4, r0
 8004b7c:	d14d      	bne.n	8004c1a <_malloc_r+0xde>
 8004b7e:	6834      	ldr	r4, [r6, #0]
 8004b80:	4626      	mov	r6, r4
 8004b82:	2e00      	cmp	r6, #0
 8004b84:	d140      	bne.n	8004c08 <_malloc_r+0xcc>
 8004b86:	6823      	ldr	r3, [r4, #0]
 8004b88:	4631      	mov	r1, r6
 8004b8a:	4638      	mov	r0, r7
 8004b8c:	eb04 0803 	add.w	r8, r4, r3
 8004b90:	f000 fb36 	bl	8005200 <_sbrk_r>
 8004b94:	4580      	cmp	r8, r0
 8004b96:	d13a      	bne.n	8004c0e <_malloc_r+0xd2>
 8004b98:	6821      	ldr	r1, [r4, #0]
 8004b9a:	3503      	adds	r5, #3
 8004b9c:	1a6d      	subs	r5, r5, r1
 8004b9e:	f025 0503 	bic.w	r5, r5, #3
 8004ba2:	3508      	adds	r5, #8
 8004ba4:	2d0c      	cmp	r5, #12
 8004ba6:	bf38      	it	cc
 8004ba8:	250c      	movcc	r5, #12
 8004baa:	4629      	mov	r1, r5
 8004bac:	4638      	mov	r0, r7
 8004bae:	f7ff ffa5 	bl	8004afc <sbrk_aligned>
 8004bb2:	3001      	adds	r0, #1
 8004bb4:	d02b      	beq.n	8004c0e <_malloc_r+0xd2>
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	442b      	add	r3, r5
 8004bba:	6023      	str	r3, [r4, #0]
 8004bbc:	e00e      	b.n	8004bdc <_malloc_r+0xa0>
 8004bbe:	6822      	ldr	r2, [r4, #0]
 8004bc0:	1b52      	subs	r2, r2, r5
 8004bc2:	d41e      	bmi.n	8004c02 <_malloc_r+0xc6>
 8004bc4:	2a0b      	cmp	r2, #11
 8004bc6:	d916      	bls.n	8004bf6 <_malloc_r+0xba>
 8004bc8:	1961      	adds	r1, r4, r5
 8004bca:	42a3      	cmp	r3, r4
 8004bcc:	6025      	str	r5, [r4, #0]
 8004bce:	bf18      	it	ne
 8004bd0:	6059      	strne	r1, [r3, #4]
 8004bd2:	6863      	ldr	r3, [r4, #4]
 8004bd4:	bf08      	it	eq
 8004bd6:	6031      	streq	r1, [r6, #0]
 8004bd8:	5162      	str	r2, [r4, r5]
 8004bda:	604b      	str	r3, [r1, #4]
 8004bdc:	4638      	mov	r0, r7
 8004bde:	f104 060b 	add.w	r6, r4, #11
 8004be2:	f000 fbbd 	bl	8005360 <__malloc_unlock>
 8004be6:	f026 0607 	bic.w	r6, r6, #7
 8004bea:	1d23      	adds	r3, r4, #4
 8004bec:	1af2      	subs	r2, r6, r3
 8004bee:	d0b6      	beq.n	8004b5e <_malloc_r+0x22>
 8004bf0:	1b9b      	subs	r3, r3, r6
 8004bf2:	50a3      	str	r3, [r4, r2]
 8004bf4:	e7b3      	b.n	8004b5e <_malloc_r+0x22>
 8004bf6:	6862      	ldr	r2, [r4, #4]
 8004bf8:	42a3      	cmp	r3, r4
 8004bfa:	bf0c      	ite	eq
 8004bfc:	6032      	streq	r2, [r6, #0]
 8004bfe:	605a      	strne	r2, [r3, #4]
 8004c00:	e7ec      	b.n	8004bdc <_malloc_r+0xa0>
 8004c02:	4623      	mov	r3, r4
 8004c04:	6864      	ldr	r4, [r4, #4]
 8004c06:	e7b2      	b.n	8004b6e <_malloc_r+0x32>
 8004c08:	4634      	mov	r4, r6
 8004c0a:	6876      	ldr	r6, [r6, #4]
 8004c0c:	e7b9      	b.n	8004b82 <_malloc_r+0x46>
 8004c0e:	230c      	movs	r3, #12
 8004c10:	603b      	str	r3, [r7, #0]
 8004c12:	4638      	mov	r0, r7
 8004c14:	f000 fba4 	bl	8005360 <__malloc_unlock>
 8004c18:	e7a1      	b.n	8004b5e <_malloc_r+0x22>
 8004c1a:	6025      	str	r5, [r4, #0]
 8004c1c:	e7de      	b.n	8004bdc <_malloc_r+0xa0>
 8004c1e:	bf00      	nop
 8004c20:	20000194 	.word	0x20000194

08004c24 <__sfputc_r>:
 8004c24:	6893      	ldr	r3, [r2, #8]
 8004c26:	3b01      	subs	r3, #1
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	b410      	push	{r4}
 8004c2c:	6093      	str	r3, [r2, #8]
 8004c2e:	da08      	bge.n	8004c42 <__sfputc_r+0x1e>
 8004c30:	6994      	ldr	r4, [r2, #24]
 8004c32:	42a3      	cmp	r3, r4
 8004c34:	db01      	blt.n	8004c3a <__sfputc_r+0x16>
 8004c36:	290a      	cmp	r1, #10
 8004c38:	d103      	bne.n	8004c42 <__sfputc_r+0x1e>
 8004c3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c3e:	f7ff bc31 	b.w	80044a4 <__swbuf_r>
 8004c42:	6813      	ldr	r3, [r2, #0]
 8004c44:	1c58      	adds	r0, r3, #1
 8004c46:	6010      	str	r0, [r2, #0]
 8004c48:	7019      	strb	r1, [r3, #0]
 8004c4a:	4608      	mov	r0, r1
 8004c4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <__sfputs_r>:
 8004c52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c54:	4606      	mov	r6, r0
 8004c56:	460f      	mov	r7, r1
 8004c58:	4614      	mov	r4, r2
 8004c5a:	18d5      	adds	r5, r2, r3
 8004c5c:	42ac      	cmp	r4, r5
 8004c5e:	d101      	bne.n	8004c64 <__sfputs_r+0x12>
 8004c60:	2000      	movs	r0, #0
 8004c62:	e007      	b.n	8004c74 <__sfputs_r+0x22>
 8004c64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c68:	463a      	mov	r2, r7
 8004c6a:	4630      	mov	r0, r6
 8004c6c:	f7ff ffda 	bl	8004c24 <__sfputc_r>
 8004c70:	1c43      	adds	r3, r0, #1
 8004c72:	d1f3      	bne.n	8004c5c <__sfputs_r+0xa>
 8004c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004c78 <_vfiprintf_r>:
 8004c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c7c:	460d      	mov	r5, r1
 8004c7e:	b09d      	sub	sp, #116	; 0x74
 8004c80:	4614      	mov	r4, r2
 8004c82:	4698      	mov	r8, r3
 8004c84:	4606      	mov	r6, r0
 8004c86:	b118      	cbz	r0, 8004c90 <_vfiprintf_r+0x18>
 8004c88:	6983      	ldr	r3, [r0, #24]
 8004c8a:	b90b      	cbnz	r3, 8004c90 <_vfiprintf_r+0x18>
 8004c8c:	f7ff fde4 	bl	8004858 <__sinit>
 8004c90:	4b89      	ldr	r3, [pc, #548]	; (8004eb8 <_vfiprintf_r+0x240>)
 8004c92:	429d      	cmp	r5, r3
 8004c94:	d11b      	bne.n	8004cce <_vfiprintf_r+0x56>
 8004c96:	6875      	ldr	r5, [r6, #4]
 8004c98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c9a:	07d9      	lsls	r1, r3, #31
 8004c9c:	d405      	bmi.n	8004caa <_vfiprintf_r+0x32>
 8004c9e:	89ab      	ldrh	r3, [r5, #12]
 8004ca0:	059a      	lsls	r2, r3, #22
 8004ca2:	d402      	bmi.n	8004caa <_vfiprintf_r+0x32>
 8004ca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ca6:	f7ff fe75 	bl	8004994 <__retarget_lock_acquire_recursive>
 8004caa:	89ab      	ldrh	r3, [r5, #12]
 8004cac:	071b      	lsls	r3, r3, #28
 8004cae:	d501      	bpl.n	8004cb4 <_vfiprintf_r+0x3c>
 8004cb0:	692b      	ldr	r3, [r5, #16]
 8004cb2:	b9eb      	cbnz	r3, 8004cf0 <_vfiprintf_r+0x78>
 8004cb4:	4629      	mov	r1, r5
 8004cb6:	4630      	mov	r0, r6
 8004cb8:	f7ff fc46 	bl	8004548 <__swsetup_r>
 8004cbc:	b1c0      	cbz	r0, 8004cf0 <_vfiprintf_r+0x78>
 8004cbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004cc0:	07dc      	lsls	r4, r3, #31
 8004cc2:	d50e      	bpl.n	8004ce2 <_vfiprintf_r+0x6a>
 8004cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc8:	b01d      	add	sp, #116	; 0x74
 8004cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cce:	4b7b      	ldr	r3, [pc, #492]	; (8004ebc <_vfiprintf_r+0x244>)
 8004cd0:	429d      	cmp	r5, r3
 8004cd2:	d101      	bne.n	8004cd8 <_vfiprintf_r+0x60>
 8004cd4:	68b5      	ldr	r5, [r6, #8]
 8004cd6:	e7df      	b.n	8004c98 <_vfiprintf_r+0x20>
 8004cd8:	4b79      	ldr	r3, [pc, #484]	; (8004ec0 <_vfiprintf_r+0x248>)
 8004cda:	429d      	cmp	r5, r3
 8004cdc:	bf08      	it	eq
 8004cde:	68f5      	ldreq	r5, [r6, #12]
 8004ce0:	e7da      	b.n	8004c98 <_vfiprintf_r+0x20>
 8004ce2:	89ab      	ldrh	r3, [r5, #12]
 8004ce4:	0598      	lsls	r0, r3, #22
 8004ce6:	d4ed      	bmi.n	8004cc4 <_vfiprintf_r+0x4c>
 8004ce8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cea:	f7ff fe54 	bl	8004996 <__retarget_lock_release_recursive>
 8004cee:	e7e9      	b.n	8004cc4 <_vfiprintf_r+0x4c>
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	9309      	str	r3, [sp, #36]	; 0x24
 8004cf4:	2320      	movs	r3, #32
 8004cf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cfe:	2330      	movs	r3, #48	; 0x30
 8004d00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004ec4 <_vfiprintf_r+0x24c>
 8004d04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d08:	f04f 0901 	mov.w	r9, #1
 8004d0c:	4623      	mov	r3, r4
 8004d0e:	469a      	mov	sl, r3
 8004d10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d14:	b10a      	cbz	r2, 8004d1a <_vfiprintf_r+0xa2>
 8004d16:	2a25      	cmp	r2, #37	; 0x25
 8004d18:	d1f9      	bne.n	8004d0e <_vfiprintf_r+0x96>
 8004d1a:	ebba 0b04 	subs.w	fp, sl, r4
 8004d1e:	d00b      	beq.n	8004d38 <_vfiprintf_r+0xc0>
 8004d20:	465b      	mov	r3, fp
 8004d22:	4622      	mov	r2, r4
 8004d24:	4629      	mov	r1, r5
 8004d26:	4630      	mov	r0, r6
 8004d28:	f7ff ff93 	bl	8004c52 <__sfputs_r>
 8004d2c:	3001      	adds	r0, #1
 8004d2e:	f000 80aa 	beq.w	8004e86 <_vfiprintf_r+0x20e>
 8004d32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d34:	445a      	add	r2, fp
 8004d36:	9209      	str	r2, [sp, #36]	; 0x24
 8004d38:	f89a 3000 	ldrb.w	r3, [sl]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 80a2 	beq.w	8004e86 <_vfiprintf_r+0x20e>
 8004d42:	2300      	movs	r3, #0
 8004d44:	f04f 32ff 	mov.w	r2, #4294967295
 8004d48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d4c:	f10a 0a01 	add.w	sl, sl, #1
 8004d50:	9304      	str	r3, [sp, #16]
 8004d52:	9307      	str	r3, [sp, #28]
 8004d54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d58:	931a      	str	r3, [sp, #104]	; 0x68
 8004d5a:	4654      	mov	r4, sl
 8004d5c:	2205      	movs	r2, #5
 8004d5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d62:	4858      	ldr	r0, [pc, #352]	; (8004ec4 <_vfiprintf_r+0x24c>)
 8004d64:	f7fb fa3c 	bl	80001e0 <memchr>
 8004d68:	9a04      	ldr	r2, [sp, #16]
 8004d6a:	b9d8      	cbnz	r0, 8004da4 <_vfiprintf_r+0x12c>
 8004d6c:	06d1      	lsls	r1, r2, #27
 8004d6e:	bf44      	itt	mi
 8004d70:	2320      	movmi	r3, #32
 8004d72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d76:	0713      	lsls	r3, r2, #28
 8004d78:	bf44      	itt	mi
 8004d7a:	232b      	movmi	r3, #43	; 0x2b
 8004d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d80:	f89a 3000 	ldrb.w	r3, [sl]
 8004d84:	2b2a      	cmp	r3, #42	; 0x2a
 8004d86:	d015      	beq.n	8004db4 <_vfiprintf_r+0x13c>
 8004d88:	9a07      	ldr	r2, [sp, #28]
 8004d8a:	4654      	mov	r4, sl
 8004d8c:	2000      	movs	r0, #0
 8004d8e:	f04f 0c0a 	mov.w	ip, #10
 8004d92:	4621      	mov	r1, r4
 8004d94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d98:	3b30      	subs	r3, #48	; 0x30
 8004d9a:	2b09      	cmp	r3, #9
 8004d9c:	d94e      	bls.n	8004e3c <_vfiprintf_r+0x1c4>
 8004d9e:	b1b0      	cbz	r0, 8004dce <_vfiprintf_r+0x156>
 8004da0:	9207      	str	r2, [sp, #28]
 8004da2:	e014      	b.n	8004dce <_vfiprintf_r+0x156>
 8004da4:	eba0 0308 	sub.w	r3, r0, r8
 8004da8:	fa09 f303 	lsl.w	r3, r9, r3
 8004dac:	4313      	orrs	r3, r2
 8004dae:	9304      	str	r3, [sp, #16]
 8004db0:	46a2      	mov	sl, r4
 8004db2:	e7d2      	b.n	8004d5a <_vfiprintf_r+0xe2>
 8004db4:	9b03      	ldr	r3, [sp, #12]
 8004db6:	1d19      	adds	r1, r3, #4
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	9103      	str	r1, [sp, #12]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	bfbb      	ittet	lt
 8004dc0:	425b      	neglt	r3, r3
 8004dc2:	f042 0202 	orrlt.w	r2, r2, #2
 8004dc6:	9307      	strge	r3, [sp, #28]
 8004dc8:	9307      	strlt	r3, [sp, #28]
 8004dca:	bfb8      	it	lt
 8004dcc:	9204      	strlt	r2, [sp, #16]
 8004dce:	7823      	ldrb	r3, [r4, #0]
 8004dd0:	2b2e      	cmp	r3, #46	; 0x2e
 8004dd2:	d10c      	bne.n	8004dee <_vfiprintf_r+0x176>
 8004dd4:	7863      	ldrb	r3, [r4, #1]
 8004dd6:	2b2a      	cmp	r3, #42	; 0x2a
 8004dd8:	d135      	bne.n	8004e46 <_vfiprintf_r+0x1ce>
 8004dda:	9b03      	ldr	r3, [sp, #12]
 8004ddc:	1d1a      	adds	r2, r3, #4
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	9203      	str	r2, [sp, #12]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	bfb8      	it	lt
 8004de6:	f04f 33ff 	movlt.w	r3, #4294967295
 8004dea:	3402      	adds	r4, #2
 8004dec:	9305      	str	r3, [sp, #20]
 8004dee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004ed4 <_vfiprintf_r+0x25c>
 8004df2:	7821      	ldrb	r1, [r4, #0]
 8004df4:	2203      	movs	r2, #3
 8004df6:	4650      	mov	r0, sl
 8004df8:	f7fb f9f2 	bl	80001e0 <memchr>
 8004dfc:	b140      	cbz	r0, 8004e10 <_vfiprintf_r+0x198>
 8004dfe:	2340      	movs	r3, #64	; 0x40
 8004e00:	eba0 000a 	sub.w	r0, r0, sl
 8004e04:	fa03 f000 	lsl.w	r0, r3, r0
 8004e08:	9b04      	ldr	r3, [sp, #16]
 8004e0a:	4303      	orrs	r3, r0
 8004e0c:	3401      	adds	r4, #1
 8004e0e:	9304      	str	r3, [sp, #16]
 8004e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e14:	482c      	ldr	r0, [pc, #176]	; (8004ec8 <_vfiprintf_r+0x250>)
 8004e16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e1a:	2206      	movs	r2, #6
 8004e1c:	f7fb f9e0 	bl	80001e0 <memchr>
 8004e20:	2800      	cmp	r0, #0
 8004e22:	d03f      	beq.n	8004ea4 <_vfiprintf_r+0x22c>
 8004e24:	4b29      	ldr	r3, [pc, #164]	; (8004ecc <_vfiprintf_r+0x254>)
 8004e26:	bb1b      	cbnz	r3, 8004e70 <_vfiprintf_r+0x1f8>
 8004e28:	9b03      	ldr	r3, [sp, #12]
 8004e2a:	3307      	adds	r3, #7
 8004e2c:	f023 0307 	bic.w	r3, r3, #7
 8004e30:	3308      	adds	r3, #8
 8004e32:	9303      	str	r3, [sp, #12]
 8004e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e36:	443b      	add	r3, r7
 8004e38:	9309      	str	r3, [sp, #36]	; 0x24
 8004e3a:	e767      	b.n	8004d0c <_vfiprintf_r+0x94>
 8004e3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e40:	460c      	mov	r4, r1
 8004e42:	2001      	movs	r0, #1
 8004e44:	e7a5      	b.n	8004d92 <_vfiprintf_r+0x11a>
 8004e46:	2300      	movs	r3, #0
 8004e48:	3401      	adds	r4, #1
 8004e4a:	9305      	str	r3, [sp, #20]
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	f04f 0c0a 	mov.w	ip, #10
 8004e52:	4620      	mov	r0, r4
 8004e54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e58:	3a30      	subs	r2, #48	; 0x30
 8004e5a:	2a09      	cmp	r2, #9
 8004e5c:	d903      	bls.n	8004e66 <_vfiprintf_r+0x1ee>
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d0c5      	beq.n	8004dee <_vfiprintf_r+0x176>
 8004e62:	9105      	str	r1, [sp, #20]
 8004e64:	e7c3      	b.n	8004dee <_vfiprintf_r+0x176>
 8004e66:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e6a:	4604      	mov	r4, r0
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e7f0      	b.n	8004e52 <_vfiprintf_r+0x1da>
 8004e70:	ab03      	add	r3, sp, #12
 8004e72:	9300      	str	r3, [sp, #0]
 8004e74:	462a      	mov	r2, r5
 8004e76:	4b16      	ldr	r3, [pc, #88]	; (8004ed0 <_vfiprintf_r+0x258>)
 8004e78:	a904      	add	r1, sp, #16
 8004e7a:	4630      	mov	r0, r6
 8004e7c:	f3af 8000 	nop.w
 8004e80:	4607      	mov	r7, r0
 8004e82:	1c78      	adds	r0, r7, #1
 8004e84:	d1d6      	bne.n	8004e34 <_vfiprintf_r+0x1bc>
 8004e86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e88:	07d9      	lsls	r1, r3, #31
 8004e8a:	d405      	bmi.n	8004e98 <_vfiprintf_r+0x220>
 8004e8c:	89ab      	ldrh	r3, [r5, #12]
 8004e8e:	059a      	lsls	r2, r3, #22
 8004e90:	d402      	bmi.n	8004e98 <_vfiprintf_r+0x220>
 8004e92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e94:	f7ff fd7f 	bl	8004996 <__retarget_lock_release_recursive>
 8004e98:	89ab      	ldrh	r3, [r5, #12]
 8004e9a:	065b      	lsls	r3, r3, #25
 8004e9c:	f53f af12 	bmi.w	8004cc4 <_vfiprintf_r+0x4c>
 8004ea0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ea2:	e711      	b.n	8004cc8 <_vfiprintf_r+0x50>
 8004ea4:	ab03      	add	r3, sp, #12
 8004ea6:	9300      	str	r3, [sp, #0]
 8004ea8:	462a      	mov	r2, r5
 8004eaa:	4b09      	ldr	r3, [pc, #36]	; (8004ed0 <_vfiprintf_r+0x258>)
 8004eac:	a904      	add	r1, sp, #16
 8004eae:	4630      	mov	r0, r6
 8004eb0:	f000 f880 	bl	8004fb4 <_printf_i>
 8004eb4:	e7e4      	b.n	8004e80 <_vfiprintf_r+0x208>
 8004eb6:	bf00      	nop
 8004eb8:	08005480 	.word	0x08005480
 8004ebc:	080054a0 	.word	0x080054a0
 8004ec0:	08005460 	.word	0x08005460
 8004ec4:	080054c0 	.word	0x080054c0
 8004ec8:	080054ca 	.word	0x080054ca
 8004ecc:	00000000 	.word	0x00000000
 8004ed0:	08004c53 	.word	0x08004c53
 8004ed4:	080054c6 	.word	0x080054c6

08004ed8 <_printf_common>:
 8004ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004edc:	4616      	mov	r6, r2
 8004ede:	4699      	mov	r9, r3
 8004ee0:	688a      	ldr	r2, [r1, #8]
 8004ee2:	690b      	ldr	r3, [r1, #16]
 8004ee4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	bfb8      	it	lt
 8004eec:	4613      	movlt	r3, r2
 8004eee:	6033      	str	r3, [r6, #0]
 8004ef0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ef4:	4607      	mov	r7, r0
 8004ef6:	460c      	mov	r4, r1
 8004ef8:	b10a      	cbz	r2, 8004efe <_printf_common+0x26>
 8004efa:	3301      	adds	r3, #1
 8004efc:	6033      	str	r3, [r6, #0]
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	0699      	lsls	r1, r3, #26
 8004f02:	bf42      	ittt	mi
 8004f04:	6833      	ldrmi	r3, [r6, #0]
 8004f06:	3302      	addmi	r3, #2
 8004f08:	6033      	strmi	r3, [r6, #0]
 8004f0a:	6825      	ldr	r5, [r4, #0]
 8004f0c:	f015 0506 	ands.w	r5, r5, #6
 8004f10:	d106      	bne.n	8004f20 <_printf_common+0x48>
 8004f12:	f104 0a19 	add.w	sl, r4, #25
 8004f16:	68e3      	ldr	r3, [r4, #12]
 8004f18:	6832      	ldr	r2, [r6, #0]
 8004f1a:	1a9b      	subs	r3, r3, r2
 8004f1c:	42ab      	cmp	r3, r5
 8004f1e:	dc26      	bgt.n	8004f6e <_printf_common+0x96>
 8004f20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f24:	1e13      	subs	r3, r2, #0
 8004f26:	6822      	ldr	r2, [r4, #0]
 8004f28:	bf18      	it	ne
 8004f2a:	2301      	movne	r3, #1
 8004f2c:	0692      	lsls	r2, r2, #26
 8004f2e:	d42b      	bmi.n	8004f88 <_printf_common+0xb0>
 8004f30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f34:	4649      	mov	r1, r9
 8004f36:	4638      	mov	r0, r7
 8004f38:	47c0      	blx	r8
 8004f3a:	3001      	adds	r0, #1
 8004f3c:	d01e      	beq.n	8004f7c <_printf_common+0xa4>
 8004f3e:	6823      	ldr	r3, [r4, #0]
 8004f40:	68e5      	ldr	r5, [r4, #12]
 8004f42:	6832      	ldr	r2, [r6, #0]
 8004f44:	f003 0306 	and.w	r3, r3, #6
 8004f48:	2b04      	cmp	r3, #4
 8004f4a:	bf08      	it	eq
 8004f4c:	1aad      	subeq	r5, r5, r2
 8004f4e:	68a3      	ldr	r3, [r4, #8]
 8004f50:	6922      	ldr	r2, [r4, #16]
 8004f52:	bf0c      	ite	eq
 8004f54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f58:	2500      	movne	r5, #0
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	bfc4      	itt	gt
 8004f5e:	1a9b      	subgt	r3, r3, r2
 8004f60:	18ed      	addgt	r5, r5, r3
 8004f62:	2600      	movs	r6, #0
 8004f64:	341a      	adds	r4, #26
 8004f66:	42b5      	cmp	r5, r6
 8004f68:	d11a      	bne.n	8004fa0 <_printf_common+0xc8>
 8004f6a:	2000      	movs	r0, #0
 8004f6c:	e008      	b.n	8004f80 <_printf_common+0xa8>
 8004f6e:	2301      	movs	r3, #1
 8004f70:	4652      	mov	r2, sl
 8004f72:	4649      	mov	r1, r9
 8004f74:	4638      	mov	r0, r7
 8004f76:	47c0      	blx	r8
 8004f78:	3001      	adds	r0, #1
 8004f7a:	d103      	bne.n	8004f84 <_printf_common+0xac>
 8004f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f84:	3501      	adds	r5, #1
 8004f86:	e7c6      	b.n	8004f16 <_printf_common+0x3e>
 8004f88:	18e1      	adds	r1, r4, r3
 8004f8a:	1c5a      	adds	r2, r3, #1
 8004f8c:	2030      	movs	r0, #48	; 0x30
 8004f8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f92:	4422      	add	r2, r4
 8004f94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f9c:	3302      	adds	r3, #2
 8004f9e:	e7c7      	b.n	8004f30 <_printf_common+0x58>
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	4622      	mov	r2, r4
 8004fa4:	4649      	mov	r1, r9
 8004fa6:	4638      	mov	r0, r7
 8004fa8:	47c0      	blx	r8
 8004faa:	3001      	adds	r0, #1
 8004fac:	d0e6      	beq.n	8004f7c <_printf_common+0xa4>
 8004fae:	3601      	adds	r6, #1
 8004fb0:	e7d9      	b.n	8004f66 <_printf_common+0x8e>
	...

08004fb4 <_printf_i>:
 8004fb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fb8:	7e0f      	ldrb	r7, [r1, #24]
 8004fba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004fbc:	2f78      	cmp	r7, #120	; 0x78
 8004fbe:	4691      	mov	r9, r2
 8004fc0:	4680      	mov	r8, r0
 8004fc2:	460c      	mov	r4, r1
 8004fc4:	469a      	mov	sl, r3
 8004fc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004fca:	d807      	bhi.n	8004fdc <_printf_i+0x28>
 8004fcc:	2f62      	cmp	r7, #98	; 0x62
 8004fce:	d80a      	bhi.n	8004fe6 <_printf_i+0x32>
 8004fd0:	2f00      	cmp	r7, #0
 8004fd2:	f000 80d8 	beq.w	8005186 <_printf_i+0x1d2>
 8004fd6:	2f58      	cmp	r7, #88	; 0x58
 8004fd8:	f000 80a3 	beq.w	8005122 <_printf_i+0x16e>
 8004fdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fe0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fe4:	e03a      	b.n	800505c <_printf_i+0xa8>
 8004fe6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fea:	2b15      	cmp	r3, #21
 8004fec:	d8f6      	bhi.n	8004fdc <_printf_i+0x28>
 8004fee:	a101      	add	r1, pc, #4	; (adr r1, 8004ff4 <_printf_i+0x40>)
 8004ff0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ff4:	0800504d 	.word	0x0800504d
 8004ff8:	08005061 	.word	0x08005061
 8004ffc:	08004fdd 	.word	0x08004fdd
 8005000:	08004fdd 	.word	0x08004fdd
 8005004:	08004fdd 	.word	0x08004fdd
 8005008:	08004fdd 	.word	0x08004fdd
 800500c:	08005061 	.word	0x08005061
 8005010:	08004fdd 	.word	0x08004fdd
 8005014:	08004fdd 	.word	0x08004fdd
 8005018:	08004fdd 	.word	0x08004fdd
 800501c:	08004fdd 	.word	0x08004fdd
 8005020:	0800516d 	.word	0x0800516d
 8005024:	08005091 	.word	0x08005091
 8005028:	0800514f 	.word	0x0800514f
 800502c:	08004fdd 	.word	0x08004fdd
 8005030:	08004fdd 	.word	0x08004fdd
 8005034:	0800518f 	.word	0x0800518f
 8005038:	08004fdd 	.word	0x08004fdd
 800503c:	08005091 	.word	0x08005091
 8005040:	08004fdd 	.word	0x08004fdd
 8005044:	08004fdd 	.word	0x08004fdd
 8005048:	08005157 	.word	0x08005157
 800504c:	682b      	ldr	r3, [r5, #0]
 800504e:	1d1a      	adds	r2, r3, #4
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	602a      	str	r2, [r5, #0]
 8005054:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005058:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800505c:	2301      	movs	r3, #1
 800505e:	e0a3      	b.n	80051a8 <_printf_i+0x1f4>
 8005060:	6820      	ldr	r0, [r4, #0]
 8005062:	6829      	ldr	r1, [r5, #0]
 8005064:	0606      	lsls	r6, r0, #24
 8005066:	f101 0304 	add.w	r3, r1, #4
 800506a:	d50a      	bpl.n	8005082 <_printf_i+0xce>
 800506c:	680e      	ldr	r6, [r1, #0]
 800506e:	602b      	str	r3, [r5, #0]
 8005070:	2e00      	cmp	r6, #0
 8005072:	da03      	bge.n	800507c <_printf_i+0xc8>
 8005074:	232d      	movs	r3, #45	; 0x2d
 8005076:	4276      	negs	r6, r6
 8005078:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800507c:	485e      	ldr	r0, [pc, #376]	; (80051f8 <_printf_i+0x244>)
 800507e:	230a      	movs	r3, #10
 8005080:	e019      	b.n	80050b6 <_printf_i+0x102>
 8005082:	680e      	ldr	r6, [r1, #0]
 8005084:	602b      	str	r3, [r5, #0]
 8005086:	f010 0f40 	tst.w	r0, #64	; 0x40
 800508a:	bf18      	it	ne
 800508c:	b236      	sxthne	r6, r6
 800508e:	e7ef      	b.n	8005070 <_printf_i+0xbc>
 8005090:	682b      	ldr	r3, [r5, #0]
 8005092:	6820      	ldr	r0, [r4, #0]
 8005094:	1d19      	adds	r1, r3, #4
 8005096:	6029      	str	r1, [r5, #0]
 8005098:	0601      	lsls	r1, r0, #24
 800509a:	d501      	bpl.n	80050a0 <_printf_i+0xec>
 800509c:	681e      	ldr	r6, [r3, #0]
 800509e:	e002      	b.n	80050a6 <_printf_i+0xf2>
 80050a0:	0646      	lsls	r6, r0, #25
 80050a2:	d5fb      	bpl.n	800509c <_printf_i+0xe8>
 80050a4:	881e      	ldrh	r6, [r3, #0]
 80050a6:	4854      	ldr	r0, [pc, #336]	; (80051f8 <_printf_i+0x244>)
 80050a8:	2f6f      	cmp	r7, #111	; 0x6f
 80050aa:	bf0c      	ite	eq
 80050ac:	2308      	moveq	r3, #8
 80050ae:	230a      	movne	r3, #10
 80050b0:	2100      	movs	r1, #0
 80050b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050b6:	6865      	ldr	r5, [r4, #4]
 80050b8:	60a5      	str	r5, [r4, #8]
 80050ba:	2d00      	cmp	r5, #0
 80050bc:	bfa2      	ittt	ge
 80050be:	6821      	ldrge	r1, [r4, #0]
 80050c0:	f021 0104 	bicge.w	r1, r1, #4
 80050c4:	6021      	strge	r1, [r4, #0]
 80050c6:	b90e      	cbnz	r6, 80050cc <_printf_i+0x118>
 80050c8:	2d00      	cmp	r5, #0
 80050ca:	d04d      	beq.n	8005168 <_printf_i+0x1b4>
 80050cc:	4615      	mov	r5, r2
 80050ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80050d2:	fb03 6711 	mls	r7, r3, r1, r6
 80050d6:	5dc7      	ldrb	r7, [r0, r7]
 80050d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050dc:	4637      	mov	r7, r6
 80050de:	42bb      	cmp	r3, r7
 80050e0:	460e      	mov	r6, r1
 80050e2:	d9f4      	bls.n	80050ce <_printf_i+0x11a>
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	d10b      	bne.n	8005100 <_printf_i+0x14c>
 80050e8:	6823      	ldr	r3, [r4, #0]
 80050ea:	07de      	lsls	r6, r3, #31
 80050ec:	d508      	bpl.n	8005100 <_printf_i+0x14c>
 80050ee:	6923      	ldr	r3, [r4, #16]
 80050f0:	6861      	ldr	r1, [r4, #4]
 80050f2:	4299      	cmp	r1, r3
 80050f4:	bfde      	ittt	le
 80050f6:	2330      	movle	r3, #48	; 0x30
 80050f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005100:	1b52      	subs	r2, r2, r5
 8005102:	6122      	str	r2, [r4, #16]
 8005104:	f8cd a000 	str.w	sl, [sp]
 8005108:	464b      	mov	r3, r9
 800510a:	aa03      	add	r2, sp, #12
 800510c:	4621      	mov	r1, r4
 800510e:	4640      	mov	r0, r8
 8005110:	f7ff fee2 	bl	8004ed8 <_printf_common>
 8005114:	3001      	adds	r0, #1
 8005116:	d14c      	bne.n	80051b2 <_printf_i+0x1fe>
 8005118:	f04f 30ff 	mov.w	r0, #4294967295
 800511c:	b004      	add	sp, #16
 800511e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005122:	4835      	ldr	r0, [pc, #212]	; (80051f8 <_printf_i+0x244>)
 8005124:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005128:	6829      	ldr	r1, [r5, #0]
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005130:	6029      	str	r1, [r5, #0]
 8005132:	061d      	lsls	r5, r3, #24
 8005134:	d514      	bpl.n	8005160 <_printf_i+0x1ac>
 8005136:	07df      	lsls	r7, r3, #31
 8005138:	bf44      	itt	mi
 800513a:	f043 0320 	orrmi.w	r3, r3, #32
 800513e:	6023      	strmi	r3, [r4, #0]
 8005140:	b91e      	cbnz	r6, 800514a <_printf_i+0x196>
 8005142:	6823      	ldr	r3, [r4, #0]
 8005144:	f023 0320 	bic.w	r3, r3, #32
 8005148:	6023      	str	r3, [r4, #0]
 800514a:	2310      	movs	r3, #16
 800514c:	e7b0      	b.n	80050b0 <_printf_i+0xfc>
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	f043 0320 	orr.w	r3, r3, #32
 8005154:	6023      	str	r3, [r4, #0]
 8005156:	2378      	movs	r3, #120	; 0x78
 8005158:	4828      	ldr	r0, [pc, #160]	; (80051fc <_printf_i+0x248>)
 800515a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800515e:	e7e3      	b.n	8005128 <_printf_i+0x174>
 8005160:	0659      	lsls	r1, r3, #25
 8005162:	bf48      	it	mi
 8005164:	b2b6      	uxthmi	r6, r6
 8005166:	e7e6      	b.n	8005136 <_printf_i+0x182>
 8005168:	4615      	mov	r5, r2
 800516a:	e7bb      	b.n	80050e4 <_printf_i+0x130>
 800516c:	682b      	ldr	r3, [r5, #0]
 800516e:	6826      	ldr	r6, [r4, #0]
 8005170:	6961      	ldr	r1, [r4, #20]
 8005172:	1d18      	adds	r0, r3, #4
 8005174:	6028      	str	r0, [r5, #0]
 8005176:	0635      	lsls	r5, r6, #24
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	d501      	bpl.n	8005180 <_printf_i+0x1cc>
 800517c:	6019      	str	r1, [r3, #0]
 800517e:	e002      	b.n	8005186 <_printf_i+0x1d2>
 8005180:	0670      	lsls	r0, r6, #25
 8005182:	d5fb      	bpl.n	800517c <_printf_i+0x1c8>
 8005184:	8019      	strh	r1, [r3, #0]
 8005186:	2300      	movs	r3, #0
 8005188:	6123      	str	r3, [r4, #16]
 800518a:	4615      	mov	r5, r2
 800518c:	e7ba      	b.n	8005104 <_printf_i+0x150>
 800518e:	682b      	ldr	r3, [r5, #0]
 8005190:	1d1a      	adds	r2, r3, #4
 8005192:	602a      	str	r2, [r5, #0]
 8005194:	681d      	ldr	r5, [r3, #0]
 8005196:	6862      	ldr	r2, [r4, #4]
 8005198:	2100      	movs	r1, #0
 800519a:	4628      	mov	r0, r5
 800519c:	f7fb f820 	bl	80001e0 <memchr>
 80051a0:	b108      	cbz	r0, 80051a6 <_printf_i+0x1f2>
 80051a2:	1b40      	subs	r0, r0, r5
 80051a4:	6060      	str	r0, [r4, #4]
 80051a6:	6863      	ldr	r3, [r4, #4]
 80051a8:	6123      	str	r3, [r4, #16]
 80051aa:	2300      	movs	r3, #0
 80051ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051b0:	e7a8      	b.n	8005104 <_printf_i+0x150>
 80051b2:	6923      	ldr	r3, [r4, #16]
 80051b4:	462a      	mov	r2, r5
 80051b6:	4649      	mov	r1, r9
 80051b8:	4640      	mov	r0, r8
 80051ba:	47d0      	blx	sl
 80051bc:	3001      	adds	r0, #1
 80051be:	d0ab      	beq.n	8005118 <_printf_i+0x164>
 80051c0:	6823      	ldr	r3, [r4, #0]
 80051c2:	079b      	lsls	r3, r3, #30
 80051c4:	d413      	bmi.n	80051ee <_printf_i+0x23a>
 80051c6:	68e0      	ldr	r0, [r4, #12]
 80051c8:	9b03      	ldr	r3, [sp, #12]
 80051ca:	4298      	cmp	r0, r3
 80051cc:	bfb8      	it	lt
 80051ce:	4618      	movlt	r0, r3
 80051d0:	e7a4      	b.n	800511c <_printf_i+0x168>
 80051d2:	2301      	movs	r3, #1
 80051d4:	4632      	mov	r2, r6
 80051d6:	4649      	mov	r1, r9
 80051d8:	4640      	mov	r0, r8
 80051da:	47d0      	blx	sl
 80051dc:	3001      	adds	r0, #1
 80051de:	d09b      	beq.n	8005118 <_printf_i+0x164>
 80051e0:	3501      	adds	r5, #1
 80051e2:	68e3      	ldr	r3, [r4, #12]
 80051e4:	9903      	ldr	r1, [sp, #12]
 80051e6:	1a5b      	subs	r3, r3, r1
 80051e8:	42ab      	cmp	r3, r5
 80051ea:	dcf2      	bgt.n	80051d2 <_printf_i+0x21e>
 80051ec:	e7eb      	b.n	80051c6 <_printf_i+0x212>
 80051ee:	2500      	movs	r5, #0
 80051f0:	f104 0619 	add.w	r6, r4, #25
 80051f4:	e7f5      	b.n	80051e2 <_printf_i+0x22e>
 80051f6:	bf00      	nop
 80051f8:	080054d1 	.word	0x080054d1
 80051fc:	080054e2 	.word	0x080054e2

08005200 <_sbrk_r>:
 8005200:	b538      	push	{r3, r4, r5, lr}
 8005202:	4d06      	ldr	r5, [pc, #24]	; (800521c <_sbrk_r+0x1c>)
 8005204:	2300      	movs	r3, #0
 8005206:	4604      	mov	r4, r0
 8005208:	4608      	mov	r0, r1
 800520a:	602b      	str	r3, [r5, #0]
 800520c:	f7fb fcf4 	bl	8000bf8 <_sbrk>
 8005210:	1c43      	adds	r3, r0, #1
 8005212:	d102      	bne.n	800521a <_sbrk_r+0x1a>
 8005214:	682b      	ldr	r3, [r5, #0]
 8005216:	b103      	cbz	r3, 800521a <_sbrk_r+0x1a>
 8005218:	6023      	str	r3, [r4, #0]
 800521a:	bd38      	pop	{r3, r4, r5, pc}
 800521c:	2000019c 	.word	0x2000019c

08005220 <__sread>:
 8005220:	b510      	push	{r4, lr}
 8005222:	460c      	mov	r4, r1
 8005224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005228:	f000 f8a0 	bl	800536c <_read_r>
 800522c:	2800      	cmp	r0, #0
 800522e:	bfab      	itete	ge
 8005230:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005232:	89a3      	ldrhlt	r3, [r4, #12]
 8005234:	181b      	addge	r3, r3, r0
 8005236:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800523a:	bfac      	ite	ge
 800523c:	6563      	strge	r3, [r4, #84]	; 0x54
 800523e:	81a3      	strhlt	r3, [r4, #12]
 8005240:	bd10      	pop	{r4, pc}

08005242 <__swrite>:
 8005242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005246:	461f      	mov	r7, r3
 8005248:	898b      	ldrh	r3, [r1, #12]
 800524a:	05db      	lsls	r3, r3, #23
 800524c:	4605      	mov	r5, r0
 800524e:	460c      	mov	r4, r1
 8005250:	4616      	mov	r6, r2
 8005252:	d505      	bpl.n	8005260 <__swrite+0x1e>
 8005254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005258:	2302      	movs	r3, #2
 800525a:	2200      	movs	r2, #0
 800525c:	f000 f868 	bl	8005330 <_lseek_r>
 8005260:	89a3      	ldrh	r3, [r4, #12]
 8005262:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005266:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800526a:	81a3      	strh	r3, [r4, #12]
 800526c:	4632      	mov	r2, r6
 800526e:	463b      	mov	r3, r7
 8005270:	4628      	mov	r0, r5
 8005272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005276:	f000 b817 	b.w	80052a8 <_write_r>

0800527a <__sseek>:
 800527a:	b510      	push	{r4, lr}
 800527c:	460c      	mov	r4, r1
 800527e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005282:	f000 f855 	bl	8005330 <_lseek_r>
 8005286:	1c43      	adds	r3, r0, #1
 8005288:	89a3      	ldrh	r3, [r4, #12]
 800528a:	bf15      	itete	ne
 800528c:	6560      	strne	r0, [r4, #84]	; 0x54
 800528e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005292:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005296:	81a3      	strheq	r3, [r4, #12]
 8005298:	bf18      	it	ne
 800529a:	81a3      	strhne	r3, [r4, #12]
 800529c:	bd10      	pop	{r4, pc}

0800529e <__sclose>:
 800529e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052a2:	f000 b813 	b.w	80052cc <_close_r>
	...

080052a8 <_write_r>:
 80052a8:	b538      	push	{r3, r4, r5, lr}
 80052aa:	4d07      	ldr	r5, [pc, #28]	; (80052c8 <_write_r+0x20>)
 80052ac:	4604      	mov	r4, r0
 80052ae:	4608      	mov	r0, r1
 80052b0:	4611      	mov	r1, r2
 80052b2:	2200      	movs	r2, #0
 80052b4:	602a      	str	r2, [r5, #0]
 80052b6:	461a      	mov	r2, r3
 80052b8:	f7fb fc4d 	bl	8000b56 <_write>
 80052bc:	1c43      	adds	r3, r0, #1
 80052be:	d102      	bne.n	80052c6 <_write_r+0x1e>
 80052c0:	682b      	ldr	r3, [r5, #0]
 80052c2:	b103      	cbz	r3, 80052c6 <_write_r+0x1e>
 80052c4:	6023      	str	r3, [r4, #0]
 80052c6:	bd38      	pop	{r3, r4, r5, pc}
 80052c8:	2000019c 	.word	0x2000019c

080052cc <_close_r>:
 80052cc:	b538      	push	{r3, r4, r5, lr}
 80052ce:	4d06      	ldr	r5, [pc, #24]	; (80052e8 <_close_r+0x1c>)
 80052d0:	2300      	movs	r3, #0
 80052d2:	4604      	mov	r4, r0
 80052d4:	4608      	mov	r0, r1
 80052d6:	602b      	str	r3, [r5, #0]
 80052d8:	f7fb fc59 	bl	8000b8e <_close>
 80052dc:	1c43      	adds	r3, r0, #1
 80052de:	d102      	bne.n	80052e6 <_close_r+0x1a>
 80052e0:	682b      	ldr	r3, [r5, #0]
 80052e2:	b103      	cbz	r3, 80052e6 <_close_r+0x1a>
 80052e4:	6023      	str	r3, [r4, #0]
 80052e6:	bd38      	pop	{r3, r4, r5, pc}
 80052e8:	2000019c 	.word	0x2000019c

080052ec <_fstat_r>:
 80052ec:	b538      	push	{r3, r4, r5, lr}
 80052ee:	4d07      	ldr	r5, [pc, #28]	; (800530c <_fstat_r+0x20>)
 80052f0:	2300      	movs	r3, #0
 80052f2:	4604      	mov	r4, r0
 80052f4:	4608      	mov	r0, r1
 80052f6:	4611      	mov	r1, r2
 80052f8:	602b      	str	r3, [r5, #0]
 80052fa:	f7fb fc54 	bl	8000ba6 <_fstat>
 80052fe:	1c43      	adds	r3, r0, #1
 8005300:	d102      	bne.n	8005308 <_fstat_r+0x1c>
 8005302:	682b      	ldr	r3, [r5, #0]
 8005304:	b103      	cbz	r3, 8005308 <_fstat_r+0x1c>
 8005306:	6023      	str	r3, [r4, #0]
 8005308:	bd38      	pop	{r3, r4, r5, pc}
 800530a:	bf00      	nop
 800530c:	2000019c 	.word	0x2000019c

08005310 <_isatty_r>:
 8005310:	b538      	push	{r3, r4, r5, lr}
 8005312:	4d06      	ldr	r5, [pc, #24]	; (800532c <_isatty_r+0x1c>)
 8005314:	2300      	movs	r3, #0
 8005316:	4604      	mov	r4, r0
 8005318:	4608      	mov	r0, r1
 800531a:	602b      	str	r3, [r5, #0]
 800531c:	f7fb fc53 	bl	8000bc6 <_isatty>
 8005320:	1c43      	adds	r3, r0, #1
 8005322:	d102      	bne.n	800532a <_isatty_r+0x1a>
 8005324:	682b      	ldr	r3, [r5, #0]
 8005326:	b103      	cbz	r3, 800532a <_isatty_r+0x1a>
 8005328:	6023      	str	r3, [r4, #0]
 800532a:	bd38      	pop	{r3, r4, r5, pc}
 800532c:	2000019c 	.word	0x2000019c

08005330 <_lseek_r>:
 8005330:	b538      	push	{r3, r4, r5, lr}
 8005332:	4d07      	ldr	r5, [pc, #28]	; (8005350 <_lseek_r+0x20>)
 8005334:	4604      	mov	r4, r0
 8005336:	4608      	mov	r0, r1
 8005338:	4611      	mov	r1, r2
 800533a:	2200      	movs	r2, #0
 800533c:	602a      	str	r2, [r5, #0]
 800533e:	461a      	mov	r2, r3
 8005340:	f7fb fc4c 	bl	8000bdc <_lseek>
 8005344:	1c43      	adds	r3, r0, #1
 8005346:	d102      	bne.n	800534e <_lseek_r+0x1e>
 8005348:	682b      	ldr	r3, [r5, #0]
 800534a:	b103      	cbz	r3, 800534e <_lseek_r+0x1e>
 800534c:	6023      	str	r3, [r4, #0]
 800534e:	bd38      	pop	{r3, r4, r5, pc}
 8005350:	2000019c 	.word	0x2000019c

08005354 <__malloc_lock>:
 8005354:	4801      	ldr	r0, [pc, #4]	; (800535c <__malloc_lock+0x8>)
 8005356:	f7ff bb1d 	b.w	8004994 <__retarget_lock_acquire_recursive>
 800535a:	bf00      	nop
 800535c:	20000190 	.word	0x20000190

08005360 <__malloc_unlock>:
 8005360:	4801      	ldr	r0, [pc, #4]	; (8005368 <__malloc_unlock+0x8>)
 8005362:	f7ff bb18 	b.w	8004996 <__retarget_lock_release_recursive>
 8005366:	bf00      	nop
 8005368:	20000190 	.word	0x20000190

0800536c <_read_r>:
 800536c:	b538      	push	{r3, r4, r5, lr}
 800536e:	4d07      	ldr	r5, [pc, #28]	; (800538c <_read_r+0x20>)
 8005370:	4604      	mov	r4, r0
 8005372:	4608      	mov	r0, r1
 8005374:	4611      	mov	r1, r2
 8005376:	2200      	movs	r2, #0
 8005378:	602a      	str	r2, [r5, #0]
 800537a:	461a      	mov	r2, r3
 800537c:	f7fb fbce 	bl	8000b1c <_read>
 8005380:	1c43      	adds	r3, r0, #1
 8005382:	d102      	bne.n	800538a <_read_r+0x1e>
 8005384:	682b      	ldr	r3, [r5, #0]
 8005386:	b103      	cbz	r3, 800538a <_read_r+0x1e>
 8005388:	6023      	str	r3, [r4, #0]
 800538a:	bd38      	pop	{r3, r4, r5, pc}
 800538c:	2000019c 	.word	0x2000019c

08005390 <_init>:
 8005390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005392:	bf00      	nop
 8005394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005396:	bc08      	pop	{r3}
 8005398:	469e      	mov	lr, r3
 800539a:	4770      	bx	lr

0800539c <_fini>:
 800539c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800539e:	bf00      	nop
 80053a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053a2:	bc08      	pop	{r3}
 80053a4:	469e      	mov	lr, r3
 80053a6:	4770      	bx	lr
