
KayO_hitbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f7b4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ed8  0800f954  0800f954  0001f954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801182c  0801182c  00030190  2**0
                  CONTENTS
  4 .ARM          00000008  0801182c  0801182c  0002182c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011834  08011834  00030190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011834  08011834  00021834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011838  08011838  00021838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0801183c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001154  20000190  080119cc  00030190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200012e4  080119cc  000312e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021242  00000000  00000000  000301c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004767  00000000  00000000  00051402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cb0  00000000  00000000  00055b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001d157  00000000  00000000  00057820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00024c19  00000000  00000000  00074977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0009ad41  00000000  00000000  00099590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  001342d1  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001ad8  00000000  00000000  00134328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000082e8  00000000  00000000  00135e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000190 	.word	0x20000190
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f93c 	.word	0x0800f93c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000194 	.word	0x20000194
 80001dc:	0800f93c 	.word	0x0800f93c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ILI9341_Select>:
/* vim: set ai et ts=4 sw=4: */
#include "stm32f4xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800058e:	4802      	ldr	r0, [pc, #8]	; (8000598 <ILI9341_Select+0x14>)
 8000590:	f002 fb0a 	bl	8002ba8 <HAL_GPIO_WritePin>
}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40020000 	.word	0x40020000

0800059c <ILI9341_Unselect>:

void ILI9341_Unselect() {
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005a6:	4802      	ldr	r0, [pc, #8]	; (80005b0 <ILI9341_Unselect+0x14>)
 80005a8:	f002 fafe 	bl	8002ba8 <HAL_GPIO_WritePin>
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40020000 	.word	0x40020000

080005b4 <ILI9341_Reset>:

static void ILI9341_Reset() {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2104      	movs	r1, #4
 80005bc:	4806      	ldr	r0, [pc, #24]	; (80005d8 <ILI9341_Reset+0x24>)
 80005be:	f002 faf3 	bl	8002ba8 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80005c2:	2005      	movs	r0, #5
 80005c4:	f002 f804 	bl	80025d0 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	2104      	movs	r1, #4
 80005cc:	4802      	ldr	r0, [pc, #8]	; (80005d8 <ILI9341_Reset+0x24>)
 80005ce:	f002 faeb 	bl	8002ba8 <HAL_GPIO_WritePin>
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40020c00 	.word	0x40020c00

080005dc <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ec:	4806      	ldr	r0, [pc, #24]	; (8000608 <ILI9341_WriteCommand+0x2c>)
 80005ee:	f002 fadb 	bl	8002ba8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80005f2:	1df9      	adds	r1, r7, #7
 80005f4:	f04f 33ff 	mov.w	r3, #4294967295
 80005f8:	2201      	movs	r2, #1
 80005fa:	4804      	ldr	r0, [pc, #16]	; (800060c <ILI9341_WriteCommand+0x30>)
 80005fc:	f005 fd3f 	bl	800607e <HAL_SPI_Transmit>
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40020800 	.word	0x40020800
 800060c:	20000258 	.word	0x20000258

08000610 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800061a:	2201      	movs	r2, #1
 800061c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000620:	4810      	ldr	r0, [pc, #64]	; (8000664 <ILI9341_WriteData+0x54>)
 8000622:	f002 fac1 	bl	8002ba8 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8000626:	e015      	b.n	8000654 <ILI9341_WriteData+0x44>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800062e:	bf28      	it	cs
 8000630:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8000634:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000636:	89fa      	ldrh	r2, [r7, #14]
 8000638:	f04f 33ff 	mov.w	r3, #4294967295
 800063c:	6879      	ldr	r1, [r7, #4]
 800063e:	480a      	ldr	r0, [pc, #40]	; (8000668 <ILI9341_WriteData+0x58>)
 8000640:	f005 fd1d 	bl	800607e <HAL_SPI_Transmit>
        buff += chunk_size;
 8000644:	89fb      	ldrh	r3, [r7, #14]
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	4413      	add	r3, r2
 800064a:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 800064c:	89fb      	ldrh	r3, [r7, #14]
 800064e:	683a      	ldr	r2, [r7, #0]
 8000650:	1ad3      	subs	r3, r2, r3
 8000652:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d1e6      	bne.n	8000628 <ILI9341_WriteData+0x18>
    }
}
 800065a:	bf00      	nop
 800065c:	bf00      	nop
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40020800 	.word	0x40020800
 8000668:	20000258 	.word	0x20000258

0800066c <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	4604      	mov	r4, r0
 8000674:	4608      	mov	r0, r1
 8000676:	4611      	mov	r1, r2
 8000678:	461a      	mov	r2, r3
 800067a:	4623      	mov	r3, r4
 800067c:	80fb      	strh	r3, [r7, #6]
 800067e:	4603      	mov	r3, r0
 8000680:	80bb      	strh	r3, [r7, #4]
 8000682:	460b      	mov	r3, r1
 8000684:	807b      	strh	r3, [r7, #2]
 8000686:	4613      	mov	r3, r2
 8000688:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 800068a:	202a      	movs	r0, #42	; 0x2a
 800068c:	f7ff ffa6 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8000690:	88fb      	ldrh	r3, [r7, #6]
 8000692:	0a1b      	lsrs	r3, r3, #8
 8000694:	b29b      	uxth	r3, r3
 8000696:	b2db      	uxtb	r3, r3
 8000698:	733b      	strb	r3, [r7, #12]
 800069a:	88fb      	ldrh	r3, [r7, #6]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	737b      	strb	r3, [r7, #13]
 80006a0:	887b      	ldrh	r3, [r7, #2]
 80006a2:	0a1b      	lsrs	r3, r3, #8
 80006a4:	b29b      	uxth	r3, r3
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	73bb      	strb	r3, [r7, #14]
 80006aa:	887b      	ldrh	r3, [r7, #2]
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2104      	movs	r1, #4
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff ffaa 	bl	8000610 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 80006bc:	202b      	movs	r0, #43	; 0x2b
 80006be:	f7ff ff8d 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 80006c2:	88bb      	ldrh	r3, [r7, #4]
 80006c4:	0a1b      	lsrs	r3, r3, #8
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	723b      	strb	r3, [r7, #8]
 80006cc:	88bb      	ldrh	r3, [r7, #4]
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	727b      	strb	r3, [r7, #9]
 80006d2:	883b      	ldrh	r3, [r7, #0]
 80006d4:	0a1b      	lsrs	r3, r3, #8
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	72bb      	strb	r3, [r7, #10]
 80006dc:	883b      	ldrh	r3, [r7, #0]
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 80006e2:	f107 0308 	add.w	r3, r7, #8
 80006e6:	2104      	movs	r1, #4
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ff91 	bl	8000610 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 80006ee:	202c      	movs	r0, #44	; 0x2c
 80006f0:	f7ff ff74 	bl	80005dc <ILI9341_WriteCommand>
}
 80006f4:	bf00      	nop
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd90      	pop	{r4, r7, pc}

080006fc <ILI9341_Init>:

void ILI9341_Init() {
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b09b      	sub	sp, #108	; 0x6c
 8000700:	af00      	add	r7, sp, #0
    ILI9341_Select();
 8000702:	f7ff ff3f 	bl	8000584 <ILI9341_Select>
    ILI9341_Reset();
 8000706:	f7ff ff55 	bl	80005b4 <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 800070a:	2001      	movs	r0, #1
 800070c:	f7ff ff66 	bl	80005dc <ILI9341_WriteCommand>
    HAL_Delay(1000);
 8000710:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000714:	f001 ff5c 	bl	80025d0 <HAL_Delay>

    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 8000718:	20cb      	movs	r0, #203	; 0xcb
 800071a:	f7ff ff5f 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 800071e:	4a87      	ldr	r2, [pc, #540]	; (800093c <ILI9341_Init+0x240>)
 8000720:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000724:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000728:	6018      	str	r0, [r3, #0]
 800072a:	3304      	adds	r3, #4
 800072c:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800072e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000732:	2105      	movs	r1, #5
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff ff6b 	bl	8000610 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 800073a:	20cf      	movs	r0, #207	; 0xcf
 800073c:	f7ff ff4e 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 8000740:	4a7f      	ldr	r2, [pc, #508]	; (8000940 <ILI9341_Init+0x244>)
 8000742:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000746:	6812      	ldr	r2, [r2, #0]
 8000748:	4611      	mov	r1, r2
 800074a:	8019      	strh	r1, [r3, #0]
 800074c:	3302      	adds	r3, #2
 800074e:	0c12      	lsrs	r2, r2, #16
 8000750:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000752:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000756:	2103      	movs	r1, #3
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ff59 	bl	8000610 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 800075e:	20e8      	movs	r0, #232	; 0xe8
 8000760:	f7ff ff3c 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 8000764:	4a77      	ldr	r2, [pc, #476]	; (8000944 <ILI9341_Init+0x248>)
 8000766:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800076a:	6812      	ldr	r2, [r2, #0]
 800076c:	4611      	mov	r1, r2
 800076e:	8019      	strh	r1, [r3, #0]
 8000770:	3302      	adds	r3, #2
 8000772:	0c12      	lsrs	r2, r2, #16
 8000774:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000776:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800077a:	2103      	movs	r1, #3
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff ff47 	bl	8000610 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 8000782:	20ea      	movs	r0, #234	; 0xea
 8000784:	f7ff ff2a 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 8000788:	2300      	movs	r3, #0
 800078a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        ILI9341_WriteData(data, sizeof(data));
 800078e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000792:	2102      	movs	r1, #2
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ff3b 	bl	8000610 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 800079a:	20ed      	movs	r0, #237	; 0xed
 800079c:	f7ff ff1e 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 80007a0:	4b69      	ldr	r3, [pc, #420]	; (8000948 <ILI9341_Init+0x24c>)
 80007a2:	653b      	str	r3, [r7, #80]	; 0x50
        ILI9341_WriteData(data, sizeof(data));
 80007a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80007a8:	2104      	movs	r1, #4
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ff30 	bl	8000610 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 80007b0:	20f7      	movs	r0, #247	; 0xf7
 80007b2:	f7ff ff13 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 80007b6:	2320      	movs	r3, #32
 80007b8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        ILI9341_WriteData(data, sizeof(data));
 80007bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007c0:	2101      	movs	r1, #1
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff ff24 	bl	8000610 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 80007c8:	20c0      	movs	r0, #192	; 0xc0
 80007ca:	f7ff ff07 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 80007ce:	2323      	movs	r3, #35	; 0x23
 80007d0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        ILI9341_WriteData(data, sizeof(data));
 80007d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007d8:	2101      	movs	r1, #1
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff ff18 	bl	8000610 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 80007e0:	20c1      	movs	r0, #193	; 0xc1
 80007e2:	f7ff fefb 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 80007e6:	2310      	movs	r3, #16
 80007e8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        ILI9341_WriteData(data, sizeof(data));
 80007ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007f0:	2101      	movs	r1, #1
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ff0c 	bl	8000610 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 80007f8:	20c5      	movs	r0, #197	; 0xc5
 80007fa:	f7ff feef 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 80007fe:	f642 033e 	movw	r3, #10302	; 0x283e
 8000802:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        ILI9341_WriteData(data, sizeof(data));
 8000806:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800080a:	2102      	movs	r1, #2
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff feff 	bl	8000610 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 8000812:	20c7      	movs	r0, #199	; 0xc7
 8000814:	f7ff fee2 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 8000818:	2386      	movs	r3, #134	; 0x86
 800081a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        ILI9341_WriteData(data, sizeof(data));
 800081e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000822:	2101      	movs	r1, #1
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff fef3 	bl	8000610 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 800082a:	2036      	movs	r0, #54	; 0x36
 800082c:	f7ff fed6 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 8000830:	2348      	movs	r3, #72	; 0x48
 8000832:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        ILI9341_WriteData(data, sizeof(data));
 8000836:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800083a:	2101      	movs	r1, #1
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff fee7 	bl	8000610 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 8000842:	203a      	movs	r0, #58	; 0x3a
 8000844:	f7ff feca 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 8000848:	2355      	movs	r3, #85	; 0x55
 800084a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        ILI9341_WriteData(data, sizeof(data));
 800084e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000852:	2101      	movs	r1, #1
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff fedb 	bl	8000610 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 800085a:	20b1      	movs	r0, #177	; 0xb1
 800085c:	f7ff febe 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 8000860:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000864:	863b      	strh	r3, [r7, #48]	; 0x30
        ILI9341_WriteData(data, sizeof(data));
 8000866:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800086a:	2102      	movs	r1, #2
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fecf 	bl	8000610 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 8000872:	20b6      	movs	r0, #182	; 0xb6
 8000874:	f7ff feb2 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 8000878:	4a34      	ldr	r2, [pc, #208]	; (800094c <ILI9341_Init+0x250>)
 800087a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800087e:	6812      	ldr	r2, [r2, #0]
 8000880:	4611      	mov	r1, r2
 8000882:	8019      	strh	r1, [r3, #0]
 8000884:	3302      	adds	r3, #2
 8000886:	0c12      	lsrs	r2, r2, #16
 8000888:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800088a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800088e:	2103      	movs	r1, #3
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff febd 	bl	8000610 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 8000896:	20f2      	movs	r0, #242	; 0xf2
 8000898:	f7ff fea0 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 800089c:	2300      	movs	r3, #0
 800089e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        ILI9341_WriteData(data, sizeof(data));
 80008a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008a6:	2101      	movs	r1, #1
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff feb1 	bl	8000610 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 80008ae:	2026      	movs	r0, #38	; 0x26
 80008b0:	f7ff fe94 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 80008b4:	2301      	movs	r3, #1
 80008b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        ILI9341_WriteData(data, sizeof(data));
 80008ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008be:	2101      	movs	r1, #1
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff fea5 	bl	8000610 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 80008c6:	20e0      	movs	r0, #224	; 0xe0
 80008c8:	f7ff fe88 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 80008cc:	4b20      	ldr	r3, [pc, #128]	; (8000950 <ILI9341_Init+0x254>)
 80008ce:	f107 0414 	add.w	r4, r7, #20
 80008d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008d4:	c407      	stmia	r4!, {r0, r1, r2}
 80008d6:	8023      	strh	r3, [r4, #0]
 80008d8:	3402      	adds	r4, #2
 80008da:	0c1b      	lsrs	r3, r3, #16
 80008dc:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	210f      	movs	r1, #15
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fe93 	bl	8000610 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 80008ea:	20e1      	movs	r0, #225	; 0xe1
 80008ec:	f7ff fe76 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 80008f0:	4b18      	ldr	r3, [pc, #96]	; (8000954 <ILI9341_Init+0x258>)
 80008f2:	1d3c      	adds	r4, r7, #4
 80008f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008f6:	c407      	stmia	r4!, {r0, r1, r2}
 80008f8:	8023      	strh	r3, [r4, #0]
 80008fa:	3402      	adds	r4, #2
 80008fc:	0c1b      	lsrs	r3, r3, #16
 80008fe:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	210f      	movs	r1, #15
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff fe83 	bl	8000610 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 800090a:	2011      	movs	r0, #17
 800090c:	f7ff fe66 	bl	80005dc <ILI9341_WriteCommand>
    HAL_Delay(120);
 8000910:	2078      	movs	r0, #120	; 0x78
 8000912:	f001 fe5d 	bl	80025d0 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 8000916:	2029      	movs	r0, #41	; 0x29
 8000918:	f7ff fe60 	bl	80005dc <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 800091c:	2036      	movs	r0, #54	; 0x36
 800091e:	f7ff fe5d 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 8000922:	2328      	movs	r3, #40	; 0x28
 8000924:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000926:	463b      	mov	r3, r7
 8000928:	2101      	movs	r1, #1
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff fe70 	bl	8000610 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 8000930:	f7ff fe34 	bl	800059c <ILI9341_Unselect>
}
 8000934:	bf00      	nop
 8000936:	376c      	adds	r7, #108	; 0x6c
 8000938:	46bd      	mov	sp, r7
 800093a:	bd90      	pop	{r4, r7, pc}
 800093c:	0800f954 	.word	0x0800f954
 8000940:	0800f95c 	.word	0x0800f95c
 8000944:	0800f960 	.word	0x0800f960
 8000948:	81120364 	.word	0x81120364
 800094c:	0800f964 	.word	0x0800f964
 8000950:	0800f968 	.word	0x0800f968
 8000954:	0800f978 	.word	0x0800f978

08000958 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	80fb      	strh	r3, [r7, #6]
 8000962:	460b      	mov	r3, r1
 8000964:	80bb      	strh	r3, [r7, #4]
 8000966:	4613      	mov	r3, r2
 8000968:	807b      	strh	r3, [r7, #2]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
 800096a:	88fb      	ldrh	r3, [r7, #6]
 800096c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000970:	d21f      	bcs.n	80009b2 <ILI9341_DrawPixel+0x5a>
 8000972:	88bb      	ldrh	r3, [r7, #4]
 8000974:	2bef      	cmp	r3, #239	; 0xef
 8000976:	d81c      	bhi.n	80009b2 <ILI9341_DrawPixel+0x5a>
        return;

    ILI9341_Select();
 8000978:	f7ff fe04 	bl	8000584 <ILI9341_Select>

    ILI9341_SetAddressWindow(x, y, x+1, y+1);
 800097c:	88fb      	ldrh	r3, [r7, #6]
 800097e:	3301      	adds	r3, #1
 8000980:	b29a      	uxth	r2, r3
 8000982:	88bb      	ldrh	r3, [r7, #4]
 8000984:	3301      	adds	r3, #1
 8000986:	b29b      	uxth	r3, r3
 8000988:	88b9      	ldrh	r1, [r7, #4]
 800098a:	88f8      	ldrh	r0, [r7, #6]
 800098c:	f7ff fe6e 	bl	800066c <ILI9341_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8000990:	887b      	ldrh	r3, [r7, #2]
 8000992:	0a1b      	lsrs	r3, r3, #8
 8000994:	b29b      	uxth	r3, r3
 8000996:	b2db      	uxtb	r3, r3
 8000998:	733b      	strb	r3, [r7, #12]
 800099a:	887b      	ldrh	r3, [r7, #2]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	737b      	strb	r3, [r7, #13]
    ILI9341_WriteData(data, sizeof(data));
 80009a0:	f107 030c 	add.w	r3, r7, #12
 80009a4:	2102      	movs	r1, #2
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fe32 	bl	8000610 <ILI9341_WriteData>

    ILI9341_Unselect();
 80009ac:	f7ff fdf6 	bl	800059c <ILI9341_Unselect>
 80009b0:	e000      	b.n	80009b4 <ILI9341_DrawPixel+0x5c>
        return;
 80009b2:	bf00      	nop
}
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <ILI9341_WriteChar>:

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80009ba:	b082      	sub	sp, #8
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b089      	sub	sp, #36	; 0x24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	637b      	str	r3, [r7, #52]	; 0x34
 80009c4:	4603      	mov	r3, r0
 80009c6:	80fb      	strh	r3, [r7, #6]
 80009c8:	460b      	mov	r3, r1
 80009ca:	80bb      	strh	r3, [r7, #4]
 80009cc:	4613      	mov	r3, r2
 80009ce:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80009d0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	88fb      	ldrh	r3, [r7, #6]
 80009d8:	4413      	add	r3, r2
 80009da:	b29b      	uxth	r3, r3
 80009dc:	3b01      	subs	r3, #1
 80009de:	b29c      	uxth	r4, r3
 80009e0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80009e4:	b29a      	uxth	r2, r3
 80009e6:	88bb      	ldrh	r3, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	3b01      	subs	r3, #1
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	88b9      	ldrh	r1, [r7, #4]
 80009f2:	88f8      	ldrh	r0, [r7, #6]
 80009f4:	4622      	mov	r2, r4
 80009f6:	f7ff fe39 	bl	800066c <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
 80009fe:	e043      	b.n	8000a88 <ILI9341_WriteChar+0xce>
        b = font.data[(ch - 32) * font.height + i];
 8000a00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a02:	78fb      	ldrb	r3, [r7, #3]
 8000a04:	3b20      	subs	r3, #32
 8000a06:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000a0a:	fb01 f303 	mul.w	r3, r1, r3
 8000a0e:	4619      	mov	r1, r3
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	440b      	add	r3, r1
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	4413      	add	r3, r2
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61bb      	str	r3, [r7, #24]
 8000a20:	e029      	b.n	8000a76 <ILI9341_WriteChar+0xbc>
            if((b << j) & 0x8000)  {
 8000a22:	697a      	ldr	r2, [r7, #20]
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d00e      	beq.n	8000a50 <ILI9341_WriteChar+0x96>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000a32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000a34:	0a1b      	lsrs	r3, r3, #8
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	743b      	strb	r3, [r7, #16]
 8000a3c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 8000a42:	f107 0310 	add.w	r3, r7, #16
 8000a46:	2102      	movs	r1, #2
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fde1 	bl	8000610 <ILI9341_WriteData>
 8000a4e:	e00f      	b.n	8000a70 <ILI9341_WriteChar+0xb6>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000a50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000a54:	0a1b      	lsrs	r3, r3, #8
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	733b      	strb	r3, [r7, #12]
 8000a5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	2102      	movs	r1, #2
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fdd0 	bl	8000610 <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	3301      	adds	r3, #1
 8000a74:	61bb      	str	r3, [r7, #24]
 8000a76:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d3cf      	bcc.n	8000a22 <ILI9341_WriteChar+0x68>
    for(i = 0; i < font.height; i++) {
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	3301      	adds	r3, #1
 8000a86:	61fb      	str	r3, [r7, #28]
 8000a88:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d3b5      	bcc.n	8000a00 <ILI9341_WriteChar+0x46>
            }
        }
    }
}
 8000a94:	bf00      	nop
 8000a96:	bf00      	nop
 8000a98:	3724      	adds	r7, #36	; 0x24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000aa0:	b002      	add	sp, #8
 8000aa2:	4770      	bx	lr

08000aa4 <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b086      	sub	sp, #24
 8000aaa:	af04      	add	r7, sp, #16
 8000aac:	603a      	str	r2, [r7, #0]
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	80fb      	strh	r3, [r7, #6]
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 8000ab8:	f7ff fd64 	bl	8000584 <ILI9341_Select>

    while(*str) {
 8000abc:	e02e      	b.n	8000b1c <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 8000abe:	88fb      	ldrh	r3, [r7, #6]
 8000ac0:	7d3a      	ldrb	r2, [r7, #20]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000ac8:	db13      	blt.n	8000af2 <ILI9341_WriteString+0x4e>
            x = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000ace:	7d7b      	ldrb	r3, [r7, #21]
 8000ad0:	b29a      	uxth	r2, r3
 8000ad2:	88bb      	ldrh	r3, [r7, #4]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 8000ad8:	88bb      	ldrh	r3, [r7, #4]
 8000ada:	7d7a      	ldrb	r2, [r7, #21]
 8000adc:	4413      	add	r3, r2
 8000ade:	2bef      	cmp	r3, #239	; 0xef
 8000ae0:	dc21      	bgt.n	8000b26 <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b20      	cmp	r3, #32
 8000ae8:	d103      	bne.n	8000af2 <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	3301      	adds	r3, #1
 8000aee:	603b      	str	r3, [r7, #0]
                continue;
 8000af0:	e014      	b.n	8000b1c <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	781a      	ldrb	r2, [r3, #0]
 8000af6:	88b9      	ldrh	r1, [r7, #4]
 8000af8:	88f8      	ldrh	r0, [r7, #6]
 8000afa:	8c3b      	ldrh	r3, [r7, #32]
 8000afc:	9302      	str	r3, [sp, #8]
 8000afe:	8bbb      	ldrh	r3, [r7, #28]
 8000b00:	9301      	str	r3, [sp, #4]
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	f7ff ff57 	bl	80009ba <ILI9341_WriteChar>
        x += font.width;
 8000b0c:	7d3b      	ldrb	r3, [r7, #20]
 8000b0e:	b29a      	uxth	r2, r3
 8000b10:	88fb      	ldrh	r3, [r7, #6]
 8000b12:	4413      	add	r3, r2
 8000b14:	80fb      	strh	r3, [r7, #6]
        str++;
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d1cc      	bne.n	8000abe <ILI9341_WriteString+0x1a>
 8000b24:	e000      	b.n	8000b28 <ILI9341_WriteString+0x84>
                break;
 8000b26:	bf00      	nop
    }

    ILI9341_Unselect();
 8000b28:	f7ff fd38 	bl	800059c <ILI9341_Unselect>
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b36:	b002      	add	sp, #8
 8000b38:	4770      	bx	lr
	...

08000b3c <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000b3c:	b590      	push	{r4, r7, lr}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4604      	mov	r4, r0
 8000b44:	4608      	mov	r0, r1
 8000b46:	4611      	mov	r1, r2
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4623      	mov	r3, r4
 8000b4c:	80fb      	strh	r3, [r7, #6]
 8000b4e:	4603      	mov	r3, r0
 8000b50:	80bb      	strh	r3, [r7, #4]
 8000b52:	460b      	mov	r3, r1
 8000b54:	807b      	strh	r3, [r7, #2]
 8000b56:	4613      	mov	r3, r2
 8000b58:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000b5a:	88fb      	ldrh	r3, [r7, #6]
 8000b5c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000b60:	d253      	bcs.n	8000c0a <ILI9341_FillRectangle+0xce>
 8000b62:	88bb      	ldrh	r3, [r7, #4]
 8000b64:	2bef      	cmp	r3, #239	; 0xef
 8000b66:	d850      	bhi.n	8000c0a <ILI9341_FillRectangle+0xce>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8000b68:	88fa      	ldrh	r2, [r7, #6]
 8000b6a:	887b      	ldrh	r3, [r7, #2]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000b72:	dd03      	ble.n	8000b7c <ILI9341_FillRectangle+0x40>
 8000b74:	88fb      	ldrh	r3, [r7, #6]
 8000b76:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8000b7a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8000b7c:	88ba      	ldrh	r2, [r7, #4]
 8000b7e:	883b      	ldrh	r3, [r7, #0]
 8000b80:	4413      	add	r3, r2
 8000b82:	2bf0      	cmp	r3, #240	; 0xf0
 8000b84:	dd03      	ble.n	8000b8e <ILI9341_FillRectangle+0x52>
 8000b86:	88bb      	ldrh	r3, [r7, #4]
 8000b88:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000b8c:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 8000b8e:	f7ff fcf9 	bl	8000584 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000b92:	88fa      	ldrh	r2, [r7, #6]
 8000b94:	887b      	ldrh	r3, [r7, #2]
 8000b96:	4413      	add	r3, r2
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	b29c      	uxth	r4, r3
 8000b9e:	88ba      	ldrh	r2, [r7, #4]
 8000ba0:	883b      	ldrh	r3, [r7, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	88b9      	ldrh	r1, [r7, #4]
 8000bac:	88f8      	ldrh	r0, [r7, #6]
 8000bae:	4622      	mov	r2, r4
 8000bb0:	f7ff fd5c 	bl	800066c <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000bb4:	8c3b      	ldrh	r3, [r7, #32]
 8000bb6:	0a1b      	lsrs	r3, r3, #8
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	733b      	strb	r3, [r7, #12]
 8000bbe:	8c3b      	ldrh	r3, [r7, #32]
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bca:	4812      	ldr	r0, [pc, #72]	; (8000c14 <ILI9341_FillRectangle+0xd8>)
 8000bcc:	f001 ffec 	bl	8002ba8 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000bd0:	883b      	ldrh	r3, [r7, #0]
 8000bd2:	80bb      	strh	r3, [r7, #4]
 8000bd4:	e013      	b.n	8000bfe <ILI9341_FillRectangle+0xc2>
        for(x = w; x > 0; x--) {
 8000bd6:	887b      	ldrh	r3, [r7, #2]
 8000bd8:	80fb      	strh	r3, [r7, #6]
 8000bda:	e00a      	b.n	8000bf2 <ILI9341_FillRectangle+0xb6>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000bdc:	f107 010c 	add.w	r1, r7, #12
 8000be0:	f04f 33ff 	mov.w	r3, #4294967295
 8000be4:	2202      	movs	r2, #2
 8000be6:	480c      	ldr	r0, [pc, #48]	; (8000c18 <ILI9341_FillRectangle+0xdc>)
 8000be8:	f005 fa49 	bl	800607e <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000bec:	88fb      	ldrh	r3, [r7, #6]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	80fb      	strh	r3, [r7, #6]
 8000bf2:	88fb      	ldrh	r3, [r7, #6]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d1f1      	bne.n	8000bdc <ILI9341_FillRectangle+0xa0>
    for(y = h; y > 0; y--) {
 8000bf8:	88bb      	ldrh	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	80bb      	strh	r3, [r7, #4]
 8000bfe:	88bb      	ldrh	r3, [r7, #4]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d1e8      	bne.n	8000bd6 <ILI9341_FillRectangle+0x9a>
        }
    }

    ILI9341_Unselect();
 8000c04:	f7ff fcca 	bl	800059c <ILI9341_Unselect>
 8000c08:	e000      	b.n	8000c0c <ILI9341_FillRectangle+0xd0>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000c0a:	bf00      	nop
}
 8000c0c:	3714      	adds	r7, #20
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd90      	pop	{r4, r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40020800 	.word	0x40020800
 8000c18:	20000258 	.word	0x20000258

08000c1c <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af02      	add	r7, sp, #8
 8000c22:	4603      	mov	r3, r0
 8000c24:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 8000c26:	88fb      	ldrh	r3, [r7, #6]
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	23f0      	movs	r3, #240	; 0xf0
 8000c2c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000c30:	2100      	movs	r1, #0
 8000c32:	2000      	movs	r0, #0
 8000c34:	f7ff ff82 	bl	8000b3c <ILI9341_FillRectangle>
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000c48:	1d39      	adds	r1, r7, #4
 8000c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4e:	2201      	movs	r2, #1
 8000c50:	4803      	ldr	r0, [pc, #12]	; (8000c60 <__io_putchar+0x20>)
 8000c52:	f006 fa50 	bl	80070f6 <HAL_UART_Transmit>
  return ch;
 8000c56:	687b      	ldr	r3, [r7, #4]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000340 	.word	0x20000340

08000c64 <displayImage>:

// Image display
int displayImage(const char*fname, uint32_t startx, uint32_t starty) {
 8000c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c68:	b0a0      	sub	sp, #128	; 0x80
 8000c6a:	af04      	add	r7, sp, #16
 8000c6c:	60f8      	str	r0, [r7, #12]
 8000c6e:	60b9      	str	r1, [r7, #8]
 8000c70:	607a      	str	r2, [r7, #4]
 8000c72:	466b      	mov	r3, sp
 8000c74:	469a      	mov	sl, r3
	    FRESULT res = f_open(&fil, fname, FA_READ);
 8000c76:	2201      	movs	r2, #1
 8000c78:	68f9      	ldr	r1, [r7, #12]
 8000c7a:	488f      	ldr	r0, [pc, #572]	; (8000eb8 <displayImage+0x254>)
 8000c7c:	f00c fa00 	bl	800d080 <f_open>
 8000c80:	4603      	mov	r3, r0
 8000c82:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	    if(res != FR_OK) {
 8000c86:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d009      	beq.n	8000ca2 <displayImage+0x3e>
	    	printf("f_open() failed, res = %d, %s\r\n", res, fname);
 8000c8e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000c92:	68fa      	ldr	r2, [r7, #12]
 8000c94:	4619      	mov	r1, r3
 8000c96:	4889      	ldr	r0, [pc, #548]	; (8000ebc <displayImage+0x258>)
 8000c98:	f00d fc5c 	bl	800e554 <iprintf>
	        return -1;
 8000c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca0:	e188      	b.n	8000fb4 <displayImage+0x350>
	    }

	    printf("File opened, reading...\r\n");
 8000ca2:	4887      	ldr	r0, [pc, #540]	; (8000ec0 <displayImage+0x25c>)
 8000ca4:	f00d fcdc 	bl	800e660 <puts>

	    unsigned int bytesRead;
	    uint8_t header[34];
	    res = f_read(&fil, header, sizeof(header), &bytesRead);
 8000ca8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cac:	f107 0114 	add.w	r1, r7, #20
 8000cb0:	2222      	movs	r2, #34	; 0x22
 8000cb2:	4881      	ldr	r0, [pc, #516]	; (8000eb8 <displayImage+0x254>)
 8000cb4:	f00c fba2 	bl	800d3fc <f_read>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	    if(res != FR_OK) {
 8000cbe:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d00b      	beq.n	8000cde <displayImage+0x7a>
	    	printf("f_read() failed: %i\r\n", res);
 8000cc6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000cca:	4619      	mov	r1, r3
 8000ccc:	487d      	ldr	r0, [pc, #500]	; (8000ec4 <displayImage+0x260>)
 8000cce:	f00d fc41 	bl	800e554 <iprintf>
	        f_close(&fil);
 8000cd2:	4879      	ldr	r0, [pc, #484]	; (8000eb8 <displayImage+0x254>)
 8000cd4:	f00c fd4f 	bl	800d776 <f_close>
	        return -2;
 8000cd8:	f06f 0301 	mvn.w	r3, #1
 8000cdc:	e16a      	b.n	8000fb4 <displayImage+0x350>
	    }

	    if((header[0] != 0x42) || (header[1] != 0x4D)) {
 8000cde:	7d3b      	ldrb	r3, [r7, #20]
 8000ce0:	2b42      	cmp	r3, #66	; 0x42
 8000ce2:	d102      	bne.n	8000cea <displayImage+0x86>
 8000ce4:	7d7b      	ldrb	r3, [r7, #21]
 8000ce6:	2b4d      	cmp	r3, #77	; 0x4d
 8000ce8:	d008      	beq.n	8000cfc <displayImage+0x98>
	    	printf("Wrong BMP signature\r\n");
 8000cea:	4877      	ldr	r0, [pc, #476]	; (8000ec8 <displayImage+0x264>)
 8000cec:	f00d fcb8 	bl	800e660 <puts>
	        f_close(&fil);
 8000cf0:	4871      	ldr	r0, [pc, #452]	; (8000eb8 <displayImage+0x254>)
 8000cf2:	f00c fd40 	bl	800d776 <f_close>
	        return -3;
 8000cf6:	f06f 0302 	mvn.w	r3, #2
 8000cfa:	e15b      	b.n	8000fb4 <displayImage+0x350>
	    }

	    uint32_t imageOffset = header[10] | (header[11] << 8) | (header[12] << 16) | (header[13] << 24);
 8000cfc:	7fbb      	ldrb	r3, [r7, #30]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	7ffb      	ldrb	r3, [r7, #31]
 8000d02:	021b      	lsls	r3, r3, #8
 8000d04:	431a      	orrs	r2, r3
 8000d06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d0a:	041b      	lsls	r3, r3, #16
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000d12:	061b      	lsls	r3, r3, #24
 8000d14:	4313      	orrs	r3, r2
 8000d16:	65fb      	str	r3, [r7, #92]	; 0x5c
	    uint32_t imageWidth = header[18] | (header[19] << 8) | (header[20] << 16) | (header[21] << 24);
 8000d18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d22:	021b      	lsls	r3, r3, #8
 8000d24:	431a      	orrs	r2, r3
 8000d26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d2a:	041b      	lsls	r3, r3, #16
 8000d2c:	431a      	orrs	r2, r3
 8000d2e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000d32:	061b      	lsls	r3, r3, #24
 8000d34:	4313      	orrs	r3, r2
 8000d36:	65bb      	str	r3, [r7, #88]	; 0x58
	    uint32_t imageHeight = header[22] | (header[23] << 8) | (header[24] << 16) | (header[25] << 24);
 8000d38:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000d42:	021b      	lsls	r3, r3, #8
 8000d44:	431a      	orrs	r2, r3
 8000d46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d4a:	041b      	lsls	r3, r3, #16
 8000d4c:	431a      	orrs	r2, r3
 8000d4e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000d52:	061b      	lsls	r3, r3, #24
 8000d54:	4313      	orrs	r3, r2
 8000d56:	657b      	str	r3, [r7, #84]	; 0x54
	    uint16_t imagePlanes = header[26] | (header[27] << 8);
 8000d58:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000d5c:	b21a      	sxth	r2, r3
 8000d5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d62:	021b      	lsls	r3, r3, #8
 8000d64:	b21b      	sxth	r3, r3
 8000d66:	4313      	orrs	r3, r2
 8000d68:	b21b      	sxth	r3, r3
 8000d6a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	    uint16_t imageBitsPerPixel = header[28] | (header[29] << 8);
 8000d6e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000d72:	b21a      	sxth	r2, r3
 8000d74:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000d78:	021b      	lsls	r3, r3, #8
 8000d7a:	b21b      	sxth	r3, r3
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	b21b      	sxth	r3, r3
 8000d80:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	    uint32_t imageCompression = header[30] | (header[31] << 8) | (header[32] << 16) | (header[33] << 24);
 8000d84:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000d88:	461a      	mov	r2, r3
 8000d8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d8e:	021b      	lsls	r3, r3, #8
 8000d90:	431a      	orrs	r2, r3
 8000d92:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000d96:	041b      	lsls	r3, r3, #16
 8000d98:	431a      	orrs	r2, r3
 8000d9a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000d9e:	061b      	lsls	r3, r3, #24
 8000da0:	4313      	orrs	r3, r2
 8000da2:	64fb      	str	r3, [r7, #76]	; 0x4c

	    if((imagePlanes != 1) || (imageBitsPerPixel != 24) || (imageCompression != 0)) {
 8000da4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d106      	bne.n	8000dba <displayImage+0x156>
 8000dac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8000db0:	2b18      	cmp	r3, #24
 8000db2:	d102      	bne.n	8000dba <displayImage+0x156>
 8000db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d005      	beq.n	8000dc6 <displayImage+0x162>
	        f_close(&fil);
 8000dba:	483f      	ldr	r0, [pc, #252]	; (8000eb8 <displayImage+0x254>)
 8000dbc:	f00c fcdb 	bl	800d776 <f_close>
	        return -5;
 8000dc0:	f06f 0304 	mvn.w	r3, #4
 8000dc4:	e0f6      	b.n	8000fb4 <displayImage+0x350>
	    }

	    res = f_lseek(&fil, imageOffset);
 8000dc6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8000dc8:	483b      	ldr	r0, [pc, #236]	; (8000eb8 <displayImage+0x254>)
 8000dca:	f00c fcfe 	bl	800d7ca <f_lseek>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	    if(res != FR_OK) {
 8000dd4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d021      	beq.n	8000e20 <displayImage+0x1bc>
	    	printf("f_lseek() failed, %i", res);
 8000ddc:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000de0:	4619      	mov	r1, r3
 8000de2:	483a      	ldr	r0, [pc, #232]	; (8000ecc <displayImage+0x268>)
 8000de4:	f00d fbb6 	bl	800e554 <iprintf>
	        snprintf(buff, sizeof(buff), "f_lseek() failed, res = %d\r\n ", res);
 8000de8:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000dec:	4a38      	ldr	r2, [pc, #224]	; (8000ed0 <displayImage+0x26c>)
 8000dee:	2140      	movs	r1, #64	; 0x40
 8000df0:	4838      	ldr	r0, [pc, #224]	; (8000ed4 <displayImage+0x270>)
 8000df2:	f00d fc3d 	bl	800e670 <sniprintf>
	    	ILI9341_WriteString(0, 120, buff, Font_7x10, ILI9341_RED, ILI9341_WHITE);
 8000df6:	4b38      	ldr	r3, [pc, #224]	; (8000ed8 <displayImage+0x274>)
 8000df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dfc:	9202      	str	r2, [sp, #8]
 8000dfe:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000e02:	9201      	str	r2, [sp, #4]
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	9200      	str	r2, [sp, #0]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a32      	ldr	r2, [pc, #200]	; (8000ed4 <displayImage+0x270>)
 8000e0c:	2178      	movs	r1, #120	; 0x78
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f7ff fe48 	bl	8000aa4 <ILI9341_WriteString>
	        f_close(&fil);
 8000e14:	4828      	ldr	r0, [pc, #160]	; (8000eb8 <displayImage+0x254>)
 8000e16:	f00c fcae 	bl	800d776 <f_close>
	        return -6;
 8000e1a:	f06f 0305 	mvn.w	r3, #5
 8000e1e:	e0c9      	b.n	8000fb4 <displayImage+0x350>
	    }

	    // row size is aligned to 4 bytes
	    uint8_t imageRow[(imageWidth * 3 + 3) & ~3];
 8000e20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e22:	1c5a      	adds	r2, r3, #1
 8000e24:	4613      	mov	r3, r2
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	4413      	add	r3, r2
 8000e2a:	f023 0603 	bic.w	r6, r3, #3
 8000e2e:	4633      	mov	r3, r6
 8000e30:	3b01      	subs	r3, #1
 8000e32:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e34:	2300      	movs	r3, #0
 8000e36:	46b0      	mov	r8, r6
 8000e38:	4699      	mov	r9, r3
 8000e3a:	f04f 0200 	mov.w	r2, #0
 8000e3e:	f04f 0300 	mov.w	r3, #0
 8000e42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e4e:	2300      	movs	r3, #0
 8000e50:	4634      	mov	r4, r6
 8000e52:	461d      	mov	r5, r3
 8000e54:	f04f 0200 	mov.w	r2, #0
 8000e58:	f04f 0300 	mov.w	r3, #0
 8000e5c:	00eb      	lsls	r3, r5, #3
 8000e5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e62:	00e2      	lsls	r2, r4, #3
 8000e64:	1df3      	adds	r3, r6, #7
 8000e66:	08db      	lsrs	r3, r3, #3
 8000e68:	00db      	lsls	r3, r3, #3
 8000e6a:	ebad 0d03 	sub.w	sp, sp, r3
 8000e6e:	ab04      	add	r3, sp, #16
 8000e70:	3300      	adds	r3, #0
 8000e72:	647b      	str	r3, [r7, #68]	; 0x44
	    for(uint32_t y = starty; y < starty + imageHeight; y++) {
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	667b      	str	r3, [r7, #100]	; 0x64
 8000e78:	e081      	b.n	8000f7e <displayImage+0x31a>
	        uint32_t rowIdx = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	66bb      	str	r3, [r7, #104]	; 0x68
	        res = f_read(&fil, imageRow, sizeof(imageRow), &bytesRead);
 8000e7e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e82:	4632      	mov	r2, r6
 8000e84:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000e86:	480c      	ldr	r0, [pc, #48]	; (8000eb8 <displayImage+0x254>)
 8000e88:	f00c fab8 	bl	800d3fc <f_read>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	        if(res != FR_OK) {
 8000e92:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d00b      	beq.n	8000eb2 <displayImage+0x24e>
	        	printf("f_read() failed, %i", res);
 8000e9a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	480e      	ldr	r0, [pc, #56]	; (8000edc <displayImage+0x278>)
 8000ea2:	f00d fb57 	bl	800e554 <iprintf>
	            f_close(&fil);
 8000ea6:	4804      	ldr	r0, [pc, #16]	; (8000eb8 <displayImage+0x254>)
 8000ea8:	f00c fc65 	bl	800d776 <f_close>
	            return -7;
 8000eac:	f06f 0306 	mvn.w	r3, #6
 8000eb0:	e080      	b.n	8000fb4 <displayImage+0x350>
	        }

	        for(uint32_t x = startx; x < startx + imageWidth; x++) {
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000eb6:	e059      	b.n	8000f6c <displayImage+0x308>
 8000eb8:	2000063c 	.word	0x2000063c
 8000ebc:	0800f988 	.word	0x0800f988
 8000ec0:	0800f9a8 	.word	0x0800f9a8
 8000ec4:	0800f9c4 	.word	0x0800f9c4
 8000ec8:	0800f9dc 	.word	0x0800f9dc
 8000ecc:	0800f9f4 	.word	0x0800f9f4
 8000ed0:	0800fa0c 	.word	0x0800fa0c
 8000ed4:	200003cc 	.word	0x200003cc
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	0800fa2c 	.word	0x0800fa2c
	            uint8_t b = imageRow[rowIdx++];
 8000ee0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ee2:	1c5a      	adds	r2, r3, #1
 8000ee4:	66ba      	str	r2, [r7, #104]	; 0x68
 8000ee6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000ee8:	5cd3      	ldrb	r3, [r2, r3]
 8000eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	            uint8_t g = imageRow[rowIdx++];
 8000eee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ef0:	1c5a      	adds	r2, r3, #1
 8000ef2:	66ba      	str	r2, [r7, #104]	; 0x68
 8000ef4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000ef6:	5cd3      	ldrb	r3, [r2, r3]
 8000ef8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	            uint8_t r = imageRow[rowIdx++];
 8000efc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000efe:	1c5a      	adds	r2, r3, #1
 8000f00:	66ba      	str	r2, [r7, #104]	; 0x68
 8000f02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000f04:	5cd3      	ldrb	r3, [r2, r3]
 8000f06:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	            uint16_t color565 = ILI9341_COLOR565(r, g, b);
 8000f0a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8000f0e:	021b      	lsls	r3, r3, #8
 8000f10:	b21b      	sxth	r3, r3
 8000f12:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000f16:	f023 0307 	bic.w	r3, r3, #7
 8000f1a:	b21a      	sxth	r2, r3
 8000f1c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	b21b      	sxth	r3, r3
 8000f24:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000f28:	b21b      	sxth	r3, r3
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	b21a      	sxth	r2, r3
 8000f2e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000f32:	08db      	lsrs	r3, r3, #3
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	b21b      	sxth	r3, r3
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	87fb      	strh	r3, [r7, #62]	; 0x3e
	            ILI9341_DrawPixel(x, (2*starty) + imageHeight - y - 1, color565);
 8000f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f40:	b298      	uxth	r0, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	4413      	add	r3, r2
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8000f60:	4619      	mov	r1, r3
 8000f62:	f7ff fcf9 	bl	8000958 <ILI9341_DrawPixel>
	        for(uint32_t x = startx; x < startx + imageWidth; x++) {
 8000f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f68:	3301      	adds	r3, #1
 8000f6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f6c:	68ba      	ldr	r2, [r7, #8]
 8000f6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f70:	4413      	add	r3, r2
 8000f72:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d3b3      	bcc.n	8000ee0 <displayImage+0x27c>
	    for(uint32_t y = starty; y < starty + imageHeight; y++) {
 8000f78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	667b      	str	r3, [r7, #100]	; 0x64
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f82:	4413      	add	r3, r2
 8000f84:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000f86:	429a      	cmp	r2, r3
 8000f88:	f4ff af77 	bcc.w	8000e7a <displayImage+0x216>
	        }
	    }

	    res = f_close(&fil);
 8000f8c:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <displayImage+0x35c>)
 8000f8e:	f00c fbf2 	bl	800d776 <f_close>
 8000f92:	4603      	mov	r3, r0
 8000f94:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	    if(res != FR_OK) {
 8000f98:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d008      	beq.n	8000fb2 <displayImage+0x34e>
	    	printf("f_close() failed %i", res);
 8000fa0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4807      	ldr	r0, [pc, #28]	; (8000fc4 <displayImage+0x360>)
 8000fa8:	f00d fad4 	bl	800e554 <iprintf>
	        return -8;
 8000fac:	f06f 0307 	mvn.w	r3, #7
 8000fb0:	e000      	b.n	8000fb4 <displayImage+0x350>
	    }

	    return 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	46d5      	mov	sp, sl
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3770      	adds	r7, #112	; 0x70
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc0:	2000063c 	.word	0x2000063c
 8000fc4:	0800fa40 	.word	0x0800fa40

08000fc8 <BQ27441_i2cWriteBytes>:


// Battery monitor related
HAL_StatusTypeDef BQ27441_i2cWriteBytes(uint16_t memAddress, uint8_t *pData, uint16_t Size) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af04      	add	r7, sp, #16
 8000fce:	4603      	mov	r3, r0
 8000fd0:	6039      	str	r1, [r7, #0]
 8000fd2:	80fb      	strh	r3, [r7, #6]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Mem_Write(&hi2c3, BQ27441_I2C_ADDRESS << 1, memAddress, I2C_MEMADD_SIZE_8BIT, pData, Size, HAL_MAX_DELAY);
 8000fd8:	88fa      	ldrh	r2, [r7, #6]
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	9302      	str	r3, [sp, #8]
 8000fe0:	88bb      	ldrh	r3, [r7, #4]
 8000fe2:	9301      	str	r3, [sp, #4]
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2301      	movs	r3, #1
 8000fea:	21aa      	movs	r1, #170	; 0xaa
 8000fec:	4803      	ldr	r0, [pc, #12]	; (8000ffc <BQ27441_i2cWriteBytes+0x34>)
 8000fee:	f002 f977 	bl	80032e0 <HAL_I2C_Mem_Write>
 8000ff2:	4603      	mov	r3, r0
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	200001ac 	.word	0x200001ac

08001000 <BQ27441_i2cReadBytes>:

HAL_StatusTypeDef BQ27441_i2cReadBytes(uint16_t memAddress, uint8_t *pData, uint16_t Size) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af04      	add	r7, sp, #16
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	80fb      	strh	r3, [r7, #6]
 800100c:	4613      	mov	r3, r2
 800100e:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Mem_Read(&hi2c3, BQ27441_I2C_ADDRESS << 1, memAddress, I2C_MEMADD_SIZE_8BIT, pData, Size, HAL_MAX_DELAY);
 8001010:	88fa      	ldrh	r2, [r7, #6]
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
 8001016:	9302      	str	r3, [sp, #8]
 8001018:	88bb      	ldrh	r3, [r7, #4]
 800101a:	9301      	str	r3, [sp, #4]
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2301      	movs	r3, #1
 8001022:	21aa      	movs	r1, #170	; 0xaa
 8001024:	4803      	ldr	r0, [pc, #12]	; (8001034 <BQ27441_i2cReadBytes+0x34>)
 8001026:	f002 fa55 	bl	80034d4 <HAL_I2C_Mem_Read>
 800102a:	4603      	mov	r3, r0
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200001ac 	.word	0x200001ac

08001038 <BQ27441_readWord>:

uint16_t BQ27441_readWord(uint16_t subAddress) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    BQ27441_i2cReadBytes(subAddress, data, 2);
 8001042:	f107 010c 	add.w	r1, r7, #12
 8001046:	88fb      	ldrh	r3, [r7, #6]
 8001048:	2202      	movs	r2, #2
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff ffd8 	bl	8001000 <BQ27441_i2cReadBytes>
    return ((uint16_t) data[1] << 8) | data[0];
 8001050:	7b7b      	ldrb	r3, [r7, #13]
 8001052:	021b      	lsls	r3, r3, #8
 8001054:	b21a      	sxth	r2, r3
 8001056:	7b3b      	ldrb	r3, [r7, #12]
 8001058:	b21b      	sxth	r3, r3
 800105a:	4313      	orrs	r3, r2
 800105c:	b21b      	sxth	r3, r3
 800105e:	b29b      	uxth	r3, r3
}
 8001060:	4618      	mov	r0, r3
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <BQ27441_soc>:

uint16_t BQ27441_soc(soc_measure type) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
    //type = FILTERED;
    uint16_t socRet = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	81fb      	strh	r3, [r7, #14]
    switch (type) {
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d002      	beq.n	8001082 <BQ27441_soc+0x1a>
 800107c:	2b01      	cmp	r3, #1
 800107e:	d006      	beq.n	800108e <BQ27441_soc+0x26>
 8001080:	e00b      	b.n	800109a <BQ27441_soc+0x32>
        case FILTERED:
            socRet = BQ27441_readWord(BQ27441_COMMAND_SOC);
 8001082:	201c      	movs	r0, #28
 8001084:	f7ff ffd8 	bl	8001038 <BQ27441_readWord>
 8001088:	4603      	mov	r3, r0
 800108a:	81fb      	strh	r3, [r7, #14]
            break;
 800108c:	e005      	b.n	800109a <BQ27441_soc+0x32>
        case UNFILTERED:
            socRet = BQ27441_readWord(BQ27441_COMMAND_SOC_UNFL);
 800108e:	2030      	movs	r0, #48	; 0x30
 8001090:	f7ff ffd2 	bl	8001038 <BQ27441_readWord>
 8001094:	4603      	mov	r3, r0
 8001096:	81fb      	strh	r3, [r7, #14]
            break;
 8001098:	bf00      	nop
    }
    return socRet;
 800109a:	89fb      	ldrh	r3, [r7, #14]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <BQ27441_deviceType>:

int16_t BQ27441_power(void) {
    return (int16_t) BQ27441_readWord(BQ27441_COMMAND_AVG_POWER);
}

uint16_t BQ27441_deviceType(void) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
	// command sent to slave to tell it master wants to know devicetype
	// 0xFF to get right 8 bits of BQ27441_CONTROL_DEVICE_TYPE
	// >>8 to get left 8 bits, discarding right 8 bits of BQ27441_CONTROL_DEVICE_TYPE
    uint8_t command[2] = {BQ27441_CONTROL_DEVICE_TYPE & 0xFF, BQ27441_CONTROL_DEVICE_TYPE >> 8};
 80010aa:	2301      	movs	r3, #1
 80010ac:	80bb      	strh	r3, [r7, #4]
    uint8_t data[2];
    uint16_t deviceType = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	80fb      	strh	r3, [r7, #6]

    BQ27441_i2cWriteBytes(BQ27441_COMMAND_CONTROL, command, sizeof(command)); //write command to slave
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	2202      	movs	r2, #2
 80010b6:	4619      	mov	r1, r3
 80010b8:	2000      	movs	r0, #0
 80010ba:	f7ff ff85 	bl	8000fc8 <BQ27441_i2cWriteBytes>

    HAL_Delay(10); //delay to ensure device is ready
 80010be:	200a      	movs	r0, #10
 80010c0:	f001 fa86 	bl	80025d0 <HAL_Delay>

    if (BQ27441_i2cReadBytes(BQ27441_COMMAND_CONTROL, data, sizeof(data)) == HAL_OK) { //read device type from control register
 80010c4:	463b      	mov	r3, r7
 80010c6:	2202      	movs	r2, #2
 80010c8:	4619      	mov	r1, r3
 80010ca:	2000      	movs	r0, #0
 80010cc:	f7ff ff98 	bl	8001000 <BQ27441_i2cReadBytes>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d107      	bne.n	80010e6 <BQ27441_deviceType+0x42>
        deviceType = (data[1] << 8) | data[0];
 80010d6:	787b      	ldrb	r3, [r7, #1]
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	b21a      	sxth	r2, r3
 80010dc:	783b      	ldrb	r3, [r7, #0]
 80010de:	b21b      	sxth	r3, r3
 80010e0:	4313      	orrs	r3, r2
 80010e2:	b21b      	sxth	r3, r3
 80010e4:	80fb      	strh	r3, [r7, #6]
    }
    return deviceType;
 80010e6:	88fb      	ldrh	r3, [r7, #6]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <BQ27441_init>:

bool BQ27441_init(BQ27441_ctx_t *dev) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
    if (dev == NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <BQ27441_init+0x12>
        return false;
 80010fe:	2300      	movs	r3, #0
 8001100:	e00a      	b.n	8001118 <BQ27441_init+0x28>

    if (BQ27441_deviceType() == BQ27441_DEVICE_ID) {
 8001102:	f7ff ffcf 	bl	80010a4 <BQ27441_deviceType>
 8001106:	4603      	mov	r3, r0
 8001108:	461a      	mov	r2, r3
 800110a:	f240 4321 	movw	r3, #1057	; 0x421
 800110e:	429a      	cmp	r2, r3
 8001110:	d101      	bne.n	8001116 <BQ27441_init+0x26>
        return true;
 8001112:	2301      	movs	r3, #1
 8001114:	e000      	b.n	8001118 <BQ27441_init+0x28>
    } else
        return false;
 8001116:	2300      	movs	r3, #0
}
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <Bat_init>:
	else {
		bat_charging = 1;
	}
}

void Bat_init(BQ27441_ctx_t * dev) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	BQ27441_init(dev);
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff ffe1 	bl	80010f0 <BQ27441_init>
	charge = BQ27441_soc(FILTERED);
 800112e:	2000      	movs	r0, #0
 8001130:	f7ff ff9a 	bl	8001068 <BQ27441_soc>
 8001134:	4603      	mov	r3, r0
 8001136:	b21a      	sxth	r2, r3
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <Bat_init+0x4c>)
 800113a:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(BAT_CE_GPIO_Port, BAT_CE_Pin, GPIO_PIN_SET);
 800113c:	2201      	movs	r2, #1
 800113e:	2180      	movs	r1, #128	; 0x80
 8001140:	480b      	ldr	r0, [pc, #44]	; (8001170 <Bat_init+0x50>)
 8001142:	f001 fd31 	bl	8002ba8 <HAL_GPIO_WritePin>
	if (bat_charging && charge < 99) {
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <Bat_init+0x54>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d009      	beq.n	8001162 <Bat_init+0x42>
 800114e:	4b07      	ldr	r3, [pc, #28]	; (800116c <Bat_init+0x4c>)
 8001150:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001154:	2b62      	cmp	r3, #98	; 0x62
 8001156:	dc04      	bgt.n	8001162 <Bat_init+0x42>
		HAL_GPIO_WritePin(BAT_CE_GPIO_Port, BAT_CE_Pin, GPIO_PIN_RESET);
 8001158:	2200      	movs	r2, #0
 800115a:	2180      	movs	r1, #128	; 0x80
 800115c:	4804      	ldr	r0, [pc, #16]	; (8001170 <Bat_init+0x50>)
 800115e:	f001 fd23 	bl	8002ba8 <HAL_GPIO_WritePin>
	}
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000874 	.word	0x20000874
 8001170:	40020800 	.word	0x40020800
 8001174:	20000870 	.word	0x20000870

08001178 <updateBat>:

void updateBat(void) {
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	charge = BQ27441_soc(FILTERED);
 800117c:	2000      	movs	r0, #0
 800117e:	f7ff ff73 	bl	8001068 <BQ27441_soc>
 8001182:	4603      	mov	r3, r0
 8001184:	b21a      	sxth	r2, r3
 8001186:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <updateBat+0x4c>)
 8001188:	801a      	strh	r2, [r3, #0]
	printf("lcd charge: %d\r\n", charge);
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <updateBat+0x4c>)
 800118c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001190:	4619      	mov	r1, r3
 8001192:	480d      	ldr	r0, [pc, #52]	; (80011c8 <updateBat+0x50>)
 8001194:	f00d f9de 	bl	800e554 <iprintf>
	if (bat_charging){
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <updateBat+0x54>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d00f      	beq.n	80011c0 <updateBat+0x48>
		if (charge >= 99) {
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <updateBat+0x4c>)
 80011a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a6:	2b62      	cmp	r3, #98	; 0x62
 80011a8:	dd05      	ble.n	80011b6 <updateBat+0x3e>
			HAL_GPIO_WritePin(BAT_CE_GPIO_Port, BAT_CE_Pin, GPIO_PIN_SET);
 80011aa:	2201      	movs	r2, #1
 80011ac:	2180      	movs	r1, #128	; 0x80
 80011ae:	4808      	ldr	r0, [pc, #32]	; (80011d0 <updateBat+0x58>)
 80011b0:	f001 fcfa 	bl	8002ba8 <HAL_GPIO_WritePin>
		else {
			HAL_GPIO_WritePin(BAT_CE_GPIO_Port, BAT_CE_Pin, GPIO_PIN_RESET);
		}
	}

}
 80011b4:	e004      	b.n	80011c0 <updateBat+0x48>
			HAL_GPIO_WritePin(BAT_CE_GPIO_Port, BAT_CE_Pin, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2180      	movs	r1, #128	; 0x80
 80011ba:	4805      	ldr	r0, [pc, #20]	; (80011d0 <updateBat+0x58>)
 80011bc:	f001 fcf4 	bl	8002ba8 <HAL_GPIO_WritePin>
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000874 	.word	0x20000874
 80011c8:	0800fa60 	.word	0x0800fa60
 80011cc:	20000870 	.word	0x20000870
 80011d0:	40020800 	.word	0x40020800

080011d4 <startup_init>:

void startup_init(void) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	ILI9341_FillScreen(ILI9341_BLACK);
 80011d8:	2000      	movs	r0, #0
 80011da:	f7ff fd1f 	bl	8000c1c <ILI9341_FillScreen>
	displayImage(LOGO, LOGO_X, LOGO_Y);
 80011de:	2237      	movs	r2, #55	; 0x37
 80011e0:	210f      	movs	r1, #15
 80011e2:	482b      	ldr	r0, [pc, #172]	; (8001290 <startup_init+0xbc>)
 80011e4:	f7ff fd3e 	bl	8000c64 <displayImage>
	// Check USB connection
	if (HAL_GPIO_ReadPin(USB_Detect_GPIO_Port, USB_Detect_Pin) == GPIO_PIN_SET) {
 80011e8:	2120      	movs	r1, #32
 80011ea:	482a      	ldr	r0, [pc, #168]	; (8001294 <startup_init+0xc0>)
 80011ec:	f001 fcc4 	bl	8002b78 <HAL_GPIO_ReadPin>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d117      	bne.n	8001226 <startup_init+0x52>
		// If USB, get battery percentage and status
		bat_charging = 1;
 80011f6:	4b28      	ldr	r3, [pc, #160]	; (8001298 <startup_init+0xc4>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	601a      	str	r2, [r3, #0]
		updateBat();
 80011fc:	f7ff ffbc 	bl	8001178 <updateBat>

		// show USB symbol, battery percentage
		printf("Connection status: USB\r\n");
 8001200:	4826      	ldr	r0, [pc, #152]	; (800129c <startup_init+0xc8>)
 8001202:	f00d fa2d 	bl	800e660 <puts>
		displayImage(USB, STATUS_X, STATUS_Y);
 8001206:	226e      	movs	r2, #110	; 0x6e
 8001208:	21d7      	movs	r1, #215	; 0xd7
 800120a:	4825      	ldr	r0, [pc, #148]	; (80012a0 <startup_init+0xcc>)
 800120c:	f7ff fd2a 	bl	8000c64 <displayImage>
		dispBat();
 8001210:	f000 f858 	bl	80012c4 <dispBat>

		// Enable USB timer interrupt
		bluetooth_mode = false;
 8001214:	4b23      	ldr	r3, [pc, #140]	; (80012a4 <startup_init+0xd0>)
 8001216:	2200      	movs	r2, #0
 8001218:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(BT_EN_GPIO_Port, BT_EN_Pin, GPIO_PIN_RESET);
 800121a:	2200      	movs	r2, #0
 800121c:	2140      	movs	r1, #64	; 0x40
 800121e:	4822      	ldr	r0, [pc, #136]	; (80012a8 <startup_init+0xd4>)
 8001220:	f001 fcc2 	bl	8002ba8 <HAL_GPIO_WritePin>
 8001224:	e016      	b.n	8001254 <startup_init+0x80>
	}
	else {
		// If not USB get battery percentage and status
		bat_charging = 0;
 8001226:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <startup_init+0xc4>)
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
		updateBat();
 800122c:	f7ff ffa4 	bl	8001178 <updateBat>

		// show bluetooth symbol, battery percentage
		printf("Connection status: Bluetooth\r\n");
 8001230:	481e      	ldr	r0, [pc, #120]	; (80012ac <startup_init+0xd8>)
 8001232:	f00d fa15 	bl	800e660 <puts>
		displayImage(BLUETOOTH, STATUS_X, STATUS_Y);
 8001236:	226e      	movs	r2, #110	; 0x6e
 8001238:	21d7      	movs	r1, #215	; 0xd7
 800123a:	481d      	ldr	r0, [pc, #116]	; (80012b0 <startup_init+0xdc>)
 800123c:	f7ff fd12 	bl	8000c64 <displayImage>
		dispBat();
 8001240:	f000 f840 	bl	80012c4 <dispBat>

		// Enable Bluetooth
		bluetooth_mode = true;
 8001244:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <startup_init+0xd0>)
 8001246:	2201      	movs	r2, #1
 8001248:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(BT_EN_GPIO_Port, BT_EN_Pin, GPIO_PIN_SET);
 800124a:	2201      	movs	r2, #1
 800124c:	2140      	movs	r1, #64	; 0x40
 800124e:	4816      	ldr	r0, [pc, #88]	; (80012a8 <startup_init+0xd4>)
 8001250:	f001 fcaa 	bl	8002ba8 <HAL_GPIO_WritePin>
	}
	if (HAL_GPIO_ReadPin(Button18_GPIO_Port, Button18_Pin) == GPIO_PIN_SET) {
 8001254:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001258:	4816      	ldr	r0, [pc, #88]	; (80012b4 <startup_init+0xe0>)
 800125a:	f001 fc8d 	bl	8002b78 <HAL_GPIO_ReadPin>
 800125e:	4603      	mov	r3, r0
 8001260:	2b01      	cmp	r3, #1
 8001262:	d109      	bne.n	8001278 <startup_init+0xa4>
		neutral_SOCD_mode = true;
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <startup_init+0xe4>)
 8001266:	2201      	movs	r2, #1
 8001268:	701a      	strb	r2, [r3, #0]
	 	displayImage(NEUTRAL_SOCD, SOCD_X, SOCD_Y);
 800126a:	22c8      	movs	r2, #200	; 0xc8
 800126c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001270:	4812      	ldr	r0, [pc, #72]	; (80012bc <startup_init+0xe8>)
 8001272:	f7ff fcf7 	bl	8000c64 <displayImage>
	}
	else {
		neutral_SOCD_mode = false;
		displayImage(UP_SOCD, SOCD_X, SOCD_Y);
	}
}
 8001276:	e008      	b.n	800128a <startup_init+0xb6>
		neutral_SOCD_mode = false;
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <startup_init+0xe4>)
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
		displayImage(UP_SOCD, SOCD_X, SOCD_Y);
 800127e:	22c8      	movs	r2, #200	; 0xc8
 8001280:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001284:	480e      	ldr	r0, [pc, #56]	; (80012c0 <startup_init+0xec>)
 8001286:	f7ff fced 	bl	8000c64 <displayImage>
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	0800fa74 	.word	0x0800fa74
 8001294:	40020800 	.word	0x40020800
 8001298:	20000870 	.word	0x20000870
 800129c:	0800fa80 	.word	0x0800fa80
 80012a0:	0800fa98 	.word	0x0800fa98
 80012a4:	200003c8 	.word	0x200003c8
 80012a8:	40020000 	.word	0x40020000
 80012ac:	0800faa0 	.word	0x0800faa0
 80012b0:	0800fac0 	.word	0x0800fac0
 80012b4:	40020400 	.word	0x40020400
 80012b8:	200003c9 	.word	0x200003c9
 80012bc:	0800facc 	.word	0x0800facc
 80012c0:	0800fad8 	.word	0x0800fad8

080012c4 <dispBat>:

void dispBat(void) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af04      	add	r7, sp, #16
	snprintf(buff, sizeof(buff), "%d", charge);
 80012ca:	4b27      	ldr	r3, [pc, #156]	; (8001368 <dispBat+0xa4>)
 80012cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d0:	4a26      	ldr	r2, [pc, #152]	; (800136c <dispBat+0xa8>)
 80012d2:	2140      	movs	r1, #64	; 0x40
 80012d4:	4826      	ldr	r0, [pc, #152]	; (8001370 <dispBat+0xac>)
 80012d6:	f00d f9cb 	bl	800e670 <sniprintf>
	if (bat_charging){
 80012da:	4b26      	ldr	r3, [pc, #152]	; (8001374 <dispBat+0xb0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d013      	beq.n	800130a <dispBat+0x46>
		displayImage(BATTERY_CHARGE, BATTERY_X, BATTERY_Y);
 80012e2:	2228      	movs	r2, #40	; 0x28
 80012e4:	21d2      	movs	r1, #210	; 0xd2
 80012e6:	4824      	ldr	r0, [pc, #144]	; (8001378 <dispBat+0xb4>)
 80012e8:	f7ff fcbc 	bl	8000c64 <displayImage>
		ILI9341_WriteString(PERCENT_X, PERCENT_Y, buff, Font_16x26, ILI9341_GREEN, ILI9341_BLACK);
 80012ec:	4b23      	ldr	r3, [pc, #140]	; (800137c <dispBat+0xb8>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	9202      	str	r2, [sp, #8]
 80012f2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80012f6:	9201      	str	r2, [sp, #4]
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	9200      	str	r2, [sp, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a1c      	ldr	r2, [pc, #112]	; (8001370 <dispBat+0xac>)
 8001300:	212f      	movs	r1, #47	; 0x2f
 8001302:	20e1      	movs	r0, #225	; 0xe1
 8001304:	f7ff fbce 	bl	8000aa4 <ILI9341_WriteString>
		else {
			displayImage(BATTERY_LOW, BATTERY_X, BATTERY_Y);
			ILI9341_WriteString(PERCENT_X, PERCENT_Y, buff, Font_16x26, ILI9341_RED, ILI9341_BLACK);
		}
	}
}
 8001308:	e02b      	b.n	8001362 <dispBat+0x9e>
		if (charge >= 25) {
 800130a:	4b17      	ldr	r3, [pc, #92]	; (8001368 <dispBat+0xa4>)
 800130c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001310:	2b18      	cmp	r3, #24
 8001312:	dd13      	ble.n	800133c <dispBat+0x78>
			displayImage(BATTERY_NORM, BATTERY_X, BATTERY_Y);
 8001314:	2228      	movs	r2, #40	; 0x28
 8001316:	21d2      	movs	r1, #210	; 0xd2
 8001318:	4819      	ldr	r0, [pc, #100]	; (8001380 <dispBat+0xbc>)
 800131a:	f7ff fca3 	bl	8000c64 <displayImage>
			ILI9341_WriteString(PERCENT_X, PERCENT_Y, buff, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 800131e:	4b17      	ldr	r3, [pc, #92]	; (800137c <dispBat+0xb8>)
 8001320:	2200      	movs	r2, #0
 8001322:	9202      	str	r2, [sp, #8]
 8001324:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001328:	9201      	str	r2, [sp, #4]
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	9200      	str	r2, [sp, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a0f      	ldr	r2, [pc, #60]	; (8001370 <dispBat+0xac>)
 8001332:	212f      	movs	r1, #47	; 0x2f
 8001334:	20e1      	movs	r0, #225	; 0xe1
 8001336:	f7ff fbb5 	bl	8000aa4 <ILI9341_WriteString>
}
 800133a:	e012      	b.n	8001362 <dispBat+0x9e>
			displayImage(BATTERY_LOW, BATTERY_X, BATTERY_Y);
 800133c:	2228      	movs	r2, #40	; 0x28
 800133e:	21d2      	movs	r1, #210	; 0xd2
 8001340:	4810      	ldr	r0, [pc, #64]	; (8001384 <dispBat+0xc0>)
 8001342:	f7ff fc8f 	bl	8000c64 <displayImage>
			ILI9341_WriteString(PERCENT_X, PERCENT_Y, buff, Font_16x26, ILI9341_RED, ILI9341_BLACK);
 8001346:	4b0d      	ldr	r3, [pc, #52]	; (800137c <dispBat+0xb8>)
 8001348:	2200      	movs	r2, #0
 800134a:	9202      	str	r2, [sp, #8]
 800134c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001350:	9201      	str	r2, [sp, #4]
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	9200      	str	r2, [sp, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a05      	ldr	r2, [pc, #20]	; (8001370 <dispBat+0xac>)
 800135a:	212f      	movs	r1, #47	; 0x2f
 800135c:	20e1      	movs	r0, #225	; 0xe1
 800135e:	f7ff fba1 	bl	8000aa4 <ILI9341_WriteString>
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000874 	.word	0x20000874
 800136c:	0800fae0 	.word	0x0800fae0
 8001370:	200003cc 	.word	0x200003cc
 8001374:	20000870 	.word	0x20000870
 8001378:	0800fae4 	.word	0x0800fae4
 800137c:	20000008 	.word	0x20000008
 8001380:	0800faf0 	.word	0x0800faf0
 8001384:	0800fafc 	.word	0x0800fafc

08001388 <drive_column>:
void buttons_init(void) {
	  GPIOB->BSRR = 0xf << 16;
	  GPIOB->BSRR = 0x1;
}

void drive_column(void) {
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
	col = (col + 1) & 0x3;
 800138c:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <drive_column+0x30>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	3301      	adds	r3, #1
 8001392:	f003 0303 	and.w	r3, r3, #3
 8001396:	4a08      	ldr	r2, [pc, #32]	; (80013b8 <drive_column+0x30>)
 8001398:	6013      	str	r3, [r2, #0]
	GPIOB->BSRR = 0xf << 16;
 800139a:	4b08      	ldr	r3, [pc, #32]	; (80013bc <drive_column+0x34>)
 800139c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 80013a0:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR = 0x1 << (col);
 80013a2:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <drive_column+0x30>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2201      	movs	r2, #1
 80013a8:	409a      	lsls	r2, r3
 80013aa:	4b04      	ldr	r3, [pc, #16]	; (80013bc <drive_column+0x34>)
 80013ac:	619a      	str	r2, [r3, #24]
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	20000878 	.word	0x20000878
 80013bc:	40020400 	.word	0x40020400

080013c0 <read_rows>:

uint8_t read_rows(void) {
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
	return ((GPIOB->IDR & 0xf0) >> 4) & 0xf;
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <read_rows+0x1c>)
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	091b      	lsrs	r3, r3, #4
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	f003 030f 	and.w	r3, r3, #15
 80013d0:	b2db      	uxtb	r3, r3
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	40020400 	.word	0x40020400

080013e0 <clean_buffer>:

void clean_buffer(void) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
	if (((buffer[2] & 0x3) == 0x3) && ((buffer[1] & 0x08) == 0x08)) {
 80013e4:	4b28      	ldr	r3, [pc, #160]	; (8001488 <clean_buffer+0xa8>)
 80013e6:	789b      	ldrb	r3, [r3, #2]
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	2b03      	cmp	r3, #3
 80013ee:	d107      	bne.n	8001400 <clean_buffer+0x20>
 80013f0:	4b25      	ldr	r3, [pc, #148]	; (8001488 <clean_buffer+0xa8>)
 80013f2:	785b      	ldrb	r3, [r3, #1]
 80013f4:	f003 0308 	and.w	r3, r3, #8
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <clean_buffer+0x20>
		HAL_NVIC_SystemReset();
 80013fc:	f001 fa27 	bl	800284e <HAL_NVIC_SystemReset>
	}
	cleaned_buffer[0] = buffer[0];
 8001400:	4b21      	ldr	r3, [pc, #132]	; (8001488 <clean_buffer+0xa8>)
 8001402:	781a      	ldrb	r2, [r3, #0]
 8001404:	4b21      	ldr	r3, [pc, #132]	; (800148c <clean_buffer+0xac>)
 8001406:	701a      	strb	r2, [r3, #0]
	cleaned_buffer[1] = buffer[1];
 8001408:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <clean_buffer+0xa8>)
 800140a:	785a      	ldrb	r2, [r3, #1]
 800140c:	4b1f      	ldr	r3, [pc, #124]	; (800148c <clean_buffer+0xac>)
 800140e:	705a      	strb	r2, [r3, #1]
	cleaned_buffer[2] = buffer[2] & 0x01;
 8001410:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <clean_buffer+0xa8>)
 8001412:	789b      	ldrb	r3, [r3, #2]
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	b2da      	uxtb	r2, r3
 800141a:	4b1c      	ldr	r3, [pc, #112]	; (800148c <clean_buffer+0xac>)
 800141c:	709a      	strb	r2, [r3, #2]
	if (cleaned_buffer[0] & 0x01 && cleaned_buffer[0] & 0x04) {
 800141e:	4b1b      	ldr	r3, [pc, #108]	; (800148c <clean_buffer+0xac>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	2b00      	cmp	r3, #0
 8001428:	d018      	beq.n	800145c <clean_buffer+0x7c>
 800142a:	4b18      	ldr	r3, [pc, #96]	; (800148c <clean_buffer+0xac>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	f003 0304 	and.w	r3, r3, #4
 8001432:	2b00      	cmp	r3, #0
 8001434:	d012      	beq.n	800145c <clean_buffer+0x7c>
		if (neutral_SOCD_mode) {
 8001436:	4b16      	ldr	r3, [pc, #88]	; (8001490 <clean_buffer+0xb0>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d007      	beq.n	800144e <clean_buffer+0x6e>
			cleaned_buffer[0] &= ~0x05;
 800143e:	4b13      	ldr	r3, [pc, #76]	; (800148c <clean_buffer+0xac>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	f023 0305 	bic.w	r3, r3, #5
 8001446:	b2da      	uxtb	r2, r3
 8001448:	4b10      	ldr	r3, [pc, #64]	; (800148c <clean_buffer+0xac>)
 800144a:	701a      	strb	r2, [r3, #0]
 800144c:	e006      	b.n	800145c <clean_buffer+0x7c>
		}
		else {
			cleaned_buffer[0] &= ~0x04;
 800144e:	4b0f      	ldr	r3, [pc, #60]	; (800148c <clean_buffer+0xac>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	f023 0304 	bic.w	r3, r3, #4
 8001456:	b2da      	uxtb	r2, r3
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <clean_buffer+0xac>)
 800145a:	701a      	strb	r2, [r3, #0]
		}
	}
	if (cleaned_buffer[0] & 0x02 && cleaned_buffer[0] & 0x08) {
 800145c:	4b0b      	ldr	r3, [pc, #44]	; (800148c <clean_buffer+0xac>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d00c      	beq.n	8001482 <clean_buffer+0xa2>
 8001468:	4b08      	ldr	r3, [pc, #32]	; (800148c <clean_buffer+0xac>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	f003 0308 	and.w	r3, r3, #8
 8001470:	2b00      	cmp	r3, #0
 8001472:	d006      	beq.n	8001482 <clean_buffer+0xa2>
		cleaned_buffer[0] &= ~0x0A;
 8001474:	4b05      	ldr	r3, [pc, #20]	; (800148c <clean_buffer+0xac>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	f023 030a 	bic.w	r3, r3, #10
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4b03      	ldr	r3, [pc, #12]	; (800148c <clean_buffer+0xac>)
 8001480:	701a      	strb	r2, [r3, #0]
	}
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	2000087c 	.word	0x2000087c
 800148c:	20000880 	.word	0x20000880
 8001490:	200003c9 	.word	0x200003c9

08001494 <right_stick_emulate>:

void right_stick_emulate(void) {
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
	if (buffer[2] & 0x02) {
 8001498:	4b10      	ldr	r3, [pc, #64]	; (80014dc <right_stick_emulate+0x48>)
 800149a:	789b      	ldrb	r3, [r3, #2]
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d015      	beq.n	80014d0 <right_stick_emulate+0x3c>
		cleaned_buffer[2] |= ((cleaned_buffer[0] & 0x0f) << 1);
 80014a4:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <right_stick_emulate+0x4c>)
 80014a6:	789b      	ldrb	r3, [r3, #2]
 80014a8:	b25a      	sxtb	r2, r3
 80014aa:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <right_stick_emulate+0x4c>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	b25b      	sxtb	r3, r3
 80014b2:	f003 031e 	and.w	r3, r3, #30
 80014b6:	b25b      	sxtb	r3, r3
 80014b8:	4313      	orrs	r3, r2
 80014ba:	b25b      	sxtb	r3, r3
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <right_stick_emulate+0x4c>)
 80014c0:	709a      	strb	r2, [r3, #2]
		cleaned_buffer[0] &= ~0x0f;
 80014c2:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <right_stick_emulate+0x4c>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	f023 030f 	bic.w	r3, r3, #15
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <right_stick_emulate+0x4c>)
 80014ce:	701a      	strb	r2, [r3, #0]
	}
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	2000087c 	.word	0x2000087c
 80014e0:	20000880 	.word	0x20000880

080014e4 <clean_buffer_bt>:

void clean_buffer_bt(void) {
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
	bluetooth_buffer[1] = cleaned_buffer[0];
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <clean_buffer_bt+0x28>)
 80014ea:	781a      	ldrb	r2, [r3, #0]
 80014ec:	4b08      	ldr	r3, [pc, #32]	; (8001510 <clean_buffer_bt+0x2c>)
 80014ee:	705a      	strb	r2, [r3, #1]
	bluetooth_buffer[2] = cleaned_buffer[1];
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <clean_buffer_bt+0x28>)
 80014f2:	785a      	ldrb	r2, [r3, #1]
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <clean_buffer_bt+0x2c>)
 80014f6:	709a      	strb	r2, [r3, #2]
	bluetooth_buffer[3] = cleaned_buffer[2];
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <clean_buffer_bt+0x28>)
 80014fa:	789a      	ldrb	r2, [r3, #2]
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <clean_buffer_bt+0x2c>)
 80014fe:	70da      	strb	r2, [r3, #3]
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	20000880 	.word	0x20000880
 8001510:	2000001c 	.word	0x2000001c

08001514 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001514:	b590      	push	{r4, r7, lr}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a3a      	ldr	r2, [pc, #232]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d152      	bne.n	80015ca <HAL_TIM_PeriodElapsedCallback+0xb6>
		uint8_t rows = read_rows();
 8001524:	f7ff ff4c 	bl	80013c0 <read_rows>
 8001528:	4603      	mov	r3, r0
 800152a:	73fb      	strb	r3, [r7, #15]
		int idx = col / 2;
 800152c:	4b37      	ldr	r3, [pc, #220]	; (800160c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	0fda      	lsrs	r2, r3, #31
 8001532:	4413      	add	r3, r2
 8001534:	105b      	asrs	r3, r3, #1
 8001536:	60bb      	str	r3, [r7, #8]
		buffer[idx] &= ~(0xf << ((col % 2) * 4));
 8001538:	4b34      	ldr	r3, [pc, #208]	; (800160c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	bfb8      	it	lt
 8001544:	425b      	neglt	r3, r3
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	220f      	movs	r2, #15
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43d9      	mvns	r1, r3
 8001550:	4a2f      	ldr	r2, [pc, #188]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	4413      	add	r3, r2
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	b25a      	sxtb	r2, r3
 800155a:	b24b      	sxtb	r3, r1
 800155c:	4013      	ands	r3, r2
 800155e:	b25b      	sxtb	r3, r3
 8001560:	b2d9      	uxtb	r1, r3
 8001562:	4a2b      	ldr	r2, [pc, #172]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	4413      	add	r3, r2
 8001568:	460a      	mov	r2, r1
 800156a:	701a      	strb	r2, [r3, #0]
		buffer[idx] |= rows << ((col % 2) * 4);
 800156c:	7bfa      	ldrb	r2, [r7, #15]
 800156e:	4b27      	ldr	r3, [pc, #156]	; (800160c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	bfb8      	it	lt
 800157a:	425b      	neglt	r3, r3
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	fa02 f103 	lsl.w	r1, r2, r3
 8001582:	4a23      	ldr	r2, [pc, #140]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	4413      	add	r3, r2
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	b25a      	sxtb	r2, r3
 800158c:	b24b      	sxtb	r3, r1
 800158e:	4313      	orrs	r3, r2
 8001590:	b25b      	sxtb	r3, r3
 8001592:	b2d9      	uxtb	r1, r3
 8001594:	4a1e      	ldr	r2, [pc, #120]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	4413      	add	r3, r2
 800159a:	460a      	mov	r2, r1
 800159c:	701a      	strb	r2, [r3, #0]
		drive_column();
 800159e:	f7ff fef3 	bl	8001388 <drive_column>
		buffer[2] = HAL_GPIO_ReadPin(Button17_GPIO_Port, Button17_Pin) | HAL_GPIO_ReadPin(Button18_GPIO_Port, Button18_Pin) << 1;
 80015a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015a6:	481b      	ldr	r0, [pc, #108]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80015a8:	f001 fae6 	bl	8002b78 <HAL_GPIO_ReadPin>
 80015ac:	4603      	mov	r3, r0
 80015ae:	b25c      	sxtb	r4, r3
 80015b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015b4:	4817      	ldr	r0, [pc, #92]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80015b6:	f001 fadf 	bl	8002b78 <HAL_GPIO_ReadPin>
 80015ba:	4603      	mov	r3, r0
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	b25b      	sxtb	r3, r3
 80015c0:	4323      	orrs	r3, r4
 80015c2:	b25b      	sxtb	r3, r3
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	4b12      	ldr	r3, [pc, #72]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80015c8:	709a      	strb	r2, [r3, #2]
	}

	if (htim == &htim3) {
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a12      	ldr	r2, [pc, #72]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d115      	bne.n	80015fe <HAL_TIM_PeriodElapsedCallback+0xea>
		clean_buffer();
 80015d2:	f7ff ff05 	bl	80013e0 <clean_buffer>
		right_stick_emulate();
 80015d6:	f7ff ff5d 	bl	8001494 <right_stick_emulate>
		if (bluetooth_mode) {
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x108>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d008      	beq.n	80015f4 <HAL_TIM_PeriodElapsedCallback+0xe0>
			clean_buffer_bt();
 80015e2:	f7ff ff7f 	bl	80014e4 <clean_buffer_bt>
			HAL_UART_Transmit(&huart2, bluetooth_buffer, sizeof(bluetooth_buffer), 100);
 80015e6:	2364      	movs	r3, #100	; 0x64
 80015e8:	2204      	movs	r2, #4
 80015ea:	490d      	ldr	r1, [pc, #52]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80015ec:	480d      	ldr	r0, [pc, #52]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80015ee:	f005 fd82 	bl	80070f6 <HAL_UART_Transmit>
		}
		else {
			USBD_HID_SendReport(&hUsbDeviceFS, cleaned_buffer, sizeof(cleaned_buffer));
		}
	}
}
 80015f2:	e004      	b.n	80015fe <HAL_TIM_PeriodElapsedCallback+0xea>
			USBD_HID_SendReport(&hUsbDeviceFS, cleaned_buffer, sizeof(cleaned_buffer));
 80015f4:	2203      	movs	r2, #3
 80015f6:	490c      	ldr	r1, [pc, #48]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80015f8:	480c      	ldr	r0, [pc, #48]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x118>)
 80015fa:	f008 fc43 	bl	8009e84 <USBD_HID_SendReport>
}
 80015fe:	bf00      	nop
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	bd90      	pop	{r4, r7, pc}
 8001606:	bf00      	nop
 8001608:	200002b0 	.word	0x200002b0
 800160c:	20000878 	.word	0x20000878
 8001610:	2000087c 	.word	0x2000087c
 8001614:	40020400 	.word	0x40020400
 8001618:	200002f8 	.word	0x200002f8
 800161c:	200003c8 	.word	0x200003c8
 8001620:	2000001c 	.word	0x2000001c
 8001624:	20000384 	.word	0x20000384
 8001628:	20000880 	.word	0x20000880
 800162c:	200008d8 	.word	0x200008d8

08001630 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	80fb      	strh	r3, [r7, #6]
	 if ((GPIO_Pin == BAT_GPOUT_Pin)) {
 800163a:	88fb      	ldrh	r3, [r7, #6]
 800163c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001640:	d104      	bne.n	800164c <HAL_GPIO_EXTI_Callback+0x1c>
		 updateBat();
 8001642:	f7ff fd99 	bl	8001178 <updateBat>
		 dispBat();
 8001646:	f7ff fe3d 	bl	80012c4 <dispBat>
		 startup_init();
	 }
	 else {
		 __NOP();
	 }
}
 800164a:	e006      	b.n	800165a <HAL_GPIO_EXTI_Callback+0x2a>
	 else if ((GPIO_Pin == USB_Detect_Pin)) {
 800164c:	88fb      	ldrh	r3, [r7, #6]
 800164e:	2b20      	cmp	r3, #32
 8001650:	d102      	bne.n	8001658 <HAL_GPIO_EXTI_Callback+0x28>
		 startup_init();
 8001652:	f7ff fdbf 	bl	80011d4 <startup_init>
}
 8001656:	e000      	b.n	800165a <HAL_GPIO_EXTI_Callback+0x2a>
		 __NOP();
 8001658:	bf00      	nop
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
	...

08001664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800166a:	f000 ff3f 	bl	80024ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800166e:	f000 f933 	bl	80018d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001672:	f000 fb23 	bl	8001cbc <MX_GPIO_Init>
  MX_I2C3_Init();
 8001676:	f000 f997 	bl	80019a8 <MX_I2C3_Init>
  MX_SPI2_Init();
 800167a:	f000 f9c3 	bl	8001a04 <MX_SPI2_Init>
  MX_SPI3_Init();
 800167e:	f000 f9f7 	bl	8001a70 <MX_SPI3_Init>
  MX_TIM2_Init();
 8001682:	f000 fa2d 	bl	8001ae0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001686:	f000 fa77 	bl	8001b78 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800168a:	f000 fac3 	bl	8001c14 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800168e:	f000 faeb 	bl	8001c68 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8001692:	f007 fcf3 	bl	800907c <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001696:	f00c fafd 	bl	800dc94 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // Initialize LCD and LED
  HAL_GPIO_WritePin(Debug_LED_GPIO_Port, Debug_LED_Pin, GPIO_PIN_SET);
 800169a:	2201      	movs	r2, #1
 800169c:	2102      	movs	r1, #2
 800169e:	4879      	ldr	r0, [pc, #484]	; (8001884 <main+0x220>)
 80016a0:	f001 fa82 	bl	8002ba8 <HAL_GPIO_WritePin>
  ILI9341_Init();
 80016a4:	f7ff f82a 	bl	80006fc <ILI9341_Init>
  ILI9341_FillScreen(ILI9341_BLACK);
 80016a8:	2000      	movs	r0, #0
 80016aa:	f7ff fab7 	bl	8000c1c <ILI9341_FillScreen>

  // Disable charging
    HAL_GPIO_WritePin(BAT_CE_GPIO_Port, BAT_CE_Pin, GPIO_PIN_SET);
 80016ae:	2201      	movs	r2, #1
 80016b0:	2180      	movs	r1, #128	; 0x80
 80016b2:	4875      	ldr	r0, [pc, #468]	; (8001888 <main+0x224>)
 80016b4:	f001 fa78 	bl	8002ba8 <HAL_GPIO_WritePin>

  // Connect to battery monitor
  HAL_StatusTypeDef res;
  uint8_t receiveBuffer[1];
  printf("Connecting to battery monitor\r\n");
 80016b8:	4874      	ldr	r0, [pc, #464]	; (800188c <main+0x228>)
 80016ba:	f00c ffd1 	bl	800e660 <puts>
  if (HAL_I2C_Master_Receive(&hi2c3, (uint16_t) BQ27441_I2C_ADDRESS << 1, receiveBuffer, sizeof(receiveBuffer), HAL_MAX_DELAY) != HAL_OK) {
 80016be:	1d3a      	adds	r2, r7, #4
 80016c0:	f04f 33ff 	mov.w	r3, #4294967295
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	2301      	movs	r3, #1
 80016c8:	21aa      	movs	r1, #170	; 0xaa
 80016ca:	4871      	ldr	r0, [pc, #452]	; (8001890 <main+0x22c>)
 80016cc:	f001 fbe2 	bl	8002e94 <HAL_I2C_Master_Receive>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d02a      	beq.n	800172c <main+0xc8>
	ILI9341_WriteString(65, 100, "Battery missing", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 80016d6:	4b6f      	ldr	r3, [pc, #444]	; (8001894 <main+0x230>)
 80016d8:	2200      	movs	r2, #0
 80016da:	9202      	str	r2, [sp, #8]
 80016dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016e0:	9201      	str	r2, [sp, #4]
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	9200      	str	r2, [sp, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a6b      	ldr	r2, [pc, #428]	; (8001898 <main+0x234>)
 80016ea:	2164      	movs	r1, #100	; 0x64
 80016ec:	2041      	movs	r0, #65	; 0x41
 80016ee:	f7ff f9d9 	bl	8000aa4 <ILI9341_WriteString>
	ILI9341_WriteString(100, 130, "or damaged", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 80016f2:	4b68      	ldr	r3, [pc, #416]	; (8001894 <main+0x230>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	9202      	str	r2, [sp, #8]
 80016f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016fc:	9201      	str	r2, [sp, #4]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	9200      	str	r2, [sp, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a65      	ldr	r2, [pc, #404]	; (800189c <main+0x238>)
 8001706:	2182      	movs	r1, #130	; 0x82
 8001708:	2064      	movs	r0, #100	; 0x64
 800170a:	f7ff f9cb 	bl	8000aa4 <ILI9341_WriteString>
	while (1) {
	  if (HAL_I2C_Master_Receive(&hi2c3, (uint16_t) BQ27441_I2C_ADDRESS << 1, receiveBuffer, sizeof(receiveBuffer), HAL_MAX_DELAY) == HAL_OK) {
 800170e:	1d3a      	adds	r2, r7, #4
 8001710:	f04f 33ff 	mov.w	r3, #4294967295
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	2301      	movs	r3, #1
 8001718:	21aa      	movs	r1, #170	; 0xaa
 800171a:	485d      	ldr	r0, [pc, #372]	; (8001890 <main+0x22c>)
 800171c:	f001 fbba 	bl	8002e94 <HAL_I2C_Master_Receive>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f3      	bne.n	800170e <main+0xaa>
		printf("Device found\r\n");
 8001726:	485e      	ldr	r0, [pc, #376]	; (80018a0 <main+0x23c>)
 8001728:	f00c ff9a 	bl	800e660 <puts>
	    break;
      }
  	}
  }
  ILI9341_FillScreen(ILI9341_BLACK);
 800172c:	2000      	movs	r0, #0
 800172e:	f7ff fa75 	bl	8000c1c <ILI9341_FillScreen>

  // Initialize Battery monitor
    Bat_init(&BQ27441);
 8001732:	485c      	ldr	r0, [pc, #368]	; (80018a4 <main+0x240>)
 8001734:	f7ff fcf4 	bl	8001120 <Bat_init>

    // Let SD card settle
    HAL_Delay(1000);
 8001738:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800173c:	f000 ff48 	bl	80025d0 <HAL_Delay>

    // Check if SD card is connected
    if (HAL_GPIO_ReadPin(SD_Detect_GPIO_Port, SD_Detect_Pin) == GPIO_PIN_RESET) {
 8001740:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001744:	4858      	ldr	r0, [pc, #352]	; (80018a8 <main+0x244>)
 8001746:	f001 fa17 	bl	8002b78 <HAL_GPIO_ReadPin>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d14f      	bne.n	80017f0 <main+0x18c>
  	  printf("Please check SD card connection\r\n");
 8001750:	4856      	ldr	r0, [pc, #344]	; (80018ac <main+0x248>)
 8001752:	f00c ff85 	bl	800e660 <puts>
  	  ILI9341_WriteString(65, 100, "Please check", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 8001756:	4b4f      	ldr	r3, [pc, #316]	; (8001894 <main+0x230>)
 8001758:	2200      	movs	r2, #0
 800175a:	9202      	str	r2, [sp, #8]
 800175c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001760:	9201      	str	r2, [sp, #4]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	9200      	str	r2, [sp, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a51      	ldr	r2, [pc, #324]	; (80018b0 <main+0x24c>)
 800176a:	2164      	movs	r1, #100	; 0x64
 800176c:	2041      	movs	r0, #65	; 0x41
 800176e:	f7ff f999 	bl	8000aa4 <ILI9341_WriteString>
  	  ILI9341_WriteString(100,  130,  "SD card", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 8001772:	4b48      	ldr	r3, [pc, #288]	; (8001894 <main+0x230>)
 8001774:	2200      	movs	r2, #0
 8001776:	9202      	str	r2, [sp, #8]
 8001778:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800177c:	9201      	str	r2, [sp, #4]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	9200      	str	r2, [sp, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a4b      	ldr	r2, [pc, #300]	; (80018b4 <main+0x250>)
 8001786:	2182      	movs	r1, #130	; 0x82
 8001788:	2064      	movs	r0, #100	; 0x64
 800178a:	f7ff f98b 	bl	8000aa4 <ILI9341_WriteString>
  	  while (1) {
  		  if(HAL_GPIO_ReadPin(SD_Detect_GPIO_Port, SD_Detect_Pin) == GPIO_PIN_SET) {
 800178e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001792:	4845      	ldr	r0, [pc, #276]	; (80018a8 <main+0x244>)
 8001794:	f001 f9f0 	bl	8002b78 <HAL_GPIO_ReadPin>
 8001798:	4603      	mov	r3, r0
 800179a:	2b01      	cmp	r3, #1
 800179c:	d123      	bne.n	80017e6 <main+0x182>
  			  ILI9341_FillScreen(ILI9341_BLACK);
 800179e:	2000      	movs	r0, #0
 80017a0:	f7ff fa3c 	bl	8000c1c <ILI9341_FillScreen>
  			  ILI9341_WriteString(90, 110, "SD card", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 80017a4:	4b3b      	ldr	r3, [pc, #236]	; (8001894 <main+0x230>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	9202      	str	r2, [sp, #8]
 80017aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017ae:	9201      	str	r2, [sp, #4]
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	9200      	str	r2, [sp, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a3f      	ldr	r2, [pc, #252]	; (80018b4 <main+0x250>)
 80017b8:	216e      	movs	r1, #110	; 0x6e
 80017ba:	205a      	movs	r0, #90	; 0x5a
 80017bc:	f7ff f972 	bl	8000aa4 <ILI9341_WriteString>
  	          ILI9341_WriteString(75, 130, "connected", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 80017c0:	4b34      	ldr	r3, [pc, #208]	; (8001894 <main+0x230>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	9202      	str	r2, [sp, #8]
 80017c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017ca:	9201      	str	r2, [sp, #4]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	9200      	str	r2, [sp, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a39      	ldr	r2, [pc, #228]	; (80018b8 <main+0x254>)
 80017d4:	2182      	movs	r1, #130	; 0x82
 80017d6:	204b      	movs	r0, #75	; 0x4b
 80017d8:	f7ff f964 	bl	8000aa4 <ILI9341_WriteString>
  			  HAL_Delay(1000);
 80017dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017e0:	f000 fef6 	bl	80025d0 <HAL_Delay>
  			  break;
 80017e4:	e004      	b.n	80017f0 <main+0x18c>
  		  }
            HAL_Delay(500);
 80017e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017ea:	f000 fef1 	bl	80025d0 <HAL_Delay>
  		  if(HAL_GPIO_ReadPin(SD_Detect_GPIO_Port, SD_Detect_Pin) == GPIO_PIN_SET) {
 80017ee:	e7ce      	b.n	800178e <main+0x12a>
  	  }
    }
    ILI9341_FillScreen(ILI9341_BLACK);
 80017f0:	2000      	movs	r0, #0
 80017f2:	f7ff fa13 	bl	8000c1c <ILI9341_FillScreen>

    // Mount SD Card
    fres = f_mount(&fs, "", 1);
 80017f6:	2201      	movs	r2, #1
 80017f8:	4930      	ldr	r1, [pc, #192]	; (80018bc <main+0x258>)
 80017fa:	4831      	ldr	r0, [pc, #196]	; (80018c0 <main+0x25c>)
 80017fc:	f00b fbfa 	bl	800cff4 <f_mount>
 8001800:	4603      	mov	r3, r0
 8001802:	461a      	mov	r2, r3
 8001804:	4b2f      	ldr	r3, [pc, #188]	; (80018c4 <main+0x260>)
 8001806:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK) {
 8001808:	4b2e      	ldr	r3, [pc, #184]	; (80018c4 <main+0x260>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d030      	beq.n	8001872 <main+0x20e>
  	printf("f_mount error (%i)\r\n", fres);
 8001810:	4b2c      	ldr	r3, [pc, #176]	; (80018c4 <main+0x260>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	4619      	mov	r1, r3
 8001816:	482c      	ldr	r0, [pc, #176]	; (80018c8 <main+0x264>)
 8001818:	f00c fe9c 	bl	800e554 <iprintf>
  	ILI9341_WriteString(90, 110, "SD card", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 800181c:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <main+0x230>)
 800181e:	2200      	movs	r2, #0
 8001820:	9202      	str	r2, [sp, #8]
 8001822:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001826:	9201      	str	r2, [sp, #4]
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	9200      	str	r2, [sp, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a21      	ldr	r2, [pc, #132]	; (80018b4 <main+0x250>)
 8001830:	216e      	movs	r1, #110	; 0x6e
 8001832:	205a      	movs	r0, #90	; 0x5a
 8001834:	f7ff f936 	bl	8000aa4 <ILI9341_WriteString>
  	ILI9341_WriteString(75, 130, "mounting error", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 8001838:	4b16      	ldr	r3, [pc, #88]	; (8001894 <main+0x230>)
 800183a:	2200      	movs	r2, #0
 800183c:	9202      	str	r2, [sp, #8]
 800183e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001842:	9201      	str	r2, [sp, #4]
 8001844:	685a      	ldr	r2, [r3, #4]
 8001846:	9200      	str	r2, [sp, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a20      	ldr	r2, [pc, #128]	; (80018cc <main+0x268>)
 800184c:	2182      	movs	r1, #130	; 0x82
 800184e:	204b      	movs	r0, #75	; 0x4b
 8001850:	f7ff f928 	bl	8000aa4 <ILI9341_WriteString>
  	while(1) {
  		fres = f_mount(&fs, "", 1);
 8001854:	2201      	movs	r2, #1
 8001856:	4919      	ldr	r1, [pc, #100]	; (80018bc <main+0x258>)
 8001858:	4819      	ldr	r0, [pc, #100]	; (80018c0 <main+0x25c>)
 800185a:	f00b fbcb 	bl	800cff4 <f_mount>
 800185e:	4603      	mov	r3, r0
 8001860:	461a      	mov	r2, r3
 8001862:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <main+0x260>)
 8001864:	701a      	strb	r2, [r3, #0]
  		if (fres == FR_OK) {
 8001866:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <main+0x260>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d000      	beq.n	8001870 <main+0x20c>
  		fres = f_mount(&fs, "", 1);
 800186e:	e7f1      	b.n	8001854 <main+0x1f0>
  			break;
 8001870:	bf00      	nop
  		}
  	}
    }

    // Startup initialization on LCD
    startup_init();
 8001872:	f7ff fcaf 	bl	80011d4 <startup_init>

    // Enable timer interrupts
    HAL_TIM_Base_Start_IT(&htim2);
 8001876:	4816      	ldr	r0, [pc, #88]	; (80018d0 <main+0x26c>)
 8001878:	f004 fffa 	bl	8006870 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim3);
 800187c:	4815      	ldr	r0, [pc, #84]	; (80018d4 <main+0x270>)
 800187e:	f004 fff7 	bl	8006870 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001882:	e7fe      	b.n	8001882 <main+0x21e>
 8001884:	40020000 	.word	0x40020000
 8001888:	40020800 	.word	0x40020800
 800188c:	0800fb04 	.word	0x0800fb04
 8001890:	200001ac 	.word	0x200001ac
 8001894:	20000008 	.word	0x20000008
 8001898:	0800fb24 	.word	0x0800fb24
 800189c:	0800fb34 	.word	0x0800fb34
 80018a0:	0800fb40 	.word	0x0800fb40
 80018a4:	20000010 	.word	0x20000010
 80018a8:	40020400 	.word	0x40020400
 80018ac:	0800fb50 	.word	0x0800fb50
 80018b0:	0800fb74 	.word	0x0800fb74
 80018b4:	0800fb84 	.word	0x0800fb84
 80018b8:	0800fb8c 	.word	0x0800fb8c
 80018bc:	0800fb98 	.word	0x0800fb98
 80018c0:	2000040c 	.word	0x2000040c
 80018c4:	2000086c 	.word	0x2000086c
 80018c8:	0800fb9c 	.word	0x0800fb9c
 80018cc:	0800fbb4 	.word	0x0800fbb4
 80018d0:	200002b0 	.word	0x200002b0
 80018d4:	200002f8 	.word	0x200002f8

080018d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b094      	sub	sp, #80	; 0x50
 80018dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018de:	f107 0320 	add.w	r3, r7, #32
 80018e2:	2230      	movs	r2, #48	; 0x30
 80018e4:	2100      	movs	r1, #0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f00c fe2c 	bl	800e544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018ec:	f107 030c 	add.w	r3, r7, #12
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018fc:	2300      	movs	r3, #0
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	4b27      	ldr	r3, [pc, #156]	; (80019a0 <SystemClock_Config+0xc8>)
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	4a26      	ldr	r2, [pc, #152]	; (80019a0 <SystemClock_Config+0xc8>)
 8001906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800190a:	6413      	str	r3, [r2, #64]	; 0x40
 800190c:	4b24      	ldr	r3, [pc, #144]	; (80019a0 <SystemClock_Config+0xc8>)
 800190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001918:	2300      	movs	r3, #0
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	4b21      	ldr	r3, [pc, #132]	; (80019a4 <SystemClock_Config+0xcc>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a20      	ldr	r2, [pc, #128]	; (80019a4 <SystemClock_Config+0xcc>)
 8001922:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001926:	6013      	str	r3, [r2, #0]
 8001928:	4b1e      	ldr	r3, [pc, #120]	; (80019a4 <SystemClock_Config+0xcc>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001934:	2301      	movs	r3, #1
 8001936:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001938:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800193e:	2302      	movs	r3, #2
 8001940:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001942:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001946:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001948:	2304      	movs	r3, #4
 800194a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800194c:	23c0      	movs	r3, #192	; 0xc0
 800194e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001950:	2304      	movs	r3, #4
 8001952:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001954:	2308      	movs	r3, #8
 8001956:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001958:	f107 0320 	add.w	r3, r7, #32
 800195c:	4618      	mov	r0, r3
 800195e:	f003 fe6d 	bl	800563c <HAL_RCC_OscConfig>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001968:	f000 faa4 	bl	8001eb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800196c:	230f      	movs	r3, #15
 800196e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001970:	2302      	movs	r3, #2
 8001972:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800197c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001982:	f107 030c 	add.w	r3, r7, #12
 8001986:	2103      	movs	r1, #3
 8001988:	4618      	mov	r0, r3
 800198a:	f004 f8cf 	bl	8005b2c <HAL_RCC_ClockConfig>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001994:	f000 fa8e 	bl	8001eb4 <Error_Handler>
  }
}
 8001998:	bf00      	nop
 800199a:	3750      	adds	r7, #80	; 0x50
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40007000 	.word	0x40007000

080019a8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <MX_I2C3_Init+0x50>)
 80019ae:	4a13      	ldr	r2, [pc, #76]	; (80019fc <MX_I2C3_Init+0x54>)
 80019b0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80019b2:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <MX_I2C3_Init+0x50>)
 80019b4:	4a12      	ldr	r2, [pc, #72]	; (8001a00 <MX_I2C3_Init+0x58>)
 80019b6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019b8:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <MX_I2C3_Init+0x50>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <MX_I2C3_Init+0x50>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <MX_I2C3_Init+0x50>)
 80019c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019ca:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019cc:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <MX_I2C3_Init+0x50>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <MX_I2C3_Init+0x50>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019d8:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <MX_I2C3_Init+0x50>)
 80019da:	2200      	movs	r2, #0
 80019dc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <MX_I2C3_Init+0x50>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80019e4:	4804      	ldr	r0, [pc, #16]	; (80019f8 <MX_I2C3_Init+0x50>)
 80019e6:	f001 f911 	bl	8002c0c <HAL_I2C_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80019f0:	f000 fa60 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	200001ac 	.word	0x200001ac
 80019fc:	40005c00 	.word	0x40005c00
 8001a00:	00061a80 	.word	0x00061a80

08001a04 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a08:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <MX_SPI2_Init+0x64>)
 8001a0a:	4a18      	ldr	r2, [pc, #96]	; (8001a6c <MX_SPI2_Init+0x68>)
 8001a0c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a0e:	4b16      	ldr	r3, [pc, #88]	; (8001a68 <MX_SPI2_Init+0x64>)
 8001a10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a14:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a16:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <MX_SPI2_Init+0x64>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a1c:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <MX_SPI2_Init+0x64>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a22:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <MX_SPI2_Init+0x64>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <MX_SPI2_Init+0x64>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <MX_SPI2_Init+0x64>)
 8001a30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a34:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001a36:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <MX_SPI2_Init+0x64>)
 8001a38:	2230      	movs	r2, #48	; 0x30
 8001a3a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <MX_SPI2_Init+0x64>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <MX_SPI2_Init+0x64>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a48:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <MX_SPI2_Init+0x64>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a4e:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <MX_SPI2_Init+0x64>)
 8001a50:	220a      	movs	r2, #10
 8001a52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a54:	4804      	ldr	r0, [pc, #16]	; (8001a68 <MX_SPI2_Init+0x64>)
 8001a56:	f004 fa89 	bl	8005f6c <HAL_SPI_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001a60:	f000 fa28 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a64:	bf00      	nop
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000200 	.word	0x20000200
 8001a6c:	40003800 	.word	0x40003800

08001a70 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001a74:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <MX_SPI3_Init+0x68>)
 8001a76:	4a19      	ldr	r2, [pc, #100]	; (8001adc <MX_SPI3_Init+0x6c>)
 8001a78:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001a7a:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <MX_SPI3_Init+0x68>)
 8001a7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a80:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <MX_SPI3_Init+0x68>)
 8001a84:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a88:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a8a:	4b13      	ldr	r3, [pc, #76]	; (8001ad8 <MX_SPI3_Init+0x68>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <MX_SPI3_Init+0x68>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a96:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <MX_SPI3_Init+0x68>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001a9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <MX_SPI3_Init+0x68>)
 8001a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aa2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <MX_SPI3_Init+0x68>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <MX_SPI3_Init+0x68>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ab0:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <MX_SPI3_Init+0x68>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ab6:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <MX_SPI3_Init+0x68>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <MX_SPI3_Init+0x68>)
 8001abe:	220a      	movs	r2, #10
 8001ac0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001ac2:	4805      	ldr	r0, [pc, #20]	; (8001ad8 <MX_SPI3_Init+0x68>)
 8001ac4:	f004 fa52 	bl	8005f6c <HAL_SPI_Init>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8001ace:	f000 f9f1 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000258 	.word	0x20000258
 8001adc:	40003c00 	.word	0x40003c00

08001ae0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ae6:	f107 0308 	add.w	r3, r7, #8
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	605a      	str	r2, [r3, #4]
 8001af0:	609a      	str	r2, [r3, #8]
 8001af2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af4:	463b      	mov	r3, r7
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001afc:	4b1d      	ldr	r3, [pc, #116]	; (8001b74 <MX_TIM2_Init+0x94>)
 8001afe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 8001b04:	4b1b      	ldr	r3, [pc, #108]	; (8001b74 <MX_TIM2_Init+0x94>)
 8001b06:	225f      	movs	r2, #95	; 0x5f
 8001b08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b0a:	4b1a      	ldr	r3, [pc, #104]	; (8001b74 <MX_TIM2_Init+0x94>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001b10:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <MX_TIM2_Init+0x94>)
 8001b12:	2263      	movs	r2, #99	; 0x63
 8001b14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b16:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <MX_TIM2_Init+0x94>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b1c:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <MX_TIM2_Init+0x94>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b22:	4814      	ldr	r0, [pc, #80]	; (8001b74 <MX_TIM2_Init+0x94>)
 8001b24:	f004 fe54 	bl	80067d0 <HAL_TIM_Base_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001b2e:	f000 f9c1 	bl	8001eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b38:	f107 0308 	add.w	r3, r7, #8
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	480d      	ldr	r0, [pc, #52]	; (8001b74 <MX_TIM2_Init+0x94>)
 8001b40:	f005 f800 	bl	8006b44 <HAL_TIM_ConfigClockSource>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001b4a:	f000 f9b3 	bl	8001eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b52:	2300      	movs	r3, #0
 8001b54:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b56:	463b      	mov	r3, r7
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4806      	ldr	r0, [pc, #24]	; (8001b74 <MX_TIM2_Init+0x94>)
 8001b5c:	f005 f9fc 	bl	8006f58 <HAL_TIMEx_MasterConfigSynchronization>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001b66:	f000 f9a5 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b6a:	bf00      	nop
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	200002b0 	.word	0x200002b0

08001b78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b7e:	f107 0308 	add.w	r3, r7, #8
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b8c:	463b      	mov	r3, r7
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b94:	4b1d      	ldr	r3, [pc, #116]	; (8001c0c <MX_TIM3_Init+0x94>)
 8001b96:	4a1e      	ldr	r2, [pc, #120]	; (8001c10 <MX_TIM3_Init+0x98>)
 8001b98:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 800-1;
 8001b9a:	4b1c      	ldr	r3, [pc, #112]	; (8001c0c <MX_TIM3_Init+0x94>)
 8001b9c:	f240 321f 	movw	r2, #799	; 0x31f
 8001ba0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba2:	4b1a      	ldr	r3, [pc, #104]	; (8001c0c <MX_TIM3_Init+0x94>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001ba8:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <MX_TIM3_Init+0x94>)
 8001baa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb0:	4b16      	ldr	r3, [pc, #88]	; (8001c0c <MX_TIM3_Init+0x94>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb6:	4b15      	ldr	r3, [pc, #84]	; (8001c0c <MX_TIM3_Init+0x94>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bbc:	4813      	ldr	r0, [pc, #76]	; (8001c0c <MX_TIM3_Init+0x94>)
 8001bbe:	f004 fe07 	bl	80067d0 <HAL_TIM_Base_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001bc8:	f000 f974 	bl	8001eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bd2:	f107 0308 	add.w	r3, r7, #8
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	480c      	ldr	r0, [pc, #48]	; (8001c0c <MX_TIM3_Init+0x94>)
 8001bda:	f004 ffb3 	bl	8006b44 <HAL_TIM_ConfigClockSource>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001be4:	f000 f966 	bl	8001eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be8:	2300      	movs	r3, #0
 8001bea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bf0:	463b      	mov	r3, r7
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4805      	ldr	r0, [pc, #20]	; (8001c0c <MX_TIM3_Init+0x94>)
 8001bf6:	f005 f9af 	bl	8006f58 <HAL_TIMEx_MasterConfigSynchronization>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001c00:	f000 f958 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c04:	bf00      	nop
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	200002f8 	.word	0x200002f8
 8001c10:	40000400 	.word	0x40000400

08001c14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c18:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <MX_USART1_UART_Init+0x4c>)
 8001c1a:	4a12      	ldr	r2, [pc, #72]	; (8001c64 <MX_USART1_UART_Init+0x50>)
 8001c1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <MX_USART1_UART_Init+0x4c>)
 8001c20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c26:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <MX_USART1_UART_Init+0x4c>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <MX_USART1_UART_Init+0x4c>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c32:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <MX_USART1_UART_Init+0x4c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c38:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <MX_USART1_UART_Init+0x4c>)
 8001c3a:	220c      	movs	r2, #12
 8001c3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c3e:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <MX_USART1_UART_Init+0x4c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <MX_USART1_UART_Init+0x4c>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c4a:	4805      	ldr	r0, [pc, #20]	; (8001c60 <MX_USART1_UART_Init+0x4c>)
 8001c4c:	f005 fa06 	bl	800705c <HAL_UART_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c56:	f000 f92d 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000340 	.word	0x20000340
 8001c64:	40011000 	.word	0x40011000

08001c68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c6c:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <MX_USART2_UART_Init+0x4c>)
 8001c6e:	4a12      	ldr	r2, [pc, #72]	; (8001cb8 <MX_USART2_UART_Init+0x50>)
 8001c70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c72:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <MX_USART2_UART_Init+0x4c>)
 8001c74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <MX_USART2_UART_Init+0x4c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <MX_USART2_UART_Init+0x4c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c86:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <MX_USART2_UART_Init+0x4c>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c8c:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <MX_USART2_UART_Init+0x4c>)
 8001c8e:	220c      	movs	r2, #12
 8001c90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c92:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <MX_USART2_UART_Init+0x4c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <MX_USART2_UART_Init+0x4c>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c9e:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <MX_USART2_UART_Init+0x4c>)
 8001ca0:	f005 f9dc 	bl	800705c <HAL_UART_Init>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001caa:	f000 f903 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000384 	.word	0x20000384
 8001cb8:	40004400 	.word	0x40004400

08001cbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	; 0x28
 8001cc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc2:	f107 0314 	add.w	r3, r7, #20
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	605a      	str	r2, [r3, #4]
 8001ccc:	609a      	str	r2, [r3, #8]
 8001cce:	60da      	str	r2, [r3, #12]
 8001cd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]
 8001cd6:	4b72      	ldr	r3, [pc, #456]	; (8001ea0 <MX_GPIO_Init+0x1e4>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	4a71      	ldr	r2, [pc, #452]	; (8001ea0 <MX_GPIO_Init+0x1e4>)
 8001cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce2:	4b6f      	ldr	r3, [pc, #444]	; (8001ea0 <MX_GPIO_Init+0x1e4>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	4b6b      	ldr	r3, [pc, #428]	; (8001ea0 <MX_GPIO_Init+0x1e4>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	4a6a      	ldr	r2, [pc, #424]	; (8001ea0 <MX_GPIO_Init+0x1e4>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfe:	4b68      	ldr	r3, [pc, #416]	; (8001ea0 <MX_GPIO_Init+0x1e4>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60bb      	str	r3, [r7, #8]
 8001d0e:	4b64      	ldr	r3, [pc, #400]	; (8001ea0 <MX_GPIO_Init+0x1e4>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	4a63      	ldr	r2, [pc, #396]	; (8001ea0 <MX_GPIO_Init+0x1e4>)
 8001d14:	f043 0304 	orr.w	r3, r3, #4
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1a:	4b61      	ldr	r3, [pc, #388]	; (8001ea0 <MX_GPIO_Init+0x1e4>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f003 0304 	and.w	r3, r3, #4
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	607b      	str	r3, [r7, #4]
 8001d2a:	4b5d      	ldr	r3, [pc, #372]	; (8001ea0 <MX_GPIO_Init+0x1e4>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	4a5c      	ldr	r2, [pc, #368]	; (8001ea0 <MX_GPIO_Init+0x1e4>)
 8001d30:	f043 0302 	orr.w	r3, r3, #2
 8001d34:	6313      	str	r3, [r2, #48]	; 0x30
 8001d36:	4b5a      	ldr	r3, [pc, #360]	; (8001ea0 <MX_GPIO_Init+0x1e4>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	607b      	str	r3, [r7, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	603b      	str	r3, [r7, #0]
 8001d46:	4b56      	ldr	r3, [pc, #344]	; (8001ea0 <MX_GPIO_Init+0x1e4>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a55      	ldr	r2, [pc, #340]	; (8001ea0 <MX_GPIO_Init+0x1e4>)
 8001d4c:	f043 0308 	orr.w	r3, r3, #8
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b53      	ldr	r3, [pc, #332]	; (8001ea0 <MX_GPIO_Init+0x1e4>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	603b      	str	r3, [r7, #0]
 8001d5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Debug_LED_Pin|BT_EN_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f248 0142 	movw	r1, #32834	; 0x8042
 8001d64:	484f      	ldr	r0, [pc, #316]	; (8001ea4 <MX_GPIO_Init+0x1e8>)
 8001d66:	f000 ff1f 	bl	8002ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Col0_Pin|Col1_Pin|Col2_Pin|SD_CS_Pin
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f241 010f 	movw	r1, #4111	; 0x100f
 8001d70:	484d      	ldr	r0, [pc, #308]	; (8001ea8 <MX_GPIO_Init+0x1ec>)
 8001d72:	f000 ff19 	bl	8002ba8 <HAL_GPIO_WritePin>
                          |Col3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BAT_CE_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8001d76:	2200      	movs	r2, #0
 8001d78:	f44f 6108 	mov.w	r1, #2176	; 0x880
 8001d7c:	484b      	ldr	r0, [pc, #300]	; (8001eac <MX_GPIO_Init+0x1f0>)
 8001d7e:	f000 ff13 	bl	8002ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_Reset_GPIO_Port, LCD_Reset_Pin, GPIO_PIN_RESET);
 8001d82:	2200      	movs	r2, #0
 8001d84:	2104      	movs	r1, #4
 8001d86:	484a      	ldr	r0, [pc, #296]	; (8001eb0 <MX_GPIO_Init+0x1f4>)
 8001d88:	f000 ff0e 	bl	8002ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Debug_LED_Pin BT_EN_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = Debug_LED_Pin|BT_EN_Pin|LCD_CS_Pin;
 8001d8c:	f248 0342 	movw	r3, #32834	; 0x8042
 8001d90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d92:	2301      	movs	r3, #1
 8001d94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9e:	f107 0314 	add.w	r3, r7, #20
 8001da2:	4619      	mov	r1, r3
 8001da4:	483f      	ldr	r0, [pc, #252]	; (8001ea4 <MX_GPIO_Init+0x1e8>)
 8001da6:	f000 fd63 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_Detect_Pin */
  GPIO_InitStruct.Pin = USB_Detect_Pin;
 8001daa:	2320      	movs	r3, #32
 8001dac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001dae:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001db2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_Detect_GPIO_Port, &GPIO_InitStruct);
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	483b      	ldr	r0, [pc, #236]	; (8001eac <MX_GPIO_Init+0x1f0>)
 8001dc0:	f000 fd56 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pins : Col0_Pin Col1_Pin Col2_Pin Col3_Pin */
  GPIO_InitStruct.Pin = Col0_Pin|Col1_Pin|Col2_Pin|Col3_Pin;
 8001dc4:	230f      	movs	r3, #15
 8001dc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd4:	f107 0314 	add.w	r3, r7, #20
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4833      	ldr	r0, [pc, #204]	; (8001ea8 <MX_GPIO_Init+0x1ec>)
 8001ddc:	f000 fd48 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8001de0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001de4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dea:	2301      	movs	r3, #1
 8001dec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001dee:	f107 0314 	add.w	r3, r7, #20
 8001df2:	4619      	mov	r1, r3
 8001df4:	482c      	ldr	r0, [pc, #176]	; (8001ea8 <MX_GPIO_Init+0x1ec>)
 8001df6:	f000 fd3b 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001dfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e00:	2301      	movs	r3, #1
 8001e02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e04:	2301      	movs	r3, #1
 8001e06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	4619      	mov	r1, r3
 8001e12:	4825      	ldr	r0, [pc, #148]	; (8001ea8 <MX_GPIO_Init+0x1ec>)
 8001e14:	f000 fd2c 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pins : BAT_CE_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = BAT_CE_Pin|LCD_DC_Pin;
 8001e18:	f44f 6308 	mov.w	r3, #2176	; 0x880
 8001e1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e26:	2300      	movs	r3, #0
 8001e28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e2a:	f107 0314 	add.w	r3, r7, #20
 8001e2e:	4619      	mov	r1, r3
 8001e30:	481e      	ldr	r0, [pc, #120]	; (8001eac <MX_GPIO_Init+0x1f0>)
 8001e32:	f000 fd1d 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pin : BAT_GPOUT_Pin */
  GPIO_InitStruct.Pin = BAT_GPOUT_Pin;
 8001e36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e3c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BAT_GPOUT_GPIO_Port, &GPIO_InitStruct);
 8001e46:	f107 0314 	add.w	r3, r7, #20
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4817      	ldr	r0, [pc, #92]	; (8001eac <MX_GPIO_Init+0x1f0>)
 8001e4e:	f000 fd0f 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_Reset_Pin */
  GPIO_InitStruct.Pin = LCD_Reset_Pin;
 8001e52:	2304      	movs	r3, #4
 8001e54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e56:	2301      	movs	r3, #1
 8001e58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_Reset_GPIO_Port, &GPIO_InitStruct);
 8001e62:	f107 0314 	add.w	r3, r7, #20
 8001e66:	4619      	mov	r1, r3
 8001e68:	4811      	ldr	r0, [pc, #68]	; (8001eb0 <MX_GPIO_Init+0x1f4>)
 8001e6a:	f000 fd01 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pins : Row0_Pin Row1_Pin Row2_Pin Row3_Pin
                           Button17_Pin Button18_Pin */
  GPIO_InitStruct.Pin = Row0_Pin|Row1_Pin|Row2_Pin|Row3_Pin
 8001e6e:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8001e72:	617b      	str	r3, [r7, #20]
                          |Button17_Pin|Button18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e74:	2300      	movs	r3, #0
 8001e76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7c:	f107 0314 	add.w	r3, r7, #20
 8001e80:	4619      	mov	r1, r3
 8001e82:	4809      	ldr	r0, [pc, #36]	; (8001ea8 <MX_GPIO_Init+0x1ec>)
 8001e84:	f000 fcf4 	bl	8002870 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	2017      	movs	r0, #23
 8001e8e:	f000 fcb4 	bl	80027fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001e92:	2017      	movs	r0, #23
 8001e94:	f000 fccd 	bl	8002832 <HAL_NVIC_EnableIRQ>

}
 8001e98:	bf00      	nop
 8001e9a:	3728      	adds	r7, #40	; 0x28
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40020000 	.word	0x40020000
 8001ea8:	40020400 	.word	0x40020400
 8001eac:	40020800 	.word	0x40020800
 8001eb0:	40020c00 	.word	0x40020c00

08001eb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eb8:	b672      	cpsid	i
}
 8001eba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ebc:	e7fe      	b.n	8001ebc <Error_Handler+0x8>
	...

08001ec0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	607b      	str	r3, [r7, #4]
 8001eca:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <HAL_MspInit+0x4c>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ece:	4a0f      	ldr	r2, [pc, #60]	; (8001f0c <HAL_MspInit+0x4c>)
 8001ed0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ed6:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <HAL_MspInit+0x4c>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ede:	607b      	str	r3, [r7, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	603b      	str	r3, [r7, #0]
 8001ee6:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <HAL_MspInit+0x4c>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	4a08      	ldr	r2, [pc, #32]	; (8001f0c <HAL_MspInit+0x4c>)
 8001eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_MspInit+0x4c>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efa:	603b      	str	r3, [r7, #0]
 8001efc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800

08001f10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08a      	sub	sp, #40	; 0x28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a29      	ldr	r2, [pc, #164]	; (8001fd4 <HAL_I2C_MspInit+0xc4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d14b      	bne.n	8001fca <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	4b28      	ldr	r3, [pc, #160]	; (8001fd8 <HAL_I2C_MspInit+0xc8>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4a27      	ldr	r2, [pc, #156]	; (8001fd8 <HAL_I2C_MspInit+0xc8>)
 8001f3c:	f043 0304 	orr.w	r3, r3, #4
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
 8001f42:	4b25      	ldr	r3, [pc, #148]	; (8001fd8 <HAL_I2C_MspInit+0xc8>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f003 0304 	and.w	r3, r3, #4
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	4b21      	ldr	r3, [pc, #132]	; (8001fd8 <HAL_I2C_MspInit+0xc8>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	4a20      	ldr	r2, [pc, #128]	; (8001fd8 <HAL_I2C_MspInit+0xc8>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5e:	4b1e      	ldr	r3, [pc, #120]	; (8001fd8 <HAL_I2C_MspInit+0xc8>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = BAT_SDA_Pin;
 8001f6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f70:	2312      	movs	r3, #18
 8001f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f7c:	2304      	movs	r3, #4
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BAT_SDA_GPIO_Port, &GPIO_InitStruct);
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	4619      	mov	r1, r3
 8001f86:	4815      	ldr	r0, [pc, #84]	; (8001fdc <HAL_I2C_MspInit+0xcc>)
 8001f88:	f000 fc72 	bl	8002870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BAT_SCL_Pin;
 8001f8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f92:	2312      	movs	r3, #18
 8001f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f9e:	2304      	movs	r3, #4
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BAT_SCL_GPIO_Port, &GPIO_InitStruct);
 8001fa2:	f107 0314 	add.w	r3, r7, #20
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	480d      	ldr	r0, [pc, #52]	; (8001fe0 <HAL_I2C_MspInit+0xd0>)
 8001faa:	f000 fc61 	bl	8002870 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60bb      	str	r3, [r7, #8]
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <HAL_I2C_MspInit+0xc8>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	4a08      	ldr	r2, [pc, #32]	; (8001fd8 <HAL_I2C_MspInit+0xc8>)
 8001fb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fbe:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <HAL_I2C_MspInit+0xc8>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fc6:	60bb      	str	r3, [r7, #8]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001fca:	bf00      	nop
 8001fcc:	3728      	adds	r7, #40	; 0x28
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40005c00 	.word	0x40005c00
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40020800 	.word	0x40020800
 8001fe0:	40020000 	.word	0x40020000

08001fe4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08c      	sub	sp, #48	; 0x30
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	f107 031c 	add.w	r3, r7, #28
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a3b      	ldr	r2, [pc, #236]	; (80020f0 <HAL_SPI_MspInit+0x10c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d13e      	bne.n	8002084 <HAL_SPI_MspInit+0xa0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	61bb      	str	r3, [r7, #24]
 800200a:	4b3a      	ldr	r3, [pc, #232]	; (80020f4 <HAL_SPI_MspInit+0x110>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	4a39      	ldr	r2, [pc, #228]	; (80020f4 <HAL_SPI_MspInit+0x110>)
 8002010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002014:	6413      	str	r3, [r2, #64]	; 0x40
 8002016:	4b37      	ldr	r3, [pc, #220]	; (80020f4 <HAL_SPI_MspInit+0x110>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800201e:	61bb      	str	r3, [r7, #24]
 8002020:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
 8002026:	4b33      	ldr	r3, [pc, #204]	; (80020f4 <HAL_SPI_MspInit+0x110>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	4a32      	ldr	r2, [pc, #200]	; (80020f4 <HAL_SPI_MspInit+0x110>)
 800202c:	f043 0302 	orr.w	r3, r3, #2
 8002030:	6313      	str	r3, [r2, #48]	; 0x30
 8002032:	4b30      	ldr	r3, [pc, #192]	; (80020f4 <HAL_SPI_MspInit+0x110>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	617b      	str	r3, [r7, #20]
 800203c:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin;
 800203e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002044:	2302      	movs	r3, #2
 8002046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204c:	2303      	movs	r3, #3
 800204e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002050:	2305      	movs	r3, #5
 8002052:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SD_SCK_GPIO_Port, &GPIO_InitStruct);
 8002054:	f107 031c 	add.w	r3, r7, #28
 8002058:	4619      	mov	r1, r3
 800205a:	4827      	ldr	r0, [pc, #156]	; (80020f8 <HAL_SPI_MspInit+0x114>)
 800205c:	f000 fc08 	bl	8002870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_MISO_Pin|SD_MOSI_Pin;
 8002060:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002066:	2302      	movs	r3, #2
 8002068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800206a:	2301      	movs	r3, #1
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206e:	2303      	movs	r3, #3
 8002070:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002072:	2305      	movs	r3, #5
 8002074:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002076:	f107 031c 	add.w	r3, r7, #28
 800207a:	4619      	mov	r1, r3
 800207c:	481e      	ldr	r0, [pc, #120]	; (80020f8 <HAL_SPI_MspInit+0x114>)
 800207e:	f000 fbf7 	bl	8002870 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002082:	e031      	b.n	80020e8 <HAL_SPI_MspInit+0x104>
  else if(hspi->Instance==SPI3)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a1c      	ldr	r2, [pc, #112]	; (80020fc <HAL_SPI_MspInit+0x118>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d12c      	bne.n	80020e8 <HAL_SPI_MspInit+0x104>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	613b      	str	r3, [r7, #16]
 8002092:	4b18      	ldr	r3, [pc, #96]	; (80020f4 <HAL_SPI_MspInit+0x110>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	4a17      	ldr	r2, [pc, #92]	; (80020f4 <HAL_SPI_MspInit+0x110>)
 8002098:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800209c:	6413      	str	r3, [r2, #64]	; 0x40
 800209e:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <HAL_SPI_MspInit+0x110>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <HAL_SPI_MspInit+0x110>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	4a10      	ldr	r2, [pc, #64]	; (80020f4 <HAL_SPI_MspInit+0x110>)
 80020b4:	f043 0304 	orr.w	r3, r3, #4
 80020b8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ba:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <HAL_SPI_MspInit+0x110>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	f003 0304 	and.w	r3, r3, #4
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 80020c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80020ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020cc:	2302      	movs	r3, #2
 80020ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d4:	2303      	movs	r3, #3
 80020d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80020d8:	2306      	movs	r3, #6
 80020da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020dc:	f107 031c 	add.w	r3, r7, #28
 80020e0:	4619      	mov	r1, r3
 80020e2:	4807      	ldr	r0, [pc, #28]	; (8002100 <HAL_SPI_MspInit+0x11c>)
 80020e4:	f000 fbc4 	bl	8002870 <HAL_GPIO_Init>
}
 80020e8:	bf00      	nop
 80020ea:	3730      	adds	r7, #48	; 0x30
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40003800 	.word	0x40003800
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40020400 	.word	0x40020400
 80020fc:	40003c00 	.word	0x40003c00
 8002100:	40020800 	.word	0x40020800

08002104 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002114:	d116      	bne.n	8002144 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <HAL_TIM_Base_MspInit+0x80>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	4a19      	ldr	r2, [pc, #100]	; (8002184 <HAL_TIM_Base_MspInit+0x80>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	6413      	str	r3, [r2, #64]	; 0x40
 8002126:	4b17      	ldr	r3, [pc, #92]	; (8002184 <HAL_TIM_Base_MspInit+0x80>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002132:	2200      	movs	r2, #0
 8002134:	2100      	movs	r1, #0
 8002136:	201c      	movs	r0, #28
 8002138:	f000 fb5f 	bl	80027fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800213c:	201c      	movs	r0, #28
 800213e:	f000 fb78 	bl	8002832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002142:	e01a      	b.n	800217a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a0f      	ldr	r2, [pc, #60]	; (8002188 <HAL_TIM_Base_MspInit+0x84>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d115      	bne.n	800217a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <HAL_TIM_Base_MspInit+0x80>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	4a0b      	ldr	r2, [pc, #44]	; (8002184 <HAL_TIM_Base_MspInit+0x80>)
 8002158:	f043 0302 	orr.w	r3, r3, #2
 800215c:	6413      	str	r3, [r2, #64]	; 0x40
 800215e:	4b09      	ldr	r3, [pc, #36]	; (8002184 <HAL_TIM_Base_MspInit+0x80>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	60bb      	str	r3, [r7, #8]
 8002168:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800216a:	2200      	movs	r2, #0
 800216c:	2100      	movs	r1, #0
 800216e:	201d      	movs	r0, #29
 8002170:	f000 fb43 	bl	80027fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002174:	201d      	movs	r0, #29
 8002176:	f000 fb5c 	bl	8002832 <HAL_NVIC_EnableIRQ>
}
 800217a:	bf00      	nop
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40023800 	.word	0x40023800
 8002188:	40000400 	.word	0x40000400

0800218c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08c      	sub	sp, #48	; 0x30
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002194:	f107 031c 	add.w	r3, r7, #28
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a32      	ldr	r2, [pc, #200]	; (8002274 <HAL_UART_MspInit+0xe8>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d12d      	bne.n	800220a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	61bb      	str	r3, [r7, #24]
 80021b2:	4b31      	ldr	r3, [pc, #196]	; (8002278 <HAL_UART_MspInit+0xec>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	4a30      	ldr	r2, [pc, #192]	; (8002278 <HAL_UART_MspInit+0xec>)
 80021b8:	f043 0310 	orr.w	r3, r3, #16
 80021bc:	6453      	str	r3, [r2, #68]	; 0x44
 80021be:	4b2e      	ldr	r3, [pc, #184]	; (8002278 <HAL_UART_MspInit+0xec>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	f003 0310 	and.w	r3, r3, #16
 80021c6:	61bb      	str	r3, [r7, #24]
 80021c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	4b2a      	ldr	r3, [pc, #168]	; (8002278 <HAL_UART_MspInit+0xec>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	4a29      	ldr	r2, [pc, #164]	; (8002278 <HAL_UART_MspInit+0xec>)
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	6313      	str	r3, [r2, #48]	; 0x30
 80021da:	4b27      	ldr	r3, [pc, #156]	; (8002278 <HAL_UART_MspInit+0xec>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	617b      	str	r3, [r7, #20]
 80021e4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
 80021e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80021ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ec:	2302      	movs	r3, #2
 80021ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f4:	2303      	movs	r3, #3
 80021f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021f8:	2307      	movs	r3, #7
 80021fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fc:	f107 031c 	add.w	r3, r7, #28
 8002200:	4619      	mov	r1, r3
 8002202:	481e      	ldr	r0, [pc, #120]	; (800227c <HAL_UART_MspInit+0xf0>)
 8002204:	f000 fb34 	bl	8002870 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002208:	e030      	b.n	800226c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a1c      	ldr	r2, [pc, #112]	; (8002280 <HAL_UART_MspInit+0xf4>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d12b      	bne.n	800226c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002214:	2300      	movs	r3, #0
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	4b17      	ldr	r3, [pc, #92]	; (8002278 <HAL_UART_MspInit+0xec>)
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	4a16      	ldr	r2, [pc, #88]	; (8002278 <HAL_UART_MspInit+0xec>)
 800221e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002222:	6413      	str	r3, [r2, #64]	; 0x40
 8002224:	4b14      	ldr	r3, [pc, #80]	; (8002278 <HAL_UART_MspInit+0xec>)
 8002226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222c:	613b      	str	r3, [r7, #16]
 800222e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002230:	2300      	movs	r3, #0
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	4b10      	ldr	r3, [pc, #64]	; (8002278 <HAL_UART_MspInit+0xec>)
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002238:	4a0f      	ldr	r2, [pc, #60]	; (8002278 <HAL_UART_MspInit+0xec>)
 800223a:	f043 0301 	orr.w	r3, r3, #1
 800223e:	6313      	str	r3, [r2, #48]	; 0x30
 8002240:	4b0d      	ldr	r3, [pc, #52]	; (8002278 <HAL_UART_MspInit+0xec>)
 8002242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BT_TX_Pin|BT_RX_Pin;
 800224c:	230c      	movs	r3, #12
 800224e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002250:	2302      	movs	r3, #2
 8002252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002258:	2303      	movs	r3, #3
 800225a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800225c:	2307      	movs	r3, #7
 800225e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002260:	f107 031c 	add.w	r3, r7, #28
 8002264:	4619      	mov	r1, r3
 8002266:	4805      	ldr	r0, [pc, #20]	; (800227c <HAL_UART_MspInit+0xf0>)
 8002268:	f000 fb02 	bl	8002870 <HAL_GPIO_Init>
}
 800226c:	bf00      	nop
 800226e:	3730      	adds	r7, #48	; 0x30
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40011000 	.word	0x40011000
 8002278:	40023800 	.word	0x40023800
 800227c:	40020000 	.word	0x40020000
 8002280:	40004400 	.word	0x40004400

08002284 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002288:	e7fe      	b.n	8002288 <NMI_Handler+0x4>

0800228a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800228a:	b480      	push	{r7}
 800228c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800228e:	e7fe      	b.n	800228e <HardFault_Handler+0x4>

08002290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002294:	e7fe      	b.n	8002294 <MemManage_Handler+0x4>

08002296 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002296:	b480      	push	{r7}
 8002298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800229a:	e7fe      	b.n	800229a <BusFault_Handler+0x4>

0800229c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022a0:	e7fe      	b.n	80022a0 <UsageFault_Handler+0x4>

080022a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022a2:	b480      	push	{r7}
 80022a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022a6:	bf00      	nop
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022d0:	f000 f95e 	bl	8002590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022d4:	bf00      	nop
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_Detect_Pin);
 80022dc:	2020      	movs	r0, #32
 80022de:	f000 fc7d 	bl	8002bdc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BAT_GPOUT_Pin);
 80022e2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80022e6:	f000 fc79 	bl	8002bdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022f4:	4802      	ldr	r0, [pc, #8]	; (8002300 <TIM2_IRQHandler+0x10>)
 80022f6:	f004 fb1d 	bl	8006934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	200002b0 	.word	0x200002b0

08002304 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002308:	4802      	ldr	r0, [pc, #8]	; (8002314 <TIM3_IRQHandler+0x10>)
 800230a:	f004 fb13 	bl	8006934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	200002f8 	.word	0x200002f8

08002318 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800231c:	4802      	ldr	r0, [pc, #8]	; (8002328 <OTG_FS_IRQHandler+0x10>)
 800231e:	f002 f878 	bl	8004412 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	20000db4 	.word	0x20000db4

0800232c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	e00a      	b.n	8002354 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800233e:	f3af 8000 	nop.w
 8002342:	4601      	mov	r1, r0
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	60ba      	str	r2, [r7, #8]
 800234a:	b2ca      	uxtb	r2, r1
 800234c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	3301      	adds	r3, #1
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	429a      	cmp	r2, r3
 800235a:	dbf0      	blt.n	800233e <_read+0x12>
  }

  return len;
 800235c:	687b      	ldr	r3, [r7, #4]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b086      	sub	sp, #24
 800236a:	af00      	add	r7, sp, #0
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	e009      	b.n	800238c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	60ba      	str	r2, [r7, #8]
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe fc5d 	bl	8000c40 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	3301      	adds	r3, #1
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	429a      	cmp	r2, r3
 8002392:	dbf1      	blt.n	8002378 <_write+0x12>
  }
  return len;
 8002394:	687b      	ldr	r3, [r7, #4]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <_close>:

int _close(int file)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
 80023be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023c6:	605a      	str	r2, [r3, #4]
  return 0;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <_isatty>:

int _isatty(int file)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023de:	2301      	movs	r3, #1
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
	...

08002408 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002410:	4a14      	ldr	r2, [pc, #80]	; (8002464 <_sbrk+0x5c>)
 8002412:	4b15      	ldr	r3, [pc, #84]	; (8002468 <_sbrk+0x60>)
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800241c:	4b13      	ldr	r3, [pc, #76]	; (800246c <_sbrk+0x64>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d102      	bne.n	800242a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002424:	4b11      	ldr	r3, [pc, #68]	; (800246c <_sbrk+0x64>)
 8002426:	4a12      	ldr	r2, [pc, #72]	; (8002470 <_sbrk+0x68>)
 8002428:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800242a:	4b10      	ldr	r3, [pc, #64]	; (800246c <_sbrk+0x64>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4413      	add	r3, r2
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	429a      	cmp	r2, r3
 8002436:	d207      	bcs.n	8002448 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002438:	f00c f85a 	bl	800e4f0 <__errno>
 800243c:	4603      	mov	r3, r0
 800243e:	220c      	movs	r2, #12
 8002440:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002442:	f04f 33ff 	mov.w	r3, #4294967295
 8002446:	e009      	b.n	800245c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002448:	4b08      	ldr	r3, [pc, #32]	; (800246c <_sbrk+0x64>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800244e:	4b07      	ldr	r3, [pc, #28]	; (800246c <_sbrk+0x64>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4413      	add	r3, r2
 8002456:	4a05      	ldr	r2, [pc, #20]	; (800246c <_sbrk+0x64>)
 8002458:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800245a:	68fb      	ldr	r3, [r7, #12]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	20020000 	.word	0x20020000
 8002468:	00000400 	.word	0x00000400
 800246c:	20000884 	.word	0x20000884
 8002470:	200012e8 	.word	0x200012e8

08002474 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <SystemInit+0x20>)
 800247a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247e:	4a05      	ldr	r2, [pc, #20]	; (8002494 <SystemInit+0x20>)
 8002480:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002484:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002498:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800249c:	480d      	ldr	r0, [pc, #52]	; (80024d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800249e:	490e      	ldr	r1, [pc, #56]	; (80024d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024a0:	4a0e      	ldr	r2, [pc, #56]	; (80024dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024a4:	e002      	b.n	80024ac <LoopCopyDataInit>

080024a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024aa:	3304      	adds	r3, #4

080024ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024b0:	d3f9      	bcc.n	80024a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024b2:	4a0b      	ldr	r2, [pc, #44]	; (80024e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024b4:	4c0b      	ldr	r4, [pc, #44]	; (80024e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024b8:	e001      	b.n	80024be <LoopFillZerobss>

080024ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024bc:	3204      	adds	r2, #4

080024be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024c0:	d3fb      	bcc.n	80024ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024c2:	f7ff ffd7 	bl	8002474 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024c6:	f00c f819 	bl	800e4fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024ca:	f7ff f8cb 	bl	8001664 <main>
  bx  lr    
 80024ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80024d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024d8:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 80024dc:	0801183c 	.word	0x0801183c
  ldr r2, =_sbss
 80024e0:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 80024e4:	200012e4 	.word	0x200012e4

080024e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024e8:	e7fe      	b.n	80024e8 <ADC_IRQHandler>
	...

080024ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024f0:	4b0e      	ldr	r3, [pc, #56]	; (800252c <HAL_Init+0x40>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a0d      	ldr	r2, [pc, #52]	; (800252c <HAL_Init+0x40>)
 80024f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <HAL_Init+0x40>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a0a      	ldr	r2, [pc, #40]	; (800252c <HAL_Init+0x40>)
 8002502:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002506:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002508:	4b08      	ldr	r3, [pc, #32]	; (800252c <HAL_Init+0x40>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a07      	ldr	r2, [pc, #28]	; (800252c <HAL_Init+0x40>)
 800250e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002512:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002514:	2003      	movs	r0, #3
 8002516:	f000 f965 	bl	80027e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800251a:	200f      	movs	r0, #15
 800251c:	f000 f808 	bl	8002530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002520:	f7ff fcce 	bl	8001ec0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40023c00 	.word	0x40023c00

08002530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002538:	4b12      	ldr	r3, [pc, #72]	; (8002584 <HAL_InitTick+0x54>)
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	4b12      	ldr	r3, [pc, #72]	; (8002588 <HAL_InitTick+0x58>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	4619      	mov	r1, r3
 8002542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002546:	fbb3 f3f1 	udiv	r3, r3, r1
 800254a:	fbb2 f3f3 	udiv	r3, r2, r3
 800254e:	4618      	mov	r0, r3
 8002550:	f000 f981 	bl	8002856 <HAL_SYSTICK_Config>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e00e      	b.n	800257c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b0f      	cmp	r3, #15
 8002562:	d80a      	bhi.n	800257a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002564:	2200      	movs	r2, #0
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	f04f 30ff 	mov.w	r0, #4294967295
 800256c:	f000 f945 	bl	80027fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002570:	4a06      	ldr	r2, [pc, #24]	; (800258c <HAL_InitTick+0x5c>)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	e000      	b.n	800257c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
}
 800257c:	4618      	mov	r0, r3
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	20000020 	.word	0x20000020
 8002588:	20000028 	.word	0x20000028
 800258c:	20000024 	.word	0x20000024

08002590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002594:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <HAL_IncTick+0x20>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	461a      	mov	r2, r3
 800259a:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <HAL_IncTick+0x24>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4413      	add	r3, r2
 80025a0:	4a04      	ldr	r2, [pc, #16]	; (80025b4 <HAL_IncTick+0x24>)
 80025a2:	6013      	str	r3, [r2, #0]
}
 80025a4:	bf00      	nop
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	20000028 	.word	0x20000028
 80025b4:	20000888 	.word	0x20000888

080025b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return uwTick;
 80025bc:	4b03      	ldr	r3, [pc, #12]	; (80025cc <HAL_GetTick+0x14>)
 80025be:	681b      	ldr	r3, [r3, #0]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	20000888 	.word	0x20000888

080025d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025d8:	f7ff ffee 	bl	80025b8 <HAL_GetTick>
 80025dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e8:	d005      	beq.n	80025f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ea:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <HAL_Delay+0x44>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	461a      	mov	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4413      	add	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025f6:	bf00      	nop
 80025f8:	f7ff ffde 	bl	80025b8 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	429a      	cmp	r2, r3
 8002606:	d8f7      	bhi.n	80025f8 <HAL_Delay+0x28>
  {
  }
}
 8002608:	bf00      	nop
 800260a:	bf00      	nop
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20000028 	.word	0x20000028

08002618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002628:	4b0c      	ldr	r3, [pc, #48]	; (800265c <__NVIC_SetPriorityGrouping+0x44>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002634:	4013      	ands	r3, r2
 8002636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800264a:	4a04      	ldr	r2, [pc, #16]	; (800265c <__NVIC_SetPriorityGrouping+0x44>)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	60d3      	str	r3, [r2, #12]
}
 8002650:	bf00      	nop
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002664:	4b04      	ldr	r3, [pc, #16]	; (8002678 <__NVIC_GetPriorityGrouping+0x18>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	0a1b      	lsrs	r3, r3, #8
 800266a:	f003 0307 	and.w	r3, r3, #7
}
 800266e:	4618      	mov	r0, r3
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	e000ed00 	.word	0xe000ed00

0800267c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268a:	2b00      	cmp	r3, #0
 800268c:	db0b      	blt.n	80026a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800268e:	79fb      	ldrb	r3, [r7, #7]
 8002690:	f003 021f 	and.w	r2, r3, #31
 8002694:	4907      	ldr	r1, [pc, #28]	; (80026b4 <__NVIC_EnableIRQ+0x38>)
 8002696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269a:	095b      	lsrs	r3, r3, #5
 800269c:	2001      	movs	r0, #1
 800269e:	fa00 f202 	lsl.w	r2, r0, r2
 80026a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	e000e100 	.word	0xe000e100

080026b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	6039      	str	r1, [r7, #0]
 80026c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	db0a      	blt.n	80026e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	490c      	ldr	r1, [pc, #48]	; (8002704 <__NVIC_SetPriority+0x4c>)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	0112      	lsls	r2, r2, #4
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	440b      	add	r3, r1
 80026dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026e0:	e00a      	b.n	80026f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	4908      	ldr	r1, [pc, #32]	; (8002708 <__NVIC_SetPriority+0x50>)
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	3b04      	subs	r3, #4
 80026f0:	0112      	lsls	r2, r2, #4
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	440b      	add	r3, r1
 80026f6:	761a      	strb	r2, [r3, #24]
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	e000e100 	.word	0xe000e100
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800270c:	b480      	push	{r7}
 800270e:	b089      	sub	sp, #36	; 0x24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f1c3 0307 	rsb	r3, r3, #7
 8002726:	2b04      	cmp	r3, #4
 8002728:	bf28      	it	cs
 800272a:	2304      	movcs	r3, #4
 800272c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3304      	adds	r3, #4
 8002732:	2b06      	cmp	r3, #6
 8002734:	d902      	bls.n	800273c <NVIC_EncodePriority+0x30>
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	3b03      	subs	r3, #3
 800273a:	e000      	b.n	800273e <NVIC_EncodePriority+0x32>
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002740:	f04f 32ff 	mov.w	r2, #4294967295
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43da      	mvns	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	401a      	ands	r2, r3
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002754:	f04f 31ff 	mov.w	r1, #4294967295
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	fa01 f303 	lsl.w	r3, r1, r3
 800275e:	43d9      	mvns	r1, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002764:	4313      	orrs	r3, r2
         );
}
 8002766:	4618      	mov	r0, r3
 8002768:	3724      	adds	r7, #36	; 0x24
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
	...

08002774 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002778:	f3bf 8f4f 	dsb	sy
}
 800277c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800277e:	4b06      	ldr	r3, [pc, #24]	; (8002798 <__NVIC_SystemReset+0x24>)
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002786:	4904      	ldr	r1, [pc, #16]	; (8002798 <__NVIC_SystemReset+0x24>)
 8002788:	4b04      	ldr	r3, [pc, #16]	; (800279c <__NVIC_SystemReset+0x28>)
 800278a:	4313      	orrs	r3, r2
 800278c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800278e:	f3bf 8f4f 	dsb	sy
}
 8002792:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002794:	bf00      	nop
 8002796:	e7fd      	b.n	8002794 <__NVIC_SystemReset+0x20>
 8002798:	e000ed00 	.word	0xe000ed00
 800279c:	05fa0004 	.word	0x05fa0004

080027a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027b0:	d301      	bcc.n	80027b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027b2:	2301      	movs	r3, #1
 80027b4:	e00f      	b.n	80027d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027b6:	4a0a      	ldr	r2, [pc, #40]	; (80027e0 <SysTick_Config+0x40>)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3b01      	subs	r3, #1
 80027bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027be:	210f      	movs	r1, #15
 80027c0:	f04f 30ff 	mov.w	r0, #4294967295
 80027c4:	f7ff ff78 	bl	80026b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027c8:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <SysTick_Config+0x40>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ce:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <SysTick_Config+0x40>)
 80027d0:	2207      	movs	r2, #7
 80027d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	e000e010 	.word	0xe000e010

080027e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7ff ff13 	bl	8002618 <__NVIC_SetPriorityGrouping>
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b086      	sub	sp, #24
 80027fe:	af00      	add	r7, sp, #0
 8002800:	4603      	mov	r3, r0
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	607a      	str	r2, [r7, #4]
 8002806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002808:	2300      	movs	r3, #0
 800280a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800280c:	f7ff ff28 	bl	8002660 <__NVIC_GetPriorityGrouping>
 8002810:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	68b9      	ldr	r1, [r7, #8]
 8002816:	6978      	ldr	r0, [r7, #20]
 8002818:	f7ff ff78 	bl	800270c <NVIC_EncodePriority>
 800281c:	4602      	mov	r2, r0
 800281e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002822:	4611      	mov	r1, r2
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff ff47 	bl	80026b8 <__NVIC_SetPriority>
}
 800282a:	bf00      	nop
 800282c:	3718      	adds	r7, #24
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b082      	sub	sp, #8
 8002836:	af00      	add	r7, sp, #0
 8002838:	4603      	mov	r3, r0
 800283a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800283c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff ff1b 	bl	800267c <__NVIC_EnableIRQ>
}
 8002846:	bf00      	nop
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002852:	f7ff ff8f 	bl	8002774 <__NVIC_SystemReset>

08002856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7ff ff9e 	bl	80027a0 <SysTick_Config>
 8002864:	4603      	mov	r3, r0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002870:	b480      	push	{r7}
 8002872:	b089      	sub	sp, #36	; 0x24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800287a:	2300      	movs	r3, #0
 800287c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800287e:	2300      	movs	r3, #0
 8002880:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002882:	2300      	movs	r3, #0
 8002884:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002886:	2300      	movs	r3, #0
 8002888:	61fb      	str	r3, [r7, #28]
 800288a:	e159      	b.n	8002b40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800288c:	2201      	movs	r2, #1
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	4013      	ands	r3, r2
 800289e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	f040 8148 	bne.w	8002b3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f003 0303 	and.w	r3, r3, #3
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d005      	beq.n	80028c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d130      	bne.n	8002924 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	2203      	movs	r2, #3
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43db      	mvns	r3, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4013      	ands	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028f8:	2201      	movs	r2, #1
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4013      	ands	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	091b      	lsrs	r3, r3, #4
 800290e:	f003 0201 	and.w	r2, r3, #1
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4313      	orrs	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 0303 	and.w	r3, r3, #3
 800292c:	2b03      	cmp	r3, #3
 800292e:	d017      	beq.n	8002960 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	2203      	movs	r2, #3
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4313      	orrs	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 0303 	and.w	r3, r3, #3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d123      	bne.n	80029b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	08da      	lsrs	r2, r3, #3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3208      	adds	r2, #8
 8002974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002978:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	220f      	movs	r2, #15
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4013      	ands	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	691a      	ldr	r2, [r3, #16]
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	08da      	lsrs	r2, r3, #3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3208      	adds	r2, #8
 80029ae:	69b9      	ldr	r1, [r7, #24]
 80029b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	2203      	movs	r2, #3
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f003 0203 	and.w	r2, r3, #3
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4313      	orrs	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 80a2 	beq.w	8002b3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	4b57      	ldr	r3, [pc, #348]	; (8002b58 <HAL_GPIO_Init+0x2e8>)
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	4a56      	ldr	r2, [pc, #344]	; (8002b58 <HAL_GPIO_Init+0x2e8>)
 8002a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a04:	6453      	str	r3, [r2, #68]	; 0x44
 8002a06:	4b54      	ldr	r3, [pc, #336]	; (8002b58 <HAL_GPIO_Init+0x2e8>)
 8002a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a12:	4a52      	ldr	r2, [pc, #328]	; (8002b5c <HAL_GPIO_Init+0x2ec>)
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	089b      	lsrs	r3, r3, #2
 8002a18:	3302      	adds	r3, #2
 8002a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	220f      	movs	r2, #15
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4013      	ands	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a49      	ldr	r2, [pc, #292]	; (8002b60 <HAL_GPIO_Init+0x2f0>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d019      	beq.n	8002a72 <HAL_GPIO_Init+0x202>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a48      	ldr	r2, [pc, #288]	; (8002b64 <HAL_GPIO_Init+0x2f4>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d013      	beq.n	8002a6e <HAL_GPIO_Init+0x1fe>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a47      	ldr	r2, [pc, #284]	; (8002b68 <HAL_GPIO_Init+0x2f8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d00d      	beq.n	8002a6a <HAL_GPIO_Init+0x1fa>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a46      	ldr	r2, [pc, #280]	; (8002b6c <HAL_GPIO_Init+0x2fc>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d007      	beq.n	8002a66 <HAL_GPIO_Init+0x1f6>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a45      	ldr	r2, [pc, #276]	; (8002b70 <HAL_GPIO_Init+0x300>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d101      	bne.n	8002a62 <HAL_GPIO_Init+0x1f2>
 8002a5e:	2304      	movs	r3, #4
 8002a60:	e008      	b.n	8002a74 <HAL_GPIO_Init+0x204>
 8002a62:	2307      	movs	r3, #7
 8002a64:	e006      	b.n	8002a74 <HAL_GPIO_Init+0x204>
 8002a66:	2303      	movs	r3, #3
 8002a68:	e004      	b.n	8002a74 <HAL_GPIO_Init+0x204>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	e002      	b.n	8002a74 <HAL_GPIO_Init+0x204>
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <HAL_GPIO_Init+0x204>
 8002a72:	2300      	movs	r3, #0
 8002a74:	69fa      	ldr	r2, [r7, #28]
 8002a76:	f002 0203 	and.w	r2, r2, #3
 8002a7a:	0092      	lsls	r2, r2, #2
 8002a7c:	4093      	lsls	r3, r2
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a84:	4935      	ldr	r1, [pc, #212]	; (8002b5c <HAL_GPIO_Init+0x2ec>)
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	089b      	lsrs	r3, r3, #2
 8002a8a:	3302      	adds	r3, #2
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a92:	4b38      	ldr	r3, [pc, #224]	; (8002b74 <HAL_GPIO_Init+0x304>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ab6:	4a2f      	ldr	r2, [pc, #188]	; (8002b74 <HAL_GPIO_Init+0x304>)
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002abc:	4b2d      	ldr	r3, [pc, #180]	; (8002b74 <HAL_GPIO_Init+0x304>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ae0:	4a24      	ldr	r2, [pc, #144]	; (8002b74 <HAL_GPIO_Init+0x304>)
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ae6:	4b23      	ldr	r3, [pc, #140]	; (8002b74 <HAL_GPIO_Init+0x304>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	43db      	mvns	r3, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4013      	ands	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b0a:	4a1a      	ldr	r2, [pc, #104]	; (8002b74 <HAL_GPIO_Init+0x304>)
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b10:	4b18      	ldr	r3, [pc, #96]	; (8002b74 <HAL_GPIO_Init+0x304>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b34:	4a0f      	ldr	r2, [pc, #60]	; (8002b74 <HAL_GPIO_Init+0x304>)
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	61fb      	str	r3, [r7, #28]
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	2b0f      	cmp	r3, #15
 8002b44:	f67f aea2 	bls.w	800288c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b48:	bf00      	nop
 8002b4a:	bf00      	nop
 8002b4c:	3724      	adds	r7, #36	; 0x24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	40013800 	.word	0x40013800
 8002b60:	40020000 	.word	0x40020000
 8002b64:	40020400 	.word	0x40020400
 8002b68:	40020800 	.word	0x40020800
 8002b6c:	40020c00 	.word	0x40020c00
 8002b70:	40021000 	.word	0x40021000
 8002b74:	40013c00 	.word	0x40013c00

08002b78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691a      	ldr	r2, [r3, #16]
 8002b88:	887b      	ldrh	r3, [r7, #2]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d002      	beq.n	8002b96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b90:	2301      	movs	r3, #1
 8002b92:	73fb      	strb	r3, [r7, #15]
 8002b94:	e001      	b.n	8002b9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b96:	2300      	movs	r3, #0
 8002b98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3714      	adds	r7, #20
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	807b      	strh	r3, [r7, #2]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bb8:	787b      	ldrb	r3, [r7, #1]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bbe:	887a      	ldrh	r2, [r7, #2]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bc4:	e003      	b.n	8002bce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bc6:	887b      	ldrh	r3, [r7, #2]
 8002bc8:	041a      	lsls	r2, r3, #16
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	619a      	str	r2, [r3, #24]
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
	...

08002bdc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002be6:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002be8:	695a      	ldr	r2, [r3, #20]
 8002bea:	88fb      	ldrh	r3, [r7, #6]
 8002bec:	4013      	ands	r3, r2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d006      	beq.n	8002c00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bf2:	4a05      	ldr	r2, [pc, #20]	; (8002c08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bf4:	88fb      	ldrh	r3, [r7, #6]
 8002bf6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bf8:	88fb      	ldrh	r3, [r7, #6]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fe fd18 	bl	8001630 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c00:	bf00      	nop
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40013c00 	.word	0x40013c00

08002c0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e12b      	b.n	8002e76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d106      	bne.n	8002c38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7ff f96c 	bl	8001f10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2224      	movs	r2, #36	; 0x24
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0201 	bic.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c70:	f003 f954 	bl	8005f1c <HAL_RCC_GetPCLK1Freq>
 8002c74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	4a81      	ldr	r2, [pc, #516]	; (8002e80 <HAL_I2C_Init+0x274>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d807      	bhi.n	8002c90 <HAL_I2C_Init+0x84>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4a80      	ldr	r2, [pc, #512]	; (8002e84 <HAL_I2C_Init+0x278>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	bf94      	ite	ls
 8002c88:	2301      	movls	r3, #1
 8002c8a:	2300      	movhi	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	e006      	b.n	8002c9e <HAL_I2C_Init+0x92>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4a7d      	ldr	r2, [pc, #500]	; (8002e88 <HAL_I2C_Init+0x27c>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	bf94      	ite	ls
 8002c98:	2301      	movls	r3, #1
 8002c9a:	2300      	movhi	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e0e7      	b.n	8002e76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	4a78      	ldr	r2, [pc, #480]	; (8002e8c <HAL_I2C_Init+0x280>)
 8002caa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cae:	0c9b      	lsrs	r3, r3, #18
 8002cb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68ba      	ldr	r2, [r7, #8]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	4a6a      	ldr	r2, [pc, #424]	; (8002e80 <HAL_I2C_Init+0x274>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d802      	bhi.n	8002ce0 <HAL_I2C_Init+0xd4>
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	e009      	b.n	8002cf4 <HAL_I2C_Init+0xe8>
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ce6:	fb02 f303 	mul.w	r3, r2, r3
 8002cea:	4a69      	ldr	r2, [pc, #420]	; (8002e90 <HAL_I2C_Init+0x284>)
 8002cec:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf0:	099b      	lsrs	r3, r3, #6
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6812      	ldr	r2, [r2, #0]
 8002cf8:	430b      	orrs	r3, r1
 8002cfa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	495c      	ldr	r1, [pc, #368]	; (8002e80 <HAL_I2C_Init+0x274>)
 8002d10:	428b      	cmp	r3, r1
 8002d12:	d819      	bhi.n	8002d48 <HAL_I2C_Init+0x13c>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	1e59      	subs	r1, r3, #1
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d22:	1c59      	adds	r1, r3, #1
 8002d24:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d28:	400b      	ands	r3, r1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00a      	beq.n	8002d44 <HAL_I2C_Init+0x138>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	1e59      	subs	r1, r3, #1
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d42:	e051      	b.n	8002de8 <HAL_I2C_Init+0x1dc>
 8002d44:	2304      	movs	r3, #4
 8002d46:	e04f      	b.n	8002de8 <HAL_I2C_Init+0x1dc>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d111      	bne.n	8002d74 <HAL_I2C_Init+0x168>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	1e58      	subs	r0, r3, #1
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6859      	ldr	r1, [r3, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	440b      	add	r3, r1
 8002d5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d62:	3301      	adds	r3, #1
 8002d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	bf0c      	ite	eq
 8002d6c:	2301      	moveq	r3, #1
 8002d6e:	2300      	movne	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	e012      	b.n	8002d9a <HAL_I2C_Init+0x18e>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	1e58      	subs	r0, r3, #1
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6859      	ldr	r1, [r3, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	0099      	lsls	r1, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	bf0c      	ite	eq
 8002d94:	2301      	moveq	r3, #1
 8002d96:	2300      	movne	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <HAL_I2C_Init+0x196>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e022      	b.n	8002de8 <HAL_I2C_Init+0x1dc>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10e      	bne.n	8002dc8 <HAL_I2C_Init+0x1bc>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	1e58      	subs	r0, r3, #1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6859      	ldr	r1, [r3, #4]
 8002db2:	460b      	mov	r3, r1
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	440b      	add	r3, r1
 8002db8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dc6:	e00f      	b.n	8002de8 <HAL_I2C_Init+0x1dc>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	1e58      	subs	r0, r3, #1
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6859      	ldr	r1, [r3, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	0099      	lsls	r1, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dde:	3301      	adds	r3, #1
 8002de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	6809      	ldr	r1, [r1, #0]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69da      	ldr	r2, [r3, #28]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6911      	ldr	r1, [r2, #16]
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	68d2      	ldr	r2, [r2, #12]
 8002e22:	4311      	orrs	r1, r2
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6812      	ldr	r2, [r2, #0]
 8002e28:	430b      	orrs	r3, r1
 8002e2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	695a      	ldr	r2, [r3, #20]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0201 	orr.w	r2, r2, #1
 8002e56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2220      	movs	r2, #32
 8002e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	000186a0 	.word	0x000186a0
 8002e84:	001e847f 	.word	0x001e847f
 8002e88:	003d08ff 	.word	0x003d08ff
 8002e8c:	431bde83 	.word	0x431bde83
 8002e90:	10624dd3 	.word	0x10624dd3

08002e94 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b08c      	sub	sp, #48	; 0x30
 8002e98:	af02      	add	r7, sp, #8
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	607a      	str	r2, [r7, #4]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	817b      	strh	r3, [r7, #10]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ea8:	f7ff fb86 	bl	80025b8 <HAL_GetTick>
 8002eac:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b20      	cmp	r3, #32
 8002eb8:	f040 820b 	bne.w	80032d2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	2319      	movs	r3, #25
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	497c      	ldr	r1, [pc, #496]	; (80030b8 <HAL_I2C_Master_Receive+0x224>)
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 ff76 	bl	8003db8 <I2C_WaitOnFlagUntilTimeout>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	e1fe      	b.n	80032d4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d101      	bne.n	8002ee4 <HAL_I2C_Master_Receive+0x50>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	e1f7      	b.n	80032d4 <HAL_I2C_Master_Receive+0x440>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d007      	beq.n	8002f0a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f042 0201 	orr.w	r2, r2, #1
 8002f08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2222      	movs	r2, #34	; 0x22
 8002f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2210      	movs	r2, #16
 8002f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	893a      	ldrh	r2, [r7, #8]
 8002f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4a5c      	ldr	r2, [pc, #368]	; (80030bc <HAL_I2C_Master_Receive+0x228>)
 8002f4a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f4c:	8979      	ldrh	r1, [r7, #10]
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 fce4 	bl	8003920 <I2C_MasterRequestRead>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e1b8      	b.n	80032d4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d113      	bne.n	8002f92 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	623b      	str	r3, [r7, #32]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	623b      	str	r3, [r7, #32]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	623b      	str	r3, [r7, #32]
 8002f7e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	e18c      	b.n	80032ac <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d11b      	bne.n	8002fd2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fa8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002faa:	2300      	movs	r3, #0
 8002fac:	61fb      	str	r3, [r7, #28]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	61fb      	str	r3, [r7, #28]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	61fb      	str	r3, [r7, #28]
 8002fbe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	e16c      	b.n	80032ac <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d11b      	bne.n	8003012 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fe8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ff8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61bb      	str	r3, [r7, #24]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	61bb      	str	r3, [r7, #24]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	61bb      	str	r3, [r7, #24]
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	e14c      	b.n	80032ac <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003020:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003022:	2300      	movs	r3, #0
 8003024:	617b      	str	r3, [r7, #20]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	617b      	str	r3, [r7, #20]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	617b      	str	r3, [r7, #20]
 8003036:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003038:	e138      	b.n	80032ac <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303e:	2b03      	cmp	r3, #3
 8003040:	f200 80f1 	bhi.w	8003226 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003048:	2b01      	cmp	r3, #1
 800304a:	d123      	bne.n	8003094 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800304c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800304e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f001 f809 	bl	8004068 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e139      	b.n	80032d4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	691a      	ldr	r2, [r3, #16]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	1c5a      	adds	r2, r3, #1
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307c:	3b01      	subs	r3, #1
 800307e:	b29a      	uxth	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003088:	b29b      	uxth	r3, r3
 800308a:	3b01      	subs	r3, #1
 800308c:	b29a      	uxth	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003092:	e10b      	b.n	80032ac <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003098:	2b02      	cmp	r3, #2
 800309a:	d14e      	bne.n	800313a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a2:	2200      	movs	r2, #0
 80030a4:	4906      	ldr	r1, [pc, #24]	; (80030c0 <HAL_I2C_Master_Receive+0x22c>)
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 fe86 	bl	8003db8 <I2C_WaitOnFlagUntilTimeout>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d008      	beq.n	80030c4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e10e      	b.n	80032d4 <HAL_I2C_Master_Receive+0x440>
 80030b6:	bf00      	nop
 80030b8:	00100002 	.word	0x00100002
 80030bc:	ffff0000 	.word	0xffff0000
 80030c0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	691a      	ldr	r2, [r3, #16]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	1c5a      	adds	r2, r3, #1
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	3b01      	subs	r3, #1
 8003100:	b29a      	uxth	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	691a      	ldr	r2, [r3, #16]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	b2d2      	uxtb	r2, r2
 8003112:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	1c5a      	adds	r2, r3, #1
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003122:	3b01      	subs	r3, #1
 8003124:	b29a      	uxth	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312e:	b29b      	uxth	r3, r3
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003138:	e0b8      	b.n	80032ac <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003140:	2200      	movs	r2, #0
 8003142:	4966      	ldr	r1, [pc, #408]	; (80032dc <HAL_I2C_Master_Receive+0x448>)
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 fe37 	bl	8003db8 <I2C_WaitOnFlagUntilTimeout>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e0bf      	b.n	80032d4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003162:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	691a      	ldr	r2, [r3, #16]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	1c5a      	adds	r2, r3, #1
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318c:	b29b      	uxth	r3, r3
 800318e:	3b01      	subs	r3, #1
 8003190:	b29a      	uxth	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319c:	2200      	movs	r2, #0
 800319e:	494f      	ldr	r1, [pc, #316]	; (80032dc <HAL_I2C_Master_Receive+0x448>)
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 fe09 	bl	8003db8 <I2C_WaitOnFlagUntilTimeout>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e091      	b.n	80032d4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	691a      	ldr	r2, [r3, #16]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	1c5a      	adds	r2, r3, #1
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031dc:	3b01      	subs	r3, #1
 80031de:	b29a      	uxth	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	691a      	ldr	r2, [r3, #16]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	1c5a      	adds	r2, r3, #1
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320e:	3b01      	subs	r3, #1
 8003210:	b29a      	uxth	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321a:	b29b      	uxth	r3, r3
 800321c:	3b01      	subs	r3, #1
 800321e:	b29a      	uxth	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003224:	e042      	b.n	80032ac <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003228:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 ff1c 	bl	8004068 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e04c      	b.n	80032d4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	691a      	ldr	r2, [r3, #16]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	b2d2      	uxtb	r2, r2
 8003246:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	1c5a      	adds	r2, r3, #1
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003256:	3b01      	subs	r3, #1
 8003258:	b29a      	uxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003262:	b29b      	uxth	r3, r3
 8003264:	3b01      	subs	r3, #1
 8003266:	b29a      	uxth	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	f003 0304 	and.w	r3, r3, #4
 8003276:	2b04      	cmp	r3, #4
 8003278:	d118      	bne.n	80032ac <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	691a      	ldr	r2, [r3, #16]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003296:	3b01      	subs	r3, #1
 8003298:	b29a      	uxth	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f47f aec2 	bne.w	800303a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2220      	movs	r2, #32
 80032ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032ce:	2300      	movs	r3, #0
 80032d0:	e000      	b.n	80032d4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80032d2:	2302      	movs	r3, #2
  }
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3728      	adds	r7, #40	; 0x28
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	00010004 	.word	0x00010004

080032e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b088      	sub	sp, #32
 80032e4:	af02      	add	r7, sp, #8
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	4608      	mov	r0, r1
 80032ea:	4611      	mov	r1, r2
 80032ec:	461a      	mov	r2, r3
 80032ee:	4603      	mov	r3, r0
 80032f0:	817b      	strh	r3, [r7, #10]
 80032f2:	460b      	mov	r3, r1
 80032f4:	813b      	strh	r3, [r7, #8]
 80032f6:	4613      	mov	r3, r2
 80032f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032fa:	f7ff f95d 	bl	80025b8 <HAL_GetTick>
 80032fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b20      	cmp	r3, #32
 800330a:	f040 80d9 	bne.w	80034c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	2319      	movs	r3, #25
 8003314:	2201      	movs	r2, #1
 8003316:	496d      	ldr	r1, [pc, #436]	; (80034cc <HAL_I2C_Mem_Write+0x1ec>)
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 fd4d 	bl	8003db8 <I2C_WaitOnFlagUntilTimeout>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003324:	2302      	movs	r3, #2
 8003326:	e0cc      	b.n	80034c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_I2C_Mem_Write+0x56>
 8003332:	2302      	movs	r3, #2
 8003334:	e0c5      	b.n	80034c2 <HAL_I2C_Mem_Write+0x1e2>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b01      	cmp	r3, #1
 800334a:	d007      	beq.n	800335c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0201 	orr.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800336a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2221      	movs	r2, #33	; 0x21
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2240      	movs	r2, #64	; 0x40
 8003378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a3a      	ldr	r2, [r7, #32]
 8003386:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800338c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003392:	b29a      	uxth	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4a4d      	ldr	r2, [pc, #308]	; (80034d0 <HAL_I2C_Mem_Write+0x1f0>)
 800339c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800339e:	88f8      	ldrh	r0, [r7, #6]
 80033a0:	893a      	ldrh	r2, [r7, #8]
 80033a2:	8979      	ldrh	r1, [r7, #10]
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	9301      	str	r3, [sp, #4]
 80033a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	4603      	mov	r3, r0
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 fb84 	bl	8003abc <I2C_RequestMemoryWrite>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d052      	beq.n	8003460 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e081      	b.n	80034c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 fdce 	bl	8003f64 <I2C_WaitOnTXEFlagUntilTimeout>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00d      	beq.n	80033ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d107      	bne.n	80033e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e06b      	b.n	80034c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	781a      	ldrb	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	1c5a      	adds	r2, r3, #1
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003404:	3b01      	subs	r3, #1
 8003406:	b29a      	uxth	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003410:	b29b      	uxth	r3, r3
 8003412:	3b01      	subs	r3, #1
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b04      	cmp	r3, #4
 8003426:	d11b      	bne.n	8003460 <HAL_I2C_Mem_Write+0x180>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800342c:	2b00      	cmp	r3, #0
 800342e:	d017      	beq.n	8003460 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	781a      	ldrb	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	1c5a      	adds	r2, r3, #1
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800344a:	3b01      	subs	r3, #1
 800344c:	b29a      	uxth	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003456:	b29b      	uxth	r3, r3
 8003458:	3b01      	subs	r3, #1
 800345a:	b29a      	uxth	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1aa      	bne.n	80033be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f000 fdba 	bl	8003fe6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00d      	beq.n	8003494 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	2b04      	cmp	r3, #4
 800347e:	d107      	bne.n	8003490 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800348e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e016      	b.n	80034c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034bc:	2300      	movs	r3, #0
 80034be:	e000      	b.n	80034c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80034c0:	2302      	movs	r3, #2
  }
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3718      	adds	r7, #24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	00100002 	.word	0x00100002
 80034d0:	ffff0000 	.word	0xffff0000

080034d4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08c      	sub	sp, #48	; 0x30
 80034d8:	af02      	add	r7, sp, #8
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	4608      	mov	r0, r1
 80034de:	4611      	mov	r1, r2
 80034e0:	461a      	mov	r2, r3
 80034e2:	4603      	mov	r3, r0
 80034e4:	817b      	strh	r3, [r7, #10]
 80034e6:	460b      	mov	r3, r1
 80034e8:	813b      	strh	r3, [r7, #8]
 80034ea:	4613      	mov	r3, r2
 80034ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034ee:	f7ff f863 	bl	80025b8 <HAL_GetTick>
 80034f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b20      	cmp	r3, #32
 80034fe:	f040 8208 	bne.w	8003912 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	2319      	movs	r3, #25
 8003508:	2201      	movs	r2, #1
 800350a:	497b      	ldr	r1, [pc, #492]	; (80036f8 <HAL_I2C_Mem_Read+0x224>)
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 fc53 	bl	8003db8 <I2C_WaitOnFlagUntilTimeout>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003518:	2302      	movs	r3, #2
 800351a:	e1fb      	b.n	8003914 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003522:	2b01      	cmp	r3, #1
 8003524:	d101      	bne.n	800352a <HAL_I2C_Mem_Read+0x56>
 8003526:	2302      	movs	r3, #2
 8003528:	e1f4      	b.n	8003914 <HAL_I2C_Mem_Read+0x440>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b01      	cmp	r3, #1
 800353e:	d007      	beq.n	8003550 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0201 	orr.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800355e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2222      	movs	r2, #34	; 0x22
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2240      	movs	r2, #64	; 0x40
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800357a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003580:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4a5b      	ldr	r2, [pc, #364]	; (80036fc <HAL_I2C_Mem_Read+0x228>)
 8003590:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003592:	88f8      	ldrh	r0, [r7, #6]
 8003594:	893a      	ldrh	r2, [r7, #8]
 8003596:	8979      	ldrh	r1, [r7, #10]
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	9301      	str	r3, [sp, #4]
 800359c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	4603      	mov	r3, r0
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 fb20 	bl	8003be8 <I2C_RequestMemoryRead>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e1b0      	b.n	8003914 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d113      	bne.n	80035e2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ba:	2300      	movs	r3, #0
 80035bc:	623b      	str	r3, [r7, #32]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	623b      	str	r3, [r7, #32]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	623b      	str	r3, [r7, #32]
 80035ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	e184      	b.n	80038ec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d11b      	bne.n	8003622 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035fa:	2300      	movs	r3, #0
 80035fc:	61fb      	str	r3, [r7, #28]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	61fb      	str	r3, [r7, #28]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	61fb      	str	r3, [r7, #28]
 800360e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	e164      	b.n	80038ec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003626:	2b02      	cmp	r3, #2
 8003628:	d11b      	bne.n	8003662 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003638:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003648:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800364a:	2300      	movs	r3, #0
 800364c:	61bb      	str	r3, [r7, #24]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	61bb      	str	r3, [r7, #24]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	61bb      	str	r3, [r7, #24]
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	e144      	b.n	80038ec <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003662:	2300      	movs	r3, #0
 8003664:	617b      	str	r3, [r7, #20]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	617b      	str	r3, [r7, #20]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	617b      	str	r3, [r7, #20]
 8003676:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003678:	e138      	b.n	80038ec <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367e:	2b03      	cmp	r3, #3
 8003680:	f200 80f1 	bhi.w	8003866 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003688:	2b01      	cmp	r3, #1
 800368a:	d123      	bne.n	80036d4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800368c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800368e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 fce9 	bl	8004068 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e139      	b.n	8003914 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691a      	ldr	r2, [r3, #16]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b2:	1c5a      	adds	r2, r3, #1
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	3b01      	subs	r3, #1
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036d2:	e10b      	b.n	80038ec <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d14e      	bne.n	800377a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e2:	2200      	movs	r2, #0
 80036e4:	4906      	ldr	r1, [pc, #24]	; (8003700 <HAL_I2C_Mem_Read+0x22c>)
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f000 fb66 	bl	8003db8 <I2C_WaitOnFlagUntilTimeout>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d008      	beq.n	8003704 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e10e      	b.n	8003914 <HAL_I2C_Mem_Read+0x440>
 80036f6:	bf00      	nop
 80036f8:	00100002 	.word	0x00100002
 80036fc:	ffff0000 	.word	0xffff0000
 8003700:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003712:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	691a      	ldr	r2, [r3, #16]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003726:	1c5a      	adds	r2, r3, #1
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373c:	b29b      	uxth	r3, r3
 800373e:	3b01      	subs	r3, #1
 8003740:	b29a      	uxth	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	691a      	ldr	r2, [r3, #16]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	b2d2      	uxtb	r2, r2
 8003752:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	1c5a      	adds	r2, r3, #1
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003762:	3b01      	subs	r3, #1
 8003764:	b29a      	uxth	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376e:	b29b      	uxth	r3, r3
 8003770:	3b01      	subs	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003778:	e0b8      	b.n	80038ec <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003780:	2200      	movs	r2, #0
 8003782:	4966      	ldr	r1, [pc, #408]	; (800391c <HAL_I2C_Mem_Read+0x448>)
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f000 fb17 	bl	8003db8 <I2C_WaitOnFlagUntilTimeout>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e0bf      	b.n	8003914 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	691a      	ldr	r2, [r3, #16]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	1c5a      	adds	r2, r3, #1
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	3b01      	subs	r3, #1
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037dc:	2200      	movs	r2, #0
 80037de:	494f      	ldr	r1, [pc, #316]	; (800391c <HAL_I2C_Mem_Read+0x448>)
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 fae9 	bl	8003db8 <I2C_WaitOnFlagUntilTimeout>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e091      	b.n	8003914 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691a      	ldr	r2, [r3, #16]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	b2d2      	uxtb	r2, r2
 800380c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003812:	1c5a      	adds	r2, r3, #1
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381c:	3b01      	subs	r3, #1
 800381e:	b29a      	uxth	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003828:	b29b      	uxth	r3, r3
 800382a:	3b01      	subs	r3, #1
 800382c:	b29a      	uxth	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	691a      	ldr	r2, [r3, #16]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	b2d2      	uxtb	r2, r2
 800383e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	1c5a      	adds	r2, r3, #1
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800384e:	3b01      	subs	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385a:	b29b      	uxth	r3, r3
 800385c:	3b01      	subs	r3, #1
 800385e:	b29a      	uxth	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003864:	e042      	b.n	80038ec <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003868:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 fbfc 	bl	8004068 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e04c      	b.n	8003914 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	b2d2      	uxtb	r2, r2
 8003886:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	1c5a      	adds	r2, r3, #1
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003896:	3b01      	subs	r3, #1
 8003898:	b29a      	uxth	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	3b01      	subs	r3, #1
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	d118      	bne.n	80038ec <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	691a      	ldr	r2, [r3, #16]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	1c5a      	adds	r2, r3, #1
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d6:	3b01      	subs	r3, #1
 80038d8:	b29a      	uxth	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	3b01      	subs	r3, #1
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f47f aec2 	bne.w	800367a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2220      	movs	r2, #32
 80038fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	e000      	b.n	8003914 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003912:	2302      	movs	r3, #2
  }
}
 8003914:	4618      	mov	r0, r3
 8003916:	3728      	adds	r7, #40	; 0x28
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	00010004 	.word	0x00010004

08003920 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b088      	sub	sp, #32
 8003924:	af02      	add	r7, sp, #8
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	607a      	str	r2, [r7, #4]
 800392a:	603b      	str	r3, [r7, #0]
 800392c:	460b      	mov	r3, r1
 800392e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003934:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003944:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	2b08      	cmp	r3, #8
 800394a:	d006      	beq.n	800395a <I2C_MasterRequestRead+0x3a>
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d003      	beq.n	800395a <I2C_MasterRequestRead+0x3a>
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003958:	d108      	bne.n	800396c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	e00b      	b.n	8003984 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003970:	2b11      	cmp	r3, #17
 8003972:	d107      	bne.n	8003984 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003982:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 fa11 	bl	8003db8 <I2C_WaitOnFlagUntilTimeout>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00d      	beq.n	80039b8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039aa:	d103      	bne.n	80039b4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e079      	b.n	8003aac <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039c0:	d108      	bne.n	80039d4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80039c2:	897b      	ldrh	r3, [r7, #10]
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	f043 0301 	orr.w	r3, r3, #1
 80039ca:	b2da      	uxtb	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	611a      	str	r2, [r3, #16]
 80039d2:	e05f      	b.n	8003a94 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80039d4:	897b      	ldrh	r3, [r7, #10]
 80039d6:	11db      	asrs	r3, r3, #7
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	f003 0306 	and.w	r3, r3, #6
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	f063 030f 	orn	r3, r3, #15
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	4930      	ldr	r1, [pc, #192]	; (8003ab4 <I2C_MasterRequestRead+0x194>)
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 fa37 	bl	8003e66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e054      	b.n	8003aac <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a02:	897b      	ldrh	r3, [r7, #10]
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	4929      	ldr	r1, [pc, #164]	; (8003ab8 <I2C_MasterRequestRead+0x198>)
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f000 fa27 	bl	8003e66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e044      	b.n	8003aac <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a22:	2300      	movs	r3, #0
 8003a24:	613b      	str	r3, [r7, #16]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	613b      	str	r3, [r7, #16]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	613b      	str	r3, [r7, #16]
 8003a36:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a46:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 f9af 	bl	8003db8 <I2C_WaitOnFlagUntilTimeout>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00d      	beq.n	8003a7c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a6e:	d103      	bne.n	8003a78 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a76:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e017      	b.n	8003aac <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003a7c:	897b      	ldrh	r3, [r7, #10]
 8003a7e:	11db      	asrs	r3, r3, #7
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	f003 0306 	and.w	r3, r3, #6
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	f063 030e 	orn	r3, r3, #14
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	4907      	ldr	r1, [pc, #28]	; (8003ab8 <I2C_MasterRequestRead+0x198>)
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 f9e3 	bl	8003e66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e000      	b.n	8003aac <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3718      	adds	r7, #24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	00010008 	.word	0x00010008
 8003ab8:	00010002 	.word	0x00010002

08003abc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b088      	sub	sp, #32
 8003ac0:	af02      	add	r7, sp, #8
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	4608      	mov	r0, r1
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	461a      	mov	r2, r3
 8003aca:	4603      	mov	r3, r0
 8003acc:	817b      	strh	r3, [r7, #10]
 8003ace:	460b      	mov	r3, r1
 8003ad0:	813b      	strh	r3, [r7, #8]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ae4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	6a3b      	ldr	r3, [r7, #32]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 f960 	bl	8003db8 <I2C_WaitOnFlagUntilTimeout>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00d      	beq.n	8003b1a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b0c:	d103      	bne.n	8003b16 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b14:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e05f      	b.n	8003bda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b1a:	897b      	ldrh	r3, [r7, #10]
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	461a      	mov	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2c:	6a3a      	ldr	r2, [r7, #32]
 8003b2e:	492d      	ldr	r1, [pc, #180]	; (8003be4 <I2C_RequestMemoryWrite+0x128>)
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 f998 	bl	8003e66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e04c      	b.n	8003bda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b40:	2300      	movs	r3, #0
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b58:	6a39      	ldr	r1, [r7, #32]
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 fa02 	bl	8003f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00d      	beq.n	8003b82 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	2b04      	cmp	r3, #4
 8003b6c:	d107      	bne.n	8003b7e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e02b      	b.n	8003bda <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b82:	88fb      	ldrh	r3, [r7, #6]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d105      	bne.n	8003b94 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b88:	893b      	ldrh	r3, [r7, #8]
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	611a      	str	r2, [r3, #16]
 8003b92:	e021      	b.n	8003bd8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b94:	893b      	ldrh	r3, [r7, #8]
 8003b96:	0a1b      	lsrs	r3, r3, #8
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba4:	6a39      	ldr	r1, [r7, #32]
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 f9dc 	bl	8003f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00d      	beq.n	8003bce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	d107      	bne.n	8003bca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bc8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e005      	b.n	8003bda <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bce:	893b      	ldrh	r3, [r7, #8]
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3718      	adds	r7, #24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	00010002 	.word	0x00010002

08003be8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b088      	sub	sp, #32
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	4608      	mov	r0, r1
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	817b      	strh	r3, [r7, #10]
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	813b      	strh	r3, [r7, #8]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c10:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 f8c2 	bl	8003db8 <I2C_WaitOnFlagUntilTimeout>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00d      	beq.n	8003c56 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c48:	d103      	bne.n	8003c52 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e0aa      	b.n	8003dac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c56:	897b      	ldrh	r3, [r7, #10]
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	6a3a      	ldr	r2, [r7, #32]
 8003c6a:	4952      	ldr	r1, [pc, #328]	; (8003db4 <I2C_RequestMemoryRead+0x1cc>)
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 f8fa 	bl	8003e66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e097      	b.n	8003dac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	617b      	str	r3, [r7, #20]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c94:	6a39      	ldr	r1, [r7, #32]
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 f964 	bl	8003f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00d      	beq.n	8003cbe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d107      	bne.n	8003cba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e076      	b.n	8003dac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cbe:	88fb      	ldrh	r3, [r7, #6]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d105      	bne.n	8003cd0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cc4:	893b      	ldrh	r3, [r7, #8]
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	611a      	str	r2, [r3, #16]
 8003cce:	e021      	b.n	8003d14 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003cd0:	893b      	ldrh	r3, [r7, #8]
 8003cd2:	0a1b      	lsrs	r3, r3, #8
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce0:	6a39      	ldr	r1, [r7, #32]
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 f93e 	bl	8003f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00d      	beq.n	8003d0a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d107      	bne.n	8003d06 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e050      	b.n	8003dac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d0a:	893b      	ldrh	r3, [r7, #8]
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d16:	6a39      	ldr	r1, [r7, #32]
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f000 f923 	bl	8003f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00d      	beq.n	8003d40 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d28:	2b04      	cmp	r3, #4
 8003d2a:	d107      	bne.n	8003d3c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d3a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e035      	b.n	8003dac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d4e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 f82b 	bl	8003db8 <I2C_WaitOnFlagUntilTimeout>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00d      	beq.n	8003d84 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d76:	d103      	bne.n	8003d80 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e013      	b.n	8003dac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003d84:	897b      	ldrh	r3, [r7, #10]
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	f043 0301 	orr.w	r3, r3, #1
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d96:	6a3a      	ldr	r2, [r7, #32]
 8003d98:	4906      	ldr	r1, [pc, #24]	; (8003db4 <I2C_RequestMemoryRead+0x1cc>)
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 f863 	bl	8003e66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3718      	adds	r7, #24
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	00010002 	.word	0x00010002

08003db8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	603b      	str	r3, [r7, #0]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dc8:	e025      	b.n	8003e16 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd0:	d021      	beq.n	8003e16 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dd2:	f7fe fbf1 	bl	80025b8 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d302      	bcc.n	8003de8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d116      	bne.n	8003e16 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2220      	movs	r2, #32
 8003df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	f043 0220 	orr.w	r2, r3, #32
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e023      	b.n	8003e5e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	0c1b      	lsrs	r3, r3, #16
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d10d      	bne.n	8003e3c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	43da      	mvns	r2, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	bf0c      	ite	eq
 8003e32:	2301      	moveq	r3, #1
 8003e34:	2300      	movne	r3, #0
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	461a      	mov	r2, r3
 8003e3a:	e00c      	b.n	8003e56 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	43da      	mvns	r2, r3
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	4013      	ands	r3, r2
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	bf0c      	ite	eq
 8003e4e:	2301      	moveq	r3, #1
 8003e50:	2300      	movne	r3, #0
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	461a      	mov	r2, r3
 8003e56:	79fb      	ldrb	r3, [r7, #7]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d0b6      	beq.n	8003dca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b084      	sub	sp, #16
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	60f8      	str	r0, [r7, #12]
 8003e6e:	60b9      	str	r1, [r7, #8]
 8003e70:	607a      	str	r2, [r7, #4]
 8003e72:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e74:	e051      	b.n	8003f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e84:	d123      	bne.n	8003ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e94:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e9e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	f043 0204 	orr.w	r2, r3, #4
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e046      	b.n	8003f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed4:	d021      	beq.n	8003f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ed6:	f7fe fb6f 	bl	80025b8 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d302      	bcc.n	8003eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d116      	bne.n	8003f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	f043 0220 	orr.w	r2, r3, #32
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e020      	b.n	8003f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	0c1b      	lsrs	r3, r3, #16
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d10c      	bne.n	8003f3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	43da      	mvns	r2, r3
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	bf14      	ite	ne
 8003f36:	2301      	movne	r3, #1
 8003f38:	2300      	moveq	r3, #0
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	e00b      	b.n	8003f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	43da      	mvns	r2, r3
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	bf14      	ite	ne
 8003f50:	2301      	movne	r3, #1
 8003f52:	2300      	moveq	r3, #0
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d18d      	bne.n	8003e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f70:	e02d      	b.n	8003fce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f000 f8ce 	bl	8004114 <I2C_IsAcknowledgeFailed>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e02d      	b.n	8003fde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f88:	d021      	beq.n	8003fce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f8a:	f7fe fb15 	bl	80025b8 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d302      	bcc.n	8003fa0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d116      	bne.n	8003fce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	f043 0220 	orr.w	r2, r3, #32
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e007      	b.n	8003fde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd8:	2b80      	cmp	r3, #128	; 0x80
 8003fda:	d1ca      	bne.n	8003f72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b084      	sub	sp, #16
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	60f8      	str	r0, [r7, #12]
 8003fee:	60b9      	str	r1, [r7, #8]
 8003ff0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ff2:	e02d      	b.n	8004050 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 f88d 	bl	8004114 <I2C_IsAcknowledgeFailed>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e02d      	b.n	8004060 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400a:	d021      	beq.n	8004050 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800400c:	f7fe fad4 	bl	80025b8 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	429a      	cmp	r2, r3
 800401a:	d302      	bcc.n	8004022 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d116      	bne.n	8004050 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2220      	movs	r2, #32
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403c:	f043 0220 	orr.w	r2, r3, #32
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e007      	b.n	8004060 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	f003 0304 	and.w	r3, r3, #4
 800405a:	2b04      	cmp	r3, #4
 800405c:	d1ca      	bne.n	8003ff4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004074:	e042      	b.n	80040fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	f003 0310 	and.w	r3, r3, #16
 8004080:	2b10      	cmp	r3, #16
 8004082:	d119      	bne.n	80040b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f06f 0210 	mvn.w	r2, #16
 800408c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e029      	b.n	800410c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040b8:	f7fe fa7e 	bl	80025b8 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d302      	bcc.n	80040ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d116      	bne.n	80040fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2220      	movs	r2, #32
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e8:	f043 0220 	orr.w	r2, r3, #32
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e007      	b.n	800410c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004106:	2b40      	cmp	r3, #64	; 0x40
 8004108:	d1b5      	bne.n	8004076 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800412a:	d11b      	bne.n	8004164 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004134:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2220      	movs	r2, #32
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	f043 0204 	orr.w	r2, r3, #4
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e000      	b.n	8004166 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004172:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004174:	b08f      	sub	sp, #60	; 0x3c
 8004176:	af0a      	add	r7, sp, #40	; 0x28
 8004178:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e10f      	b.n	80043a4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d106      	bne.n	80041a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f009 feae 	bl	800df00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2203      	movs	r2, #3
 80041a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d102      	bne.n	80041be <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f003 fc21 	bl	8007a0a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	603b      	str	r3, [r7, #0]
 80041ce:	687e      	ldr	r6, [r7, #4]
 80041d0:	466d      	mov	r5, sp
 80041d2:	f106 0410 	add.w	r4, r6, #16
 80041d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80041e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80041e6:	1d33      	adds	r3, r6, #4
 80041e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041ea:	6838      	ldr	r0, [r7, #0]
 80041ec:	f003 faf8 	bl	80077e0 <USB_CoreInit>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d005      	beq.n	8004202 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2202      	movs	r2, #2
 80041fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e0d0      	b.n	80043a4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2100      	movs	r1, #0
 8004208:	4618      	mov	r0, r3
 800420a:	f003 fc0f 	bl	8007a2c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800420e:	2300      	movs	r3, #0
 8004210:	73fb      	strb	r3, [r7, #15]
 8004212:	e04a      	b.n	80042aa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004214:	7bfa      	ldrb	r2, [r7, #15]
 8004216:	6879      	ldr	r1, [r7, #4]
 8004218:	4613      	mov	r3, r2
 800421a:	00db      	lsls	r3, r3, #3
 800421c:	4413      	add	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	440b      	add	r3, r1
 8004222:	333d      	adds	r3, #61	; 0x3d
 8004224:	2201      	movs	r2, #1
 8004226:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004228:	7bfa      	ldrb	r2, [r7, #15]
 800422a:	6879      	ldr	r1, [r7, #4]
 800422c:	4613      	mov	r3, r2
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	4413      	add	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	440b      	add	r3, r1
 8004236:	333c      	adds	r3, #60	; 0x3c
 8004238:	7bfa      	ldrb	r2, [r7, #15]
 800423a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800423c:	7bfa      	ldrb	r2, [r7, #15]
 800423e:	7bfb      	ldrb	r3, [r7, #15]
 8004240:	b298      	uxth	r0, r3
 8004242:	6879      	ldr	r1, [r7, #4]
 8004244:	4613      	mov	r3, r2
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	4413      	add	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	440b      	add	r3, r1
 800424e:	3344      	adds	r3, #68	; 0x44
 8004250:	4602      	mov	r2, r0
 8004252:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004254:	7bfa      	ldrb	r2, [r7, #15]
 8004256:	6879      	ldr	r1, [r7, #4]
 8004258:	4613      	mov	r3, r2
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	4413      	add	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	440b      	add	r3, r1
 8004262:	3340      	adds	r3, #64	; 0x40
 8004264:	2200      	movs	r2, #0
 8004266:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004268:	7bfa      	ldrb	r2, [r7, #15]
 800426a:	6879      	ldr	r1, [r7, #4]
 800426c:	4613      	mov	r3, r2
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	4413      	add	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	440b      	add	r3, r1
 8004276:	3348      	adds	r3, #72	; 0x48
 8004278:	2200      	movs	r2, #0
 800427a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800427c:	7bfa      	ldrb	r2, [r7, #15]
 800427e:	6879      	ldr	r1, [r7, #4]
 8004280:	4613      	mov	r3, r2
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	4413      	add	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	440b      	add	r3, r1
 800428a:	334c      	adds	r3, #76	; 0x4c
 800428c:	2200      	movs	r2, #0
 800428e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004290:	7bfa      	ldrb	r2, [r7, #15]
 8004292:	6879      	ldr	r1, [r7, #4]
 8004294:	4613      	mov	r3, r2
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	4413      	add	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	440b      	add	r3, r1
 800429e:	3354      	adds	r3, #84	; 0x54
 80042a0:	2200      	movs	r2, #0
 80042a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
 80042a6:	3301      	adds	r3, #1
 80042a8:	73fb      	strb	r3, [r7, #15]
 80042aa:	7bfa      	ldrb	r2, [r7, #15]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d3af      	bcc.n	8004214 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042b4:	2300      	movs	r3, #0
 80042b6:	73fb      	strb	r3, [r7, #15]
 80042b8:	e044      	b.n	8004344 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80042ba:	7bfa      	ldrb	r2, [r7, #15]
 80042bc:	6879      	ldr	r1, [r7, #4]
 80042be:	4613      	mov	r3, r2
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	4413      	add	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	440b      	add	r3, r1
 80042c8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80042cc:	2200      	movs	r2, #0
 80042ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80042d0:	7bfa      	ldrb	r2, [r7, #15]
 80042d2:	6879      	ldr	r1, [r7, #4]
 80042d4:	4613      	mov	r3, r2
 80042d6:	00db      	lsls	r3, r3, #3
 80042d8:	4413      	add	r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	440b      	add	r3, r1
 80042de:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80042e2:	7bfa      	ldrb	r2, [r7, #15]
 80042e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80042e6:	7bfa      	ldrb	r2, [r7, #15]
 80042e8:	6879      	ldr	r1, [r7, #4]
 80042ea:	4613      	mov	r3, r2
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	4413      	add	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	440b      	add	r3, r1
 80042f4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80042f8:	2200      	movs	r2, #0
 80042fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80042fc:	7bfa      	ldrb	r2, [r7, #15]
 80042fe:	6879      	ldr	r1, [r7, #4]
 8004300:	4613      	mov	r3, r2
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	4413      	add	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800430e:	2200      	movs	r2, #0
 8004310:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004312:	7bfa      	ldrb	r2, [r7, #15]
 8004314:	6879      	ldr	r1, [r7, #4]
 8004316:	4613      	mov	r3, r2
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	4413      	add	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	440b      	add	r3, r1
 8004320:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004324:	2200      	movs	r2, #0
 8004326:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004328:	7bfa      	ldrb	r2, [r7, #15]
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	4613      	mov	r3, r2
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	4413      	add	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	440b      	add	r3, r1
 8004336:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800433e:	7bfb      	ldrb	r3, [r7, #15]
 8004340:	3301      	adds	r3, #1
 8004342:	73fb      	strb	r3, [r7, #15]
 8004344:	7bfa      	ldrb	r2, [r7, #15]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	429a      	cmp	r2, r3
 800434c:	d3b5      	bcc.n	80042ba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	603b      	str	r3, [r7, #0]
 8004354:	687e      	ldr	r6, [r7, #4]
 8004356:	466d      	mov	r5, sp
 8004358:	f106 0410 	add.w	r4, r6, #16
 800435c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800435e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004360:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004362:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004364:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004368:	e885 0003 	stmia.w	r5, {r0, r1}
 800436c:	1d33      	adds	r3, r6, #4
 800436e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004370:	6838      	ldr	r0, [r7, #0]
 8004372:	f003 fba7 	bl	8007ac4 <USB_DevInit>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d005      	beq.n	8004388 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2202      	movs	r2, #2
 8004380:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e00d      	b.n	80043a4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4618      	mov	r0, r3
 800439e:	f004 fcf6 	bl	8008d8e <USB_DevDisconnect>

  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080043ac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d101      	bne.n	80043c8 <HAL_PCD_Start+0x1c>
 80043c4:	2302      	movs	r3, #2
 80043c6:	e020      	b.n	800440a <HAL_PCD_Start+0x5e>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d109      	bne.n	80043ec <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d005      	beq.n	80043ec <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f003 faf9 	bl	80079e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f004 fca6 	bl	8008d4c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004412:	b590      	push	{r4, r7, lr}
 8004414:	b08d      	sub	sp, #52	; 0x34
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004420:	6a3b      	ldr	r3, [r7, #32]
 8004422:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4618      	mov	r0, r3
 800442a:	f004 fd64 	bl	8008ef6 <USB_GetMode>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	f040 848a 	bne.w	8004d4a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4618      	mov	r0, r3
 800443c:	f004 fcc8 	bl	8008dd0 <USB_ReadInterrupts>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 8480 	beq.w	8004d48 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	0a1b      	lsrs	r3, r3, #8
 8004452:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4618      	mov	r0, r3
 8004462:	f004 fcb5 	bl	8008dd0 <USB_ReadInterrupts>
 8004466:	4603      	mov	r3, r0
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b02      	cmp	r3, #2
 800446e:	d107      	bne.n	8004480 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	695a      	ldr	r2, [r3, #20]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f002 0202 	and.w	r2, r2, #2
 800447e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4618      	mov	r0, r3
 8004486:	f004 fca3 	bl	8008dd0 <USB_ReadInterrupts>
 800448a:	4603      	mov	r3, r0
 800448c:	f003 0310 	and.w	r3, r3, #16
 8004490:	2b10      	cmp	r3, #16
 8004492:	d161      	bne.n	8004558 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699a      	ldr	r2, [r3, #24]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 0210 	bic.w	r2, r2, #16
 80044a2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	f003 020f 	and.w	r2, r3, #15
 80044b0:	4613      	mov	r3, r2
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	4413      	add	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	4413      	add	r3, r2
 80044c0:	3304      	adds	r3, #4
 80044c2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	0c5b      	lsrs	r3, r3, #17
 80044c8:	f003 030f 	and.w	r3, r3, #15
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d124      	bne.n	800451a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80044d6:	4013      	ands	r3, r2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d035      	beq.n	8004548 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	091b      	lsrs	r3, r3, #4
 80044e4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80044e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	461a      	mov	r2, r3
 80044ee:	6a38      	ldr	r0, [r7, #32]
 80044f0:	f004 fada 	bl	8008aa8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	691a      	ldr	r2, [r3, #16]
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	091b      	lsrs	r3, r3, #4
 80044fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004500:	441a      	add	r2, r3
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	6a1a      	ldr	r2, [r3, #32]
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	091b      	lsrs	r3, r3, #4
 800450e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004512:	441a      	add	r2, r3
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	621a      	str	r2, [r3, #32]
 8004518:	e016      	b.n	8004548 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	0c5b      	lsrs	r3, r3, #17
 800451e:	f003 030f 	and.w	r3, r3, #15
 8004522:	2b06      	cmp	r3, #6
 8004524:	d110      	bne.n	8004548 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800452c:	2208      	movs	r2, #8
 800452e:	4619      	mov	r1, r3
 8004530:	6a38      	ldr	r0, [r7, #32]
 8004532:	f004 fab9 	bl	8008aa8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	6a1a      	ldr	r2, [r3, #32]
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	091b      	lsrs	r3, r3, #4
 800453e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004542:	441a      	add	r2, r3
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699a      	ldr	r2, [r3, #24]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0210 	orr.w	r2, r2, #16
 8004556:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4618      	mov	r0, r3
 800455e:	f004 fc37 	bl	8008dd0 <USB_ReadInterrupts>
 8004562:	4603      	mov	r3, r0
 8004564:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004568:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800456c:	f040 80a7 	bne.w	80046be <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004570:	2300      	movs	r3, #0
 8004572:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4618      	mov	r0, r3
 800457a:	f004 fc3c 	bl	8008df6 <USB_ReadDevAllOutEpInterrupt>
 800457e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004580:	e099      	b.n	80046b6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 808e 	beq.w	80046aa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004594:	b2d2      	uxtb	r2, r2
 8004596:	4611      	mov	r1, r2
 8004598:	4618      	mov	r0, r3
 800459a:	f004 fc60 	bl	8008e5e <USB_ReadDevOutEPInterrupt>
 800459e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00c      	beq.n	80045c4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80045aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ac:	015a      	lsls	r2, r3, #5
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	4413      	add	r3, r2
 80045b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b6:	461a      	mov	r2, r3
 80045b8:	2301      	movs	r3, #1
 80045ba:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80045bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 feaa 	bl	8005318 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f003 0308 	and.w	r3, r3, #8
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00c      	beq.n	80045e8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045da:	461a      	mov	r2, r3
 80045dc:	2308      	movs	r3, #8
 80045de:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80045e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 ff80 	bl	80054e8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	f003 0310 	and.w	r3, r3, #16
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d008      	beq.n	8004604 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	015a      	lsls	r2, r3, #5
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	4413      	add	r3, r2
 80045fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045fe:	461a      	mov	r2, r3
 8004600:	2310      	movs	r3, #16
 8004602:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d030      	beq.n	8004670 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004616:	2b80      	cmp	r3, #128	; 0x80
 8004618:	d109      	bne.n	800462e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	69fa      	ldr	r2, [r7, #28]
 8004624:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004628:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800462c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800462e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004630:	4613      	mov	r3, r2
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	4413      	add	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	4413      	add	r3, r2
 8004640:	3304      	adds	r3, #4
 8004642:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	78db      	ldrb	r3, [r3, #3]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d108      	bne.n	800465e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	2200      	movs	r2, #0
 8004650:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	b2db      	uxtb	r3, r3
 8004656:	4619      	mov	r1, r3
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f009 fd4d 	bl	800e0f8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	015a      	lsls	r2, r3, #5
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	4413      	add	r3, r2
 8004666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466a:	461a      	mov	r2, r3
 800466c:	2302      	movs	r3, #2
 800466e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	f003 0320 	and.w	r3, r3, #32
 8004676:	2b00      	cmp	r3, #0
 8004678:	d008      	beq.n	800468c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467c:	015a      	lsls	r2, r3, #5
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	4413      	add	r3, r2
 8004682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004686:	461a      	mov	r2, r3
 8004688:	2320      	movs	r3, #32
 800468a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d009      	beq.n	80046aa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	4413      	add	r3, r2
 800469e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a2:	461a      	mov	r2, r3
 80046a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046a8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	3301      	adds	r3, #1
 80046ae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80046b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b2:	085b      	lsrs	r3, r3, #1
 80046b4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80046b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f47f af62 	bne.w	8004582 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f004 fb84 	bl	8008dd0 <USB_ReadInterrupts>
 80046c8:	4603      	mov	r3, r0
 80046ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046d2:	f040 80db 	bne.w	800488c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4618      	mov	r0, r3
 80046dc:	f004 fba5 	bl	8008e2a <USB_ReadDevAllInEpInterrupt>
 80046e0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80046e2:	2300      	movs	r3, #0
 80046e4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80046e6:	e0cd      	b.n	8004884 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80046e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 80c2 	beq.w	8004878 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046fa:	b2d2      	uxtb	r2, r2
 80046fc:	4611      	mov	r1, r2
 80046fe:	4618      	mov	r0, r3
 8004700:	f004 fbcb 	bl	8008e9a <USB_ReadDevInEPInterrupt>
 8004704:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	d057      	beq.n	80047c0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	f003 030f 	and.w	r3, r3, #15
 8004716:	2201      	movs	r2, #1
 8004718:	fa02 f303 	lsl.w	r3, r2, r3
 800471c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004724:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	43db      	mvns	r3, r3
 800472a:	69f9      	ldr	r1, [r7, #28]
 800472c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004730:	4013      	ands	r3, r2
 8004732:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	4413      	add	r3, r2
 800473c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004740:	461a      	mov	r2, r3
 8004742:	2301      	movs	r3, #1
 8004744:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d132      	bne.n	80047b4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004752:	4613      	mov	r3, r2
 8004754:	00db      	lsls	r3, r3, #3
 8004756:	4413      	add	r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	440b      	add	r3, r1
 800475c:	334c      	adds	r3, #76	; 0x4c
 800475e:	6819      	ldr	r1, [r3, #0]
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004764:	4613      	mov	r3, r2
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	4413      	add	r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4403      	add	r3, r0
 800476e:	3348      	adds	r3, #72	; 0x48
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4419      	add	r1, r3
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004778:	4613      	mov	r3, r2
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	4413      	add	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4403      	add	r3, r0
 8004782:	334c      	adds	r3, #76	; 0x4c
 8004784:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	2b00      	cmp	r3, #0
 800478a:	d113      	bne.n	80047b4 <HAL_PCD_IRQHandler+0x3a2>
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004790:	4613      	mov	r3, r2
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	4413      	add	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	440b      	add	r3, r1
 800479a:	3354      	adds	r3, #84	; 0x54
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d108      	bne.n	80047b4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6818      	ldr	r0, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80047ac:	461a      	mov	r2, r3
 80047ae:	2101      	movs	r1, #1
 80047b0:	f004 fbd2 	bl	8008f58 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	4619      	mov	r1, r3
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f009 fc21 	bl	800e002 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	f003 0308 	and.w	r3, r3, #8
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d008      	beq.n	80047dc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	015a      	lsls	r2, r3, #5
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d6:	461a      	mov	r2, r3
 80047d8:	2308      	movs	r3, #8
 80047da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	f003 0310 	and.w	r3, r3, #16
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d008      	beq.n	80047f8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	015a      	lsls	r2, r3, #5
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	4413      	add	r3, r2
 80047ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f2:	461a      	mov	r2, r3
 80047f4:	2310      	movs	r3, #16
 80047f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d008      	beq.n	8004814 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	015a      	lsls	r2, r3, #5
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	4413      	add	r3, r2
 800480a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800480e:	461a      	mov	r2, r3
 8004810:	2340      	movs	r3, #64	; 0x40
 8004812:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d023      	beq.n	8004866 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800481e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004820:	6a38      	ldr	r0, [r7, #32]
 8004822:	f003 fab3 	bl	8007d8c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004828:	4613      	mov	r3, r2
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	4413      	add	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	3338      	adds	r3, #56	; 0x38
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	4413      	add	r3, r2
 8004836:	3304      	adds	r3, #4
 8004838:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	78db      	ldrb	r3, [r3, #3]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d108      	bne.n	8004854 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2200      	movs	r2, #0
 8004846:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484a:	b2db      	uxtb	r3, r3
 800484c:	4619      	mov	r1, r3
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f009 fc64 	bl	800e11c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	015a      	lsls	r2, r3, #5
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	4413      	add	r3, r2
 800485c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004860:	461a      	mov	r2, r3
 8004862:	2302      	movs	r3, #2
 8004864:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800486c:	2b00      	cmp	r3, #0
 800486e:	d003      	beq.n	8004878 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004870:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 fcc3 	bl	80051fe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	3301      	adds	r3, #1
 800487c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800487e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004880:	085b      	lsrs	r3, r3, #1
 8004882:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004886:	2b00      	cmp	r3, #0
 8004888:	f47f af2e 	bne.w	80046e8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4618      	mov	r0, r3
 8004892:	f004 fa9d 	bl	8008dd0 <USB_ReadInterrupts>
 8004896:	4603      	mov	r3, r0
 8004898:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800489c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048a0:	d122      	bne.n	80048e8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	69fa      	ldr	r2, [r7, #28]
 80048ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048b0:	f023 0301 	bic.w	r3, r3, #1
 80048b4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d108      	bne.n	80048d2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80048c8:	2100      	movs	r1, #0
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 feaa 	bl	8005624 <HAL_PCDEx_LPM_Callback>
 80048d0:	e002      	b.n	80048d8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f009 fc02 	bl	800e0dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	695a      	ldr	r2, [r3, #20]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80048e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f004 fa6f 	bl	8008dd0 <USB_ReadInterrupts>
 80048f2:	4603      	mov	r3, r0
 80048f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048fc:	d112      	bne.n	8004924 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b01      	cmp	r3, #1
 800490c:	d102      	bne.n	8004914 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f009 fbbe 	bl	800e090 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	695a      	ldr	r2, [r3, #20]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004922:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4618      	mov	r0, r3
 800492a:	f004 fa51 	bl	8008dd0 <USB_ReadInterrupts>
 800492e:	4603      	mov	r3, r0
 8004930:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004938:	f040 80b7 	bne.w	8004aaa <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	69fa      	ldr	r2, [r7, #28]
 8004946:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800494a:	f023 0301 	bic.w	r3, r3, #1
 800494e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2110      	movs	r1, #16
 8004956:	4618      	mov	r0, r3
 8004958:	f003 fa18 	bl	8007d8c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800495c:	2300      	movs	r3, #0
 800495e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004960:	e046      	b.n	80049f0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004964:	015a      	lsls	r2, r3, #5
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	4413      	add	r3, r2
 800496a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496e:	461a      	mov	r2, r3
 8004970:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004974:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004978:	015a      	lsls	r2, r3, #5
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	4413      	add	r3, r2
 800497e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004986:	0151      	lsls	r1, r2, #5
 8004988:	69fa      	ldr	r2, [r7, #28]
 800498a:	440a      	add	r2, r1
 800498c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004990:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004994:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004998:	015a      	lsls	r2, r3, #5
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	4413      	add	r3, r2
 800499e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a2:	461a      	mov	r2, r3
 80049a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049a8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80049aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ac:	015a      	lsls	r2, r3, #5
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	4413      	add	r3, r2
 80049b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049ba:	0151      	lsls	r1, r2, #5
 80049bc:	69fa      	ldr	r2, [r7, #28]
 80049be:	440a      	add	r2, r1
 80049c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80049c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80049ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049cc:	015a      	lsls	r2, r3, #5
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	4413      	add	r3, r2
 80049d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049da:	0151      	lsls	r1, r2, #5
 80049dc:	69fa      	ldr	r2, [r7, #28]
 80049de:	440a      	add	r2, r1
 80049e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80049e8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ec:	3301      	adds	r3, #1
 80049ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d3b3      	bcc.n	8004962 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	69fa      	ldr	r2, [r7, #28]
 8004a04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a08:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004a0c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d016      	beq.n	8004a44 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a20:	69fa      	ldr	r2, [r7, #28]
 8004a22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a26:	f043 030b 	orr.w	r3, r3, #11
 8004a2a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a36:	69fa      	ldr	r2, [r7, #28]
 8004a38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a3c:	f043 030b 	orr.w	r3, r3, #11
 8004a40:	6453      	str	r3, [r2, #68]	; 0x44
 8004a42:	e015      	b.n	8004a70 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	69fa      	ldr	r2, [r7, #28]
 8004a4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a52:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004a56:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004a5a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	69fa      	ldr	r2, [r7, #28]
 8004a66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a6a:	f043 030b 	orr.w	r3, r3, #11
 8004a6e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	69fa      	ldr	r2, [r7, #28]
 8004a7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a7e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004a82:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6818      	ldr	r0, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004a94:	461a      	mov	r2, r3
 8004a96:	f004 fa5f 	bl	8008f58 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	695a      	ldr	r2, [r3, #20]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004aa8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f004 f98e 	bl	8008dd0 <USB_ReadInterrupts>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004aba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004abe:	d124      	bne.n	8004b0a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f004 fa24 	bl	8008f12 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f003 f9d9 	bl	8007e86 <USB_GetDevSpeed>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681c      	ldr	r4, [r3, #0]
 8004ae0:	f001 fa10 	bl	8005f04 <HAL_RCC_GetHCLKFreq>
 8004ae4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	461a      	mov	r2, r3
 8004aee:	4620      	mov	r0, r4
 8004af0:	f002 fed8 	bl	80078a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f009 faac 	bl	800e052 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	695a      	ldr	r2, [r3, #20]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004b08:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f004 f95e 	bl	8008dd0 <USB_ReadInterrupts>
 8004b14:	4603      	mov	r3, r0
 8004b16:	f003 0308 	and.w	r3, r3, #8
 8004b1a:	2b08      	cmp	r3, #8
 8004b1c:	d10a      	bne.n	8004b34 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f009 fa89 	bl	800e036 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	695a      	ldr	r2, [r3, #20]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f002 0208 	and.w	r2, r2, #8
 8004b32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f004 f949 	bl	8008dd0 <USB_ReadInterrupts>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b44:	2b80      	cmp	r3, #128	; 0x80
 8004b46:	d122      	bne.n	8004b8e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b50:	6a3b      	ldr	r3, [r7, #32]
 8004b52:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b54:	2301      	movs	r3, #1
 8004b56:	627b      	str	r3, [r7, #36]	; 0x24
 8004b58:	e014      	b.n	8004b84 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004b5a:	6879      	ldr	r1, [r7, #4]
 8004b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5e:	4613      	mov	r3, r2
 8004b60:	00db      	lsls	r3, r3, #3
 8004b62:	4413      	add	r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	440b      	add	r3, r1
 8004b68:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d105      	bne.n	8004b7e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	4619      	mov	r1, r3
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 fb0f 	bl	800519c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b80:	3301      	adds	r3, #1
 8004b82:	627b      	str	r3, [r7, #36]	; 0x24
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d3e5      	bcc.n	8004b5a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f004 f91c 	bl	8008dd0 <USB_ReadInterrupts>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ba2:	d13b      	bne.n	8004c1c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ba8:	e02b      	b.n	8004c02 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	015a      	lsls	r2, r3, #5
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004bba:	6879      	ldr	r1, [r7, #4]
 8004bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	00db      	lsls	r3, r3, #3
 8004bc2:	4413      	add	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	440b      	add	r3, r1
 8004bc8:	3340      	adds	r3, #64	; 0x40
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d115      	bne.n	8004bfc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004bd0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	da12      	bge.n	8004bfc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004bd6:	6879      	ldr	r1, [r7, #4]
 8004bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bda:	4613      	mov	r3, r2
 8004bdc:	00db      	lsls	r3, r3, #3
 8004bde:	4413      	add	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	440b      	add	r3, r1
 8004be4:	333f      	adds	r3, #63	; 0x3f
 8004be6:	2201      	movs	r2, #1
 8004be8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fad0 	bl	800519c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	3301      	adds	r3, #1
 8004c00:	627b      	str	r3, [r7, #36]	; 0x24
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d3ce      	bcc.n	8004baa <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	695a      	ldr	r2, [r3, #20]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004c1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f004 f8d5 	bl	8008dd0 <USB_ReadInterrupts>
 8004c26:	4603      	mov	r3, r0
 8004c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c30:	d155      	bne.n	8004cde <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c32:	2301      	movs	r3, #1
 8004c34:	627b      	str	r3, [r7, #36]	; 0x24
 8004c36:	e045      	b.n	8004cc4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c48:	6879      	ldr	r1, [r7, #4]
 8004c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	00db      	lsls	r3, r3, #3
 8004c50:	4413      	add	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	440b      	add	r3, r1
 8004c56:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d12e      	bne.n	8004cbe <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004c60:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	da2b      	bge.n	8004cbe <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004c72:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d121      	bne.n	8004cbe <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c7e:	4613      	mov	r3, r2
 8004c80:	00db      	lsls	r3, r3, #3
 8004c82:	4413      	add	r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	440b      	add	r3, r1
 8004c88:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004c90:	6a3b      	ldr	r3, [r7, #32]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004c98:	6a3b      	ldr	r3, [r7, #32]
 8004c9a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10a      	bne.n	8004cbe <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	69fa      	ldr	r2, [r7, #28]
 8004cb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cba:	6053      	str	r3, [r2, #4]
            break;
 8004cbc:	e007      	b.n	8004cce <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d3b4      	bcc.n	8004c38 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	695a      	ldr	r2, [r3, #20]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004cdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f004 f874 	bl	8008dd0 <USB_ReadInterrupts>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf2:	d10a      	bne.n	8004d0a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f009 fa23 	bl	800e140 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	695a      	ldr	r2, [r3, #20]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004d08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f004 f85e 	bl	8008dd0 <USB_ReadInterrupts>
 8004d14:	4603      	mov	r3, r0
 8004d16:	f003 0304 	and.w	r3, r3, #4
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	d115      	bne.n	8004d4a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d002      	beq.n	8004d36 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f009 fa13 	bl	800e15c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6859      	ldr	r1, [r3, #4]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	605a      	str	r2, [r3, #4]
 8004d46:	e000      	b.n	8004d4a <HAL_PCD_IRQHandler+0x938>
      return;
 8004d48:	bf00      	nop
    }
  }
}
 8004d4a:	3734      	adds	r7, #52	; 0x34
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd90      	pop	{r4, r7, pc}

08004d50 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	460b      	mov	r3, r1
 8004d5a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d101      	bne.n	8004d6a <HAL_PCD_SetAddress+0x1a>
 8004d66:	2302      	movs	r3, #2
 8004d68:	e013      	b.n	8004d92 <HAL_PCD_SetAddress+0x42>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	78fa      	ldrb	r2, [r7, #3]
 8004d76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	78fa      	ldrb	r2, [r7, #3]
 8004d80:	4611      	mov	r1, r2
 8004d82:	4618      	mov	r0, r3
 8004d84:	f003 ffbc 	bl	8008d00 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b084      	sub	sp, #16
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
 8004da2:	4608      	mov	r0, r1
 8004da4:	4611      	mov	r1, r2
 8004da6:	461a      	mov	r2, r3
 8004da8:	4603      	mov	r3, r0
 8004daa:	70fb      	strb	r3, [r7, #3]
 8004dac:	460b      	mov	r3, r1
 8004dae:	803b      	strh	r3, [r7, #0]
 8004db0:	4613      	mov	r3, r2
 8004db2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004db4:	2300      	movs	r3, #0
 8004db6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004db8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	da0f      	bge.n	8004de0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dc0:	78fb      	ldrb	r3, [r7, #3]
 8004dc2:	f003 020f 	and.w	r2, r3, #15
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	00db      	lsls	r3, r3, #3
 8004dca:	4413      	add	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	3338      	adds	r3, #56	; 0x38
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	705a      	strb	r2, [r3, #1]
 8004dde:	e00f      	b.n	8004e00 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004de0:	78fb      	ldrb	r3, [r7, #3]
 8004de2:	f003 020f 	and.w	r2, r3, #15
 8004de6:	4613      	mov	r3, r2
 8004de8:	00db      	lsls	r3, r3, #3
 8004dea:	4413      	add	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	4413      	add	r3, r2
 8004df6:	3304      	adds	r3, #4
 8004df8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004e00:	78fb      	ldrb	r3, [r7, #3]
 8004e02:	f003 030f 	and.w	r3, r3, #15
 8004e06:	b2da      	uxtb	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004e0c:	883a      	ldrh	r2, [r7, #0]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	78ba      	ldrb	r2, [r7, #2]
 8004e16:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	785b      	ldrb	r3, [r3, #1]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d004      	beq.n	8004e2a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004e2a:	78bb      	ldrb	r3, [r7, #2]
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d102      	bne.n	8004e36 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d101      	bne.n	8004e44 <HAL_PCD_EP_Open+0xaa>
 8004e40:	2302      	movs	r3, #2
 8004e42:	e00e      	b.n	8004e62 <HAL_PCD_EP_Open+0xc8>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68f9      	ldr	r1, [r7, #12]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f003 f83c 	bl	8007ed0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004e60:	7afb      	ldrb	r3, [r7, #11]
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b084      	sub	sp, #16
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	460b      	mov	r3, r1
 8004e74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	da0f      	bge.n	8004e9e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e7e:	78fb      	ldrb	r3, [r7, #3]
 8004e80:	f003 020f 	and.w	r2, r3, #15
 8004e84:	4613      	mov	r3, r2
 8004e86:	00db      	lsls	r3, r3, #3
 8004e88:	4413      	add	r3, r2
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	3338      	adds	r3, #56	; 0x38
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	4413      	add	r3, r2
 8004e92:	3304      	adds	r3, #4
 8004e94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	705a      	strb	r2, [r3, #1]
 8004e9c:	e00f      	b.n	8004ebe <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e9e:	78fb      	ldrb	r3, [r7, #3]
 8004ea0:	f003 020f 	and.w	r2, r3, #15
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	4413      	add	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	3304      	adds	r3, #4
 8004eb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004ebe:	78fb      	ldrb	r3, [r7, #3]
 8004ec0:	f003 030f 	and.w	r3, r3, #15
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d101      	bne.n	8004ed8 <HAL_PCD_EP_Close+0x6e>
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	e00e      	b.n	8004ef6 <HAL_PCD_EP_Close+0x8c>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68f9      	ldr	r1, [r7, #12]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f003 f87a 	bl	8007fe0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b086      	sub	sp, #24
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	60f8      	str	r0, [r7, #12]
 8004f06:	607a      	str	r2, [r7, #4]
 8004f08:	603b      	str	r3, [r7, #0]
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f0e:	7afb      	ldrb	r3, [r7, #11]
 8004f10:	f003 020f 	and.w	r2, r3, #15
 8004f14:	4613      	mov	r3, r2
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	4413      	add	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	4413      	add	r3, r2
 8004f24:	3304      	adds	r3, #4
 8004f26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	2200      	movs	r2, #0
 8004f38:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f40:	7afb      	ldrb	r3, [r7, #11]
 8004f42:	f003 030f 	and.w	r3, r3, #15
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d102      	bne.n	8004f5a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f5a:	7afb      	ldrb	r3, [r7, #11]
 8004f5c:	f003 030f 	and.w	r3, r3, #15
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d109      	bne.n	8004f78 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6818      	ldr	r0, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	461a      	mov	r2, r3
 8004f70:	6979      	ldr	r1, [r7, #20]
 8004f72:	f003 fb59 	bl	8008628 <USB_EP0StartXfer>
 8004f76:	e008      	b.n	8004f8a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6818      	ldr	r0, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	461a      	mov	r2, r3
 8004f84:	6979      	ldr	r1, [r7, #20]
 8004f86:	f003 f907 	bl	8008198 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3718      	adds	r7, #24
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	607a      	str	r2, [r7, #4]
 8004f9e:	603b      	str	r3, [r7, #0]
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fa4:	7afb      	ldrb	r3, [r7, #11]
 8004fa6:	f003 020f 	and.w	r2, r3, #15
 8004faa:	4613      	mov	r3, r2
 8004fac:	00db      	lsls	r3, r3, #3
 8004fae:	4413      	add	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	3338      	adds	r3, #56	; 0x38
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	3304      	adds	r3, #4
 8004fba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fd4:	7afb      	ldrb	r3, [r7, #11]
 8004fd6:	f003 030f 	and.w	r3, r3, #15
 8004fda:	b2da      	uxtb	r2, r3
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d102      	bne.n	8004fee <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004fee:	7afb      	ldrb	r3, [r7, #11]
 8004ff0:	f003 030f 	and.w	r3, r3, #15
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d109      	bne.n	800500c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6818      	ldr	r0, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	b2db      	uxtb	r3, r3
 8005002:	461a      	mov	r2, r3
 8005004:	6979      	ldr	r1, [r7, #20]
 8005006:	f003 fb0f 	bl	8008628 <USB_EP0StartXfer>
 800500a:	e008      	b.n	800501e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6818      	ldr	r0, [r3, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	b2db      	uxtb	r3, r3
 8005016:	461a      	mov	r2, r3
 8005018:	6979      	ldr	r1, [r7, #20]
 800501a:	f003 f8bd 	bl	8008198 <USB_EPStartXfer>
  }

  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	460b      	mov	r3, r1
 8005032:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005034:	78fb      	ldrb	r3, [r7, #3]
 8005036:	f003 020f 	and.w	r2, r3, #15
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	429a      	cmp	r2, r3
 8005040:	d901      	bls.n	8005046 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e050      	b.n	80050e8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005046:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800504a:	2b00      	cmp	r3, #0
 800504c:	da0f      	bge.n	800506e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800504e:	78fb      	ldrb	r3, [r7, #3]
 8005050:	f003 020f 	and.w	r2, r3, #15
 8005054:	4613      	mov	r3, r2
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	4413      	add	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	3338      	adds	r3, #56	; 0x38
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	4413      	add	r3, r2
 8005062:	3304      	adds	r3, #4
 8005064:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2201      	movs	r2, #1
 800506a:	705a      	strb	r2, [r3, #1]
 800506c:	e00d      	b.n	800508a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800506e:	78fa      	ldrb	r2, [r7, #3]
 8005070:	4613      	mov	r3, r2
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	4413      	add	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	4413      	add	r3, r2
 8005080:	3304      	adds	r3, #4
 8005082:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2201      	movs	r2, #1
 800508e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005090:	78fb      	ldrb	r3, [r7, #3]
 8005092:	f003 030f 	and.w	r3, r3, #15
 8005096:	b2da      	uxtb	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d101      	bne.n	80050aa <HAL_PCD_EP_SetStall+0x82>
 80050a6:	2302      	movs	r3, #2
 80050a8:	e01e      	b.n	80050e8 <HAL_PCD_EP_SetStall+0xc0>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68f9      	ldr	r1, [r7, #12]
 80050b8:	4618      	mov	r0, r3
 80050ba:	f003 fd4d 	bl	8008b58 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80050be:	78fb      	ldrb	r3, [r7, #3]
 80050c0:	f003 030f 	and.w	r3, r3, #15
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10a      	bne.n	80050de <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6818      	ldr	r0, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	b2d9      	uxtb	r1, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80050d8:	461a      	mov	r2, r3
 80050da:	f003 ff3d 	bl	8008f58 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	460b      	mov	r3, r1
 80050fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80050fc:	78fb      	ldrb	r3, [r7, #3]
 80050fe:	f003 020f 	and.w	r2, r3, #15
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	429a      	cmp	r2, r3
 8005108:	d901      	bls.n	800510e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e042      	b.n	8005194 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800510e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005112:	2b00      	cmp	r3, #0
 8005114:	da0f      	bge.n	8005136 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005116:	78fb      	ldrb	r3, [r7, #3]
 8005118:	f003 020f 	and.w	r2, r3, #15
 800511c:	4613      	mov	r3, r2
 800511e:	00db      	lsls	r3, r3, #3
 8005120:	4413      	add	r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	3338      	adds	r3, #56	; 0x38
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	4413      	add	r3, r2
 800512a:	3304      	adds	r3, #4
 800512c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2201      	movs	r2, #1
 8005132:	705a      	strb	r2, [r3, #1]
 8005134:	e00f      	b.n	8005156 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005136:	78fb      	ldrb	r3, [r7, #3]
 8005138:	f003 020f 	and.w	r2, r3, #15
 800513c:	4613      	mov	r3, r2
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	4413      	add	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	4413      	add	r3, r2
 800514c:	3304      	adds	r3, #4
 800514e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800515c:	78fb      	ldrb	r3, [r7, #3]
 800515e:	f003 030f 	and.w	r3, r3, #15
 8005162:	b2da      	uxtb	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800516e:	2b01      	cmp	r3, #1
 8005170:	d101      	bne.n	8005176 <HAL_PCD_EP_ClrStall+0x86>
 8005172:	2302      	movs	r3, #2
 8005174:	e00e      	b.n	8005194 <HAL_PCD_EP_ClrStall+0xa4>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68f9      	ldr	r1, [r7, #12]
 8005184:	4618      	mov	r0, r3
 8005186:	f003 fd55 	bl	8008c34 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	460b      	mov	r3, r1
 80051a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80051a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	da0c      	bge.n	80051ca <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051b0:	78fb      	ldrb	r3, [r7, #3]
 80051b2:	f003 020f 	and.w	r2, r3, #15
 80051b6:	4613      	mov	r3, r2
 80051b8:	00db      	lsls	r3, r3, #3
 80051ba:	4413      	add	r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	3338      	adds	r3, #56	; 0x38
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	4413      	add	r3, r2
 80051c4:	3304      	adds	r3, #4
 80051c6:	60fb      	str	r3, [r7, #12]
 80051c8:	e00c      	b.n	80051e4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051ca:	78fb      	ldrb	r3, [r7, #3]
 80051cc:	f003 020f 	and.w	r2, r3, #15
 80051d0:	4613      	mov	r3, r2
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	4413      	add	r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	4413      	add	r3, r2
 80051e0:	3304      	adds	r3, #4
 80051e2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68f9      	ldr	r1, [r7, #12]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f003 fb74 	bl	80088d8 <USB_EPStopXfer>
 80051f0:	4603      	mov	r3, r0
 80051f2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80051f4:	7afb      	ldrb	r3, [r7, #11]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b08a      	sub	sp, #40	; 0x28
 8005202:	af02      	add	r7, sp, #8
 8005204:	6078      	str	r0, [r7, #4]
 8005206:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	4613      	mov	r3, r2
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	4413      	add	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	3338      	adds	r3, #56	; 0x38
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	4413      	add	r3, r2
 8005222:	3304      	adds	r3, #4
 8005224:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6a1a      	ldr	r2, [r3, #32]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	429a      	cmp	r2, r3
 8005230:	d901      	bls.n	8005236 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e06c      	b.n	8005310 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	699a      	ldr	r2, [r3, #24]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	69fa      	ldr	r2, [r7, #28]
 8005248:	429a      	cmp	r2, r3
 800524a:	d902      	bls.n	8005252 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	3303      	adds	r3, #3
 8005256:	089b      	lsrs	r3, r3, #2
 8005258:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800525a:	e02b      	b.n	80052b4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	699a      	ldr	r2, [r3, #24]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	69fa      	ldr	r2, [r7, #28]
 800526e:	429a      	cmp	r2, r3
 8005270:	d902      	bls.n	8005278 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	3303      	adds	r3, #3
 800527c:	089b      	lsrs	r3, r3, #2
 800527e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6919      	ldr	r1, [r3, #16]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	b2da      	uxtb	r2, r3
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005290:	b2db      	uxtb	r3, r3
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	4603      	mov	r3, r0
 8005296:	6978      	ldr	r0, [r7, #20]
 8005298:	f003 fbc8 	bl	8008a2c <USB_WritePacket>

    ep->xfer_buff  += len;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	691a      	ldr	r2, [r3, #16]
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	441a      	add	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6a1a      	ldr	r2, [r3, #32]
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	441a      	add	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	015a      	lsls	r2, r3, #5
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d809      	bhi.n	80052de <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6a1a      	ldr	r2, [r3, #32]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d203      	bcs.n	80052de <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1be      	bne.n	800525c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	699a      	ldr	r2, [r3, #24]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d811      	bhi.n	800530e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	f003 030f 	and.w	r3, r3, #15
 80052f0:	2201      	movs	r2, #1
 80052f2:	fa02 f303 	lsl.w	r3, r2, r3
 80052f6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	43db      	mvns	r3, r3
 8005304:	6939      	ldr	r1, [r7, #16]
 8005306:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800530a:	4013      	ands	r3, r2
 800530c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3720      	adds	r7, #32
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b088      	sub	sp, #32
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	333c      	adds	r3, #60	; 0x3c
 8005330:	3304      	adds	r3, #4
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	015a      	lsls	r2, r3, #5
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	4413      	add	r3, r2
 800533e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d17b      	bne.n	8005446 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	f003 0308 	and.w	r3, r3, #8
 8005354:	2b00      	cmp	r3, #0
 8005356:	d015      	beq.n	8005384 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	4a61      	ldr	r2, [pc, #388]	; (80054e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800535c:	4293      	cmp	r3, r2
 800535e:	f240 80b9 	bls.w	80054d4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 80b3 	beq.w	80054d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	015a      	lsls	r2, r3, #5
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	4413      	add	r3, r2
 8005376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800537a:	461a      	mov	r2, r3
 800537c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005380:	6093      	str	r3, [r2, #8]
 8005382:	e0a7      	b.n	80054d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	f003 0320 	and.w	r3, r3, #32
 800538a:	2b00      	cmp	r3, #0
 800538c:	d009      	beq.n	80053a2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	015a      	lsls	r2, r3, #5
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	4413      	add	r3, r2
 8005396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800539a:	461a      	mov	r2, r3
 800539c:	2320      	movs	r3, #32
 800539e:	6093      	str	r3, [r2, #8]
 80053a0:	e098      	b.n	80054d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f040 8093 	bne.w	80054d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	4a4b      	ldr	r2, [pc, #300]	; (80054e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d90f      	bls.n	80053d6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00a      	beq.n	80053d6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053cc:	461a      	mov	r2, r3
 80053ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053d2:	6093      	str	r3, [r2, #8]
 80053d4:	e07e      	b.n	80054d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80053d6:	683a      	ldr	r2, [r7, #0]
 80053d8:	4613      	mov	r3, r2
 80053da:	00db      	lsls	r3, r3, #3
 80053dc:	4413      	add	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	4413      	add	r3, r2
 80053e8:	3304      	adds	r3, #4
 80053ea:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	69da      	ldr	r2, [r3, #28]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	0159      	lsls	r1, r3, #5
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	440b      	add	r3, r1
 80053f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005402:	1ad2      	subs	r2, r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d114      	bne.n	8005438 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d109      	bne.n	800542a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6818      	ldr	r0, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005420:	461a      	mov	r2, r3
 8005422:	2101      	movs	r1, #1
 8005424:	f003 fd98 	bl	8008f58 <USB_EP0_OutStart>
 8005428:	e006      	b.n	8005438 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	691a      	ldr	r2, [r3, #16]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	441a      	add	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	b2db      	uxtb	r3, r3
 800543c:	4619      	mov	r1, r3
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f008 fdc4 	bl	800dfcc <HAL_PCD_DataOutStageCallback>
 8005444:	e046      	b.n	80054d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	4a26      	ldr	r2, [pc, #152]	; (80054e4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d124      	bne.n	8005498 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00a      	beq.n	800546e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	4413      	add	r3, r2
 8005460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005464:	461a      	mov	r2, r3
 8005466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800546a:	6093      	str	r3, [r2, #8]
 800546c:	e032      	b.n	80054d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	f003 0320 	and.w	r3, r3, #32
 8005474:	2b00      	cmp	r3, #0
 8005476:	d008      	beq.n	800548a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	015a      	lsls	r2, r3, #5
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	4413      	add	r3, r2
 8005480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005484:	461a      	mov	r2, r3
 8005486:	2320      	movs	r3, #32
 8005488:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	b2db      	uxtb	r3, r3
 800548e:	4619      	mov	r1, r3
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f008 fd9b 	bl	800dfcc <HAL_PCD_DataOutStageCallback>
 8005496:	e01d      	b.n	80054d4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d114      	bne.n	80054c8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800549e:	6879      	ldr	r1, [r7, #4]
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	4613      	mov	r3, r2
 80054a4:	00db      	lsls	r3, r3, #3
 80054a6:	4413      	add	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	440b      	add	r3, r1
 80054ac:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d108      	bne.n	80054c8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6818      	ldr	r0, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80054c0:	461a      	mov	r2, r3
 80054c2:	2100      	movs	r1, #0
 80054c4:	f003 fd48 	bl	8008f58 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	4619      	mov	r1, r3
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f008 fd7c 	bl	800dfcc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3720      	adds	r7, #32
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	4f54300a 	.word	0x4f54300a
 80054e4:	4f54310a 	.word	0x4f54310a

080054e8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	333c      	adds	r3, #60	; 0x3c
 8005500:	3304      	adds	r3, #4
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	015a      	lsls	r2, r3, #5
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	4413      	add	r3, r2
 800550e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	4a15      	ldr	r2, [pc, #84]	; (8005570 <PCD_EP_OutSetupPacket_int+0x88>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d90e      	bls.n	800553c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005524:	2b00      	cmp	r3, #0
 8005526:	d009      	beq.n	800553c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	4413      	add	r3, r2
 8005530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005534:	461a      	mov	r2, r3
 8005536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800553a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f008 fd33 	bl	800dfa8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	4a0a      	ldr	r2, [pc, #40]	; (8005570 <PCD_EP_OutSetupPacket_int+0x88>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d90c      	bls.n	8005564 <PCD_EP_OutSetupPacket_int+0x7c>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d108      	bne.n	8005564 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6818      	ldr	r0, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800555c:	461a      	mov	r2, r3
 800555e:	2101      	movs	r1, #1
 8005560:	f003 fcfa 	bl	8008f58 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	4f54300a 	.word	0x4f54300a

08005574 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	460b      	mov	r3, r1
 800557e:	70fb      	strb	r3, [r7, #3]
 8005580:	4613      	mov	r3, r2
 8005582:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800558c:	78fb      	ldrb	r3, [r7, #3]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d107      	bne.n	80055a2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005592:	883b      	ldrh	r3, [r7, #0]
 8005594:	0419      	lsls	r1, r3, #16
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	430a      	orrs	r2, r1
 800559e:	629a      	str	r2, [r3, #40]	; 0x28
 80055a0:	e028      	b.n	80055f4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a8:	0c1b      	lsrs	r3, r3, #16
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	4413      	add	r3, r2
 80055ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80055b0:	2300      	movs	r3, #0
 80055b2:	73fb      	strb	r3, [r7, #15]
 80055b4:	e00d      	b.n	80055d2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	7bfb      	ldrb	r3, [r7, #15]
 80055bc:	3340      	adds	r3, #64	; 0x40
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	4413      	add	r3, r2
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	0c1b      	lsrs	r3, r3, #16
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	4413      	add	r3, r2
 80055ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
 80055ce:	3301      	adds	r3, #1
 80055d0:	73fb      	strb	r3, [r7, #15]
 80055d2:	7bfa      	ldrb	r2, [r7, #15]
 80055d4:	78fb      	ldrb	r3, [r7, #3]
 80055d6:	3b01      	subs	r3, #1
 80055d8:	429a      	cmp	r2, r3
 80055da:	d3ec      	bcc.n	80055b6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80055dc:	883b      	ldrh	r3, [r7, #0]
 80055de:	0418      	lsls	r0, r3, #16
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6819      	ldr	r1, [r3, #0]
 80055e4:	78fb      	ldrb	r3, [r7, #3]
 80055e6:	3b01      	subs	r3, #1
 80055e8:	68ba      	ldr	r2, [r7, #8]
 80055ea:	4302      	orrs	r2, r0
 80055ec:	3340      	adds	r3, #64	; 0x40
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	440b      	add	r3, r1
 80055f2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005602:	b480      	push	{r7}
 8005604:	b083      	sub	sp, #12
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
 800560a:	460b      	mov	r3, r1
 800560c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	887a      	ldrh	r2, [r7, #2]
 8005614:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	460b      	mov	r3, r1
 800562e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e267      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b00      	cmp	r3, #0
 8005658:	d075      	beq.n	8005746 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800565a:	4b88      	ldr	r3, [pc, #544]	; (800587c <HAL_RCC_OscConfig+0x240>)
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f003 030c 	and.w	r3, r3, #12
 8005662:	2b04      	cmp	r3, #4
 8005664:	d00c      	beq.n	8005680 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005666:	4b85      	ldr	r3, [pc, #532]	; (800587c <HAL_RCC_OscConfig+0x240>)
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800566e:	2b08      	cmp	r3, #8
 8005670:	d112      	bne.n	8005698 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005672:	4b82      	ldr	r3, [pc, #520]	; (800587c <HAL_RCC_OscConfig+0x240>)
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800567a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800567e:	d10b      	bne.n	8005698 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005680:	4b7e      	ldr	r3, [pc, #504]	; (800587c <HAL_RCC_OscConfig+0x240>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d05b      	beq.n	8005744 <HAL_RCC_OscConfig+0x108>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d157      	bne.n	8005744 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e242      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056a0:	d106      	bne.n	80056b0 <HAL_RCC_OscConfig+0x74>
 80056a2:	4b76      	ldr	r3, [pc, #472]	; (800587c <HAL_RCC_OscConfig+0x240>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a75      	ldr	r2, [pc, #468]	; (800587c <HAL_RCC_OscConfig+0x240>)
 80056a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	e01d      	b.n	80056ec <HAL_RCC_OscConfig+0xb0>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056b8:	d10c      	bne.n	80056d4 <HAL_RCC_OscConfig+0x98>
 80056ba:	4b70      	ldr	r3, [pc, #448]	; (800587c <HAL_RCC_OscConfig+0x240>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a6f      	ldr	r2, [pc, #444]	; (800587c <HAL_RCC_OscConfig+0x240>)
 80056c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056c4:	6013      	str	r3, [r2, #0]
 80056c6:	4b6d      	ldr	r3, [pc, #436]	; (800587c <HAL_RCC_OscConfig+0x240>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a6c      	ldr	r2, [pc, #432]	; (800587c <HAL_RCC_OscConfig+0x240>)
 80056cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	e00b      	b.n	80056ec <HAL_RCC_OscConfig+0xb0>
 80056d4:	4b69      	ldr	r3, [pc, #420]	; (800587c <HAL_RCC_OscConfig+0x240>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a68      	ldr	r2, [pc, #416]	; (800587c <HAL_RCC_OscConfig+0x240>)
 80056da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056de:	6013      	str	r3, [r2, #0]
 80056e0:	4b66      	ldr	r3, [pc, #408]	; (800587c <HAL_RCC_OscConfig+0x240>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a65      	ldr	r2, [pc, #404]	; (800587c <HAL_RCC_OscConfig+0x240>)
 80056e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d013      	beq.n	800571c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f4:	f7fc ff60 	bl	80025b8 <HAL_GetTick>
 80056f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056fa:	e008      	b.n	800570e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056fc:	f7fc ff5c 	bl	80025b8 <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	2b64      	cmp	r3, #100	; 0x64
 8005708:	d901      	bls.n	800570e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e207      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800570e:	4b5b      	ldr	r3, [pc, #364]	; (800587c <HAL_RCC_OscConfig+0x240>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d0f0      	beq.n	80056fc <HAL_RCC_OscConfig+0xc0>
 800571a:	e014      	b.n	8005746 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800571c:	f7fc ff4c 	bl	80025b8 <HAL_GetTick>
 8005720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005722:	e008      	b.n	8005736 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005724:	f7fc ff48 	bl	80025b8 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b64      	cmp	r3, #100	; 0x64
 8005730:	d901      	bls.n	8005736 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e1f3      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005736:	4b51      	ldr	r3, [pc, #324]	; (800587c <HAL_RCC_OscConfig+0x240>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1f0      	bne.n	8005724 <HAL_RCC_OscConfig+0xe8>
 8005742:	e000      	b.n	8005746 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d063      	beq.n	800581a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005752:	4b4a      	ldr	r3, [pc, #296]	; (800587c <HAL_RCC_OscConfig+0x240>)
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f003 030c 	and.w	r3, r3, #12
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00b      	beq.n	8005776 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800575e:	4b47      	ldr	r3, [pc, #284]	; (800587c <HAL_RCC_OscConfig+0x240>)
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005766:	2b08      	cmp	r3, #8
 8005768:	d11c      	bne.n	80057a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800576a:	4b44      	ldr	r3, [pc, #272]	; (800587c <HAL_RCC_OscConfig+0x240>)
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d116      	bne.n	80057a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005776:	4b41      	ldr	r3, [pc, #260]	; (800587c <HAL_RCC_OscConfig+0x240>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d005      	beq.n	800578e <HAL_RCC_OscConfig+0x152>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d001      	beq.n	800578e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e1c7      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800578e:	4b3b      	ldr	r3, [pc, #236]	; (800587c <HAL_RCC_OscConfig+0x240>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	4937      	ldr	r1, [pc, #220]	; (800587c <HAL_RCC_OscConfig+0x240>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057a2:	e03a      	b.n	800581a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d020      	beq.n	80057ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057ac:	4b34      	ldr	r3, [pc, #208]	; (8005880 <HAL_RCC_OscConfig+0x244>)
 80057ae:	2201      	movs	r2, #1
 80057b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b2:	f7fc ff01 	bl	80025b8 <HAL_GetTick>
 80057b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057b8:	e008      	b.n	80057cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057ba:	f7fc fefd 	bl	80025b8 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d901      	bls.n	80057cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e1a8      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057cc:	4b2b      	ldr	r3, [pc, #172]	; (800587c <HAL_RCC_OscConfig+0x240>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0302 	and.w	r3, r3, #2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d0f0      	beq.n	80057ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057d8:	4b28      	ldr	r3, [pc, #160]	; (800587c <HAL_RCC_OscConfig+0x240>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	00db      	lsls	r3, r3, #3
 80057e6:	4925      	ldr	r1, [pc, #148]	; (800587c <HAL_RCC_OscConfig+0x240>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	600b      	str	r3, [r1, #0]
 80057ec:	e015      	b.n	800581a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057ee:	4b24      	ldr	r3, [pc, #144]	; (8005880 <HAL_RCC_OscConfig+0x244>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f4:	f7fc fee0 	bl	80025b8 <HAL_GetTick>
 80057f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057fa:	e008      	b.n	800580e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057fc:	f7fc fedc 	bl	80025b8 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	2b02      	cmp	r3, #2
 8005808:	d901      	bls.n	800580e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e187      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800580e:	4b1b      	ldr	r3, [pc, #108]	; (800587c <HAL_RCC_OscConfig+0x240>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1f0      	bne.n	80057fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0308 	and.w	r3, r3, #8
 8005822:	2b00      	cmp	r3, #0
 8005824:	d036      	beq.n	8005894 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d016      	beq.n	800585c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800582e:	4b15      	ldr	r3, [pc, #84]	; (8005884 <HAL_RCC_OscConfig+0x248>)
 8005830:	2201      	movs	r2, #1
 8005832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005834:	f7fc fec0 	bl	80025b8 <HAL_GetTick>
 8005838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800583a:	e008      	b.n	800584e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800583c:	f7fc febc 	bl	80025b8 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b02      	cmp	r3, #2
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e167      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800584e:	4b0b      	ldr	r3, [pc, #44]	; (800587c <HAL_RCC_OscConfig+0x240>)
 8005850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d0f0      	beq.n	800583c <HAL_RCC_OscConfig+0x200>
 800585a:	e01b      	b.n	8005894 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800585c:	4b09      	ldr	r3, [pc, #36]	; (8005884 <HAL_RCC_OscConfig+0x248>)
 800585e:	2200      	movs	r2, #0
 8005860:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005862:	f7fc fea9 	bl	80025b8 <HAL_GetTick>
 8005866:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005868:	e00e      	b.n	8005888 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800586a:	f7fc fea5 	bl	80025b8 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	2b02      	cmp	r3, #2
 8005876:	d907      	bls.n	8005888 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e150      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
 800587c:	40023800 	.word	0x40023800
 8005880:	42470000 	.word	0x42470000
 8005884:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005888:	4b88      	ldr	r3, [pc, #544]	; (8005aac <HAL_RCC_OscConfig+0x470>)
 800588a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800588c:	f003 0302 	and.w	r3, r3, #2
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1ea      	bne.n	800586a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0304 	and.w	r3, r3, #4
 800589c:	2b00      	cmp	r3, #0
 800589e:	f000 8097 	beq.w	80059d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058a2:	2300      	movs	r3, #0
 80058a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058a6:	4b81      	ldr	r3, [pc, #516]	; (8005aac <HAL_RCC_OscConfig+0x470>)
 80058a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10f      	bne.n	80058d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058b2:	2300      	movs	r3, #0
 80058b4:	60bb      	str	r3, [r7, #8]
 80058b6:	4b7d      	ldr	r3, [pc, #500]	; (8005aac <HAL_RCC_OscConfig+0x470>)
 80058b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ba:	4a7c      	ldr	r2, [pc, #496]	; (8005aac <HAL_RCC_OscConfig+0x470>)
 80058bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058c0:	6413      	str	r3, [r2, #64]	; 0x40
 80058c2:	4b7a      	ldr	r3, [pc, #488]	; (8005aac <HAL_RCC_OscConfig+0x470>)
 80058c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ca:	60bb      	str	r3, [r7, #8]
 80058cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058ce:	2301      	movs	r3, #1
 80058d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058d2:	4b77      	ldr	r3, [pc, #476]	; (8005ab0 <HAL_RCC_OscConfig+0x474>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d118      	bne.n	8005910 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058de:	4b74      	ldr	r3, [pc, #464]	; (8005ab0 <HAL_RCC_OscConfig+0x474>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a73      	ldr	r2, [pc, #460]	; (8005ab0 <HAL_RCC_OscConfig+0x474>)
 80058e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058ea:	f7fc fe65 	bl	80025b8 <HAL_GetTick>
 80058ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058f0:	e008      	b.n	8005904 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058f2:	f7fc fe61 	bl	80025b8 <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d901      	bls.n	8005904 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e10c      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005904:	4b6a      	ldr	r3, [pc, #424]	; (8005ab0 <HAL_RCC_OscConfig+0x474>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800590c:	2b00      	cmp	r3, #0
 800590e:	d0f0      	beq.n	80058f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d106      	bne.n	8005926 <HAL_RCC_OscConfig+0x2ea>
 8005918:	4b64      	ldr	r3, [pc, #400]	; (8005aac <HAL_RCC_OscConfig+0x470>)
 800591a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800591c:	4a63      	ldr	r2, [pc, #396]	; (8005aac <HAL_RCC_OscConfig+0x470>)
 800591e:	f043 0301 	orr.w	r3, r3, #1
 8005922:	6713      	str	r3, [r2, #112]	; 0x70
 8005924:	e01c      	b.n	8005960 <HAL_RCC_OscConfig+0x324>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	2b05      	cmp	r3, #5
 800592c:	d10c      	bne.n	8005948 <HAL_RCC_OscConfig+0x30c>
 800592e:	4b5f      	ldr	r3, [pc, #380]	; (8005aac <HAL_RCC_OscConfig+0x470>)
 8005930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005932:	4a5e      	ldr	r2, [pc, #376]	; (8005aac <HAL_RCC_OscConfig+0x470>)
 8005934:	f043 0304 	orr.w	r3, r3, #4
 8005938:	6713      	str	r3, [r2, #112]	; 0x70
 800593a:	4b5c      	ldr	r3, [pc, #368]	; (8005aac <HAL_RCC_OscConfig+0x470>)
 800593c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800593e:	4a5b      	ldr	r2, [pc, #364]	; (8005aac <HAL_RCC_OscConfig+0x470>)
 8005940:	f043 0301 	orr.w	r3, r3, #1
 8005944:	6713      	str	r3, [r2, #112]	; 0x70
 8005946:	e00b      	b.n	8005960 <HAL_RCC_OscConfig+0x324>
 8005948:	4b58      	ldr	r3, [pc, #352]	; (8005aac <HAL_RCC_OscConfig+0x470>)
 800594a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800594c:	4a57      	ldr	r2, [pc, #348]	; (8005aac <HAL_RCC_OscConfig+0x470>)
 800594e:	f023 0301 	bic.w	r3, r3, #1
 8005952:	6713      	str	r3, [r2, #112]	; 0x70
 8005954:	4b55      	ldr	r3, [pc, #340]	; (8005aac <HAL_RCC_OscConfig+0x470>)
 8005956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005958:	4a54      	ldr	r2, [pc, #336]	; (8005aac <HAL_RCC_OscConfig+0x470>)
 800595a:	f023 0304 	bic.w	r3, r3, #4
 800595e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d015      	beq.n	8005994 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005968:	f7fc fe26 	bl	80025b8 <HAL_GetTick>
 800596c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800596e:	e00a      	b.n	8005986 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005970:	f7fc fe22 	bl	80025b8 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	f241 3288 	movw	r2, #5000	; 0x1388
 800597e:	4293      	cmp	r3, r2
 8005980:	d901      	bls.n	8005986 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e0cb      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005986:	4b49      	ldr	r3, [pc, #292]	; (8005aac <HAL_RCC_OscConfig+0x470>)
 8005988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d0ee      	beq.n	8005970 <HAL_RCC_OscConfig+0x334>
 8005992:	e014      	b.n	80059be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005994:	f7fc fe10 	bl	80025b8 <HAL_GetTick>
 8005998:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800599a:	e00a      	b.n	80059b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800599c:	f7fc fe0c 	bl	80025b8 <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e0b5      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059b2:	4b3e      	ldr	r3, [pc, #248]	; (8005aac <HAL_RCC_OscConfig+0x470>)
 80059b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b6:	f003 0302 	and.w	r3, r3, #2
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1ee      	bne.n	800599c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059be:	7dfb      	ldrb	r3, [r7, #23]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d105      	bne.n	80059d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059c4:	4b39      	ldr	r3, [pc, #228]	; (8005aac <HAL_RCC_OscConfig+0x470>)
 80059c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c8:	4a38      	ldr	r2, [pc, #224]	; (8005aac <HAL_RCC_OscConfig+0x470>)
 80059ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 80a1 	beq.w	8005b1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059da:	4b34      	ldr	r3, [pc, #208]	; (8005aac <HAL_RCC_OscConfig+0x470>)
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f003 030c 	and.w	r3, r3, #12
 80059e2:	2b08      	cmp	r3, #8
 80059e4:	d05c      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d141      	bne.n	8005a72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ee:	4b31      	ldr	r3, [pc, #196]	; (8005ab4 <HAL_RCC_OscConfig+0x478>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059f4:	f7fc fde0 	bl	80025b8 <HAL_GetTick>
 80059f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059fa:	e008      	b.n	8005a0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059fc:	f7fc fddc 	bl	80025b8 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d901      	bls.n	8005a0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e087      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a0e:	4b27      	ldr	r3, [pc, #156]	; (8005aac <HAL_RCC_OscConfig+0x470>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1f0      	bne.n	80059fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	69da      	ldr	r2, [r3, #28]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	431a      	orrs	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a28:	019b      	lsls	r3, r3, #6
 8005a2a:	431a      	orrs	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a30:	085b      	lsrs	r3, r3, #1
 8005a32:	3b01      	subs	r3, #1
 8005a34:	041b      	lsls	r3, r3, #16
 8005a36:	431a      	orrs	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3c:	061b      	lsls	r3, r3, #24
 8005a3e:	491b      	ldr	r1, [pc, #108]	; (8005aac <HAL_RCC_OscConfig+0x470>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a44:	4b1b      	ldr	r3, [pc, #108]	; (8005ab4 <HAL_RCC_OscConfig+0x478>)
 8005a46:	2201      	movs	r2, #1
 8005a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a4a:	f7fc fdb5 	bl	80025b8 <HAL_GetTick>
 8005a4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a50:	e008      	b.n	8005a64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a52:	f7fc fdb1 	bl	80025b8 <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d901      	bls.n	8005a64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e05c      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a64:	4b11      	ldr	r3, [pc, #68]	; (8005aac <HAL_RCC_OscConfig+0x470>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d0f0      	beq.n	8005a52 <HAL_RCC_OscConfig+0x416>
 8005a70:	e054      	b.n	8005b1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a72:	4b10      	ldr	r3, [pc, #64]	; (8005ab4 <HAL_RCC_OscConfig+0x478>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a78:	f7fc fd9e 	bl	80025b8 <HAL_GetTick>
 8005a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a7e:	e008      	b.n	8005a92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a80:	f7fc fd9a 	bl	80025b8 <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d901      	bls.n	8005a92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e045      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a92:	4b06      	ldr	r3, [pc, #24]	; (8005aac <HAL_RCC_OscConfig+0x470>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1f0      	bne.n	8005a80 <HAL_RCC_OscConfig+0x444>
 8005a9e:	e03d      	b.n	8005b1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d107      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e038      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
 8005aac:	40023800 	.word	0x40023800
 8005ab0:	40007000 	.word	0x40007000
 8005ab4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ab8:	4b1b      	ldr	r3, [pc, #108]	; (8005b28 <HAL_RCC_OscConfig+0x4ec>)
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d028      	beq.n	8005b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d121      	bne.n	8005b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d11a      	bne.n	8005b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ae8:	4013      	ands	r3, r2
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005aee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d111      	bne.n	8005b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afe:	085b      	lsrs	r3, r3, #1
 8005b00:	3b01      	subs	r3, #1
 8005b02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d107      	bne.n	8005b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d001      	beq.n	8005b1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e000      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3718      	adds	r7, #24
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	40023800 	.word	0x40023800

08005b2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d101      	bne.n	8005b40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e0cc      	b.n	8005cda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b40:	4b68      	ldr	r3, [pc, #416]	; (8005ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0307 	and.w	r3, r3, #7
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d90c      	bls.n	8005b68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b4e:	4b65      	ldr	r3, [pc, #404]	; (8005ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	b2d2      	uxtb	r2, r2
 8005b54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b56:	4b63      	ldr	r3, [pc, #396]	; (8005ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0307 	and.w	r3, r3, #7
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d001      	beq.n	8005b68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e0b8      	b.n	8005cda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0302 	and.w	r3, r3, #2
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d020      	beq.n	8005bb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d005      	beq.n	8005b8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b80:	4b59      	ldr	r3, [pc, #356]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	4a58      	ldr	r2, [pc, #352]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0308 	and.w	r3, r3, #8
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d005      	beq.n	8005ba4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b98:	4b53      	ldr	r3, [pc, #332]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	4a52      	ldr	r2, [pc, #328]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ba2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ba4:	4b50      	ldr	r3, [pc, #320]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	494d      	ldr	r1, [pc, #308]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d044      	beq.n	8005c4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d107      	bne.n	8005bda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bca:	4b47      	ldr	r3, [pc, #284]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d119      	bne.n	8005c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e07f      	b.n	8005cda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d003      	beq.n	8005bea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005be6:	2b03      	cmp	r3, #3
 8005be8:	d107      	bne.n	8005bfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bea:	4b3f      	ldr	r3, [pc, #252]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d109      	bne.n	8005c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e06f      	b.n	8005cda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bfa:	4b3b      	ldr	r3, [pc, #236]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0302 	and.w	r3, r3, #2
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e067      	b.n	8005cda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c0a:	4b37      	ldr	r3, [pc, #220]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f023 0203 	bic.w	r2, r3, #3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	4934      	ldr	r1, [pc, #208]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c1c:	f7fc fccc 	bl	80025b8 <HAL_GetTick>
 8005c20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c22:	e00a      	b.n	8005c3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c24:	f7fc fcc8 	bl	80025b8 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d901      	bls.n	8005c3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e04f      	b.n	8005cda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c3a:	4b2b      	ldr	r3, [pc, #172]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f003 020c 	and.w	r2, r3, #12
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d1eb      	bne.n	8005c24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c4c:	4b25      	ldr	r3, [pc, #148]	; (8005ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0307 	and.w	r3, r3, #7
 8005c54:	683a      	ldr	r2, [r7, #0]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d20c      	bcs.n	8005c74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c5a:	4b22      	ldr	r3, [pc, #136]	; (8005ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c5c:	683a      	ldr	r2, [r7, #0]
 8005c5e:	b2d2      	uxtb	r2, r2
 8005c60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c62:	4b20      	ldr	r3, [pc, #128]	; (8005ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0307 	and.w	r3, r3, #7
 8005c6a:	683a      	ldr	r2, [r7, #0]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d001      	beq.n	8005c74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e032      	b.n	8005cda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0304 	and.w	r3, r3, #4
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d008      	beq.n	8005c92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c80:	4b19      	ldr	r3, [pc, #100]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	4916      	ldr	r1, [pc, #88]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0308 	and.w	r3, r3, #8
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d009      	beq.n	8005cb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c9e:	4b12      	ldr	r3, [pc, #72]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	00db      	lsls	r3, r3, #3
 8005cac:	490e      	ldr	r1, [pc, #56]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005cb2:	f000 f821 	bl	8005cf8 <HAL_RCC_GetSysClockFreq>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	4b0b      	ldr	r3, [pc, #44]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	091b      	lsrs	r3, r3, #4
 8005cbe:	f003 030f 	and.w	r3, r3, #15
 8005cc2:	490a      	ldr	r1, [pc, #40]	; (8005cec <HAL_RCC_ClockConfig+0x1c0>)
 8005cc4:	5ccb      	ldrb	r3, [r1, r3]
 8005cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8005cca:	4a09      	ldr	r2, [pc, #36]	; (8005cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8005ccc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005cce:	4b09      	ldr	r3, [pc, #36]	; (8005cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7fc fc2c 	bl	8002530 <HAL_InitTick>

  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	40023c00 	.word	0x40023c00
 8005ce8:	40023800 	.word	0x40023800
 8005cec:	080116fc 	.word	0x080116fc
 8005cf0:	20000020 	.word	0x20000020
 8005cf4:	20000024 	.word	0x20000024

08005cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cfc:	b094      	sub	sp, #80	; 0x50
 8005cfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005d00:	2300      	movs	r3, #0
 8005d02:	647b      	str	r3, [r7, #68]	; 0x44
 8005d04:	2300      	movs	r3, #0
 8005d06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d08:	2300      	movs	r3, #0
 8005d0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d10:	4b79      	ldr	r3, [pc, #484]	; (8005ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f003 030c 	and.w	r3, r3, #12
 8005d18:	2b08      	cmp	r3, #8
 8005d1a:	d00d      	beq.n	8005d38 <HAL_RCC_GetSysClockFreq+0x40>
 8005d1c:	2b08      	cmp	r3, #8
 8005d1e:	f200 80e1 	bhi.w	8005ee4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d002      	beq.n	8005d2c <HAL_RCC_GetSysClockFreq+0x34>
 8005d26:	2b04      	cmp	r3, #4
 8005d28:	d003      	beq.n	8005d32 <HAL_RCC_GetSysClockFreq+0x3a>
 8005d2a:	e0db      	b.n	8005ee4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d2c:	4b73      	ldr	r3, [pc, #460]	; (8005efc <HAL_RCC_GetSysClockFreq+0x204>)
 8005d2e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005d30:	e0db      	b.n	8005eea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d32:	4b73      	ldr	r3, [pc, #460]	; (8005f00 <HAL_RCC_GetSysClockFreq+0x208>)
 8005d34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d36:	e0d8      	b.n	8005eea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d38:	4b6f      	ldr	r3, [pc, #444]	; (8005ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d40:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d42:	4b6d      	ldr	r3, [pc, #436]	; (8005ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d063      	beq.n	8005e16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d4e:	4b6a      	ldr	r3, [pc, #424]	; (8005ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	099b      	lsrs	r3, r3, #6
 8005d54:	2200      	movs	r2, #0
 8005d56:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d60:	633b      	str	r3, [r7, #48]	; 0x30
 8005d62:	2300      	movs	r3, #0
 8005d64:	637b      	str	r3, [r7, #52]	; 0x34
 8005d66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005d6a:	4622      	mov	r2, r4
 8005d6c:	462b      	mov	r3, r5
 8005d6e:	f04f 0000 	mov.w	r0, #0
 8005d72:	f04f 0100 	mov.w	r1, #0
 8005d76:	0159      	lsls	r1, r3, #5
 8005d78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d7c:	0150      	lsls	r0, r2, #5
 8005d7e:	4602      	mov	r2, r0
 8005d80:	460b      	mov	r3, r1
 8005d82:	4621      	mov	r1, r4
 8005d84:	1a51      	subs	r1, r2, r1
 8005d86:	6139      	str	r1, [r7, #16]
 8005d88:	4629      	mov	r1, r5
 8005d8a:	eb63 0301 	sbc.w	r3, r3, r1
 8005d8e:	617b      	str	r3, [r7, #20]
 8005d90:	f04f 0200 	mov.w	r2, #0
 8005d94:	f04f 0300 	mov.w	r3, #0
 8005d98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d9c:	4659      	mov	r1, fp
 8005d9e:	018b      	lsls	r3, r1, #6
 8005da0:	4651      	mov	r1, sl
 8005da2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005da6:	4651      	mov	r1, sl
 8005da8:	018a      	lsls	r2, r1, #6
 8005daa:	4651      	mov	r1, sl
 8005dac:	ebb2 0801 	subs.w	r8, r2, r1
 8005db0:	4659      	mov	r1, fp
 8005db2:	eb63 0901 	sbc.w	r9, r3, r1
 8005db6:	f04f 0200 	mov.w	r2, #0
 8005dba:	f04f 0300 	mov.w	r3, #0
 8005dbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005dc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005dc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005dca:	4690      	mov	r8, r2
 8005dcc:	4699      	mov	r9, r3
 8005dce:	4623      	mov	r3, r4
 8005dd0:	eb18 0303 	adds.w	r3, r8, r3
 8005dd4:	60bb      	str	r3, [r7, #8]
 8005dd6:	462b      	mov	r3, r5
 8005dd8:	eb49 0303 	adc.w	r3, r9, r3
 8005ddc:	60fb      	str	r3, [r7, #12]
 8005dde:	f04f 0200 	mov.w	r2, #0
 8005de2:	f04f 0300 	mov.w	r3, #0
 8005de6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005dea:	4629      	mov	r1, r5
 8005dec:	024b      	lsls	r3, r1, #9
 8005dee:	4621      	mov	r1, r4
 8005df0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005df4:	4621      	mov	r1, r4
 8005df6:	024a      	lsls	r2, r1, #9
 8005df8:	4610      	mov	r0, r2
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dfe:	2200      	movs	r2, #0
 8005e00:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e08:	f7fa fa3a 	bl	8000280 <__aeabi_uldivmod>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	460b      	mov	r3, r1
 8005e10:	4613      	mov	r3, r2
 8005e12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e14:	e058      	b.n	8005ec8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e16:	4b38      	ldr	r3, [pc, #224]	; (8005ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	099b      	lsrs	r3, r3, #6
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	4618      	mov	r0, r3
 8005e20:	4611      	mov	r1, r2
 8005e22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e26:	623b      	str	r3, [r7, #32]
 8005e28:	2300      	movs	r3, #0
 8005e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e30:	4642      	mov	r2, r8
 8005e32:	464b      	mov	r3, r9
 8005e34:	f04f 0000 	mov.w	r0, #0
 8005e38:	f04f 0100 	mov.w	r1, #0
 8005e3c:	0159      	lsls	r1, r3, #5
 8005e3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e42:	0150      	lsls	r0, r2, #5
 8005e44:	4602      	mov	r2, r0
 8005e46:	460b      	mov	r3, r1
 8005e48:	4641      	mov	r1, r8
 8005e4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e4e:	4649      	mov	r1, r9
 8005e50:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e54:	f04f 0200 	mov.w	r2, #0
 8005e58:	f04f 0300 	mov.w	r3, #0
 8005e5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e68:	ebb2 040a 	subs.w	r4, r2, sl
 8005e6c:	eb63 050b 	sbc.w	r5, r3, fp
 8005e70:	f04f 0200 	mov.w	r2, #0
 8005e74:	f04f 0300 	mov.w	r3, #0
 8005e78:	00eb      	lsls	r3, r5, #3
 8005e7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e7e:	00e2      	lsls	r2, r4, #3
 8005e80:	4614      	mov	r4, r2
 8005e82:	461d      	mov	r5, r3
 8005e84:	4643      	mov	r3, r8
 8005e86:	18e3      	adds	r3, r4, r3
 8005e88:	603b      	str	r3, [r7, #0]
 8005e8a:	464b      	mov	r3, r9
 8005e8c:	eb45 0303 	adc.w	r3, r5, r3
 8005e90:	607b      	str	r3, [r7, #4]
 8005e92:	f04f 0200 	mov.w	r2, #0
 8005e96:	f04f 0300 	mov.w	r3, #0
 8005e9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e9e:	4629      	mov	r1, r5
 8005ea0:	028b      	lsls	r3, r1, #10
 8005ea2:	4621      	mov	r1, r4
 8005ea4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ea8:	4621      	mov	r1, r4
 8005eaa:	028a      	lsls	r2, r1, #10
 8005eac:	4610      	mov	r0, r2
 8005eae:	4619      	mov	r1, r3
 8005eb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	61bb      	str	r3, [r7, #24]
 8005eb6:	61fa      	str	r2, [r7, #28]
 8005eb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ebc:	f7fa f9e0 	bl	8000280 <__aeabi_uldivmod>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ec8:	4b0b      	ldr	r3, [pc, #44]	; (8005ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	0c1b      	lsrs	r3, r3, #16
 8005ece:	f003 0303 	and.w	r3, r3, #3
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	005b      	lsls	r3, r3, #1
 8005ed6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005ed8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005eda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ee2:	e002      	b.n	8005eea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ee4:	4b05      	ldr	r3, [pc, #20]	; (8005efc <HAL_RCC_GetSysClockFreq+0x204>)
 8005ee6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ee8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005eea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3750      	adds	r7, #80	; 0x50
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ef6:	bf00      	nop
 8005ef8:	40023800 	.word	0x40023800
 8005efc:	00f42400 	.word	0x00f42400
 8005f00:	007a1200 	.word	0x007a1200

08005f04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f04:	b480      	push	{r7}
 8005f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f08:	4b03      	ldr	r3, [pc, #12]	; (8005f18 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	20000020 	.word	0x20000020

08005f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f20:	f7ff fff0 	bl	8005f04 <HAL_RCC_GetHCLKFreq>
 8005f24:	4602      	mov	r2, r0
 8005f26:	4b05      	ldr	r3, [pc, #20]	; (8005f3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	0a9b      	lsrs	r3, r3, #10
 8005f2c:	f003 0307 	and.w	r3, r3, #7
 8005f30:	4903      	ldr	r1, [pc, #12]	; (8005f40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f32:	5ccb      	ldrb	r3, [r1, r3]
 8005f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	40023800 	.word	0x40023800
 8005f40:	0801170c 	.word	0x0801170c

08005f44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005f48:	f7ff ffdc 	bl	8005f04 <HAL_RCC_GetHCLKFreq>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	4b05      	ldr	r3, [pc, #20]	; (8005f64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	0b5b      	lsrs	r3, r3, #13
 8005f54:	f003 0307 	and.w	r3, r3, #7
 8005f58:	4903      	ldr	r1, [pc, #12]	; (8005f68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f5a:	5ccb      	ldrb	r3, [r1, r3]
 8005f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	40023800 	.word	0x40023800
 8005f68:	0801170c 	.word	0x0801170c

08005f6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e07b      	b.n	8006076 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d108      	bne.n	8005f98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f8e:	d009      	beq.n	8005fa4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	61da      	str	r2, [r3, #28]
 8005f96:	e005      	b.n	8005fa4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d106      	bne.n	8005fc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f7fc f810 	bl	8001fe4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005fec:	431a      	orrs	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	f003 0302 	and.w	r3, r3, #2
 8006000:	431a      	orrs	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	f003 0301 	and.w	r3, r3, #1
 800600a:	431a      	orrs	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006014:	431a      	orrs	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	69db      	ldr	r3, [r3, #28]
 800601a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800601e:	431a      	orrs	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006028:	ea42 0103 	orr.w	r1, r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006030:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	430a      	orrs	r2, r1
 800603a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	0c1b      	lsrs	r3, r3, #16
 8006042:	f003 0104 	and.w	r1, r3, #4
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604a:	f003 0210 	and.w	r2, r3, #16
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	430a      	orrs	r2, r1
 8006054:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	69da      	ldr	r2, [r3, #28]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006064:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800607e:	b580      	push	{r7, lr}
 8006080:	b088      	sub	sp, #32
 8006082:	af00      	add	r7, sp, #0
 8006084:	60f8      	str	r0, [r7, #12]
 8006086:	60b9      	str	r1, [r7, #8]
 8006088:	603b      	str	r3, [r7, #0]
 800608a:	4613      	mov	r3, r2
 800608c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800608e:	2300      	movs	r3, #0
 8006090:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006098:	2b01      	cmp	r3, #1
 800609a:	d101      	bne.n	80060a0 <HAL_SPI_Transmit+0x22>
 800609c:	2302      	movs	r3, #2
 800609e:	e126      	b.n	80062ee <HAL_SPI_Transmit+0x270>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060a8:	f7fc fa86 	bl	80025b8 <HAL_GetTick>
 80060ac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80060ae:	88fb      	ldrh	r3, [r7, #6]
 80060b0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d002      	beq.n	80060c4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80060be:	2302      	movs	r3, #2
 80060c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80060c2:	e10b      	b.n	80062dc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d002      	beq.n	80060d0 <HAL_SPI_Transmit+0x52>
 80060ca:	88fb      	ldrh	r3, [r7, #6]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d102      	bne.n	80060d6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80060d4:	e102      	b.n	80062dc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2203      	movs	r2, #3
 80060da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	88fa      	ldrh	r2, [r7, #6]
 80060ee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	88fa      	ldrh	r2, [r7, #6]
 80060f4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800611c:	d10f      	bne.n	800613e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800612c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800613c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006148:	2b40      	cmp	r3, #64	; 0x40
 800614a:	d007      	beq.n	800615c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800615a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006164:	d14b      	bne.n	80061fe <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d002      	beq.n	8006174 <HAL_SPI_Transmit+0xf6>
 800616e:	8afb      	ldrh	r3, [r7, #22]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d13e      	bne.n	80061f2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006178:	881a      	ldrh	r2, [r3, #0]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006184:	1c9a      	adds	r2, r3, #2
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800618e:	b29b      	uxth	r3, r3
 8006190:	3b01      	subs	r3, #1
 8006192:	b29a      	uxth	r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006198:	e02b      	b.n	80061f2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	f003 0302 	and.w	r3, r3, #2
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d112      	bne.n	80061ce <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ac:	881a      	ldrh	r2, [r3, #0]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b8:	1c9a      	adds	r2, r3, #2
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	3b01      	subs	r3, #1
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	86da      	strh	r2, [r3, #54]	; 0x36
 80061cc:	e011      	b.n	80061f2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061ce:	f7fc f9f3 	bl	80025b8 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	683a      	ldr	r2, [r7, #0]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d803      	bhi.n	80061e6 <HAL_SPI_Transmit+0x168>
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e4:	d102      	bne.n	80061ec <HAL_SPI_Transmit+0x16e>
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d102      	bne.n	80061f2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80061f0:	e074      	b.n	80062dc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1ce      	bne.n	800619a <HAL_SPI_Transmit+0x11c>
 80061fc:	e04c      	b.n	8006298 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d002      	beq.n	800620c <HAL_SPI_Transmit+0x18e>
 8006206:	8afb      	ldrh	r3, [r7, #22]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d140      	bne.n	800628e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	330c      	adds	r3, #12
 8006216:	7812      	ldrb	r2, [r2, #0]
 8006218:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621e:	1c5a      	adds	r2, r3, #1
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006228:	b29b      	uxth	r3, r3
 800622a:	3b01      	subs	r3, #1
 800622c:	b29a      	uxth	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006232:	e02c      	b.n	800628e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	f003 0302 	and.w	r3, r3, #2
 800623e:	2b02      	cmp	r3, #2
 8006240:	d113      	bne.n	800626a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	330c      	adds	r3, #12
 800624c:	7812      	ldrb	r2, [r2, #0]
 800624e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006254:	1c5a      	adds	r2, r3, #1
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800625e:	b29b      	uxth	r3, r3
 8006260:	3b01      	subs	r3, #1
 8006262:	b29a      	uxth	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	86da      	strh	r2, [r3, #54]	; 0x36
 8006268:	e011      	b.n	800628e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800626a:	f7fc f9a5 	bl	80025b8 <HAL_GetTick>
 800626e:	4602      	mov	r2, r0
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	429a      	cmp	r2, r3
 8006278:	d803      	bhi.n	8006282 <HAL_SPI_Transmit+0x204>
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006280:	d102      	bne.n	8006288 <HAL_SPI_Transmit+0x20a>
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d102      	bne.n	800628e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800628c:	e026      	b.n	80062dc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006292:	b29b      	uxth	r3, r3
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1cd      	bne.n	8006234 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006298:	69ba      	ldr	r2, [r7, #24]
 800629a:	6839      	ldr	r1, [r7, #0]
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f000 fa55 	bl	800674c <SPI_EndRxTxTransaction>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d002      	beq.n	80062ae <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2220      	movs	r2, #32
 80062ac:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10a      	bne.n	80062cc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062b6:	2300      	movs	r3, #0
 80062b8:	613b      	str	r3, [r7, #16]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	613b      	str	r3, [r7, #16]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	613b      	str	r3, [r7, #16]
 80062ca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d002      	beq.n	80062da <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	77fb      	strb	r3, [r7, #31]
 80062d8:	e000      	b.n	80062dc <HAL_SPI_Transmit+0x25e>
  }

error:
 80062da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80062ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3720      	adds	r7, #32
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b08c      	sub	sp, #48	; 0x30
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	60f8      	str	r0, [r7, #12]
 80062fe:	60b9      	str	r1, [r7, #8]
 8006300:	607a      	str	r2, [r7, #4]
 8006302:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006304:	2301      	movs	r3, #1
 8006306:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006308:	2300      	movs	r3, #0
 800630a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006314:	2b01      	cmp	r3, #1
 8006316:	d101      	bne.n	800631c <HAL_SPI_TransmitReceive+0x26>
 8006318:	2302      	movs	r3, #2
 800631a:	e18a      	b.n	8006632 <HAL_SPI_TransmitReceive+0x33c>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006324:	f7fc f948 	bl	80025b8 <HAL_GetTick>
 8006328:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006330:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800633a:	887b      	ldrh	r3, [r7, #2]
 800633c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800633e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006342:	2b01      	cmp	r3, #1
 8006344:	d00f      	beq.n	8006366 <HAL_SPI_TransmitReceive+0x70>
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800634c:	d107      	bne.n	800635e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d103      	bne.n	800635e <HAL_SPI_TransmitReceive+0x68>
 8006356:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800635a:	2b04      	cmp	r3, #4
 800635c:	d003      	beq.n	8006366 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800635e:	2302      	movs	r3, #2
 8006360:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006364:	e15b      	b.n	800661e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d005      	beq.n	8006378 <HAL_SPI_TransmitReceive+0x82>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d002      	beq.n	8006378 <HAL_SPI_TransmitReceive+0x82>
 8006372:	887b      	ldrh	r3, [r7, #2]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d103      	bne.n	8006380 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800637e:	e14e      	b.n	800661e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2b04      	cmp	r3, #4
 800638a:	d003      	beq.n	8006394 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2205      	movs	r2, #5
 8006390:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	887a      	ldrh	r2, [r7, #2]
 80063a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	887a      	ldrh	r2, [r7, #2]
 80063aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	887a      	ldrh	r2, [r7, #2]
 80063b6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	887a      	ldrh	r2, [r7, #2]
 80063bc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d4:	2b40      	cmp	r3, #64	; 0x40
 80063d6:	d007      	beq.n	80063e8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063f0:	d178      	bne.n	80064e4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <HAL_SPI_TransmitReceive+0x10a>
 80063fa:	8b7b      	ldrh	r3, [r7, #26]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d166      	bne.n	80064ce <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006404:	881a      	ldrh	r2, [r3, #0]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006410:	1c9a      	adds	r2, r3, #2
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800641a:	b29b      	uxth	r3, r3
 800641c:	3b01      	subs	r3, #1
 800641e:	b29a      	uxth	r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006424:	e053      	b.n	80064ce <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	f003 0302 	and.w	r3, r3, #2
 8006430:	2b02      	cmp	r3, #2
 8006432:	d11b      	bne.n	800646c <HAL_SPI_TransmitReceive+0x176>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006438:	b29b      	uxth	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d016      	beq.n	800646c <HAL_SPI_TransmitReceive+0x176>
 800643e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006440:	2b01      	cmp	r3, #1
 8006442:	d113      	bne.n	800646c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006448:	881a      	ldrh	r2, [r3, #0]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006454:	1c9a      	adds	r2, r3, #2
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800645e:	b29b      	uxth	r3, r3
 8006460:	3b01      	subs	r3, #1
 8006462:	b29a      	uxth	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006468:	2300      	movs	r3, #0
 800646a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b01      	cmp	r3, #1
 8006478:	d119      	bne.n	80064ae <HAL_SPI_TransmitReceive+0x1b8>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800647e:	b29b      	uxth	r3, r3
 8006480:	2b00      	cmp	r3, #0
 8006482:	d014      	beq.n	80064ae <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68da      	ldr	r2, [r3, #12]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648e:	b292      	uxth	r2, r2
 8006490:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006496:	1c9a      	adds	r2, r3, #2
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	3b01      	subs	r3, #1
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064aa:	2301      	movs	r3, #1
 80064ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80064ae:	f7fc f883 	bl	80025b8 <HAL_GetTick>
 80064b2:	4602      	mov	r2, r0
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d807      	bhi.n	80064ce <HAL_SPI_TransmitReceive+0x1d8>
 80064be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c4:	d003      	beq.n	80064ce <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80064cc:	e0a7      	b.n	800661e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1a6      	bne.n	8006426 <HAL_SPI_TransmitReceive+0x130>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064dc:	b29b      	uxth	r3, r3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1a1      	bne.n	8006426 <HAL_SPI_TransmitReceive+0x130>
 80064e2:	e07c      	b.n	80065de <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d002      	beq.n	80064f2 <HAL_SPI_TransmitReceive+0x1fc>
 80064ec:	8b7b      	ldrh	r3, [r7, #26]
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d16b      	bne.n	80065ca <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	330c      	adds	r3, #12
 80064fc:	7812      	ldrb	r2, [r2, #0]
 80064fe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006504:	1c5a      	adds	r2, r3, #1
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800650e:	b29b      	uxth	r3, r3
 8006510:	3b01      	subs	r3, #1
 8006512:	b29a      	uxth	r2, r3
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006518:	e057      	b.n	80065ca <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	f003 0302 	and.w	r3, r3, #2
 8006524:	2b02      	cmp	r3, #2
 8006526:	d11c      	bne.n	8006562 <HAL_SPI_TransmitReceive+0x26c>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800652c:	b29b      	uxth	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d017      	beq.n	8006562 <HAL_SPI_TransmitReceive+0x26c>
 8006532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006534:	2b01      	cmp	r3, #1
 8006536:	d114      	bne.n	8006562 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	330c      	adds	r3, #12
 8006542:	7812      	ldrb	r2, [r2, #0]
 8006544:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654a:	1c5a      	adds	r2, r3, #1
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006554:	b29b      	uxth	r3, r3
 8006556:	3b01      	subs	r3, #1
 8006558:	b29a      	uxth	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800655e:	2300      	movs	r3, #0
 8006560:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	2b01      	cmp	r3, #1
 800656e:	d119      	bne.n	80065a4 <HAL_SPI_TransmitReceive+0x2ae>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006574:	b29b      	uxth	r3, r3
 8006576:	2b00      	cmp	r3, #0
 8006578:	d014      	beq.n	80065a4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68da      	ldr	r2, [r3, #12]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006584:	b2d2      	uxtb	r2, r2
 8006586:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658c:	1c5a      	adds	r2, r3, #1
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006596:	b29b      	uxth	r3, r3
 8006598:	3b01      	subs	r3, #1
 800659a:	b29a      	uxth	r2, r3
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80065a0:	2301      	movs	r3, #1
 80065a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80065a4:	f7fc f808 	bl	80025b8 <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d803      	bhi.n	80065bc <HAL_SPI_TransmitReceive+0x2c6>
 80065b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ba:	d102      	bne.n	80065c2 <HAL_SPI_TransmitReceive+0x2cc>
 80065bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d103      	bne.n	80065ca <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80065c8:	e029      	b.n	800661e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1a2      	bne.n	800651a <HAL_SPI_TransmitReceive+0x224>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065d8:	b29b      	uxth	r3, r3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d19d      	bne.n	800651a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f000 f8b2 	bl	800674c <SPI_EndRxTxTransaction>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d006      	beq.n	80065fc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2220      	movs	r2, #32
 80065f8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80065fa:	e010      	b.n	800661e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d10b      	bne.n	800661c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006604:	2300      	movs	r3, #0
 8006606:	617b      	str	r3, [r7, #20]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	617b      	str	r3, [r7, #20]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	617b      	str	r3, [r7, #20]
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	e000      	b.n	800661e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800661c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800662e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006632:	4618      	mov	r0, r3
 8006634:	3730      	adds	r7, #48	; 0x30
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
	...

0800663c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b088      	sub	sp, #32
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	603b      	str	r3, [r7, #0]
 8006648:	4613      	mov	r3, r2
 800664a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800664c:	f7fb ffb4 	bl	80025b8 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006654:	1a9b      	subs	r3, r3, r2
 8006656:	683a      	ldr	r2, [r7, #0]
 8006658:	4413      	add	r3, r2
 800665a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800665c:	f7fb ffac 	bl	80025b8 <HAL_GetTick>
 8006660:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006662:	4b39      	ldr	r3, [pc, #228]	; (8006748 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	015b      	lsls	r3, r3, #5
 8006668:	0d1b      	lsrs	r3, r3, #20
 800666a:	69fa      	ldr	r2, [r7, #28]
 800666c:	fb02 f303 	mul.w	r3, r2, r3
 8006670:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006672:	e054      	b.n	800671e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800667a:	d050      	beq.n	800671e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800667c:	f7fb ff9c 	bl	80025b8 <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	69fa      	ldr	r2, [r7, #28]
 8006688:	429a      	cmp	r2, r3
 800668a:	d902      	bls.n	8006692 <SPI_WaitFlagStateUntilTimeout+0x56>
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d13d      	bne.n	800670e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	685a      	ldr	r2, [r3, #4]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80066a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066aa:	d111      	bne.n	80066d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066b4:	d004      	beq.n	80066c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066be:	d107      	bne.n	80066d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066d8:	d10f      	bne.n	80066fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066e8:	601a      	str	r2, [r3, #0]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e017      	b.n	800673e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d101      	bne.n	8006718 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006714:	2300      	movs	r3, #0
 8006716:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	3b01      	subs	r3, #1
 800671c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	689a      	ldr	r2, [r3, #8]
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	4013      	ands	r3, r2
 8006728:	68ba      	ldr	r2, [r7, #8]
 800672a:	429a      	cmp	r2, r3
 800672c:	bf0c      	ite	eq
 800672e:	2301      	moveq	r3, #1
 8006730:	2300      	movne	r3, #0
 8006732:	b2db      	uxtb	r3, r3
 8006734:	461a      	mov	r2, r3
 8006736:	79fb      	ldrb	r3, [r7, #7]
 8006738:	429a      	cmp	r2, r3
 800673a:	d19b      	bne.n	8006674 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3720      	adds	r7, #32
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	20000020 	.word	0x20000020

0800674c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b088      	sub	sp, #32
 8006750:	af02      	add	r7, sp, #8
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006758:	4b1b      	ldr	r3, [pc, #108]	; (80067c8 <SPI_EndRxTxTransaction+0x7c>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a1b      	ldr	r2, [pc, #108]	; (80067cc <SPI_EndRxTxTransaction+0x80>)
 800675e:	fba2 2303 	umull	r2, r3, r2, r3
 8006762:	0d5b      	lsrs	r3, r3, #21
 8006764:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006768:	fb02 f303 	mul.w	r3, r2, r3
 800676c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006776:	d112      	bne.n	800679e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	9300      	str	r3, [sp, #0]
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	2200      	movs	r2, #0
 8006780:	2180      	movs	r1, #128	; 0x80
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	f7ff ff5a 	bl	800663c <SPI_WaitFlagStateUntilTimeout>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d016      	beq.n	80067bc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006792:	f043 0220 	orr.w	r2, r3, #32
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	e00f      	b.n	80067be <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00a      	beq.n	80067ba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	3b01      	subs	r3, #1
 80067a8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b4:	2b80      	cmp	r3, #128	; 0x80
 80067b6:	d0f2      	beq.n	800679e <SPI_EndRxTxTransaction+0x52>
 80067b8:	e000      	b.n	80067bc <SPI_EndRxTxTransaction+0x70>
        break;
 80067ba:	bf00      	nop
  }

  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3718      	adds	r7, #24
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	20000020 	.word	0x20000020
 80067cc:	165e9f81 	.word	0x165e9f81

080067d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d101      	bne.n	80067e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e041      	b.n	8006866 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d106      	bne.n	80067fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f7fb fc84 	bl	8002104 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2202      	movs	r2, #2
 8006800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	3304      	adds	r3, #4
 800680c:	4619      	mov	r1, r3
 800680e:	4610      	mov	r0, r2
 8006810:	f000 fa88 	bl	8006d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3708      	adds	r7, #8
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
	...

08006870 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800687e:	b2db      	uxtb	r3, r3
 8006880:	2b01      	cmp	r3, #1
 8006882:	d001      	beq.n	8006888 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e044      	b.n	8006912 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2202      	movs	r2, #2
 800688c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68da      	ldr	r2, [r3, #12]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f042 0201 	orr.w	r2, r2, #1
 800689e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a1e      	ldr	r2, [pc, #120]	; (8006920 <HAL_TIM_Base_Start_IT+0xb0>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d018      	beq.n	80068dc <HAL_TIM_Base_Start_IT+0x6c>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068b2:	d013      	beq.n	80068dc <HAL_TIM_Base_Start_IT+0x6c>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a1a      	ldr	r2, [pc, #104]	; (8006924 <HAL_TIM_Base_Start_IT+0xb4>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d00e      	beq.n	80068dc <HAL_TIM_Base_Start_IT+0x6c>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a19      	ldr	r2, [pc, #100]	; (8006928 <HAL_TIM_Base_Start_IT+0xb8>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d009      	beq.n	80068dc <HAL_TIM_Base_Start_IT+0x6c>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a17      	ldr	r2, [pc, #92]	; (800692c <HAL_TIM_Base_Start_IT+0xbc>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d004      	beq.n	80068dc <HAL_TIM_Base_Start_IT+0x6c>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a16      	ldr	r2, [pc, #88]	; (8006930 <HAL_TIM_Base_Start_IT+0xc0>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d111      	bne.n	8006900 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f003 0307 	and.w	r3, r3, #7
 80068e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2b06      	cmp	r3, #6
 80068ec:	d010      	beq.n	8006910 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f042 0201 	orr.w	r2, r2, #1
 80068fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068fe:	e007      	b.n	8006910 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f042 0201 	orr.w	r2, r2, #1
 800690e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3714      	adds	r7, #20
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	40010000 	.word	0x40010000
 8006924:	40000400 	.word	0x40000400
 8006928:	40000800 	.word	0x40000800
 800692c:	40000c00 	.word	0x40000c00
 8006930:	40014000 	.word	0x40014000

08006934 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	f003 0302 	and.w	r3, r3, #2
 8006946:	2b02      	cmp	r3, #2
 8006948:	d122      	bne.n	8006990 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	f003 0302 	and.w	r3, r3, #2
 8006954:	2b02      	cmp	r3, #2
 8006956:	d11b      	bne.n	8006990 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f06f 0202 	mvn.w	r2, #2
 8006960:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	f003 0303 	and.w	r3, r3, #3
 8006972:	2b00      	cmp	r3, #0
 8006974:	d003      	beq.n	800697e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 f9b5 	bl	8006ce6 <HAL_TIM_IC_CaptureCallback>
 800697c:	e005      	b.n	800698a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f9a7 	bl	8006cd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 f9b8 	bl	8006cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	f003 0304 	and.w	r3, r3, #4
 800699a:	2b04      	cmp	r3, #4
 800699c:	d122      	bne.n	80069e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	f003 0304 	and.w	r3, r3, #4
 80069a8:	2b04      	cmp	r3, #4
 80069aa:	d11b      	bne.n	80069e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f06f 0204 	mvn.w	r2, #4
 80069b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2202      	movs	r2, #2
 80069ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d003      	beq.n	80069d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f98b 	bl	8006ce6 <HAL_TIM_IC_CaptureCallback>
 80069d0:	e005      	b.n	80069de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f97d 	bl	8006cd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 f98e 	bl	8006cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	f003 0308 	and.w	r3, r3, #8
 80069ee:	2b08      	cmp	r3, #8
 80069f0:	d122      	bne.n	8006a38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	f003 0308 	and.w	r3, r3, #8
 80069fc:	2b08      	cmp	r3, #8
 80069fe:	d11b      	bne.n	8006a38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f06f 0208 	mvn.w	r2, #8
 8006a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2204      	movs	r2, #4
 8006a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	69db      	ldr	r3, [r3, #28]
 8006a16:	f003 0303 	and.w	r3, r3, #3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d003      	beq.n	8006a26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f961 	bl	8006ce6 <HAL_TIM_IC_CaptureCallback>
 8006a24:	e005      	b.n	8006a32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f953 	bl	8006cd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 f964 	bl	8006cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	f003 0310 	and.w	r3, r3, #16
 8006a42:	2b10      	cmp	r3, #16
 8006a44:	d122      	bne.n	8006a8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	f003 0310 	and.w	r3, r3, #16
 8006a50:	2b10      	cmp	r3, #16
 8006a52:	d11b      	bne.n	8006a8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f06f 0210 	mvn.w	r2, #16
 8006a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2208      	movs	r2, #8
 8006a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	69db      	ldr	r3, [r3, #28]
 8006a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d003      	beq.n	8006a7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f937 	bl	8006ce6 <HAL_TIM_IC_CaptureCallback>
 8006a78:	e005      	b.n	8006a86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 f929 	bl	8006cd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 f93a 	bl	8006cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d10e      	bne.n	8006ab8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	f003 0301 	and.w	r3, r3, #1
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d107      	bne.n	8006ab8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f06f 0201 	mvn.w	r2, #1
 8006ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f7fa fd2e 	bl	8001514 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ac2:	2b80      	cmp	r3, #128	; 0x80
 8006ac4:	d10e      	bne.n	8006ae4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ad0:	2b80      	cmp	r3, #128	; 0x80
 8006ad2:	d107      	bne.n	8006ae4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 fab2 	bl	8007048 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aee:	2b40      	cmp	r3, #64	; 0x40
 8006af0:	d10e      	bne.n	8006b10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006afc:	2b40      	cmp	r3, #64	; 0x40
 8006afe:	d107      	bne.n	8006b10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f8ff 	bl	8006d0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	f003 0320 	and.w	r3, r3, #32
 8006b1a:	2b20      	cmp	r3, #32
 8006b1c:	d10e      	bne.n	8006b3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	f003 0320 	and.w	r3, r3, #32
 8006b28:	2b20      	cmp	r3, #32
 8006b2a:	d107      	bne.n	8006b3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f06f 0220 	mvn.w	r2, #32
 8006b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 fa7c 	bl	8007034 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b3c:	bf00      	nop
 8006b3e:	3708      	adds	r7, #8
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d101      	bne.n	8006b60 <HAL_TIM_ConfigClockSource+0x1c>
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	e0b4      	b.n	8006cca <HAL_TIM_ConfigClockSource+0x186>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b98:	d03e      	beq.n	8006c18 <HAL_TIM_ConfigClockSource+0xd4>
 8006b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b9e:	f200 8087 	bhi.w	8006cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ba6:	f000 8086 	beq.w	8006cb6 <HAL_TIM_ConfigClockSource+0x172>
 8006baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bae:	d87f      	bhi.n	8006cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bb0:	2b70      	cmp	r3, #112	; 0x70
 8006bb2:	d01a      	beq.n	8006bea <HAL_TIM_ConfigClockSource+0xa6>
 8006bb4:	2b70      	cmp	r3, #112	; 0x70
 8006bb6:	d87b      	bhi.n	8006cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bb8:	2b60      	cmp	r3, #96	; 0x60
 8006bba:	d050      	beq.n	8006c5e <HAL_TIM_ConfigClockSource+0x11a>
 8006bbc:	2b60      	cmp	r3, #96	; 0x60
 8006bbe:	d877      	bhi.n	8006cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bc0:	2b50      	cmp	r3, #80	; 0x50
 8006bc2:	d03c      	beq.n	8006c3e <HAL_TIM_ConfigClockSource+0xfa>
 8006bc4:	2b50      	cmp	r3, #80	; 0x50
 8006bc6:	d873      	bhi.n	8006cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bc8:	2b40      	cmp	r3, #64	; 0x40
 8006bca:	d058      	beq.n	8006c7e <HAL_TIM_ConfigClockSource+0x13a>
 8006bcc:	2b40      	cmp	r3, #64	; 0x40
 8006bce:	d86f      	bhi.n	8006cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bd0:	2b30      	cmp	r3, #48	; 0x30
 8006bd2:	d064      	beq.n	8006c9e <HAL_TIM_ConfigClockSource+0x15a>
 8006bd4:	2b30      	cmp	r3, #48	; 0x30
 8006bd6:	d86b      	bhi.n	8006cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bd8:	2b20      	cmp	r3, #32
 8006bda:	d060      	beq.n	8006c9e <HAL_TIM_ConfigClockSource+0x15a>
 8006bdc:	2b20      	cmp	r3, #32
 8006bde:	d867      	bhi.n	8006cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d05c      	beq.n	8006c9e <HAL_TIM_ConfigClockSource+0x15a>
 8006be4:	2b10      	cmp	r3, #16
 8006be6:	d05a      	beq.n	8006c9e <HAL_TIM_ConfigClockSource+0x15a>
 8006be8:	e062      	b.n	8006cb0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6818      	ldr	r0, [r3, #0]
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	6899      	ldr	r1, [r3, #8]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	685a      	ldr	r2, [r3, #4]
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	f000 f98d 	bl	8006f18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68ba      	ldr	r2, [r7, #8]
 8006c14:	609a      	str	r2, [r3, #8]
      break;
 8006c16:	e04f      	b.n	8006cb8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6818      	ldr	r0, [r3, #0]
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	6899      	ldr	r1, [r3, #8]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	685a      	ldr	r2, [r3, #4]
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	f000 f976 	bl	8006f18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	689a      	ldr	r2, [r3, #8]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c3a:	609a      	str	r2, [r3, #8]
      break;
 8006c3c:	e03c      	b.n	8006cb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6818      	ldr	r0, [r3, #0]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	6859      	ldr	r1, [r3, #4]
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	f000 f8ea 	bl	8006e24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2150      	movs	r1, #80	; 0x50
 8006c56:	4618      	mov	r0, r3
 8006c58:	f000 f943 	bl	8006ee2 <TIM_ITRx_SetConfig>
      break;
 8006c5c:	e02c      	b.n	8006cb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6818      	ldr	r0, [r3, #0]
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	6859      	ldr	r1, [r3, #4]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	f000 f909 	bl	8006e82 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2160      	movs	r1, #96	; 0x60
 8006c76:	4618      	mov	r0, r3
 8006c78:	f000 f933 	bl	8006ee2 <TIM_ITRx_SetConfig>
      break;
 8006c7c:	e01c      	b.n	8006cb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6818      	ldr	r0, [r3, #0]
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	6859      	ldr	r1, [r3, #4]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	f000 f8ca 	bl	8006e24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2140      	movs	r1, #64	; 0x40
 8006c96:	4618      	mov	r0, r3
 8006c98:	f000 f923 	bl	8006ee2 <TIM_ITRx_SetConfig>
      break;
 8006c9c:	e00c      	b.n	8006cb8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	4610      	mov	r0, r2
 8006caa:	f000 f91a 	bl	8006ee2 <TIM_ITRx_SetConfig>
      break;
 8006cae:	e003      	b.n	8006cb8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8006cb4:	e000      	b.n	8006cb8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006cb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	b083      	sub	sp, #12
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cda:	bf00      	nop
 8006cdc:	370c      	adds	r7, #12
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr

08006ce6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b083      	sub	sp, #12
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006cee:	bf00      	nop
 8006cf0:	370c      	adds	r7, #12
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cfa:	b480      	push	{r7}
 8006cfc:	b083      	sub	sp, #12
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d02:	bf00      	nop
 8006d04:	370c      	adds	r7, #12
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr

08006d0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d0e:	b480      	push	{r7}
 8006d10:	b083      	sub	sp, #12
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d16:	bf00      	nop
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
	...

08006d24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a34      	ldr	r2, [pc, #208]	; (8006e08 <TIM_Base_SetConfig+0xe4>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d00f      	beq.n	8006d5c <TIM_Base_SetConfig+0x38>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d42:	d00b      	beq.n	8006d5c <TIM_Base_SetConfig+0x38>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a31      	ldr	r2, [pc, #196]	; (8006e0c <TIM_Base_SetConfig+0xe8>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d007      	beq.n	8006d5c <TIM_Base_SetConfig+0x38>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a30      	ldr	r2, [pc, #192]	; (8006e10 <TIM_Base_SetConfig+0xec>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d003      	beq.n	8006d5c <TIM_Base_SetConfig+0x38>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a2f      	ldr	r2, [pc, #188]	; (8006e14 <TIM_Base_SetConfig+0xf0>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d108      	bne.n	8006d6e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a25      	ldr	r2, [pc, #148]	; (8006e08 <TIM_Base_SetConfig+0xe4>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d01b      	beq.n	8006dae <TIM_Base_SetConfig+0x8a>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d7c:	d017      	beq.n	8006dae <TIM_Base_SetConfig+0x8a>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a22      	ldr	r2, [pc, #136]	; (8006e0c <TIM_Base_SetConfig+0xe8>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d013      	beq.n	8006dae <TIM_Base_SetConfig+0x8a>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a21      	ldr	r2, [pc, #132]	; (8006e10 <TIM_Base_SetConfig+0xec>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d00f      	beq.n	8006dae <TIM_Base_SetConfig+0x8a>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a20      	ldr	r2, [pc, #128]	; (8006e14 <TIM_Base_SetConfig+0xf0>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d00b      	beq.n	8006dae <TIM_Base_SetConfig+0x8a>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a1f      	ldr	r2, [pc, #124]	; (8006e18 <TIM_Base_SetConfig+0xf4>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d007      	beq.n	8006dae <TIM_Base_SetConfig+0x8a>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a1e      	ldr	r2, [pc, #120]	; (8006e1c <TIM_Base_SetConfig+0xf8>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d003      	beq.n	8006dae <TIM_Base_SetConfig+0x8a>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a1d      	ldr	r2, [pc, #116]	; (8006e20 <TIM_Base_SetConfig+0xfc>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d108      	bne.n	8006dc0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006db4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	695b      	ldr	r3, [r3, #20]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	689a      	ldr	r2, [r3, #8]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a08      	ldr	r2, [pc, #32]	; (8006e08 <TIM_Base_SetConfig+0xe4>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d103      	bne.n	8006df4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	691a      	ldr	r2, [r3, #16]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	615a      	str	r2, [r3, #20]
}
 8006dfa:	bf00      	nop
 8006dfc:	3714      	adds	r7, #20
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	40010000 	.word	0x40010000
 8006e0c:	40000400 	.word	0x40000400
 8006e10:	40000800 	.word	0x40000800
 8006e14:	40000c00 	.word	0x40000c00
 8006e18:	40014000 	.word	0x40014000
 8006e1c:	40014400 	.word	0x40014400
 8006e20:	40014800 	.word	0x40014800

08006e24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b087      	sub	sp, #28
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6a1b      	ldr	r3, [r3, #32]
 8006e34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	f023 0201 	bic.w	r2, r3, #1
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	011b      	lsls	r3, r3, #4
 8006e54:	693a      	ldr	r2, [r7, #16]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	f023 030a 	bic.w	r3, r3, #10
 8006e60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	621a      	str	r2, [r3, #32]
}
 8006e76:	bf00      	nop
 8006e78:	371c      	adds	r7, #28
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr

08006e82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e82:	b480      	push	{r7}
 8006e84:	b087      	sub	sp, #28
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	60f8      	str	r0, [r7, #12]
 8006e8a:	60b9      	str	r1, [r7, #8]
 8006e8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6a1b      	ldr	r3, [r3, #32]
 8006e92:	f023 0210 	bic.w	r2, r3, #16
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	699b      	ldr	r3, [r3, #24]
 8006e9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6a1b      	ldr	r3, [r3, #32]
 8006ea4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006eac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	031b      	lsls	r3, r3, #12
 8006eb2:	697a      	ldr	r2, [r7, #20]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ebe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	011b      	lsls	r3, r3, #4
 8006ec4:	693a      	ldr	r2, [r7, #16]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	693a      	ldr	r2, [r7, #16]
 8006ed4:	621a      	str	r2, [r3, #32]
}
 8006ed6:	bf00      	nop
 8006ed8:	371c      	adds	r7, #28
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr

08006ee2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ee2:	b480      	push	{r7}
 8006ee4:	b085      	sub	sp, #20
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ef8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	f043 0307 	orr.w	r3, r3, #7
 8006f04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	609a      	str	r2, [r3, #8]
}
 8006f0c:	bf00      	nop
 8006f0e:	3714      	adds	r7, #20
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b087      	sub	sp, #28
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	607a      	str	r2, [r7, #4]
 8006f24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	021a      	lsls	r2, r3, #8
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	431a      	orrs	r2, r3
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	697a      	ldr	r2, [r7, #20]
 8006f4a:	609a      	str	r2, [r3, #8]
}
 8006f4c:	bf00      	nop
 8006f4e:	371c      	adds	r7, #28
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d101      	bne.n	8006f70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f6c:	2302      	movs	r3, #2
 8006f6e:	e050      	b.n	8007012 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a1c      	ldr	r2, [pc, #112]	; (8007020 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d018      	beq.n	8006fe6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fbc:	d013      	beq.n	8006fe6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a18      	ldr	r2, [pc, #96]	; (8007024 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d00e      	beq.n	8006fe6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a16      	ldr	r2, [pc, #88]	; (8007028 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d009      	beq.n	8006fe6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a15      	ldr	r2, [pc, #84]	; (800702c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d004      	beq.n	8006fe6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a13      	ldr	r2, [pc, #76]	; (8007030 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d10c      	bne.n	8007000 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3714      	adds	r7, #20
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	40010000 	.word	0x40010000
 8007024:	40000400 	.word	0x40000400
 8007028:	40000800 	.word	0x40000800
 800702c:	40000c00 	.word	0x40000c00
 8007030:	40014000 	.word	0x40014000

08007034 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d101      	bne.n	800706e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e03f      	b.n	80070ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007074:	b2db      	uxtb	r3, r3
 8007076:	2b00      	cmp	r3, #0
 8007078:	d106      	bne.n	8007088 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f7fb f882 	bl	800218c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2224      	movs	r2, #36	; 0x24
 800708c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68da      	ldr	r2, [r3, #12]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800709e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 f929 	bl	80072f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	691a      	ldr	r2, [r3, #16]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	695a      	ldr	r2, [r3, #20]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68da      	ldr	r2, [r3, #12]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2220      	movs	r2, #32
 80070e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2220      	movs	r2, #32
 80070e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3708      	adds	r7, #8
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b08a      	sub	sp, #40	; 0x28
 80070fa:	af02      	add	r7, sp, #8
 80070fc:	60f8      	str	r0, [r7, #12]
 80070fe:	60b9      	str	r1, [r7, #8]
 8007100:	603b      	str	r3, [r7, #0]
 8007102:	4613      	mov	r3, r2
 8007104:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007106:	2300      	movs	r3, #0
 8007108:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b20      	cmp	r3, #32
 8007114:	d17c      	bne.n	8007210 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d002      	beq.n	8007122 <HAL_UART_Transmit+0x2c>
 800711c:	88fb      	ldrh	r3, [r7, #6]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d101      	bne.n	8007126 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e075      	b.n	8007212 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800712c:	2b01      	cmp	r3, #1
 800712e:	d101      	bne.n	8007134 <HAL_UART_Transmit+0x3e>
 8007130:	2302      	movs	r3, #2
 8007132:	e06e      	b.n	8007212 <HAL_UART_Transmit+0x11c>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2221      	movs	r2, #33	; 0x21
 8007146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800714a:	f7fb fa35 	bl	80025b8 <HAL_GetTick>
 800714e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	88fa      	ldrh	r2, [r7, #6]
 8007154:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	88fa      	ldrh	r2, [r7, #6]
 800715a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007164:	d108      	bne.n	8007178 <HAL_UART_Transmit+0x82>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d104      	bne.n	8007178 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800716e:	2300      	movs	r3, #0
 8007170:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	61bb      	str	r3, [r7, #24]
 8007176:	e003      	b.n	8007180 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800717c:	2300      	movs	r3, #0
 800717e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007188:	e02a      	b.n	80071e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	9300      	str	r3, [sp, #0]
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	2200      	movs	r2, #0
 8007192:	2180      	movs	r1, #128	; 0x80
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f000 f840 	bl	800721a <UART_WaitOnFlagUntilTimeout>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d001      	beq.n	80071a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e036      	b.n	8007212 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d10b      	bne.n	80071c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	881b      	ldrh	r3, [r3, #0]
 80071ae:	461a      	mov	r2, r3
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	3302      	adds	r3, #2
 80071be:	61bb      	str	r3, [r7, #24]
 80071c0:	e007      	b.n	80071d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	781a      	ldrb	r2, [r3, #0]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	3301      	adds	r3, #1
 80071d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	3b01      	subs	r3, #1
 80071da:	b29a      	uxth	r2, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1cf      	bne.n	800718a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	9300      	str	r3, [sp, #0]
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	2200      	movs	r2, #0
 80071f2:	2140      	movs	r1, #64	; 0x40
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f000 f810 	bl	800721a <UART_WaitOnFlagUntilTimeout>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d001      	beq.n	8007204 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007200:	2303      	movs	r3, #3
 8007202:	e006      	b.n	8007212 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2220      	movs	r2, #32
 8007208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800720c:	2300      	movs	r3, #0
 800720e:	e000      	b.n	8007212 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007210:	2302      	movs	r3, #2
  }
}
 8007212:	4618      	mov	r0, r3
 8007214:	3720      	adds	r7, #32
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b090      	sub	sp, #64	; 0x40
 800721e:	af00      	add	r7, sp, #0
 8007220:	60f8      	str	r0, [r7, #12]
 8007222:	60b9      	str	r1, [r7, #8]
 8007224:	603b      	str	r3, [r7, #0]
 8007226:	4613      	mov	r3, r2
 8007228:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800722a:	e050      	b.n	80072ce <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800722c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800722e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007232:	d04c      	beq.n	80072ce <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007236:	2b00      	cmp	r3, #0
 8007238:	d007      	beq.n	800724a <UART_WaitOnFlagUntilTimeout+0x30>
 800723a:	f7fb f9bd 	bl	80025b8 <HAL_GetTick>
 800723e:	4602      	mov	r2, r0
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	1ad3      	subs	r3, r2, r3
 8007244:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007246:	429a      	cmp	r2, r3
 8007248:	d241      	bcs.n	80072ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	330c      	adds	r3, #12
 8007250:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007254:	e853 3f00 	ldrex	r3, [r3]
 8007258:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007260:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	330c      	adds	r3, #12
 8007268:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800726a:	637a      	str	r2, [r7, #52]	; 0x34
 800726c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007270:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007272:	e841 2300 	strex	r3, r2, [r1]
 8007276:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800727a:	2b00      	cmp	r3, #0
 800727c:	d1e5      	bne.n	800724a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	3314      	adds	r3, #20
 8007284:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	e853 3f00 	ldrex	r3, [r3]
 800728c:	613b      	str	r3, [r7, #16]
   return(result);
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	f023 0301 	bic.w	r3, r3, #1
 8007294:	63bb      	str	r3, [r7, #56]	; 0x38
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	3314      	adds	r3, #20
 800729c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800729e:	623a      	str	r2, [r7, #32]
 80072a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a2:	69f9      	ldr	r1, [r7, #28]
 80072a4:	6a3a      	ldr	r2, [r7, #32]
 80072a6:	e841 2300 	strex	r3, r2, [r1]
 80072aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d1e5      	bne.n	800727e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2220      	movs	r2, #32
 80072b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2220      	movs	r2, #32
 80072be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e00f      	b.n	80072ee <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	4013      	ands	r3, r2
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	429a      	cmp	r2, r3
 80072dc:	bf0c      	ite	eq
 80072de:	2301      	moveq	r3, #1
 80072e0:	2300      	movne	r3, #0
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	461a      	mov	r2, r3
 80072e6:	79fb      	ldrb	r3, [r7, #7]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d09f      	beq.n	800722c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3740      	adds	r7, #64	; 0x40
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
	...

080072f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072fc:	b0c0      	sub	sp, #256	; 0x100
 80072fe:	af00      	add	r7, sp, #0
 8007300:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007314:	68d9      	ldr	r1, [r3, #12]
 8007316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	ea40 0301 	orr.w	r3, r0, r1
 8007320:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007326:	689a      	ldr	r2, [r3, #8]
 8007328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	431a      	orrs	r2, r3
 8007330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007334:	695b      	ldr	r3, [r3, #20]
 8007336:	431a      	orrs	r2, r3
 8007338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800733c:	69db      	ldr	r3, [r3, #28]
 800733e:	4313      	orrs	r3, r2
 8007340:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007350:	f021 010c 	bic.w	r1, r1, #12
 8007354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800735e:	430b      	orrs	r3, r1
 8007360:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	695b      	ldr	r3, [r3, #20]
 800736a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800736e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007372:	6999      	ldr	r1, [r3, #24]
 8007374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	ea40 0301 	orr.w	r3, r0, r1
 800737e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	4b8f      	ldr	r3, [pc, #572]	; (80075c4 <UART_SetConfig+0x2cc>)
 8007388:	429a      	cmp	r2, r3
 800738a:	d005      	beq.n	8007398 <UART_SetConfig+0xa0>
 800738c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	4b8d      	ldr	r3, [pc, #564]	; (80075c8 <UART_SetConfig+0x2d0>)
 8007394:	429a      	cmp	r2, r3
 8007396:	d104      	bne.n	80073a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007398:	f7fe fdd4 	bl	8005f44 <HAL_RCC_GetPCLK2Freq>
 800739c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80073a0:	e003      	b.n	80073aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80073a2:	f7fe fdbb 	bl	8005f1c <HAL_RCC_GetPCLK1Freq>
 80073a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ae:	69db      	ldr	r3, [r3, #28]
 80073b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073b4:	f040 810c 	bne.w	80075d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80073b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073bc:	2200      	movs	r2, #0
 80073be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80073c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80073c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80073ca:	4622      	mov	r2, r4
 80073cc:	462b      	mov	r3, r5
 80073ce:	1891      	adds	r1, r2, r2
 80073d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80073d2:	415b      	adcs	r3, r3
 80073d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80073da:	4621      	mov	r1, r4
 80073dc:	eb12 0801 	adds.w	r8, r2, r1
 80073e0:	4629      	mov	r1, r5
 80073e2:	eb43 0901 	adc.w	r9, r3, r1
 80073e6:	f04f 0200 	mov.w	r2, #0
 80073ea:	f04f 0300 	mov.w	r3, #0
 80073ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073fa:	4690      	mov	r8, r2
 80073fc:	4699      	mov	r9, r3
 80073fe:	4623      	mov	r3, r4
 8007400:	eb18 0303 	adds.w	r3, r8, r3
 8007404:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007408:	462b      	mov	r3, r5
 800740a:	eb49 0303 	adc.w	r3, r9, r3
 800740e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800741e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007422:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007426:	460b      	mov	r3, r1
 8007428:	18db      	adds	r3, r3, r3
 800742a:	653b      	str	r3, [r7, #80]	; 0x50
 800742c:	4613      	mov	r3, r2
 800742e:	eb42 0303 	adc.w	r3, r2, r3
 8007432:	657b      	str	r3, [r7, #84]	; 0x54
 8007434:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007438:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800743c:	f7f8 ff20 	bl	8000280 <__aeabi_uldivmod>
 8007440:	4602      	mov	r2, r0
 8007442:	460b      	mov	r3, r1
 8007444:	4b61      	ldr	r3, [pc, #388]	; (80075cc <UART_SetConfig+0x2d4>)
 8007446:	fba3 2302 	umull	r2, r3, r3, r2
 800744a:	095b      	lsrs	r3, r3, #5
 800744c:	011c      	lsls	r4, r3, #4
 800744e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007452:	2200      	movs	r2, #0
 8007454:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007458:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800745c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007460:	4642      	mov	r2, r8
 8007462:	464b      	mov	r3, r9
 8007464:	1891      	adds	r1, r2, r2
 8007466:	64b9      	str	r1, [r7, #72]	; 0x48
 8007468:	415b      	adcs	r3, r3
 800746a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800746c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007470:	4641      	mov	r1, r8
 8007472:	eb12 0a01 	adds.w	sl, r2, r1
 8007476:	4649      	mov	r1, r9
 8007478:	eb43 0b01 	adc.w	fp, r3, r1
 800747c:	f04f 0200 	mov.w	r2, #0
 8007480:	f04f 0300 	mov.w	r3, #0
 8007484:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007488:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800748c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007490:	4692      	mov	sl, r2
 8007492:	469b      	mov	fp, r3
 8007494:	4643      	mov	r3, r8
 8007496:	eb1a 0303 	adds.w	r3, sl, r3
 800749a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800749e:	464b      	mov	r3, r9
 80074a0:	eb4b 0303 	adc.w	r3, fp, r3
 80074a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80074a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80074b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80074b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80074bc:	460b      	mov	r3, r1
 80074be:	18db      	adds	r3, r3, r3
 80074c0:	643b      	str	r3, [r7, #64]	; 0x40
 80074c2:	4613      	mov	r3, r2
 80074c4:	eb42 0303 	adc.w	r3, r2, r3
 80074c8:	647b      	str	r3, [r7, #68]	; 0x44
 80074ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80074ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80074d2:	f7f8 fed5 	bl	8000280 <__aeabi_uldivmod>
 80074d6:	4602      	mov	r2, r0
 80074d8:	460b      	mov	r3, r1
 80074da:	4611      	mov	r1, r2
 80074dc:	4b3b      	ldr	r3, [pc, #236]	; (80075cc <UART_SetConfig+0x2d4>)
 80074de:	fba3 2301 	umull	r2, r3, r3, r1
 80074e2:	095b      	lsrs	r3, r3, #5
 80074e4:	2264      	movs	r2, #100	; 0x64
 80074e6:	fb02 f303 	mul.w	r3, r2, r3
 80074ea:	1acb      	subs	r3, r1, r3
 80074ec:	00db      	lsls	r3, r3, #3
 80074ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80074f2:	4b36      	ldr	r3, [pc, #216]	; (80075cc <UART_SetConfig+0x2d4>)
 80074f4:	fba3 2302 	umull	r2, r3, r3, r2
 80074f8:	095b      	lsrs	r3, r3, #5
 80074fa:	005b      	lsls	r3, r3, #1
 80074fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007500:	441c      	add	r4, r3
 8007502:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007506:	2200      	movs	r2, #0
 8007508:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800750c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007510:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007514:	4642      	mov	r2, r8
 8007516:	464b      	mov	r3, r9
 8007518:	1891      	adds	r1, r2, r2
 800751a:	63b9      	str	r1, [r7, #56]	; 0x38
 800751c:	415b      	adcs	r3, r3
 800751e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007520:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007524:	4641      	mov	r1, r8
 8007526:	1851      	adds	r1, r2, r1
 8007528:	6339      	str	r1, [r7, #48]	; 0x30
 800752a:	4649      	mov	r1, r9
 800752c:	414b      	adcs	r3, r1
 800752e:	637b      	str	r3, [r7, #52]	; 0x34
 8007530:	f04f 0200 	mov.w	r2, #0
 8007534:	f04f 0300 	mov.w	r3, #0
 8007538:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800753c:	4659      	mov	r1, fp
 800753e:	00cb      	lsls	r3, r1, #3
 8007540:	4651      	mov	r1, sl
 8007542:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007546:	4651      	mov	r1, sl
 8007548:	00ca      	lsls	r2, r1, #3
 800754a:	4610      	mov	r0, r2
 800754c:	4619      	mov	r1, r3
 800754e:	4603      	mov	r3, r0
 8007550:	4642      	mov	r2, r8
 8007552:	189b      	adds	r3, r3, r2
 8007554:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007558:	464b      	mov	r3, r9
 800755a:	460a      	mov	r2, r1
 800755c:	eb42 0303 	adc.w	r3, r2, r3
 8007560:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007570:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007574:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007578:	460b      	mov	r3, r1
 800757a:	18db      	adds	r3, r3, r3
 800757c:	62bb      	str	r3, [r7, #40]	; 0x28
 800757e:	4613      	mov	r3, r2
 8007580:	eb42 0303 	adc.w	r3, r2, r3
 8007584:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007586:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800758a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800758e:	f7f8 fe77 	bl	8000280 <__aeabi_uldivmod>
 8007592:	4602      	mov	r2, r0
 8007594:	460b      	mov	r3, r1
 8007596:	4b0d      	ldr	r3, [pc, #52]	; (80075cc <UART_SetConfig+0x2d4>)
 8007598:	fba3 1302 	umull	r1, r3, r3, r2
 800759c:	095b      	lsrs	r3, r3, #5
 800759e:	2164      	movs	r1, #100	; 0x64
 80075a0:	fb01 f303 	mul.w	r3, r1, r3
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	00db      	lsls	r3, r3, #3
 80075a8:	3332      	adds	r3, #50	; 0x32
 80075aa:	4a08      	ldr	r2, [pc, #32]	; (80075cc <UART_SetConfig+0x2d4>)
 80075ac:	fba2 2303 	umull	r2, r3, r2, r3
 80075b0:	095b      	lsrs	r3, r3, #5
 80075b2:	f003 0207 	and.w	r2, r3, #7
 80075b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4422      	add	r2, r4
 80075be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80075c0:	e105      	b.n	80077ce <UART_SetConfig+0x4d6>
 80075c2:	bf00      	nop
 80075c4:	40011000 	.word	0x40011000
 80075c8:	40011400 	.word	0x40011400
 80075cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075d4:	2200      	movs	r2, #0
 80075d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80075da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80075de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80075e2:	4642      	mov	r2, r8
 80075e4:	464b      	mov	r3, r9
 80075e6:	1891      	adds	r1, r2, r2
 80075e8:	6239      	str	r1, [r7, #32]
 80075ea:	415b      	adcs	r3, r3
 80075ec:	627b      	str	r3, [r7, #36]	; 0x24
 80075ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80075f2:	4641      	mov	r1, r8
 80075f4:	1854      	adds	r4, r2, r1
 80075f6:	4649      	mov	r1, r9
 80075f8:	eb43 0501 	adc.w	r5, r3, r1
 80075fc:	f04f 0200 	mov.w	r2, #0
 8007600:	f04f 0300 	mov.w	r3, #0
 8007604:	00eb      	lsls	r3, r5, #3
 8007606:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800760a:	00e2      	lsls	r2, r4, #3
 800760c:	4614      	mov	r4, r2
 800760e:	461d      	mov	r5, r3
 8007610:	4643      	mov	r3, r8
 8007612:	18e3      	adds	r3, r4, r3
 8007614:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007618:	464b      	mov	r3, r9
 800761a:	eb45 0303 	adc.w	r3, r5, r3
 800761e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800762e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007632:	f04f 0200 	mov.w	r2, #0
 8007636:	f04f 0300 	mov.w	r3, #0
 800763a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800763e:	4629      	mov	r1, r5
 8007640:	008b      	lsls	r3, r1, #2
 8007642:	4621      	mov	r1, r4
 8007644:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007648:	4621      	mov	r1, r4
 800764a:	008a      	lsls	r2, r1, #2
 800764c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007650:	f7f8 fe16 	bl	8000280 <__aeabi_uldivmod>
 8007654:	4602      	mov	r2, r0
 8007656:	460b      	mov	r3, r1
 8007658:	4b60      	ldr	r3, [pc, #384]	; (80077dc <UART_SetConfig+0x4e4>)
 800765a:	fba3 2302 	umull	r2, r3, r3, r2
 800765e:	095b      	lsrs	r3, r3, #5
 8007660:	011c      	lsls	r4, r3, #4
 8007662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007666:	2200      	movs	r2, #0
 8007668:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800766c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007670:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007674:	4642      	mov	r2, r8
 8007676:	464b      	mov	r3, r9
 8007678:	1891      	adds	r1, r2, r2
 800767a:	61b9      	str	r1, [r7, #24]
 800767c:	415b      	adcs	r3, r3
 800767e:	61fb      	str	r3, [r7, #28]
 8007680:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007684:	4641      	mov	r1, r8
 8007686:	1851      	adds	r1, r2, r1
 8007688:	6139      	str	r1, [r7, #16]
 800768a:	4649      	mov	r1, r9
 800768c:	414b      	adcs	r3, r1
 800768e:	617b      	str	r3, [r7, #20]
 8007690:	f04f 0200 	mov.w	r2, #0
 8007694:	f04f 0300 	mov.w	r3, #0
 8007698:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800769c:	4659      	mov	r1, fp
 800769e:	00cb      	lsls	r3, r1, #3
 80076a0:	4651      	mov	r1, sl
 80076a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076a6:	4651      	mov	r1, sl
 80076a8:	00ca      	lsls	r2, r1, #3
 80076aa:	4610      	mov	r0, r2
 80076ac:	4619      	mov	r1, r3
 80076ae:	4603      	mov	r3, r0
 80076b0:	4642      	mov	r2, r8
 80076b2:	189b      	adds	r3, r3, r2
 80076b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80076b8:	464b      	mov	r3, r9
 80076ba:	460a      	mov	r2, r1
 80076bc:	eb42 0303 	adc.w	r3, r2, r3
 80076c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80076c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80076ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80076d0:	f04f 0200 	mov.w	r2, #0
 80076d4:	f04f 0300 	mov.w	r3, #0
 80076d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80076dc:	4649      	mov	r1, r9
 80076de:	008b      	lsls	r3, r1, #2
 80076e0:	4641      	mov	r1, r8
 80076e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076e6:	4641      	mov	r1, r8
 80076e8:	008a      	lsls	r2, r1, #2
 80076ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80076ee:	f7f8 fdc7 	bl	8000280 <__aeabi_uldivmod>
 80076f2:	4602      	mov	r2, r0
 80076f4:	460b      	mov	r3, r1
 80076f6:	4b39      	ldr	r3, [pc, #228]	; (80077dc <UART_SetConfig+0x4e4>)
 80076f8:	fba3 1302 	umull	r1, r3, r3, r2
 80076fc:	095b      	lsrs	r3, r3, #5
 80076fe:	2164      	movs	r1, #100	; 0x64
 8007700:	fb01 f303 	mul.w	r3, r1, r3
 8007704:	1ad3      	subs	r3, r2, r3
 8007706:	011b      	lsls	r3, r3, #4
 8007708:	3332      	adds	r3, #50	; 0x32
 800770a:	4a34      	ldr	r2, [pc, #208]	; (80077dc <UART_SetConfig+0x4e4>)
 800770c:	fba2 2303 	umull	r2, r3, r2, r3
 8007710:	095b      	lsrs	r3, r3, #5
 8007712:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007716:	441c      	add	r4, r3
 8007718:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800771c:	2200      	movs	r2, #0
 800771e:	673b      	str	r3, [r7, #112]	; 0x70
 8007720:	677a      	str	r2, [r7, #116]	; 0x74
 8007722:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007726:	4642      	mov	r2, r8
 8007728:	464b      	mov	r3, r9
 800772a:	1891      	adds	r1, r2, r2
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	415b      	adcs	r3, r3
 8007730:	60fb      	str	r3, [r7, #12]
 8007732:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007736:	4641      	mov	r1, r8
 8007738:	1851      	adds	r1, r2, r1
 800773a:	6039      	str	r1, [r7, #0]
 800773c:	4649      	mov	r1, r9
 800773e:	414b      	adcs	r3, r1
 8007740:	607b      	str	r3, [r7, #4]
 8007742:	f04f 0200 	mov.w	r2, #0
 8007746:	f04f 0300 	mov.w	r3, #0
 800774a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800774e:	4659      	mov	r1, fp
 8007750:	00cb      	lsls	r3, r1, #3
 8007752:	4651      	mov	r1, sl
 8007754:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007758:	4651      	mov	r1, sl
 800775a:	00ca      	lsls	r2, r1, #3
 800775c:	4610      	mov	r0, r2
 800775e:	4619      	mov	r1, r3
 8007760:	4603      	mov	r3, r0
 8007762:	4642      	mov	r2, r8
 8007764:	189b      	adds	r3, r3, r2
 8007766:	66bb      	str	r3, [r7, #104]	; 0x68
 8007768:	464b      	mov	r3, r9
 800776a:	460a      	mov	r2, r1
 800776c:	eb42 0303 	adc.w	r3, r2, r3
 8007770:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	663b      	str	r3, [r7, #96]	; 0x60
 800777c:	667a      	str	r2, [r7, #100]	; 0x64
 800777e:	f04f 0200 	mov.w	r2, #0
 8007782:	f04f 0300 	mov.w	r3, #0
 8007786:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800778a:	4649      	mov	r1, r9
 800778c:	008b      	lsls	r3, r1, #2
 800778e:	4641      	mov	r1, r8
 8007790:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007794:	4641      	mov	r1, r8
 8007796:	008a      	lsls	r2, r1, #2
 8007798:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800779c:	f7f8 fd70 	bl	8000280 <__aeabi_uldivmod>
 80077a0:	4602      	mov	r2, r0
 80077a2:	460b      	mov	r3, r1
 80077a4:	4b0d      	ldr	r3, [pc, #52]	; (80077dc <UART_SetConfig+0x4e4>)
 80077a6:	fba3 1302 	umull	r1, r3, r3, r2
 80077aa:	095b      	lsrs	r3, r3, #5
 80077ac:	2164      	movs	r1, #100	; 0x64
 80077ae:	fb01 f303 	mul.w	r3, r1, r3
 80077b2:	1ad3      	subs	r3, r2, r3
 80077b4:	011b      	lsls	r3, r3, #4
 80077b6:	3332      	adds	r3, #50	; 0x32
 80077b8:	4a08      	ldr	r2, [pc, #32]	; (80077dc <UART_SetConfig+0x4e4>)
 80077ba:	fba2 2303 	umull	r2, r3, r2, r3
 80077be:	095b      	lsrs	r3, r3, #5
 80077c0:	f003 020f 	and.w	r2, r3, #15
 80077c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4422      	add	r2, r4
 80077cc:	609a      	str	r2, [r3, #8]
}
 80077ce:	bf00      	nop
 80077d0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80077d4:	46bd      	mov	sp, r7
 80077d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077da:	bf00      	nop
 80077dc:	51eb851f 	.word	0x51eb851f

080077e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077e0:	b084      	sub	sp, #16
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b084      	sub	sp, #16
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
 80077ea:	f107 001c 	add.w	r0, r7, #28
 80077ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80077f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d122      	bne.n	800783e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800780c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007822:	2b01      	cmp	r3, #1
 8007824:	d105      	bne.n	8007832 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f001 fbee 	bl	8009014 <USB_CoreReset>
 8007838:	4603      	mov	r3, r0
 800783a:	73fb      	strb	r3, [r7, #15]
 800783c:	e01a      	b.n	8007874 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f001 fbe2 	bl	8009014 <USB_CoreReset>
 8007850:	4603      	mov	r3, r0
 8007852:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007856:	2b00      	cmp	r3, #0
 8007858:	d106      	bne.n	8007868 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	639a      	str	r2, [r3, #56]	; 0x38
 8007866:	e005      	b.n	8007874 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007876:	2b01      	cmp	r3, #1
 8007878:	d10b      	bne.n	8007892 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f043 0206 	orr.w	r2, r3, #6
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	f043 0220 	orr.w	r2, r3, #32
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007892:	7bfb      	ldrb	r3, [r7, #15]
}
 8007894:	4618      	mov	r0, r3
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800789e:	b004      	add	sp, #16
 80078a0:	4770      	bx	lr
	...

080078a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b087      	sub	sp, #28
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	4613      	mov	r3, r2
 80078b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80078b2:	79fb      	ldrb	r3, [r7, #7]
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d165      	bne.n	8007984 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	4a41      	ldr	r2, [pc, #260]	; (80079c0 <USB_SetTurnaroundTime+0x11c>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d906      	bls.n	80078ce <USB_SetTurnaroundTime+0x2a>
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	4a40      	ldr	r2, [pc, #256]	; (80079c4 <USB_SetTurnaroundTime+0x120>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d202      	bcs.n	80078ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80078c8:	230f      	movs	r3, #15
 80078ca:	617b      	str	r3, [r7, #20]
 80078cc:	e062      	b.n	8007994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	4a3c      	ldr	r2, [pc, #240]	; (80079c4 <USB_SetTurnaroundTime+0x120>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d306      	bcc.n	80078e4 <USB_SetTurnaroundTime+0x40>
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	4a3b      	ldr	r2, [pc, #236]	; (80079c8 <USB_SetTurnaroundTime+0x124>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d202      	bcs.n	80078e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80078de:	230e      	movs	r3, #14
 80078e0:	617b      	str	r3, [r7, #20]
 80078e2:	e057      	b.n	8007994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	4a38      	ldr	r2, [pc, #224]	; (80079c8 <USB_SetTurnaroundTime+0x124>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d306      	bcc.n	80078fa <USB_SetTurnaroundTime+0x56>
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	4a37      	ldr	r2, [pc, #220]	; (80079cc <USB_SetTurnaroundTime+0x128>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d202      	bcs.n	80078fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80078f4:	230d      	movs	r3, #13
 80078f6:	617b      	str	r3, [r7, #20]
 80078f8:	e04c      	b.n	8007994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	4a33      	ldr	r2, [pc, #204]	; (80079cc <USB_SetTurnaroundTime+0x128>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d306      	bcc.n	8007910 <USB_SetTurnaroundTime+0x6c>
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	4a32      	ldr	r2, [pc, #200]	; (80079d0 <USB_SetTurnaroundTime+0x12c>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d802      	bhi.n	8007910 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800790a:	230c      	movs	r3, #12
 800790c:	617b      	str	r3, [r7, #20]
 800790e:	e041      	b.n	8007994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	4a2f      	ldr	r2, [pc, #188]	; (80079d0 <USB_SetTurnaroundTime+0x12c>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d906      	bls.n	8007926 <USB_SetTurnaroundTime+0x82>
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	4a2e      	ldr	r2, [pc, #184]	; (80079d4 <USB_SetTurnaroundTime+0x130>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d802      	bhi.n	8007926 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007920:	230b      	movs	r3, #11
 8007922:	617b      	str	r3, [r7, #20]
 8007924:	e036      	b.n	8007994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	4a2a      	ldr	r2, [pc, #168]	; (80079d4 <USB_SetTurnaroundTime+0x130>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d906      	bls.n	800793c <USB_SetTurnaroundTime+0x98>
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	4a29      	ldr	r2, [pc, #164]	; (80079d8 <USB_SetTurnaroundTime+0x134>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d802      	bhi.n	800793c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007936:	230a      	movs	r3, #10
 8007938:	617b      	str	r3, [r7, #20]
 800793a:	e02b      	b.n	8007994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	4a26      	ldr	r2, [pc, #152]	; (80079d8 <USB_SetTurnaroundTime+0x134>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d906      	bls.n	8007952 <USB_SetTurnaroundTime+0xae>
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	4a25      	ldr	r2, [pc, #148]	; (80079dc <USB_SetTurnaroundTime+0x138>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d202      	bcs.n	8007952 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800794c:	2309      	movs	r3, #9
 800794e:	617b      	str	r3, [r7, #20]
 8007950:	e020      	b.n	8007994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	4a21      	ldr	r2, [pc, #132]	; (80079dc <USB_SetTurnaroundTime+0x138>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d306      	bcc.n	8007968 <USB_SetTurnaroundTime+0xc4>
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	4a20      	ldr	r2, [pc, #128]	; (80079e0 <USB_SetTurnaroundTime+0x13c>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d802      	bhi.n	8007968 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007962:	2308      	movs	r3, #8
 8007964:	617b      	str	r3, [r7, #20]
 8007966:	e015      	b.n	8007994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	4a1d      	ldr	r2, [pc, #116]	; (80079e0 <USB_SetTurnaroundTime+0x13c>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d906      	bls.n	800797e <USB_SetTurnaroundTime+0xda>
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	4a1c      	ldr	r2, [pc, #112]	; (80079e4 <USB_SetTurnaroundTime+0x140>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d202      	bcs.n	800797e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007978:	2307      	movs	r3, #7
 800797a:	617b      	str	r3, [r7, #20]
 800797c:	e00a      	b.n	8007994 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800797e:	2306      	movs	r3, #6
 8007980:	617b      	str	r3, [r7, #20]
 8007982:	e007      	b.n	8007994 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007984:	79fb      	ldrb	r3, [r7, #7]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d102      	bne.n	8007990 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800798a:	2309      	movs	r3, #9
 800798c:	617b      	str	r3, [r7, #20]
 800798e:	e001      	b.n	8007994 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007990:	2309      	movs	r3, #9
 8007992:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	68da      	ldr	r2, [r3, #12]
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	029b      	lsls	r3, r3, #10
 80079a8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80079ac:	431a      	orrs	r2, r3
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	371c      	adds	r7, #28
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr
 80079c0:	00d8acbf 	.word	0x00d8acbf
 80079c4:	00e4e1c0 	.word	0x00e4e1c0
 80079c8:	00f42400 	.word	0x00f42400
 80079cc:	01067380 	.word	0x01067380
 80079d0:	011a499f 	.word	0x011a499f
 80079d4:	01312cff 	.word	0x01312cff
 80079d8:	014ca43f 	.word	0x014ca43f
 80079dc:	016e3600 	.word	0x016e3600
 80079e0:	01a6ab1f 	.word	0x01a6ab1f
 80079e4:	01e84800 	.word	0x01e84800

080079e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	f043 0201 	orr.w	r2, r3, #1
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	370c      	adds	r7, #12
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b083      	sub	sp, #12
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	f023 0201 	bic.w	r2, r3, #1
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	460b      	mov	r3, r1
 8007a36:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007a48:	78fb      	ldrb	r3, [r7, #3]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d115      	bne.n	8007a7a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007a5a:	2001      	movs	r0, #1
 8007a5c:	f7fa fdb8 	bl	80025d0 <HAL_Delay>
      ms++;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	3301      	adds	r3, #1
 8007a64:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f001 fa45 	bl	8008ef6 <USB_GetMode>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d01e      	beq.n	8007ab0 <USB_SetCurrentMode+0x84>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2b31      	cmp	r3, #49	; 0x31
 8007a76:	d9f0      	bls.n	8007a5a <USB_SetCurrentMode+0x2e>
 8007a78:	e01a      	b.n	8007ab0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007a7a:	78fb      	ldrb	r3, [r7, #3]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d115      	bne.n	8007aac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007a8c:	2001      	movs	r0, #1
 8007a8e:	f7fa fd9f 	bl	80025d0 <HAL_Delay>
      ms++;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	3301      	adds	r3, #1
 8007a96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f001 fa2c 	bl	8008ef6 <USB_GetMode>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d005      	beq.n	8007ab0 <USB_SetCurrentMode+0x84>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2b31      	cmp	r3, #49	; 0x31
 8007aa8:	d9f0      	bls.n	8007a8c <USB_SetCurrentMode+0x60>
 8007aaa:	e001      	b.n	8007ab0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	e005      	b.n	8007abc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2b32      	cmp	r3, #50	; 0x32
 8007ab4:	d101      	bne.n	8007aba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e000      	b.n	8007abc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ac4:	b084      	sub	sp, #16
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b086      	sub	sp, #24
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
 8007ace:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007ad2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007ade:	2300      	movs	r3, #0
 8007ae0:	613b      	str	r3, [r7, #16]
 8007ae2:	e009      	b.n	8007af8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	3340      	adds	r3, #64	; 0x40
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	4413      	add	r3, r2
 8007aee:	2200      	movs	r2, #0
 8007af0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	3301      	adds	r3, #1
 8007af6:	613b      	str	r3, [r7, #16]
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	2b0e      	cmp	r3, #14
 8007afc:	d9f2      	bls.n	8007ae4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d11c      	bne.n	8007b3e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b12:	f043 0302 	orr.w	r3, r3, #2
 8007b16:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b1c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b28:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b34:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	639a      	str	r2, [r3, #56]	; 0x38
 8007b3c:	e00b      	b.n	8007b56 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b42:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	2300      	movs	r3, #0
 8007b60:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b68:	4619      	mov	r1, r3
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b70:	461a      	mov	r2, r3
 8007b72:	680b      	ldr	r3, [r1, #0]
 8007b74:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d10c      	bne.n	8007b96 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d104      	bne.n	8007b8c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007b82:	2100      	movs	r1, #0
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 f965 	bl	8007e54 <USB_SetDevSpeed>
 8007b8a:	e008      	b.n	8007b9e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007b8c:	2101      	movs	r1, #1
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 f960 	bl	8007e54 <USB_SetDevSpeed>
 8007b94:	e003      	b.n	8007b9e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007b96:	2103      	movs	r1, #3
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 f95b 	bl	8007e54 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007b9e:	2110      	movs	r1, #16
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 f8f3 	bl	8007d8c <USB_FlushTxFifo>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d001      	beq.n	8007bb0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 f91f 	bl	8007df4 <USB_FlushRxFifo>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d001      	beq.n	8007bc0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	2300      	movs	r3, #0
 8007bca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bde:	461a      	mov	r2, r3
 8007be0:	2300      	movs	r3, #0
 8007be2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007be4:	2300      	movs	r3, #0
 8007be6:	613b      	str	r3, [r7, #16]
 8007be8:	e043      	b.n	8007c72 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	015a      	lsls	r2, r3, #5
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c00:	d118      	bne.n	8007c34 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d10a      	bne.n	8007c1e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	015a      	lsls	r2, r3, #5
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c14:	461a      	mov	r2, r3
 8007c16:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007c1a:	6013      	str	r3, [r2, #0]
 8007c1c:	e013      	b.n	8007c46 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	015a      	lsls	r2, r3, #5
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	4413      	add	r3, r2
 8007c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007c30:	6013      	str	r3, [r2, #0]
 8007c32:	e008      	b.n	8007c46 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	015a      	lsls	r2, r3, #5
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c40:	461a      	mov	r2, r3
 8007c42:	2300      	movs	r3, #0
 8007c44:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	015a      	lsls	r2, r3, #5
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c52:	461a      	mov	r2, r3
 8007c54:	2300      	movs	r3, #0
 8007c56:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	015a      	lsls	r2, r3, #5
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	4413      	add	r3, r2
 8007c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c64:	461a      	mov	r2, r3
 8007c66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c6a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	613b      	str	r3, [r7, #16]
 8007c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c74:	693a      	ldr	r2, [r7, #16]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d3b7      	bcc.n	8007bea <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	613b      	str	r3, [r7, #16]
 8007c7e:	e043      	b.n	8007d08 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	015a      	lsls	r2, r3, #5
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	4413      	add	r3, r2
 8007c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c96:	d118      	bne.n	8007cca <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d10a      	bne.n	8007cb4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	015a      	lsls	r2, r3, #5
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007caa:	461a      	mov	r2, r3
 8007cac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007cb0:	6013      	str	r3, [r2, #0]
 8007cb2:	e013      	b.n	8007cdc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	015a      	lsls	r2, r3, #5
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	4413      	add	r3, r2
 8007cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007cc6:	6013      	str	r3, [r2, #0]
 8007cc8:	e008      	b.n	8007cdc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	015a      	lsls	r2, r3, #5
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	2300      	movs	r3, #0
 8007cda:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	015a      	lsls	r2, r3, #5
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ce8:	461a      	mov	r2, r3
 8007cea:	2300      	movs	r3, #0
 8007cec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	015a      	lsls	r2, r3, #5
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	4413      	add	r3, r2
 8007cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007d00:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	3301      	adds	r3, #1
 8007d06:	613b      	str	r3, [r7, #16]
 8007d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0a:	693a      	ldr	r2, [r7, #16]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d3b7      	bcc.n	8007c80 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d22:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007d30:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d105      	bne.n	8007d44 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	699b      	ldr	r3, [r3, #24]
 8007d3c:	f043 0210 	orr.w	r2, r3, #16
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	699a      	ldr	r2, [r3, #24]
 8007d48:	4b0f      	ldr	r3, [pc, #60]	; (8007d88 <USB_DevInit+0x2c4>)
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d005      	beq.n	8007d62 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	699b      	ldr	r3, [r3, #24]
 8007d5a:	f043 0208 	orr.w	r2, r3, #8
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d107      	bne.n	8007d78 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	699b      	ldr	r3, [r3, #24]
 8007d6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d70:	f043 0304 	orr.w	r3, r3, #4
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007d78:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3718      	adds	r7, #24
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d84:	b004      	add	sp, #16
 8007d86:	4770      	bx	lr
 8007d88:	803c3800 	.word	0x803c3800

08007d8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b085      	sub	sp, #20
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007d96:	2300      	movs	r3, #0
 8007d98:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	4a13      	ldr	r2, [pc, #76]	; (8007df0 <USB_FlushTxFifo+0x64>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d901      	bls.n	8007dac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007da8:	2303      	movs	r3, #3
 8007daa:	e01b      	b.n	8007de4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	691b      	ldr	r3, [r3, #16]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	daf2      	bge.n	8007d9a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007db4:	2300      	movs	r3, #0
 8007db6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	019b      	lsls	r3, r3, #6
 8007dbc:	f043 0220 	orr.w	r2, r3, #32
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	4a08      	ldr	r2, [pc, #32]	; (8007df0 <USB_FlushTxFifo+0x64>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d901      	bls.n	8007dd6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	e006      	b.n	8007de4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	f003 0320 	and.w	r3, r3, #32
 8007dde:	2b20      	cmp	r3, #32
 8007de0:	d0f0      	beq.n	8007dc4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3714      	adds	r7, #20
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr
 8007df0:	00030d40 	.word	0x00030d40

08007df4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b085      	sub	sp, #20
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	3301      	adds	r3, #1
 8007e04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	4a11      	ldr	r2, [pc, #68]	; (8007e50 <USB_FlushRxFifo+0x5c>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d901      	bls.n	8007e12 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007e0e:	2303      	movs	r3, #3
 8007e10:	e018      	b.n	8007e44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	daf2      	bge.n	8007e00 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2210      	movs	r2, #16
 8007e22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	3301      	adds	r3, #1
 8007e28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	4a08      	ldr	r2, [pc, #32]	; (8007e50 <USB_FlushRxFifo+0x5c>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d901      	bls.n	8007e36 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007e32:	2303      	movs	r3, #3
 8007e34:	e006      	b.n	8007e44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	f003 0310 	and.w	r3, r3, #16
 8007e3e:	2b10      	cmp	r3, #16
 8007e40:	d0f0      	beq.n	8007e24 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3714      	adds	r7, #20
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr
 8007e50:	00030d40 	.word	0x00030d40

08007e54 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	78fb      	ldrb	r3, [r7, #3]
 8007e6e:	68f9      	ldr	r1, [r7, #12]
 8007e70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e74:	4313      	orrs	r3, r2
 8007e76:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3714      	adds	r7, #20
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr

08007e86 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007e86:	b480      	push	{r7}
 8007e88:	b087      	sub	sp, #28
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	f003 0306 	and.w	r3, r3, #6
 8007e9e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d102      	bne.n	8007eac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	75fb      	strb	r3, [r7, #23]
 8007eaa:	e00a      	b.n	8007ec2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	d002      	beq.n	8007eb8 <USB_GetDevSpeed+0x32>
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2b06      	cmp	r3, #6
 8007eb6:	d102      	bne.n	8007ebe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007eb8:	2302      	movs	r3, #2
 8007eba:	75fb      	strb	r3, [r7, #23]
 8007ebc:	e001      	b.n	8007ec2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007ebe:	230f      	movs	r3, #15
 8007ec0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	371c      	adds	r7, #28
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	785b      	ldrb	r3, [r3, #1]
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d13a      	bne.n	8007f62 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ef2:	69da      	ldr	r2, [r3, #28]
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	f003 030f 	and.w	r3, r3, #15
 8007efc:	2101      	movs	r1, #1
 8007efe:	fa01 f303 	lsl.w	r3, r1, r3
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	68f9      	ldr	r1, [r7, #12]
 8007f06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	015a      	lsls	r2, r3, #5
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	4413      	add	r3, r2
 8007f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d155      	bne.n	8007fd0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	015a      	lsls	r2, r3, #5
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	791b      	ldrb	r3, [r3, #4]
 8007f3e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f40:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	059b      	lsls	r3, r3, #22
 8007f46:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	0151      	lsls	r1, r2, #5
 8007f4e:	68fa      	ldr	r2, [r7, #12]
 8007f50:	440a      	add	r2, r1
 8007f52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f5e:	6013      	str	r3, [r2, #0]
 8007f60:	e036      	b.n	8007fd0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f68:	69da      	ldr	r2, [r3, #28]
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	f003 030f 	and.w	r3, r3, #15
 8007f72:	2101      	movs	r1, #1
 8007f74:	fa01 f303 	lsl.w	r3, r1, r3
 8007f78:	041b      	lsls	r3, r3, #16
 8007f7a:	68f9      	ldr	r1, [r7, #12]
 8007f7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f80:	4313      	orrs	r3, r2
 8007f82:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	015a      	lsls	r2, r3, #5
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d11a      	bne.n	8007fd0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	015a      	lsls	r2, r3, #5
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	791b      	ldrb	r3, [r3, #4]
 8007fb4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007fb6:	430b      	orrs	r3, r1
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	68ba      	ldr	r2, [r7, #8]
 8007fbc:	0151      	lsls	r1, r2, #5
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	440a      	add	r2, r1
 8007fc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fce:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3714      	adds	r7, #20
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
	...

08007fe0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	785b      	ldrb	r3, [r3, #1]
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d161      	bne.n	80080c0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	015a      	lsls	r2, r3, #5
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	4413      	add	r3, r2
 8008004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800800e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008012:	d11f      	bne.n	8008054 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	015a      	lsls	r2, r3, #5
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	4413      	add	r3, r2
 800801c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	68ba      	ldr	r2, [r7, #8]
 8008024:	0151      	lsls	r1, r2, #5
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	440a      	add	r2, r1
 800802a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800802e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008032:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	015a      	lsls	r2, r3, #5
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	4413      	add	r3, r2
 800803c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	68ba      	ldr	r2, [r7, #8]
 8008044:	0151      	lsls	r1, r2, #5
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	440a      	add	r2, r1
 800804a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800804e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008052:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800805a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	f003 030f 	and.w	r3, r3, #15
 8008064:	2101      	movs	r1, #1
 8008066:	fa01 f303 	lsl.w	r3, r1, r3
 800806a:	b29b      	uxth	r3, r3
 800806c:	43db      	mvns	r3, r3
 800806e:	68f9      	ldr	r1, [r7, #12]
 8008070:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008074:	4013      	ands	r3, r2
 8008076:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800807e:	69da      	ldr	r2, [r3, #28]
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	f003 030f 	and.w	r3, r3, #15
 8008088:	2101      	movs	r1, #1
 800808a:	fa01 f303 	lsl.w	r3, r1, r3
 800808e:	b29b      	uxth	r3, r3
 8008090:	43db      	mvns	r3, r3
 8008092:	68f9      	ldr	r1, [r7, #12]
 8008094:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008098:	4013      	ands	r3, r2
 800809a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	015a      	lsls	r2, r3, #5
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	4413      	add	r3, r2
 80080a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	0159      	lsls	r1, r3, #5
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	440b      	add	r3, r1
 80080b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080b6:	4619      	mov	r1, r3
 80080b8:	4b35      	ldr	r3, [pc, #212]	; (8008190 <USB_DeactivateEndpoint+0x1b0>)
 80080ba:	4013      	ands	r3, r2
 80080bc:	600b      	str	r3, [r1, #0]
 80080be:	e060      	b.n	8008182 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	015a      	lsls	r2, r3, #5
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	4413      	add	r3, r2
 80080c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080d6:	d11f      	bne.n	8008118 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	015a      	lsls	r2, r3, #5
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	4413      	add	r3, r2
 80080e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	68ba      	ldr	r2, [r7, #8]
 80080e8:	0151      	lsls	r1, r2, #5
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	440a      	add	r2, r1
 80080ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80080f6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	015a      	lsls	r2, r3, #5
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	4413      	add	r3, r2
 8008100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	0151      	lsls	r1, r2, #5
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	440a      	add	r2, r1
 800810e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008112:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008116:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800811e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	f003 030f 	and.w	r3, r3, #15
 8008128:	2101      	movs	r1, #1
 800812a:	fa01 f303 	lsl.w	r3, r1, r3
 800812e:	041b      	lsls	r3, r3, #16
 8008130:	43db      	mvns	r3, r3
 8008132:	68f9      	ldr	r1, [r7, #12]
 8008134:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008138:	4013      	ands	r3, r2
 800813a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008142:	69da      	ldr	r2, [r3, #28]
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	f003 030f 	and.w	r3, r3, #15
 800814c:	2101      	movs	r1, #1
 800814e:	fa01 f303 	lsl.w	r3, r1, r3
 8008152:	041b      	lsls	r3, r3, #16
 8008154:	43db      	mvns	r3, r3
 8008156:	68f9      	ldr	r1, [r7, #12]
 8008158:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800815c:	4013      	ands	r3, r2
 800815e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	015a      	lsls	r2, r3, #5
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	4413      	add	r3, r2
 8008168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	0159      	lsls	r1, r3, #5
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	440b      	add	r3, r1
 8008176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800817a:	4619      	mov	r1, r3
 800817c:	4b05      	ldr	r3, [pc, #20]	; (8008194 <USB_DeactivateEndpoint+0x1b4>)
 800817e:	4013      	ands	r3, r2
 8008180:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	3714      	adds	r7, #20
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr
 8008190:	ec337800 	.word	0xec337800
 8008194:	eff37800 	.word	0xeff37800

08008198 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b08a      	sub	sp, #40	; 0x28
 800819c:	af02      	add	r7, sp, #8
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	4613      	mov	r3, r2
 80081a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	785b      	ldrb	r3, [r3, #1]
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	f040 815c 	bne.w	8008472 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	699b      	ldr	r3, [r3, #24]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d132      	bne.n	8008228 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80081c2:	69bb      	ldr	r3, [r7, #24]
 80081c4:	015a      	lsls	r2, r3, #5
 80081c6:	69fb      	ldr	r3, [r7, #28]
 80081c8:	4413      	add	r3, r2
 80081ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081ce:	691b      	ldr	r3, [r3, #16]
 80081d0:	69ba      	ldr	r2, [r7, #24]
 80081d2:	0151      	lsls	r1, r2, #5
 80081d4:	69fa      	ldr	r2, [r7, #28]
 80081d6:	440a      	add	r2, r1
 80081d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80081e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80081e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	015a      	lsls	r2, r3, #5
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	4413      	add	r3, r2
 80081ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081f2:	691b      	ldr	r3, [r3, #16]
 80081f4:	69ba      	ldr	r2, [r7, #24]
 80081f6:	0151      	lsls	r1, r2, #5
 80081f8:	69fa      	ldr	r2, [r7, #28]
 80081fa:	440a      	add	r2, r1
 80081fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008200:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008204:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	015a      	lsls	r2, r3, #5
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	4413      	add	r3, r2
 800820e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	69ba      	ldr	r2, [r7, #24]
 8008216:	0151      	lsls	r1, r2, #5
 8008218:	69fa      	ldr	r2, [r7, #28]
 800821a:	440a      	add	r2, r1
 800821c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008220:	0cdb      	lsrs	r3, r3, #19
 8008222:	04db      	lsls	r3, r3, #19
 8008224:	6113      	str	r3, [r2, #16]
 8008226:	e074      	b.n	8008312 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	015a      	lsls	r2, r3, #5
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	4413      	add	r3, r2
 8008230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	69ba      	ldr	r2, [r7, #24]
 8008238:	0151      	lsls	r1, r2, #5
 800823a:	69fa      	ldr	r2, [r7, #28]
 800823c:	440a      	add	r2, r1
 800823e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008242:	0cdb      	lsrs	r3, r3, #19
 8008244:	04db      	lsls	r3, r3, #19
 8008246:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008248:	69bb      	ldr	r3, [r7, #24]
 800824a:	015a      	lsls	r2, r3, #5
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	4413      	add	r3, r2
 8008250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	69ba      	ldr	r2, [r7, #24]
 8008258:	0151      	lsls	r1, r2, #5
 800825a:	69fa      	ldr	r2, [r7, #28]
 800825c:	440a      	add	r2, r1
 800825e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008262:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008266:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800826a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	015a      	lsls	r2, r3, #5
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	4413      	add	r3, r2
 8008274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008278:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	6999      	ldr	r1, [r3, #24]
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	440b      	add	r3, r1
 8008284:	1e59      	subs	r1, r3, #1
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	fbb1 f3f3 	udiv	r3, r1, r3
 800828e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008290:	4b9d      	ldr	r3, [pc, #628]	; (8008508 <USB_EPStartXfer+0x370>)
 8008292:	400b      	ands	r3, r1
 8008294:	69b9      	ldr	r1, [r7, #24]
 8008296:	0148      	lsls	r0, r1, #5
 8008298:	69f9      	ldr	r1, [r7, #28]
 800829a:	4401      	add	r1, r0
 800829c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80082a0:	4313      	orrs	r3, r2
 80082a2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	015a      	lsls	r2, r3, #5
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	4413      	add	r3, r2
 80082ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082b0:	691a      	ldr	r2, [r3, #16]
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	699b      	ldr	r3, [r3, #24]
 80082b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082ba:	69b9      	ldr	r1, [r7, #24]
 80082bc:	0148      	lsls	r0, r1, #5
 80082be:	69f9      	ldr	r1, [r7, #28]
 80082c0:	4401      	add	r1, r0
 80082c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80082c6:	4313      	orrs	r3, r2
 80082c8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	791b      	ldrb	r3, [r3, #4]
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	d11f      	bne.n	8008312 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	015a      	lsls	r2, r3, #5
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	4413      	add	r3, r2
 80082da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	69ba      	ldr	r2, [r7, #24]
 80082e2:	0151      	lsls	r1, r2, #5
 80082e4:	69fa      	ldr	r2, [r7, #28]
 80082e6:	440a      	add	r2, r1
 80082e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082ec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80082f0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	015a      	lsls	r2, r3, #5
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	4413      	add	r3, r2
 80082fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	69ba      	ldr	r2, [r7, #24]
 8008302:	0151      	lsls	r1, r2, #5
 8008304:	69fa      	ldr	r2, [r7, #28]
 8008306:	440a      	add	r2, r1
 8008308:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800830c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008310:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008312:	79fb      	ldrb	r3, [r7, #7]
 8008314:	2b01      	cmp	r3, #1
 8008316:	d14b      	bne.n	80083b0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	695b      	ldr	r3, [r3, #20]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d009      	beq.n	8008334 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008320:	69bb      	ldr	r3, [r7, #24]
 8008322:	015a      	lsls	r2, r3, #5
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	4413      	add	r3, r2
 8008328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800832c:	461a      	mov	r2, r3
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	695b      	ldr	r3, [r3, #20]
 8008332:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	791b      	ldrb	r3, [r3, #4]
 8008338:	2b01      	cmp	r3, #1
 800833a:	d128      	bne.n	800838e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008348:	2b00      	cmp	r3, #0
 800834a:	d110      	bne.n	800836e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	015a      	lsls	r2, r3, #5
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	4413      	add	r3, r2
 8008354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	69ba      	ldr	r2, [r7, #24]
 800835c:	0151      	lsls	r1, r2, #5
 800835e:	69fa      	ldr	r2, [r7, #28]
 8008360:	440a      	add	r2, r1
 8008362:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008366:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800836a:	6013      	str	r3, [r2, #0]
 800836c:	e00f      	b.n	800838e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	015a      	lsls	r2, r3, #5
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	4413      	add	r3, r2
 8008376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	69ba      	ldr	r2, [r7, #24]
 800837e:	0151      	lsls	r1, r2, #5
 8008380:	69fa      	ldr	r2, [r7, #28]
 8008382:	440a      	add	r2, r1
 8008384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800838c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	015a      	lsls	r2, r3, #5
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	4413      	add	r3, r2
 8008396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	69ba      	ldr	r2, [r7, #24]
 800839e:	0151      	lsls	r1, r2, #5
 80083a0:	69fa      	ldr	r2, [r7, #28]
 80083a2:	440a      	add	r2, r1
 80083a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80083ac:	6013      	str	r3, [r2, #0]
 80083ae:	e133      	b.n	8008618 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80083b0:	69bb      	ldr	r3, [r7, #24]
 80083b2:	015a      	lsls	r2, r3, #5
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	4413      	add	r3, r2
 80083b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	69ba      	ldr	r2, [r7, #24]
 80083c0:	0151      	lsls	r1, r2, #5
 80083c2:	69fa      	ldr	r2, [r7, #28]
 80083c4:	440a      	add	r2, r1
 80083c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80083ce:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	791b      	ldrb	r3, [r3, #4]
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d015      	beq.n	8008404 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	699b      	ldr	r3, [r3, #24]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f000 811b 	beq.w	8008618 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	f003 030f 	and.w	r3, r3, #15
 80083f2:	2101      	movs	r1, #1
 80083f4:	fa01 f303 	lsl.w	r3, r1, r3
 80083f8:	69f9      	ldr	r1, [r7, #28]
 80083fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083fe:	4313      	orrs	r3, r2
 8008400:	634b      	str	r3, [r1, #52]	; 0x34
 8008402:	e109      	b.n	8008618 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008410:	2b00      	cmp	r3, #0
 8008412:	d110      	bne.n	8008436 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008414:	69bb      	ldr	r3, [r7, #24]
 8008416:	015a      	lsls	r2, r3, #5
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	4413      	add	r3, r2
 800841c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	69ba      	ldr	r2, [r7, #24]
 8008424:	0151      	lsls	r1, r2, #5
 8008426:	69fa      	ldr	r2, [r7, #28]
 8008428:	440a      	add	r2, r1
 800842a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800842e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008432:	6013      	str	r3, [r2, #0]
 8008434:	e00f      	b.n	8008456 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	015a      	lsls	r2, r3, #5
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	4413      	add	r3, r2
 800843e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	69ba      	ldr	r2, [r7, #24]
 8008446:	0151      	lsls	r1, r2, #5
 8008448:	69fa      	ldr	r2, [r7, #28]
 800844a:	440a      	add	r2, r1
 800844c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008454:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	6919      	ldr	r1, [r3, #16]
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	781a      	ldrb	r2, [r3, #0]
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	b298      	uxth	r0, r3
 8008464:	79fb      	ldrb	r3, [r7, #7]
 8008466:	9300      	str	r3, [sp, #0]
 8008468:	4603      	mov	r3, r0
 800846a:	68f8      	ldr	r0, [r7, #12]
 800846c:	f000 fade 	bl	8008a2c <USB_WritePacket>
 8008470:	e0d2      	b.n	8008618 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008472:	69bb      	ldr	r3, [r7, #24]
 8008474:	015a      	lsls	r2, r3, #5
 8008476:	69fb      	ldr	r3, [r7, #28]
 8008478:	4413      	add	r3, r2
 800847a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	69ba      	ldr	r2, [r7, #24]
 8008482:	0151      	lsls	r1, r2, #5
 8008484:	69fa      	ldr	r2, [r7, #28]
 8008486:	440a      	add	r2, r1
 8008488:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800848c:	0cdb      	lsrs	r3, r3, #19
 800848e:	04db      	lsls	r3, r3, #19
 8008490:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008492:	69bb      	ldr	r3, [r7, #24]
 8008494:	015a      	lsls	r2, r3, #5
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	4413      	add	r3, r2
 800849a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800849e:	691b      	ldr	r3, [r3, #16]
 80084a0:	69ba      	ldr	r2, [r7, #24]
 80084a2:	0151      	lsls	r1, r2, #5
 80084a4:	69fa      	ldr	r2, [r7, #28]
 80084a6:	440a      	add	r2, r1
 80084a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80084b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80084b4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	699b      	ldr	r3, [r3, #24]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d126      	bne.n	800850c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	015a      	lsls	r2, r3, #5
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	4413      	add	r3, r2
 80084c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ca:	691a      	ldr	r2, [r3, #16]
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084d4:	69b9      	ldr	r1, [r7, #24]
 80084d6:	0148      	lsls	r0, r1, #5
 80084d8:	69f9      	ldr	r1, [r7, #28]
 80084da:	4401      	add	r1, r0
 80084dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80084e0:	4313      	orrs	r3, r2
 80084e2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	015a      	lsls	r2, r3, #5
 80084e8:	69fb      	ldr	r3, [r7, #28]
 80084ea:	4413      	add	r3, r2
 80084ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	69ba      	ldr	r2, [r7, #24]
 80084f4:	0151      	lsls	r1, r2, #5
 80084f6:	69fa      	ldr	r2, [r7, #28]
 80084f8:	440a      	add	r2, r1
 80084fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008502:	6113      	str	r3, [r2, #16]
 8008504:	e03a      	b.n	800857c <USB_EPStartXfer+0x3e4>
 8008506:	bf00      	nop
 8008508:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	699a      	ldr	r2, [r3, #24]
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	4413      	add	r3, r2
 8008516:	1e5a      	subs	r2, r3, #1
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008520:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	8afa      	ldrh	r2, [r7, #22]
 8008528:	fb03 f202 	mul.w	r2, r3, r2
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008530:	69bb      	ldr	r3, [r7, #24]
 8008532:	015a      	lsls	r2, r3, #5
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	4413      	add	r3, r2
 8008538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800853c:	691a      	ldr	r2, [r3, #16]
 800853e:	8afb      	ldrh	r3, [r7, #22]
 8008540:	04d9      	lsls	r1, r3, #19
 8008542:	4b38      	ldr	r3, [pc, #224]	; (8008624 <USB_EPStartXfer+0x48c>)
 8008544:	400b      	ands	r3, r1
 8008546:	69b9      	ldr	r1, [r7, #24]
 8008548:	0148      	lsls	r0, r1, #5
 800854a:	69f9      	ldr	r1, [r7, #28]
 800854c:	4401      	add	r1, r0
 800854e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008552:	4313      	orrs	r3, r2
 8008554:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	015a      	lsls	r2, r3, #5
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	4413      	add	r3, r2
 800855e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008562:	691a      	ldr	r2, [r3, #16]
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	69db      	ldr	r3, [r3, #28]
 8008568:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800856c:	69b9      	ldr	r1, [r7, #24]
 800856e:	0148      	lsls	r0, r1, #5
 8008570:	69f9      	ldr	r1, [r7, #28]
 8008572:	4401      	add	r1, r0
 8008574:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008578:	4313      	orrs	r3, r2
 800857a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800857c:	79fb      	ldrb	r3, [r7, #7]
 800857e:	2b01      	cmp	r3, #1
 8008580:	d10d      	bne.n	800859e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	691b      	ldr	r3, [r3, #16]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d009      	beq.n	800859e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	6919      	ldr	r1, [r3, #16]
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	015a      	lsls	r2, r3, #5
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	4413      	add	r3, r2
 8008596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800859a:	460a      	mov	r2, r1
 800859c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	791b      	ldrb	r3, [r3, #4]
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d128      	bne.n	80085f8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d110      	bne.n	80085d8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	015a      	lsls	r2, r3, #5
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	4413      	add	r3, r2
 80085be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	69ba      	ldr	r2, [r7, #24]
 80085c6:	0151      	lsls	r1, r2, #5
 80085c8:	69fa      	ldr	r2, [r7, #28]
 80085ca:	440a      	add	r2, r1
 80085cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80085d4:	6013      	str	r3, [r2, #0]
 80085d6:	e00f      	b.n	80085f8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	015a      	lsls	r2, r3, #5
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	4413      	add	r3, r2
 80085e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	69ba      	ldr	r2, [r7, #24]
 80085e8:	0151      	lsls	r1, r2, #5
 80085ea:	69fa      	ldr	r2, [r7, #28]
 80085ec:	440a      	add	r2, r1
 80085ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085f6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	015a      	lsls	r2, r3, #5
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	4413      	add	r3, r2
 8008600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	69ba      	ldr	r2, [r7, #24]
 8008608:	0151      	lsls	r1, r2, #5
 800860a:	69fa      	ldr	r2, [r7, #28]
 800860c:	440a      	add	r2, r1
 800860e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008612:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008616:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008618:	2300      	movs	r3, #0
}
 800861a:	4618      	mov	r0, r3
 800861c:	3720      	adds	r7, #32
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	1ff80000 	.word	0x1ff80000

08008628 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008628:	b480      	push	{r7}
 800862a:	b087      	sub	sp, #28
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	4613      	mov	r3, r2
 8008634:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	785b      	ldrb	r3, [r3, #1]
 8008644:	2b01      	cmp	r3, #1
 8008646:	f040 80ce 	bne.w	80087e6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	699b      	ldr	r3, [r3, #24]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d132      	bne.n	80086b8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	015a      	lsls	r2, r3, #5
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	4413      	add	r3, r2
 800865a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	693a      	ldr	r2, [r7, #16]
 8008662:	0151      	lsls	r1, r2, #5
 8008664:	697a      	ldr	r2, [r7, #20]
 8008666:	440a      	add	r2, r1
 8008668:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800866c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008670:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008674:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	015a      	lsls	r2, r3, #5
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	4413      	add	r3, r2
 800867e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	693a      	ldr	r2, [r7, #16]
 8008686:	0151      	lsls	r1, r2, #5
 8008688:	697a      	ldr	r2, [r7, #20]
 800868a:	440a      	add	r2, r1
 800868c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008690:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008694:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	015a      	lsls	r2, r3, #5
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	4413      	add	r3, r2
 800869e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086a2:	691b      	ldr	r3, [r3, #16]
 80086a4:	693a      	ldr	r2, [r7, #16]
 80086a6:	0151      	lsls	r1, r2, #5
 80086a8:	697a      	ldr	r2, [r7, #20]
 80086aa:	440a      	add	r2, r1
 80086ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086b0:	0cdb      	lsrs	r3, r3, #19
 80086b2:	04db      	lsls	r3, r3, #19
 80086b4:	6113      	str	r3, [r2, #16]
 80086b6:	e04e      	b.n	8008756 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	015a      	lsls	r2, r3, #5
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	4413      	add	r3, r2
 80086c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086c4:	691b      	ldr	r3, [r3, #16]
 80086c6:	693a      	ldr	r2, [r7, #16]
 80086c8:	0151      	lsls	r1, r2, #5
 80086ca:	697a      	ldr	r2, [r7, #20]
 80086cc:	440a      	add	r2, r1
 80086ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086d2:	0cdb      	lsrs	r3, r3, #19
 80086d4:	04db      	lsls	r3, r3, #19
 80086d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	015a      	lsls	r2, r3, #5
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	4413      	add	r3, r2
 80086e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086e4:	691b      	ldr	r3, [r3, #16]
 80086e6:	693a      	ldr	r2, [r7, #16]
 80086e8:	0151      	lsls	r1, r2, #5
 80086ea:	697a      	ldr	r2, [r7, #20]
 80086ec:	440a      	add	r2, r1
 80086ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80086f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80086fa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	699a      	ldr	r2, [r3, #24]
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	429a      	cmp	r2, r3
 8008706:	d903      	bls.n	8008710 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	68da      	ldr	r2, [r3, #12]
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	015a      	lsls	r2, r3, #5
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	4413      	add	r3, r2
 8008718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	693a      	ldr	r2, [r7, #16]
 8008720:	0151      	lsls	r1, r2, #5
 8008722:	697a      	ldr	r2, [r7, #20]
 8008724:	440a      	add	r2, r1
 8008726:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800872a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800872e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	015a      	lsls	r2, r3, #5
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	4413      	add	r3, r2
 8008738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800873c:	691a      	ldr	r2, [r3, #16]
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	699b      	ldr	r3, [r3, #24]
 8008742:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008746:	6939      	ldr	r1, [r7, #16]
 8008748:	0148      	lsls	r0, r1, #5
 800874a:	6979      	ldr	r1, [r7, #20]
 800874c:	4401      	add	r1, r0
 800874e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008752:	4313      	orrs	r3, r2
 8008754:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008756:	79fb      	ldrb	r3, [r7, #7]
 8008758:	2b01      	cmp	r3, #1
 800875a:	d11e      	bne.n	800879a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	695b      	ldr	r3, [r3, #20]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d009      	beq.n	8008778 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	015a      	lsls	r2, r3, #5
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	4413      	add	r3, r2
 800876c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008770:	461a      	mov	r2, r3
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	695b      	ldr	r3, [r3, #20]
 8008776:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	015a      	lsls	r2, r3, #5
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	4413      	add	r3, r2
 8008780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	693a      	ldr	r2, [r7, #16]
 8008788:	0151      	lsls	r1, r2, #5
 800878a:	697a      	ldr	r2, [r7, #20]
 800878c:	440a      	add	r2, r1
 800878e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008792:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008796:	6013      	str	r3, [r2, #0]
 8008798:	e097      	b.n	80088ca <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	015a      	lsls	r2, r3, #5
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	4413      	add	r3, r2
 80087a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	693a      	ldr	r2, [r7, #16]
 80087aa:	0151      	lsls	r1, r2, #5
 80087ac:	697a      	ldr	r2, [r7, #20]
 80087ae:	440a      	add	r2, r1
 80087b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80087b8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	699b      	ldr	r3, [r3, #24]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	f000 8083 	beq.w	80088ca <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	f003 030f 	and.w	r3, r3, #15
 80087d4:	2101      	movs	r1, #1
 80087d6:	fa01 f303 	lsl.w	r3, r1, r3
 80087da:	6979      	ldr	r1, [r7, #20]
 80087dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087e0:	4313      	orrs	r3, r2
 80087e2:	634b      	str	r3, [r1, #52]	; 0x34
 80087e4:	e071      	b.n	80088ca <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	015a      	lsls	r2, r3, #5
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	4413      	add	r3, r2
 80087ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087f2:	691b      	ldr	r3, [r3, #16]
 80087f4:	693a      	ldr	r2, [r7, #16]
 80087f6:	0151      	lsls	r1, r2, #5
 80087f8:	697a      	ldr	r2, [r7, #20]
 80087fa:	440a      	add	r2, r1
 80087fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008800:	0cdb      	lsrs	r3, r3, #19
 8008802:	04db      	lsls	r3, r3, #19
 8008804:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	015a      	lsls	r2, r3, #5
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	4413      	add	r3, r2
 800880e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008812:	691b      	ldr	r3, [r3, #16]
 8008814:	693a      	ldr	r2, [r7, #16]
 8008816:	0151      	lsls	r1, r2, #5
 8008818:	697a      	ldr	r2, [r7, #20]
 800881a:	440a      	add	r2, r1
 800881c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008820:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008824:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008828:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	699b      	ldr	r3, [r3, #24]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d003      	beq.n	800883a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	68da      	ldr	r2, [r3, #12]
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	68da      	ldr	r2, [r3, #12]
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	015a      	lsls	r2, r3, #5
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	4413      	add	r3, r2
 800884a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800884e:	691b      	ldr	r3, [r3, #16]
 8008850:	693a      	ldr	r2, [r7, #16]
 8008852:	0151      	lsls	r1, r2, #5
 8008854:	697a      	ldr	r2, [r7, #20]
 8008856:	440a      	add	r2, r1
 8008858:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800885c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008860:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	015a      	lsls	r2, r3, #5
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	4413      	add	r3, r2
 800886a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800886e:	691a      	ldr	r2, [r3, #16]
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	69db      	ldr	r3, [r3, #28]
 8008874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008878:	6939      	ldr	r1, [r7, #16]
 800887a:	0148      	lsls	r0, r1, #5
 800887c:	6979      	ldr	r1, [r7, #20]
 800887e:	4401      	add	r1, r0
 8008880:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008884:	4313      	orrs	r3, r2
 8008886:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008888:	79fb      	ldrb	r3, [r7, #7]
 800888a:	2b01      	cmp	r3, #1
 800888c:	d10d      	bne.n	80088aa <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	691b      	ldr	r3, [r3, #16]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d009      	beq.n	80088aa <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	6919      	ldr	r1, [r3, #16]
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	015a      	lsls	r2, r3, #5
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	4413      	add	r3, r2
 80088a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088a6:	460a      	mov	r2, r1
 80088a8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	015a      	lsls	r2, r3, #5
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	4413      	add	r3, r2
 80088b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	693a      	ldr	r2, [r7, #16]
 80088ba:	0151      	lsls	r1, r2, #5
 80088bc:	697a      	ldr	r2, [r7, #20]
 80088be:	440a      	add	r2, r1
 80088c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80088c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	371c      	adds	r7, #28
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80088d8:	b480      	push	{r7}
 80088da:	b087      	sub	sp, #28
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80088e2:	2300      	movs	r3, #0
 80088e4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80088e6:	2300      	movs	r3, #0
 80088e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	785b      	ldrb	r3, [r3, #1]
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d14a      	bne.n	800898c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	015a      	lsls	r2, r3, #5
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	4413      	add	r3, r2
 8008900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800890a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800890e:	f040 8086 	bne.w	8008a1e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	015a      	lsls	r2, r3, #5
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	4413      	add	r3, r2
 800891c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	683a      	ldr	r2, [r7, #0]
 8008924:	7812      	ldrb	r2, [r2, #0]
 8008926:	0151      	lsls	r1, r2, #5
 8008928:	693a      	ldr	r2, [r7, #16]
 800892a:	440a      	add	r2, r1
 800892c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008930:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008934:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	015a      	lsls	r2, r3, #5
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	4413      	add	r3, r2
 8008940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	683a      	ldr	r2, [r7, #0]
 8008948:	7812      	ldrb	r2, [r2, #0]
 800894a:	0151      	lsls	r1, r2, #5
 800894c:	693a      	ldr	r2, [r7, #16]
 800894e:	440a      	add	r2, r1
 8008950:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008954:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008958:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	3301      	adds	r3, #1
 800895e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f242 7210 	movw	r2, #10000	; 0x2710
 8008966:	4293      	cmp	r3, r2
 8008968:	d902      	bls.n	8008970 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	75fb      	strb	r3, [r7, #23]
          break;
 800896e:	e056      	b.n	8008a1e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	015a      	lsls	r2, r3, #5
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	4413      	add	r3, r2
 800897a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008984:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008988:	d0e7      	beq.n	800895a <USB_EPStopXfer+0x82>
 800898a:	e048      	b.n	8008a1e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	015a      	lsls	r2, r3, #5
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	4413      	add	r3, r2
 8008996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089a4:	d13b      	bne.n	8008a1e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	015a      	lsls	r2, r3, #5
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	4413      	add	r3, r2
 80089b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	683a      	ldr	r2, [r7, #0]
 80089b8:	7812      	ldrb	r2, [r2, #0]
 80089ba:	0151      	lsls	r1, r2, #5
 80089bc:	693a      	ldr	r2, [r7, #16]
 80089be:	440a      	add	r2, r1
 80089c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80089c8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	015a      	lsls	r2, r3, #5
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	4413      	add	r3, r2
 80089d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	683a      	ldr	r2, [r7, #0]
 80089dc:	7812      	ldrb	r2, [r2, #0]
 80089de:	0151      	lsls	r1, r2, #5
 80089e0:	693a      	ldr	r2, [r7, #16]
 80089e2:	440a      	add	r2, r1
 80089e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	3301      	adds	r3, #1
 80089f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d902      	bls.n	8008a04 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	75fb      	strb	r3, [r7, #23]
          break;
 8008a02:	e00c      	b.n	8008a1e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	015a      	lsls	r2, r3, #5
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a1c:	d0e7      	beq.n	80089ee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	371c      	adds	r7, #28
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b089      	sub	sp, #36	; 0x24
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	60b9      	str	r1, [r7, #8]
 8008a36:	4611      	mov	r1, r2
 8008a38:	461a      	mov	r2, r3
 8008a3a:	460b      	mov	r3, r1
 8008a3c:	71fb      	strb	r3, [r7, #7]
 8008a3e:	4613      	mov	r3, r2
 8008a40:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008a4a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d123      	bne.n	8008a9a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008a52:	88bb      	ldrh	r3, [r7, #4]
 8008a54:	3303      	adds	r3, #3
 8008a56:	089b      	lsrs	r3, r3, #2
 8008a58:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	61bb      	str	r3, [r7, #24]
 8008a5e:	e018      	b.n	8008a92 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008a60:	79fb      	ldrb	r3, [r7, #7]
 8008a62:	031a      	lsls	r2, r3, #12
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	4413      	add	r3, r2
 8008a68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	3301      	adds	r3, #1
 8008a78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	3301      	adds	r3, #1
 8008a84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	3301      	adds	r3, #1
 8008a8a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008a8c:	69bb      	ldr	r3, [r7, #24]
 8008a8e:	3301      	adds	r3, #1
 8008a90:	61bb      	str	r3, [r7, #24]
 8008a92:	69ba      	ldr	r2, [r7, #24]
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d3e2      	bcc.n	8008a60 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3724      	adds	r7, #36	; 0x24
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr

08008aa8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b08b      	sub	sp, #44	; 0x2c
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	60b9      	str	r1, [r7, #8]
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008abe:	88fb      	ldrh	r3, [r7, #6]
 8008ac0:	089b      	lsrs	r3, r3, #2
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008ac6:	88fb      	ldrh	r3, [r7, #6]
 8008ac8:	f003 0303 	and.w	r3, r3, #3
 8008acc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008ace:	2300      	movs	r3, #0
 8008ad0:	623b      	str	r3, [r7, #32]
 8008ad2:	e014      	b.n	8008afe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ade:	601a      	str	r2, [r3, #0]
    pDest++;
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae8:	3301      	adds	r3, #1
 8008aea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aee:	3301      	adds	r3, #1
 8008af0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af4:	3301      	adds	r3, #1
 8008af6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008af8:	6a3b      	ldr	r3, [r7, #32]
 8008afa:	3301      	adds	r3, #1
 8008afc:	623b      	str	r3, [r7, #32]
 8008afe:	6a3a      	ldr	r2, [r7, #32]
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d3e6      	bcc.n	8008ad4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008b06:	8bfb      	ldrh	r3, [r7, #30]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d01e      	beq.n	8008b4a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008b10:	69bb      	ldr	r3, [r7, #24]
 8008b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b16:	461a      	mov	r2, r3
 8008b18:	f107 0310 	add.w	r3, r7, #16
 8008b1c:	6812      	ldr	r2, [r2, #0]
 8008b1e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008b20:	693a      	ldr	r2, [r7, #16]
 8008b22:	6a3b      	ldr	r3, [r7, #32]
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	00db      	lsls	r3, r3, #3
 8008b28:	fa22 f303 	lsr.w	r3, r2, r3
 8008b2c:	b2da      	uxtb	r2, r3
 8008b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b30:	701a      	strb	r2, [r3, #0]
      i++;
 8008b32:	6a3b      	ldr	r3, [r7, #32]
 8008b34:	3301      	adds	r3, #1
 8008b36:	623b      	str	r3, [r7, #32]
      pDest++;
 8008b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008b3e:	8bfb      	ldrh	r3, [r7, #30]
 8008b40:	3b01      	subs	r3, #1
 8008b42:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008b44:	8bfb      	ldrh	r3, [r7, #30]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d1ea      	bne.n	8008b20 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	372c      	adds	r7, #44	; 0x2c
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	785b      	ldrb	r3, [r3, #1]
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d12c      	bne.n	8008bce <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	015a      	lsls	r2, r3, #5
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	db12      	blt.n	8008bac <USB_EPSetStall+0x54>
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d00f      	beq.n	8008bac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	015a      	lsls	r2, r3, #5
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	4413      	add	r3, r2
 8008b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	68ba      	ldr	r2, [r7, #8]
 8008b9c:	0151      	lsls	r1, r2, #5
 8008b9e:	68fa      	ldr	r2, [r7, #12]
 8008ba0:	440a      	add	r2, r1
 8008ba2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ba6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008baa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	015a      	lsls	r2, r3, #5
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	4413      	add	r3, r2
 8008bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	68ba      	ldr	r2, [r7, #8]
 8008bbc:	0151      	lsls	r1, r2, #5
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	440a      	add	r2, r1
 8008bc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008bca:	6013      	str	r3, [r2, #0]
 8008bcc:	e02b      	b.n	8008c26 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	015a      	lsls	r2, r3, #5
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	db12      	blt.n	8008c06 <USB_EPSetStall+0xae>
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d00f      	beq.n	8008c06 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	015a      	lsls	r2, r3, #5
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	4413      	add	r3, r2
 8008bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	68ba      	ldr	r2, [r7, #8]
 8008bf6:	0151      	lsls	r1, r2, #5
 8008bf8:	68fa      	ldr	r2, [r7, #12]
 8008bfa:	440a      	add	r2, r1
 8008bfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008c04:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	015a      	lsls	r2, r3, #5
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	68ba      	ldr	r2, [r7, #8]
 8008c16:	0151      	lsls	r1, r2, #5
 8008c18:	68fa      	ldr	r2, [r7, #12]
 8008c1a:	440a      	add	r2, r1
 8008c1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008c24:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c26:	2300      	movs	r3, #0
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3714      	adds	r7, #20
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b085      	sub	sp, #20
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	785b      	ldrb	r3, [r3, #1]
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d128      	bne.n	8008ca2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	015a      	lsls	r2, r3, #5
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	4413      	add	r3, r2
 8008c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	68ba      	ldr	r2, [r7, #8]
 8008c60:	0151      	lsls	r1, r2, #5
 8008c62:	68fa      	ldr	r2, [r7, #12]
 8008c64:	440a      	add	r2, r1
 8008c66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c6e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	791b      	ldrb	r3, [r3, #4]
 8008c74:	2b03      	cmp	r3, #3
 8008c76:	d003      	beq.n	8008c80 <USB_EPClearStall+0x4c>
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	791b      	ldrb	r3, [r3, #4]
 8008c7c:	2b02      	cmp	r3, #2
 8008c7e:	d138      	bne.n	8008cf2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	015a      	lsls	r2, r3, #5
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	4413      	add	r3, r2
 8008c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	68ba      	ldr	r2, [r7, #8]
 8008c90:	0151      	lsls	r1, r2, #5
 8008c92:	68fa      	ldr	r2, [r7, #12]
 8008c94:	440a      	add	r2, r1
 8008c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c9e:	6013      	str	r3, [r2, #0]
 8008ca0:	e027      	b.n	8008cf2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	015a      	lsls	r2, r3, #5
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	4413      	add	r3, r2
 8008caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	68ba      	ldr	r2, [r7, #8]
 8008cb2:	0151      	lsls	r1, r2, #5
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	440a      	add	r2, r1
 8008cb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cbc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008cc0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	791b      	ldrb	r3, [r3, #4]
 8008cc6:	2b03      	cmp	r3, #3
 8008cc8:	d003      	beq.n	8008cd2 <USB_EPClearStall+0x9e>
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	791b      	ldrb	r3, [r3, #4]
 8008cce:	2b02      	cmp	r3, #2
 8008cd0:	d10f      	bne.n	8008cf2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	015a      	lsls	r2, r3, #5
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	4413      	add	r3, r2
 8008cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	68ba      	ldr	r2, [r7, #8]
 8008ce2:	0151      	lsls	r1, r2, #5
 8008ce4:	68fa      	ldr	r2, [r7, #12]
 8008ce6:	440a      	add	r2, r1
 8008ce8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cf0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3714      	adds	r7, #20
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b085      	sub	sp, #20
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	460b      	mov	r3, r1
 8008d0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	68fa      	ldr	r2, [r7, #12]
 8008d1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d1e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008d22:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	78fb      	ldrb	r3, [r7, #3]
 8008d2e:	011b      	lsls	r3, r3, #4
 8008d30:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008d34:	68f9      	ldr	r1, [r7, #12]
 8008d36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3714      	adds	r7, #20
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr

08008d4c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b085      	sub	sp, #20
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	68fa      	ldr	r2, [r7, #12]
 8008d62:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d66:	f023 0303 	bic.w	r3, r3, #3
 8008d6a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	68fa      	ldr	r2, [r7, #12]
 8008d76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d7a:	f023 0302 	bic.w	r3, r3, #2
 8008d7e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3714      	adds	r7, #20
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr

08008d8e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008d8e:	b480      	push	{r7}
 8008d90:	b085      	sub	sp, #20
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008da8:	f023 0303 	bic.w	r3, r3, #3
 8008dac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	68fa      	ldr	r2, [r7, #12]
 8008db8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008dbc:	f043 0302 	orr.w	r3, r3, #2
 8008dc0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008dc2:	2300      	movs	r3, #0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3714      	adds	r7, #20
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	695b      	ldr	r3, [r3, #20]
 8008ddc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	699b      	ldr	r3, [r3, #24]
 8008de2:	68fa      	ldr	r2, [r7, #12]
 8008de4:	4013      	ands	r3, r2
 8008de6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008de8:	68fb      	ldr	r3, [r7, #12]
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3714      	adds	r7, #20
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr

08008df6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008df6:	b480      	push	{r7}
 8008df8:	b085      	sub	sp, #20
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e08:	699b      	ldr	r3, [r3, #24]
 8008e0a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e12:	69db      	ldr	r3, [r3, #28]
 8008e14:	68ba      	ldr	r2, [r7, #8]
 8008e16:	4013      	ands	r3, r2
 8008e18:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	0c1b      	lsrs	r3, r3, #16
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3714      	adds	r7, #20
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr

08008e2a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e2a:	b480      	push	{r7}
 8008e2c:	b085      	sub	sp, #20
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e3c:	699b      	ldr	r3, [r3, #24]
 8008e3e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e46:	69db      	ldr	r3, [r3, #28]
 8008e48:	68ba      	ldr	r2, [r7, #8]
 8008e4a:	4013      	ands	r3, r2
 8008e4c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	b29b      	uxth	r3, r3
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3714      	adds	r7, #20
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr

08008e5e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008e5e:	b480      	push	{r7}
 8008e60:	b085      	sub	sp, #20
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
 8008e66:	460b      	mov	r3, r1
 8008e68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008e6e:	78fb      	ldrb	r3, [r7, #3]
 8008e70:	015a      	lsls	r2, r3, #5
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	4413      	add	r3, r2
 8008e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e84:	695b      	ldr	r3, [r3, #20]
 8008e86:	68ba      	ldr	r2, [r7, #8]
 8008e88:	4013      	ands	r3, r2
 8008e8a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008e8c:	68bb      	ldr	r3, [r7, #8]
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3714      	adds	r7, #20
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr

08008e9a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008e9a:	b480      	push	{r7}
 8008e9c:	b087      	sub	sp, #28
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eb0:	691b      	ldr	r3, [r3, #16]
 8008eb2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ebc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008ebe:	78fb      	ldrb	r3, [r7, #3]
 8008ec0:	f003 030f 	and.w	r3, r3, #15
 8008ec4:	68fa      	ldr	r2, [r7, #12]
 8008ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8008eca:	01db      	lsls	r3, r3, #7
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	693a      	ldr	r2, [r7, #16]
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008ed4:	78fb      	ldrb	r3, [r7, #3]
 8008ed6:	015a      	lsls	r2, r3, #5
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	4413      	add	r3, r2
 8008edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	693a      	ldr	r2, [r7, #16]
 8008ee4:	4013      	ands	r3, r2
 8008ee6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008ee8:	68bb      	ldr	r3, [r7, #8]
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	371c      	adds	r7, #28
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr

08008ef6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008ef6:	b480      	push	{r7}
 8008ef8:	b083      	sub	sp, #12
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	695b      	ldr	r3, [r3, #20]
 8008f02:	f003 0301 	and.w	r3, r3, #1
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	370c      	adds	r7, #12
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr

08008f12 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008f12:	b480      	push	{r7}
 8008f14:	b085      	sub	sp, #20
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f2c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008f30:	f023 0307 	bic.w	r3, r3, #7
 8008f34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	68fa      	ldr	r2, [r7, #12]
 8008f40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f4a:	2300      	movs	r3, #0
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3714      	adds	r7, #20
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b087      	sub	sp, #28
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	460b      	mov	r3, r1
 8008f62:	607a      	str	r2, [r7, #4]
 8008f64:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	333c      	adds	r3, #60	; 0x3c
 8008f6e:	3304      	adds	r3, #4
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	4a26      	ldr	r2, [pc, #152]	; (8009010 <USB_EP0_OutStart+0xb8>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d90a      	bls.n	8008f92 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f8c:	d101      	bne.n	8008f92 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	e037      	b.n	8009002 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f98:	461a      	mov	r2, r3
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fa4:	691b      	ldr	r3, [r3, #16]
 8008fa6:	697a      	ldr	r2, [r7, #20]
 8008fa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008fb0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fb8:	691b      	ldr	r3, [r3, #16]
 8008fba:	697a      	ldr	r2, [r7, #20]
 8008fbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fc0:	f043 0318 	orr.w	r3, r3, #24
 8008fc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fcc:	691b      	ldr	r3, [r3, #16]
 8008fce:	697a      	ldr	r2, [r7, #20]
 8008fd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fd4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008fd8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008fda:	7afb      	ldrb	r3, [r7, #11]
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d10f      	bne.n	8009000 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	697a      	ldr	r2, [r7, #20]
 8008ff6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ffa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008ffe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009000:	2300      	movs	r3, #0
}
 8009002:	4618      	mov	r0, r3
 8009004:	371c      	adds	r7, #28
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	4f54300a 	.word	0x4f54300a

08009014 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009014:	b480      	push	{r7}
 8009016:	b085      	sub	sp, #20
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800901c:	2300      	movs	r3, #0
 800901e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	3301      	adds	r3, #1
 8009024:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	4a13      	ldr	r2, [pc, #76]	; (8009078 <USB_CoreReset+0x64>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d901      	bls.n	8009032 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800902e:	2303      	movs	r3, #3
 8009030:	e01b      	b.n	800906a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	2b00      	cmp	r3, #0
 8009038:	daf2      	bge.n	8009020 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800903a:	2300      	movs	r3, #0
 800903c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	f043 0201 	orr.w	r2, r3, #1
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	3301      	adds	r3, #1
 800904e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	4a09      	ldr	r2, [pc, #36]	; (8009078 <USB_CoreReset+0x64>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d901      	bls.n	800905c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009058:	2303      	movs	r3, #3
 800905a:	e006      	b.n	800906a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	691b      	ldr	r3, [r3, #16]
 8009060:	f003 0301 	and.w	r3, r3, #1
 8009064:	2b01      	cmp	r3, #1
 8009066:	d0f0      	beq.n	800904a <USB_CoreReset+0x36>

  return HAL_OK;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3714      	adds	r7, #20
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr
 8009076:	bf00      	nop
 8009078:	00030d40 	.word	0x00030d40

0800907c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009080:	4904      	ldr	r1, [pc, #16]	; (8009094 <MX_FATFS_Init+0x18>)
 8009082:	4805      	ldr	r0, [pc, #20]	; (8009098 <MX_FATFS_Init+0x1c>)
 8009084:	f004 fdf6 	bl	800dc74 <FATFS_LinkDriver>
 8009088:	4603      	mov	r3, r0
 800908a:	461a      	mov	r2, r3
 800908c:	4b03      	ldr	r3, [pc, #12]	; (800909c <MX_FATFS_Init+0x20>)
 800908e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009090:	bf00      	nop
 8009092:	bd80      	pop	{r7, pc}
 8009094:	20000890 	.word	0x20000890
 8009098:	2000002c 	.word	0x2000002c
 800909c:	2000088c 	.word	0x2000088c

080090a0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80090a0:	b480      	push	{r7}
 80090a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80090a4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr

080090b0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	4603      	mov	r3, r0
 80090b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 80090ba:	79fb      	ldrb	r3, [r7, #7]
 80090bc:	4618      	mov	r0, r3
 80090be:	f000 f9d7 	bl	8009470 <USER_SPI_initialize>
 80090c2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3708      	adds	r7, #8
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	4603      	mov	r3, r0
 80090d4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 80090d6:	79fb      	ldrb	r3, [r7, #7]
 80090d8:	4618      	mov	r0, r3
 80090da:	f000 fab5 	bl	8009648 <USER_SPI_status>
 80090de:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3708      	adds	r7, #8
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60b9      	str	r1, [r7, #8]
 80090f0:	607a      	str	r2, [r7, #4]
 80090f2:	603b      	str	r3, [r7, #0]
 80090f4:	4603      	mov	r3, r0
 80090f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 80090f8:	7bf8      	ldrb	r0, [r7, #15]
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	687a      	ldr	r2, [r7, #4]
 80090fe:	68b9      	ldr	r1, [r7, #8]
 8009100:	f000 fab8 	bl	8009674 <USER_SPI_read>
 8009104:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8009106:	4618      	mov	r0, r3
 8009108:	3710      	adds	r7, #16
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}

0800910e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800910e:	b580      	push	{r7, lr}
 8009110:	b084      	sub	sp, #16
 8009112:	af00      	add	r7, sp, #0
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	607a      	str	r2, [r7, #4]
 8009118:	603b      	str	r3, [r7, #0]
 800911a:	4603      	mov	r3, r0
 800911c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 800911e:	7bf8      	ldrb	r0, [r7, #15]
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	68b9      	ldr	r1, [r7, #8]
 8009126:	f000 fb0b 	bl	8009740 <USER_SPI_write>
 800912a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800912c:	4618      	mov	r0, r3
 800912e:	3710      	adds	r7, #16
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
 800913a:	4603      	mov	r3, r0
 800913c:	603a      	str	r2, [r7, #0]
 800913e:	71fb      	strb	r3, [r7, #7]
 8009140:	460b      	mov	r3, r1
 8009142:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8009144:	79b9      	ldrb	r1, [r7, #6]
 8009146:	79fb      	ldrb	r3, [r7, #7]
 8009148:	683a      	ldr	r2, [r7, #0]
 800914a:	4618      	mov	r0, r3
 800914c:	f000 fb74 	bl	8009838 <USER_SPI_ioctl>
 8009150:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8009152:	4618      	mov	r0, r3
 8009154:	3708      	adds	r7, #8
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
	...

0800915c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8009164:	f7f9 fa28 	bl	80025b8 <HAL_GetTick>
 8009168:	4603      	mov	r3, r0
 800916a:	4a04      	ldr	r2, [pc, #16]	; (800917c <SPI_Timer_On+0x20>)
 800916c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800916e:	4a04      	ldr	r2, [pc, #16]	; (8009180 <SPI_Timer_On+0x24>)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6013      	str	r3, [r2, #0]
}
 8009174:	bf00      	nop
 8009176:	3708      	adds	r7, #8
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}
 800917c:	20000898 	.word	0x20000898
 8009180:	2000089c 	.word	0x2000089c

08009184 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8009184:	b580      	push	{r7, lr}
 8009186:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8009188:	f7f9 fa16 	bl	80025b8 <HAL_GetTick>
 800918c:	4602      	mov	r2, r0
 800918e:	4b06      	ldr	r3, [pc, #24]	; (80091a8 <SPI_Timer_Status+0x24>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	1ad2      	subs	r2, r2, r3
 8009194:	4b05      	ldr	r3, [pc, #20]	; (80091ac <SPI_Timer_Status+0x28>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	429a      	cmp	r2, r3
 800919a:	bf34      	ite	cc
 800919c:	2301      	movcc	r3, #1
 800919e:	2300      	movcs	r3, #0
 80091a0:	b2db      	uxtb	r3, r3
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	20000898 	.word	0x20000898
 80091ac:	2000089c 	.word	0x2000089c

080091b0 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b086      	sub	sp, #24
 80091b4:	af02      	add	r7, sp, #8
 80091b6:	4603      	mov	r3, r0
 80091b8:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80091ba:	f107 020f 	add.w	r2, r7, #15
 80091be:	1df9      	adds	r1, r7, #7
 80091c0:	2332      	movs	r3, #50	; 0x32
 80091c2:	9300      	str	r3, [sp, #0]
 80091c4:	2301      	movs	r3, #1
 80091c6:	4804      	ldr	r0, [pc, #16]	; (80091d8 <xchg_spi+0x28>)
 80091c8:	f7fd f895 	bl	80062f6 <HAL_SPI_TransmitReceive>
    return rxDat;
 80091cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	20000200 	.word	0x20000200

080091dc <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80091dc:	b590      	push	{r4, r7, lr}
 80091de:	b085      	sub	sp, #20
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80091e6:	2300      	movs	r3, #0
 80091e8:	60fb      	str	r3, [r7, #12]
 80091ea:	e00a      	b.n	8009202 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	18d4      	adds	r4, r2, r3
 80091f2:	20ff      	movs	r0, #255	; 0xff
 80091f4:	f7ff ffdc 	bl	80091b0 <xchg_spi>
 80091f8:	4603      	mov	r3, r0
 80091fa:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	3301      	adds	r3, #1
 8009200:	60fb      	str	r3, [r7, #12]
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	429a      	cmp	r2, r3
 8009208:	d3f0      	bcc.n	80091ec <rcvr_spi_multi+0x10>
	}
}
 800920a:	bf00      	nop
 800920c:	bf00      	nop
 800920e:	3714      	adds	r7, #20
 8009210:	46bd      	mov	sp, r7
 8009212:	bd90      	pop	{r4, r7, pc}

08009214 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b082      	sub	sp, #8
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	b29a      	uxth	r2, r3
 8009222:	f04f 33ff 	mov.w	r3, #4294967295
 8009226:	6879      	ldr	r1, [r7, #4]
 8009228:	4803      	ldr	r0, [pc, #12]	; (8009238 <xmit_spi_multi+0x24>)
 800922a:	f7fc ff28 	bl	800607e <HAL_SPI_Transmit>
}
 800922e:	bf00      	nop
 8009230:	3708      	adds	r7, #8
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	20000200 	.word	0x20000200

0800923c <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b086      	sub	sp, #24
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8009244:	f7f9 f9b8 	bl	80025b8 <HAL_GetTick>
 8009248:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800924e:	20ff      	movs	r0, #255	; 0xff
 8009250:	f7ff ffae 	bl	80091b0 <xchg_spi>
 8009254:	4603      	mov	r3, r0
 8009256:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8009258:	7bfb      	ldrb	r3, [r7, #15]
 800925a:	2bff      	cmp	r3, #255	; 0xff
 800925c:	d007      	beq.n	800926e <wait_ready+0x32>
 800925e:	f7f9 f9ab 	bl	80025b8 <HAL_GetTick>
 8009262:	4602      	mov	r2, r0
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	1ad3      	subs	r3, r2, r3
 8009268:	693a      	ldr	r2, [r7, #16]
 800926a:	429a      	cmp	r2, r3
 800926c:	d8ef      	bhi.n	800924e <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800926e:	7bfb      	ldrb	r3, [r7, #15]
 8009270:	2bff      	cmp	r3, #255	; 0xff
 8009272:	bf0c      	ite	eq
 8009274:	2301      	moveq	r3, #1
 8009276:	2300      	movne	r3, #0
 8009278:	b2db      	uxtb	r3, r3
}
 800927a:	4618      	mov	r0, r3
 800927c:	3718      	adds	r7, #24
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
	...

08009284 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8009288:	2201      	movs	r2, #1
 800928a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800928e:	4804      	ldr	r0, [pc, #16]	; (80092a0 <despiselect+0x1c>)
 8009290:	f7f9 fc8a 	bl	8002ba8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8009294:	20ff      	movs	r0, #255	; 0xff
 8009296:	f7ff ff8b 	bl	80091b0 <xchg_spi>

}
 800929a:	bf00      	nop
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	40020400 	.word	0x40020400

080092a4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80092a8:	2200      	movs	r2, #0
 80092aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80092ae:	480a      	ldr	r0, [pc, #40]	; (80092d8 <spiselect+0x34>)
 80092b0:	f7f9 fc7a 	bl	8002ba8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80092b4:	20ff      	movs	r0, #255	; 0xff
 80092b6:	f7ff ff7b 	bl	80091b0 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80092ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80092be:	f7ff ffbd 	bl	800923c <wait_ready>
 80092c2:	4603      	mov	r3, r0
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d001      	beq.n	80092cc <spiselect+0x28>
 80092c8:	2301      	movs	r3, #1
 80092ca:	e002      	b.n	80092d2 <spiselect+0x2e>

	despiselect();
 80092cc:	f7ff ffda 	bl	8009284 <despiselect>
	return 0;	/* Timeout */
 80092d0:	2300      	movs	r3, #0
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	40020400 	.word	0x40020400

080092dc <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80092e6:	20c8      	movs	r0, #200	; 0xc8
 80092e8:	f7ff ff38 	bl	800915c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80092ec:	20ff      	movs	r0, #255	; 0xff
 80092ee:	f7ff ff5f 	bl	80091b0 <xchg_spi>
 80092f2:	4603      	mov	r3, r0
 80092f4:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80092f6:	7bfb      	ldrb	r3, [r7, #15]
 80092f8:	2bff      	cmp	r3, #255	; 0xff
 80092fa:	d104      	bne.n	8009306 <rcvr_datablock+0x2a>
 80092fc:	f7ff ff42 	bl	8009184 <SPI_Timer_Status>
 8009300:	4603      	mov	r3, r0
 8009302:	2b00      	cmp	r3, #0
 8009304:	d1f2      	bne.n	80092ec <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8009306:	7bfb      	ldrb	r3, [r7, #15]
 8009308:	2bfe      	cmp	r3, #254	; 0xfe
 800930a:	d001      	beq.n	8009310 <rcvr_datablock+0x34>
 800930c:	2300      	movs	r3, #0
 800930e:	e00a      	b.n	8009326 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8009310:	6839      	ldr	r1, [r7, #0]
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f7ff ff62 	bl	80091dc <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8009318:	20ff      	movs	r0, #255	; 0xff
 800931a:	f7ff ff49 	bl	80091b0 <xchg_spi>
 800931e:	20ff      	movs	r0, #255	; 0xff
 8009320:	f7ff ff46 	bl	80091b0 <xchg_spi>

	return 1;						/* Function succeeded */
 8009324:	2301      	movs	r3, #1
}
 8009326:	4618      	mov	r0, r3
 8009328:	3710      	adds	r7, #16
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}

0800932e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800932e:	b580      	push	{r7, lr}
 8009330:	b084      	sub	sp, #16
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
 8009336:	460b      	mov	r3, r1
 8009338:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800933a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800933e:	f7ff ff7d 	bl	800923c <wait_ready>
 8009342:	4603      	mov	r3, r0
 8009344:	2b00      	cmp	r3, #0
 8009346:	d101      	bne.n	800934c <xmit_datablock+0x1e>
 8009348:	2300      	movs	r3, #0
 800934a:	e01e      	b.n	800938a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800934c:	78fb      	ldrb	r3, [r7, #3]
 800934e:	4618      	mov	r0, r3
 8009350:	f7ff ff2e 	bl	80091b0 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8009354:	78fb      	ldrb	r3, [r7, #3]
 8009356:	2bfd      	cmp	r3, #253	; 0xfd
 8009358:	d016      	beq.n	8009388 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800935a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f7ff ff58 	bl	8009214 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8009364:	20ff      	movs	r0, #255	; 0xff
 8009366:	f7ff ff23 	bl	80091b0 <xchg_spi>
 800936a:	20ff      	movs	r0, #255	; 0xff
 800936c:	f7ff ff20 	bl	80091b0 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8009370:	20ff      	movs	r0, #255	; 0xff
 8009372:	f7ff ff1d 	bl	80091b0 <xchg_spi>
 8009376:	4603      	mov	r3, r0
 8009378:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800937a:	7bfb      	ldrb	r3, [r7, #15]
 800937c:	f003 031f 	and.w	r3, r3, #31
 8009380:	2b05      	cmp	r3, #5
 8009382:	d001      	beq.n	8009388 <xmit_datablock+0x5a>
 8009384:	2300      	movs	r3, #0
 8009386:	e000      	b.n	800938a <xmit_datablock+0x5c>
	}
	return 1;
 8009388:	2301      	movs	r3, #1
}
 800938a:	4618      	mov	r0, r3
 800938c:	3710      	adds	r7, #16
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}

08009392 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8009392:	b580      	push	{r7, lr}
 8009394:	b084      	sub	sp, #16
 8009396:	af00      	add	r7, sp, #0
 8009398:	4603      	mov	r3, r0
 800939a:	6039      	str	r1, [r7, #0]
 800939c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800939e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	da0e      	bge.n	80093c4 <send_cmd+0x32>
		cmd &= 0x7F;
 80093a6:	79fb      	ldrb	r3, [r7, #7]
 80093a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093ac:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80093ae:	2100      	movs	r1, #0
 80093b0:	2037      	movs	r0, #55	; 0x37
 80093b2:	f7ff ffee 	bl	8009392 <send_cmd>
 80093b6:	4603      	mov	r3, r0
 80093b8:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80093ba:	7bbb      	ldrb	r3, [r7, #14]
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d901      	bls.n	80093c4 <send_cmd+0x32>
 80093c0:	7bbb      	ldrb	r3, [r7, #14]
 80093c2:	e051      	b.n	8009468 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80093c4:	79fb      	ldrb	r3, [r7, #7]
 80093c6:	2b0c      	cmp	r3, #12
 80093c8:	d008      	beq.n	80093dc <send_cmd+0x4a>
		despiselect();
 80093ca:	f7ff ff5b 	bl	8009284 <despiselect>
		if (!spiselect()) return 0xFF;
 80093ce:	f7ff ff69 	bl	80092a4 <spiselect>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d101      	bne.n	80093dc <send_cmd+0x4a>
 80093d8:	23ff      	movs	r3, #255	; 0xff
 80093da:	e045      	b.n	8009468 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80093dc:	79fb      	ldrb	r3, [r7, #7]
 80093de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	4618      	mov	r0, r3
 80093e6:	f7ff fee3 	bl	80091b0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	0e1b      	lsrs	r3, r3, #24
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	4618      	mov	r0, r3
 80093f2:	f7ff fedd 	bl	80091b0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	0c1b      	lsrs	r3, r3, #16
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	4618      	mov	r0, r3
 80093fe:	f7ff fed7 	bl	80091b0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	0a1b      	lsrs	r3, r3, #8
 8009406:	b2db      	uxtb	r3, r3
 8009408:	4618      	mov	r0, r3
 800940a:	f7ff fed1 	bl	80091b0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	b2db      	uxtb	r3, r3
 8009412:	4618      	mov	r0, r3
 8009414:	f7ff fecc 	bl	80091b0 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8009418:	2301      	movs	r3, #1
 800941a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800941c:	79fb      	ldrb	r3, [r7, #7]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d101      	bne.n	8009426 <send_cmd+0x94>
 8009422:	2395      	movs	r3, #149	; 0x95
 8009424:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8009426:	79fb      	ldrb	r3, [r7, #7]
 8009428:	2b08      	cmp	r3, #8
 800942a:	d101      	bne.n	8009430 <send_cmd+0x9e>
 800942c:	2387      	movs	r3, #135	; 0x87
 800942e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8009430:	7bfb      	ldrb	r3, [r7, #15]
 8009432:	4618      	mov	r0, r3
 8009434:	f7ff febc 	bl	80091b0 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8009438:	79fb      	ldrb	r3, [r7, #7]
 800943a:	2b0c      	cmp	r3, #12
 800943c:	d102      	bne.n	8009444 <send_cmd+0xb2>
 800943e:	20ff      	movs	r0, #255	; 0xff
 8009440:	f7ff feb6 	bl	80091b0 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8009444:	230a      	movs	r3, #10
 8009446:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8009448:	20ff      	movs	r0, #255	; 0xff
 800944a:	f7ff feb1 	bl	80091b0 <xchg_spi>
 800944e:	4603      	mov	r3, r0
 8009450:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8009452:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009456:	2b00      	cmp	r3, #0
 8009458:	da05      	bge.n	8009466 <send_cmd+0xd4>
 800945a:	7bfb      	ldrb	r3, [r7, #15]
 800945c:	3b01      	subs	r3, #1
 800945e:	73fb      	strb	r3, [r7, #15]
 8009460:	7bfb      	ldrb	r3, [r7, #15]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d1f0      	bne.n	8009448 <send_cmd+0xb6>

	return res;							/* Return received response */
 8009466:	7bbb      	ldrb	r3, [r7, #14]
}
 8009468:	4618      	mov	r0, r3
 800946a:	3710      	adds	r7, #16
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8009470:	b590      	push	{r4, r7, lr}
 8009472:	b085      	sub	sp, #20
 8009474:	af00      	add	r7, sp, #0
 8009476:	4603      	mov	r3, r0
 8009478:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800947a:	79fb      	ldrb	r3, [r7, #7]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d001      	beq.n	8009484 <USER_SPI_initialize+0x14>
 8009480:	2301      	movs	r3, #1
 8009482:	e0d6      	b.n	8009632 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8009484:	4b6d      	ldr	r3, [pc, #436]	; (800963c <USER_SPI_initialize+0x1cc>)
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	b2db      	uxtb	r3, r3
 800948a:	f003 0302 	and.w	r3, r3, #2
 800948e:	2b00      	cmp	r3, #0
 8009490:	d003      	beq.n	800949a <USER_SPI_initialize+0x2a>
 8009492:	4b6a      	ldr	r3, [pc, #424]	; (800963c <USER_SPI_initialize+0x1cc>)
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	b2db      	uxtb	r3, r3
 8009498:	e0cb      	b.n	8009632 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800949a:	4b69      	ldr	r3, [pc, #420]	; (8009640 <USER_SPI_initialize+0x1d0>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80094a4:	4b66      	ldr	r3, [pc, #408]	; (8009640 <USER_SPI_initialize+0x1d0>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80094ac:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80094ae:	230a      	movs	r3, #10
 80094b0:	73fb      	strb	r3, [r7, #15]
 80094b2:	e005      	b.n	80094c0 <USER_SPI_initialize+0x50>
 80094b4:	20ff      	movs	r0, #255	; 0xff
 80094b6:	f7ff fe7b 	bl	80091b0 <xchg_spi>
 80094ba:	7bfb      	ldrb	r3, [r7, #15]
 80094bc:	3b01      	subs	r3, #1
 80094be:	73fb      	strb	r3, [r7, #15]
 80094c0:	7bfb      	ldrb	r3, [r7, #15]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d1f6      	bne.n	80094b4 <USER_SPI_initialize+0x44>

	ty = 0;
 80094c6:	2300      	movs	r3, #0
 80094c8:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80094ca:	2100      	movs	r1, #0
 80094cc:	2000      	movs	r0, #0
 80094ce:	f7ff ff60 	bl	8009392 <send_cmd>
 80094d2:	4603      	mov	r3, r0
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	f040 808b 	bne.w	80095f0 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80094da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80094de:	f7ff fe3d 	bl	800915c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80094e2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80094e6:	2008      	movs	r0, #8
 80094e8:	f7ff ff53 	bl	8009392 <send_cmd>
 80094ec:	4603      	mov	r3, r0
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d151      	bne.n	8009596 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80094f2:	2300      	movs	r3, #0
 80094f4:	73fb      	strb	r3, [r7, #15]
 80094f6:	e00d      	b.n	8009514 <USER_SPI_initialize+0xa4>
 80094f8:	7bfc      	ldrb	r4, [r7, #15]
 80094fa:	20ff      	movs	r0, #255	; 0xff
 80094fc:	f7ff fe58 	bl	80091b0 <xchg_spi>
 8009500:	4603      	mov	r3, r0
 8009502:	461a      	mov	r2, r3
 8009504:	f104 0310 	add.w	r3, r4, #16
 8009508:	443b      	add	r3, r7
 800950a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800950e:	7bfb      	ldrb	r3, [r7, #15]
 8009510:	3301      	adds	r3, #1
 8009512:	73fb      	strb	r3, [r7, #15]
 8009514:	7bfb      	ldrb	r3, [r7, #15]
 8009516:	2b03      	cmp	r3, #3
 8009518:	d9ee      	bls.n	80094f8 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800951a:	7abb      	ldrb	r3, [r7, #10]
 800951c:	2b01      	cmp	r3, #1
 800951e:	d167      	bne.n	80095f0 <USER_SPI_initialize+0x180>
 8009520:	7afb      	ldrb	r3, [r7, #11]
 8009522:	2baa      	cmp	r3, #170	; 0xaa
 8009524:	d164      	bne.n	80095f0 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8009526:	bf00      	nop
 8009528:	f7ff fe2c 	bl	8009184 <SPI_Timer_Status>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d007      	beq.n	8009542 <USER_SPI_initialize+0xd2>
 8009532:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009536:	20a9      	movs	r0, #169	; 0xa9
 8009538:	f7ff ff2b 	bl	8009392 <send_cmd>
 800953c:	4603      	mov	r3, r0
 800953e:	2b00      	cmp	r3, #0
 8009540:	d1f2      	bne.n	8009528 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8009542:	f7ff fe1f 	bl	8009184 <SPI_Timer_Status>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d051      	beq.n	80095f0 <USER_SPI_initialize+0x180>
 800954c:	2100      	movs	r1, #0
 800954e:	203a      	movs	r0, #58	; 0x3a
 8009550:	f7ff ff1f 	bl	8009392 <send_cmd>
 8009554:	4603      	mov	r3, r0
 8009556:	2b00      	cmp	r3, #0
 8009558:	d14a      	bne.n	80095f0 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800955a:	2300      	movs	r3, #0
 800955c:	73fb      	strb	r3, [r7, #15]
 800955e:	e00d      	b.n	800957c <USER_SPI_initialize+0x10c>
 8009560:	7bfc      	ldrb	r4, [r7, #15]
 8009562:	20ff      	movs	r0, #255	; 0xff
 8009564:	f7ff fe24 	bl	80091b0 <xchg_spi>
 8009568:	4603      	mov	r3, r0
 800956a:	461a      	mov	r2, r3
 800956c:	f104 0310 	add.w	r3, r4, #16
 8009570:	443b      	add	r3, r7
 8009572:	f803 2c08 	strb.w	r2, [r3, #-8]
 8009576:	7bfb      	ldrb	r3, [r7, #15]
 8009578:	3301      	adds	r3, #1
 800957a:	73fb      	strb	r3, [r7, #15]
 800957c:	7bfb      	ldrb	r3, [r7, #15]
 800957e:	2b03      	cmp	r3, #3
 8009580:	d9ee      	bls.n	8009560 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8009582:	7a3b      	ldrb	r3, [r7, #8]
 8009584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009588:	2b00      	cmp	r3, #0
 800958a:	d001      	beq.n	8009590 <USER_SPI_initialize+0x120>
 800958c:	230c      	movs	r3, #12
 800958e:	e000      	b.n	8009592 <USER_SPI_initialize+0x122>
 8009590:	2304      	movs	r3, #4
 8009592:	737b      	strb	r3, [r7, #13]
 8009594:	e02c      	b.n	80095f0 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8009596:	2100      	movs	r1, #0
 8009598:	20a9      	movs	r0, #169	; 0xa9
 800959a:	f7ff fefa 	bl	8009392 <send_cmd>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d804      	bhi.n	80095ae <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80095a4:	2302      	movs	r3, #2
 80095a6:	737b      	strb	r3, [r7, #13]
 80095a8:	23a9      	movs	r3, #169	; 0xa9
 80095aa:	73bb      	strb	r3, [r7, #14]
 80095ac:	e003      	b.n	80095b6 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80095ae:	2301      	movs	r3, #1
 80095b0:	737b      	strb	r3, [r7, #13]
 80095b2:	2301      	movs	r3, #1
 80095b4:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80095b6:	bf00      	nop
 80095b8:	f7ff fde4 	bl	8009184 <SPI_Timer_Status>
 80095bc:	4603      	mov	r3, r0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d007      	beq.n	80095d2 <USER_SPI_initialize+0x162>
 80095c2:	7bbb      	ldrb	r3, [r7, #14]
 80095c4:	2100      	movs	r1, #0
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7ff fee3 	bl	8009392 <send_cmd>
 80095cc:	4603      	mov	r3, r0
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d1f2      	bne.n	80095b8 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80095d2:	f7ff fdd7 	bl	8009184 <SPI_Timer_Status>
 80095d6:	4603      	mov	r3, r0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d007      	beq.n	80095ec <USER_SPI_initialize+0x17c>
 80095dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80095e0:	2010      	movs	r0, #16
 80095e2:	f7ff fed6 	bl	8009392 <send_cmd>
 80095e6:	4603      	mov	r3, r0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d001      	beq.n	80095f0 <USER_SPI_initialize+0x180>
				ty = 0;
 80095ec:	2300      	movs	r3, #0
 80095ee:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80095f0:	4a14      	ldr	r2, [pc, #80]	; (8009644 <USER_SPI_initialize+0x1d4>)
 80095f2:	7b7b      	ldrb	r3, [r7, #13]
 80095f4:	7013      	strb	r3, [r2, #0]
	despiselect();
 80095f6:	f7ff fe45 	bl	8009284 <despiselect>

	if (ty) {			/* OK */
 80095fa:	7b7b      	ldrb	r3, [r7, #13]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d012      	beq.n	8009626 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8009600:	4b0f      	ldr	r3, [pc, #60]	; (8009640 <USER_SPI_initialize+0x1d0>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800960a:	4b0d      	ldr	r3, [pc, #52]	; (8009640 <USER_SPI_initialize+0x1d0>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f042 0210 	orr.w	r2, r2, #16
 8009612:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8009614:	4b09      	ldr	r3, [pc, #36]	; (800963c <USER_SPI_initialize+0x1cc>)
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	b2db      	uxtb	r3, r3
 800961a:	f023 0301 	bic.w	r3, r3, #1
 800961e:	b2da      	uxtb	r2, r3
 8009620:	4b06      	ldr	r3, [pc, #24]	; (800963c <USER_SPI_initialize+0x1cc>)
 8009622:	701a      	strb	r2, [r3, #0]
 8009624:	e002      	b.n	800962c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8009626:	4b05      	ldr	r3, [pc, #20]	; (800963c <USER_SPI_initialize+0x1cc>)
 8009628:	2201      	movs	r2, #1
 800962a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800962c:	4b03      	ldr	r3, [pc, #12]	; (800963c <USER_SPI_initialize+0x1cc>)
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	b2db      	uxtb	r3, r3
}
 8009632:	4618      	mov	r0, r3
 8009634:	3714      	adds	r7, #20
 8009636:	46bd      	mov	sp, r7
 8009638:	bd90      	pop	{r4, r7, pc}
 800963a:	bf00      	nop
 800963c:	20000040 	.word	0x20000040
 8009640:	20000200 	.word	0x20000200
 8009644:	20000894 	.word	0x20000894

08009648 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	4603      	mov	r3, r0
 8009650:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8009652:	79fb      	ldrb	r3, [r7, #7]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d001      	beq.n	800965c <USER_SPI_status+0x14>
 8009658:	2301      	movs	r3, #1
 800965a:	e002      	b.n	8009662 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800965c:	4b04      	ldr	r3, [pc, #16]	; (8009670 <USER_SPI_status+0x28>)
 800965e:	781b      	ldrb	r3, [r3, #0]
 8009660:	b2db      	uxtb	r3, r3
}
 8009662:	4618      	mov	r0, r3
 8009664:	370c      	adds	r7, #12
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr
 800966e:	bf00      	nop
 8009670:	20000040 	.word	0x20000040

08009674 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	60b9      	str	r1, [r7, #8]
 800967c:	607a      	str	r2, [r7, #4]
 800967e:	603b      	str	r3, [r7, #0]
 8009680:	4603      	mov	r3, r0
 8009682:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8009684:	7bfb      	ldrb	r3, [r7, #15]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d102      	bne.n	8009690 <USER_SPI_read+0x1c>
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d101      	bne.n	8009694 <USER_SPI_read+0x20>
 8009690:	2304      	movs	r3, #4
 8009692:	e04d      	b.n	8009730 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8009694:	4b28      	ldr	r3, [pc, #160]	; (8009738 <USER_SPI_read+0xc4>)
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	b2db      	uxtb	r3, r3
 800969a:	f003 0301 	and.w	r3, r3, #1
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d001      	beq.n	80096a6 <USER_SPI_read+0x32>
 80096a2:	2303      	movs	r3, #3
 80096a4:	e044      	b.n	8009730 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80096a6:	4b25      	ldr	r3, [pc, #148]	; (800973c <USER_SPI_read+0xc8>)
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	f003 0308 	and.w	r3, r3, #8
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d102      	bne.n	80096b8 <USER_SPI_read+0x44>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	025b      	lsls	r3, r3, #9
 80096b6:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d111      	bne.n	80096e2 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80096be:	6879      	ldr	r1, [r7, #4]
 80096c0:	2011      	movs	r0, #17
 80096c2:	f7ff fe66 	bl	8009392 <send_cmd>
 80096c6:	4603      	mov	r3, r0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d129      	bne.n	8009720 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80096cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80096d0:	68b8      	ldr	r0, [r7, #8]
 80096d2:	f7ff fe03 	bl	80092dc <rcvr_datablock>
 80096d6:	4603      	mov	r3, r0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d021      	beq.n	8009720 <USER_SPI_read+0xac>
			count = 0;
 80096dc:	2300      	movs	r3, #0
 80096de:	603b      	str	r3, [r7, #0]
 80096e0:	e01e      	b.n	8009720 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80096e2:	6879      	ldr	r1, [r7, #4]
 80096e4:	2012      	movs	r0, #18
 80096e6:	f7ff fe54 	bl	8009392 <send_cmd>
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d117      	bne.n	8009720 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80096f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80096f4:	68b8      	ldr	r0, [r7, #8]
 80096f6:	f7ff fdf1 	bl	80092dc <rcvr_datablock>
 80096fa:	4603      	mov	r3, r0
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d00a      	beq.n	8009716 <USER_SPI_read+0xa2>
				buff += 512;
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009706:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	3b01      	subs	r3, #1
 800970c:	603b      	str	r3, [r7, #0]
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d1ed      	bne.n	80096f0 <USER_SPI_read+0x7c>
 8009714:	e000      	b.n	8009718 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8009716:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8009718:	2100      	movs	r1, #0
 800971a:	200c      	movs	r0, #12
 800971c:	f7ff fe39 	bl	8009392 <send_cmd>
		}
	}
	despiselect();
 8009720:	f7ff fdb0 	bl	8009284 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	2b00      	cmp	r3, #0
 8009728:	bf14      	ite	ne
 800972a:	2301      	movne	r3, #1
 800972c:	2300      	moveq	r3, #0
 800972e:	b2db      	uxtb	r3, r3
}
 8009730:	4618      	mov	r0, r3
 8009732:	3710      	adds	r7, #16
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	20000040 	.word	0x20000040
 800973c:	20000894 	.word	0x20000894

08009740 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	60b9      	str	r1, [r7, #8]
 8009748:	607a      	str	r2, [r7, #4]
 800974a:	603b      	str	r3, [r7, #0]
 800974c:	4603      	mov	r3, r0
 800974e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8009750:	7bfb      	ldrb	r3, [r7, #15]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d102      	bne.n	800975c <USER_SPI_write+0x1c>
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d101      	bne.n	8009760 <USER_SPI_write+0x20>
 800975c:	2304      	movs	r3, #4
 800975e:	e063      	b.n	8009828 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8009760:	4b33      	ldr	r3, [pc, #204]	; (8009830 <USER_SPI_write+0xf0>)
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	b2db      	uxtb	r3, r3
 8009766:	f003 0301 	and.w	r3, r3, #1
 800976a:	2b00      	cmp	r3, #0
 800976c:	d001      	beq.n	8009772 <USER_SPI_write+0x32>
 800976e:	2303      	movs	r3, #3
 8009770:	e05a      	b.n	8009828 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8009772:	4b2f      	ldr	r3, [pc, #188]	; (8009830 <USER_SPI_write+0xf0>)
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	b2db      	uxtb	r3, r3
 8009778:	f003 0304 	and.w	r3, r3, #4
 800977c:	2b00      	cmp	r3, #0
 800977e:	d001      	beq.n	8009784 <USER_SPI_write+0x44>
 8009780:	2302      	movs	r3, #2
 8009782:	e051      	b.n	8009828 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8009784:	4b2b      	ldr	r3, [pc, #172]	; (8009834 <USER_SPI_write+0xf4>)
 8009786:	781b      	ldrb	r3, [r3, #0]
 8009788:	f003 0308 	and.w	r3, r3, #8
 800978c:	2b00      	cmp	r3, #0
 800978e:	d102      	bne.n	8009796 <USER_SPI_write+0x56>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	025b      	lsls	r3, r3, #9
 8009794:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	2b01      	cmp	r3, #1
 800979a:	d110      	bne.n	80097be <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800979c:	6879      	ldr	r1, [r7, #4]
 800979e:	2018      	movs	r0, #24
 80097a0:	f7ff fdf7 	bl	8009392 <send_cmd>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d136      	bne.n	8009818 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80097aa:	21fe      	movs	r1, #254	; 0xfe
 80097ac:	68b8      	ldr	r0, [r7, #8]
 80097ae:	f7ff fdbe 	bl	800932e <xmit_datablock>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d02f      	beq.n	8009818 <USER_SPI_write+0xd8>
			count = 0;
 80097b8:	2300      	movs	r3, #0
 80097ba:	603b      	str	r3, [r7, #0]
 80097bc:	e02c      	b.n	8009818 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80097be:	4b1d      	ldr	r3, [pc, #116]	; (8009834 <USER_SPI_write+0xf4>)
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	f003 0306 	and.w	r3, r3, #6
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d003      	beq.n	80097d2 <USER_SPI_write+0x92>
 80097ca:	6839      	ldr	r1, [r7, #0]
 80097cc:	2097      	movs	r0, #151	; 0x97
 80097ce:	f7ff fde0 	bl	8009392 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80097d2:	6879      	ldr	r1, [r7, #4]
 80097d4:	2019      	movs	r0, #25
 80097d6:	f7ff fddc 	bl	8009392 <send_cmd>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d11b      	bne.n	8009818 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80097e0:	21fc      	movs	r1, #252	; 0xfc
 80097e2:	68b8      	ldr	r0, [r7, #8]
 80097e4:	f7ff fda3 	bl	800932e <xmit_datablock>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d00a      	beq.n	8009804 <USER_SPI_write+0xc4>
				buff += 512;
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80097f4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	3b01      	subs	r3, #1
 80097fa:	603b      	str	r3, [r7, #0]
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d1ee      	bne.n	80097e0 <USER_SPI_write+0xa0>
 8009802:	e000      	b.n	8009806 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8009804:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8009806:	21fd      	movs	r1, #253	; 0xfd
 8009808:	2000      	movs	r0, #0
 800980a:	f7ff fd90 	bl	800932e <xmit_datablock>
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d101      	bne.n	8009818 <USER_SPI_write+0xd8>
 8009814:	2301      	movs	r3, #1
 8009816:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8009818:	f7ff fd34 	bl	8009284 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	2b00      	cmp	r3, #0
 8009820:	bf14      	ite	ne
 8009822:	2301      	movne	r3, #1
 8009824:	2300      	moveq	r3, #0
 8009826:	b2db      	uxtb	r3, r3
}
 8009828:	4618      	mov	r0, r3
 800982a:	3710      	adds	r7, #16
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}
 8009830:	20000040 	.word	0x20000040
 8009834:	20000894 	.word	0x20000894

08009838 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b08c      	sub	sp, #48	; 0x30
 800983c:	af00      	add	r7, sp, #0
 800983e:	4603      	mov	r3, r0
 8009840:	603a      	str	r2, [r7, #0]
 8009842:	71fb      	strb	r3, [r7, #7]
 8009844:	460b      	mov	r3, r1
 8009846:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8009848:	79fb      	ldrb	r3, [r7, #7]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d001      	beq.n	8009852 <USER_SPI_ioctl+0x1a>
 800984e:	2304      	movs	r3, #4
 8009850:	e15a      	b.n	8009b08 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8009852:	4baf      	ldr	r3, [pc, #700]	; (8009b10 <USER_SPI_ioctl+0x2d8>)
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	b2db      	uxtb	r3, r3
 8009858:	f003 0301 	and.w	r3, r3, #1
 800985c:	2b00      	cmp	r3, #0
 800985e:	d001      	beq.n	8009864 <USER_SPI_ioctl+0x2c>
 8009860:	2303      	movs	r3, #3
 8009862:	e151      	b.n	8009b08 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8009864:	2301      	movs	r3, #1
 8009866:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800986a:	79bb      	ldrb	r3, [r7, #6]
 800986c:	2b04      	cmp	r3, #4
 800986e:	f200 8136 	bhi.w	8009ade <USER_SPI_ioctl+0x2a6>
 8009872:	a201      	add	r2, pc, #4	; (adr r2, 8009878 <USER_SPI_ioctl+0x40>)
 8009874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009878:	0800988d 	.word	0x0800988d
 800987c:	080098a1 	.word	0x080098a1
 8009880:	08009adf 	.word	0x08009adf
 8009884:	0800994d 	.word	0x0800994d
 8009888:	08009a43 	.word	0x08009a43
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800988c:	f7ff fd0a 	bl	80092a4 <spiselect>
 8009890:	4603      	mov	r3, r0
 8009892:	2b00      	cmp	r3, #0
 8009894:	f000 8127 	beq.w	8009ae6 <USER_SPI_ioctl+0x2ae>
 8009898:	2300      	movs	r3, #0
 800989a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800989e:	e122      	b.n	8009ae6 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80098a0:	2100      	movs	r1, #0
 80098a2:	2009      	movs	r0, #9
 80098a4:	f7ff fd75 	bl	8009392 <send_cmd>
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	f040 811d 	bne.w	8009aea <USER_SPI_ioctl+0x2b2>
 80098b0:	f107 030c 	add.w	r3, r7, #12
 80098b4:	2110      	movs	r1, #16
 80098b6:	4618      	mov	r0, r3
 80098b8:	f7ff fd10 	bl	80092dc <rcvr_datablock>
 80098bc:	4603      	mov	r3, r0
 80098be:	2b00      	cmp	r3, #0
 80098c0:	f000 8113 	beq.w	8009aea <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80098c4:	7b3b      	ldrb	r3, [r7, #12]
 80098c6:	099b      	lsrs	r3, r3, #6
 80098c8:	b2db      	uxtb	r3, r3
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d111      	bne.n	80098f2 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80098ce:	7d7b      	ldrb	r3, [r7, #21]
 80098d0:	461a      	mov	r2, r3
 80098d2:	7d3b      	ldrb	r3, [r7, #20]
 80098d4:	021b      	lsls	r3, r3, #8
 80098d6:	4413      	add	r3, r2
 80098d8:	461a      	mov	r2, r3
 80098da:	7cfb      	ldrb	r3, [r7, #19]
 80098dc:	041b      	lsls	r3, r3, #16
 80098de:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80098e2:	4413      	add	r3, r2
 80098e4:	3301      	adds	r3, #1
 80098e6:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80098e8:	69fb      	ldr	r3, [r7, #28]
 80098ea:	029a      	lsls	r2, r3, #10
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	601a      	str	r2, [r3, #0]
 80098f0:	e028      	b.n	8009944 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80098f2:	7c7b      	ldrb	r3, [r7, #17]
 80098f4:	f003 030f 	and.w	r3, r3, #15
 80098f8:	b2da      	uxtb	r2, r3
 80098fa:	7dbb      	ldrb	r3, [r7, #22]
 80098fc:	09db      	lsrs	r3, r3, #7
 80098fe:	b2db      	uxtb	r3, r3
 8009900:	4413      	add	r3, r2
 8009902:	b2da      	uxtb	r2, r3
 8009904:	7d7b      	ldrb	r3, [r7, #21]
 8009906:	005b      	lsls	r3, r3, #1
 8009908:	b2db      	uxtb	r3, r3
 800990a:	f003 0306 	and.w	r3, r3, #6
 800990e:	b2db      	uxtb	r3, r3
 8009910:	4413      	add	r3, r2
 8009912:	b2db      	uxtb	r3, r3
 8009914:	3302      	adds	r3, #2
 8009916:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800991a:	7d3b      	ldrb	r3, [r7, #20]
 800991c:	099b      	lsrs	r3, r3, #6
 800991e:	b2db      	uxtb	r3, r3
 8009920:	461a      	mov	r2, r3
 8009922:	7cfb      	ldrb	r3, [r7, #19]
 8009924:	009b      	lsls	r3, r3, #2
 8009926:	441a      	add	r2, r3
 8009928:	7cbb      	ldrb	r3, [r7, #18]
 800992a:	029b      	lsls	r3, r3, #10
 800992c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009930:	4413      	add	r3, r2
 8009932:	3301      	adds	r3, #1
 8009934:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8009936:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800993a:	3b09      	subs	r3, #9
 800993c:	69fa      	ldr	r2, [r7, #28]
 800993e:	409a      	lsls	r2, r3
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8009944:	2300      	movs	r3, #0
 8009946:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800994a:	e0ce      	b.n	8009aea <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800994c:	4b71      	ldr	r3, [pc, #452]	; (8009b14 <USER_SPI_ioctl+0x2dc>)
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	f003 0304 	and.w	r3, r3, #4
 8009954:	2b00      	cmp	r3, #0
 8009956:	d031      	beq.n	80099bc <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8009958:	2100      	movs	r1, #0
 800995a:	208d      	movs	r0, #141	; 0x8d
 800995c:	f7ff fd19 	bl	8009392 <send_cmd>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	f040 80c3 	bne.w	8009aee <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8009968:	20ff      	movs	r0, #255	; 0xff
 800996a:	f7ff fc21 	bl	80091b0 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800996e:	f107 030c 	add.w	r3, r7, #12
 8009972:	2110      	movs	r1, #16
 8009974:	4618      	mov	r0, r3
 8009976:	f7ff fcb1 	bl	80092dc <rcvr_datablock>
 800997a:	4603      	mov	r3, r0
 800997c:	2b00      	cmp	r3, #0
 800997e:	f000 80b6 	beq.w	8009aee <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8009982:	2330      	movs	r3, #48	; 0x30
 8009984:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009988:	e007      	b.n	800999a <USER_SPI_ioctl+0x162>
 800998a:	20ff      	movs	r0, #255	; 0xff
 800998c:	f7ff fc10 	bl	80091b0 <xchg_spi>
 8009990:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009994:	3b01      	subs	r3, #1
 8009996:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800999a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d1f3      	bne.n	800998a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80099a2:	7dbb      	ldrb	r3, [r7, #22]
 80099a4:	091b      	lsrs	r3, r3, #4
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	461a      	mov	r2, r3
 80099aa:	2310      	movs	r3, #16
 80099ac:	fa03 f202 	lsl.w	r2, r3, r2
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80099b4:	2300      	movs	r3, #0
 80099b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80099ba:	e098      	b.n	8009aee <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80099bc:	2100      	movs	r1, #0
 80099be:	2009      	movs	r0, #9
 80099c0:	f7ff fce7 	bl	8009392 <send_cmd>
 80099c4:	4603      	mov	r3, r0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	f040 8091 	bne.w	8009aee <USER_SPI_ioctl+0x2b6>
 80099cc:	f107 030c 	add.w	r3, r7, #12
 80099d0:	2110      	movs	r1, #16
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7ff fc82 	bl	80092dc <rcvr_datablock>
 80099d8:	4603      	mov	r3, r0
 80099da:	2b00      	cmp	r3, #0
 80099dc:	f000 8087 	beq.w	8009aee <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80099e0:	4b4c      	ldr	r3, [pc, #304]	; (8009b14 <USER_SPI_ioctl+0x2dc>)
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	f003 0302 	and.w	r3, r3, #2
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d012      	beq.n	8009a12 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80099ec:	7dbb      	ldrb	r3, [r7, #22]
 80099ee:	005b      	lsls	r3, r3, #1
 80099f0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80099f4:	7dfa      	ldrb	r2, [r7, #23]
 80099f6:	09d2      	lsrs	r2, r2, #7
 80099f8:	b2d2      	uxtb	r2, r2
 80099fa:	4413      	add	r3, r2
 80099fc:	1c5a      	adds	r2, r3, #1
 80099fe:	7e7b      	ldrb	r3, [r7, #25]
 8009a00:	099b      	lsrs	r3, r3, #6
 8009a02:	b2db      	uxtb	r3, r3
 8009a04:	3b01      	subs	r3, #1
 8009a06:	fa02 f303 	lsl.w	r3, r2, r3
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	601a      	str	r2, [r3, #0]
 8009a10:	e013      	b.n	8009a3a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8009a12:	7dbb      	ldrb	r3, [r7, #22]
 8009a14:	109b      	asrs	r3, r3, #2
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	f003 031f 	and.w	r3, r3, #31
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	7dfa      	ldrb	r2, [r7, #23]
 8009a20:	00d2      	lsls	r2, r2, #3
 8009a22:	f002 0218 	and.w	r2, r2, #24
 8009a26:	7df9      	ldrb	r1, [r7, #23]
 8009a28:	0949      	lsrs	r1, r1, #5
 8009a2a:	b2c9      	uxtb	r1, r1
 8009a2c:	440a      	add	r2, r1
 8009a2e:	3201      	adds	r2, #1
 8009a30:	fb02 f303 	mul.w	r3, r2, r3
 8009a34:	461a      	mov	r2, r3
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8009a40:	e055      	b.n	8009aee <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009a42:	4b34      	ldr	r3, [pc, #208]	; (8009b14 <USER_SPI_ioctl+0x2dc>)
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	f003 0306 	and.w	r3, r3, #6
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d051      	beq.n	8009af2 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009a4e:	f107 020c 	add.w	r2, r7, #12
 8009a52:	79fb      	ldrb	r3, [r7, #7]
 8009a54:	210b      	movs	r1, #11
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7ff feee 	bl	8009838 <USER_SPI_ioctl>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d149      	bne.n	8009af6 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009a62:	7b3b      	ldrb	r3, [r7, #12]
 8009a64:	099b      	lsrs	r3, r3, #6
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d104      	bne.n	8009a76 <USER_SPI_ioctl+0x23e>
 8009a6c:	7dbb      	ldrb	r3, [r7, #22]
 8009a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d041      	beq.n	8009afa <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	623b      	str	r3, [r7, #32]
 8009a7a:	6a3b      	ldr	r3, [r7, #32]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a80:	6a3b      	ldr	r3, [r7, #32]
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8009a86:	4b23      	ldr	r3, [pc, #140]	; (8009b14 <USER_SPI_ioctl+0x2dc>)
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	f003 0308 	and.w	r3, r3, #8
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d105      	bne.n	8009a9e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8009a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a94:	025b      	lsls	r3, r3, #9
 8009a96:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9a:	025b      	lsls	r3, r3, #9
 8009a9c:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8009a9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009aa0:	2020      	movs	r0, #32
 8009aa2:	f7ff fc76 	bl	8009392 <send_cmd>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d128      	bne.n	8009afe <USER_SPI_ioctl+0x2c6>
 8009aac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009aae:	2021      	movs	r0, #33	; 0x21
 8009ab0:	f7ff fc6f 	bl	8009392 <send_cmd>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d121      	bne.n	8009afe <USER_SPI_ioctl+0x2c6>
 8009aba:	2100      	movs	r1, #0
 8009abc:	2026      	movs	r0, #38	; 0x26
 8009abe:	f7ff fc68 	bl	8009392 <send_cmd>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d11a      	bne.n	8009afe <USER_SPI_ioctl+0x2c6>
 8009ac8:	f247 5030 	movw	r0, #30000	; 0x7530
 8009acc:	f7ff fbb6 	bl	800923c <wait_ready>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d013      	beq.n	8009afe <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8009adc:	e00f      	b.n	8009afe <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8009ade:	2304      	movs	r3, #4
 8009ae0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009ae4:	e00c      	b.n	8009b00 <USER_SPI_ioctl+0x2c8>
		break;
 8009ae6:	bf00      	nop
 8009ae8:	e00a      	b.n	8009b00 <USER_SPI_ioctl+0x2c8>
		break;
 8009aea:	bf00      	nop
 8009aec:	e008      	b.n	8009b00 <USER_SPI_ioctl+0x2c8>
		break;
 8009aee:	bf00      	nop
 8009af0:	e006      	b.n	8009b00 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009af2:	bf00      	nop
 8009af4:	e004      	b.n	8009b00 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009af6:	bf00      	nop
 8009af8:	e002      	b.n	8009b00 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009afa:	bf00      	nop
 8009afc:	e000      	b.n	8009b00 <USER_SPI_ioctl+0x2c8>
		break;
 8009afe:	bf00      	nop
	}

	despiselect();
 8009b00:	f7ff fbc0 	bl	8009284 <despiselect>

	return res;
 8009b04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3730      	adds	r7, #48	; 0x30
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	20000040 	.word	0x20000040
 8009b14:	20000894 	.word	0x20000894

08009b18 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	460b      	mov	r3, r1
 8009b22:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8009b24:	2010      	movs	r0, #16
 8009b26:	f004 fc9f 	bl	800e468 <USBD_static_malloc>
 8009b2a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d109      	bne.n	8009b46 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	32b0      	adds	r2, #176	; 0xb0
 8009b3c:	2100      	movs	r1, #0
 8009b3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009b42:	2302      	movs	r3, #2
 8009b44:	e048      	b.n	8009bd8 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	32b0      	adds	r2, #176	; 0xb0
 8009b50:	68f9      	ldr	r1, [r7, #12]
 8009b52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	32b0      	adds	r2, #176	; 0xb0
 8009b60:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	7c1b      	ldrb	r3, [r3, #16]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d10d      	bne.n	8009b8e <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8009b72:	4b1b      	ldr	r3, [pc, #108]	; (8009be0 <USBD_HID_Init+0xc8>)
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	f003 020f 	and.w	r2, r3, #15
 8009b7a:	6879      	ldr	r1, [r7, #4]
 8009b7c:	4613      	mov	r3, r2
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	4413      	add	r3, r2
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	440b      	add	r3, r1
 8009b86:	3326      	adds	r3, #38	; 0x26
 8009b88:	2207      	movs	r2, #7
 8009b8a:	801a      	strh	r2, [r3, #0]
 8009b8c:	e00c      	b.n	8009ba8 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8009b8e:	4b14      	ldr	r3, [pc, #80]	; (8009be0 <USBD_HID_Init+0xc8>)
 8009b90:	781b      	ldrb	r3, [r3, #0]
 8009b92:	f003 020f 	and.w	r2, r3, #15
 8009b96:	6879      	ldr	r1, [r7, #4]
 8009b98:	4613      	mov	r3, r2
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	4413      	add	r3, r2
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	440b      	add	r3, r1
 8009ba2:	3326      	adds	r3, #38	; 0x26
 8009ba4:	220a      	movs	r2, #10
 8009ba6:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8009ba8:	4b0d      	ldr	r3, [pc, #52]	; (8009be0 <USBD_HID_Init+0xc8>)
 8009baa:	7819      	ldrb	r1, [r3, #0]
 8009bac:	2304      	movs	r3, #4
 8009bae:	2203      	movs	r2, #3
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f004 fb48 	bl	800e246 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8009bb6:	4b0a      	ldr	r3, [pc, #40]	; (8009be0 <USBD_HID_Init+0xc8>)
 8009bb8:	781b      	ldrb	r3, [r3, #0]
 8009bba:	f003 020f 	and.w	r2, r3, #15
 8009bbe:	6879      	ldr	r1, [r7, #4]
 8009bc0:	4613      	mov	r3, r2
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	4413      	add	r3, r2
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	440b      	add	r3, r1
 8009bca:	3324      	adds	r3, #36	; 0x24
 8009bcc:	2201      	movs	r2, #1
 8009bce:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8009bd6:	2300      	movs	r3, #0
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3710      	adds	r7, #16
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	200000d8 	.word	0x200000d8

08009be4 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	460b      	mov	r3, r1
 8009bee:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8009bf0:	4b1f      	ldr	r3, [pc, #124]	; (8009c70 <USBD_HID_DeInit+0x8c>)
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f004 fb4b 	bl	800e292 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8009bfc:	4b1c      	ldr	r3, [pc, #112]	; (8009c70 <USBD_HID_DeInit+0x8c>)
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	f003 020f 	and.w	r2, r3, #15
 8009c04:	6879      	ldr	r1, [r7, #4]
 8009c06:	4613      	mov	r3, r2
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	4413      	add	r3, r2
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	440b      	add	r3, r1
 8009c10:	3324      	adds	r3, #36	; 0x24
 8009c12:	2200      	movs	r2, #0
 8009c14:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8009c16:	4b16      	ldr	r3, [pc, #88]	; (8009c70 <USBD_HID_DeInit+0x8c>)
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	f003 020f 	and.w	r2, r3, #15
 8009c1e:	6879      	ldr	r1, [r7, #4]
 8009c20:	4613      	mov	r3, r2
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	4413      	add	r3, r2
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	440b      	add	r3, r1
 8009c2a:	3326      	adds	r3, #38	; 0x26
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	32b0      	adds	r2, #176	; 0xb0
 8009c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d011      	beq.n	8009c66 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	32b0      	adds	r2, #176	; 0xb0
 8009c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c50:	4618      	mov	r0, r3
 8009c52:	f004 fc17 	bl	800e484 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	32b0      	adds	r2, #176	; 0xb0
 8009c60:	2100      	movs	r1, #0
 8009c62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8009c66:	2300      	movs	r3, #0
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3708      	adds	r7, #8
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}
 8009c70:	200000d8 	.word	0x200000d8

08009c74 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b086      	sub	sp, #24
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	32b0      	adds	r2, #176	; 0xb0
 8009c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c8c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8009c92:	2300      	movs	r3, #0
 8009c94:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d101      	bne.n	8009ca0 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8009c9c:	2303      	movs	r3, #3
 8009c9e:	e0e8      	b.n	8009e72 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d046      	beq.n	8009d3a <USBD_HID_Setup+0xc6>
 8009cac:	2b20      	cmp	r3, #32
 8009cae:	f040 80d8 	bne.w	8009e62 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	785b      	ldrb	r3, [r3, #1]
 8009cb6:	3b02      	subs	r3, #2
 8009cb8:	2b09      	cmp	r3, #9
 8009cba:	d836      	bhi.n	8009d2a <USBD_HID_Setup+0xb6>
 8009cbc:	a201      	add	r2, pc, #4	; (adr r2, 8009cc4 <USBD_HID_Setup+0x50>)
 8009cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cc2:	bf00      	nop
 8009cc4:	08009d1b 	.word	0x08009d1b
 8009cc8:	08009cfb 	.word	0x08009cfb
 8009ccc:	08009d2b 	.word	0x08009d2b
 8009cd0:	08009d2b 	.word	0x08009d2b
 8009cd4:	08009d2b 	.word	0x08009d2b
 8009cd8:	08009d2b 	.word	0x08009d2b
 8009cdc:	08009d2b 	.word	0x08009d2b
 8009ce0:	08009d2b 	.word	0x08009d2b
 8009ce4:	08009d09 	.word	0x08009d09
 8009ce8:	08009ced 	.word	0x08009ced
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	885b      	ldrh	r3, [r3, #2]
 8009cf0:	b2db      	uxtb	r3, r3
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	601a      	str	r2, [r3, #0]
          break;
 8009cf8:	e01e      	b.n	8009d38 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	4619      	mov	r1, r3
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f001 fbd5 	bl	800b4b0 <USBD_CtlSendData>
          break;
 8009d06:	e017      	b.n	8009d38 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	885b      	ldrh	r3, [r3, #2]
 8009d0c:	0a1b      	lsrs	r3, r3, #8
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	b2db      	uxtb	r3, r3
 8009d12:	461a      	mov	r2, r3
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	605a      	str	r2, [r3, #4]
          break;
 8009d18:	e00e      	b.n	8009d38 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	3304      	adds	r3, #4
 8009d1e:	2201      	movs	r2, #1
 8009d20:	4619      	mov	r1, r3
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f001 fbc4 	bl	800b4b0 <USBD_CtlSendData>
          break;
 8009d28:	e006      	b.n	8009d38 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009d2a:	6839      	ldr	r1, [r7, #0]
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f001 fb4e 	bl	800b3ce <USBD_CtlError>
          ret = USBD_FAIL;
 8009d32:	2303      	movs	r3, #3
 8009d34:	75fb      	strb	r3, [r7, #23]
          break;
 8009d36:	bf00      	nop
      }
      break;
 8009d38:	e09a      	b.n	8009e70 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	785b      	ldrb	r3, [r3, #1]
 8009d3e:	2b0b      	cmp	r3, #11
 8009d40:	f200 8086 	bhi.w	8009e50 <USBD_HID_Setup+0x1dc>
 8009d44:	a201      	add	r2, pc, #4	; (adr r2, 8009d4c <USBD_HID_Setup+0xd8>)
 8009d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d4a:	bf00      	nop
 8009d4c:	08009d7d 	.word	0x08009d7d
 8009d50:	08009e5f 	.word	0x08009e5f
 8009d54:	08009e51 	.word	0x08009e51
 8009d58:	08009e51 	.word	0x08009e51
 8009d5c:	08009e51 	.word	0x08009e51
 8009d60:	08009e51 	.word	0x08009e51
 8009d64:	08009da7 	.word	0x08009da7
 8009d68:	08009e51 	.word	0x08009e51
 8009d6c:	08009e51 	.word	0x08009e51
 8009d70:	08009e51 	.word	0x08009e51
 8009d74:	08009dff 	.word	0x08009dff
 8009d78:	08009e29 	.word	0x08009e29
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	2b03      	cmp	r3, #3
 8009d86:	d107      	bne.n	8009d98 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009d88:	f107 030a 	add.w	r3, r7, #10
 8009d8c:	2202      	movs	r2, #2
 8009d8e:	4619      	mov	r1, r3
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f001 fb8d 	bl	800b4b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009d96:	e063      	b.n	8009e60 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8009d98:	6839      	ldr	r1, [r7, #0]
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f001 fb17 	bl	800b3ce <USBD_CtlError>
            ret = USBD_FAIL;
 8009da0:	2303      	movs	r3, #3
 8009da2:	75fb      	strb	r3, [r7, #23]
          break;
 8009da4:	e05c      	b.n	8009e60 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	885b      	ldrh	r3, [r3, #2]
 8009daa:	0a1b      	lsrs	r3, r3, #8
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	2b22      	cmp	r3, #34	; 0x22
 8009db0:	d108      	bne.n	8009dc4 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	88db      	ldrh	r3, [r3, #6]
 8009db6:	2b20      	cmp	r3, #32
 8009db8:	bf28      	it	cs
 8009dba:	2320      	movcs	r3, #32
 8009dbc:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8009dbe:	4b2f      	ldr	r3, [pc, #188]	; (8009e7c <USBD_HID_Setup+0x208>)
 8009dc0:	613b      	str	r3, [r7, #16]
 8009dc2:	e015      	b.n	8009df0 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	885b      	ldrh	r3, [r3, #2]
 8009dc8:	0a1b      	lsrs	r3, r3, #8
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	2b21      	cmp	r3, #33	; 0x21
 8009dce:	d108      	bne.n	8009de2 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8009dd0:	4b2b      	ldr	r3, [pc, #172]	; (8009e80 <USBD_HID_Setup+0x20c>)
 8009dd2:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	88db      	ldrh	r3, [r3, #6]
 8009dd8:	2b09      	cmp	r3, #9
 8009dda:	bf28      	it	cs
 8009ddc:	2309      	movcs	r3, #9
 8009dde:	82bb      	strh	r3, [r7, #20]
 8009de0:	e006      	b.n	8009df0 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8009de2:	6839      	ldr	r1, [r7, #0]
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f001 faf2 	bl	800b3ce <USBD_CtlError>
            ret = USBD_FAIL;
 8009dea:	2303      	movs	r3, #3
 8009dec:	75fb      	strb	r3, [r7, #23]
            break;
 8009dee:	e037      	b.n	8009e60 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8009df0:	8abb      	ldrh	r3, [r7, #20]
 8009df2:	461a      	mov	r2, r3
 8009df4:	6939      	ldr	r1, [r7, #16]
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f001 fb5a 	bl	800b4b0 <USBD_CtlSendData>
          break;
 8009dfc:	e030      	b.n	8009e60 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	2b03      	cmp	r3, #3
 8009e08:	d107      	bne.n	8009e1a <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	3308      	adds	r3, #8
 8009e0e:	2201      	movs	r2, #1
 8009e10:	4619      	mov	r1, r3
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f001 fb4c 	bl	800b4b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e18:	e022      	b.n	8009e60 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8009e1a:	6839      	ldr	r1, [r7, #0]
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f001 fad6 	bl	800b3ce <USBD_CtlError>
            ret = USBD_FAIL;
 8009e22:	2303      	movs	r3, #3
 8009e24:	75fb      	strb	r3, [r7, #23]
          break;
 8009e26:	e01b      	b.n	8009e60 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	2b03      	cmp	r3, #3
 8009e32:	d106      	bne.n	8009e42 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	885b      	ldrh	r3, [r3, #2]
 8009e38:	b2db      	uxtb	r3, r3
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e40:	e00e      	b.n	8009e60 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8009e42:	6839      	ldr	r1, [r7, #0]
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f001 fac2 	bl	800b3ce <USBD_CtlError>
            ret = USBD_FAIL;
 8009e4a:	2303      	movs	r3, #3
 8009e4c:	75fb      	strb	r3, [r7, #23]
          break;
 8009e4e:	e007      	b.n	8009e60 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009e50:	6839      	ldr	r1, [r7, #0]
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f001 fabb 	bl	800b3ce <USBD_CtlError>
          ret = USBD_FAIL;
 8009e58:	2303      	movs	r3, #3
 8009e5a:	75fb      	strb	r3, [r7, #23]
          break;
 8009e5c:	e000      	b.n	8009e60 <USBD_HID_Setup+0x1ec>
          break;
 8009e5e:	bf00      	nop
      }
      break;
 8009e60:	e006      	b.n	8009e70 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8009e62:	6839      	ldr	r1, [r7, #0]
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f001 fab2 	bl	800b3ce <USBD_CtlError>
      ret = USBD_FAIL;
 8009e6a:	2303      	movs	r3, #3
 8009e6c:	75fb      	strb	r3, [r7, #23]
      break;
 8009e6e:	bf00      	nop
  }

  return (uint8_t)ret;
 8009e70:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3718      	adds	r7, #24
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	200000b8 	.word	0x200000b8
 8009e80:	200000a0 	.word	0x200000a0

08009e84 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b086      	sub	sp, #24
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	60b9      	str	r1, [r7, #8]
 8009e8e:	4613      	mov	r3, r2
 8009e90:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	32b0      	adds	r2, #176	; 0xb0
 8009e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ea0:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d101      	bne.n	8009eac <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009ea8:	2303      	movs	r3, #3
 8009eaa:	e014      	b.n	8009ed6 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eb2:	b2db      	uxtb	r3, r3
 8009eb4:	2b03      	cmp	r3, #3
 8009eb6:	d10d      	bne.n	8009ed4 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	7b1b      	ldrb	r3, [r3, #12]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d109      	bne.n	8009ed4 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8009ec6:	4b06      	ldr	r3, [pc, #24]	; (8009ee0 <USBD_HID_SendReport+0x5c>)
 8009ec8:	7819      	ldrb	r1, [r3, #0]
 8009eca:	88fb      	ldrh	r3, [r7, #6]
 8009ecc:	68ba      	ldr	r2, [r7, #8]
 8009ece:	68f8      	ldr	r0, [r7, #12]
 8009ed0:	f004 fa87 	bl	800e3e2 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8009ed4:	2300      	movs	r3, #0
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3718      	adds	r7, #24
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
 8009ede:	bf00      	nop
 8009ee0:	200000d8 	.word	0x200000d8

08009ee4 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8009eec:	2181      	movs	r1, #129	; 0x81
 8009eee:	4809      	ldr	r0, [pc, #36]	; (8009f14 <USBD_HID_GetFSCfgDesc+0x30>)
 8009ef0:	f000 fc35 	bl	800a75e <USBD_GetEpDesc>
 8009ef4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d002      	beq.n	8009f02 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	220a      	movs	r2, #10
 8009f00:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2222      	movs	r2, #34	; 0x22
 8009f06:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8009f08:	4b02      	ldr	r3, [pc, #8]	; (8009f14 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3710      	adds	r7, #16
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop
 8009f14:	2000007c 	.word	0x2000007c

08009f18 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8009f20:	2181      	movs	r1, #129	; 0x81
 8009f22:	4809      	ldr	r0, [pc, #36]	; (8009f48 <USBD_HID_GetHSCfgDesc+0x30>)
 8009f24:	f000 fc1b 	bl	800a75e <USBD_GetEpDesc>
 8009f28:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d002      	beq.n	8009f36 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2207      	movs	r2, #7
 8009f34:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2222      	movs	r2, #34	; 0x22
 8009f3a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8009f3c:	4b02      	ldr	r3, [pc, #8]	; (8009f48 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3710      	adds	r7, #16
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	2000007c 	.word	0x2000007c

08009f4c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b084      	sub	sp, #16
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8009f54:	2181      	movs	r1, #129	; 0x81
 8009f56:	4809      	ldr	r0, [pc, #36]	; (8009f7c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8009f58:	f000 fc01 	bl	800a75e <USBD_GetEpDesc>
 8009f5c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d002      	beq.n	8009f6a <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	220a      	movs	r2, #10
 8009f68:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2222      	movs	r2, #34	; 0x22
 8009f6e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8009f70:	4b02      	ldr	r3, [pc, #8]	; (8009f7c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3710      	adds	r7, #16
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	2000007c 	.word	0x2000007c

08009f80 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	460b      	mov	r3, r1
 8009f8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	32b0      	adds	r2, #176	; 0xb0
 8009f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8009f9e:	2300      	movs	r3, #0
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	370c      	adds	r7, #12
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr

08009fac <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	220a      	movs	r2, #10
 8009fb8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8009fba:	4b03      	ldr	r3, [pc, #12]	; (8009fc8 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	370c      	adds	r7, #12
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr
 8009fc8:	200000ac 	.word	0x200000ac

08009fcc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b086      	sub	sp, #24
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	4613      	mov	r3, r2
 8009fd8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d101      	bne.n	8009fe4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009fe0:	2303      	movs	r3, #3
 8009fe2:	e01f      	b.n	800a024 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d003      	beq.n	800a00a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	68ba      	ldr	r2, [r7, #8]
 800a006:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2201      	movs	r2, #1
 800a00e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	79fa      	ldrb	r2, [r7, #7]
 800a016:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a018:	68f8      	ldr	r0, [r7, #12]
 800a01a:	f004 f8ad 	bl	800e178 <USBD_LL_Init>
 800a01e:	4603      	mov	r3, r0
 800a020:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a022:	7dfb      	ldrb	r3, [r7, #23]
}
 800a024:	4618      	mov	r0, r3
 800a026:	3718      	adds	r7, #24
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a036:	2300      	movs	r3, #0
 800a038:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d101      	bne.n	800a044 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a040:	2303      	movs	r3, #3
 800a042:	e025      	b.n	800a090 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	683a      	ldr	r2, [r7, #0]
 800a048:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	32ae      	adds	r2, #174	; 0xae
 800a056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d00f      	beq.n	800a080 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	32ae      	adds	r2, #174	; 0xae
 800a06a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a070:	f107 020e 	add.w	r2, r7, #14
 800a074:	4610      	mov	r0, r2
 800a076:	4798      	blx	r3
 800a078:	4602      	mov	r2, r0
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a086:	1c5a      	adds	r2, r3, #1
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a08e:	2300      	movs	r3, #0
}
 800a090:	4618      	mov	r0, r3
 800a092:	3710      	adds	r7, #16
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f004 f8b5 	bl	800e210 <USBD_LL_Start>
 800a0a6:	4603      	mov	r3, r0
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3708      	adds	r7, #8
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b083      	sub	sp, #12
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a0b8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	370c      	adds	r7, #12
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c4:	4770      	bx	lr

0800a0c6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0c6:	b580      	push	{r7, lr}
 800a0c8:	b084      	sub	sp, #16
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	6078      	str	r0, [r7, #4]
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d009      	beq.n	800a0f4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	78fa      	ldrb	r2, [r7, #3]
 800a0ea:	4611      	mov	r1, r2
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	4798      	blx	r3
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a0f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3710      	adds	r7, #16
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}

0800a0fe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0fe:	b580      	push	{r7, lr}
 800a100:	b084      	sub	sp, #16
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
 800a106:	460b      	mov	r3, r1
 800a108:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a10a:	2300      	movs	r3, #0
 800a10c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	78fa      	ldrb	r2, [r7, #3]
 800a118:	4611      	mov	r1, r2
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	4798      	blx	r3
 800a11e:	4603      	mov	r3, r0
 800a120:	2b00      	cmp	r3, #0
 800a122:	d001      	beq.n	800a128 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a124:	2303      	movs	r3, #3
 800a126:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a128:	7bfb      	ldrb	r3, [r7, #15]
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3710      	adds	r7, #16
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a132:	b580      	push	{r7, lr}
 800a134:	b084      	sub	sp, #16
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
 800a13a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a142:	6839      	ldr	r1, [r7, #0]
 800a144:	4618      	mov	r0, r3
 800a146:	f001 f908 	bl	800b35a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2201      	movs	r2, #1
 800a14e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a158:	461a      	mov	r2, r3
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a166:	f003 031f 	and.w	r3, r3, #31
 800a16a:	2b02      	cmp	r3, #2
 800a16c:	d01a      	beq.n	800a1a4 <USBD_LL_SetupStage+0x72>
 800a16e:	2b02      	cmp	r3, #2
 800a170:	d822      	bhi.n	800a1b8 <USBD_LL_SetupStage+0x86>
 800a172:	2b00      	cmp	r3, #0
 800a174:	d002      	beq.n	800a17c <USBD_LL_SetupStage+0x4a>
 800a176:	2b01      	cmp	r3, #1
 800a178:	d00a      	beq.n	800a190 <USBD_LL_SetupStage+0x5e>
 800a17a:	e01d      	b.n	800a1b8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a182:	4619      	mov	r1, r3
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 fb5f 	bl	800a848 <USBD_StdDevReq>
 800a18a:	4603      	mov	r3, r0
 800a18c:	73fb      	strb	r3, [r7, #15]
      break;
 800a18e:	e020      	b.n	800a1d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a196:	4619      	mov	r1, r3
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 fbc7 	bl	800a92c <USBD_StdItfReq>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	73fb      	strb	r3, [r7, #15]
      break;
 800a1a2:	e016      	b.n	800a1d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f000 fc29 	bl	800aa04 <USBD_StdEPReq>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	73fb      	strb	r3, [r7, #15]
      break;
 800a1b6:	e00c      	b.n	800a1d2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a1be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f004 f882 	bl	800e2d0 <USBD_LL_StallEP>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	73fb      	strb	r3, [r7, #15]
      break;
 800a1d0:	bf00      	nop
  }

  return ret;
 800a1d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3710      	adds	r7, #16
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b086      	sub	sp, #24
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	60f8      	str	r0, [r7, #12]
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	607a      	str	r2, [r7, #4]
 800a1e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a1ee:	7afb      	ldrb	r3, [r7, #11]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d16e      	bne.n	800a2d2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a1fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a202:	2b03      	cmp	r3, #3
 800a204:	f040 8098 	bne.w	800a338 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	689a      	ldr	r2, [r3, #8]
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	68db      	ldr	r3, [r3, #12]
 800a210:	429a      	cmp	r2, r3
 800a212:	d913      	bls.n	800a23c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	689a      	ldr	r2, [r3, #8]
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	68db      	ldr	r3, [r3, #12]
 800a21c:	1ad2      	subs	r2, r2, r3
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	68da      	ldr	r2, [r3, #12]
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	689b      	ldr	r3, [r3, #8]
 800a22a:	4293      	cmp	r3, r2
 800a22c:	bf28      	it	cs
 800a22e:	4613      	movcs	r3, r2
 800a230:	461a      	mov	r2, r3
 800a232:	6879      	ldr	r1, [r7, #4]
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f001 f967 	bl	800b508 <USBD_CtlContinueRx>
 800a23a:	e07d      	b.n	800a338 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a242:	f003 031f 	and.w	r3, r3, #31
 800a246:	2b02      	cmp	r3, #2
 800a248:	d014      	beq.n	800a274 <USBD_LL_DataOutStage+0x98>
 800a24a:	2b02      	cmp	r3, #2
 800a24c:	d81d      	bhi.n	800a28a <USBD_LL_DataOutStage+0xae>
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d002      	beq.n	800a258 <USBD_LL_DataOutStage+0x7c>
 800a252:	2b01      	cmp	r3, #1
 800a254:	d003      	beq.n	800a25e <USBD_LL_DataOutStage+0x82>
 800a256:	e018      	b.n	800a28a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a258:	2300      	movs	r3, #0
 800a25a:	75bb      	strb	r3, [r7, #22]
            break;
 800a25c:	e018      	b.n	800a290 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a264:	b2db      	uxtb	r3, r3
 800a266:	4619      	mov	r1, r3
 800a268:	68f8      	ldr	r0, [r7, #12]
 800a26a:	f000 fa5e 	bl	800a72a <USBD_CoreFindIF>
 800a26e:	4603      	mov	r3, r0
 800a270:	75bb      	strb	r3, [r7, #22]
            break;
 800a272:	e00d      	b.n	800a290 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a27a:	b2db      	uxtb	r3, r3
 800a27c:	4619      	mov	r1, r3
 800a27e:	68f8      	ldr	r0, [r7, #12]
 800a280:	f000 fa60 	bl	800a744 <USBD_CoreFindEP>
 800a284:	4603      	mov	r3, r0
 800a286:	75bb      	strb	r3, [r7, #22]
            break;
 800a288:	e002      	b.n	800a290 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a28a:	2300      	movs	r3, #0
 800a28c:	75bb      	strb	r3, [r7, #22]
            break;
 800a28e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a290:	7dbb      	ldrb	r3, [r7, #22]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d119      	bne.n	800a2ca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	2b03      	cmp	r3, #3
 800a2a0:	d113      	bne.n	800a2ca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a2a2:	7dba      	ldrb	r2, [r7, #22]
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	32ae      	adds	r2, #174	; 0xae
 800a2a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2ac:	691b      	ldr	r3, [r3, #16]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d00b      	beq.n	800a2ca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a2b2:	7dba      	ldrb	r2, [r7, #22]
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a2ba:	7dba      	ldrb	r2, [r7, #22]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	32ae      	adds	r2, #174	; 0xae
 800a2c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2c4:	691b      	ldr	r3, [r3, #16]
 800a2c6:	68f8      	ldr	r0, [r7, #12]
 800a2c8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a2ca:	68f8      	ldr	r0, [r7, #12]
 800a2cc:	f001 f92d 	bl	800b52a <USBD_CtlSendStatus>
 800a2d0:	e032      	b.n	800a338 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a2d2:	7afb      	ldrb	r3, [r7, #11]
 800a2d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2d8:	b2db      	uxtb	r3, r3
 800a2da:	4619      	mov	r1, r3
 800a2dc:	68f8      	ldr	r0, [r7, #12]
 800a2de:	f000 fa31 	bl	800a744 <USBD_CoreFindEP>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a2e6:	7dbb      	ldrb	r3, [r7, #22]
 800a2e8:	2bff      	cmp	r3, #255	; 0xff
 800a2ea:	d025      	beq.n	800a338 <USBD_LL_DataOutStage+0x15c>
 800a2ec:	7dbb      	ldrb	r3, [r7, #22]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d122      	bne.n	800a338 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	2b03      	cmp	r3, #3
 800a2fc:	d117      	bne.n	800a32e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a2fe:	7dba      	ldrb	r2, [r7, #22]
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	32ae      	adds	r2, #174	; 0xae
 800a304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a308:	699b      	ldr	r3, [r3, #24]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d00f      	beq.n	800a32e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a30e:	7dba      	ldrb	r2, [r7, #22]
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a316:	7dba      	ldrb	r2, [r7, #22]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	32ae      	adds	r2, #174	; 0xae
 800a31c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a320:	699b      	ldr	r3, [r3, #24]
 800a322:	7afa      	ldrb	r2, [r7, #11]
 800a324:	4611      	mov	r1, r2
 800a326:	68f8      	ldr	r0, [r7, #12]
 800a328:	4798      	blx	r3
 800a32a:	4603      	mov	r3, r0
 800a32c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a32e:	7dfb      	ldrb	r3, [r7, #23]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d001      	beq.n	800a338 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a334:	7dfb      	ldrb	r3, [r7, #23]
 800a336:	e000      	b.n	800a33a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a338:	2300      	movs	r3, #0
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3718      	adds	r7, #24
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}

0800a342 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a342:	b580      	push	{r7, lr}
 800a344:	b086      	sub	sp, #24
 800a346:	af00      	add	r7, sp, #0
 800a348:	60f8      	str	r0, [r7, #12]
 800a34a:	460b      	mov	r3, r1
 800a34c:	607a      	str	r2, [r7, #4]
 800a34e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a350:	7afb      	ldrb	r3, [r7, #11]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d16f      	bne.n	800a436 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	3314      	adds	r3, #20
 800a35a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a362:	2b02      	cmp	r3, #2
 800a364:	d15a      	bne.n	800a41c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	689a      	ldr	r2, [r3, #8]
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	68db      	ldr	r3, [r3, #12]
 800a36e:	429a      	cmp	r2, r3
 800a370:	d914      	bls.n	800a39c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	689a      	ldr	r2, [r3, #8]
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	68db      	ldr	r3, [r3, #12]
 800a37a:	1ad2      	subs	r2, r2, r3
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	461a      	mov	r2, r3
 800a386:	6879      	ldr	r1, [r7, #4]
 800a388:	68f8      	ldr	r0, [r7, #12]
 800a38a:	f001 f8ac 	bl	800b4e6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a38e:	2300      	movs	r3, #0
 800a390:	2200      	movs	r2, #0
 800a392:	2100      	movs	r1, #0
 800a394:	68f8      	ldr	r0, [r7, #12]
 800a396:	f004 f845 	bl	800e424 <USBD_LL_PrepareReceive>
 800a39a:	e03f      	b.n	800a41c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	68da      	ldr	r2, [r3, #12]
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	689b      	ldr	r3, [r3, #8]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d11c      	bne.n	800a3e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	685a      	ldr	r2, [r3, #4]
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d316      	bcc.n	800a3e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	685a      	ldr	r2, [r3, #4]
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d20f      	bcs.n	800a3e2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	2100      	movs	r1, #0
 800a3c6:	68f8      	ldr	r0, [r7, #12]
 800a3c8:	f001 f88d 	bl	800b4e6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	2100      	movs	r1, #0
 800a3da:	68f8      	ldr	r0, [r7, #12]
 800a3dc:	f004 f822 	bl	800e424 <USBD_LL_PrepareReceive>
 800a3e0:	e01c      	b.n	800a41c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3e8:	b2db      	uxtb	r3, r3
 800a3ea:	2b03      	cmp	r3, #3
 800a3ec:	d10f      	bne.n	800a40e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3f4:	68db      	ldr	r3, [r3, #12]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d009      	beq.n	800a40e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a408:	68db      	ldr	r3, [r3, #12]
 800a40a:	68f8      	ldr	r0, [r7, #12]
 800a40c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a40e:	2180      	movs	r1, #128	; 0x80
 800a410:	68f8      	ldr	r0, [r7, #12]
 800a412:	f003 ff5d 	bl	800e2d0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a416:	68f8      	ldr	r0, [r7, #12]
 800a418:	f001 f89a 	bl	800b550 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a422:	2b00      	cmp	r3, #0
 800a424:	d03a      	beq.n	800a49c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a426:	68f8      	ldr	r0, [r7, #12]
 800a428:	f7ff fe42 	bl	800a0b0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2200      	movs	r2, #0
 800a430:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a434:	e032      	b.n	800a49c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a436:	7afb      	ldrb	r3, [r7, #11]
 800a438:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	4619      	mov	r1, r3
 800a440:	68f8      	ldr	r0, [r7, #12]
 800a442:	f000 f97f 	bl	800a744 <USBD_CoreFindEP>
 800a446:	4603      	mov	r3, r0
 800a448:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a44a:	7dfb      	ldrb	r3, [r7, #23]
 800a44c:	2bff      	cmp	r3, #255	; 0xff
 800a44e:	d025      	beq.n	800a49c <USBD_LL_DataInStage+0x15a>
 800a450:	7dfb      	ldrb	r3, [r7, #23]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d122      	bne.n	800a49c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	2b03      	cmp	r3, #3
 800a460:	d11c      	bne.n	800a49c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a462:	7dfa      	ldrb	r2, [r7, #23]
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	32ae      	adds	r2, #174	; 0xae
 800a468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a46c:	695b      	ldr	r3, [r3, #20]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d014      	beq.n	800a49c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a472:	7dfa      	ldrb	r2, [r7, #23]
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a47a:	7dfa      	ldrb	r2, [r7, #23]
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	32ae      	adds	r2, #174	; 0xae
 800a480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a484:	695b      	ldr	r3, [r3, #20]
 800a486:	7afa      	ldrb	r2, [r7, #11]
 800a488:	4611      	mov	r1, r2
 800a48a:	68f8      	ldr	r0, [r7, #12]
 800a48c:	4798      	blx	r3
 800a48e:	4603      	mov	r3, r0
 800a490:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a492:	7dbb      	ldrb	r3, [r7, #22]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d001      	beq.n	800a49c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a498:	7dbb      	ldrb	r3, [r7, #22]
 800a49a:	e000      	b.n	800a49e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a49c:	2300      	movs	r3, #0
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3718      	adds	r7, #24
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}

0800a4a6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	b084      	sub	sp, #16
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d014      	beq.n	800a50c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4e8:	685b      	ldr	r3, [r3, #4]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d00e      	beq.n	800a50c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	6852      	ldr	r2, [r2, #4]
 800a4fa:	b2d2      	uxtb	r2, r2
 800a4fc:	4611      	mov	r1, r2
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	4798      	blx	r3
 800a502:	4603      	mov	r3, r0
 800a504:	2b00      	cmp	r3, #0
 800a506:	d001      	beq.n	800a50c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a508:	2303      	movs	r3, #3
 800a50a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a50c:	2340      	movs	r3, #64	; 0x40
 800a50e:	2200      	movs	r2, #0
 800a510:	2100      	movs	r1, #0
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f003 fe97 	bl	800e246 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2201      	movs	r2, #1
 800a51c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2240      	movs	r2, #64	; 0x40
 800a524:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a528:	2340      	movs	r3, #64	; 0x40
 800a52a:	2200      	movs	r2, #0
 800a52c:	2180      	movs	r1, #128	; 0x80
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f003 fe89 	bl	800e246 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2201      	movs	r2, #1
 800a538:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2240      	movs	r2, #64	; 0x40
 800a53e:	621a      	str	r2, [r3, #32]

  return ret;
 800a540:	7bfb      	ldrb	r3, [r7, #15]
}
 800a542:	4618      	mov	r0, r3
 800a544:	3710      	adds	r7, #16
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}

0800a54a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a54a:	b480      	push	{r7}
 800a54c:	b083      	sub	sp, #12
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
 800a552:	460b      	mov	r3, r1
 800a554:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	78fa      	ldrb	r2, [r7, #3]
 800a55a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a55c:	2300      	movs	r3, #0
}
 800a55e:	4618      	mov	r0, r3
 800a560:	370c      	adds	r7, #12
 800a562:	46bd      	mov	sp, r7
 800a564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a568:	4770      	bx	lr

0800a56a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a56a:	b480      	push	{r7}
 800a56c:	b083      	sub	sp, #12
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a578:	b2da      	uxtb	r2, r3
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2204      	movs	r2, #4
 800a584:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a588:	2300      	movs	r3, #0
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	370c      	adds	r7, #12
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr

0800a596 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a596:	b480      	push	{r7}
 800a598:	b083      	sub	sp, #12
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	2b04      	cmp	r3, #4
 800a5a8:	d106      	bne.n	800a5b8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a5b0:	b2da      	uxtb	r2, r3
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a5b8:	2300      	movs	r3, #0
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	370c      	adds	r7, #12
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c4:	4770      	bx	lr

0800a5c6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b082      	sub	sp, #8
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	2b03      	cmp	r3, #3
 800a5d8:	d110      	bne.n	800a5fc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d00b      	beq.n	800a5fc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5ea:	69db      	ldr	r3, [r3, #28]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d005      	beq.n	800a5fc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5f6:	69db      	ldr	r3, [r3, #28]
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a5fc:	2300      	movs	r3, #0
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3708      	adds	r7, #8
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}

0800a606 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a606:	b580      	push	{r7, lr}
 800a608:	b082      	sub	sp, #8
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
 800a60e:	460b      	mov	r3, r1
 800a610:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	32ae      	adds	r2, #174	; 0xae
 800a61c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d101      	bne.n	800a628 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a624:	2303      	movs	r3, #3
 800a626:	e01c      	b.n	800a662 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a62e:	b2db      	uxtb	r3, r3
 800a630:	2b03      	cmp	r3, #3
 800a632:	d115      	bne.n	800a660 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	32ae      	adds	r2, #174	; 0xae
 800a63e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a642:	6a1b      	ldr	r3, [r3, #32]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d00b      	beq.n	800a660 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	32ae      	adds	r2, #174	; 0xae
 800a652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a656:	6a1b      	ldr	r3, [r3, #32]
 800a658:	78fa      	ldrb	r2, [r7, #3]
 800a65a:	4611      	mov	r1, r2
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a660:	2300      	movs	r3, #0
}
 800a662:	4618      	mov	r0, r3
 800a664:	3708      	adds	r7, #8
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}

0800a66a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a66a:	b580      	push	{r7, lr}
 800a66c:	b082      	sub	sp, #8
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
 800a672:	460b      	mov	r3, r1
 800a674:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	32ae      	adds	r2, #174	; 0xae
 800a680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d101      	bne.n	800a68c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a688:	2303      	movs	r3, #3
 800a68a:	e01c      	b.n	800a6c6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a692:	b2db      	uxtb	r3, r3
 800a694:	2b03      	cmp	r3, #3
 800a696:	d115      	bne.n	800a6c4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	32ae      	adds	r2, #174	; 0xae
 800a6a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d00b      	beq.n	800a6c4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	32ae      	adds	r2, #174	; 0xae
 800a6b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6bc:	78fa      	ldrb	r2, [r7, #3]
 800a6be:	4611      	mov	r1, r2
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a6c4:	2300      	movs	r3, #0
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3708      	adds	r7, #8
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a6ce:	b480      	push	{r7}
 800a6d0:	b083      	sub	sp, #12
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a6d6:	2300      	movs	r3, #0
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	370c      	adds	r7, #12
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr

0800a6e4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b084      	sub	sp, #16
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d00e      	beq.n	800a720 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	687a      	ldr	r2, [r7, #4]
 800a70c:	6852      	ldr	r2, [r2, #4]
 800a70e:	b2d2      	uxtb	r2, r2
 800a710:	4611      	mov	r1, r2
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	4798      	blx	r3
 800a716:	4603      	mov	r3, r0
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d001      	beq.n	800a720 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a71c:	2303      	movs	r3, #3
 800a71e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a720:	7bfb      	ldrb	r3, [r7, #15]
}
 800a722:	4618      	mov	r0, r3
 800a724:	3710      	adds	r7, #16
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a72a:	b480      	push	{r7}
 800a72c:	b083      	sub	sp, #12
 800a72e:	af00      	add	r7, sp, #0
 800a730:	6078      	str	r0, [r7, #4]
 800a732:	460b      	mov	r3, r1
 800a734:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a736:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a738:	4618      	mov	r0, r3
 800a73a:	370c      	adds	r7, #12
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	460b      	mov	r3, r1
 800a74e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a750:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a752:	4618      	mov	r0, r3
 800a754:	370c      	adds	r7, #12
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr

0800a75e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a75e:	b580      	push	{r7, lr}
 800a760:	b086      	sub	sp, #24
 800a762:	af00      	add	r7, sp, #0
 800a764:	6078      	str	r0, [r7, #4]
 800a766:	460b      	mov	r3, r1
 800a768:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a772:	2300      	movs	r3, #0
 800a774:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	885b      	ldrh	r3, [r3, #2]
 800a77a:	b29a      	uxth	r2, r3
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	b29b      	uxth	r3, r3
 800a782:	429a      	cmp	r2, r3
 800a784:	d920      	bls.n	800a7c8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a78e:	e013      	b.n	800a7b8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a790:	f107 030a 	add.w	r3, r7, #10
 800a794:	4619      	mov	r1, r3
 800a796:	6978      	ldr	r0, [r7, #20]
 800a798:	f000 f81b 	bl	800a7d2 <USBD_GetNextDesc>
 800a79c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	785b      	ldrb	r3, [r3, #1]
 800a7a2:	2b05      	cmp	r3, #5
 800a7a4:	d108      	bne.n	800a7b8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	789b      	ldrb	r3, [r3, #2]
 800a7ae:	78fa      	ldrb	r2, [r7, #3]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d008      	beq.n	800a7c6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	885b      	ldrh	r3, [r3, #2]
 800a7bc:	b29a      	uxth	r2, r3
 800a7be:	897b      	ldrh	r3, [r7, #10]
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d8e5      	bhi.n	800a790 <USBD_GetEpDesc+0x32>
 800a7c4:	e000      	b.n	800a7c8 <USBD_GetEpDesc+0x6a>
          break;
 800a7c6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a7c8:	693b      	ldr	r3, [r7, #16]
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3718      	adds	r7, #24
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}

0800a7d2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a7d2:	b480      	push	{r7}
 800a7d4:	b085      	sub	sp, #20
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	6078      	str	r0, [r7, #4]
 800a7da:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	881a      	ldrh	r2, [r3, #0]
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	b29b      	uxth	r3, r3
 800a7ea:	4413      	add	r3, r2
 800a7ec:	b29a      	uxth	r2, r3
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	4413      	add	r3, r2
 800a7fc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a7fe:	68fb      	ldr	r3, [r7, #12]
}
 800a800:	4618      	mov	r0, r3
 800a802:	3714      	adds	r7, #20
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr

0800a80c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b087      	sub	sp, #28
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	3301      	adds	r3, #1
 800a822:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a82a:	8a3b      	ldrh	r3, [r7, #16]
 800a82c:	021b      	lsls	r3, r3, #8
 800a82e:	b21a      	sxth	r2, r3
 800a830:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a834:	4313      	orrs	r3, r2
 800a836:	b21b      	sxth	r3, r3
 800a838:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a83a:	89fb      	ldrh	r3, [r7, #14]
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	371c      	adds	r7, #28
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr

0800a848 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b084      	sub	sp, #16
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a852:	2300      	movs	r3, #0
 800a854:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	781b      	ldrb	r3, [r3, #0]
 800a85a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a85e:	2b40      	cmp	r3, #64	; 0x40
 800a860:	d005      	beq.n	800a86e <USBD_StdDevReq+0x26>
 800a862:	2b40      	cmp	r3, #64	; 0x40
 800a864:	d857      	bhi.n	800a916 <USBD_StdDevReq+0xce>
 800a866:	2b00      	cmp	r3, #0
 800a868:	d00f      	beq.n	800a88a <USBD_StdDevReq+0x42>
 800a86a:	2b20      	cmp	r3, #32
 800a86c:	d153      	bne.n	800a916 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	32ae      	adds	r2, #174	; 0xae
 800a878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a87c:	689b      	ldr	r3, [r3, #8]
 800a87e:	6839      	ldr	r1, [r7, #0]
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	4798      	blx	r3
 800a884:	4603      	mov	r3, r0
 800a886:	73fb      	strb	r3, [r7, #15]
      break;
 800a888:	e04a      	b.n	800a920 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	785b      	ldrb	r3, [r3, #1]
 800a88e:	2b09      	cmp	r3, #9
 800a890:	d83b      	bhi.n	800a90a <USBD_StdDevReq+0xc2>
 800a892:	a201      	add	r2, pc, #4	; (adr r2, 800a898 <USBD_StdDevReq+0x50>)
 800a894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a898:	0800a8ed 	.word	0x0800a8ed
 800a89c:	0800a901 	.word	0x0800a901
 800a8a0:	0800a90b 	.word	0x0800a90b
 800a8a4:	0800a8f7 	.word	0x0800a8f7
 800a8a8:	0800a90b 	.word	0x0800a90b
 800a8ac:	0800a8cb 	.word	0x0800a8cb
 800a8b0:	0800a8c1 	.word	0x0800a8c1
 800a8b4:	0800a90b 	.word	0x0800a90b
 800a8b8:	0800a8e3 	.word	0x0800a8e3
 800a8bc:	0800a8d5 	.word	0x0800a8d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a8c0:	6839      	ldr	r1, [r7, #0]
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f000 fa3c 	bl	800ad40 <USBD_GetDescriptor>
          break;
 800a8c8:	e024      	b.n	800a914 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a8ca:	6839      	ldr	r1, [r7, #0]
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f000 fba1 	bl	800b014 <USBD_SetAddress>
          break;
 800a8d2:	e01f      	b.n	800a914 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a8d4:	6839      	ldr	r1, [r7, #0]
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 fbe0 	bl	800b09c <USBD_SetConfig>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	73fb      	strb	r3, [r7, #15]
          break;
 800a8e0:	e018      	b.n	800a914 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a8e2:	6839      	ldr	r1, [r7, #0]
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f000 fc83 	bl	800b1f0 <USBD_GetConfig>
          break;
 800a8ea:	e013      	b.n	800a914 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a8ec:	6839      	ldr	r1, [r7, #0]
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f000 fcb4 	bl	800b25c <USBD_GetStatus>
          break;
 800a8f4:	e00e      	b.n	800a914 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a8f6:	6839      	ldr	r1, [r7, #0]
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f000 fce3 	bl	800b2c4 <USBD_SetFeature>
          break;
 800a8fe:	e009      	b.n	800a914 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a900:	6839      	ldr	r1, [r7, #0]
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 fd07 	bl	800b316 <USBD_ClrFeature>
          break;
 800a908:	e004      	b.n	800a914 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a90a:	6839      	ldr	r1, [r7, #0]
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 fd5e 	bl	800b3ce <USBD_CtlError>
          break;
 800a912:	bf00      	nop
      }
      break;
 800a914:	e004      	b.n	800a920 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a916:	6839      	ldr	r1, [r7, #0]
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f000 fd58 	bl	800b3ce <USBD_CtlError>
      break;
 800a91e:	bf00      	nop
  }

  return ret;
 800a920:	7bfb      	ldrb	r3, [r7, #15]
}
 800a922:	4618      	mov	r0, r3
 800a924:	3710      	adds	r7, #16
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
 800a92a:	bf00      	nop

0800a92c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b084      	sub	sp, #16
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a936:	2300      	movs	r3, #0
 800a938:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a942:	2b40      	cmp	r3, #64	; 0x40
 800a944:	d005      	beq.n	800a952 <USBD_StdItfReq+0x26>
 800a946:	2b40      	cmp	r3, #64	; 0x40
 800a948:	d852      	bhi.n	800a9f0 <USBD_StdItfReq+0xc4>
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d001      	beq.n	800a952 <USBD_StdItfReq+0x26>
 800a94e:	2b20      	cmp	r3, #32
 800a950:	d14e      	bne.n	800a9f0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	3b01      	subs	r3, #1
 800a95c:	2b02      	cmp	r3, #2
 800a95e:	d840      	bhi.n	800a9e2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	889b      	ldrh	r3, [r3, #4]
 800a964:	b2db      	uxtb	r3, r3
 800a966:	2b01      	cmp	r3, #1
 800a968:	d836      	bhi.n	800a9d8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	889b      	ldrh	r3, [r3, #4]
 800a96e:	b2db      	uxtb	r3, r3
 800a970:	4619      	mov	r1, r3
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f7ff fed9 	bl	800a72a <USBD_CoreFindIF>
 800a978:	4603      	mov	r3, r0
 800a97a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a97c:	7bbb      	ldrb	r3, [r7, #14]
 800a97e:	2bff      	cmp	r3, #255	; 0xff
 800a980:	d01d      	beq.n	800a9be <USBD_StdItfReq+0x92>
 800a982:	7bbb      	ldrb	r3, [r7, #14]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d11a      	bne.n	800a9be <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a988:	7bba      	ldrb	r2, [r7, #14]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	32ae      	adds	r2, #174	; 0xae
 800a98e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a992:	689b      	ldr	r3, [r3, #8]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d00f      	beq.n	800a9b8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a998:	7bba      	ldrb	r2, [r7, #14]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a9a0:	7bba      	ldrb	r2, [r7, #14]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	32ae      	adds	r2, #174	; 0xae
 800a9a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9aa:	689b      	ldr	r3, [r3, #8]
 800a9ac:	6839      	ldr	r1, [r7, #0]
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	4798      	blx	r3
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a9b6:	e004      	b.n	800a9c2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a9b8:	2303      	movs	r3, #3
 800a9ba:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a9bc:	e001      	b.n	800a9c2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a9be:	2303      	movs	r3, #3
 800a9c0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	88db      	ldrh	r3, [r3, #6]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d110      	bne.n	800a9ec <USBD_StdItfReq+0xc0>
 800a9ca:	7bfb      	ldrb	r3, [r7, #15]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d10d      	bne.n	800a9ec <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 fdaa 	bl	800b52a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a9d6:	e009      	b.n	800a9ec <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a9d8:	6839      	ldr	r1, [r7, #0]
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 fcf7 	bl	800b3ce <USBD_CtlError>
          break;
 800a9e0:	e004      	b.n	800a9ec <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a9e2:	6839      	ldr	r1, [r7, #0]
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 fcf2 	bl	800b3ce <USBD_CtlError>
          break;
 800a9ea:	e000      	b.n	800a9ee <USBD_StdItfReq+0xc2>
          break;
 800a9ec:	bf00      	nop
      }
      break;
 800a9ee:	e004      	b.n	800a9fa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a9f0:	6839      	ldr	r1, [r7, #0]
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f000 fceb 	bl	800b3ce <USBD_CtlError>
      break;
 800a9f8:	bf00      	nop
  }

  return ret;
 800a9fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3710      	adds	r7, #16
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b084      	sub	sp, #16
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	889b      	ldrh	r3, [r3, #4]
 800aa16:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa20:	2b40      	cmp	r3, #64	; 0x40
 800aa22:	d007      	beq.n	800aa34 <USBD_StdEPReq+0x30>
 800aa24:	2b40      	cmp	r3, #64	; 0x40
 800aa26:	f200 817f 	bhi.w	800ad28 <USBD_StdEPReq+0x324>
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d02a      	beq.n	800aa84 <USBD_StdEPReq+0x80>
 800aa2e:	2b20      	cmp	r3, #32
 800aa30:	f040 817a 	bne.w	800ad28 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800aa34:	7bbb      	ldrb	r3, [r7, #14]
 800aa36:	4619      	mov	r1, r3
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f7ff fe83 	bl	800a744 <USBD_CoreFindEP>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aa42:	7b7b      	ldrb	r3, [r7, #13]
 800aa44:	2bff      	cmp	r3, #255	; 0xff
 800aa46:	f000 8174 	beq.w	800ad32 <USBD_StdEPReq+0x32e>
 800aa4a:	7b7b      	ldrb	r3, [r7, #13]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	f040 8170 	bne.w	800ad32 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800aa52:	7b7a      	ldrb	r2, [r7, #13]
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800aa5a:	7b7a      	ldrb	r2, [r7, #13]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	32ae      	adds	r2, #174	; 0xae
 800aa60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa64:	689b      	ldr	r3, [r3, #8]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	f000 8163 	beq.w	800ad32 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800aa6c:	7b7a      	ldrb	r2, [r7, #13]
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	32ae      	adds	r2, #174	; 0xae
 800aa72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa76:	689b      	ldr	r3, [r3, #8]
 800aa78:	6839      	ldr	r1, [r7, #0]
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	4798      	blx	r3
 800aa7e:	4603      	mov	r3, r0
 800aa80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800aa82:	e156      	b.n	800ad32 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	785b      	ldrb	r3, [r3, #1]
 800aa88:	2b03      	cmp	r3, #3
 800aa8a:	d008      	beq.n	800aa9e <USBD_StdEPReq+0x9a>
 800aa8c:	2b03      	cmp	r3, #3
 800aa8e:	f300 8145 	bgt.w	800ad1c <USBD_StdEPReq+0x318>
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	f000 809b 	beq.w	800abce <USBD_StdEPReq+0x1ca>
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	d03c      	beq.n	800ab16 <USBD_StdEPReq+0x112>
 800aa9c:	e13e      	b.n	800ad1c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aaa4:	b2db      	uxtb	r3, r3
 800aaa6:	2b02      	cmp	r3, #2
 800aaa8:	d002      	beq.n	800aab0 <USBD_StdEPReq+0xac>
 800aaaa:	2b03      	cmp	r3, #3
 800aaac:	d016      	beq.n	800aadc <USBD_StdEPReq+0xd8>
 800aaae:	e02c      	b.n	800ab0a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aab0:	7bbb      	ldrb	r3, [r7, #14]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d00d      	beq.n	800aad2 <USBD_StdEPReq+0xce>
 800aab6:	7bbb      	ldrb	r3, [r7, #14]
 800aab8:	2b80      	cmp	r3, #128	; 0x80
 800aaba:	d00a      	beq.n	800aad2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aabc:	7bbb      	ldrb	r3, [r7, #14]
 800aabe:	4619      	mov	r1, r3
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f003 fc05 	bl	800e2d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aac6:	2180      	movs	r1, #128	; 0x80
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f003 fc01 	bl	800e2d0 <USBD_LL_StallEP>
 800aace:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aad0:	e020      	b.n	800ab14 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800aad2:	6839      	ldr	r1, [r7, #0]
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f000 fc7a 	bl	800b3ce <USBD_CtlError>
              break;
 800aada:	e01b      	b.n	800ab14 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	885b      	ldrh	r3, [r3, #2]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d10e      	bne.n	800ab02 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aae4:	7bbb      	ldrb	r3, [r7, #14]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d00b      	beq.n	800ab02 <USBD_StdEPReq+0xfe>
 800aaea:	7bbb      	ldrb	r3, [r7, #14]
 800aaec:	2b80      	cmp	r3, #128	; 0x80
 800aaee:	d008      	beq.n	800ab02 <USBD_StdEPReq+0xfe>
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	88db      	ldrh	r3, [r3, #6]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d104      	bne.n	800ab02 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800aaf8:	7bbb      	ldrb	r3, [r7, #14]
 800aafa:	4619      	mov	r1, r3
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f003 fbe7 	bl	800e2d0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f000 fd11 	bl	800b52a <USBD_CtlSendStatus>

              break;
 800ab08:	e004      	b.n	800ab14 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ab0a:	6839      	ldr	r1, [r7, #0]
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f000 fc5e 	bl	800b3ce <USBD_CtlError>
              break;
 800ab12:	bf00      	nop
          }
          break;
 800ab14:	e107      	b.n	800ad26 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab1c:	b2db      	uxtb	r3, r3
 800ab1e:	2b02      	cmp	r3, #2
 800ab20:	d002      	beq.n	800ab28 <USBD_StdEPReq+0x124>
 800ab22:	2b03      	cmp	r3, #3
 800ab24:	d016      	beq.n	800ab54 <USBD_StdEPReq+0x150>
 800ab26:	e04b      	b.n	800abc0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab28:	7bbb      	ldrb	r3, [r7, #14]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d00d      	beq.n	800ab4a <USBD_StdEPReq+0x146>
 800ab2e:	7bbb      	ldrb	r3, [r7, #14]
 800ab30:	2b80      	cmp	r3, #128	; 0x80
 800ab32:	d00a      	beq.n	800ab4a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab34:	7bbb      	ldrb	r3, [r7, #14]
 800ab36:	4619      	mov	r1, r3
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f003 fbc9 	bl	800e2d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab3e:	2180      	movs	r1, #128	; 0x80
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f003 fbc5 	bl	800e2d0 <USBD_LL_StallEP>
 800ab46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ab48:	e040      	b.n	800abcc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ab4a:	6839      	ldr	r1, [r7, #0]
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 fc3e 	bl	800b3ce <USBD_CtlError>
              break;
 800ab52:	e03b      	b.n	800abcc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	885b      	ldrh	r3, [r3, #2]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d136      	bne.n	800abca <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ab5c:	7bbb      	ldrb	r3, [r7, #14]
 800ab5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d004      	beq.n	800ab70 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ab66:	7bbb      	ldrb	r3, [r7, #14]
 800ab68:	4619      	mov	r1, r3
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f003 fbcf 	bl	800e30e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f000 fcda 	bl	800b52a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ab76:	7bbb      	ldrb	r3, [r7, #14]
 800ab78:	4619      	mov	r1, r3
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f7ff fde2 	bl	800a744 <USBD_CoreFindEP>
 800ab80:	4603      	mov	r3, r0
 800ab82:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab84:	7b7b      	ldrb	r3, [r7, #13]
 800ab86:	2bff      	cmp	r3, #255	; 0xff
 800ab88:	d01f      	beq.n	800abca <USBD_StdEPReq+0x1c6>
 800ab8a:	7b7b      	ldrb	r3, [r7, #13]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d11c      	bne.n	800abca <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ab90:	7b7a      	ldrb	r2, [r7, #13]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ab98:	7b7a      	ldrb	r2, [r7, #13]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	32ae      	adds	r2, #174	; 0xae
 800ab9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aba2:	689b      	ldr	r3, [r3, #8]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d010      	beq.n	800abca <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aba8:	7b7a      	ldrb	r2, [r7, #13]
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	32ae      	adds	r2, #174	; 0xae
 800abae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abb2:	689b      	ldr	r3, [r3, #8]
 800abb4:	6839      	ldr	r1, [r7, #0]
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	4798      	blx	r3
 800abba:	4603      	mov	r3, r0
 800abbc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800abbe:	e004      	b.n	800abca <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800abc0:	6839      	ldr	r1, [r7, #0]
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f000 fc03 	bl	800b3ce <USBD_CtlError>
              break;
 800abc8:	e000      	b.n	800abcc <USBD_StdEPReq+0x1c8>
              break;
 800abca:	bf00      	nop
          }
          break;
 800abcc:	e0ab      	b.n	800ad26 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abd4:	b2db      	uxtb	r3, r3
 800abd6:	2b02      	cmp	r3, #2
 800abd8:	d002      	beq.n	800abe0 <USBD_StdEPReq+0x1dc>
 800abda:	2b03      	cmp	r3, #3
 800abdc:	d032      	beq.n	800ac44 <USBD_StdEPReq+0x240>
 800abde:	e097      	b.n	800ad10 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800abe0:	7bbb      	ldrb	r3, [r7, #14]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d007      	beq.n	800abf6 <USBD_StdEPReq+0x1f2>
 800abe6:	7bbb      	ldrb	r3, [r7, #14]
 800abe8:	2b80      	cmp	r3, #128	; 0x80
 800abea:	d004      	beq.n	800abf6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800abec:	6839      	ldr	r1, [r7, #0]
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f000 fbed 	bl	800b3ce <USBD_CtlError>
                break;
 800abf4:	e091      	b.n	800ad1a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	da0b      	bge.n	800ac16 <USBD_StdEPReq+0x212>
 800abfe:	7bbb      	ldrb	r3, [r7, #14]
 800ac00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac04:	4613      	mov	r3, r2
 800ac06:	009b      	lsls	r3, r3, #2
 800ac08:	4413      	add	r3, r2
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	3310      	adds	r3, #16
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	4413      	add	r3, r2
 800ac12:	3304      	adds	r3, #4
 800ac14:	e00b      	b.n	800ac2e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ac16:	7bbb      	ldrb	r3, [r7, #14]
 800ac18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac1c:	4613      	mov	r3, r2
 800ac1e:	009b      	lsls	r3, r3, #2
 800ac20:	4413      	add	r3, r2
 800ac22:	009b      	lsls	r3, r3, #2
 800ac24:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	4413      	add	r3, r2
 800ac2c:	3304      	adds	r3, #4
 800ac2e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	2200      	movs	r2, #0
 800ac34:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	2202      	movs	r2, #2
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 fc37 	bl	800b4b0 <USBD_CtlSendData>
              break;
 800ac42:	e06a      	b.n	800ad1a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ac44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	da11      	bge.n	800ac70 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ac4c:	7bbb      	ldrb	r3, [r7, #14]
 800ac4e:	f003 020f 	and.w	r2, r3, #15
 800ac52:	6879      	ldr	r1, [r7, #4]
 800ac54:	4613      	mov	r3, r2
 800ac56:	009b      	lsls	r3, r3, #2
 800ac58:	4413      	add	r3, r2
 800ac5a:	009b      	lsls	r3, r3, #2
 800ac5c:	440b      	add	r3, r1
 800ac5e:	3324      	adds	r3, #36	; 0x24
 800ac60:	881b      	ldrh	r3, [r3, #0]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d117      	bne.n	800ac96 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ac66:	6839      	ldr	r1, [r7, #0]
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f000 fbb0 	bl	800b3ce <USBD_CtlError>
                  break;
 800ac6e:	e054      	b.n	800ad1a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ac70:	7bbb      	ldrb	r3, [r7, #14]
 800ac72:	f003 020f 	and.w	r2, r3, #15
 800ac76:	6879      	ldr	r1, [r7, #4]
 800ac78:	4613      	mov	r3, r2
 800ac7a:	009b      	lsls	r3, r3, #2
 800ac7c:	4413      	add	r3, r2
 800ac7e:	009b      	lsls	r3, r3, #2
 800ac80:	440b      	add	r3, r1
 800ac82:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ac86:	881b      	ldrh	r3, [r3, #0]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d104      	bne.n	800ac96 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ac8c:	6839      	ldr	r1, [r7, #0]
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 fb9d 	bl	800b3ce <USBD_CtlError>
                  break;
 800ac94:	e041      	b.n	800ad1a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	da0b      	bge.n	800acb6 <USBD_StdEPReq+0x2b2>
 800ac9e:	7bbb      	ldrb	r3, [r7, #14]
 800aca0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aca4:	4613      	mov	r3, r2
 800aca6:	009b      	lsls	r3, r3, #2
 800aca8:	4413      	add	r3, r2
 800acaa:	009b      	lsls	r3, r3, #2
 800acac:	3310      	adds	r3, #16
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	4413      	add	r3, r2
 800acb2:	3304      	adds	r3, #4
 800acb4:	e00b      	b.n	800acce <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800acb6:	7bbb      	ldrb	r3, [r7, #14]
 800acb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800acbc:	4613      	mov	r3, r2
 800acbe:	009b      	lsls	r3, r3, #2
 800acc0:	4413      	add	r3, r2
 800acc2:	009b      	lsls	r3, r3, #2
 800acc4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	4413      	add	r3, r2
 800accc:	3304      	adds	r3, #4
 800acce:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800acd0:	7bbb      	ldrb	r3, [r7, #14]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d002      	beq.n	800acdc <USBD_StdEPReq+0x2d8>
 800acd6:	7bbb      	ldrb	r3, [r7, #14]
 800acd8:	2b80      	cmp	r3, #128	; 0x80
 800acda:	d103      	bne.n	800ace4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	2200      	movs	r2, #0
 800ace0:	601a      	str	r2, [r3, #0]
 800ace2:	e00e      	b.n	800ad02 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ace4:	7bbb      	ldrb	r3, [r7, #14]
 800ace6:	4619      	mov	r1, r3
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f003 fb2f 	bl	800e34c <USBD_LL_IsStallEP>
 800acee:	4603      	mov	r3, r0
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d003      	beq.n	800acfc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	2201      	movs	r2, #1
 800acf8:	601a      	str	r2, [r3, #0]
 800acfa:	e002      	b.n	800ad02 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	2200      	movs	r2, #0
 800ad00:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	2202      	movs	r2, #2
 800ad06:	4619      	mov	r1, r3
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f000 fbd1 	bl	800b4b0 <USBD_CtlSendData>
              break;
 800ad0e:	e004      	b.n	800ad1a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ad10:	6839      	ldr	r1, [r7, #0]
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f000 fb5b 	bl	800b3ce <USBD_CtlError>
              break;
 800ad18:	bf00      	nop
          }
          break;
 800ad1a:	e004      	b.n	800ad26 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ad1c:	6839      	ldr	r1, [r7, #0]
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 fb55 	bl	800b3ce <USBD_CtlError>
          break;
 800ad24:	bf00      	nop
      }
      break;
 800ad26:	e005      	b.n	800ad34 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ad28:	6839      	ldr	r1, [r7, #0]
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 fb4f 	bl	800b3ce <USBD_CtlError>
      break;
 800ad30:	e000      	b.n	800ad34 <USBD_StdEPReq+0x330>
      break;
 800ad32:	bf00      	nop
  }

  return ret;
 800ad34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3710      	adds	r7, #16
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
	...

0800ad40 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b084      	sub	sp, #16
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ad52:	2300      	movs	r3, #0
 800ad54:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	885b      	ldrh	r3, [r3, #2]
 800ad5a:	0a1b      	lsrs	r3, r3, #8
 800ad5c:	b29b      	uxth	r3, r3
 800ad5e:	3b01      	subs	r3, #1
 800ad60:	2b06      	cmp	r3, #6
 800ad62:	f200 8128 	bhi.w	800afb6 <USBD_GetDescriptor+0x276>
 800ad66:	a201      	add	r2, pc, #4	; (adr r2, 800ad6c <USBD_GetDescriptor+0x2c>)
 800ad68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad6c:	0800ad89 	.word	0x0800ad89
 800ad70:	0800ada1 	.word	0x0800ada1
 800ad74:	0800ade1 	.word	0x0800ade1
 800ad78:	0800afb7 	.word	0x0800afb7
 800ad7c:	0800afb7 	.word	0x0800afb7
 800ad80:	0800af57 	.word	0x0800af57
 800ad84:	0800af83 	.word	0x0800af83
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	687a      	ldr	r2, [r7, #4]
 800ad92:	7c12      	ldrb	r2, [r2, #16]
 800ad94:	f107 0108 	add.w	r1, r7, #8
 800ad98:	4610      	mov	r0, r2
 800ad9a:	4798      	blx	r3
 800ad9c:	60f8      	str	r0, [r7, #12]
      break;
 800ad9e:	e112      	b.n	800afc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	7c1b      	ldrb	r3, [r3, #16]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d10d      	bne.n	800adc4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adb0:	f107 0208 	add.w	r2, r7, #8
 800adb4:	4610      	mov	r0, r2
 800adb6:	4798      	blx	r3
 800adb8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	3301      	adds	r3, #1
 800adbe:	2202      	movs	r2, #2
 800adc0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800adc2:	e100      	b.n	800afc6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adcc:	f107 0208 	add.w	r2, r7, #8
 800add0:	4610      	mov	r0, r2
 800add2:	4798      	blx	r3
 800add4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	3301      	adds	r3, #1
 800adda:	2202      	movs	r2, #2
 800addc:	701a      	strb	r2, [r3, #0]
      break;
 800adde:	e0f2      	b.n	800afc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	885b      	ldrh	r3, [r3, #2]
 800ade4:	b2db      	uxtb	r3, r3
 800ade6:	2b05      	cmp	r3, #5
 800ade8:	f200 80ac 	bhi.w	800af44 <USBD_GetDescriptor+0x204>
 800adec:	a201      	add	r2, pc, #4	; (adr r2, 800adf4 <USBD_GetDescriptor+0xb4>)
 800adee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adf2:	bf00      	nop
 800adf4:	0800ae0d 	.word	0x0800ae0d
 800adf8:	0800ae41 	.word	0x0800ae41
 800adfc:	0800ae75 	.word	0x0800ae75
 800ae00:	0800aea9 	.word	0x0800aea9
 800ae04:	0800aedd 	.word	0x0800aedd
 800ae08:	0800af11 	.word	0x0800af11
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d00b      	beq.n	800ae30 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	687a      	ldr	r2, [r7, #4]
 800ae22:	7c12      	ldrb	r2, [r2, #16]
 800ae24:	f107 0108 	add.w	r1, r7, #8
 800ae28:	4610      	mov	r0, r2
 800ae2a:	4798      	blx	r3
 800ae2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae2e:	e091      	b.n	800af54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae30:	6839      	ldr	r1, [r7, #0]
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 facb 	bl	800b3ce <USBD_CtlError>
            err++;
 800ae38:	7afb      	ldrb	r3, [r7, #11]
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	72fb      	strb	r3, [r7, #11]
          break;
 800ae3e:	e089      	b.n	800af54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae46:	689b      	ldr	r3, [r3, #8]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d00b      	beq.n	800ae64 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae52:	689b      	ldr	r3, [r3, #8]
 800ae54:	687a      	ldr	r2, [r7, #4]
 800ae56:	7c12      	ldrb	r2, [r2, #16]
 800ae58:	f107 0108 	add.w	r1, r7, #8
 800ae5c:	4610      	mov	r0, r2
 800ae5e:	4798      	blx	r3
 800ae60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae62:	e077      	b.n	800af54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae64:	6839      	ldr	r1, [r7, #0]
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f000 fab1 	bl	800b3ce <USBD_CtlError>
            err++;
 800ae6c:	7afb      	ldrb	r3, [r7, #11]
 800ae6e:	3301      	adds	r3, #1
 800ae70:	72fb      	strb	r3, [r7, #11]
          break;
 800ae72:	e06f      	b.n	800af54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae7a:	68db      	ldr	r3, [r3, #12]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d00b      	beq.n	800ae98 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae86:	68db      	ldr	r3, [r3, #12]
 800ae88:	687a      	ldr	r2, [r7, #4]
 800ae8a:	7c12      	ldrb	r2, [r2, #16]
 800ae8c:	f107 0108 	add.w	r1, r7, #8
 800ae90:	4610      	mov	r0, r2
 800ae92:	4798      	blx	r3
 800ae94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae96:	e05d      	b.n	800af54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae98:	6839      	ldr	r1, [r7, #0]
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f000 fa97 	bl	800b3ce <USBD_CtlError>
            err++;
 800aea0:	7afb      	ldrb	r3, [r7, #11]
 800aea2:	3301      	adds	r3, #1
 800aea4:	72fb      	strb	r3, [r7, #11]
          break;
 800aea6:	e055      	b.n	800af54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeae:	691b      	ldr	r3, [r3, #16]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d00b      	beq.n	800aecc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeba:	691b      	ldr	r3, [r3, #16]
 800aebc:	687a      	ldr	r2, [r7, #4]
 800aebe:	7c12      	ldrb	r2, [r2, #16]
 800aec0:	f107 0108 	add.w	r1, r7, #8
 800aec4:	4610      	mov	r0, r2
 800aec6:	4798      	blx	r3
 800aec8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aeca:	e043      	b.n	800af54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aecc:	6839      	ldr	r1, [r7, #0]
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f000 fa7d 	bl	800b3ce <USBD_CtlError>
            err++;
 800aed4:	7afb      	ldrb	r3, [r7, #11]
 800aed6:	3301      	adds	r3, #1
 800aed8:	72fb      	strb	r3, [r7, #11]
          break;
 800aeda:	e03b      	b.n	800af54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aee2:	695b      	ldr	r3, [r3, #20]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d00b      	beq.n	800af00 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeee:	695b      	ldr	r3, [r3, #20]
 800aef0:	687a      	ldr	r2, [r7, #4]
 800aef2:	7c12      	ldrb	r2, [r2, #16]
 800aef4:	f107 0108 	add.w	r1, r7, #8
 800aef8:	4610      	mov	r0, r2
 800aefa:	4798      	blx	r3
 800aefc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aefe:	e029      	b.n	800af54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af00:	6839      	ldr	r1, [r7, #0]
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f000 fa63 	bl	800b3ce <USBD_CtlError>
            err++;
 800af08:	7afb      	ldrb	r3, [r7, #11]
 800af0a:	3301      	adds	r3, #1
 800af0c:	72fb      	strb	r3, [r7, #11]
          break;
 800af0e:	e021      	b.n	800af54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af16:	699b      	ldr	r3, [r3, #24]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d00b      	beq.n	800af34 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af22:	699b      	ldr	r3, [r3, #24]
 800af24:	687a      	ldr	r2, [r7, #4]
 800af26:	7c12      	ldrb	r2, [r2, #16]
 800af28:	f107 0108 	add.w	r1, r7, #8
 800af2c:	4610      	mov	r0, r2
 800af2e:	4798      	blx	r3
 800af30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af32:	e00f      	b.n	800af54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af34:	6839      	ldr	r1, [r7, #0]
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f000 fa49 	bl	800b3ce <USBD_CtlError>
            err++;
 800af3c:	7afb      	ldrb	r3, [r7, #11]
 800af3e:	3301      	adds	r3, #1
 800af40:	72fb      	strb	r3, [r7, #11]
          break;
 800af42:	e007      	b.n	800af54 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800af44:	6839      	ldr	r1, [r7, #0]
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 fa41 	bl	800b3ce <USBD_CtlError>
          err++;
 800af4c:	7afb      	ldrb	r3, [r7, #11]
 800af4e:	3301      	adds	r3, #1
 800af50:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800af52:	bf00      	nop
      }
      break;
 800af54:	e037      	b.n	800afc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	7c1b      	ldrb	r3, [r3, #16]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d109      	bne.n	800af72 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af66:	f107 0208 	add.w	r2, r7, #8
 800af6a:	4610      	mov	r0, r2
 800af6c:	4798      	blx	r3
 800af6e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af70:	e029      	b.n	800afc6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800af72:	6839      	ldr	r1, [r7, #0]
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 fa2a 	bl	800b3ce <USBD_CtlError>
        err++;
 800af7a:	7afb      	ldrb	r3, [r7, #11]
 800af7c:	3301      	adds	r3, #1
 800af7e:	72fb      	strb	r3, [r7, #11]
      break;
 800af80:	e021      	b.n	800afc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	7c1b      	ldrb	r3, [r3, #16]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d10d      	bne.n	800afa6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af92:	f107 0208 	add.w	r2, r7, #8
 800af96:	4610      	mov	r0, r2
 800af98:	4798      	blx	r3
 800af9a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	3301      	adds	r3, #1
 800afa0:	2207      	movs	r2, #7
 800afa2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800afa4:	e00f      	b.n	800afc6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800afa6:	6839      	ldr	r1, [r7, #0]
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 fa10 	bl	800b3ce <USBD_CtlError>
        err++;
 800afae:	7afb      	ldrb	r3, [r7, #11]
 800afb0:	3301      	adds	r3, #1
 800afb2:	72fb      	strb	r3, [r7, #11]
      break;
 800afb4:	e007      	b.n	800afc6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800afb6:	6839      	ldr	r1, [r7, #0]
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f000 fa08 	bl	800b3ce <USBD_CtlError>
      err++;
 800afbe:	7afb      	ldrb	r3, [r7, #11]
 800afc0:	3301      	adds	r3, #1
 800afc2:	72fb      	strb	r3, [r7, #11]
      break;
 800afc4:	bf00      	nop
  }

  if (err != 0U)
 800afc6:	7afb      	ldrb	r3, [r7, #11]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d11e      	bne.n	800b00a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	88db      	ldrh	r3, [r3, #6]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d016      	beq.n	800b002 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800afd4:	893b      	ldrh	r3, [r7, #8]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d00e      	beq.n	800aff8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	88da      	ldrh	r2, [r3, #6]
 800afde:	893b      	ldrh	r3, [r7, #8]
 800afe0:	4293      	cmp	r3, r2
 800afe2:	bf28      	it	cs
 800afe4:	4613      	movcs	r3, r2
 800afe6:	b29b      	uxth	r3, r3
 800afe8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800afea:	893b      	ldrh	r3, [r7, #8]
 800afec:	461a      	mov	r2, r3
 800afee:	68f9      	ldr	r1, [r7, #12]
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f000 fa5d 	bl	800b4b0 <USBD_CtlSendData>
 800aff6:	e009      	b.n	800b00c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800aff8:	6839      	ldr	r1, [r7, #0]
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f000 f9e7 	bl	800b3ce <USBD_CtlError>
 800b000:	e004      	b.n	800b00c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f000 fa91 	bl	800b52a <USBD_CtlSendStatus>
 800b008:	e000      	b.n	800b00c <USBD_GetDescriptor+0x2cc>
    return;
 800b00a:	bf00      	nop
  }
}
 800b00c:	3710      	adds	r7, #16
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}
 800b012:	bf00      	nop

0800b014 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	889b      	ldrh	r3, [r3, #4]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d131      	bne.n	800b08a <USBD_SetAddress+0x76>
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	88db      	ldrh	r3, [r3, #6]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d12d      	bne.n	800b08a <USBD_SetAddress+0x76>
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	885b      	ldrh	r3, [r3, #2]
 800b032:	2b7f      	cmp	r3, #127	; 0x7f
 800b034:	d829      	bhi.n	800b08a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	885b      	ldrh	r3, [r3, #2]
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b040:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b048:	b2db      	uxtb	r3, r3
 800b04a:	2b03      	cmp	r3, #3
 800b04c:	d104      	bne.n	800b058 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b04e:	6839      	ldr	r1, [r7, #0]
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f000 f9bc 	bl	800b3ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b056:	e01d      	b.n	800b094 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	7bfa      	ldrb	r2, [r7, #15]
 800b05c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b060:	7bfb      	ldrb	r3, [r7, #15]
 800b062:	4619      	mov	r1, r3
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f003 f99d 	bl	800e3a4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 fa5d 	bl	800b52a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b070:	7bfb      	ldrb	r3, [r7, #15]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d004      	beq.n	800b080 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2202      	movs	r2, #2
 800b07a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b07e:	e009      	b.n	800b094 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2201      	movs	r2, #1
 800b084:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b088:	e004      	b.n	800b094 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b08a:	6839      	ldr	r1, [r7, #0]
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 f99e 	bl	800b3ce <USBD_CtlError>
  }
}
 800b092:	bf00      	nop
 800b094:	bf00      	nop
 800b096:	3710      	adds	r7, #16
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}

0800b09c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b084      	sub	sp, #16
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	885b      	ldrh	r3, [r3, #2]
 800b0ae:	b2da      	uxtb	r2, r3
 800b0b0:	4b4e      	ldr	r3, [pc, #312]	; (800b1ec <USBD_SetConfig+0x150>)
 800b0b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b0b4:	4b4d      	ldr	r3, [pc, #308]	; (800b1ec <USBD_SetConfig+0x150>)
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	d905      	bls.n	800b0c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b0bc:	6839      	ldr	r1, [r7, #0]
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f000 f985 	bl	800b3ce <USBD_CtlError>
    return USBD_FAIL;
 800b0c4:	2303      	movs	r3, #3
 800b0c6:	e08c      	b.n	800b1e2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0ce:	b2db      	uxtb	r3, r3
 800b0d0:	2b02      	cmp	r3, #2
 800b0d2:	d002      	beq.n	800b0da <USBD_SetConfig+0x3e>
 800b0d4:	2b03      	cmp	r3, #3
 800b0d6:	d029      	beq.n	800b12c <USBD_SetConfig+0x90>
 800b0d8:	e075      	b.n	800b1c6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b0da:	4b44      	ldr	r3, [pc, #272]	; (800b1ec <USBD_SetConfig+0x150>)
 800b0dc:	781b      	ldrb	r3, [r3, #0]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d020      	beq.n	800b124 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b0e2:	4b42      	ldr	r3, [pc, #264]	; (800b1ec <USBD_SetConfig+0x150>)
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b0ec:	4b3f      	ldr	r3, [pc, #252]	; (800b1ec <USBD_SetConfig+0x150>)
 800b0ee:	781b      	ldrb	r3, [r3, #0]
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f7fe ffe7 	bl	800a0c6 <USBD_SetClassConfig>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b0fc:	7bfb      	ldrb	r3, [r7, #15]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d008      	beq.n	800b114 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b102:	6839      	ldr	r1, [r7, #0]
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f000 f962 	bl	800b3ce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2202      	movs	r2, #2
 800b10e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b112:	e065      	b.n	800b1e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f000 fa08 	bl	800b52a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2203      	movs	r2, #3
 800b11e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b122:	e05d      	b.n	800b1e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f000 fa00 	bl	800b52a <USBD_CtlSendStatus>
      break;
 800b12a:	e059      	b.n	800b1e0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b12c:	4b2f      	ldr	r3, [pc, #188]	; (800b1ec <USBD_SetConfig+0x150>)
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d112      	bne.n	800b15a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2202      	movs	r2, #2
 800b138:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b13c:	4b2b      	ldr	r3, [pc, #172]	; (800b1ec <USBD_SetConfig+0x150>)
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	461a      	mov	r2, r3
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b146:	4b29      	ldr	r3, [pc, #164]	; (800b1ec <USBD_SetConfig+0x150>)
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	4619      	mov	r1, r3
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f7fe ffd6 	bl	800a0fe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 f9e9 	bl	800b52a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b158:	e042      	b.n	800b1e0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b15a:	4b24      	ldr	r3, [pc, #144]	; (800b1ec <USBD_SetConfig+0x150>)
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	461a      	mov	r2, r3
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	429a      	cmp	r2, r3
 800b166:	d02a      	beq.n	800b1be <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	b2db      	uxtb	r3, r3
 800b16e:	4619      	mov	r1, r3
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f7fe ffc4 	bl	800a0fe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b176:	4b1d      	ldr	r3, [pc, #116]	; (800b1ec <USBD_SetConfig+0x150>)
 800b178:	781b      	ldrb	r3, [r3, #0]
 800b17a:	461a      	mov	r2, r3
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b180:	4b1a      	ldr	r3, [pc, #104]	; (800b1ec <USBD_SetConfig+0x150>)
 800b182:	781b      	ldrb	r3, [r3, #0]
 800b184:	4619      	mov	r1, r3
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f7fe ff9d 	bl	800a0c6 <USBD_SetClassConfig>
 800b18c:	4603      	mov	r3, r0
 800b18e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b190:	7bfb      	ldrb	r3, [r7, #15]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d00f      	beq.n	800b1b6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b196:	6839      	ldr	r1, [r7, #0]
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 f918 	bl	800b3ce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	b2db      	uxtb	r3, r3
 800b1a4:	4619      	mov	r1, r3
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f7fe ffa9 	bl	800a0fe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2202      	movs	r2, #2
 800b1b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b1b4:	e014      	b.n	800b1e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 f9b7 	bl	800b52a <USBD_CtlSendStatus>
      break;
 800b1bc:	e010      	b.n	800b1e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 f9b3 	bl	800b52a <USBD_CtlSendStatus>
      break;
 800b1c4:	e00c      	b.n	800b1e0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b1c6:	6839      	ldr	r1, [r7, #0]
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 f900 	bl	800b3ce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b1ce:	4b07      	ldr	r3, [pc, #28]	; (800b1ec <USBD_SetConfig+0x150>)
 800b1d0:	781b      	ldrb	r3, [r3, #0]
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f7fe ff92 	bl	800a0fe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b1da:	2303      	movs	r3, #3
 800b1dc:	73fb      	strb	r3, [r7, #15]
      break;
 800b1de:	bf00      	nop
  }

  return ret;
 800b1e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3710      	adds	r7, #16
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	200008a0 	.word	0x200008a0

0800b1f0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b082      	sub	sp, #8
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	88db      	ldrh	r3, [r3, #6]
 800b1fe:	2b01      	cmp	r3, #1
 800b200:	d004      	beq.n	800b20c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b202:	6839      	ldr	r1, [r7, #0]
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f000 f8e2 	bl	800b3ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b20a:	e023      	b.n	800b254 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b212:	b2db      	uxtb	r3, r3
 800b214:	2b02      	cmp	r3, #2
 800b216:	dc02      	bgt.n	800b21e <USBD_GetConfig+0x2e>
 800b218:	2b00      	cmp	r3, #0
 800b21a:	dc03      	bgt.n	800b224 <USBD_GetConfig+0x34>
 800b21c:	e015      	b.n	800b24a <USBD_GetConfig+0x5a>
 800b21e:	2b03      	cmp	r3, #3
 800b220:	d00b      	beq.n	800b23a <USBD_GetConfig+0x4a>
 800b222:	e012      	b.n	800b24a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2200      	movs	r2, #0
 800b228:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	3308      	adds	r3, #8
 800b22e:	2201      	movs	r2, #1
 800b230:	4619      	mov	r1, r3
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 f93c 	bl	800b4b0 <USBD_CtlSendData>
        break;
 800b238:	e00c      	b.n	800b254 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	3304      	adds	r3, #4
 800b23e:	2201      	movs	r2, #1
 800b240:	4619      	mov	r1, r3
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f000 f934 	bl	800b4b0 <USBD_CtlSendData>
        break;
 800b248:	e004      	b.n	800b254 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b24a:	6839      	ldr	r1, [r7, #0]
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f000 f8be 	bl	800b3ce <USBD_CtlError>
        break;
 800b252:	bf00      	nop
}
 800b254:	bf00      	nop
 800b256:	3708      	adds	r7, #8
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}

0800b25c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b082      	sub	sp, #8
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b26c:	b2db      	uxtb	r3, r3
 800b26e:	3b01      	subs	r3, #1
 800b270:	2b02      	cmp	r3, #2
 800b272:	d81e      	bhi.n	800b2b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	88db      	ldrh	r3, [r3, #6]
 800b278:	2b02      	cmp	r3, #2
 800b27a:	d004      	beq.n	800b286 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b27c:	6839      	ldr	r1, [r7, #0]
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 f8a5 	bl	800b3ce <USBD_CtlError>
        break;
 800b284:	e01a      	b.n	800b2bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2201      	movs	r2, #1
 800b28a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b292:	2b00      	cmp	r3, #0
 800b294:	d005      	beq.n	800b2a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	68db      	ldr	r3, [r3, #12]
 800b29a:	f043 0202 	orr.w	r2, r3, #2
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	330c      	adds	r3, #12
 800b2a6:	2202      	movs	r2, #2
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 f900 	bl	800b4b0 <USBD_CtlSendData>
      break;
 800b2b0:	e004      	b.n	800b2bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b2b2:	6839      	ldr	r1, [r7, #0]
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 f88a 	bl	800b3ce <USBD_CtlError>
      break;
 800b2ba:	bf00      	nop
  }
}
 800b2bc:	bf00      	nop
 800b2be:	3708      	adds	r7, #8
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b082      	sub	sp, #8
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	885b      	ldrh	r3, [r3, #2]
 800b2d2:	2b01      	cmp	r3, #1
 800b2d4:	d107      	bne.n	800b2e6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2201      	movs	r2, #1
 800b2da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 f923 	bl	800b52a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b2e4:	e013      	b.n	800b30e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	885b      	ldrh	r3, [r3, #2]
 800b2ea:	2b02      	cmp	r3, #2
 800b2ec:	d10b      	bne.n	800b306 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	889b      	ldrh	r3, [r3, #4]
 800b2f2:	0a1b      	lsrs	r3, r3, #8
 800b2f4:	b29b      	uxth	r3, r3
 800b2f6:	b2da      	uxtb	r2, r3
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f000 f913 	bl	800b52a <USBD_CtlSendStatus>
}
 800b304:	e003      	b.n	800b30e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b306:	6839      	ldr	r1, [r7, #0]
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f000 f860 	bl	800b3ce <USBD_CtlError>
}
 800b30e:	bf00      	nop
 800b310:	3708      	adds	r7, #8
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}

0800b316 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b316:	b580      	push	{r7, lr}
 800b318:	b082      	sub	sp, #8
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
 800b31e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b326:	b2db      	uxtb	r3, r3
 800b328:	3b01      	subs	r3, #1
 800b32a:	2b02      	cmp	r3, #2
 800b32c:	d80b      	bhi.n	800b346 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	885b      	ldrh	r3, [r3, #2]
 800b332:	2b01      	cmp	r3, #1
 800b334:	d10c      	bne.n	800b350 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2200      	movs	r2, #0
 800b33a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f000 f8f3 	bl	800b52a <USBD_CtlSendStatus>
      }
      break;
 800b344:	e004      	b.n	800b350 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b346:	6839      	ldr	r1, [r7, #0]
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f000 f840 	bl	800b3ce <USBD_CtlError>
      break;
 800b34e:	e000      	b.n	800b352 <USBD_ClrFeature+0x3c>
      break;
 800b350:	bf00      	nop
  }
}
 800b352:	bf00      	nop
 800b354:	3708      	adds	r7, #8
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}

0800b35a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b35a:	b580      	push	{r7, lr}
 800b35c:	b084      	sub	sp, #16
 800b35e:	af00      	add	r7, sp, #0
 800b360:	6078      	str	r0, [r7, #4]
 800b362:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	781a      	ldrb	r2, [r3, #0]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	3301      	adds	r3, #1
 800b374:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	781a      	ldrb	r2, [r3, #0]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	3301      	adds	r3, #1
 800b382:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b384:	68f8      	ldr	r0, [r7, #12]
 800b386:	f7ff fa41 	bl	800a80c <SWAPBYTE>
 800b38a:	4603      	mov	r3, r0
 800b38c:	461a      	mov	r2, r3
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	3301      	adds	r3, #1
 800b396:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	3301      	adds	r3, #1
 800b39c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b39e:	68f8      	ldr	r0, [r7, #12]
 800b3a0:	f7ff fa34 	bl	800a80c <SWAPBYTE>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	461a      	mov	r2, r3
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	3301      	adds	r3, #1
 800b3b6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b3b8:	68f8      	ldr	r0, [r7, #12]
 800b3ba:	f7ff fa27 	bl	800a80c <SWAPBYTE>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	461a      	mov	r2, r3
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	80da      	strh	r2, [r3, #6]
}
 800b3c6:	bf00      	nop
 800b3c8:	3710      	adds	r7, #16
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}

0800b3ce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3ce:	b580      	push	{r7, lr}
 800b3d0:	b082      	sub	sp, #8
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	6078      	str	r0, [r7, #4]
 800b3d6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b3d8:	2180      	movs	r1, #128	; 0x80
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f002 ff78 	bl	800e2d0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b3e0:	2100      	movs	r1, #0
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f002 ff74 	bl	800e2d0 <USBD_LL_StallEP>
}
 800b3e8:	bf00      	nop
 800b3ea:	3708      	adds	r7, #8
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b086      	sub	sp, #24
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	60f8      	str	r0, [r7, #12]
 800b3f8:	60b9      	str	r1, [r7, #8]
 800b3fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d036      	beq.n	800b474 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b40a:	6938      	ldr	r0, [r7, #16]
 800b40c:	f000 f836 	bl	800b47c <USBD_GetLen>
 800b410:	4603      	mov	r3, r0
 800b412:	3301      	adds	r3, #1
 800b414:	b29b      	uxth	r3, r3
 800b416:	005b      	lsls	r3, r3, #1
 800b418:	b29a      	uxth	r2, r3
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b41e:	7dfb      	ldrb	r3, [r7, #23]
 800b420:	68ba      	ldr	r2, [r7, #8]
 800b422:	4413      	add	r3, r2
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	7812      	ldrb	r2, [r2, #0]
 800b428:	701a      	strb	r2, [r3, #0]
  idx++;
 800b42a:	7dfb      	ldrb	r3, [r7, #23]
 800b42c:	3301      	adds	r3, #1
 800b42e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b430:	7dfb      	ldrb	r3, [r7, #23]
 800b432:	68ba      	ldr	r2, [r7, #8]
 800b434:	4413      	add	r3, r2
 800b436:	2203      	movs	r2, #3
 800b438:	701a      	strb	r2, [r3, #0]
  idx++;
 800b43a:	7dfb      	ldrb	r3, [r7, #23]
 800b43c:	3301      	adds	r3, #1
 800b43e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b440:	e013      	b.n	800b46a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b442:	7dfb      	ldrb	r3, [r7, #23]
 800b444:	68ba      	ldr	r2, [r7, #8]
 800b446:	4413      	add	r3, r2
 800b448:	693a      	ldr	r2, [r7, #16]
 800b44a:	7812      	ldrb	r2, [r2, #0]
 800b44c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	3301      	adds	r3, #1
 800b452:	613b      	str	r3, [r7, #16]
    idx++;
 800b454:	7dfb      	ldrb	r3, [r7, #23]
 800b456:	3301      	adds	r3, #1
 800b458:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b45a:	7dfb      	ldrb	r3, [r7, #23]
 800b45c:	68ba      	ldr	r2, [r7, #8]
 800b45e:	4413      	add	r3, r2
 800b460:	2200      	movs	r2, #0
 800b462:	701a      	strb	r2, [r3, #0]
    idx++;
 800b464:	7dfb      	ldrb	r3, [r7, #23]
 800b466:	3301      	adds	r3, #1
 800b468:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	781b      	ldrb	r3, [r3, #0]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d1e7      	bne.n	800b442 <USBD_GetString+0x52>
 800b472:	e000      	b.n	800b476 <USBD_GetString+0x86>
    return;
 800b474:	bf00      	nop
  }
}
 800b476:	3718      	adds	r7, #24
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}

0800b47c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b47c:	b480      	push	{r7}
 800b47e:	b085      	sub	sp, #20
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b484:	2300      	movs	r3, #0
 800b486:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b48c:	e005      	b.n	800b49a <USBD_GetLen+0x1e>
  {
    len++;
 800b48e:	7bfb      	ldrb	r3, [r7, #15]
 800b490:	3301      	adds	r3, #1
 800b492:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	3301      	adds	r3, #1
 800b498:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d1f5      	bne.n	800b48e <USBD_GetLen+0x12>
  }

  return len;
 800b4a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3714      	adds	r7, #20
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ae:	4770      	bx	lr

0800b4b0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b084      	sub	sp, #16
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	60f8      	str	r0, [r7, #12]
 800b4b8:	60b9      	str	r1, [r7, #8]
 800b4ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	2202      	movs	r2, #2
 800b4c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	687a      	ldr	r2, [r7, #4]
 800b4c8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	687a      	ldr	r2, [r7, #4]
 800b4ce:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	68ba      	ldr	r2, [r7, #8]
 800b4d4:	2100      	movs	r1, #0
 800b4d6:	68f8      	ldr	r0, [r7, #12]
 800b4d8:	f002 ff83 	bl	800e3e2 <USBD_LL_Transmit>

  return USBD_OK;
 800b4dc:	2300      	movs	r3, #0
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3710      	adds	r7, #16
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}

0800b4e6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b4e6:	b580      	push	{r7, lr}
 800b4e8:	b084      	sub	sp, #16
 800b4ea:	af00      	add	r7, sp, #0
 800b4ec:	60f8      	str	r0, [r7, #12]
 800b4ee:	60b9      	str	r1, [r7, #8]
 800b4f0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	68ba      	ldr	r2, [r7, #8]
 800b4f6:	2100      	movs	r1, #0
 800b4f8:	68f8      	ldr	r0, [r7, #12]
 800b4fa:	f002 ff72 	bl	800e3e2 <USBD_LL_Transmit>

  return USBD_OK;
 800b4fe:	2300      	movs	r3, #0
}
 800b500:	4618      	mov	r0, r3
 800b502:	3710      	adds	r7, #16
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}

0800b508 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b084      	sub	sp, #16
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	60f8      	str	r0, [r7, #12]
 800b510:	60b9      	str	r1, [r7, #8]
 800b512:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	68ba      	ldr	r2, [r7, #8]
 800b518:	2100      	movs	r1, #0
 800b51a:	68f8      	ldr	r0, [r7, #12]
 800b51c:	f002 ff82 	bl	800e424 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b520:	2300      	movs	r3, #0
}
 800b522:	4618      	mov	r0, r3
 800b524:	3710      	adds	r7, #16
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}

0800b52a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b52a:	b580      	push	{r7, lr}
 800b52c:	b082      	sub	sp, #8
 800b52e:	af00      	add	r7, sp, #0
 800b530:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2204      	movs	r2, #4
 800b536:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b53a:	2300      	movs	r3, #0
 800b53c:	2200      	movs	r2, #0
 800b53e:	2100      	movs	r1, #0
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f002 ff4e 	bl	800e3e2 <USBD_LL_Transmit>

  return USBD_OK;
 800b546:	2300      	movs	r3, #0
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3708      	adds	r7, #8
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b082      	sub	sp, #8
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2205      	movs	r2, #5
 800b55c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b560:	2300      	movs	r3, #0
 800b562:	2200      	movs	r2, #0
 800b564:	2100      	movs	r1, #0
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f002 ff5c 	bl	800e424 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b56c:	2300      	movs	r3, #0
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3708      	adds	r7, #8
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}
	...

0800b578 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	4603      	mov	r3, r0
 800b580:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b582:	79fb      	ldrb	r3, [r7, #7]
 800b584:	4a08      	ldr	r2, [pc, #32]	; (800b5a8 <disk_status+0x30>)
 800b586:	009b      	lsls	r3, r3, #2
 800b588:	4413      	add	r3, r2
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	685b      	ldr	r3, [r3, #4]
 800b58e:	79fa      	ldrb	r2, [r7, #7]
 800b590:	4905      	ldr	r1, [pc, #20]	; (800b5a8 <disk_status+0x30>)
 800b592:	440a      	add	r2, r1
 800b594:	7a12      	ldrb	r2, [r2, #8]
 800b596:	4610      	mov	r0, r2
 800b598:	4798      	blx	r3
 800b59a:	4603      	mov	r3, r0
 800b59c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b59e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3710      	adds	r7, #16
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}
 800b5a8:	200008cc 	.word	0x200008cc

0800b5ac <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b084      	sub	sp, #16
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b5ba:	79fb      	ldrb	r3, [r7, #7]
 800b5bc:	4a0d      	ldr	r2, [pc, #52]	; (800b5f4 <disk_initialize+0x48>)
 800b5be:	5cd3      	ldrb	r3, [r2, r3]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d111      	bne.n	800b5e8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b5c4:	79fb      	ldrb	r3, [r7, #7]
 800b5c6:	4a0b      	ldr	r2, [pc, #44]	; (800b5f4 <disk_initialize+0x48>)
 800b5c8:	2101      	movs	r1, #1
 800b5ca:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b5cc:	79fb      	ldrb	r3, [r7, #7]
 800b5ce:	4a09      	ldr	r2, [pc, #36]	; (800b5f4 <disk_initialize+0x48>)
 800b5d0:	009b      	lsls	r3, r3, #2
 800b5d2:	4413      	add	r3, r2
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	79fa      	ldrb	r2, [r7, #7]
 800b5da:	4906      	ldr	r1, [pc, #24]	; (800b5f4 <disk_initialize+0x48>)
 800b5dc:	440a      	add	r2, r1
 800b5de:	7a12      	ldrb	r2, [r2, #8]
 800b5e0:	4610      	mov	r0, r2
 800b5e2:	4798      	blx	r3
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b5e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3710      	adds	r7, #16
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop
 800b5f4:	200008cc 	.word	0x200008cc

0800b5f8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b5f8:	b590      	push	{r4, r7, lr}
 800b5fa:	b087      	sub	sp, #28
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	60b9      	str	r1, [r7, #8]
 800b600:	607a      	str	r2, [r7, #4]
 800b602:	603b      	str	r3, [r7, #0]
 800b604:	4603      	mov	r3, r0
 800b606:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b608:	7bfb      	ldrb	r3, [r7, #15]
 800b60a:	4a0a      	ldr	r2, [pc, #40]	; (800b634 <disk_read+0x3c>)
 800b60c:	009b      	lsls	r3, r3, #2
 800b60e:	4413      	add	r3, r2
 800b610:	685b      	ldr	r3, [r3, #4]
 800b612:	689c      	ldr	r4, [r3, #8]
 800b614:	7bfb      	ldrb	r3, [r7, #15]
 800b616:	4a07      	ldr	r2, [pc, #28]	; (800b634 <disk_read+0x3c>)
 800b618:	4413      	add	r3, r2
 800b61a:	7a18      	ldrb	r0, [r3, #8]
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	687a      	ldr	r2, [r7, #4]
 800b620:	68b9      	ldr	r1, [r7, #8]
 800b622:	47a0      	blx	r4
 800b624:	4603      	mov	r3, r0
 800b626:	75fb      	strb	r3, [r7, #23]
  return res;
 800b628:	7dfb      	ldrb	r3, [r7, #23]
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	371c      	adds	r7, #28
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd90      	pop	{r4, r7, pc}
 800b632:	bf00      	nop
 800b634:	200008cc 	.word	0x200008cc

0800b638 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b638:	b590      	push	{r4, r7, lr}
 800b63a:	b087      	sub	sp, #28
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	60b9      	str	r1, [r7, #8]
 800b640:	607a      	str	r2, [r7, #4]
 800b642:	603b      	str	r3, [r7, #0]
 800b644:	4603      	mov	r3, r0
 800b646:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b648:	7bfb      	ldrb	r3, [r7, #15]
 800b64a:	4a0a      	ldr	r2, [pc, #40]	; (800b674 <disk_write+0x3c>)
 800b64c:	009b      	lsls	r3, r3, #2
 800b64e:	4413      	add	r3, r2
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	68dc      	ldr	r4, [r3, #12]
 800b654:	7bfb      	ldrb	r3, [r7, #15]
 800b656:	4a07      	ldr	r2, [pc, #28]	; (800b674 <disk_write+0x3c>)
 800b658:	4413      	add	r3, r2
 800b65a:	7a18      	ldrb	r0, [r3, #8]
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	687a      	ldr	r2, [r7, #4]
 800b660:	68b9      	ldr	r1, [r7, #8]
 800b662:	47a0      	blx	r4
 800b664:	4603      	mov	r3, r0
 800b666:	75fb      	strb	r3, [r7, #23]
  return res;
 800b668:	7dfb      	ldrb	r3, [r7, #23]
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	371c      	adds	r7, #28
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd90      	pop	{r4, r7, pc}
 800b672:	bf00      	nop
 800b674:	200008cc 	.word	0x200008cc

0800b678 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b084      	sub	sp, #16
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	4603      	mov	r3, r0
 800b680:	603a      	str	r2, [r7, #0]
 800b682:	71fb      	strb	r3, [r7, #7]
 800b684:	460b      	mov	r3, r1
 800b686:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b688:	79fb      	ldrb	r3, [r7, #7]
 800b68a:	4a09      	ldr	r2, [pc, #36]	; (800b6b0 <disk_ioctl+0x38>)
 800b68c:	009b      	lsls	r3, r3, #2
 800b68e:	4413      	add	r3, r2
 800b690:	685b      	ldr	r3, [r3, #4]
 800b692:	691b      	ldr	r3, [r3, #16]
 800b694:	79fa      	ldrb	r2, [r7, #7]
 800b696:	4906      	ldr	r1, [pc, #24]	; (800b6b0 <disk_ioctl+0x38>)
 800b698:	440a      	add	r2, r1
 800b69a:	7a10      	ldrb	r0, [r2, #8]
 800b69c:	79b9      	ldrb	r1, [r7, #6]
 800b69e:	683a      	ldr	r2, [r7, #0]
 800b6a0:	4798      	blx	r3
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	73fb      	strb	r3, [r7, #15]
  return res;
 800b6a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3710      	adds	r7, #16
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}
 800b6b0:	200008cc 	.word	0x200008cc

0800b6b4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b085      	sub	sp, #20
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	3301      	adds	r3, #1
 800b6c0:	781b      	ldrb	r3, [r3, #0]
 800b6c2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b6c4:	89fb      	ldrh	r3, [r7, #14]
 800b6c6:	021b      	lsls	r3, r3, #8
 800b6c8:	b21a      	sxth	r2, r3
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	b21b      	sxth	r3, r3
 800b6d0:	4313      	orrs	r3, r2
 800b6d2:	b21b      	sxth	r3, r3
 800b6d4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b6d6:	89fb      	ldrh	r3, [r7, #14]
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3714      	adds	r7, #20
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e2:	4770      	bx	lr

0800b6e4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b085      	sub	sp, #20
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	3303      	adds	r3, #3
 800b6f0:	781b      	ldrb	r3, [r3, #0]
 800b6f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	021b      	lsls	r3, r3, #8
 800b6f8:	687a      	ldr	r2, [r7, #4]
 800b6fa:	3202      	adds	r2, #2
 800b6fc:	7812      	ldrb	r2, [r2, #0]
 800b6fe:	4313      	orrs	r3, r2
 800b700:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	021b      	lsls	r3, r3, #8
 800b706:	687a      	ldr	r2, [r7, #4]
 800b708:	3201      	adds	r2, #1
 800b70a:	7812      	ldrb	r2, [r2, #0]
 800b70c:	4313      	orrs	r3, r2
 800b70e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	021b      	lsls	r3, r3, #8
 800b714:	687a      	ldr	r2, [r7, #4]
 800b716:	7812      	ldrb	r2, [r2, #0]
 800b718:	4313      	orrs	r3, r2
 800b71a:	60fb      	str	r3, [r7, #12]
	return rv;
 800b71c:	68fb      	ldr	r3, [r7, #12]
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3714      	adds	r7, #20
 800b722:	46bd      	mov	sp, r7
 800b724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b728:	4770      	bx	lr

0800b72a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b72a:	b480      	push	{r7}
 800b72c:	b083      	sub	sp, #12
 800b72e:	af00      	add	r7, sp, #0
 800b730:	6078      	str	r0, [r7, #4]
 800b732:	460b      	mov	r3, r1
 800b734:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	1c5a      	adds	r2, r3, #1
 800b73a:	607a      	str	r2, [r7, #4]
 800b73c:	887a      	ldrh	r2, [r7, #2]
 800b73e:	b2d2      	uxtb	r2, r2
 800b740:	701a      	strb	r2, [r3, #0]
 800b742:	887b      	ldrh	r3, [r7, #2]
 800b744:	0a1b      	lsrs	r3, r3, #8
 800b746:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	1c5a      	adds	r2, r3, #1
 800b74c:	607a      	str	r2, [r7, #4]
 800b74e:	887a      	ldrh	r2, [r7, #2]
 800b750:	b2d2      	uxtb	r2, r2
 800b752:	701a      	strb	r2, [r3, #0]
}
 800b754:	bf00      	nop
 800b756:	370c      	adds	r7, #12
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr

0800b760 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b760:	b480      	push	{r7}
 800b762:	b083      	sub	sp, #12
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	1c5a      	adds	r2, r3, #1
 800b76e:	607a      	str	r2, [r7, #4]
 800b770:	683a      	ldr	r2, [r7, #0]
 800b772:	b2d2      	uxtb	r2, r2
 800b774:	701a      	strb	r2, [r3, #0]
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	0a1b      	lsrs	r3, r3, #8
 800b77a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	1c5a      	adds	r2, r3, #1
 800b780:	607a      	str	r2, [r7, #4]
 800b782:	683a      	ldr	r2, [r7, #0]
 800b784:	b2d2      	uxtb	r2, r2
 800b786:	701a      	strb	r2, [r3, #0]
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	0a1b      	lsrs	r3, r3, #8
 800b78c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	1c5a      	adds	r2, r3, #1
 800b792:	607a      	str	r2, [r7, #4]
 800b794:	683a      	ldr	r2, [r7, #0]
 800b796:	b2d2      	uxtb	r2, r2
 800b798:	701a      	strb	r2, [r3, #0]
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	0a1b      	lsrs	r3, r3, #8
 800b79e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	1c5a      	adds	r2, r3, #1
 800b7a4:	607a      	str	r2, [r7, #4]
 800b7a6:	683a      	ldr	r2, [r7, #0]
 800b7a8:	b2d2      	uxtb	r2, r2
 800b7aa:	701a      	strb	r2, [r3, #0]
}
 800b7ac:	bf00      	nop
 800b7ae:	370c      	adds	r7, #12
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr

0800b7b8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b7b8:	b480      	push	{r7}
 800b7ba:	b087      	sub	sp, #28
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	60f8      	str	r0, [r7, #12]
 800b7c0:	60b9      	str	r1, [r7, #8]
 800b7c2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d00d      	beq.n	800b7ee <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b7d2:	693a      	ldr	r2, [r7, #16]
 800b7d4:	1c53      	adds	r3, r2, #1
 800b7d6:	613b      	str	r3, [r7, #16]
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	1c59      	adds	r1, r3, #1
 800b7dc:	6179      	str	r1, [r7, #20]
 800b7de:	7812      	ldrb	r2, [r2, #0]
 800b7e0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	3b01      	subs	r3, #1
 800b7e6:	607b      	str	r3, [r7, #4]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d1f1      	bne.n	800b7d2 <mem_cpy+0x1a>
	}
}
 800b7ee:	bf00      	nop
 800b7f0:	371c      	adds	r7, #28
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f8:	4770      	bx	lr

0800b7fa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b7fa:	b480      	push	{r7}
 800b7fc:	b087      	sub	sp, #28
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	60f8      	str	r0, [r7, #12]
 800b802:	60b9      	str	r1, [r7, #8]
 800b804:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	1c5a      	adds	r2, r3, #1
 800b80e:	617a      	str	r2, [r7, #20]
 800b810:	68ba      	ldr	r2, [r7, #8]
 800b812:	b2d2      	uxtb	r2, r2
 800b814:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	3b01      	subs	r3, #1
 800b81a:	607b      	str	r3, [r7, #4]
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d1f3      	bne.n	800b80a <mem_set+0x10>
}
 800b822:	bf00      	nop
 800b824:	bf00      	nop
 800b826:	371c      	adds	r7, #28
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr

0800b830 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b830:	b480      	push	{r7}
 800b832:	b089      	sub	sp, #36	; 0x24
 800b834:	af00      	add	r7, sp, #0
 800b836:	60f8      	str	r0, [r7, #12]
 800b838:	60b9      	str	r1, [r7, #8]
 800b83a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	61fb      	str	r3, [r7, #28]
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b844:	2300      	movs	r3, #0
 800b846:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b848:	69fb      	ldr	r3, [r7, #28]
 800b84a:	1c5a      	adds	r2, r3, #1
 800b84c:	61fa      	str	r2, [r7, #28]
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	4619      	mov	r1, r3
 800b852:	69bb      	ldr	r3, [r7, #24]
 800b854:	1c5a      	adds	r2, r3, #1
 800b856:	61ba      	str	r2, [r7, #24]
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	1acb      	subs	r3, r1, r3
 800b85c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	3b01      	subs	r3, #1
 800b862:	607b      	str	r3, [r7, #4]
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d002      	beq.n	800b870 <mem_cmp+0x40>
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d0eb      	beq.n	800b848 <mem_cmp+0x18>

	return r;
 800b870:	697b      	ldr	r3, [r7, #20]
}
 800b872:	4618      	mov	r0, r3
 800b874:	3724      	adds	r7, #36	; 0x24
 800b876:	46bd      	mov	sp, r7
 800b878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87c:	4770      	bx	lr

0800b87e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b87e:	b480      	push	{r7}
 800b880:	b083      	sub	sp, #12
 800b882:	af00      	add	r7, sp, #0
 800b884:	6078      	str	r0, [r7, #4]
 800b886:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b888:	e002      	b.n	800b890 <chk_chr+0x12>
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	3301      	adds	r3, #1
 800b88e:	607b      	str	r3, [r7, #4]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	781b      	ldrb	r3, [r3, #0]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d005      	beq.n	800b8a4 <chk_chr+0x26>
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	461a      	mov	r2, r3
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d1f2      	bne.n	800b88a <chk_chr+0xc>
	return *str;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	781b      	ldrb	r3, [r3, #0]
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	370c      	adds	r7, #12
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr

0800b8b4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b085      	sub	sp, #20
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b8be:	2300      	movs	r3, #0
 800b8c0:	60bb      	str	r3, [r7, #8]
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	60fb      	str	r3, [r7, #12]
 800b8c6:	e029      	b.n	800b91c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b8c8:	4a27      	ldr	r2, [pc, #156]	; (800b968 <chk_lock+0xb4>)
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	011b      	lsls	r3, r3, #4
 800b8ce:	4413      	add	r3, r2
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d01d      	beq.n	800b912 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b8d6:	4a24      	ldr	r2, [pc, #144]	; (800b968 <chk_lock+0xb4>)
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	011b      	lsls	r3, r3, #4
 800b8dc:	4413      	add	r3, r2
 800b8de:	681a      	ldr	r2, [r3, #0]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	429a      	cmp	r2, r3
 800b8e6:	d116      	bne.n	800b916 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b8e8:	4a1f      	ldr	r2, [pc, #124]	; (800b968 <chk_lock+0xb4>)
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	011b      	lsls	r3, r3, #4
 800b8ee:	4413      	add	r3, r2
 800b8f0:	3304      	adds	r3, #4
 800b8f2:	681a      	ldr	r2, [r3, #0]
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d10c      	bne.n	800b916 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b8fc:	4a1a      	ldr	r2, [pc, #104]	; (800b968 <chk_lock+0xb4>)
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	011b      	lsls	r3, r3, #4
 800b902:	4413      	add	r3, r2
 800b904:	3308      	adds	r3, #8
 800b906:	681a      	ldr	r2, [r3, #0]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d102      	bne.n	800b916 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b910:	e007      	b.n	800b922 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b912:	2301      	movs	r3, #1
 800b914:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	3301      	adds	r3, #1
 800b91a:	60fb      	str	r3, [r7, #12]
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	2b01      	cmp	r3, #1
 800b920:	d9d2      	bls.n	800b8c8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	2b02      	cmp	r3, #2
 800b926:	d109      	bne.n	800b93c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d102      	bne.n	800b934 <chk_lock+0x80>
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	2b02      	cmp	r3, #2
 800b932:	d101      	bne.n	800b938 <chk_lock+0x84>
 800b934:	2300      	movs	r3, #0
 800b936:	e010      	b.n	800b95a <chk_lock+0xa6>
 800b938:	2312      	movs	r3, #18
 800b93a:	e00e      	b.n	800b95a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d108      	bne.n	800b954 <chk_lock+0xa0>
 800b942:	4a09      	ldr	r2, [pc, #36]	; (800b968 <chk_lock+0xb4>)
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	011b      	lsls	r3, r3, #4
 800b948:	4413      	add	r3, r2
 800b94a:	330c      	adds	r3, #12
 800b94c:	881b      	ldrh	r3, [r3, #0]
 800b94e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b952:	d101      	bne.n	800b958 <chk_lock+0xa4>
 800b954:	2310      	movs	r3, #16
 800b956:	e000      	b.n	800b95a <chk_lock+0xa6>
 800b958:	2300      	movs	r3, #0
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3714      	adds	r7, #20
 800b95e:	46bd      	mov	sp, r7
 800b960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b964:	4770      	bx	lr
 800b966:	bf00      	nop
 800b968:	200008ac 	.word	0x200008ac

0800b96c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b96c:	b480      	push	{r7}
 800b96e:	b083      	sub	sp, #12
 800b970:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b972:	2300      	movs	r3, #0
 800b974:	607b      	str	r3, [r7, #4]
 800b976:	e002      	b.n	800b97e <enq_lock+0x12>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	3301      	adds	r3, #1
 800b97c:	607b      	str	r3, [r7, #4]
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2b01      	cmp	r3, #1
 800b982:	d806      	bhi.n	800b992 <enq_lock+0x26>
 800b984:	4a09      	ldr	r2, [pc, #36]	; (800b9ac <enq_lock+0x40>)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	011b      	lsls	r3, r3, #4
 800b98a:	4413      	add	r3, r2
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d1f2      	bne.n	800b978 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2b02      	cmp	r3, #2
 800b996:	bf14      	ite	ne
 800b998:	2301      	movne	r3, #1
 800b99a:	2300      	moveq	r3, #0
 800b99c:	b2db      	uxtb	r3, r3
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	370c      	adds	r7, #12
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a8:	4770      	bx	lr
 800b9aa:	bf00      	nop
 800b9ac:	200008ac 	.word	0x200008ac

0800b9b0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b085      	sub	sp, #20
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	60fb      	str	r3, [r7, #12]
 800b9be:	e01f      	b.n	800ba00 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b9c0:	4a41      	ldr	r2, [pc, #260]	; (800bac8 <inc_lock+0x118>)
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	011b      	lsls	r3, r3, #4
 800b9c6:	4413      	add	r3, r2
 800b9c8:	681a      	ldr	r2, [r3, #0]
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d113      	bne.n	800b9fa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b9d2:	4a3d      	ldr	r2, [pc, #244]	; (800bac8 <inc_lock+0x118>)
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	011b      	lsls	r3, r3, #4
 800b9d8:	4413      	add	r3, r2
 800b9da:	3304      	adds	r3, #4
 800b9dc:	681a      	ldr	r2, [r3, #0]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d109      	bne.n	800b9fa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b9e6:	4a38      	ldr	r2, [pc, #224]	; (800bac8 <inc_lock+0x118>)
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	011b      	lsls	r3, r3, #4
 800b9ec:	4413      	add	r3, r2
 800b9ee:	3308      	adds	r3, #8
 800b9f0:	681a      	ldr	r2, [r3, #0]
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d006      	beq.n	800ba08 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	3301      	adds	r3, #1
 800b9fe:	60fb      	str	r3, [r7, #12]
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2b01      	cmp	r3, #1
 800ba04:	d9dc      	bls.n	800b9c0 <inc_lock+0x10>
 800ba06:	e000      	b.n	800ba0a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ba08:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	2b02      	cmp	r3, #2
 800ba0e:	d132      	bne.n	800ba76 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ba10:	2300      	movs	r3, #0
 800ba12:	60fb      	str	r3, [r7, #12]
 800ba14:	e002      	b.n	800ba1c <inc_lock+0x6c>
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	3301      	adds	r3, #1
 800ba1a:	60fb      	str	r3, [r7, #12]
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	2b01      	cmp	r3, #1
 800ba20:	d806      	bhi.n	800ba30 <inc_lock+0x80>
 800ba22:	4a29      	ldr	r2, [pc, #164]	; (800bac8 <inc_lock+0x118>)
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	011b      	lsls	r3, r3, #4
 800ba28:	4413      	add	r3, r2
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d1f2      	bne.n	800ba16 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2b02      	cmp	r3, #2
 800ba34:	d101      	bne.n	800ba3a <inc_lock+0x8a>
 800ba36:	2300      	movs	r3, #0
 800ba38:	e040      	b.n	800babc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681a      	ldr	r2, [r3, #0]
 800ba3e:	4922      	ldr	r1, [pc, #136]	; (800bac8 <inc_lock+0x118>)
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	011b      	lsls	r3, r3, #4
 800ba44:	440b      	add	r3, r1
 800ba46:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	689a      	ldr	r2, [r3, #8]
 800ba4c:	491e      	ldr	r1, [pc, #120]	; (800bac8 <inc_lock+0x118>)
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	011b      	lsls	r3, r3, #4
 800ba52:	440b      	add	r3, r1
 800ba54:	3304      	adds	r3, #4
 800ba56:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	695a      	ldr	r2, [r3, #20]
 800ba5c:	491a      	ldr	r1, [pc, #104]	; (800bac8 <inc_lock+0x118>)
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	011b      	lsls	r3, r3, #4
 800ba62:	440b      	add	r3, r1
 800ba64:	3308      	adds	r3, #8
 800ba66:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ba68:	4a17      	ldr	r2, [pc, #92]	; (800bac8 <inc_lock+0x118>)
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	011b      	lsls	r3, r3, #4
 800ba6e:	4413      	add	r3, r2
 800ba70:	330c      	adds	r3, #12
 800ba72:	2200      	movs	r2, #0
 800ba74:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d009      	beq.n	800ba90 <inc_lock+0xe0>
 800ba7c:	4a12      	ldr	r2, [pc, #72]	; (800bac8 <inc_lock+0x118>)
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	011b      	lsls	r3, r3, #4
 800ba82:	4413      	add	r3, r2
 800ba84:	330c      	adds	r3, #12
 800ba86:	881b      	ldrh	r3, [r3, #0]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d001      	beq.n	800ba90 <inc_lock+0xe0>
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	e015      	b.n	800babc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d108      	bne.n	800baa8 <inc_lock+0xf8>
 800ba96:	4a0c      	ldr	r2, [pc, #48]	; (800bac8 <inc_lock+0x118>)
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	011b      	lsls	r3, r3, #4
 800ba9c:	4413      	add	r3, r2
 800ba9e:	330c      	adds	r3, #12
 800baa0:	881b      	ldrh	r3, [r3, #0]
 800baa2:	3301      	adds	r3, #1
 800baa4:	b29a      	uxth	r2, r3
 800baa6:	e001      	b.n	800baac <inc_lock+0xfc>
 800baa8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800baac:	4906      	ldr	r1, [pc, #24]	; (800bac8 <inc_lock+0x118>)
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	011b      	lsls	r3, r3, #4
 800bab2:	440b      	add	r3, r1
 800bab4:	330c      	adds	r3, #12
 800bab6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	3301      	adds	r3, #1
}
 800babc:	4618      	mov	r0, r3
 800babe:	3714      	adds	r7, #20
 800bac0:	46bd      	mov	sp, r7
 800bac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac6:	4770      	bx	lr
 800bac8:	200008ac 	.word	0x200008ac

0800bacc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800bacc:	b480      	push	{r7}
 800bace:	b085      	sub	sp, #20
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	3b01      	subs	r3, #1
 800bad8:	607b      	str	r3, [r7, #4]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2b01      	cmp	r3, #1
 800bade:	d825      	bhi.n	800bb2c <dec_lock+0x60>
		n = Files[i].ctr;
 800bae0:	4a17      	ldr	r2, [pc, #92]	; (800bb40 <dec_lock+0x74>)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	011b      	lsls	r3, r3, #4
 800bae6:	4413      	add	r3, r2
 800bae8:	330c      	adds	r3, #12
 800baea:	881b      	ldrh	r3, [r3, #0]
 800baec:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800baee:	89fb      	ldrh	r3, [r7, #14]
 800baf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800baf4:	d101      	bne.n	800bafa <dec_lock+0x2e>
 800baf6:	2300      	movs	r3, #0
 800baf8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800bafa:	89fb      	ldrh	r3, [r7, #14]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d002      	beq.n	800bb06 <dec_lock+0x3a>
 800bb00:	89fb      	ldrh	r3, [r7, #14]
 800bb02:	3b01      	subs	r3, #1
 800bb04:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800bb06:	4a0e      	ldr	r2, [pc, #56]	; (800bb40 <dec_lock+0x74>)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	011b      	lsls	r3, r3, #4
 800bb0c:	4413      	add	r3, r2
 800bb0e:	330c      	adds	r3, #12
 800bb10:	89fa      	ldrh	r2, [r7, #14]
 800bb12:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800bb14:	89fb      	ldrh	r3, [r7, #14]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d105      	bne.n	800bb26 <dec_lock+0x5a>
 800bb1a:	4a09      	ldr	r2, [pc, #36]	; (800bb40 <dec_lock+0x74>)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	011b      	lsls	r3, r3, #4
 800bb20:	4413      	add	r3, r2
 800bb22:	2200      	movs	r2, #0
 800bb24:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800bb26:	2300      	movs	r3, #0
 800bb28:	737b      	strb	r3, [r7, #13]
 800bb2a:	e001      	b.n	800bb30 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bb2c:	2302      	movs	r3, #2
 800bb2e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800bb30:	7b7b      	ldrb	r3, [r7, #13]
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3714      	adds	r7, #20
 800bb36:	46bd      	mov	sp, r7
 800bb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3c:	4770      	bx	lr
 800bb3e:	bf00      	nop
 800bb40:	200008ac 	.word	0x200008ac

0800bb44 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b085      	sub	sp, #20
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	60fb      	str	r3, [r7, #12]
 800bb50:	e010      	b.n	800bb74 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bb52:	4a0d      	ldr	r2, [pc, #52]	; (800bb88 <clear_lock+0x44>)
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	011b      	lsls	r3, r3, #4
 800bb58:	4413      	add	r3, r2
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	687a      	ldr	r2, [r7, #4]
 800bb5e:	429a      	cmp	r2, r3
 800bb60:	d105      	bne.n	800bb6e <clear_lock+0x2a>
 800bb62:	4a09      	ldr	r2, [pc, #36]	; (800bb88 <clear_lock+0x44>)
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	011b      	lsls	r3, r3, #4
 800bb68:	4413      	add	r3, r2
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	3301      	adds	r3, #1
 800bb72:	60fb      	str	r3, [r7, #12]
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	2b01      	cmp	r3, #1
 800bb78:	d9eb      	bls.n	800bb52 <clear_lock+0xe>
	}
}
 800bb7a:	bf00      	nop
 800bb7c:	bf00      	nop
 800bb7e:	3714      	adds	r7, #20
 800bb80:	46bd      	mov	sp, r7
 800bb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb86:	4770      	bx	lr
 800bb88:	200008ac 	.word	0x200008ac

0800bb8c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b086      	sub	sp, #24
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bb94:	2300      	movs	r3, #0
 800bb96:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	78db      	ldrb	r3, [r3, #3]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d034      	beq.n	800bc0a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	7858      	ldrb	r0, [r3, #1]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	697a      	ldr	r2, [r7, #20]
 800bbb4:	f7ff fd40 	bl	800b638 <disk_write>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d002      	beq.n	800bbc4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	73fb      	strb	r3, [r7, #15]
 800bbc2:	e022      	b.n	800bc0a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6a1b      	ldr	r3, [r3, #32]
 800bbce:	697a      	ldr	r2, [r7, #20]
 800bbd0:	1ad2      	subs	r2, r2, r3
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	699b      	ldr	r3, [r3, #24]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d217      	bcs.n	800bc0a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	789b      	ldrb	r3, [r3, #2]
 800bbde:	613b      	str	r3, [r7, #16]
 800bbe0:	e010      	b.n	800bc04 <sync_window+0x78>
					wsect += fs->fsize;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	699b      	ldr	r3, [r3, #24]
 800bbe6:	697a      	ldr	r2, [r7, #20]
 800bbe8:	4413      	add	r3, r2
 800bbea:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	7858      	ldrb	r0, [r3, #1]
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	697a      	ldr	r2, [r7, #20]
 800bbfa:	f7ff fd1d 	bl	800b638 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bbfe:	693b      	ldr	r3, [r7, #16]
 800bc00:	3b01      	subs	r3, #1
 800bc02:	613b      	str	r3, [r7, #16]
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	2b01      	cmp	r3, #1
 800bc08:	d8eb      	bhi.n	800bbe2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bc0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3718      	adds	r7, #24
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b084      	sub	sp, #16
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc26:	683a      	ldr	r2, [r7, #0]
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	d01b      	beq.n	800bc64 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f7ff ffad 	bl	800bb8c <sync_window>
 800bc32:	4603      	mov	r3, r0
 800bc34:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bc36:	7bfb      	ldrb	r3, [r7, #15]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d113      	bne.n	800bc64 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	7858      	ldrb	r0, [r3, #1]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bc46:	2301      	movs	r3, #1
 800bc48:	683a      	ldr	r2, [r7, #0]
 800bc4a:	f7ff fcd5 	bl	800b5f8 <disk_read>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d004      	beq.n	800bc5e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bc54:	f04f 33ff 	mov.w	r3, #4294967295
 800bc58:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	683a      	ldr	r2, [r7, #0]
 800bc62:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800bc64:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3710      	adds	r7, #16
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}
	...

0800bc70 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b084      	sub	sp, #16
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f7ff ff87 	bl	800bb8c <sync_window>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bc82:	7bfb      	ldrb	r3, [r7, #15]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d158      	bne.n	800bd3a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	781b      	ldrb	r3, [r3, #0]
 800bc8c:	2b03      	cmp	r3, #3
 800bc8e:	d148      	bne.n	800bd22 <sync_fs+0xb2>
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	791b      	ldrb	r3, [r3, #4]
 800bc94:	2b01      	cmp	r3, #1
 800bc96:	d144      	bne.n	800bd22 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	3330      	adds	r3, #48	; 0x30
 800bc9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bca0:	2100      	movs	r1, #0
 800bca2:	4618      	mov	r0, r3
 800bca4:	f7ff fda9 	bl	800b7fa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	3330      	adds	r3, #48	; 0x30
 800bcac:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bcb0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7ff fd38 	bl	800b72a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	3330      	adds	r3, #48	; 0x30
 800bcbe:	4921      	ldr	r1, [pc, #132]	; (800bd44 <sync_fs+0xd4>)
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f7ff fd4d 	bl	800b760 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	3330      	adds	r3, #48	; 0x30
 800bcca:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bcce:	491e      	ldr	r1, [pc, #120]	; (800bd48 <sync_fs+0xd8>)
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f7ff fd45 	bl	800b760 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	3330      	adds	r3, #48	; 0x30
 800bcda:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	691b      	ldr	r3, [r3, #16]
 800bce2:	4619      	mov	r1, r3
 800bce4:	4610      	mov	r0, r2
 800bce6:	f7ff fd3b 	bl	800b760 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	3330      	adds	r3, #48	; 0x30
 800bcee:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	68db      	ldr	r3, [r3, #12]
 800bcf6:	4619      	mov	r1, r3
 800bcf8:	4610      	mov	r0, r2
 800bcfa:	f7ff fd31 	bl	800b760 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	69db      	ldr	r3, [r3, #28]
 800bd02:	1c5a      	adds	r2, r3, #1
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	7858      	ldrb	r0, [r3, #1]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd16:	2301      	movs	r3, #1
 800bd18:	f7ff fc8e 	bl	800b638 <disk_write>
			fs->fsi_flag = 0;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	785b      	ldrb	r3, [r3, #1]
 800bd26:	2200      	movs	r2, #0
 800bd28:	2100      	movs	r1, #0
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7ff fca4 	bl	800b678 <disk_ioctl>
 800bd30:	4603      	mov	r3, r0
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d001      	beq.n	800bd3a <sync_fs+0xca>
 800bd36:	2301      	movs	r3, #1
 800bd38:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bd3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3710      	adds	r7, #16
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}
 800bd44:	41615252 	.word	0x41615252
 800bd48:	61417272 	.word	0x61417272

0800bd4c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b083      	sub	sp, #12
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	3b02      	subs	r3, #2
 800bd5a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	695b      	ldr	r3, [r3, #20]
 800bd60:	3b02      	subs	r3, #2
 800bd62:	683a      	ldr	r2, [r7, #0]
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d301      	bcc.n	800bd6c <clust2sect+0x20>
 800bd68:	2300      	movs	r3, #0
 800bd6a:	e008      	b.n	800bd7e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	895b      	ldrh	r3, [r3, #10]
 800bd70:	461a      	mov	r2, r3
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	fb03 f202 	mul.w	r2, r3, r2
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd7c:	4413      	add	r3, r2
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	370c      	adds	r7, #12
 800bd82:	46bd      	mov	sp, r7
 800bd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd88:	4770      	bx	lr

0800bd8a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bd8a:	b580      	push	{r7, lr}
 800bd8c:	b086      	sub	sp, #24
 800bd8e:	af00      	add	r7, sp, #0
 800bd90:	6078      	str	r0, [r7, #4]
 800bd92:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	d904      	bls.n	800bdaa <get_fat+0x20>
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	695b      	ldr	r3, [r3, #20]
 800bda4:	683a      	ldr	r2, [r7, #0]
 800bda6:	429a      	cmp	r2, r3
 800bda8:	d302      	bcc.n	800bdb0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800bdaa:	2301      	movs	r3, #1
 800bdac:	617b      	str	r3, [r7, #20]
 800bdae:	e08f      	b.n	800bed0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bdb0:	f04f 33ff 	mov.w	r3, #4294967295
 800bdb4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	781b      	ldrb	r3, [r3, #0]
 800bdba:	2b03      	cmp	r3, #3
 800bdbc:	d062      	beq.n	800be84 <get_fat+0xfa>
 800bdbe:	2b03      	cmp	r3, #3
 800bdc0:	dc7c      	bgt.n	800bebc <get_fat+0x132>
 800bdc2:	2b01      	cmp	r3, #1
 800bdc4:	d002      	beq.n	800bdcc <get_fat+0x42>
 800bdc6:	2b02      	cmp	r3, #2
 800bdc8:	d042      	beq.n	800be50 <get_fat+0xc6>
 800bdca:	e077      	b.n	800bebc <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	60fb      	str	r3, [r7, #12]
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	085b      	lsrs	r3, r3, #1
 800bdd4:	68fa      	ldr	r2, [r7, #12]
 800bdd6:	4413      	add	r3, r2
 800bdd8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	6a1a      	ldr	r2, [r3, #32]
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	0a5b      	lsrs	r3, r3, #9
 800bde2:	4413      	add	r3, r2
 800bde4:	4619      	mov	r1, r3
 800bde6:	6938      	ldr	r0, [r7, #16]
 800bde8:	f7ff ff14 	bl	800bc14 <move_window>
 800bdec:	4603      	mov	r3, r0
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d167      	bne.n	800bec2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	1c5a      	adds	r2, r3, #1
 800bdf6:	60fa      	str	r2, [r7, #12]
 800bdf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdfc:	693a      	ldr	r2, [r7, #16]
 800bdfe:	4413      	add	r3, r2
 800be00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800be04:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	6a1a      	ldr	r2, [r3, #32]
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	0a5b      	lsrs	r3, r3, #9
 800be0e:	4413      	add	r3, r2
 800be10:	4619      	mov	r1, r3
 800be12:	6938      	ldr	r0, [r7, #16]
 800be14:	f7ff fefe 	bl	800bc14 <move_window>
 800be18:	4603      	mov	r3, r0
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d153      	bne.n	800bec6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be24:	693a      	ldr	r2, [r7, #16]
 800be26:	4413      	add	r3, r2
 800be28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800be2c:	021b      	lsls	r3, r3, #8
 800be2e:	461a      	mov	r2, r3
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	4313      	orrs	r3, r2
 800be34:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	f003 0301 	and.w	r3, r3, #1
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d002      	beq.n	800be46 <get_fat+0xbc>
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	091b      	lsrs	r3, r3, #4
 800be44:	e002      	b.n	800be4c <get_fat+0xc2>
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800be4c:	617b      	str	r3, [r7, #20]
			break;
 800be4e:	e03f      	b.n	800bed0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	6a1a      	ldr	r2, [r3, #32]
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	0a1b      	lsrs	r3, r3, #8
 800be58:	4413      	add	r3, r2
 800be5a:	4619      	mov	r1, r3
 800be5c:	6938      	ldr	r0, [r7, #16]
 800be5e:	f7ff fed9 	bl	800bc14 <move_window>
 800be62:	4603      	mov	r3, r0
 800be64:	2b00      	cmp	r3, #0
 800be66:	d130      	bne.n	800beca <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	005b      	lsls	r3, r3, #1
 800be72:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800be76:	4413      	add	r3, r2
 800be78:	4618      	mov	r0, r3
 800be7a:	f7ff fc1b 	bl	800b6b4 <ld_word>
 800be7e:	4603      	mov	r3, r0
 800be80:	617b      	str	r3, [r7, #20]
			break;
 800be82:	e025      	b.n	800bed0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	6a1a      	ldr	r2, [r3, #32]
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	09db      	lsrs	r3, r3, #7
 800be8c:	4413      	add	r3, r2
 800be8e:	4619      	mov	r1, r3
 800be90:	6938      	ldr	r0, [r7, #16]
 800be92:	f7ff febf 	bl	800bc14 <move_window>
 800be96:	4603      	mov	r3, r0
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d118      	bne.n	800bece <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	009b      	lsls	r3, r3, #2
 800bea6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800beaa:	4413      	add	r3, r2
 800beac:	4618      	mov	r0, r3
 800beae:	f7ff fc19 	bl	800b6e4 <ld_dword>
 800beb2:	4603      	mov	r3, r0
 800beb4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800beb8:	617b      	str	r3, [r7, #20]
			break;
 800beba:	e009      	b.n	800bed0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bebc:	2301      	movs	r3, #1
 800bebe:	617b      	str	r3, [r7, #20]
 800bec0:	e006      	b.n	800bed0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bec2:	bf00      	nop
 800bec4:	e004      	b.n	800bed0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bec6:	bf00      	nop
 800bec8:	e002      	b.n	800bed0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800beca:	bf00      	nop
 800becc:	e000      	b.n	800bed0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bece:	bf00      	nop
		}
	}

	return val;
 800bed0:	697b      	ldr	r3, [r7, #20]
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3718      	adds	r7, #24
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}

0800beda <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800beda:	b590      	push	{r4, r7, lr}
 800bedc:	b089      	sub	sp, #36	; 0x24
 800bede:	af00      	add	r7, sp, #0
 800bee0:	60f8      	str	r0, [r7, #12]
 800bee2:	60b9      	str	r1, [r7, #8]
 800bee4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bee6:	2302      	movs	r3, #2
 800bee8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	2b01      	cmp	r3, #1
 800beee:	f240 80d2 	bls.w	800c096 <put_fat+0x1bc>
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	695b      	ldr	r3, [r3, #20]
 800bef6:	68ba      	ldr	r2, [r7, #8]
 800bef8:	429a      	cmp	r2, r3
 800befa:	f080 80cc 	bcs.w	800c096 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	781b      	ldrb	r3, [r3, #0]
 800bf02:	2b03      	cmp	r3, #3
 800bf04:	f000 8096 	beq.w	800c034 <put_fat+0x15a>
 800bf08:	2b03      	cmp	r3, #3
 800bf0a:	f300 80cd 	bgt.w	800c0a8 <put_fat+0x1ce>
 800bf0e:	2b01      	cmp	r3, #1
 800bf10:	d002      	beq.n	800bf18 <put_fat+0x3e>
 800bf12:	2b02      	cmp	r3, #2
 800bf14:	d06e      	beq.n	800bff4 <put_fat+0x11a>
 800bf16:	e0c7      	b.n	800c0a8 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	61bb      	str	r3, [r7, #24]
 800bf1c:	69bb      	ldr	r3, [r7, #24]
 800bf1e:	085b      	lsrs	r3, r3, #1
 800bf20:	69ba      	ldr	r2, [r7, #24]
 800bf22:	4413      	add	r3, r2
 800bf24:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	6a1a      	ldr	r2, [r3, #32]
 800bf2a:	69bb      	ldr	r3, [r7, #24]
 800bf2c:	0a5b      	lsrs	r3, r3, #9
 800bf2e:	4413      	add	r3, r2
 800bf30:	4619      	mov	r1, r3
 800bf32:	68f8      	ldr	r0, [r7, #12]
 800bf34:	f7ff fe6e 	bl	800bc14 <move_window>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bf3c:	7ffb      	ldrb	r3, [r7, #31]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	f040 80ab 	bne.w	800c09a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bf4a:	69bb      	ldr	r3, [r7, #24]
 800bf4c:	1c59      	adds	r1, r3, #1
 800bf4e:	61b9      	str	r1, [r7, #24]
 800bf50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf54:	4413      	add	r3, r2
 800bf56:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	f003 0301 	and.w	r3, r3, #1
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d00d      	beq.n	800bf7e <put_fat+0xa4>
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	b25b      	sxtb	r3, r3
 800bf68:	f003 030f 	and.w	r3, r3, #15
 800bf6c:	b25a      	sxtb	r2, r3
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	b2db      	uxtb	r3, r3
 800bf72:	011b      	lsls	r3, r3, #4
 800bf74:	b25b      	sxtb	r3, r3
 800bf76:	4313      	orrs	r3, r2
 800bf78:	b25b      	sxtb	r3, r3
 800bf7a:	b2db      	uxtb	r3, r3
 800bf7c:	e001      	b.n	800bf82 <put_fat+0xa8>
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	b2db      	uxtb	r3, r3
 800bf82:	697a      	ldr	r2, [r7, #20]
 800bf84:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	2201      	movs	r2, #1
 800bf8a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	6a1a      	ldr	r2, [r3, #32]
 800bf90:	69bb      	ldr	r3, [r7, #24]
 800bf92:	0a5b      	lsrs	r3, r3, #9
 800bf94:	4413      	add	r3, r2
 800bf96:	4619      	mov	r1, r3
 800bf98:	68f8      	ldr	r0, [r7, #12]
 800bf9a:	f7ff fe3b 	bl	800bc14 <move_window>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bfa2:	7ffb      	ldrb	r3, [r7, #31]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d17a      	bne.n	800c09e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bfae:	69bb      	ldr	r3, [r7, #24]
 800bfb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfb4:	4413      	add	r3, r2
 800bfb6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	f003 0301 	and.w	r3, r3, #1
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d003      	beq.n	800bfca <put_fat+0xf0>
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	091b      	lsrs	r3, r3, #4
 800bfc6:	b2db      	uxtb	r3, r3
 800bfc8:	e00e      	b.n	800bfe8 <put_fat+0x10e>
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	781b      	ldrb	r3, [r3, #0]
 800bfce:	b25b      	sxtb	r3, r3
 800bfd0:	f023 030f 	bic.w	r3, r3, #15
 800bfd4:	b25a      	sxtb	r2, r3
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	0a1b      	lsrs	r3, r3, #8
 800bfda:	b25b      	sxtb	r3, r3
 800bfdc:	f003 030f 	and.w	r3, r3, #15
 800bfe0:	b25b      	sxtb	r3, r3
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	b25b      	sxtb	r3, r3
 800bfe6:	b2db      	uxtb	r3, r3
 800bfe8:	697a      	ldr	r2, [r7, #20]
 800bfea:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	2201      	movs	r2, #1
 800bff0:	70da      	strb	r2, [r3, #3]
			break;
 800bff2:	e059      	b.n	800c0a8 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	6a1a      	ldr	r2, [r3, #32]
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	0a1b      	lsrs	r3, r3, #8
 800bffc:	4413      	add	r3, r2
 800bffe:	4619      	mov	r1, r3
 800c000:	68f8      	ldr	r0, [r7, #12]
 800c002:	f7ff fe07 	bl	800bc14 <move_window>
 800c006:	4603      	mov	r3, r0
 800c008:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c00a:	7ffb      	ldrb	r3, [r7, #31]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d148      	bne.n	800c0a2 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	005b      	lsls	r3, r3, #1
 800c01a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c01e:	4413      	add	r3, r2
 800c020:	687a      	ldr	r2, [r7, #4]
 800c022:	b292      	uxth	r2, r2
 800c024:	4611      	mov	r1, r2
 800c026:	4618      	mov	r0, r3
 800c028:	f7ff fb7f 	bl	800b72a <st_word>
			fs->wflag = 1;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	2201      	movs	r2, #1
 800c030:	70da      	strb	r2, [r3, #3]
			break;
 800c032:	e039      	b.n	800c0a8 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	6a1a      	ldr	r2, [r3, #32]
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	09db      	lsrs	r3, r3, #7
 800c03c:	4413      	add	r3, r2
 800c03e:	4619      	mov	r1, r3
 800c040:	68f8      	ldr	r0, [r7, #12]
 800c042:	f7ff fde7 	bl	800bc14 <move_window>
 800c046:	4603      	mov	r3, r0
 800c048:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c04a:	7ffb      	ldrb	r3, [r7, #31]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d12a      	bne.n	800c0a6 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	009b      	lsls	r3, r3, #2
 800c060:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c064:	4413      	add	r3, r2
 800c066:	4618      	mov	r0, r3
 800c068:	f7ff fb3c 	bl	800b6e4 <ld_dword>
 800c06c:	4603      	mov	r3, r0
 800c06e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c072:	4323      	orrs	r3, r4
 800c074:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	009b      	lsls	r3, r3, #2
 800c080:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c084:	4413      	add	r3, r2
 800c086:	6879      	ldr	r1, [r7, #4]
 800c088:	4618      	mov	r0, r3
 800c08a:	f7ff fb69 	bl	800b760 <st_dword>
			fs->wflag = 1;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	2201      	movs	r2, #1
 800c092:	70da      	strb	r2, [r3, #3]
			break;
 800c094:	e008      	b.n	800c0a8 <put_fat+0x1ce>
		}
	}
 800c096:	bf00      	nop
 800c098:	e006      	b.n	800c0a8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c09a:	bf00      	nop
 800c09c:	e004      	b.n	800c0a8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c09e:	bf00      	nop
 800c0a0:	e002      	b.n	800c0a8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c0a2:	bf00      	nop
 800c0a4:	e000      	b.n	800c0a8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c0a6:	bf00      	nop
	return res;
 800c0a8:	7ffb      	ldrb	r3, [r7, #31]
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3724      	adds	r7, #36	; 0x24
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd90      	pop	{r4, r7, pc}

0800c0b2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c0b2:	b580      	push	{r7, lr}
 800c0b4:	b088      	sub	sp, #32
 800c0b6:	af00      	add	r7, sp, #0
 800c0b8:	60f8      	str	r0, [r7, #12]
 800c0ba:	60b9      	str	r1, [r7, #8]
 800c0bc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	2b01      	cmp	r3, #1
 800c0cc:	d904      	bls.n	800c0d8 <remove_chain+0x26>
 800c0ce:	69bb      	ldr	r3, [r7, #24]
 800c0d0:	695b      	ldr	r3, [r3, #20]
 800c0d2:	68ba      	ldr	r2, [r7, #8]
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d301      	bcc.n	800c0dc <remove_chain+0x2a>
 800c0d8:	2302      	movs	r3, #2
 800c0da:	e04b      	b.n	800c174 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d00c      	beq.n	800c0fc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c0e2:	f04f 32ff 	mov.w	r2, #4294967295
 800c0e6:	6879      	ldr	r1, [r7, #4]
 800c0e8:	69b8      	ldr	r0, [r7, #24]
 800c0ea:	f7ff fef6 	bl	800beda <put_fat>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c0f2:	7ffb      	ldrb	r3, [r7, #31]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d001      	beq.n	800c0fc <remove_chain+0x4a>
 800c0f8:	7ffb      	ldrb	r3, [r7, #31]
 800c0fa:	e03b      	b.n	800c174 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c0fc:	68b9      	ldr	r1, [r7, #8]
 800c0fe:	68f8      	ldr	r0, [r7, #12]
 800c100:	f7ff fe43 	bl	800bd8a <get_fat>
 800c104:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d031      	beq.n	800c170 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c10c:	697b      	ldr	r3, [r7, #20]
 800c10e:	2b01      	cmp	r3, #1
 800c110:	d101      	bne.n	800c116 <remove_chain+0x64>
 800c112:	2302      	movs	r3, #2
 800c114:	e02e      	b.n	800c174 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c11c:	d101      	bne.n	800c122 <remove_chain+0x70>
 800c11e:	2301      	movs	r3, #1
 800c120:	e028      	b.n	800c174 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c122:	2200      	movs	r2, #0
 800c124:	68b9      	ldr	r1, [r7, #8]
 800c126:	69b8      	ldr	r0, [r7, #24]
 800c128:	f7ff fed7 	bl	800beda <put_fat>
 800c12c:	4603      	mov	r3, r0
 800c12e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c130:	7ffb      	ldrb	r3, [r7, #31]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d001      	beq.n	800c13a <remove_chain+0x88>
 800c136:	7ffb      	ldrb	r3, [r7, #31]
 800c138:	e01c      	b.n	800c174 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c13a:	69bb      	ldr	r3, [r7, #24]
 800c13c:	691a      	ldr	r2, [r3, #16]
 800c13e:	69bb      	ldr	r3, [r7, #24]
 800c140:	695b      	ldr	r3, [r3, #20]
 800c142:	3b02      	subs	r3, #2
 800c144:	429a      	cmp	r2, r3
 800c146:	d20b      	bcs.n	800c160 <remove_chain+0xae>
			fs->free_clst++;
 800c148:	69bb      	ldr	r3, [r7, #24]
 800c14a:	691b      	ldr	r3, [r3, #16]
 800c14c:	1c5a      	adds	r2, r3, #1
 800c14e:	69bb      	ldr	r3, [r7, #24]
 800c150:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800c152:	69bb      	ldr	r3, [r7, #24]
 800c154:	791b      	ldrb	r3, [r3, #4]
 800c156:	f043 0301 	orr.w	r3, r3, #1
 800c15a:	b2da      	uxtb	r2, r3
 800c15c:	69bb      	ldr	r3, [r7, #24]
 800c15e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c164:	69bb      	ldr	r3, [r7, #24]
 800c166:	695b      	ldr	r3, [r3, #20]
 800c168:	68ba      	ldr	r2, [r7, #8]
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d3c6      	bcc.n	800c0fc <remove_chain+0x4a>
 800c16e:	e000      	b.n	800c172 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c170:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c172:	2300      	movs	r3, #0
}
 800c174:	4618      	mov	r0, r3
 800c176:	3720      	adds	r7, #32
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}

0800c17c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b088      	sub	sp, #32
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d10d      	bne.n	800c1ae <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	68db      	ldr	r3, [r3, #12]
 800c196:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c198:	69bb      	ldr	r3, [r7, #24]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d004      	beq.n	800c1a8 <create_chain+0x2c>
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	695b      	ldr	r3, [r3, #20]
 800c1a2:	69ba      	ldr	r2, [r7, #24]
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	d31b      	bcc.n	800c1e0 <create_chain+0x64>
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	61bb      	str	r3, [r7, #24]
 800c1ac:	e018      	b.n	800c1e0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c1ae:	6839      	ldr	r1, [r7, #0]
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f7ff fdea 	bl	800bd8a <get_fat>
 800c1b6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	2b01      	cmp	r3, #1
 800c1bc:	d801      	bhi.n	800c1c2 <create_chain+0x46>
 800c1be:	2301      	movs	r3, #1
 800c1c0:	e070      	b.n	800c2a4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1c8:	d101      	bne.n	800c1ce <create_chain+0x52>
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	e06a      	b.n	800c2a4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	695b      	ldr	r3, [r3, #20]
 800c1d2:	68fa      	ldr	r2, [r7, #12]
 800c1d4:	429a      	cmp	r2, r3
 800c1d6:	d201      	bcs.n	800c1dc <create_chain+0x60>
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	e063      	b.n	800c2a4 <create_chain+0x128>
		scl = clst;
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c1e0:	69bb      	ldr	r3, [r7, #24]
 800c1e2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c1e4:	69fb      	ldr	r3, [r7, #28]
 800c1e6:	3301      	adds	r3, #1
 800c1e8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	695b      	ldr	r3, [r3, #20]
 800c1ee:	69fa      	ldr	r2, [r7, #28]
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d307      	bcc.n	800c204 <create_chain+0x88>
				ncl = 2;
 800c1f4:	2302      	movs	r3, #2
 800c1f6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c1f8:	69fa      	ldr	r2, [r7, #28]
 800c1fa:	69bb      	ldr	r3, [r7, #24]
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d901      	bls.n	800c204 <create_chain+0x88>
 800c200:	2300      	movs	r3, #0
 800c202:	e04f      	b.n	800c2a4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c204:	69f9      	ldr	r1, [r7, #28]
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f7ff fdbf 	bl	800bd8a <get_fat>
 800c20c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d00e      	beq.n	800c232 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	2b01      	cmp	r3, #1
 800c218:	d003      	beq.n	800c222 <create_chain+0xa6>
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c220:	d101      	bne.n	800c226 <create_chain+0xaa>
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	e03e      	b.n	800c2a4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c226:	69fa      	ldr	r2, [r7, #28]
 800c228:	69bb      	ldr	r3, [r7, #24]
 800c22a:	429a      	cmp	r2, r3
 800c22c:	d1da      	bne.n	800c1e4 <create_chain+0x68>
 800c22e:	2300      	movs	r3, #0
 800c230:	e038      	b.n	800c2a4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c232:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c234:	f04f 32ff 	mov.w	r2, #4294967295
 800c238:	69f9      	ldr	r1, [r7, #28]
 800c23a:	6938      	ldr	r0, [r7, #16]
 800c23c:	f7ff fe4d 	bl	800beda <put_fat>
 800c240:	4603      	mov	r3, r0
 800c242:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c244:	7dfb      	ldrb	r3, [r7, #23]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d109      	bne.n	800c25e <create_chain+0xe2>
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d006      	beq.n	800c25e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c250:	69fa      	ldr	r2, [r7, #28]
 800c252:	6839      	ldr	r1, [r7, #0]
 800c254:	6938      	ldr	r0, [r7, #16]
 800c256:	f7ff fe40 	bl	800beda <put_fat>
 800c25a:	4603      	mov	r3, r0
 800c25c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c25e:	7dfb      	ldrb	r3, [r7, #23]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d116      	bne.n	800c292 <create_chain+0x116>
		fs->last_clst = ncl;
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	69fa      	ldr	r2, [r7, #28]
 800c268:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	691a      	ldr	r2, [r3, #16]
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	695b      	ldr	r3, [r3, #20]
 800c272:	3b02      	subs	r3, #2
 800c274:	429a      	cmp	r2, r3
 800c276:	d804      	bhi.n	800c282 <create_chain+0x106>
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	691b      	ldr	r3, [r3, #16]
 800c27c:	1e5a      	subs	r2, r3, #1
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	791b      	ldrb	r3, [r3, #4]
 800c286:	f043 0301 	orr.w	r3, r3, #1
 800c28a:	b2da      	uxtb	r2, r3
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	711a      	strb	r2, [r3, #4]
 800c290:	e007      	b.n	800c2a2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c292:	7dfb      	ldrb	r3, [r7, #23]
 800c294:	2b01      	cmp	r3, #1
 800c296:	d102      	bne.n	800c29e <create_chain+0x122>
 800c298:	f04f 33ff 	mov.w	r3, #4294967295
 800c29c:	e000      	b.n	800c2a0 <create_chain+0x124>
 800c29e:	2301      	movs	r3, #1
 800c2a0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c2a2:	69fb      	ldr	r3, [r7, #28]
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3720      	adds	r7, #32
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}

0800c2ac <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	b087      	sub	sp, #28
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2c0:	3304      	adds	r3, #4
 800c2c2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	0a5b      	lsrs	r3, r3, #9
 800c2c8:	68fa      	ldr	r2, [r7, #12]
 800c2ca:	8952      	ldrh	r2, [r2, #10]
 800c2cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2d0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c2d2:	693b      	ldr	r3, [r7, #16]
 800c2d4:	1d1a      	adds	r2, r3, #4
 800c2d6:	613a      	str	r2, [r7, #16]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d101      	bne.n	800c2e6 <clmt_clust+0x3a>
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	e010      	b.n	800c308 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c2e6:	697a      	ldr	r2, [r7, #20]
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	d307      	bcc.n	800c2fe <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c2ee:	697a      	ldr	r2, [r7, #20]
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	1ad3      	subs	r3, r2, r3
 800c2f4:	617b      	str	r3, [r7, #20]
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	3304      	adds	r3, #4
 800c2fa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c2fc:	e7e9      	b.n	800c2d2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c2fe:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c300:	693b      	ldr	r3, [r7, #16]
 800c302:	681a      	ldr	r2, [r3, #0]
 800c304:	697b      	ldr	r3, [r7, #20]
 800c306:	4413      	add	r3, r2
}
 800c308:	4618      	mov	r0, r3
 800c30a:	371c      	adds	r7, #28
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr

0800c314 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b086      	sub	sp, #24
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c32a:	d204      	bcs.n	800c336 <dir_sdi+0x22>
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	f003 031f 	and.w	r3, r3, #31
 800c332:	2b00      	cmp	r3, #0
 800c334:	d001      	beq.n	800c33a <dir_sdi+0x26>
		return FR_INT_ERR;
 800c336:	2302      	movs	r3, #2
 800c338:	e063      	b.n	800c402 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	683a      	ldr	r2, [r7, #0]
 800c33e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	689b      	ldr	r3, [r3, #8]
 800c344:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d106      	bne.n	800c35a <dir_sdi+0x46>
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	781b      	ldrb	r3, [r3, #0]
 800c350:	2b02      	cmp	r3, #2
 800c352:	d902      	bls.n	800c35a <dir_sdi+0x46>
		clst = fs->dirbase;
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c358:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d10c      	bne.n	800c37a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	095b      	lsrs	r3, r3, #5
 800c364:	693a      	ldr	r2, [r7, #16]
 800c366:	8912      	ldrh	r2, [r2, #8]
 800c368:	4293      	cmp	r3, r2
 800c36a:	d301      	bcc.n	800c370 <dir_sdi+0x5c>
 800c36c:	2302      	movs	r3, #2
 800c36e:	e048      	b.n	800c402 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	61da      	str	r2, [r3, #28]
 800c378:	e029      	b.n	800c3ce <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	895b      	ldrh	r3, [r3, #10]
 800c37e:	025b      	lsls	r3, r3, #9
 800c380:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c382:	e019      	b.n	800c3b8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6979      	ldr	r1, [r7, #20]
 800c388:	4618      	mov	r0, r3
 800c38a:	f7ff fcfe 	bl	800bd8a <get_fat>
 800c38e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c390:	697b      	ldr	r3, [r7, #20]
 800c392:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c396:	d101      	bne.n	800c39c <dir_sdi+0x88>
 800c398:	2301      	movs	r3, #1
 800c39a:	e032      	b.n	800c402 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c39c:	697b      	ldr	r3, [r7, #20]
 800c39e:	2b01      	cmp	r3, #1
 800c3a0:	d904      	bls.n	800c3ac <dir_sdi+0x98>
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	695b      	ldr	r3, [r3, #20]
 800c3a6:	697a      	ldr	r2, [r7, #20]
 800c3a8:	429a      	cmp	r2, r3
 800c3aa:	d301      	bcc.n	800c3b0 <dir_sdi+0x9c>
 800c3ac:	2302      	movs	r3, #2
 800c3ae:	e028      	b.n	800c402 <dir_sdi+0xee>
			ofs -= csz;
 800c3b0:	683a      	ldr	r2, [r7, #0]
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	1ad3      	subs	r3, r2, r3
 800c3b6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c3b8:	683a      	ldr	r2, [r7, #0]
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	d2e1      	bcs.n	800c384 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c3c0:	6979      	ldr	r1, [r7, #20]
 800c3c2:	6938      	ldr	r0, [r7, #16]
 800c3c4:	f7ff fcc2 	bl	800bd4c <clust2sect>
 800c3c8:	4602      	mov	r2, r0
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	697a      	ldr	r2, [r7, #20]
 800c3d2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	69db      	ldr	r3, [r3, #28]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d101      	bne.n	800c3e0 <dir_sdi+0xcc>
 800c3dc:	2302      	movs	r3, #2
 800c3de:	e010      	b.n	800c402 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	69da      	ldr	r2, [r3, #28]
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	0a5b      	lsrs	r3, r3, #9
 800c3e8:	441a      	add	r2, r3
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3fa:	441a      	add	r2, r3
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c400:	2300      	movs	r3, #0
}
 800c402:	4618      	mov	r0, r3
 800c404:	3718      	adds	r7, #24
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}

0800c40a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c40a:	b580      	push	{r7, lr}
 800c40c:	b086      	sub	sp, #24
 800c40e:	af00      	add	r7, sp, #0
 800c410:	6078      	str	r0, [r7, #4]
 800c412:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	695b      	ldr	r3, [r3, #20]
 800c41e:	3320      	adds	r3, #32
 800c420:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	69db      	ldr	r3, [r3, #28]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d003      	beq.n	800c432 <dir_next+0x28>
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c430:	d301      	bcc.n	800c436 <dir_next+0x2c>
 800c432:	2304      	movs	r3, #4
 800c434:	e0aa      	b.n	800c58c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	f040 8098 	bne.w	800c572 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	69db      	ldr	r3, [r3, #28]
 800c446:	1c5a      	adds	r2, r3, #1
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	699b      	ldr	r3, [r3, #24]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d10b      	bne.n	800c46c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	095b      	lsrs	r3, r3, #5
 800c458:	68fa      	ldr	r2, [r7, #12]
 800c45a:	8912      	ldrh	r2, [r2, #8]
 800c45c:	4293      	cmp	r3, r2
 800c45e:	f0c0 8088 	bcc.w	800c572 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2200      	movs	r2, #0
 800c466:	61da      	str	r2, [r3, #28]
 800c468:	2304      	movs	r3, #4
 800c46a:	e08f      	b.n	800c58c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	0a5b      	lsrs	r3, r3, #9
 800c470:	68fa      	ldr	r2, [r7, #12]
 800c472:	8952      	ldrh	r2, [r2, #10]
 800c474:	3a01      	subs	r2, #1
 800c476:	4013      	ands	r3, r2
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d17a      	bne.n	800c572 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c47c:	687a      	ldr	r2, [r7, #4]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	699b      	ldr	r3, [r3, #24]
 800c482:	4619      	mov	r1, r3
 800c484:	4610      	mov	r0, r2
 800c486:	f7ff fc80 	bl	800bd8a <get_fat>
 800c48a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	2b01      	cmp	r3, #1
 800c490:	d801      	bhi.n	800c496 <dir_next+0x8c>
 800c492:	2302      	movs	r3, #2
 800c494:	e07a      	b.n	800c58c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c49c:	d101      	bne.n	800c4a2 <dir_next+0x98>
 800c49e:	2301      	movs	r3, #1
 800c4a0:	e074      	b.n	800c58c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	695b      	ldr	r3, [r3, #20]
 800c4a6:	697a      	ldr	r2, [r7, #20]
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	d358      	bcc.n	800c55e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d104      	bne.n	800c4bc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	61da      	str	r2, [r3, #28]
 800c4b8:	2304      	movs	r3, #4
 800c4ba:	e067      	b.n	800c58c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c4bc:	687a      	ldr	r2, [r7, #4]
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	699b      	ldr	r3, [r3, #24]
 800c4c2:	4619      	mov	r1, r3
 800c4c4:	4610      	mov	r0, r2
 800c4c6:	f7ff fe59 	bl	800c17c <create_chain>
 800c4ca:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d101      	bne.n	800c4d6 <dir_next+0xcc>
 800c4d2:	2307      	movs	r3, #7
 800c4d4:	e05a      	b.n	800c58c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	2b01      	cmp	r3, #1
 800c4da:	d101      	bne.n	800c4e0 <dir_next+0xd6>
 800c4dc:	2302      	movs	r3, #2
 800c4de:	e055      	b.n	800c58c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c4e0:	697b      	ldr	r3, [r7, #20]
 800c4e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4e6:	d101      	bne.n	800c4ec <dir_next+0xe2>
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	e04f      	b.n	800c58c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c4ec:	68f8      	ldr	r0, [r7, #12]
 800c4ee:	f7ff fb4d 	bl	800bb8c <sync_window>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d001      	beq.n	800c4fc <dir_next+0xf2>
 800c4f8:	2301      	movs	r3, #1
 800c4fa:	e047      	b.n	800c58c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	3330      	adds	r3, #48	; 0x30
 800c500:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c504:	2100      	movs	r1, #0
 800c506:	4618      	mov	r0, r3
 800c508:	f7ff f977 	bl	800b7fa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c50c:	2300      	movs	r3, #0
 800c50e:	613b      	str	r3, [r7, #16]
 800c510:	6979      	ldr	r1, [r7, #20]
 800c512:	68f8      	ldr	r0, [r7, #12]
 800c514:	f7ff fc1a 	bl	800bd4c <clust2sect>
 800c518:	4602      	mov	r2, r0
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	62da      	str	r2, [r3, #44]	; 0x2c
 800c51e:	e012      	b.n	800c546 <dir_next+0x13c>
						fs->wflag = 1;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	2201      	movs	r2, #1
 800c524:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c526:	68f8      	ldr	r0, [r7, #12]
 800c528:	f7ff fb30 	bl	800bb8c <sync_window>
 800c52c:	4603      	mov	r3, r0
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d001      	beq.n	800c536 <dir_next+0x12c>
 800c532:	2301      	movs	r3, #1
 800c534:	e02a      	b.n	800c58c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c536:	693b      	ldr	r3, [r7, #16]
 800c538:	3301      	adds	r3, #1
 800c53a:	613b      	str	r3, [r7, #16]
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c540:	1c5a      	adds	r2, r3, #1
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	62da      	str	r2, [r3, #44]	; 0x2c
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	895b      	ldrh	r3, [r3, #10]
 800c54a:	461a      	mov	r2, r3
 800c54c:	693b      	ldr	r3, [r7, #16]
 800c54e:	4293      	cmp	r3, r2
 800c550:	d3e6      	bcc.n	800c520 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	1ad2      	subs	r2, r2, r3
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	697a      	ldr	r2, [r7, #20]
 800c562:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c564:	6979      	ldr	r1, [r7, #20]
 800c566:	68f8      	ldr	r0, [r7, #12]
 800c568:	f7ff fbf0 	bl	800bd4c <clust2sect>
 800c56c:	4602      	mov	r2, r0
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	68ba      	ldr	r2, [r7, #8]
 800c576:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c584:	441a      	add	r2, r3
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c58a:	2300      	movs	r3, #0
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3718      	adds	r7, #24
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}

0800c594 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b086      	sub	sp, #24
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c5a4:	2100      	movs	r1, #0
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f7ff feb4 	bl	800c314 <dir_sdi>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c5b0:	7dfb      	ldrb	r3, [r7, #23]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d12b      	bne.n	800c60e <dir_alloc+0x7a>
		n = 0;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	69db      	ldr	r3, [r3, #28]
 800c5be:	4619      	mov	r1, r3
 800c5c0:	68f8      	ldr	r0, [r7, #12]
 800c5c2:	f7ff fb27 	bl	800bc14 <move_window>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c5ca:	7dfb      	ldrb	r3, [r7, #23]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d11d      	bne.n	800c60c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6a1b      	ldr	r3, [r3, #32]
 800c5d4:	781b      	ldrb	r3, [r3, #0]
 800c5d6:	2be5      	cmp	r3, #229	; 0xe5
 800c5d8:	d004      	beq.n	800c5e4 <dir_alloc+0x50>
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	6a1b      	ldr	r3, [r3, #32]
 800c5de:	781b      	ldrb	r3, [r3, #0]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d107      	bne.n	800c5f4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	3301      	adds	r3, #1
 800c5e8:	613b      	str	r3, [r7, #16]
 800c5ea:	693a      	ldr	r2, [r7, #16]
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	d102      	bne.n	800c5f8 <dir_alloc+0x64>
 800c5f2:	e00c      	b.n	800c60e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c5f8:	2101      	movs	r1, #1
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f7ff ff05 	bl	800c40a <dir_next>
 800c600:	4603      	mov	r3, r0
 800c602:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c604:	7dfb      	ldrb	r3, [r7, #23]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d0d7      	beq.n	800c5ba <dir_alloc+0x26>
 800c60a:	e000      	b.n	800c60e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c60c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c60e:	7dfb      	ldrb	r3, [r7, #23]
 800c610:	2b04      	cmp	r3, #4
 800c612:	d101      	bne.n	800c618 <dir_alloc+0x84>
 800c614:	2307      	movs	r3, #7
 800c616:	75fb      	strb	r3, [r7, #23]
	return res;
 800c618:	7dfb      	ldrb	r3, [r7, #23]
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	3718      	adds	r7, #24
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}

0800c622 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c622:	b580      	push	{r7, lr}
 800c624:	b084      	sub	sp, #16
 800c626:	af00      	add	r7, sp, #0
 800c628:	6078      	str	r0, [r7, #4]
 800c62a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	331a      	adds	r3, #26
 800c630:	4618      	mov	r0, r3
 800c632:	f7ff f83f 	bl	800b6b4 <ld_word>
 800c636:	4603      	mov	r3, r0
 800c638:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	781b      	ldrb	r3, [r3, #0]
 800c63e:	2b03      	cmp	r3, #3
 800c640:	d109      	bne.n	800c656 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	3314      	adds	r3, #20
 800c646:	4618      	mov	r0, r3
 800c648:	f7ff f834 	bl	800b6b4 <ld_word>
 800c64c:	4603      	mov	r3, r0
 800c64e:	041b      	lsls	r3, r3, #16
 800c650:	68fa      	ldr	r2, [r7, #12]
 800c652:	4313      	orrs	r3, r2
 800c654:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c656:	68fb      	ldr	r3, [r7, #12]
}
 800c658:	4618      	mov	r0, r3
 800c65a:	3710      	adds	r7, #16
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}

0800c660 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b084      	sub	sp, #16
 800c664:	af00      	add	r7, sp, #0
 800c666:	60f8      	str	r0, [r7, #12]
 800c668:	60b9      	str	r1, [r7, #8]
 800c66a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	331a      	adds	r3, #26
 800c670:	687a      	ldr	r2, [r7, #4]
 800c672:	b292      	uxth	r2, r2
 800c674:	4611      	mov	r1, r2
 800c676:	4618      	mov	r0, r3
 800c678:	f7ff f857 	bl	800b72a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	2b03      	cmp	r3, #3
 800c682:	d109      	bne.n	800c698 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	f103 0214 	add.w	r2, r3, #20
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	0c1b      	lsrs	r3, r3, #16
 800c68e:	b29b      	uxth	r3, r3
 800c690:	4619      	mov	r1, r3
 800c692:	4610      	mov	r0, r2
 800c694:	f7ff f849 	bl	800b72a <st_word>
	}
}
 800c698:	bf00      	nop
 800c69a:	3710      	adds	r7, #16
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd80      	pop	{r7, pc}

0800c6a0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b086      	sub	sp, #24
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c6ae:	2100      	movs	r1, #0
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f7ff fe2f 	bl	800c314 <dir_sdi>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c6ba:	7dfb      	ldrb	r3, [r7, #23]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d001      	beq.n	800c6c4 <dir_find+0x24>
 800c6c0:	7dfb      	ldrb	r3, [r7, #23]
 800c6c2:	e03e      	b.n	800c742 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	69db      	ldr	r3, [r3, #28]
 800c6c8:	4619      	mov	r1, r3
 800c6ca:	6938      	ldr	r0, [r7, #16]
 800c6cc:	f7ff faa2 	bl	800bc14 <move_window>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c6d4:	7dfb      	ldrb	r3, [r7, #23]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d12f      	bne.n	800c73a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	6a1b      	ldr	r3, [r3, #32]
 800c6de:	781b      	ldrb	r3, [r3, #0]
 800c6e0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c6e2:	7bfb      	ldrb	r3, [r7, #15]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d102      	bne.n	800c6ee <dir_find+0x4e>
 800c6e8:	2304      	movs	r3, #4
 800c6ea:	75fb      	strb	r3, [r7, #23]
 800c6ec:	e028      	b.n	800c740 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6a1b      	ldr	r3, [r3, #32]
 800c6f2:	330b      	adds	r3, #11
 800c6f4:	781b      	ldrb	r3, [r3, #0]
 800c6f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c6fa:	b2da      	uxtb	r2, r3
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6a1b      	ldr	r3, [r3, #32]
 800c704:	330b      	adds	r3, #11
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	f003 0308 	and.w	r3, r3, #8
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d10a      	bne.n	800c726 <dir_find+0x86>
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	6a18      	ldr	r0, [r3, #32]
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	3324      	adds	r3, #36	; 0x24
 800c718:	220b      	movs	r2, #11
 800c71a:	4619      	mov	r1, r3
 800c71c:	f7ff f888 	bl	800b830 <mem_cmp>
 800c720:	4603      	mov	r3, r0
 800c722:	2b00      	cmp	r3, #0
 800c724:	d00b      	beq.n	800c73e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c726:	2100      	movs	r1, #0
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f7ff fe6e 	bl	800c40a <dir_next>
 800c72e:	4603      	mov	r3, r0
 800c730:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c732:	7dfb      	ldrb	r3, [r7, #23]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d0c5      	beq.n	800c6c4 <dir_find+0x24>
 800c738:	e002      	b.n	800c740 <dir_find+0xa0>
		if (res != FR_OK) break;
 800c73a:	bf00      	nop
 800c73c:	e000      	b.n	800c740 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c73e:	bf00      	nop

	return res;
 800c740:	7dfb      	ldrb	r3, [r7, #23]
}
 800c742:	4618      	mov	r0, r3
 800c744:	3718      	adds	r7, #24
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}

0800c74a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c74a:	b580      	push	{r7, lr}
 800c74c:	b084      	sub	sp, #16
 800c74e:	af00      	add	r7, sp, #0
 800c750:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c758:	2101      	movs	r1, #1
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f7ff ff1a 	bl	800c594 <dir_alloc>
 800c760:	4603      	mov	r3, r0
 800c762:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c764:	7bfb      	ldrb	r3, [r7, #15]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d11c      	bne.n	800c7a4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	69db      	ldr	r3, [r3, #28]
 800c76e:	4619      	mov	r1, r3
 800c770:	68b8      	ldr	r0, [r7, #8]
 800c772:	f7ff fa4f 	bl	800bc14 <move_window>
 800c776:	4603      	mov	r3, r0
 800c778:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c77a:	7bfb      	ldrb	r3, [r7, #15]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d111      	bne.n	800c7a4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6a1b      	ldr	r3, [r3, #32]
 800c784:	2220      	movs	r2, #32
 800c786:	2100      	movs	r1, #0
 800c788:	4618      	mov	r0, r3
 800c78a:	f7ff f836 	bl	800b7fa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6a18      	ldr	r0, [r3, #32]
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	3324      	adds	r3, #36	; 0x24
 800c796:	220b      	movs	r2, #11
 800c798:	4619      	mov	r1, r3
 800c79a:	f7ff f80d 	bl	800b7b8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	2201      	movs	r2, #1
 800c7a2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c7a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3710      	adds	r7, #16
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
	...

0800c7b0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b088      	sub	sp, #32
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	60fb      	str	r3, [r7, #12]
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	3324      	adds	r3, #36	; 0x24
 800c7c4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c7c6:	220b      	movs	r2, #11
 800c7c8:	2120      	movs	r1, #32
 800c7ca:	68b8      	ldr	r0, [r7, #8]
 800c7cc:	f7ff f815 	bl	800b7fa <mem_set>
	si = i = 0; ni = 8;
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	613b      	str	r3, [r7, #16]
 800c7d4:	693b      	ldr	r3, [r7, #16]
 800c7d6:	61fb      	str	r3, [r7, #28]
 800c7d8:	2308      	movs	r3, #8
 800c7da:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c7dc:	69fb      	ldr	r3, [r7, #28]
 800c7de:	1c5a      	adds	r2, r3, #1
 800c7e0:	61fa      	str	r2, [r7, #28]
 800c7e2:	68fa      	ldr	r2, [r7, #12]
 800c7e4:	4413      	add	r3, r2
 800c7e6:	781b      	ldrb	r3, [r3, #0]
 800c7e8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c7ea:	7efb      	ldrb	r3, [r7, #27]
 800c7ec:	2b20      	cmp	r3, #32
 800c7ee:	d94e      	bls.n	800c88e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c7f0:	7efb      	ldrb	r3, [r7, #27]
 800c7f2:	2b2f      	cmp	r3, #47	; 0x2f
 800c7f4:	d006      	beq.n	800c804 <create_name+0x54>
 800c7f6:	7efb      	ldrb	r3, [r7, #27]
 800c7f8:	2b5c      	cmp	r3, #92	; 0x5c
 800c7fa:	d110      	bne.n	800c81e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c7fc:	e002      	b.n	800c804 <create_name+0x54>
 800c7fe:	69fb      	ldr	r3, [r7, #28]
 800c800:	3301      	adds	r3, #1
 800c802:	61fb      	str	r3, [r7, #28]
 800c804:	68fa      	ldr	r2, [r7, #12]
 800c806:	69fb      	ldr	r3, [r7, #28]
 800c808:	4413      	add	r3, r2
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	2b2f      	cmp	r3, #47	; 0x2f
 800c80e:	d0f6      	beq.n	800c7fe <create_name+0x4e>
 800c810:	68fa      	ldr	r2, [r7, #12]
 800c812:	69fb      	ldr	r3, [r7, #28]
 800c814:	4413      	add	r3, r2
 800c816:	781b      	ldrb	r3, [r3, #0]
 800c818:	2b5c      	cmp	r3, #92	; 0x5c
 800c81a:	d0f0      	beq.n	800c7fe <create_name+0x4e>
			break;
 800c81c:	e038      	b.n	800c890 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c81e:	7efb      	ldrb	r3, [r7, #27]
 800c820:	2b2e      	cmp	r3, #46	; 0x2e
 800c822:	d003      	beq.n	800c82c <create_name+0x7c>
 800c824:	693a      	ldr	r2, [r7, #16]
 800c826:	697b      	ldr	r3, [r7, #20]
 800c828:	429a      	cmp	r2, r3
 800c82a:	d30c      	bcc.n	800c846 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	2b0b      	cmp	r3, #11
 800c830:	d002      	beq.n	800c838 <create_name+0x88>
 800c832:	7efb      	ldrb	r3, [r7, #27]
 800c834:	2b2e      	cmp	r3, #46	; 0x2e
 800c836:	d001      	beq.n	800c83c <create_name+0x8c>
 800c838:	2306      	movs	r3, #6
 800c83a:	e044      	b.n	800c8c6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c83c:	2308      	movs	r3, #8
 800c83e:	613b      	str	r3, [r7, #16]
 800c840:	230b      	movs	r3, #11
 800c842:	617b      	str	r3, [r7, #20]
			continue;
 800c844:	e022      	b.n	800c88c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c846:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	da04      	bge.n	800c858 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c84e:	7efb      	ldrb	r3, [r7, #27]
 800c850:	3b80      	subs	r3, #128	; 0x80
 800c852:	4a1f      	ldr	r2, [pc, #124]	; (800c8d0 <create_name+0x120>)
 800c854:	5cd3      	ldrb	r3, [r2, r3]
 800c856:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c858:	7efb      	ldrb	r3, [r7, #27]
 800c85a:	4619      	mov	r1, r3
 800c85c:	481d      	ldr	r0, [pc, #116]	; (800c8d4 <create_name+0x124>)
 800c85e:	f7ff f80e 	bl	800b87e <chk_chr>
 800c862:	4603      	mov	r3, r0
 800c864:	2b00      	cmp	r3, #0
 800c866:	d001      	beq.n	800c86c <create_name+0xbc>
 800c868:	2306      	movs	r3, #6
 800c86a:	e02c      	b.n	800c8c6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c86c:	7efb      	ldrb	r3, [r7, #27]
 800c86e:	2b60      	cmp	r3, #96	; 0x60
 800c870:	d905      	bls.n	800c87e <create_name+0xce>
 800c872:	7efb      	ldrb	r3, [r7, #27]
 800c874:	2b7a      	cmp	r3, #122	; 0x7a
 800c876:	d802      	bhi.n	800c87e <create_name+0xce>
 800c878:	7efb      	ldrb	r3, [r7, #27]
 800c87a:	3b20      	subs	r3, #32
 800c87c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	1c5a      	adds	r2, r3, #1
 800c882:	613a      	str	r2, [r7, #16]
 800c884:	68ba      	ldr	r2, [r7, #8]
 800c886:	4413      	add	r3, r2
 800c888:	7efa      	ldrb	r2, [r7, #27]
 800c88a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c88c:	e7a6      	b.n	800c7dc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c88e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c890:	68fa      	ldr	r2, [r7, #12]
 800c892:	69fb      	ldr	r3, [r7, #28]
 800c894:	441a      	add	r2, r3
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d101      	bne.n	800c8a4 <create_name+0xf4>
 800c8a0:	2306      	movs	r3, #6
 800c8a2:	e010      	b.n	800c8c6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	781b      	ldrb	r3, [r3, #0]
 800c8a8:	2be5      	cmp	r3, #229	; 0xe5
 800c8aa:	d102      	bne.n	800c8b2 <create_name+0x102>
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	2205      	movs	r2, #5
 800c8b0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c8b2:	7efb      	ldrb	r3, [r7, #27]
 800c8b4:	2b20      	cmp	r3, #32
 800c8b6:	d801      	bhi.n	800c8bc <create_name+0x10c>
 800c8b8:	2204      	movs	r2, #4
 800c8ba:	e000      	b.n	800c8be <create_name+0x10e>
 800c8bc:	2200      	movs	r2, #0
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	330b      	adds	r3, #11
 800c8c2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c8c4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3720      	adds	r7, #32
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}
 800c8ce:	bf00      	nop
 800c8d0:	08011714 	.word	0x08011714
 800c8d4:	0800fbc4 	.word	0x0800fbc4

0800c8d8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b086      	sub	sp, #24
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
 800c8e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c8e6:	693b      	ldr	r3, [r7, #16]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c8ec:	e002      	b.n	800c8f4 <follow_path+0x1c>
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	3301      	adds	r3, #1
 800c8f2:	603b      	str	r3, [r7, #0]
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	2b2f      	cmp	r3, #47	; 0x2f
 800c8fa:	d0f8      	beq.n	800c8ee <follow_path+0x16>
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	781b      	ldrb	r3, [r3, #0]
 800c900:	2b5c      	cmp	r3, #92	; 0x5c
 800c902:	d0f4      	beq.n	800c8ee <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c904:	693b      	ldr	r3, [r7, #16]
 800c906:	2200      	movs	r2, #0
 800c908:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	781b      	ldrb	r3, [r3, #0]
 800c90e:	2b1f      	cmp	r3, #31
 800c910:	d80a      	bhi.n	800c928 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2280      	movs	r2, #128	; 0x80
 800c916:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c91a:	2100      	movs	r1, #0
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f7ff fcf9 	bl	800c314 <dir_sdi>
 800c922:	4603      	mov	r3, r0
 800c924:	75fb      	strb	r3, [r7, #23]
 800c926:	e043      	b.n	800c9b0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c928:	463b      	mov	r3, r7
 800c92a:	4619      	mov	r1, r3
 800c92c:	6878      	ldr	r0, [r7, #4]
 800c92e:	f7ff ff3f 	bl	800c7b0 <create_name>
 800c932:	4603      	mov	r3, r0
 800c934:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c936:	7dfb      	ldrb	r3, [r7, #23]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d134      	bne.n	800c9a6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f7ff feaf 	bl	800c6a0 <dir_find>
 800c942:	4603      	mov	r3, r0
 800c944:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c94c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c94e:	7dfb      	ldrb	r3, [r7, #23]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d00a      	beq.n	800c96a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c954:	7dfb      	ldrb	r3, [r7, #23]
 800c956:	2b04      	cmp	r3, #4
 800c958:	d127      	bne.n	800c9aa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c95a:	7afb      	ldrb	r3, [r7, #11]
 800c95c:	f003 0304 	and.w	r3, r3, #4
 800c960:	2b00      	cmp	r3, #0
 800c962:	d122      	bne.n	800c9aa <follow_path+0xd2>
 800c964:	2305      	movs	r3, #5
 800c966:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c968:	e01f      	b.n	800c9aa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c96a:	7afb      	ldrb	r3, [r7, #11]
 800c96c:	f003 0304 	and.w	r3, r3, #4
 800c970:	2b00      	cmp	r3, #0
 800c972:	d11c      	bne.n	800c9ae <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	799b      	ldrb	r3, [r3, #6]
 800c978:	f003 0310 	and.w	r3, r3, #16
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d102      	bne.n	800c986 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c980:	2305      	movs	r3, #5
 800c982:	75fb      	strb	r3, [r7, #23]
 800c984:	e014      	b.n	800c9b0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	695b      	ldr	r3, [r3, #20]
 800c990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c994:	4413      	add	r3, r2
 800c996:	4619      	mov	r1, r3
 800c998:	68f8      	ldr	r0, [r7, #12]
 800c99a:	f7ff fe42 	bl	800c622 <ld_clust>
 800c99e:	4602      	mov	r2, r0
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c9a4:	e7c0      	b.n	800c928 <follow_path+0x50>
			if (res != FR_OK) break;
 800c9a6:	bf00      	nop
 800c9a8:	e002      	b.n	800c9b0 <follow_path+0xd8>
				break;
 800c9aa:	bf00      	nop
 800c9ac:	e000      	b.n	800c9b0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c9ae:	bf00      	nop
			}
		}
	}

	return res;
 800c9b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3718      	adds	r7, #24
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}

0800c9ba <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c9ba:	b480      	push	{r7}
 800c9bc:	b087      	sub	sp, #28
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c9c2:	f04f 33ff 	mov.w	r3, #4294967295
 800c9c6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d031      	beq.n	800ca34 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	617b      	str	r3, [r7, #20]
 800c9d6:	e002      	b.n	800c9de <get_ldnumber+0x24>
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	3301      	adds	r3, #1
 800c9dc:	617b      	str	r3, [r7, #20]
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	781b      	ldrb	r3, [r3, #0]
 800c9e2:	2b20      	cmp	r3, #32
 800c9e4:	d903      	bls.n	800c9ee <get_ldnumber+0x34>
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	781b      	ldrb	r3, [r3, #0]
 800c9ea:	2b3a      	cmp	r3, #58	; 0x3a
 800c9ec:	d1f4      	bne.n	800c9d8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	781b      	ldrb	r3, [r3, #0]
 800c9f2:	2b3a      	cmp	r3, #58	; 0x3a
 800c9f4:	d11c      	bne.n	800ca30 <get_ldnumber+0x76>
			tp = *path;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	1c5a      	adds	r2, r3, #1
 800ca00:	60fa      	str	r2, [r7, #12]
 800ca02:	781b      	ldrb	r3, [r3, #0]
 800ca04:	3b30      	subs	r3, #48	; 0x30
 800ca06:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	2b09      	cmp	r3, #9
 800ca0c:	d80e      	bhi.n	800ca2c <get_ldnumber+0x72>
 800ca0e:	68fa      	ldr	r2, [r7, #12]
 800ca10:	697b      	ldr	r3, [r7, #20]
 800ca12:	429a      	cmp	r2, r3
 800ca14:	d10a      	bne.n	800ca2c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d107      	bne.n	800ca2c <get_ldnumber+0x72>
					vol = (int)i;
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ca20:	697b      	ldr	r3, [r7, #20]
 800ca22:	3301      	adds	r3, #1
 800ca24:	617b      	str	r3, [r7, #20]
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	697a      	ldr	r2, [r7, #20]
 800ca2a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ca2c:	693b      	ldr	r3, [r7, #16]
 800ca2e:	e002      	b.n	800ca36 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ca30:	2300      	movs	r3, #0
 800ca32:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ca34:	693b      	ldr	r3, [r7, #16]
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	371c      	adds	r7, #28
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca40:	4770      	bx	lr
	...

0800ca44 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b082      	sub	sp, #8
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2200      	movs	r2, #0
 800ca52:	70da      	strb	r2, [r3, #3]
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f04f 32ff 	mov.w	r2, #4294967295
 800ca5a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ca5c:	6839      	ldr	r1, [r7, #0]
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f7ff f8d8 	bl	800bc14 <move_window>
 800ca64:	4603      	mov	r3, r0
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d001      	beq.n	800ca6e <check_fs+0x2a>
 800ca6a:	2304      	movs	r3, #4
 800ca6c:	e038      	b.n	800cae0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	3330      	adds	r3, #48	; 0x30
 800ca72:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ca76:	4618      	mov	r0, r3
 800ca78:	f7fe fe1c 	bl	800b6b4 <ld_word>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	461a      	mov	r2, r3
 800ca80:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ca84:	429a      	cmp	r2, r3
 800ca86:	d001      	beq.n	800ca8c <check_fs+0x48>
 800ca88:	2303      	movs	r3, #3
 800ca8a:	e029      	b.n	800cae0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ca92:	2be9      	cmp	r3, #233	; 0xe9
 800ca94:	d009      	beq.n	800caaa <check_fs+0x66>
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ca9c:	2beb      	cmp	r3, #235	; 0xeb
 800ca9e:	d11e      	bne.n	800cade <check_fs+0x9a>
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800caa6:	2b90      	cmp	r3, #144	; 0x90
 800caa8:	d119      	bne.n	800cade <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	3330      	adds	r3, #48	; 0x30
 800caae:	3336      	adds	r3, #54	; 0x36
 800cab0:	4618      	mov	r0, r3
 800cab2:	f7fe fe17 	bl	800b6e4 <ld_dword>
 800cab6:	4603      	mov	r3, r0
 800cab8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cabc:	4a0a      	ldr	r2, [pc, #40]	; (800cae8 <check_fs+0xa4>)
 800cabe:	4293      	cmp	r3, r2
 800cac0:	d101      	bne.n	800cac6 <check_fs+0x82>
 800cac2:	2300      	movs	r3, #0
 800cac4:	e00c      	b.n	800cae0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	3330      	adds	r3, #48	; 0x30
 800caca:	3352      	adds	r3, #82	; 0x52
 800cacc:	4618      	mov	r0, r3
 800cace:	f7fe fe09 	bl	800b6e4 <ld_dword>
 800cad2:	4603      	mov	r3, r0
 800cad4:	4a05      	ldr	r2, [pc, #20]	; (800caec <check_fs+0xa8>)
 800cad6:	4293      	cmp	r3, r2
 800cad8:	d101      	bne.n	800cade <check_fs+0x9a>
 800cada:	2300      	movs	r3, #0
 800cadc:	e000      	b.n	800cae0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800cade:	2302      	movs	r3, #2
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	3708      	adds	r7, #8
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}
 800cae8:	00544146 	.word	0x00544146
 800caec:	33544146 	.word	0x33544146

0800caf0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b096      	sub	sp, #88	; 0x58
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	60f8      	str	r0, [r7, #12]
 800caf8:	60b9      	str	r1, [r7, #8]
 800cafa:	4613      	mov	r3, r2
 800cafc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	2200      	movs	r2, #0
 800cb02:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cb04:	68f8      	ldr	r0, [r7, #12]
 800cb06:	f7ff ff58 	bl	800c9ba <get_ldnumber>
 800cb0a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cb0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	da01      	bge.n	800cb16 <find_volume+0x26>
 800cb12:	230b      	movs	r3, #11
 800cb14:	e22d      	b.n	800cf72 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cb16:	4aa1      	ldr	r2, [pc, #644]	; (800cd9c <find_volume+0x2ac>)
 800cb18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb1e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cb20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d101      	bne.n	800cb2a <find_volume+0x3a>
 800cb26:	230c      	movs	r3, #12
 800cb28:	e223      	b.n	800cf72 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800cb2a:	68bb      	ldr	r3, [r7, #8]
 800cb2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb2e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cb30:	79fb      	ldrb	r3, [r7, #7]
 800cb32:	f023 0301 	bic.w	r3, r3, #1
 800cb36:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb3a:	781b      	ldrb	r3, [r3, #0]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d01a      	beq.n	800cb76 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800cb40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb42:	785b      	ldrb	r3, [r3, #1]
 800cb44:	4618      	mov	r0, r3
 800cb46:	f7fe fd17 	bl	800b578 <disk_status>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cb50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cb54:	f003 0301 	and.w	r3, r3, #1
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d10c      	bne.n	800cb76 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cb5c:	79fb      	ldrb	r3, [r7, #7]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d007      	beq.n	800cb72 <find_volume+0x82>
 800cb62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cb66:	f003 0304 	and.w	r3, r3, #4
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d001      	beq.n	800cb72 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800cb6e:	230a      	movs	r3, #10
 800cb70:	e1ff      	b.n	800cf72 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800cb72:	2300      	movs	r3, #0
 800cb74:	e1fd      	b.n	800cf72 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cb76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb78:	2200      	movs	r2, #0
 800cb7a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cb7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb7e:	b2da      	uxtb	r2, r3
 800cb80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb82:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cb84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb86:	785b      	ldrb	r3, [r3, #1]
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f7fe fd0f 	bl	800b5ac <disk_initialize>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cb94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cb98:	f003 0301 	and.w	r3, r3, #1
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d001      	beq.n	800cba4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cba0:	2303      	movs	r3, #3
 800cba2:	e1e6      	b.n	800cf72 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cba4:	79fb      	ldrb	r3, [r7, #7]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d007      	beq.n	800cbba <find_volume+0xca>
 800cbaa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cbae:	f003 0304 	and.w	r3, r3, #4
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d001      	beq.n	800cbba <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800cbb6:	230a      	movs	r3, #10
 800cbb8:	e1db      	b.n	800cf72 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cbbe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cbc0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cbc2:	f7ff ff3f 	bl	800ca44 <check_fs>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cbcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cbd0:	2b02      	cmp	r3, #2
 800cbd2:	d149      	bne.n	800cc68 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	643b      	str	r3, [r7, #64]	; 0x40
 800cbd8:	e01e      	b.n	800cc18 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbdc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cbe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbe2:	011b      	lsls	r3, r3, #4
 800cbe4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800cbe8:	4413      	add	r3, r2
 800cbea:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cbec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbee:	3304      	adds	r3, #4
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d006      	beq.n	800cc04 <find_volume+0x114>
 800cbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf8:	3308      	adds	r3, #8
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f7fe fd72 	bl	800b6e4 <ld_dword>
 800cc00:	4602      	mov	r2, r0
 800cc02:	e000      	b.n	800cc06 <find_volume+0x116>
 800cc04:	2200      	movs	r2, #0
 800cc06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc08:	009b      	lsls	r3, r3, #2
 800cc0a:	3358      	adds	r3, #88	; 0x58
 800cc0c:	443b      	add	r3, r7
 800cc0e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cc12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc14:	3301      	adds	r3, #1
 800cc16:	643b      	str	r3, [r7, #64]	; 0x40
 800cc18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc1a:	2b03      	cmp	r3, #3
 800cc1c:	d9dd      	bls.n	800cbda <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cc1e:	2300      	movs	r3, #0
 800cc20:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800cc22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d002      	beq.n	800cc2e <find_volume+0x13e>
 800cc28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc2a:	3b01      	subs	r3, #1
 800cc2c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cc2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc30:	009b      	lsls	r3, r3, #2
 800cc32:	3358      	adds	r3, #88	; 0x58
 800cc34:	443b      	add	r3, r7
 800cc36:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cc3a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cc3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d005      	beq.n	800cc4e <find_volume+0x15e>
 800cc42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cc44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cc46:	f7ff fefd 	bl	800ca44 <check_fs>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	e000      	b.n	800cc50 <find_volume+0x160>
 800cc4e:	2303      	movs	r3, #3
 800cc50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cc54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cc58:	2b01      	cmp	r3, #1
 800cc5a:	d905      	bls.n	800cc68 <find_volume+0x178>
 800cc5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc5e:	3301      	adds	r3, #1
 800cc60:	643b      	str	r3, [r7, #64]	; 0x40
 800cc62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc64:	2b03      	cmp	r3, #3
 800cc66:	d9e2      	bls.n	800cc2e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cc68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cc6c:	2b04      	cmp	r3, #4
 800cc6e:	d101      	bne.n	800cc74 <find_volume+0x184>
 800cc70:	2301      	movs	r3, #1
 800cc72:	e17e      	b.n	800cf72 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cc74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cc78:	2b01      	cmp	r3, #1
 800cc7a:	d901      	bls.n	800cc80 <find_volume+0x190>
 800cc7c:	230d      	movs	r3, #13
 800cc7e:	e178      	b.n	800cf72 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cc80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc82:	3330      	adds	r3, #48	; 0x30
 800cc84:	330b      	adds	r3, #11
 800cc86:	4618      	mov	r0, r3
 800cc88:	f7fe fd14 	bl	800b6b4 <ld_word>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc92:	d001      	beq.n	800cc98 <find_volume+0x1a8>
 800cc94:	230d      	movs	r3, #13
 800cc96:	e16c      	b.n	800cf72 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc9a:	3330      	adds	r3, #48	; 0x30
 800cc9c:	3316      	adds	r3, #22
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f7fe fd08 	bl	800b6b4 <ld_word>
 800cca4:	4603      	mov	r3, r0
 800cca6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d106      	bne.n	800ccbc <find_volume+0x1cc>
 800ccae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccb0:	3330      	adds	r3, #48	; 0x30
 800ccb2:	3324      	adds	r3, #36	; 0x24
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f7fe fd15 	bl	800b6e4 <ld_dword>
 800ccba:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ccbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ccc0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ccc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccc4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800ccc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccce:	789b      	ldrb	r3, [r3, #2]
 800ccd0:	2b01      	cmp	r3, #1
 800ccd2:	d005      	beq.n	800cce0 <find_volume+0x1f0>
 800ccd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccd6:	789b      	ldrb	r3, [r3, #2]
 800ccd8:	2b02      	cmp	r3, #2
 800ccda:	d001      	beq.n	800cce0 <find_volume+0x1f0>
 800ccdc:	230d      	movs	r3, #13
 800ccde:	e148      	b.n	800cf72 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cce2:	789b      	ldrb	r3, [r3, #2]
 800cce4:	461a      	mov	r2, r3
 800cce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cce8:	fb02 f303 	mul.w	r3, r2, r3
 800ccec:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ccee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ccf4:	b29a      	uxth	r2, r3
 800ccf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ccfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccfc:	895b      	ldrh	r3, [r3, #10]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d008      	beq.n	800cd14 <find_volume+0x224>
 800cd02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd04:	895b      	ldrh	r3, [r3, #10]
 800cd06:	461a      	mov	r2, r3
 800cd08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd0a:	895b      	ldrh	r3, [r3, #10]
 800cd0c:	3b01      	subs	r3, #1
 800cd0e:	4013      	ands	r3, r2
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d001      	beq.n	800cd18 <find_volume+0x228>
 800cd14:	230d      	movs	r3, #13
 800cd16:	e12c      	b.n	800cf72 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cd18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd1a:	3330      	adds	r3, #48	; 0x30
 800cd1c:	3311      	adds	r3, #17
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f7fe fcc8 	bl	800b6b4 <ld_word>
 800cd24:	4603      	mov	r3, r0
 800cd26:	461a      	mov	r2, r3
 800cd28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd2a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cd2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd2e:	891b      	ldrh	r3, [r3, #8]
 800cd30:	f003 030f 	and.w	r3, r3, #15
 800cd34:	b29b      	uxth	r3, r3
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d001      	beq.n	800cd3e <find_volume+0x24e>
 800cd3a:	230d      	movs	r3, #13
 800cd3c:	e119      	b.n	800cf72 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cd3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd40:	3330      	adds	r3, #48	; 0x30
 800cd42:	3313      	adds	r3, #19
 800cd44:	4618      	mov	r0, r3
 800cd46:	f7fe fcb5 	bl	800b6b4 <ld_word>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cd4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d106      	bne.n	800cd62 <find_volume+0x272>
 800cd54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd56:	3330      	adds	r3, #48	; 0x30
 800cd58:	3320      	adds	r3, #32
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f7fe fcc2 	bl	800b6e4 <ld_dword>
 800cd60:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd64:	3330      	adds	r3, #48	; 0x30
 800cd66:	330e      	adds	r3, #14
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f7fe fca3 	bl	800b6b4 <ld_word>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cd72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d101      	bne.n	800cd7c <find_volume+0x28c>
 800cd78:	230d      	movs	r3, #13
 800cd7a:	e0fa      	b.n	800cf72 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cd7c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cd7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd80:	4413      	add	r3, r2
 800cd82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd84:	8912      	ldrh	r2, [r2, #8]
 800cd86:	0912      	lsrs	r2, r2, #4
 800cd88:	b292      	uxth	r2, r2
 800cd8a:	4413      	add	r3, r2
 800cd8c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cd8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd92:	429a      	cmp	r2, r3
 800cd94:	d204      	bcs.n	800cda0 <find_volume+0x2b0>
 800cd96:	230d      	movs	r3, #13
 800cd98:	e0eb      	b.n	800cf72 <find_volume+0x482>
 800cd9a:	bf00      	nop
 800cd9c:	200008a4 	.word	0x200008a4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cda0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda4:	1ad3      	subs	r3, r2, r3
 800cda6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cda8:	8952      	ldrh	r2, [r2, #10]
 800cdaa:	fbb3 f3f2 	udiv	r3, r3, r2
 800cdae:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cdb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d101      	bne.n	800cdba <find_volume+0x2ca>
 800cdb6:	230d      	movs	r3, #13
 800cdb8:	e0db      	b.n	800cf72 <find_volume+0x482>
		fmt = FS_FAT32;
 800cdba:	2303      	movs	r3, #3
 800cdbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cdc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d802      	bhi.n	800cdd0 <find_volume+0x2e0>
 800cdca:	2302      	movs	r3, #2
 800cdcc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cdd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cdd6:	4293      	cmp	r3, r2
 800cdd8:	d802      	bhi.n	800cde0 <find_volume+0x2f0>
 800cdda:	2301      	movs	r3, #1
 800cddc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cde2:	1c9a      	adds	r2, r3, #2
 800cde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800cde8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cdec:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cdee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cdf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdf2:	441a      	add	r2, r3
 800cdf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800cdf8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cdfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdfc:	441a      	add	r2, r3
 800cdfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce00:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800ce02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ce06:	2b03      	cmp	r3, #3
 800ce08:	d11e      	bne.n	800ce48 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ce0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce0c:	3330      	adds	r3, #48	; 0x30
 800ce0e:	332a      	adds	r3, #42	; 0x2a
 800ce10:	4618      	mov	r0, r3
 800ce12:	f7fe fc4f 	bl	800b6b4 <ld_word>
 800ce16:	4603      	mov	r3, r0
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d001      	beq.n	800ce20 <find_volume+0x330>
 800ce1c:	230d      	movs	r3, #13
 800ce1e:	e0a8      	b.n	800cf72 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ce20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce22:	891b      	ldrh	r3, [r3, #8]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d001      	beq.n	800ce2c <find_volume+0x33c>
 800ce28:	230d      	movs	r3, #13
 800ce2a:	e0a2      	b.n	800cf72 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ce2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce2e:	3330      	adds	r3, #48	; 0x30
 800ce30:	332c      	adds	r3, #44	; 0x2c
 800ce32:	4618      	mov	r0, r3
 800ce34:	f7fe fc56 	bl	800b6e4 <ld_dword>
 800ce38:	4602      	mov	r2, r0
 800ce3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce3c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ce3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce40:	695b      	ldr	r3, [r3, #20]
 800ce42:	009b      	lsls	r3, r3, #2
 800ce44:	647b      	str	r3, [r7, #68]	; 0x44
 800ce46:	e01f      	b.n	800ce88 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ce48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce4a:	891b      	ldrh	r3, [r3, #8]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d101      	bne.n	800ce54 <find_volume+0x364>
 800ce50:	230d      	movs	r3, #13
 800ce52:	e08e      	b.n	800cf72 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ce54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce56:	6a1a      	ldr	r2, [r3, #32]
 800ce58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce5a:	441a      	add	r2, r3
 800ce5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce5e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ce60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ce64:	2b02      	cmp	r3, #2
 800ce66:	d103      	bne.n	800ce70 <find_volume+0x380>
 800ce68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce6a:	695b      	ldr	r3, [r3, #20]
 800ce6c:	005b      	lsls	r3, r3, #1
 800ce6e:	e00a      	b.n	800ce86 <find_volume+0x396>
 800ce70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce72:	695a      	ldr	r2, [r3, #20]
 800ce74:	4613      	mov	r3, r2
 800ce76:	005b      	lsls	r3, r3, #1
 800ce78:	4413      	add	r3, r2
 800ce7a:	085a      	lsrs	r2, r3, #1
 800ce7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce7e:	695b      	ldr	r3, [r3, #20]
 800ce80:	f003 0301 	and.w	r3, r3, #1
 800ce84:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ce86:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ce88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce8a:	699a      	ldr	r2, [r3, #24]
 800ce8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce8e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ce92:	0a5b      	lsrs	r3, r3, #9
 800ce94:	429a      	cmp	r2, r3
 800ce96:	d201      	bcs.n	800ce9c <find_volume+0x3ac>
 800ce98:	230d      	movs	r3, #13
 800ce9a:	e06a      	b.n	800cf72 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ce9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce9e:	f04f 32ff 	mov.w	r2, #4294967295
 800cea2:	611a      	str	r2, [r3, #16]
 800cea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cea6:	691a      	ldr	r2, [r3, #16]
 800cea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceaa:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800ceac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceae:	2280      	movs	r2, #128	; 0x80
 800ceb0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ceb2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ceb6:	2b03      	cmp	r3, #3
 800ceb8:	d149      	bne.n	800cf4e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ceba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cebc:	3330      	adds	r3, #48	; 0x30
 800cebe:	3330      	adds	r3, #48	; 0x30
 800cec0:	4618      	mov	r0, r3
 800cec2:	f7fe fbf7 	bl	800b6b4 <ld_word>
 800cec6:	4603      	mov	r3, r0
 800cec8:	2b01      	cmp	r3, #1
 800ceca:	d140      	bne.n	800cf4e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cece:	3301      	adds	r3, #1
 800ced0:	4619      	mov	r1, r3
 800ced2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ced4:	f7fe fe9e 	bl	800bc14 <move_window>
 800ced8:	4603      	mov	r3, r0
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d137      	bne.n	800cf4e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800cede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cee0:	2200      	movs	r2, #0
 800cee2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cee6:	3330      	adds	r3, #48	; 0x30
 800cee8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ceec:	4618      	mov	r0, r3
 800ceee:	f7fe fbe1 	bl	800b6b4 <ld_word>
 800cef2:	4603      	mov	r3, r0
 800cef4:	461a      	mov	r2, r3
 800cef6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cefa:	429a      	cmp	r2, r3
 800cefc:	d127      	bne.n	800cf4e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cefe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf00:	3330      	adds	r3, #48	; 0x30
 800cf02:	4618      	mov	r0, r3
 800cf04:	f7fe fbee 	bl	800b6e4 <ld_dword>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	4a1c      	ldr	r2, [pc, #112]	; (800cf7c <find_volume+0x48c>)
 800cf0c:	4293      	cmp	r3, r2
 800cf0e:	d11e      	bne.n	800cf4e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cf10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf12:	3330      	adds	r3, #48	; 0x30
 800cf14:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f7fe fbe3 	bl	800b6e4 <ld_dword>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	4a17      	ldr	r2, [pc, #92]	; (800cf80 <find_volume+0x490>)
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d113      	bne.n	800cf4e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cf26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf28:	3330      	adds	r3, #48	; 0x30
 800cf2a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f7fe fbd8 	bl	800b6e4 <ld_dword>
 800cf34:	4602      	mov	r2, r0
 800cf36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf38:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cf3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf3c:	3330      	adds	r3, #48	; 0x30
 800cf3e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800cf42:	4618      	mov	r0, r3
 800cf44:	f7fe fbce 	bl	800b6e4 <ld_dword>
 800cf48:	4602      	mov	r2, r0
 800cf4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf4c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cf4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf50:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800cf54:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cf56:	4b0b      	ldr	r3, [pc, #44]	; (800cf84 <find_volume+0x494>)
 800cf58:	881b      	ldrh	r3, [r3, #0]
 800cf5a:	3301      	adds	r3, #1
 800cf5c:	b29a      	uxth	r2, r3
 800cf5e:	4b09      	ldr	r3, [pc, #36]	; (800cf84 <find_volume+0x494>)
 800cf60:	801a      	strh	r2, [r3, #0]
 800cf62:	4b08      	ldr	r3, [pc, #32]	; (800cf84 <find_volume+0x494>)
 800cf64:	881a      	ldrh	r2, [r3, #0]
 800cf66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf68:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cf6a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cf6c:	f7fe fdea 	bl	800bb44 <clear_lock>
#endif
	return FR_OK;
 800cf70:	2300      	movs	r3, #0
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	3758      	adds	r7, #88	; 0x58
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
 800cf7a:	bf00      	nop
 800cf7c:	41615252 	.word	0x41615252
 800cf80:	61417272 	.word	0x61417272
 800cf84:	200008a8 	.word	0x200008a8

0800cf88 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b084      	sub	sp, #16
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
 800cf90:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cf92:	2309      	movs	r3, #9
 800cf94:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d01c      	beq.n	800cfd6 <validate+0x4e>
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d018      	beq.n	800cfd6 <validate+0x4e>
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	781b      	ldrb	r3, [r3, #0]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d013      	beq.n	800cfd6 <validate+0x4e>
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	889a      	ldrh	r2, [r3, #4]
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	88db      	ldrh	r3, [r3, #6]
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d10c      	bne.n	800cfd6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	785b      	ldrb	r3, [r3, #1]
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f7fe fad8 	bl	800b578 <disk_status>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	f003 0301 	and.w	r3, r3, #1
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d101      	bne.n	800cfd6 <validate+0x4e>
			res = FR_OK;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cfd6:	7bfb      	ldrb	r3, [r7, #15]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d102      	bne.n	800cfe2 <validate+0x5a>
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	e000      	b.n	800cfe4 <validate+0x5c>
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	683a      	ldr	r2, [r7, #0]
 800cfe6:	6013      	str	r3, [r2, #0]
	return res;
 800cfe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3710      	adds	r7, #16
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}
	...

0800cff4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b088      	sub	sp, #32
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	60f8      	str	r0, [r7, #12]
 800cffc:	60b9      	str	r1, [r7, #8]
 800cffe:	4613      	mov	r3, r2
 800d000:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d006:	f107 0310 	add.w	r3, r7, #16
 800d00a:	4618      	mov	r0, r3
 800d00c:	f7ff fcd5 	bl	800c9ba <get_ldnumber>
 800d010:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d012:	69fb      	ldr	r3, [r7, #28]
 800d014:	2b00      	cmp	r3, #0
 800d016:	da01      	bge.n	800d01c <f_mount+0x28>
 800d018:	230b      	movs	r3, #11
 800d01a:	e02b      	b.n	800d074 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d01c:	4a17      	ldr	r2, [pc, #92]	; (800d07c <f_mount+0x88>)
 800d01e:	69fb      	ldr	r3, [r7, #28]
 800d020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d024:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d026:	69bb      	ldr	r3, [r7, #24]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d005      	beq.n	800d038 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d02c:	69b8      	ldr	r0, [r7, #24]
 800d02e:	f7fe fd89 	bl	800bb44 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d032:	69bb      	ldr	r3, [r7, #24]
 800d034:	2200      	movs	r2, #0
 800d036:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d002      	beq.n	800d044 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	2200      	movs	r2, #0
 800d042:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d044:	68fa      	ldr	r2, [r7, #12]
 800d046:	490d      	ldr	r1, [pc, #52]	; (800d07c <f_mount+0x88>)
 800d048:	69fb      	ldr	r3, [r7, #28]
 800d04a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d002      	beq.n	800d05a <f_mount+0x66>
 800d054:	79fb      	ldrb	r3, [r7, #7]
 800d056:	2b01      	cmp	r3, #1
 800d058:	d001      	beq.n	800d05e <f_mount+0x6a>
 800d05a:	2300      	movs	r3, #0
 800d05c:	e00a      	b.n	800d074 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d05e:	f107 010c 	add.w	r1, r7, #12
 800d062:	f107 0308 	add.w	r3, r7, #8
 800d066:	2200      	movs	r2, #0
 800d068:	4618      	mov	r0, r3
 800d06a:	f7ff fd41 	bl	800caf0 <find_volume>
 800d06e:	4603      	mov	r3, r0
 800d070:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d072:	7dfb      	ldrb	r3, [r7, #23]
}
 800d074:	4618      	mov	r0, r3
 800d076:	3720      	adds	r7, #32
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd80      	pop	{r7, pc}
 800d07c:	200008a4 	.word	0x200008a4

0800d080 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b098      	sub	sp, #96	; 0x60
 800d084:	af00      	add	r7, sp, #0
 800d086:	60f8      	str	r0, [r7, #12]
 800d088:	60b9      	str	r1, [r7, #8]
 800d08a:	4613      	mov	r3, r2
 800d08c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d101      	bne.n	800d098 <f_open+0x18>
 800d094:	2309      	movs	r3, #9
 800d096:	e1ad      	b.n	800d3f4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d098:	79fb      	ldrb	r3, [r7, #7]
 800d09a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d09e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d0a0:	79fa      	ldrb	r2, [r7, #7]
 800d0a2:	f107 0110 	add.w	r1, r7, #16
 800d0a6:	f107 0308 	add.w	r3, r7, #8
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f7ff fd20 	bl	800caf0 <find_volume>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800d0b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	f040 8191 	bne.w	800d3e2 <f_open+0x362>
		dj.obj.fs = fs;
 800d0c0:	693b      	ldr	r3, [r7, #16]
 800d0c2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d0c4:	68ba      	ldr	r2, [r7, #8]
 800d0c6:	f107 0314 	add.w	r3, r7, #20
 800d0ca:	4611      	mov	r1, r2
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f7ff fc03 	bl	800c8d8 <follow_path>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d0d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d11a      	bne.n	800d116 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d0e0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d0e4:	b25b      	sxtb	r3, r3
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	da03      	bge.n	800d0f2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800d0ea:	2306      	movs	r3, #6
 800d0ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d0f0:	e011      	b.n	800d116 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d0f2:	79fb      	ldrb	r3, [r7, #7]
 800d0f4:	f023 0301 	bic.w	r3, r3, #1
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	bf14      	ite	ne
 800d0fc:	2301      	movne	r3, #1
 800d0fe:	2300      	moveq	r3, #0
 800d100:	b2db      	uxtb	r3, r3
 800d102:	461a      	mov	r2, r3
 800d104:	f107 0314 	add.w	r3, r7, #20
 800d108:	4611      	mov	r1, r2
 800d10a:	4618      	mov	r0, r3
 800d10c:	f7fe fbd2 	bl	800b8b4 <chk_lock>
 800d110:	4603      	mov	r3, r0
 800d112:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d116:	79fb      	ldrb	r3, [r7, #7]
 800d118:	f003 031c 	and.w	r3, r3, #28
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d07f      	beq.n	800d220 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d120:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d124:	2b00      	cmp	r3, #0
 800d126:	d017      	beq.n	800d158 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d128:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d12c:	2b04      	cmp	r3, #4
 800d12e:	d10e      	bne.n	800d14e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d130:	f7fe fc1c 	bl	800b96c <enq_lock>
 800d134:	4603      	mov	r3, r0
 800d136:	2b00      	cmp	r3, #0
 800d138:	d006      	beq.n	800d148 <f_open+0xc8>
 800d13a:	f107 0314 	add.w	r3, r7, #20
 800d13e:	4618      	mov	r0, r3
 800d140:	f7ff fb03 	bl	800c74a <dir_register>
 800d144:	4603      	mov	r3, r0
 800d146:	e000      	b.n	800d14a <f_open+0xca>
 800d148:	2312      	movs	r3, #18
 800d14a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d14e:	79fb      	ldrb	r3, [r7, #7]
 800d150:	f043 0308 	orr.w	r3, r3, #8
 800d154:	71fb      	strb	r3, [r7, #7]
 800d156:	e010      	b.n	800d17a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d158:	7ebb      	ldrb	r3, [r7, #26]
 800d15a:	f003 0311 	and.w	r3, r3, #17
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d003      	beq.n	800d16a <f_open+0xea>
					res = FR_DENIED;
 800d162:	2307      	movs	r3, #7
 800d164:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d168:	e007      	b.n	800d17a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d16a:	79fb      	ldrb	r3, [r7, #7]
 800d16c:	f003 0304 	and.w	r3, r3, #4
 800d170:	2b00      	cmp	r3, #0
 800d172:	d002      	beq.n	800d17a <f_open+0xfa>
 800d174:	2308      	movs	r3, #8
 800d176:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d17a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d168      	bne.n	800d254 <f_open+0x1d4>
 800d182:	79fb      	ldrb	r3, [r7, #7]
 800d184:	f003 0308 	and.w	r3, r3, #8
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d063      	beq.n	800d254 <f_open+0x1d4>
				dw = GET_FATTIME();
 800d18c:	f7fb ff88 	bl	80090a0 <get_fattime>
 800d190:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d194:	330e      	adds	r3, #14
 800d196:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d198:	4618      	mov	r0, r3
 800d19a:	f7fe fae1 	bl	800b760 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1a0:	3316      	adds	r3, #22
 800d1a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f7fe fadb 	bl	800b760 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d1aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1ac:	330b      	adds	r3, #11
 800d1ae:	2220      	movs	r2, #32
 800d1b0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1b6:	4611      	mov	r1, r2
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f7ff fa32 	bl	800c622 <ld_clust>
 800d1be:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d1c0:	693b      	ldr	r3, [r7, #16]
 800d1c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f7ff fa4a 	bl	800c660 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d1cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1ce:	331c      	adds	r3, #28
 800d1d0:	2100      	movs	r1, #0
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f7fe fac4 	bl	800b760 <st_dword>
					fs->wflag = 1;
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	2201      	movs	r2, #1
 800d1dc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d1de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d037      	beq.n	800d254 <f_open+0x1d4>
						dw = fs->winsect;
 800d1e4:	693b      	ldr	r3, [r7, #16]
 800d1e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1e8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d1ea:	f107 0314 	add.w	r3, r7, #20
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f7fe ff5d 	bl	800c0b2 <remove_chain>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800d1fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d202:	2b00      	cmp	r3, #0
 800d204:	d126      	bne.n	800d254 <f_open+0x1d4>
							res = move_window(fs, dw);
 800d206:	693b      	ldr	r3, [r7, #16]
 800d208:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d20a:	4618      	mov	r0, r3
 800d20c:	f7fe fd02 	bl	800bc14 <move_window>
 800d210:	4603      	mov	r3, r0
 800d212:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d216:	693b      	ldr	r3, [r7, #16]
 800d218:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d21a:	3a01      	subs	r2, #1
 800d21c:	60da      	str	r2, [r3, #12]
 800d21e:	e019      	b.n	800d254 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d220:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d224:	2b00      	cmp	r3, #0
 800d226:	d115      	bne.n	800d254 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d228:	7ebb      	ldrb	r3, [r7, #26]
 800d22a:	f003 0310 	and.w	r3, r3, #16
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d003      	beq.n	800d23a <f_open+0x1ba>
					res = FR_NO_FILE;
 800d232:	2304      	movs	r3, #4
 800d234:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d238:	e00c      	b.n	800d254 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d23a:	79fb      	ldrb	r3, [r7, #7]
 800d23c:	f003 0302 	and.w	r3, r3, #2
 800d240:	2b00      	cmp	r3, #0
 800d242:	d007      	beq.n	800d254 <f_open+0x1d4>
 800d244:	7ebb      	ldrb	r3, [r7, #26]
 800d246:	f003 0301 	and.w	r3, r3, #1
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d002      	beq.n	800d254 <f_open+0x1d4>
						res = FR_DENIED;
 800d24e:	2307      	movs	r3, #7
 800d250:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d254:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d128      	bne.n	800d2ae <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d25c:	79fb      	ldrb	r3, [r7, #7]
 800d25e:	f003 0308 	and.w	r3, r3, #8
 800d262:	2b00      	cmp	r3, #0
 800d264:	d003      	beq.n	800d26e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d266:	79fb      	ldrb	r3, [r7, #7]
 800d268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d26c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d26e:	693b      	ldr	r3, [r7, #16]
 800d270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d276:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d27c:	79fb      	ldrb	r3, [r7, #7]
 800d27e:	f023 0301 	bic.w	r3, r3, #1
 800d282:	2b00      	cmp	r3, #0
 800d284:	bf14      	ite	ne
 800d286:	2301      	movne	r3, #1
 800d288:	2300      	moveq	r3, #0
 800d28a:	b2db      	uxtb	r3, r3
 800d28c:	461a      	mov	r2, r3
 800d28e:	f107 0314 	add.w	r3, r7, #20
 800d292:	4611      	mov	r1, r2
 800d294:	4618      	mov	r0, r3
 800d296:	f7fe fb8b 	bl	800b9b0 <inc_lock>
 800d29a:	4602      	mov	r2, r0
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	691b      	ldr	r3, [r3, #16]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d102      	bne.n	800d2ae <f_open+0x22e>
 800d2a8:	2302      	movs	r3, #2
 800d2aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d2ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	f040 8095 	bne.w	800d3e2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d2b8:	693b      	ldr	r3, [r7, #16]
 800d2ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d2bc:	4611      	mov	r1, r2
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f7ff f9af 	bl	800c622 <ld_clust>
 800d2c4:	4602      	mov	r2, r0
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d2ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2cc:	331c      	adds	r3, #28
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f7fe fa08 	bl	800b6e4 <ld_dword>
 800d2d4:	4602      	mov	r2, r0
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	2200      	movs	r2, #0
 800d2de:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d2e0:	693a      	ldr	r2, [r7, #16]
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d2e6:	693b      	ldr	r3, [r7, #16]
 800d2e8:	88da      	ldrh	r2, [r3, #6]
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	79fa      	ldrb	r2, [r7, #7]
 800d2f2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	2200      	movs	r2, #0
 800d304:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	3330      	adds	r3, #48	; 0x30
 800d30a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d30e:	2100      	movs	r1, #0
 800d310:	4618      	mov	r0, r3
 800d312:	f7fe fa72 	bl	800b7fa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d316:	79fb      	ldrb	r3, [r7, #7]
 800d318:	f003 0320 	and.w	r3, r3, #32
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d060      	beq.n	800d3e2 <f_open+0x362>
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	68db      	ldr	r3, [r3, #12]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d05c      	beq.n	800d3e2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	68da      	ldr	r2, [r3, #12]
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d330:	693b      	ldr	r3, [r7, #16]
 800d332:	895b      	ldrh	r3, [r3, #10]
 800d334:	025b      	lsls	r3, r3, #9
 800d336:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	689b      	ldr	r3, [r3, #8]
 800d33c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	68db      	ldr	r3, [r3, #12]
 800d342:	657b      	str	r3, [r7, #84]	; 0x54
 800d344:	e016      	b.n	800d374 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d34a:	4618      	mov	r0, r3
 800d34c:	f7fe fd1d 	bl	800bd8a <get_fat>
 800d350:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d352:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d354:	2b01      	cmp	r3, #1
 800d356:	d802      	bhi.n	800d35e <f_open+0x2de>
 800d358:	2302      	movs	r3, #2
 800d35a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d35e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d360:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d364:	d102      	bne.n	800d36c <f_open+0x2ec>
 800d366:	2301      	movs	r3, #1
 800d368:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d36c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d36e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d370:	1ad3      	subs	r3, r2, r3
 800d372:	657b      	str	r3, [r7, #84]	; 0x54
 800d374:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d103      	bne.n	800d384 <f_open+0x304>
 800d37c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d37e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d380:	429a      	cmp	r2, r3
 800d382:	d8e0      	bhi.n	800d346 <f_open+0x2c6>
				}
				fp->clust = clst;
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d388:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d38a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d127      	bne.n	800d3e2 <f_open+0x362>
 800d392:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d022      	beq.n	800d3e2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d39c:	693b      	ldr	r3, [r7, #16]
 800d39e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f7fe fcd3 	bl	800bd4c <clust2sect>
 800d3a6:	6478      	str	r0, [r7, #68]	; 0x44
 800d3a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d103      	bne.n	800d3b6 <f_open+0x336>
						res = FR_INT_ERR;
 800d3ae:	2302      	movs	r3, #2
 800d3b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d3b4:	e015      	b.n	800d3e2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d3b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3b8:	0a5a      	lsrs	r2, r3, #9
 800d3ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3bc:	441a      	add	r2, r3
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d3c2:	693b      	ldr	r3, [r7, #16]
 800d3c4:	7858      	ldrb	r0, [r3, #1]
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	6a1a      	ldr	r2, [r3, #32]
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	f7fe f911 	bl	800b5f8 <disk_read>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d002      	beq.n	800d3e2 <f_open+0x362>
 800d3dc:	2301      	movs	r3, #1
 800d3de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d3e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d002      	beq.n	800d3f0 <f_open+0x370>
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d3f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3760      	adds	r7, #96	; 0x60
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}

0800d3fc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b08e      	sub	sp, #56	; 0x38
 800d400:	af00      	add	r7, sp, #0
 800d402:	60f8      	str	r0, [r7, #12]
 800d404:	60b9      	str	r1, [r7, #8]
 800d406:	607a      	str	r2, [r7, #4]
 800d408:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	2200      	movs	r2, #0
 800d412:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	f107 0214 	add.w	r2, r7, #20
 800d41a:	4611      	mov	r1, r2
 800d41c:	4618      	mov	r0, r3
 800d41e:	f7ff fdb3 	bl	800cf88 <validate>
 800d422:	4603      	mov	r3, r0
 800d424:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d428:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d107      	bne.n	800d440 <f_read+0x44>
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	7d5b      	ldrb	r3, [r3, #21]
 800d434:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d438:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d002      	beq.n	800d446 <f_read+0x4a>
 800d440:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d444:	e115      	b.n	800d672 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	7d1b      	ldrb	r3, [r3, #20]
 800d44a:	f003 0301 	and.w	r3, r3, #1
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d101      	bne.n	800d456 <f_read+0x5a>
 800d452:	2307      	movs	r3, #7
 800d454:	e10d      	b.n	800d672 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	68da      	ldr	r2, [r3, #12]
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	699b      	ldr	r3, [r3, #24]
 800d45e:	1ad3      	subs	r3, r2, r3
 800d460:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d462:	687a      	ldr	r2, [r7, #4]
 800d464:	6a3b      	ldr	r3, [r7, #32]
 800d466:	429a      	cmp	r2, r3
 800d468:	f240 80fe 	bls.w	800d668 <f_read+0x26c>
 800d46c:	6a3b      	ldr	r3, [r7, #32]
 800d46e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d470:	e0fa      	b.n	800d668 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	699b      	ldr	r3, [r3, #24]
 800d476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	f040 80c6 	bne.w	800d60c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	699b      	ldr	r3, [r3, #24]
 800d484:	0a5b      	lsrs	r3, r3, #9
 800d486:	697a      	ldr	r2, [r7, #20]
 800d488:	8952      	ldrh	r2, [r2, #10]
 800d48a:	3a01      	subs	r2, #1
 800d48c:	4013      	ands	r3, r2
 800d48e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d490:	69fb      	ldr	r3, [r7, #28]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d12f      	bne.n	800d4f6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	699b      	ldr	r3, [r3, #24]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d103      	bne.n	800d4a6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	689b      	ldr	r3, [r3, #8]
 800d4a2:	633b      	str	r3, [r7, #48]	; 0x30
 800d4a4:	e013      	b.n	800d4ce <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d007      	beq.n	800d4be <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	699b      	ldr	r3, [r3, #24]
 800d4b2:	4619      	mov	r1, r3
 800d4b4:	68f8      	ldr	r0, [r7, #12]
 800d4b6:	f7fe fef9 	bl	800c2ac <clmt_clust>
 800d4ba:	6338      	str	r0, [r7, #48]	; 0x30
 800d4bc:	e007      	b.n	800d4ce <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d4be:	68fa      	ldr	r2, [r7, #12]
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	69db      	ldr	r3, [r3, #28]
 800d4c4:	4619      	mov	r1, r3
 800d4c6:	4610      	mov	r0, r2
 800d4c8:	f7fe fc5f 	bl	800bd8a <get_fat>
 800d4cc:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d0:	2b01      	cmp	r3, #1
 800d4d2:	d804      	bhi.n	800d4de <f_read+0xe2>
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	2202      	movs	r2, #2
 800d4d8:	755a      	strb	r2, [r3, #21]
 800d4da:	2302      	movs	r3, #2
 800d4dc:	e0c9      	b.n	800d672 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4e4:	d104      	bne.n	800d4f0 <f_read+0xf4>
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	2201      	movs	r2, #1
 800d4ea:	755a      	strb	r2, [r3, #21]
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	e0c0      	b.n	800d672 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4f4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d4f6:	697a      	ldr	r2, [r7, #20]
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	69db      	ldr	r3, [r3, #28]
 800d4fc:	4619      	mov	r1, r3
 800d4fe:	4610      	mov	r0, r2
 800d500:	f7fe fc24 	bl	800bd4c <clust2sect>
 800d504:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d506:	69bb      	ldr	r3, [r7, #24]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d104      	bne.n	800d516 <f_read+0x11a>
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	2202      	movs	r2, #2
 800d510:	755a      	strb	r2, [r3, #21]
 800d512:	2302      	movs	r3, #2
 800d514:	e0ad      	b.n	800d672 <f_read+0x276>
			sect += csect;
 800d516:	69ba      	ldr	r2, [r7, #24]
 800d518:	69fb      	ldr	r3, [r7, #28]
 800d51a:	4413      	add	r3, r2
 800d51c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	0a5b      	lsrs	r3, r3, #9
 800d522:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d526:	2b00      	cmp	r3, #0
 800d528:	d039      	beq.n	800d59e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d52a:	69fa      	ldr	r2, [r7, #28]
 800d52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d52e:	4413      	add	r3, r2
 800d530:	697a      	ldr	r2, [r7, #20]
 800d532:	8952      	ldrh	r2, [r2, #10]
 800d534:	4293      	cmp	r3, r2
 800d536:	d905      	bls.n	800d544 <f_read+0x148>
					cc = fs->csize - csect;
 800d538:	697b      	ldr	r3, [r7, #20]
 800d53a:	895b      	ldrh	r3, [r3, #10]
 800d53c:	461a      	mov	r2, r3
 800d53e:	69fb      	ldr	r3, [r7, #28]
 800d540:	1ad3      	subs	r3, r2, r3
 800d542:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d544:	697b      	ldr	r3, [r7, #20]
 800d546:	7858      	ldrb	r0, [r3, #1]
 800d548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d54a:	69ba      	ldr	r2, [r7, #24]
 800d54c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d54e:	f7fe f853 	bl	800b5f8 <disk_read>
 800d552:	4603      	mov	r3, r0
 800d554:	2b00      	cmp	r3, #0
 800d556:	d004      	beq.n	800d562 <f_read+0x166>
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	2201      	movs	r2, #1
 800d55c:	755a      	strb	r2, [r3, #21]
 800d55e:	2301      	movs	r3, #1
 800d560:	e087      	b.n	800d672 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	7d1b      	ldrb	r3, [r3, #20]
 800d566:	b25b      	sxtb	r3, r3
 800d568:	2b00      	cmp	r3, #0
 800d56a:	da14      	bge.n	800d596 <f_read+0x19a>
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	6a1a      	ldr	r2, [r3, #32]
 800d570:	69bb      	ldr	r3, [r7, #24]
 800d572:	1ad3      	subs	r3, r2, r3
 800d574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d576:	429a      	cmp	r2, r3
 800d578:	d90d      	bls.n	800d596 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	6a1a      	ldr	r2, [r3, #32]
 800d57e:	69bb      	ldr	r3, [r7, #24]
 800d580:	1ad3      	subs	r3, r2, r3
 800d582:	025b      	lsls	r3, r3, #9
 800d584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d586:	18d0      	adds	r0, r2, r3
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	3330      	adds	r3, #48	; 0x30
 800d58c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d590:	4619      	mov	r1, r3
 800d592:	f7fe f911 	bl	800b7b8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d598:	025b      	lsls	r3, r3, #9
 800d59a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800d59c:	e050      	b.n	800d640 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	6a1b      	ldr	r3, [r3, #32]
 800d5a2:	69ba      	ldr	r2, [r7, #24]
 800d5a4:	429a      	cmp	r2, r3
 800d5a6:	d02e      	beq.n	800d606 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	7d1b      	ldrb	r3, [r3, #20]
 800d5ac:	b25b      	sxtb	r3, r3
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	da18      	bge.n	800d5e4 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	7858      	ldrb	r0, [r3, #1]
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	6a1a      	ldr	r2, [r3, #32]
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	f7fe f839 	bl	800b638 <disk_write>
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d004      	beq.n	800d5d6 <f_read+0x1da>
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	2201      	movs	r2, #1
 800d5d0:	755a      	strb	r2, [r3, #21]
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	e04d      	b.n	800d672 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	7d1b      	ldrb	r3, [r3, #20]
 800d5da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5de:	b2da      	uxtb	r2, r3
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d5e4:	697b      	ldr	r3, [r7, #20]
 800d5e6:	7858      	ldrb	r0, [r3, #1]
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	69ba      	ldr	r2, [r7, #24]
 800d5f2:	f7fe f801 	bl	800b5f8 <disk_read>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d004      	beq.n	800d606 <f_read+0x20a>
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	2201      	movs	r2, #1
 800d600:	755a      	strb	r2, [r3, #21]
 800d602:	2301      	movs	r3, #1
 800d604:	e035      	b.n	800d672 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	69ba      	ldr	r2, [r7, #24]
 800d60a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	699b      	ldr	r3, [r3, #24]
 800d610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d614:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d618:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d61a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	429a      	cmp	r2, r3
 800d620:	d901      	bls.n	800d626 <f_read+0x22a>
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	699b      	ldr	r3, [r3, #24]
 800d630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d634:	4413      	add	r3, r2
 800d636:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d638:	4619      	mov	r1, r3
 800d63a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d63c:	f7fe f8bc 	bl	800b7b8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d644:	4413      	add	r3, r2
 800d646:	627b      	str	r3, [r7, #36]	; 0x24
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	699a      	ldr	r2, [r3, #24]
 800d64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d64e:	441a      	add	r2, r3
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	619a      	str	r2, [r3, #24]
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	681a      	ldr	r2, [r3, #0]
 800d658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d65a:	441a      	add	r2, r3
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	601a      	str	r2, [r3, #0]
 800d660:	687a      	ldr	r2, [r7, #4]
 800d662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d664:	1ad3      	subs	r3, r2, r3
 800d666:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	f47f af01 	bne.w	800d472 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d670:	2300      	movs	r3, #0
}
 800d672:	4618      	mov	r0, r3
 800d674:	3738      	adds	r7, #56	; 0x38
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}

0800d67a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d67a:	b580      	push	{r7, lr}
 800d67c:	b086      	sub	sp, #24
 800d67e:	af00      	add	r7, sp, #0
 800d680:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	f107 0208 	add.w	r2, r7, #8
 800d688:	4611      	mov	r1, r2
 800d68a:	4618      	mov	r0, r3
 800d68c:	f7ff fc7c 	bl	800cf88 <validate>
 800d690:	4603      	mov	r3, r0
 800d692:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d694:	7dfb      	ldrb	r3, [r7, #23]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d168      	bne.n	800d76c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	7d1b      	ldrb	r3, [r3, #20]
 800d69e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d062      	beq.n	800d76c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	7d1b      	ldrb	r3, [r3, #20]
 800d6aa:	b25b      	sxtb	r3, r3
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	da15      	bge.n	800d6dc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	7858      	ldrb	r0, [r3, #1]
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6a1a      	ldr	r2, [r3, #32]
 800d6be:	2301      	movs	r3, #1
 800d6c0:	f7fd ffba 	bl	800b638 <disk_write>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d001      	beq.n	800d6ce <f_sync+0x54>
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	e04f      	b.n	800d76e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	7d1b      	ldrb	r3, [r3, #20]
 800d6d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6d6:	b2da      	uxtb	r2, r3
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d6dc:	f7fb fce0 	bl	80090a0 <get_fattime>
 800d6e0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d6e2:	68ba      	ldr	r2, [r7, #8]
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6e8:	4619      	mov	r1, r3
 800d6ea:	4610      	mov	r0, r2
 800d6ec:	f7fe fa92 	bl	800bc14 <move_window>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d6f4:	7dfb      	ldrb	r3, [r7, #23]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d138      	bne.n	800d76c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6fe:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	330b      	adds	r3, #11
 800d704:	781a      	ldrb	r2, [r3, #0]
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	330b      	adds	r3, #11
 800d70a:	f042 0220 	orr.w	r2, r2, #32
 800d70e:	b2d2      	uxtb	r2, r2
 800d710:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	6818      	ldr	r0, [r3, #0]
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	689b      	ldr	r3, [r3, #8]
 800d71a:	461a      	mov	r2, r3
 800d71c:	68f9      	ldr	r1, [r7, #12]
 800d71e:	f7fe ff9f 	bl	800c660 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	f103 021c 	add.w	r2, r3, #28
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	68db      	ldr	r3, [r3, #12]
 800d72c:	4619      	mov	r1, r3
 800d72e:	4610      	mov	r0, r2
 800d730:	f7fe f816 	bl	800b760 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	3316      	adds	r3, #22
 800d738:	6939      	ldr	r1, [r7, #16]
 800d73a:	4618      	mov	r0, r3
 800d73c:	f7fe f810 	bl	800b760 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	3312      	adds	r3, #18
 800d744:	2100      	movs	r1, #0
 800d746:	4618      	mov	r0, r3
 800d748:	f7fd ffef 	bl	800b72a <st_word>
					fs->wflag = 1;
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	2201      	movs	r2, #1
 800d750:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	4618      	mov	r0, r3
 800d756:	f7fe fa8b 	bl	800bc70 <sync_fs>
 800d75a:	4603      	mov	r3, r0
 800d75c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	7d1b      	ldrb	r3, [r3, #20]
 800d762:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d766:	b2da      	uxtb	r2, r3
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d76c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d76e:	4618      	mov	r0, r3
 800d770:	3718      	adds	r7, #24
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}

0800d776 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d776:	b580      	push	{r7, lr}
 800d778:	b084      	sub	sp, #16
 800d77a:	af00      	add	r7, sp, #0
 800d77c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d77e:	6878      	ldr	r0, [r7, #4]
 800d780:	f7ff ff7b 	bl	800d67a <f_sync>
 800d784:	4603      	mov	r3, r0
 800d786:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d788:	7bfb      	ldrb	r3, [r7, #15]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d118      	bne.n	800d7c0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	f107 0208 	add.w	r2, r7, #8
 800d794:	4611      	mov	r1, r2
 800d796:	4618      	mov	r0, r3
 800d798:	f7ff fbf6 	bl	800cf88 <validate>
 800d79c:	4603      	mov	r3, r0
 800d79e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d7a0:	7bfb      	ldrb	r3, [r7, #15]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d10c      	bne.n	800d7c0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	691b      	ldr	r3, [r3, #16]
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f7fe f98e 	bl	800bacc <dec_lock>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d7b4:	7bfb      	ldrb	r3, [r7, #15]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d102      	bne.n	800d7c0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2200      	movs	r2, #0
 800d7be:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d7c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	3710      	adds	r7, #16
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}

0800d7ca <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800d7ca:	b580      	push	{r7, lr}
 800d7cc:	b090      	sub	sp, #64	; 0x40
 800d7ce:	af00      	add	r7, sp, #0
 800d7d0:	6078      	str	r0, [r7, #4]
 800d7d2:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	f107 0208 	add.w	r2, r7, #8
 800d7da:	4611      	mov	r1, r2
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f7ff fbd3 	bl	800cf88 <validate>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800d7e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d103      	bne.n	800d7f8 <f_lseek+0x2e>
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	7d5b      	ldrb	r3, [r3, #21]
 800d7f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800d7f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d002      	beq.n	800d806 <f_lseek+0x3c>
 800d800:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d804:	e1e6      	b.n	800dbd4 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	f000 80d1 	beq.w	800d9b2 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d816:	d15a      	bne.n	800d8ce <f_lseek+0x104>
			tbl = fp->cltbl;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d81c:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d820:	1d1a      	adds	r2, r3, #4
 800d822:	627a      	str	r2, [r7, #36]	; 0x24
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	617b      	str	r3, [r7, #20]
 800d828:	2302      	movs	r3, #2
 800d82a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	689b      	ldr	r3, [r3, #8]
 800d830:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800d832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d834:	2b00      	cmp	r3, #0
 800d836:	d03a      	beq.n	800d8ae <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d83a:	613b      	str	r3, [r7, #16]
 800d83c:	2300      	movs	r3, #0
 800d83e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d842:	3302      	adds	r3, #2
 800d844:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800d846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d848:	60fb      	str	r3, [r7, #12]
 800d84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d84c:	3301      	adds	r3, #1
 800d84e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d854:	4618      	mov	r0, r3
 800d856:	f7fe fa98 	bl	800bd8a <get_fat>
 800d85a:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800d85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d85e:	2b01      	cmp	r3, #1
 800d860:	d804      	bhi.n	800d86c <f_lseek+0xa2>
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2202      	movs	r2, #2
 800d866:	755a      	strb	r2, [r3, #21]
 800d868:	2302      	movs	r3, #2
 800d86a:	e1b3      	b.n	800dbd4 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d86e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d872:	d104      	bne.n	800d87e <f_lseek+0xb4>
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2201      	movs	r2, #1
 800d878:	755a      	strb	r2, [r3, #21]
 800d87a:	2301      	movs	r3, #1
 800d87c:	e1aa      	b.n	800dbd4 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	3301      	adds	r3, #1
 800d882:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d884:	429a      	cmp	r2, r3
 800d886:	d0de      	beq.n	800d846 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d888:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	429a      	cmp	r2, r3
 800d88e:	d809      	bhi.n	800d8a4 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800d890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d892:	1d1a      	adds	r2, r3, #4
 800d894:	627a      	str	r2, [r7, #36]	; 0x24
 800d896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d898:	601a      	str	r2, [r3, #0]
 800d89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d89c:	1d1a      	adds	r2, r3, #4
 800d89e:	627a      	str	r2, [r7, #36]	; 0x24
 800d8a0:	693a      	ldr	r2, [r7, #16]
 800d8a2:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	695b      	ldr	r3, [r3, #20]
 800d8a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8aa:	429a      	cmp	r2, r3
 800d8ac:	d3c4      	bcc.n	800d838 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8b4:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800d8b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8b8:	697b      	ldr	r3, [r7, #20]
 800d8ba:	429a      	cmp	r2, r3
 800d8bc:	d803      	bhi.n	800d8c6 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800d8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	601a      	str	r2, [r3, #0]
 800d8c4:	e184      	b.n	800dbd0 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800d8c6:	2311      	movs	r3, #17
 800d8c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d8cc:	e180      	b.n	800dbd0 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	68db      	ldr	r3, [r3, #12]
 800d8d2:	683a      	ldr	r2, [r7, #0]
 800d8d4:	429a      	cmp	r2, r3
 800d8d6:	d902      	bls.n	800d8de <f_lseek+0x114>
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	68db      	ldr	r3, [r3, #12]
 800d8dc:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	683a      	ldr	r2, [r7, #0]
 800d8e2:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	f000 8172 	beq.w	800dbd0 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	3b01      	subs	r3, #1
 800d8f0:	4619      	mov	r1, r3
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f7fe fcda 	bl	800c2ac <clmt_clust>
 800d8f8:	4602      	mov	r2, r0
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800d8fe:	68ba      	ldr	r2, [r7, #8]
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	69db      	ldr	r3, [r3, #28]
 800d904:	4619      	mov	r1, r3
 800d906:	4610      	mov	r0, r2
 800d908:	f7fe fa20 	bl	800bd4c <clust2sect>
 800d90c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800d90e:	69bb      	ldr	r3, [r7, #24]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d104      	bne.n	800d91e <f_lseek+0x154>
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2202      	movs	r2, #2
 800d918:	755a      	strb	r2, [r3, #21]
 800d91a:	2302      	movs	r3, #2
 800d91c:	e15a      	b.n	800dbd4 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	3b01      	subs	r3, #1
 800d922:	0a5b      	lsrs	r3, r3, #9
 800d924:	68ba      	ldr	r2, [r7, #8]
 800d926:	8952      	ldrh	r2, [r2, #10]
 800d928:	3a01      	subs	r2, #1
 800d92a:	4013      	ands	r3, r2
 800d92c:	69ba      	ldr	r2, [r7, #24]
 800d92e:	4413      	add	r3, r2
 800d930:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	699b      	ldr	r3, [r3, #24]
 800d936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	f000 8148 	beq.w	800dbd0 <f_lseek+0x406>
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6a1b      	ldr	r3, [r3, #32]
 800d944:	69ba      	ldr	r2, [r7, #24]
 800d946:	429a      	cmp	r2, r3
 800d948:	f000 8142 	beq.w	800dbd0 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	7d1b      	ldrb	r3, [r3, #20]
 800d950:	b25b      	sxtb	r3, r3
 800d952:	2b00      	cmp	r3, #0
 800d954:	da18      	bge.n	800d988 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	7858      	ldrb	r0, [r3, #1]
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6a1a      	ldr	r2, [r3, #32]
 800d964:	2301      	movs	r3, #1
 800d966:	f7fd fe67 	bl	800b638 <disk_write>
 800d96a:	4603      	mov	r3, r0
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d004      	beq.n	800d97a <f_lseek+0x1b0>
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2201      	movs	r2, #1
 800d974:	755a      	strb	r2, [r3, #21]
 800d976:	2301      	movs	r3, #1
 800d978:	e12c      	b.n	800dbd4 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	7d1b      	ldrb	r3, [r3, #20]
 800d97e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d982:	b2da      	uxtb	r2, r3
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	7858      	ldrb	r0, [r3, #1]
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d992:	2301      	movs	r3, #1
 800d994:	69ba      	ldr	r2, [r7, #24]
 800d996:	f7fd fe2f 	bl	800b5f8 <disk_read>
 800d99a:	4603      	mov	r3, r0
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d004      	beq.n	800d9aa <f_lseek+0x1e0>
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2201      	movs	r2, #1
 800d9a4:	755a      	strb	r2, [r3, #21]
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	e114      	b.n	800dbd4 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	69ba      	ldr	r2, [r7, #24]
 800d9ae:	621a      	str	r2, [r3, #32]
 800d9b0:	e10e      	b.n	800dbd0 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	68db      	ldr	r3, [r3, #12]
 800d9b6:	683a      	ldr	r2, [r7, #0]
 800d9b8:	429a      	cmp	r2, r3
 800d9ba:	d908      	bls.n	800d9ce <f_lseek+0x204>
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	7d1b      	ldrb	r3, [r3, #20]
 800d9c0:	f003 0302 	and.w	r3, r3, #2
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d102      	bne.n	800d9ce <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	68db      	ldr	r3, [r3, #12]
 800d9cc:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	699b      	ldr	r3, [r3, #24]
 800d9d2:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	637b      	str	r3, [r7, #52]	; 0x34
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9dc:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	f000 80a7 	beq.w	800db34 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800d9e6:	68bb      	ldr	r3, [r7, #8]
 800d9e8:	895b      	ldrh	r3, [r3, #10]
 800d9ea:	025b      	lsls	r3, r3, #9
 800d9ec:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800d9ee:	6a3b      	ldr	r3, [r7, #32]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d01b      	beq.n	800da2c <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	1e5a      	subs	r2, r3, #1
 800d9f8:	69fb      	ldr	r3, [r7, #28]
 800d9fa:	fbb2 f2f3 	udiv	r2, r2, r3
 800d9fe:	6a3b      	ldr	r3, [r7, #32]
 800da00:	1e59      	subs	r1, r3, #1
 800da02:	69fb      	ldr	r3, [r7, #28]
 800da04:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800da08:	429a      	cmp	r2, r3
 800da0a:	d30f      	bcc.n	800da2c <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800da0c:	6a3b      	ldr	r3, [r7, #32]
 800da0e:	1e5a      	subs	r2, r3, #1
 800da10:	69fb      	ldr	r3, [r7, #28]
 800da12:	425b      	negs	r3, r3
 800da14:	401a      	ands	r2, r3
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	699b      	ldr	r3, [r3, #24]
 800da1e:	683a      	ldr	r2, [r7, #0]
 800da20:	1ad3      	subs	r3, r2, r3
 800da22:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	69db      	ldr	r3, [r3, #28]
 800da28:	63bb      	str	r3, [r7, #56]	; 0x38
 800da2a:	e022      	b.n	800da72 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	689b      	ldr	r3, [r3, #8]
 800da30:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800da32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da34:	2b00      	cmp	r3, #0
 800da36:	d119      	bne.n	800da6c <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2100      	movs	r1, #0
 800da3c:	4618      	mov	r0, r3
 800da3e:	f7fe fb9d 	bl	800c17c <create_chain>
 800da42:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800da44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da46:	2b01      	cmp	r3, #1
 800da48:	d104      	bne.n	800da54 <f_lseek+0x28a>
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2202      	movs	r2, #2
 800da4e:	755a      	strb	r2, [r3, #21]
 800da50:	2302      	movs	r3, #2
 800da52:	e0bf      	b.n	800dbd4 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800da54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da5a:	d104      	bne.n	800da66 <f_lseek+0x29c>
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2201      	movs	r2, #1
 800da60:	755a      	strb	r2, [r3, #21]
 800da62:	2301      	movs	r3, #1
 800da64:	e0b6      	b.n	800dbd4 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da6a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da70:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800da72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da74:	2b00      	cmp	r3, #0
 800da76:	d05d      	beq.n	800db34 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800da78:	e03a      	b.n	800daf0 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800da7a:	683a      	ldr	r2, [r7, #0]
 800da7c:	69fb      	ldr	r3, [r7, #28]
 800da7e:	1ad3      	subs	r3, r2, r3
 800da80:	603b      	str	r3, [r7, #0]
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	699a      	ldr	r2, [r3, #24]
 800da86:	69fb      	ldr	r3, [r7, #28]
 800da88:	441a      	add	r2, r3
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	7d1b      	ldrb	r3, [r3, #20]
 800da92:	f003 0302 	and.w	r3, r3, #2
 800da96:	2b00      	cmp	r3, #0
 800da98:	d00b      	beq.n	800dab2 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800da9e:	4618      	mov	r0, r3
 800daa0:	f7fe fb6c 	bl	800c17c <create_chain>
 800daa4:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800daa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d108      	bne.n	800dabe <f_lseek+0x2f4>
							ofs = 0; break;
 800daac:	2300      	movs	r3, #0
 800daae:	603b      	str	r3, [r7, #0]
 800dab0:	e022      	b.n	800daf8 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dab6:	4618      	mov	r0, r3
 800dab8:	f7fe f967 	bl	800bd8a <get_fat>
 800dabc:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dabe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dac4:	d104      	bne.n	800dad0 <f_lseek+0x306>
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2201      	movs	r2, #1
 800daca:	755a      	strb	r2, [r3, #21]
 800dacc:	2301      	movs	r3, #1
 800dace:	e081      	b.n	800dbd4 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800dad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dad2:	2b01      	cmp	r3, #1
 800dad4:	d904      	bls.n	800dae0 <f_lseek+0x316>
 800dad6:	68bb      	ldr	r3, [r7, #8]
 800dad8:	695b      	ldr	r3, [r3, #20]
 800dada:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dadc:	429a      	cmp	r2, r3
 800dade:	d304      	bcc.n	800daea <f_lseek+0x320>
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2202      	movs	r2, #2
 800dae4:	755a      	strb	r2, [r3, #21]
 800dae6:	2302      	movs	r3, #2
 800dae8:	e074      	b.n	800dbd4 <f_lseek+0x40a>
					fp->clust = clst;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800daee:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800daf0:	683a      	ldr	r2, [r7, #0]
 800daf2:	69fb      	ldr	r3, [r7, #28]
 800daf4:	429a      	cmp	r2, r3
 800daf6:	d8c0      	bhi.n	800da7a <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	699a      	ldr	r2, [r3, #24]
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	441a      	add	r2, r3
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d012      	beq.n	800db34 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800db0e:	68bb      	ldr	r3, [r7, #8]
 800db10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800db12:	4618      	mov	r0, r3
 800db14:	f7fe f91a 	bl	800bd4c <clust2sect>
 800db18:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800db1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d104      	bne.n	800db2a <f_lseek+0x360>
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2202      	movs	r2, #2
 800db24:	755a      	strb	r2, [r3, #21]
 800db26:	2302      	movs	r3, #2
 800db28:	e054      	b.n	800dbd4 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	0a5b      	lsrs	r3, r3, #9
 800db2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db30:	4413      	add	r3, r2
 800db32:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	699a      	ldr	r2, [r3, #24]
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	68db      	ldr	r3, [r3, #12]
 800db3c:	429a      	cmp	r2, r3
 800db3e:	d90a      	bls.n	800db56 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	699a      	ldr	r2, [r3, #24]
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	7d1b      	ldrb	r3, [r3, #20]
 800db4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db50:	b2da      	uxtb	r2, r3
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	699b      	ldr	r3, [r3, #24]
 800db5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d036      	beq.n	800dbd0 <f_lseek+0x406>
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6a1b      	ldr	r3, [r3, #32]
 800db66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db68:	429a      	cmp	r2, r3
 800db6a:	d031      	beq.n	800dbd0 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	7d1b      	ldrb	r3, [r3, #20]
 800db70:	b25b      	sxtb	r3, r3
 800db72:	2b00      	cmp	r3, #0
 800db74:	da18      	bge.n	800dba8 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	7858      	ldrb	r0, [r3, #1]
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6a1a      	ldr	r2, [r3, #32]
 800db84:	2301      	movs	r3, #1
 800db86:	f7fd fd57 	bl	800b638 <disk_write>
 800db8a:	4603      	mov	r3, r0
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d004      	beq.n	800db9a <f_lseek+0x3d0>
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2201      	movs	r2, #1
 800db94:	755a      	strb	r2, [r3, #21]
 800db96:	2301      	movs	r3, #1
 800db98:	e01c      	b.n	800dbd4 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	7d1b      	ldrb	r3, [r3, #20]
 800db9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dba2:	b2da      	uxtb	r2, r3
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	7858      	ldrb	r0, [r3, #1]
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dbb6:	f7fd fd1f 	bl	800b5f8 <disk_read>
 800dbba:	4603      	mov	r3, r0
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d004      	beq.n	800dbca <f_lseek+0x400>
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2201      	movs	r2, #1
 800dbc4:	755a      	strb	r2, [r3, #21]
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	e004      	b.n	800dbd4 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dbce:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800dbd0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	3740      	adds	r7, #64	; 0x40
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}

0800dbdc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800dbdc:	b480      	push	{r7}
 800dbde:	b087      	sub	sp, #28
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	60f8      	str	r0, [r7, #12]
 800dbe4:	60b9      	str	r1, [r7, #8]
 800dbe6:	4613      	mov	r3, r2
 800dbe8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800dbea:	2301      	movs	r3, #1
 800dbec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800dbf2:	4b1f      	ldr	r3, [pc, #124]	; (800dc70 <FATFS_LinkDriverEx+0x94>)
 800dbf4:	7a5b      	ldrb	r3, [r3, #9]
 800dbf6:	b2db      	uxtb	r3, r3
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d131      	bne.n	800dc60 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800dbfc:	4b1c      	ldr	r3, [pc, #112]	; (800dc70 <FATFS_LinkDriverEx+0x94>)
 800dbfe:	7a5b      	ldrb	r3, [r3, #9]
 800dc00:	b2db      	uxtb	r3, r3
 800dc02:	461a      	mov	r2, r3
 800dc04:	4b1a      	ldr	r3, [pc, #104]	; (800dc70 <FATFS_LinkDriverEx+0x94>)
 800dc06:	2100      	movs	r1, #0
 800dc08:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800dc0a:	4b19      	ldr	r3, [pc, #100]	; (800dc70 <FATFS_LinkDriverEx+0x94>)
 800dc0c:	7a5b      	ldrb	r3, [r3, #9]
 800dc0e:	b2db      	uxtb	r3, r3
 800dc10:	4a17      	ldr	r2, [pc, #92]	; (800dc70 <FATFS_LinkDriverEx+0x94>)
 800dc12:	009b      	lsls	r3, r3, #2
 800dc14:	4413      	add	r3, r2
 800dc16:	68fa      	ldr	r2, [r7, #12]
 800dc18:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800dc1a:	4b15      	ldr	r3, [pc, #84]	; (800dc70 <FATFS_LinkDriverEx+0x94>)
 800dc1c:	7a5b      	ldrb	r3, [r3, #9]
 800dc1e:	b2db      	uxtb	r3, r3
 800dc20:	461a      	mov	r2, r3
 800dc22:	4b13      	ldr	r3, [pc, #76]	; (800dc70 <FATFS_LinkDriverEx+0x94>)
 800dc24:	4413      	add	r3, r2
 800dc26:	79fa      	ldrb	r2, [r7, #7]
 800dc28:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800dc2a:	4b11      	ldr	r3, [pc, #68]	; (800dc70 <FATFS_LinkDriverEx+0x94>)
 800dc2c:	7a5b      	ldrb	r3, [r3, #9]
 800dc2e:	b2db      	uxtb	r3, r3
 800dc30:	1c5a      	adds	r2, r3, #1
 800dc32:	b2d1      	uxtb	r1, r2
 800dc34:	4a0e      	ldr	r2, [pc, #56]	; (800dc70 <FATFS_LinkDriverEx+0x94>)
 800dc36:	7251      	strb	r1, [r2, #9]
 800dc38:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800dc3a:	7dbb      	ldrb	r3, [r7, #22]
 800dc3c:	3330      	adds	r3, #48	; 0x30
 800dc3e:	b2da      	uxtb	r2, r3
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	3301      	adds	r3, #1
 800dc48:	223a      	movs	r2, #58	; 0x3a
 800dc4a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	3302      	adds	r3, #2
 800dc50:	222f      	movs	r2, #47	; 0x2f
 800dc52:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	3303      	adds	r3, #3
 800dc58:	2200      	movs	r2, #0
 800dc5a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800dc60:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc62:	4618      	mov	r0, r3
 800dc64:	371c      	adds	r7, #28
 800dc66:	46bd      	mov	sp, r7
 800dc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6c:	4770      	bx	lr
 800dc6e:	bf00      	nop
 800dc70:	200008cc 	.word	0x200008cc

0800dc74 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b082      	sub	sp, #8
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
 800dc7c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dc7e:	2200      	movs	r2, #0
 800dc80:	6839      	ldr	r1, [r7, #0]
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f7ff ffaa 	bl	800dbdc <FATFS_LinkDriverEx>
 800dc88:	4603      	mov	r3, r0
}
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	3708      	adds	r7, #8
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}
	...

0800dc94 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800dc98:	2200      	movs	r2, #0
 800dc9a:	490e      	ldr	r1, [pc, #56]	; (800dcd4 <MX_USB_DEVICE_Init+0x40>)
 800dc9c:	480e      	ldr	r0, [pc, #56]	; (800dcd8 <MX_USB_DEVICE_Init+0x44>)
 800dc9e:	f7fc f995 	bl	8009fcc <USBD_Init>
 800dca2:	4603      	mov	r3, r0
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d001      	beq.n	800dcac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800dca8:	f7f4 f904 	bl	8001eb4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800dcac:	490b      	ldr	r1, [pc, #44]	; (800dcdc <MX_USB_DEVICE_Init+0x48>)
 800dcae:	480a      	ldr	r0, [pc, #40]	; (800dcd8 <MX_USB_DEVICE_Init+0x44>)
 800dcb0:	f7fc f9bc 	bl	800a02c <USBD_RegisterClass>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d001      	beq.n	800dcbe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800dcba:	f7f4 f8fb 	bl	8001eb4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800dcbe:	4806      	ldr	r0, [pc, #24]	; (800dcd8 <MX_USB_DEVICE_Init+0x44>)
 800dcc0:	f7fc f9ea 	bl	800a098 <USBD_Start>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d001      	beq.n	800dcce <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800dcca:	f7f4 f8f3 	bl	8001eb4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800dcce:	bf00      	nop
 800dcd0:	bd80      	pop	{r7, pc}
 800dcd2:	bf00      	nop
 800dcd4:	200000dc 	.word	0x200000dc
 800dcd8:	200008d8 	.word	0x200008d8
 800dcdc:	20000044 	.word	0x20000044

0800dce0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dce0:	b480      	push	{r7}
 800dce2:	b083      	sub	sp, #12
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	4603      	mov	r3, r0
 800dce8:	6039      	str	r1, [r7, #0]
 800dcea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	2212      	movs	r2, #18
 800dcf0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800dcf2:	4b03      	ldr	r3, [pc, #12]	; (800dd00 <USBD_FS_DeviceDescriptor+0x20>)
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	370c      	adds	r7, #12
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfe:	4770      	bx	lr
 800dd00:	200000f8 	.word	0x200000f8

0800dd04 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd04:	b480      	push	{r7}
 800dd06:	b083      	sub	sp, #12
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	6039      	str	r1, [r7, #0]
 800dd0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	2204      	movs	r2, #4
 800dd14:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dd16:	4b03      	ldr	r3, [pc, #12]	; (800dd24 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	370c      	adds	r7, #12
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd22:	4770      	bx	lr
 800dd24:	2000010c 	.word	0x2000010c

0800dd28 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b082      	sub	sp, #8
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	4603      	mov	r3, r0
 800dd30:	6039      	str	r1, [r7, #0]
 800dd32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dd34:	79fb      	ldrb	r3, [r7, #7]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d105      	bne.n	800dd46 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dd3a:	683a      	ldr	r2, [r7, #0]
 800dd3c:	4907      	ldr	r1, [pc, #28]	; (800dd5c <USBD_FS_ProductStrDescriptor+0x34>)
 800dd3e:	4808      	ldr	r0, [pc, #32]	; (800dd60 <USBD_FS_ProductStrDescriptor+0x38>)
 800dd40:	f7fd fb56 	bl	800b3f0 <USBD_GetString>
 800dd44:	e004      	b.n	800dd50 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dd46:	683a      	ldr	r2, [r7, #0]
 800dd48:	4904      	ldr	r1, [pc, #16]	; (800dd5c <USBD_FS_ProductStrDescriptor+0x34>)
 800dd4a:	4805      	ldr	r0, [pc, #20]	; (800dd60 <USBD_FS_ProductStrDescriptor+0x38>)
 800dd4c:	f7fd fb50 	bl	800b3f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dd50:	4b02      	ldr	r3, [pc, #8]	; (800dd5c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3708      	adds	r7, #8
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}
 800dd5a:	bf00      	nop
 800dd5c:	20000bb4 	.word	0x20000bb4
 800dd60:	0800fc08 	.word	0x0800fc08

0800dd64 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b082      	sub	sp, #8
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	6039      	str	r1, [r7, #0]
 800dd6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dd70:	683a      	ldr	r2, [r7, #0]
 800dd72:	4904      	ldr	r1, [pc, #16]	; (800dd84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dd74:	4804      	ldr	r0, [pc, #16]	; (800dd88 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dd76:	f7fd fb3b 	bl	800b3f0 <USBD_GetString>
  return USBD_StrDesc;
 800dd7a:	4b02      	ldr	r3, [pc, #8]	; (800dd84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	3708      	adds	r7, #8
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}
 800dd84:	20000bb4 	.word	0x20000bb4
 800dd88:	0800fc14 	.word	0x0800fc14

0800dd8c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b082      	sub	sp, #8
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	4603      	mov	r3, r0
 800dd94:	6039      	str	r1, [r7, #0]
 800dd96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	221a      	movs	r2, #26
 800dd9c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dd9e:	f000 f843 	bl	800de28 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800dda2:	4b02      	ldr	r3, [pc, #8]	; (800ddac <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	3708      	adds	r7, #8
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bd80      	pop	{r7, pc}
 800ddac:	20000110 	.word	0x20000110

0800ddb0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b082      	sub	sp, #8
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	6039      	str	r1, [r7, #0]
 800ddba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ddbc:	79fb      	ldrb	r3, [r7, #7]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d105      	bne.n	800ddce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ddc2:	683a      	ldr	r2, [r7, #0]
 800ddc4:	4907      	ldr	r1, [pc, #28]	; (800dde4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ddc6:	4808      	ldr	r0, [pc, #32]	; (800dde8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ddc8:	f7fd fb12 	bl	800b3f0 <USBD_GetString>
 800ddcc:	e004      	b.n	800ddd8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ddce:	683a      	ldr	r2, [r7, #0]
 800ddd0:	4904      	ldr	r1, [pc, #16]	; (800dde4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ddd2:	4805      	ldr	r0, [pc, #20]	; (800dde8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ddd4:	f7fd fb0c 	bl	800b3f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ddd8:	4b02      	ldr	r3, [pc, #8]	; (800dde4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ddda:	4618      	mov	r0, r3
 800dddc:	3708      	adds	r7, #8
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}
 800dde2:	bf00      	nop
 800dde4:	20000bb4 	.word	0x20000bb4
 800dde8:	0800fc28 	.word	0x0800fc28

0800ddec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b082      	sub	sp, #8
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	6039      	str	r1, [r7, #0]
 800ddf6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ddf8:	79fb      	ldrb	r3, [r7, #7]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d105      	bne.n	800de0a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ddfe:	683a      	ldr	r2, [r7, #0]
 800de00:	4907      	ldr	r1, [pc, #28]	; (800de20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800de02:	4808      	ldr	r0, [pc, #32]	; (800de24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800de04:	f7fd faf4 	bl	800b3f0 <USBD_GetString>
 800de08:	e004      	b.n	800de14 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800de0a:	683a      	ldr	r2, [r7, #0]
 800de0c:	4904      	ldr	r1, [pc, #16]	; (800de20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800de0e:	4805      	ldr	r0, [pc, #20]	; (800de24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800de10:	f7fd faee 	bl	800b3f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800de14:	4b02      	ldr	r3, [pc, #8]	; (800de20 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800de16:	4618      	mov	r0, r3
 800de18:	3708      	adds	r7, #8
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}
 800de1e:	bf00      	nop
 800de20:	20000bb4 	.word	0x20000bb4
 800de24:	0800fc34 	.word	0x0800fc34

0800de28 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b084      	sub	sp, #16
 800de2c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800de2e:	4b0f      	ldr	r3, [pc, #60]	; (800de6c <Get_SerialNum+0x44>)
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800de34:	4b0e      	ldr	r3, [pc, #56]	; (800de70 <Get_SerialNum+0x48>)
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800de3a:	4b0e      	ldr	r3, [pc, #56]	; (800de74 <Get_SerialNum+0x4c>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800de40:	68fa      	ldr	r2, [r7, #12]
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	4413      	add	r3, r2
 800de46:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d009      	beq.n	800de62 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800de4e:	2208      	movs	r2, #8
 800de50:	4909      	ldr	r1, [pc, #36]	; (800de78 <Get_SerialNum+0x50>)
 800de52:	68f8      	ldr	r0, [r7, #12]
 800de54:	f000 f814 	bl	800de80 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800de58:	2204      	movs	r2, #4
 800de5a:	4908      	ldr	r1, [pc, #32]	; (800de7c <Get_SerialNum+0x54>)
 800de5c:	68b8      	ldr	r0, [r7, #8]
 800de5e:	f000 f80f 	bl	800de80 <IntToUnicode>
  }
}
 800de62:	bf00      	nop
 800de64:	3710      	adds	r7, #16
 800de66:	46bd      	mov	sp, r7
 800de68:	bd80      	pop	{r7, pc}
 800de6a:	bf00      	nop
 800de6c:	1fff7a10 	.word	0x1fff7a10
 800de70:	1fff7a14 	.word	0x1fff7a14
 800de74:	1fff7a18 	.word	0x1fff7a18
 800de78:	20000112 	.word	0x20000112
 800de7c:	20000122 	.word	0x20000122

0800de80 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800de80:	b480      	push	{r7}
 800de82:	b087      	sub	sp, #28
 800de84:	af00      	add	r7, sp, #0
 800de86:	60f8      	str	r0, [r7, #12]
 800de88:	60b9      	str	r1, [r7, #8]
 800de8a:	4613      	mov	r3, r2
 800de8c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800de8e:	2300      	movs	r3, #0
 800de90:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800de92:	2300      	movs	r3, #0
 800de94:	75fb      	strb	r3, [r7, #23]
 800de96:	e027      	b.n	800dee8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	0f1b      	lsrs	r3, r3, #28
 800de9c:	2b09      	cmp	r3, #9
 800de9e:	d80b      	bhi.n	800deb8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	0f1b      	lsrs	r3, r3, #28
 800dea4:	b2da      	uxtb	r2, r3
 800dea6:	7dfb      	ldrb	r3, [r7, #23]
 800dea8:	005b      	lsls	r3, r3, #1
 800deaa:	4619      	mov	r1, r3
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	440b      	add	r3, r1
 800deb0:	3230      	adds	r2, #48	; 0x30
 800deb2:	b2d2      	uxtb	r2, r2
 800deb4:	701a      	strb	r2, [r3, #0]
 800deb6:	e00a      	b.n	800dece <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	0f1b      	lsrs	r3, r3, #28
 800debc:	b2da      	uxtb	r2, r3
 800debe:	7dfb      	ldrb	r3, [r7, #23]
 800dec0:	005b      	lsls	r3, r3, #1
 800dec2:	4619      	mov	r1, r3
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	440b      	add	r3, r1
 800dec8:	3237      	adds	r2, #55	; 0x37
 800deca:	b2d2      	uxtb	r2, r2
 800decc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	011b      	lsls	r3, r3, #4
 800ded2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ded4:	7dfb      	ldrb	r3, [r7, #23]
 800ded6:	005b      	lsls	r3, r3, #1
 800ded8:	3301      	adds	r3, #1
 800deda:	68ba      	ldr	r2, [r7, #8]
 800dedc:	4413      	add	r3, r2
 800dede:	2200      	movs	r2, #0
 800dee0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dee2:	7dfb      	ldrb	r3, [r7, #23]
 800dee4:	3301      	adds	r3, #1
 800dee6:	75fb      	strb	r3, [r7, #23]
 800dee8:	7dfa      	ldrb	r2, [r7, #23]
 800deea:	79fb      	ldrb	r3, [r7, #7]
 800deec:	429a      	cmp	r2, r3
 800deee:	d3d3      	bcc.n	800de98 <IntToUnicode+0x18>
  }
}
 800def0:	bf00      	nop
 800def2:	bf00      	nop
 800def4:	371c      	adds	r7, #28
 800def6:	46bd      	mov	sp, r7
 800def8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defc:	4770      	bx	lr
	...

0800df00 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b08a      	sub	sp, #40	; 0x28
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800df08:	f107 0314 	add.w	r3, r7, #20
 800df0c:	2200      	movs	r2, #0
 800df0e:	601a      	str	r2, [r3, #0]
 800df10:	605a      	str	r2, [r3, #4]
 800df12:	609a      	str	r2, [r3, #8]
 800df14:	60da      	str	r2, [r3, #12]
 800df16:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800df20:	d13a      	bne.n	800df98 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800df22:	2300      	movs	r3, #0
 800df24:	613b      	str	r3, [r7, #16]
 800df26:	4b1e      	ldr	r3, [pc, #120]	; (800dfa0 <HAL_PCD_MspInit+0xa0>)
 800df28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df2a:	4a1d      	ldr	r2, [pc, #116]	; (800dfa0 <HAL_PCD_MspInit+0xa0>)
 800df2c:	f043 0301 	orr.w	r3, r3, #1
 800df30:	6313      	str	r3, [r2, #48]	; 0x30
 800df32:	4b1b      	ldr	r3, [pc, #108]	; (800dfa0 <HAL_PCD_MspInit+0xa0>)
 800df34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df36:	f003 0301 	and.w	r3, r3, #1
 800df3a:	613b      	str	r3, [r7, #16]
 800df3c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 800df3e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800df42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df44:	2302      	movs	r3, #2
 800df46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df48:	2300      	movs	r3, #0
 800df4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800df4c:	2303      	movs	r3, #3
 800df4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800df50:	230a      	movs	r3, #10
 800df52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800df54:	f107 0314 	add.w	r3, r7, #20
 800df58:	4619      	mov	r1, r3
 800df5a:	4812      	ldr	r0, [pc, #72]	; (800dfa4 <HAL_PCD_MspInit+0xa4>)
 800df5c:	f7f4 fc88 	bl	8002870 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800df60:	4b0f      	ldr	r3, [pc, #60]	; (800dfa0 <HAL_PCD_MspInit+0xa0>)
 800df62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df64:	4a0e      	ldr	r2, [pc, #56]	; (800dfa0 <HAL_PCD_MspInit+0xa0>)
 800df66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df6a:	6353      	str	r3, [r2, #52]	; 0x34
 800df6c:	2300      	movs	r3, #0
 800df6e:	60fb      	str	r3, [r7, #12]
 800df70:	4b0b      	ldr	r3, [pc, #44]	; (800dfa0 <HAL_PCD_MspInit+0xa0>)
 800df72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df74:	4a0a      	ldr	r2, [pc, #40]	; (800dfa0 <HAL_PCD_MspInit+0xa0>)
 800df76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800df7a:	6453      	str	r3, [r2, #68]	; 0x44
 800df7c:	4b08      	ldr	r3, [pc, #32]	; (800dfa0 <HAL_PCD_MspInit+0xa0>)
 800df7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800df84:	60fb      	str	r3, [r7, #12]
 800df86:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800df88:	2200      	movs	r2, #0
 800df8a:	2100      	movs	r1, #0
 800df8c:	2043      	movs	r0, #67	; 0x43
 800df8e:	f7f4 fc34 	bl	80027fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800df92:	2043      	movs	r0, #67	; 0x43
 800df94:	f7f4 fc4d 	bl	8002832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800df98:	bf00      	nop
 800df9a:	3728      	adds	r7, #40	; 0x28
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}
 800dfa0:	40023800 	.word	0x40023800
 800dfa4:	40020000 	.word	0x40020000

0800dfa8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b082      	sub	sp, #8
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800dfbc:	4619      	mov	r1, r3
 800dfbe:	4610      	mov	r0, r2
 800dfc0:	f7fc f8b7 	bl	800a132 <USBD_LL_SetupStage>
}
 800dfc4:	bf00      	nop
 800dfc6:	3708      	adds	r7, #8
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}

0800dfcc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b082      	sub	sp, #8
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	460b      	mov	r3, r1
 800dfd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800dfde:	78fa      	ldrb	r2, [r7, #3]
 800dfe0:	6879      	ldr	r1, [r7, #4]
 800dfe2:	4613      	mov	r3, r2
 800dfe4:	00db      	lsls	r3, r3, #3
 800dfe6:	4413      	add	r3, r2
 800dfe8:	009b      	lsls	r3, r3, #2
 800dfea:	440b      	add	r3, r1
 800dfec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800dff0:	681a      	ldr	r2, [r3, #0]
 800dff2:	78fb      	ldrb	r3, [r7, #3]
 800dff4:	4619      	mov	r1, r3
 800dff6:	f7fc f8f1 	bl	800a1dc <USBD_LL_DataOutStage>
}
 800dffa:	bf00      	nop
 800dffc:	3708      	adds	r7, #8
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}

0800e002 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e002:	b580      	push	{r7, lr}
 800e004:	b082      	sub	sp, #8
 800e006:	af00      	add	r7, sp, #0
 800e008:	6078      	str	r0, [r7, #4]
 800e00a:	460b      	mov	r3, r1
 800e00c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e014:	78fa      	ldrb	r2, [r7, #3]
 800e016:	6879      	ldr	r1, [r7, #4]
 800e018:	4613      	mov	r3, r2
 800e01a:	00db      	lsls	r3, r3, #3
 800e01c:	4413      	add	r3, r2
 800e01e:	009b      	lsls	r3, r3, #2
 800e020:	440b      	add	r3, r1
 800e022:	334c      	adds	r3, #76	; 0x4c
 800e024:	681a      	ldr	r2, [r3, #0]
 800e026:	78fb      	ldrb	r3, [r7, #3]
 800e028:	4619      	mov	r1, r3
 800e02a:	f7fc f98a 	bl	800a342 <USBD_LL_DataInStage>
}
 800e02e:	bf00      	nop
 800e030:	3708      	adds	r7, #8
 800e032:	46bd      	mov	sp, r7
 800e034:	bd80      	pop	{r7, pc}

0800e036 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e036:	b580      	push	{r7, lr}
 800e038:	b082      	sub	sp, #8
 800e03a:	af00      	add	r7, sp, #0
 800e03c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e044:	4618      	mov	r0, r3
 800e046:	f7fc fabe 	bl	800a5c6 <USBD_LL_SOF>
}
 800e04a:	bf00      	nop
 800e04c:	3708      	adds	r7, #8
 800e04e:	46bd      	mov	sp, r7
 800e050:	bd80      	pop	{r7, pc}

0800e052 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e052:	b580      	push	{r7, lr}
 800e054:	b084      	sub	sp, #16
 800e056:	af00      	add	r7, sp, #0
 800e058:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e05a:	2301      	movs	r3, #1
 800e05c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	68db      	ldr	r3, [r3, #12]
 800e062:	2b02      	cmp	r3, #2
 800e064:	d001      	beq.n	800e06a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e066:	f7f3 ff25 	bl	8001eb4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e070:	7bfa      	ldrb	r2, [r7, #15]
 800e072:	4611      	mov	r1, r2
 800e074:	4618      	mov	r0, r3
 800e076:	f7fc fa68 	bl	800a54a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e080:	4618      	mov	r0, r3
 800e082:	f7fc fa10 	bl	800a4a6 <USBD_LL_Reset>
}
 800e086:	bf00      	nop
 800e088:	3710      	adds	r7, #16
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}
	...

0800e090 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b082      	sub	sp, #8
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f7fc fa63 	bl	800a56a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	687a      	ldr	r2, [r7, #4]
 800e0b0:	6812      	ldr	r2, [r2, #0]
 800e0b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e0b6:	f043 0301 	orr.w	r3, r3, #1
 800e0ba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	6a1b      	ldr	r3, [r3, #32]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d005      	beq.n	800e0d0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e0c4:	4b04      	ldr	r3, [pc, #16]	; (800e0d8 <HAL_PCD_SuspendCallback+0x48>)
 800e0c6:	691b      	ldr	r3, [r3, #16]
 800e0c8:	4a03      	ldr	r2, [pc, #12]	; (800e0d8 <HAL_PCD_SuspendCallback+0x48>)
 800e0ca:	f043 0306 	orr.w	r3, r3, #6
 800e0ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e0d0:	bf00      	nop
 800e0d2:	3708      	adds	r7, #8
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}
 800e0d8:	e000ed00 	.word	0xe000ed00

0800e0dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b082      	sub	sp, #8
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f7fc fa53 	bl	800a596 <USBD_LL_Resume>
}
 800e0f0:	bf00      	nop
 800e0f2:	3708      	adds	r7, #8
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}

0800e0f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b082      	sub	sp, #8
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
 800e100:	460b      	mov	r3, r1
 800e102:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e10a:	78fa      	ldrb	r2, [r7, #3]
 800e10c:	4611      	mov	r1, r2
 800e10e:	4618      	mov	r0, r3
 800e110:	f7fc faab 	bl	800a66a <USBD_LL_IsoOUTIncomplete>
}
 800e114:	bf00      	nop
 800e116:	3708      	adds	r7, #8
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}

0800e11c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b082      	sub	sp, #8
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
 800e124:	460b      	mov	r3, r1
 800e126:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e12e:	78fa      	ldrb	r2, [r7, #3]
 800e130:	4611      	mov	r1, r2
 800e132:	4618      	mov	r0, r3
 800e134:	f7fc fa67 	bl	800a606 <USBD_LL_IsoINIncomplete>
}
 800e138:	bf00      	nop
 800e13a:	3708      	adds	r7, #8
 800e13c:	46bd      	mov	sp, r7
 800e13e:	bd80      	pop	{r7, pc}

0800e140 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b082      	sub	sp, #8
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e14e:	4618      	mov	r0, r3
 800e150:	f7fc fabd 	bl	800a6ce <USBD_LL_DevConnected>
}
 800e154:	bf00      	nop
 800e156:	3708      	adds	r7, #8
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}

0800e15c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b082      	sub	sp, #8
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e16a:	4618      	mov	r0, r3
 800e16c:	f7fc faba 	bl	800a6e4 <USBD_LL_DevDisconnected>
}
 800e170:	bf00      	nop
 800e172:	3708      	adds	r7, #8
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}

0800e178 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b082      	sub	sp, #8
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	781b      	ldrb	r3, [r3, #0]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d13c      	bne.n	800e202 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e188:	4a20      	ldr	r2, [pc, #128]	; (800e20c <USBD_LL_Init+0x94>)
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	4a1e      	ldr	r2, [pc, #120]	; (800e20c <USBD_LL_Init+0x94>)
 800e194:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e198:	4b1c      	ldr	r3, [pc, #112]	; (800e20c <USBD_LL_Init+0x94>)
 800e19a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e19e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e1a0:	4b1a      	ldr	r3, [pc, #104]	; (800e20c <USBD_LL_Init+0x94>)
 800e1a2:	2204      	movs	r2, #4
 800e1a4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e1a6:	4b19      	ldr	r3, [pc, #100]	; (800e20c <USBD_LL_Init+0x94>)
 800e1a8:	2202      	movs	r2, #2
 800e1aa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e1ac:	4b17      	ldr	r3, [pc, #92]	; (800e20c <USBD_LL_Init+0x94>)
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e1b2:	4b16      	ldr	r3, [pc, #88]	; (800e20c <USBD_LL_Init+0x94>)
 800e1b4:	2202      	movs	r2, #2
 800e1b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e1b8:	4b14      	ldr	r3, [pc, #80]	; (800e20c <USBD_LL_Init+0x94>)
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e1be:	4b13      	ldr	r3, [pc, #76]	; (800e20c <USBD_LL_Init+0x94>)
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e1c4:	4b11      	ldr	r3, [pc, #68]	; (800e20c <USBD_LL_Init+0x94>)
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e1ca:	4b10      	ldr	r3, [pc, #64]	; (800e20c <USBD_LL_Init+0x94>)
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e1d0:	4b0e      	ldr	r3, [pc, #56]	; (800e20c <USBD_LL_Init+0x94>)
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e1d6:	480d      	ldr	r0, [pc, #52]	; (800e20c <USBD_LL_Init+0x94>)
 800e1d8:	f7f5 ffcb 	bl	8004172 <HAL_PCD_Init>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d001      	beq.n	800e1e6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e1e2:	f7f3 fe67 	bl	8001eb4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e1e6:	2180      	movs	r1, #128	; 0x80
 800e1e8:	4808      	ldr	r0, [pc, #32]	; (800e20c <USBD_LL_Init+0x94>)
 800e1ea:	f7f7 fa0a 	bl	8005602 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e1ee:	2240      	movs	r2, #64	; 0x40
 800e1f0:	2100      	movs	r1, #0
 800e1f2:	4806      	ldr	r0, [pc, #24]	; (800e20c <USBD_LL_Init+0x94>)
 800e1f4:	f7f7 f9be 	bl	8005574 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e1f8:	2280      	movs	r2, #128	; 0x80
 800e1fa:	2101      	movs	r1, #1
 800e1fc:	4803      	ldr	r0, [pc, #12]	; (800e20c <USBD_LL_Init+0x94>)
 800e1fe:	f7f7 f9b9 	bl	8005574 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e202:	2300      	movs	r3, #0
}
 800e204:	4618      	mov	r0, r3
 800e206:	3708      	adds	r7, #8
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}
 800e20c:	20000db4 	.word	0x20000db4

0800e210 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b084      	sub	sp, #16
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e218:	2300      	movs	r3, #0
 800e21a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e21c:	2300      	movs	r3, #0
 800e21e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e226:	4618      	mov	r0, r3
 800e228:	f7f6 f8c0 	bl	80043ac <HAL_PCD_Start>
 800e22c:	4603      	mov	r3, r0
 800e22e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e230:	7bfb      	ldrb	r3, [r7, #15]
 800e232:	4618      	mov	r0, r3
 800e234:	f000 f930 	bl	800e498 <USBD_Get_USB_Status>
 800e238:	4603      	mov	r3, r0
 800e23a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e23c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e23e:	4618      	mov	r0, r3
 800e240:	3710      	adds	r7, #16
 800e242:	46bd      	mov	sp, r7
 800e244:	bd80      	pop	{r7, pc}

0800e246 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e246:	b580      	push	{r7, lr}
 800e248:	b084      	sub	sp, #16
 800e24a:	af00      	add	r7, sp, #0
 800e24c:	6078      	str	r0, [r7, #4]
 800e24e:	4608      	mov	r0, r1
 800e250:	4611      	mov	r1, r2
 800e252:	461a      	mov	r2, r3
 800e254:	4603      	mov	r3, r0
 800e256:	70fb      	strb	r3, [r7, #3]
 800e258:	460b      	mov	r3, r1
 800e25a:	70bb      	strb	r3, [r7, #2]
 800e25c:	4613      	mov	r3, r2
 800e25e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e260:	2300      	movs	r3, #0
 800e262:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e264:	2300      	movs	r3, #0
 800e266:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e26e:	78bb      	ldrb	r3, [r7, #2]
 800e270:	883a      	ldrh	r2, [r7, #0]
 800e272:	78f9      	ldrb	r1, [r7, #3]
 800e274:	f7f6 fd91 	bl	8004d9a <HAL_PCD_EP_Open>
 800e278:	4603      	mov	r3, r0
 800e27a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e27c:	7bfb      	ldrb	r3, [r7, #15]
 800e27e:	4618      	mov	r0, r3
 800e280:	f000 f90a 	bl	800e498 <USBD_Get_USB_Status>
 800e284:	4603      	mov	r3, r0
 800e286:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e288:	7bbb      	ldrb	r3, [r7, #14]
}
 800e28a:	4618      	mov	r0, r3
 800e28c:	3710      	adds	r7, #16
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}

0800e292 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e292:	b580      	push	{r7, lr}
 800e294:	b084      	sub	sp, #16
 800e296:	af00      	add	r7, sp, #0
 800e298:	6078      	str	r0, [r7, #4]
 800e29a:	460b      	mov	r3, r1
 800e29c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e29e:	2300      	movs	r3, #0
 800e2a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e2ac:	78fa      	ldrb	r2, [r7, #3]
 800e2ae:	4611      	mov	r1, r2
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f7f6 fdda 	bl	8004e6a <HAL_PCD_EP_Close>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2ba:	7bfb      	ldrb	r3, [r7, #15]
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f000 f8eb 	bl	800e498 <USBD_Get_USB_Status>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	3710      	adds	r7, #16
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}

0800e2d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b084      	sub	sp, #16
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
 800e2d8:	460b      	mov	r3, r1
 800e2da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2dc:	2300      	movs	r3, #0
 800e2de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e2ea:	78fa      	ldrb	r2, [r7, #3]
 800e2ec:	4611      	mov	r1, r2
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f7f6 fe9a 	bl	8005028 <HAL_PCD_EP_SetStall>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2f8:	7bfb      	ldrb	r3, [r7, #15]
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f000 f8cc 	bl	800e498 <USBD_Get_USB_Status>
 800e300:	4603      	mov	r3, r0
 800e302:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e304:	7bbb      	ldrb	r3, [r7, #14]
}
 800e306:	4618      	mov	r0, r3
 800e308:	3710      	adds	r7, #16
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}

0800e30e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e30e:	b580      	push	{r7, lr}
 800e310:	b084      	sub	sp, #16
 800e312:	af00      	add	r7, sp, #0
 800e314:	6078      	str	r0, [r7, #4]
 800e316:	460b      	mov	r3, r1
 800e318:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e31a:	2300      	movs	r3, #0
 800e31c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e31e:	2300      	movs	r3, #0
 800e320:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e328:	78fa      	ldrb	r2, [r7, #3]
 800e32a:	4611      	mov	r1, r2
 800e32c:	4618      	mov	r0, r3
 800e32e:	f7f6 fedf 	bl	80050f0 <HAL_PCD_EP_ClrStall>
 800e332:	4603      	mov	r3, r0
 800e334:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e336:	7bfb      	ldrb	r3, [r7, #15]
 800e338:	4618      	mov	r0, r3
 800e33a:	f000 f8ad 	bl	800e498 <USBD_Get_USB_Status>
 800e33e:	4603      	mov	r3, r0
 800e340:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e342:	7bbb      	ldrb	r3, [r7, #14]
}
 800e344:	4618      	mov	r0, r3
 800e346:	3710      	adds	r7, #16
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd80      	pop	{r7, pc}

0800e34c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e34c:	b480      	push	{r7}
 800e34e:	b085      	sub	sp, #20
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
 800e354:	460b      	mov	r3, r1
 800e356:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e35e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e360:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e364:	2b00      	cmp	r3, #0
 800e366:	da0b      	bge.n	800e380 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e368:	78fb      	ldrb	r3, [r7, #3]
 800e36a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e36e:	68f9      	ldr	r1, [r7, #12]
 800e370:	4613      	mov	r3, r2
 800e372:	00db      	lsls	r3, r3, #3
 800e374:	4413      	add	r3, r2
 800e376:	009b      	lsls	r3, r3, #2
 800e378:	440b      	add	r3, r1
 800e37a:	333e      	adds	r3, #62	; 0x3e
 800e37c:	781b      	ldrb	r3, [r3, #0]
 800e37e:	e00b      	b.n	800e398 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e380:	78fb      	ldrb	r3, [r7, #3]
 800e382:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e386:	68f9      	ldr	r1, [r7, #12]
 800e388:	4613      	mov	r3, r2
 800e38a:	00db      	lsls	r3, r3, #3
 800e38c:	4413      	add	r3, r2
 800e38e:	009b      	lsls	r3, r3, #2
 800e390:	440b      	add	r3, r1
 800e392:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e396:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e398:	4618      	mov	r0, r3
 800e39a:	3714      	adds	r7, #20
 800e39c:	46bd      	mov	sp, r7
 800e39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a2:	4770      	bx	lr

0800e3a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b084      	sub	sp, #16
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
 800e3ac:	460b      	mov	r3, r1
 800e3ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e3be:	78fa      	ldrb	r2, [r7, #3]
 800e3c0:	4611      	mov	r1, r2
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f7f6 fcc4 	bl	8004d50 <HAL_PCD_SetAddress>
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3cc:	7bfb      	ldrb	r3, [r7, #15]
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f000 f862 	bl	800e498 <USBD_Get_USB_Status>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3da:	4618      	mov	r0, r3
 800e3dc:	3710      	adds	r7, #16
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	bd80      	pop	{r7, pc}

0800e3e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e3e2:	b580      	push	{r7, lr}
 800e3e4:	b086      	sub	sp, #24
 800e3e6:	af00      	add	r7, sp, #0
 800e3e8:	60f8      	str	r0, [r7, #12]
 800e3ea:	607a      	str	r2, [r7, #4]
 800e3ec:	603b      	str	r3, [r7, #0]
 800e3ee:	460b      	mov	r3, r1
 800e3f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e400:	7af9      	ldrb	r1, [r7, #11]
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	687a      	ldr	r2, [r7, #4]
 800e406:	f7f6 fdc5 	bl	8004f94 <HAL_PCD_EP_Transmit>
 800e40a:	4603      	mov	r3, r0
 800e40c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e40e:	7dfb      	ldrb	r3, [r7, #23]
 800e410:	4618      	mov	r0, r3
 800e412:	f000 f841 	bl	800e498 <USBD_Get_USB_Status>
 800e416:	4603      	mov	r3, r0
 800e418:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e41a:	7dbb      	ldrb	r3, [r7, #22]
}
 800e41c:	4618      	mov	r0, r3
 800e41e:	3718      	adds	r7, #24
 800e420:	46bd      	mov	sp, r7
 800e422:	bd80      	pop	{r7, pc}

0800e424 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b086      	sub	sp, #24
 800e428:	af00      	add	r7, sp, #0
 800e42a:	60f8      	str	r0, [r7, #12]
 800e42c:	607a      	str	r2, [r7, #4]
 800e42e:	603b      	str	r3, [r7, #0]
 800e430:	460b      	mov	r3, r1
 800e432:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e434:	2300      	movs	r3, #0
 800e436:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e438:	2300      	movs	r3, #0
 800e43a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e442:	7af9      	ldrb	r1, [r7, #11]
 800e444:	683b      	ldr	r3, [r7, #0]
 800e446:	687a      	ldr	r2, [r7, #4]
 800e448:	f7f6 fd59 	bl	8004efe <HAL_PCD_EP_Receive>
 800e44c:	4603      	mov	r3, r0
 800e44e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e450:	7dfb      	ldrb	r3, [r7, #23]
 800e452:	4618      	mov	r0, r3
 800e454:	f000 f820 	bl	800e498 <USBD_Get_USB_Status>
 800e458:	4603      	mov	r3, r0
 800e45a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e45c:	7dbb      	ldrb	r3, [r7, #22]
}
 800e45e:	4618      	mov	r0, r3
 800e460:	3718      	adds	r7, #24
 800e462:	46bd      	mov	sp, r7
 800e464:	bd80      	pop	{r7, pc}
	...

0800e468 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e468:	b480      	push	{r7}
 800e46a:	b083      	sub	sp, #12
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e470:	4b03      	ldr	r3, [pc, #12]	; (800e480 <USBD_static_malloc+0x18>)
}
 800e472:	4618      	mov	r0, r3
 800e474:	370c      	adds	r7, #12
 800e476:	46bd      	mov	sp, r7
 800e478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47c:	4770      	bx	lr
 800e47e:	bf00      	nop
 800e480:	200012c0 	.word	0x200012c0

0800e484 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e484:	b480      	push	{r7}
 800e486:	b083      	sub	sp, #12
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]

}
 800e48c:	bf00      	nop
 800e48e:	370c      	adds	r7, #12
 800e490:	46bd      	mov	sp, r7
 800e492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e496:	4770      	bx	lr

0800e498 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e498:	b480      	push	{r7}
 800e49a:	b085      	sub	sp, #20
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	4603      	mov	r3, r0
 800e4a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e4a6:	79fb      	ldrb	r3, [r7, #7]
 800e4a8:	2b03      	cmp	r3, #3
 800e4aa:	d817      	bhi.n	800e4dc <USBD_Get_USB_Status+0x44>
 800e4ac:	a201      	add	r2, pc, #4	; (adr r2, 800e4b4 <USBD_Get_USB_Status+0x1c>)
 800e4ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4b2:	bf00      	nop
 800e4b4:	0800e4c5 	.word	0x0800e4c5
 800e4b8:	0800e4cb 	.word	0x0800e4cb
 800e4bc:	0800e4d1 	.word	0x0800e4d1
 800e4c0:	0800e4d7 	.word	0x0800e4d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	73fb      	strb	r3, [r7, #15]
    break;
 800e4c8:	e00b      	b.n	800e4e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e4ca:	2303      	movs	r3, #3
 800e4cc:	73fb      	strb	r3, [r7, #15]
    break;
 800e4ce:	e008      	b.n	800e4e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e4d0:	2301      	movs	r3, #1
 800e4d2:	73fb      	strb	r3, [r7, #15]
    break;
 800e4d4:	e005      	b.n	800e4e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e4d6:	2303      	movs	r3, #3
 800e4d8:	73fb      	strb	r3, [r7, #15]
    break;
 800e4da:	e002      	b.n	800e4e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e4dc:	2303      	movs	r3, #3
 800e4de:	73fb      	strb	r3, [r7, #15]
    break;
 800e4e0:	bf00      	nop
  }
  return usb_status;
 800e4e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	3714      	adds	r7, #20
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ee:	4770      	bx	lr

0800e4f0 <__errno>:
 800e4f0:	4b01      	ldr	r3, [pc, #4]	; (800e4f8 <__errno+0x8>)
 800e4f2:	6818      	ldr	r0, [r3, #0]
 800e4f4:	4770      	bx	lr
 800e4f6:	bf00      	nop
 800e4f8:	2000012c 	.word	0x2000012c

0800e4fc <__libc_init_array>:
 800e4fc:	b570      	push	{r4, r5, r6, lr}
 800e4fe:	4d0d      	ldr	r5, [pc, #52]	; (800e534 <__libc_init_array+0x38>)
 800e500:	4c0d      	ldr	r4, [pc, #52]	; (800e538 <__libc_init_array+0x3c>)
 800e502:	1b64      	subs	r4, r4, r5
 800e504:	10a4      	asrs	r4, r4, #2
 800e506:	2600      	movs	r6, #0
 800e508:	42a6      	cmp	r6, r4
 800e50a:	d109      	bne.n	800e520 <__libc_init_array+0x24>
 800e50c:	4d0b      	ldr	r5, [pc, #44]	; (800e53c <__libc_init_array+0x40>)
 800e50e:	4c0c      	ldr	r4, [pc, #48]	; (800e540 <__libc_init_array+0x44>)
 800e510:	f001 fa14 	bl	800f93c <_init>
 800e514:	1b64      	subs	r4, r4, r5
 800e516:	10a4      	asrs	r4, r4, #2
 800e518:	2600      	movs	r6, #0
 800e51a:	42a6      	cmp	r6, r4
 800e51c:	d105      	bne.n	800e52a <__libc_init_array+0x2e>
 800e51e:	bd70      	pop	{r4, r5, r6, pc}
 800e520:	f855 3b04 	ldr.w	r3, [r5], #4
 800e524:	4798      	blx	r3
 800e526:	3601      	adds	r6, #1
 800e528:	e7ee      	b.n	800e508 <__libc_init_array+0xc>
 800e52a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e52e:	4798      	blx	r3
 800e530:	3601      	adds	r6, #1
 800e532:	e7f2      	b.n	800e51a <__libc_init_array+0x1e>
 800e534:	08011834 	.word	0x08011834
 800e538:	08011834 	.word	0x08011834
 800e53c:	08011834 	.word	0x08011834
 800e540:	08011838 	.word	0x08011838

0800e544 <memset>:
 800e544:	4402      	add	r2, r0
 800e546:	4603      	mov	r3, r0
 800e548:	4293      	cmp	r3, r2
 800e54a:	d100      	bne.n	800e54e <memset+0xa>
 800e54c:	4770      	bx	lr
 800e54e:	f803 1b01 	strb.w	r1, [r3], #1
 800e552:	e7f9      	b.n	800e548 <memset+0x4>

0800e554 <iprintf>:
 800e554:	b40f      	push	{r0, r1, r2, r3}
 800e556:	4b0a      	ldr	r3, [pc, #40]	; (800e580 <iprintf+0x2c>)
 800e558:	b513      	push	{r0, r1, r4, lr}
 800e55a:	681c      	ldr	r4, [r3, #0]
 800e55c:	b124      	cbz	r4, 800e568 <iprintf+0x14>
 800e55e:	69a3      	ldr	r3, [r4, #24]
 800e560:	b913      	cbnz	r3, 800e568 <iprintf+0x14>
 800e562:	4620      	mov	r0, r4
 800e564:	f000 fa92 	bl	800ea8c <__sinit>
 800e568:	ab05      	add	r3, sp, #20
 800e56a:	9a04      	ldr	r2, [sp, #16]
 800e56c:	68a1      	ldr	r1, [r4, #8]
 800e56e:	9301      	str	r3, [sp, #4]
 800e570:	4620      	mov	r0, r4
 800e572:	f000 fdf7 	bl	800f164 <_vfiprintf_r>
 800e576:	b002      	add	sp, #8
 800e578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e57c:	b004      	add	sp, #16
 800e57e:	4770      	bx	lr
 800e580:	2000012c 	.word	0x2000012c

0800e584 <_puts_r>:
 800e584:	b570      	push	{r4, r5, r6, lr}
 800e586:	460e      	mov	r6, r1
 800e588:	4605      	mov	r5, r0
 800e58a:	b118      	cbz	r0, 800e594 <_puts_r+0x10>
 800e58c:	6983      	ldr	r3, [r0, #24]
 800e58e:	b90b      	cbnz	r3, 800e594 <_puts_r+0x10>
 800e590:	f000 fa7c 	bl	800ea8c <__sinit>
 800e594:	69ab      	ldr	r3, [r5, #24]
 800e596:	68ac      	ldr	r4, [r5, #8]
 800e598:	b913      	cbnz	r3, 800e5a0 <_puts_r+0x1c>
 800e59a:	4628      	mov	r0, r5
 800e59c:	f000 fa76 	bl	800ea8c <__sinit>
 800e5a0:	4b2c      	ldr	r3, [pc, #176]	; (800e654 <_puts_r+0xd0>)
 800e5a2:	429c      	cmp	r4, r3
 800e5a4:	d120      	bne.n	800e5e8 <_puts_r+0x64>
 800e5a6:	686c      	ldr	r4, [r5, #4]
 800e5a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e5aa:	07db      	lsls	r3, r3, #31
 800e5ac:	d405      	bmi.n	800e5ba <_puts_r+0x36>
 800e5ae:	89a3      	ldrh	r3, [r4, #12]
 800e5b0:	0598      	lsls	r0, r3, #22
 800e5b2:	d402      	bmi.n	800e5ba <_puts_r+0x36>
 800e5b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5b6:	f000 fb07 	bl	800ebc8 <__retarget_lock_acquire_recursive>
 800e5ba:	89a3      	ldrh	r3, [r4, #12]
 800e5bc:	0719      	lsls	r1, r3, #28
 800e5be:	d51d      	bpl.n	800e5fc <_puts_r+0x78>
 800e5c0:	6923      	ldr	r3, [r4, #16]
 800e5c2:	b1db      	cbz	r3, 800e5fc <_puts_r+0x78>
 800e5c4:	3e01      	subs	r6, #1
 800e5c6:	68a3      	ldr	r3, [r4, #8]
 800e5c8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e5cc:	3b01      	subs	r3, #1
 800e5ce:	60a3      	str	r3, [r4, #8]
 800e5d0:	bb39      	cbnz	r1, 800e622 <_puts_r+0x9e>
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	da38      	bge.n	800e648 <_puts_r+0xc4>
 800e5d6:	4622      	mov	r2, r4
 800e5d8:	210a      	movs	r1, #10
 800e5da:	4628      	mov	r0, r5
 800e5dc:	f000 f87c 	bl	800e6d8 <__swbuf_r>
 800e5e0:	3001      	adds	r0, #1
 800e5e2:	d011      	beq.n	800e608 <_puts_r+0x84>
 800e5e4:	250a      	movs	r5, #10
 800e5e6:	e011      	b.n	800e60c <_puts_r+0x88>
 800e5e8:	4b1b      	ldr	r3, [pc, #108]	; (800e658 <_puts_r+0xd4>)
 800e5ea:	429c      	cmp	r4, r3
 800e5ec:	d101      	bne.n	800e5f2 <_puts_r+0x6e>
 800e5ee:	68ac      	ldr	r4, [r5, #8]
 800e5f0:	e7da      	b.n	800e5a8 <_puts_r+0x24>
 800e5f2:	4b1a      	ldr	r3, [pc, #104]	; (800e65c <_puts_r+0xd8>)
 800e5f4:	429c      	cmp	r4, r3
 800e5f6:	bf08      	it	eq
 800e5f8:	68ec      	ldreq	r4, [r5, #12]
 800e5fa:	e7d5      	b.n	800e5a8 <_puts_r+0x24>
 800e5fc:	4621      	mov	r1, r4
 800e5fe:	4628      	mov	r0, r5
 800e600:	f000 f8bc 	bl	800e77c <__swsetup_r>
 800e604:	2800      	cmp	r0, #0
 800e606:	d0dd      	beq.n	800e5c4 <_puts_r+0x40>
 800e608:	f04f 35ff 	mov.w	r5, #4294967295
 800e60c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e60e:	07da      	lsls	r2, r3, #31
 800e610:	d405      	bmi.n	800e61e <_puts_r+0x9a>
 800e612:	89a3      	ldrh	r3, [r4, #12]
 800e614:	059b      	lsls	r3, r3, #22
 800e616:	d402      	bmi.n	800e61e <_puts_r+0x9a>
 800e618:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e61a:	f000 fad6 	bl	800ebca <__retarget_lock_release_recursive>
 800e61e:	4628      	mov	r0, r5
 800e620:	bd70      	pop	{r4, r5, r6, pc}
 800e622:	2b00      	cmp	r3, #0
 800e624:	da04      	bge.n	800e630 <_puts_r+0xac>
 800e626:	69a2      	ldr	r2, [r4, #24]
 800e628:	429a      	cmp	r2, r3
 800e62a:	dc06      	bgt.n	800e63a <_puts_r+0xb6>
 800e62c:	290a      	cmp	r1, #10
 800e62e:	d004      	beq.n	800e63a <_puts_r+0xb6>
 800e630:	6823      	ldr	r3, [r4, #0]
 800e632:	1c5a      	adds	r2, r3, #1
 800e634:	6022      	str	r2, [r4, #0]
 800e636:	7019      	strb	r1, [r3, #0]
 800e638:	e7c5      	b.n	800e5c6 <_puts_r+0x42>
 800e63a:	4622      	mov	r2, r4
 800e63c:	4628      	mov	r0, r5
 800e63e:	f000 f84b 	bl	800e6d8 <__swbuf_r>
 800e642:	3001      	adds	r0, #1
 800e644:	d1bf      	bne.n	800e5c6 <_puts_r+0x42>
 800e646:	e7df      	b.n	800e608 <_puts_r+0x84>
 800e648:	6823      	ldr	r3, [r4, #0]
 800e64a:	250a      	movs	r5, #10
 800e64c:	1c5a      	adds	r2, r3, #1
 800e64e:	6022      	str	r2, [r4, #0]
 800e650:	701d      	strb	r5, [r3, #0]
 800e652:	e7db      	b.n	800e60c <_puts_r+0x88>
 800e654:	080117b8 	.word	0x080117b8
 800e658:	080117d8 	.word	0x080117d8
 800e65c:	08011798 	.word	0x08011798

0800e660 <puts>:
 800e660:	4b02      	ldr	r3, [pc, #8]	; (800e66c <puts+0xc>)
 800e662:	4601      	mov	r1, r0
 800e664:	6818      	ldr	r0, [r3, #0]
 800e666:	f7ff bf8d 	b.w	800e584 <_puts_r>
 800e66a:	bf00      	nop
 800e66c:	2000012c 	.word	0x2000012c

0800e670 <sniprintf>:
 800e670:	b40c      	push	{r2, r3}
 800e672:	b530      	push	{r4, r5, lr}
 800e674:	4b17      	ldr	r3, [pc, #92]	; (800e6d4 <sniprintf+0x64>)
 800e676:	1e0c      	subs	r4, r1, #0
 800e678:	681d      	ldr	r5, [r3, #0]
 800e67a:	b09d      	sub	sp, #116	; 0x74
 800e67c:	da08      	bge.n	800e690 <sniprintf+0x20>
 800e67e:	238b      	movs	r3, #139	; 0x8b
 800e680:	602b      	str	r3, [r5, #0]
 800e682:	f04f 30ff 	mov.w	r0, #4294967295
 800e686:	b01d      	add	sp, #116	; 0x74
 800e688:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e68c:	b002      	add	sp, #8
 800e68e:	4770      	bx	lr
 800e690:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e694:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e698:	bf14      	ite	ne
 800e69a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e69e:	4623      	moveq	r3, r4
 800e6a0:	9304      	str	r3, [sp, #16]
 800e6a2:	9307      	str	r3, [sp, #28]
 800e6a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e6a8:	9002      	str	r0, [sp, #8]
 800e6aa:	9006      	str	r0, [sp, #24]
 800e6ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e6b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e6b2:	ab21      	add	r3, sp, #132	; 0x84
 800e6b4:	a902      	add	r1, sp, #8
 800e6b6:	4628      	mov	r0, r5
 800e6b8:	9301      	str	r3, [sp, #4]
 800e6ba:	f000 fc29 	bl	800ef10 <_svfiprintf_r>
 800e6be:	1c43      	adds	r3, r0, #1
 800e6c0:	bfbc      	itt	lt
 800e6c2:	238b      	movlt	r3, #139	; 0x8b
 800e6c4:	602b      	strlt	r3, [r5, #0]
 800e6c6:	2c00      	cmp	r4, #0
 800e6c8:	d0dd      	beq.n	800e686 <sniprintf+0x16>
 800e6ca:	9b02      	ldr	r3, [sp, #8]
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	701a      	strb	r2, [r3, #0]
 800e6d0:	e7d9      	b.n	800e686 <sniprintf+0x16>
 800e6d2:	bf00      	nop
 800e6d4:	2000012c 	.word	0x2000012c

0800e6d8 <__swbuf_r>:
 800e6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6da:	460e      	mov	r6, r1
 800e6dc:	4614      	mov	r4, r2
 800e6de:	4605      	mov	r5, r0
 800e6e0:	b118      	cbz	r0, 800e6ea <__swbuf_r+0x12>
 800e6e2:	6983      	ldr	r3, [r0, #24]
 800e6e4:	b90b      	cbnz	r3, 800e6ea <__swbuf_r+0x12>
 800e6e6:	f000 f9d1 	bl	800ea8c <__sinit>
 800e6ea:	4b21      	ldr	r3, [pc, #132]	; (800e770 <__swbuf_r+0x98>)
 800e6ec:	429c      	cmp	r4, r3
 800e6ee:	d12b      	bne.n	800e748 <__swbuf_r+0x70>
 800e6f0:	686c      	ldr	r4, [r5, #4]
 800e6f2:	69a3      	ldr	r3, [r4, #24]
 800e6f4:	60a3      	str	r3, [r4, #8]
 800e6f6:	89a3      	ldrh	r3, [r4, #12]
 800e6f8:	071a      	lsls	r2, r3, #28
 800e6fa:	d52f      	bpl.n	800e75c <__swbuf_r+0x84>
 800e6fc:	6923      	ldr	r3, [r4, #16]
 800e6fe:	b36b      	cbz	r3, 800e75c <__swbuf_r+0x84>
 800e700:	6923      	ldr	r3, [r4, #16]
 800e702:	6820      	ldr	r0, [r4, #0]
 800e704:	1ac0      	subs	r0, r0, r3
 800e706:	6963      	ldr	r3, [r4, #20]
 800e708:	b2f6      	uxtb	r6, r6
 800e70a:	4283      	cmp	r3, r0
 800e70c:	4637      	mov	r7, r6
 800e70e:	dc04      	bgt.n	800e71a <__swbuf_r+0x42>
 800e710:	4621      	mov	r1, r4
 800e712:	4628      	mov	r0, r5
 800e714:	f000 f926 	bl	800e964 <_fflush_r>
 800e718:	bb30      	cbnz	r0, 800e768 <__swbuf_r+0x90>
 800e71a:	68a3      	ldr	r3, [r4, #8]
 800e71c:	3b01      	subs	r3, #1
 800e71e:	60a3      	str	r3, [r4, #8]
 800e720:	6823      	ldr	r3, [r4, #0]
 800e722:	1c5a      	adds	r2, r3, #1
 800e724:	6022      	str	r2, [r4, #0]
 800e726:	701e      	strb	r6, [r3, #0]
 800e728:	6963      	ldr	r3, [r4, #20]
 800e72a:	3001      	adds	r0, #1
 800e72c:	4283      	cmp	r3, r0
 800e72e:	d004      	beq.n	800e73a <__swbuf_r+0x62>
 800e730:	89a3      	ldrh	r3, [r4, #12]
 800e732:	07db      	lsls	r3, r3, #31
 800e734:	d506      	bpl.n	800e744 <__swbuf_r+0x6c>
 800e736:	2e0a      	cmp	r6, #10
 800e738:	d104      	bne.n	800e744 <__swbuf_r+0x6c>
 800e73a:	4621      	mov	r1, r4
 800e73c:	4628      	mov	r0, r5
 800e73e:	f000 f911 	bl	800e964 <_fflush_r>
 800e742:	b988      	cbnz	r0, 800e768 <__swbuf_r+0x90>
 800e744:	4638      	mov	r0, r7
 800e746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e748:	4b0a      	ldr	r3, [pc, #40]	; (800e774 <__swbuf_r+0x9c>)
 800e74a:	429c      	cmp	r4, r3
 800e74c:	d101      	bne.n	800e752 <__swbuf_r+0x7a>
 800e74e:	68ac      	ldr	r4, [r5, #8]
 800e750:	e7cf      	b.n	800e6f2 <__swbuf_r+0x1a>
 800e752:	4b09      	ldr	r3, [pc, #36]	; (800e778 <__swbuf_r+0xa0>)
 800e754:	429c      	cmp	r4, r3
 800e756:	bf08      	it	eq
 800e758:	68ec      	ldreq	r4, [r5, #12]
 800e75a:	e7ca      	b.n	800e6f2 <__swbuf_r+0x1a>
 800e75c:	4621      	mov	r1, r4
 800e75e:	4628      	mov	r0, r5
 800e760:	f000 f80c 	bl	800e77c <__swsetup_r>
 800e764:	2800      	cmp	r0, #0
 800e766:	d0cb      	beq.n	800e700 <__swbuf_r+0x28>
 800e768:	f04f 37ff 	mov.w	r7, #4294967295
 800e76c:	e7ea      	b.n	800e744 <__swbuf_r+0x6c>
 800e76e:	bf00      	nop
 800e770:	080117b8 	.word	0x080117b8
 800e774:	080117d8 	.word	0x080117d8
 800e778:	08011798 	.word	0x08011798

0800e77c <__swsetup_r>:
 800e77c:	4b32      	ldr	r3, [pc, #200]	; (800e848 <__swsetup_r+0xcc>)
 800e77e:	b570      	push	{r4, r5, r6, lr}
 800e780:	681d      	ldr	r5, [r3, #0]
 800e782:	4606      	mov	r6, r0
 800e784:	460c      	mov	r4, r1
 800e786:	b125      	cbz	r5, 800e792 <__swsetup_r+0x16>
 800e788:	69ab      	ldr	r3, [r5, #24]
 800e78a:	b913      	cbnz	r3, 800e792 <__swsetup_r+0x16>
 800e78c:	4628      	mov	r0, r5
 800e78e:	f000 f97d 	bl	800ea8c <__sinit>
 800e792:	4b2e      	ldr	r3, [pc, #184]	; (800e84c <__swsetup_r+0xd0>)
 800e794:	429c      	cmp	r4, r3
 800e796:	d10f      	bne.n	800e7b8 <__swsetup_r+0x3c>
 800e798:	686c      	ldr	r4, [r5, #4]
 800e79a:	89a3      	ldrh	r3, [r4, #12]
 800e79c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e7a0:	0719      	lsls	r1, r3, #28
 800e7a2:	d42c      	bmi.n	800e7fe <__swsetup_r+0x82>
 800e7a4:	06dd      	lsls	r5, r3, #27
 800e7a6:	d411      	bmi.n	800e7cc <__swsetup_r+0x50>
 800e7a8:	2309      	movs	r3, #9
 800e7aa:	6033      	str	r3, [r6, #0]
 800e7ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e7b0:	81a3      	strh	r3, [r4, #12]
 800e7b2:	f04f 30ff 	mov.w	r0, #4294967295
 800e7b6:	e03e      	b.n	800e836 <__swsetup_r+0xba>
 800e7b8:	4b25      	ldr	r3, [pc, #148]	; (800e850 <__swsetup_r+0xd4>)
 800e7ba:	429c      	cmp	r4, r3
 800e7bc:	d101      	bne.n	800e7c2 <__swsetup_r+0x46>
 800e7be:	68ac      	ldr	r4, [r5, #8]
 800e7c0:	e7eb      	b.n	800e79a <__swsetup_r+0x1e>
 800e7c2:	4b24      	ldr	r3, [pc, #144]	; (800e854 <__swsetup_r+0xd8>)
 800e7c4:	429c      	cmp	r4, r3
 800e7c6:	bf08      	it	eq
 800e7c8:	68ec      	ldreq	r4, [r5, #12]
 800e7ca:	e7e6      	b.n	800e79a <__swsetup_r+0x1e>
 800e7cc:	0758      	lsls	r0, r3, #29
 800e7ce:	d512      	bpl.n	800e7f6 <__swsetup_r+0x7a>
 800e7d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e7d2:	b141      	cbz	r1, 800e7e6 <__swsetup_r+0x6a>
 800e7d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e7d8:	4299      	cmp	r1, r3
 800e7da:	d002      	beq.n	800e7e2 <__swsetup_r+0x66>
 800e7dc:	4630      	mov	r0, r6
 800e7de:	f000 fa5b 	bl	800ec98 <_free_r>
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	6363      	str	r3, [r4, #52]	; 0x34
 800e7e6:	89a3      	ldrh	r3, [r4, #12]
 800e7e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e7ec:	81a3      	strh	r3, [r4, #12]
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	6063      	str	r3, [r4, #4]
 800e7f2:	6923      	ldr	r3, [r4, #16]
 800e7f4:	6023      	str	r3, [r4, #0]
 800e7f6:	89a3      	ldrh	r3, [r4, #12]
 800e7f8:	f043 0308 	orr.w	r3, r3, #8
 800e7fc:	81a3      	strh	r3, [r4, #12]
 800e7fe:	6923      	ldr	r3, [r4, #16]
 800e800:	b94b      	cbnz	r3, 800e816 <__swsetup_r+0x9a>
 800e802:	89a3      	ldrh	r3, [r4, #12]
 800e804:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e80c:	d003      	beq.n	800e816 <__swsetup_r+0x9a>
 800e80e:	4621      	mov	r1, r4
 800e810:	4630      	mov	r0, r6
 800e812:	f000 fa01 	bl	800ec18 <__smakebuf_r>
 800e816:	89a0      	ldrh	r0, [r4, #12]
 800e818:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e81c:	f010 0301 	ands.w	r3, r0, #1
 800e820:	d00a      	beq.n	800e838 <__swsetup_r+0xbc>
 800e822:	2300      	movs	r3, #0
 800e824:	60a3      	str	r3, [r4, #8]
 800e826:	6963      	ldr	r3, [r4, #20]
 800e828:	425b      	negs	r3, r3
 800e82a:	61a3      	str	r3, [r4, #24]
 800e82c:	6923      	ldr	r3, [r4, #16]
 800e82e:	b943      	cbnz	r3, 800e842 <__swsetup_r+0xc6>
 800e830:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e834:	d1ba      	bne.n	800e7ac <__swsetup_r+0x30>
 800e836:	bd70      	pop	{r4, r5, r6, pc}
 800e838:	0781      	lsls	r1, r0, #30
 800e83a:	bf58      	it	pl
 800e83c:	6963      	ldrpl	r3, [r4, #20]
 800e83e:	60a3      	str	r3, [r4, #8]
 800e840:	e7f4      	b.n	800e82c <__swsetup_r+0xb0>
 800e842:	2000      	movs	r0, #0
 800e844:	e7f7      	b.n	800e836 <__swsetup_r+0xba>
 800e846:	bf00      	nop
 800e848:	2000012c 	.word	0x2000012c
 800e84c:	080117b8 	.word	0x080117b8
 800e850:	080117d8 	.word	0x080117d8
 800e854:	08011798 	.word	0x08011798

0800e858 <__sflush_r>:
 800e858:	898a      	ldrh	r2, [r1, #12]
 800e85a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e85e:	4605      	mov	r5, r0
 800e860:	0710      	lsls	r0, r2, #28
 800e862:	460c      	mov	r4, r1
 800e864:	d458      	bmi.n	800e918 <__sflush_r+0xc0>
 800e866:	684b      	ldr	r3, [r1, #4]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	dc05      	bgt.n	800e878 <__sflush_r+0x20>
 800e86c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e86e:	2b00      	cmp	r3, #0
 800e870:	dc02      	bgt.n	800e878 <__sflush_r+0x20>
 800e872:	2000      	movs	r0, #0
 800e874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e878:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e87a:	2e00      	cmp	r6, #0
 800e87c:	d0f9      	beq.n	800e872 <__sflush_r+0x1a>
 800e87e:	2300      	movs	r3, #0
 800e880:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e884:	682f      	ldr	r7, [r5, #0]
 800e886:	602b      	str	r3, [r5, #0]
 800e888:	d032      	beq.n	800e8f0 <__sflush_r+0x98>
 800e88a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e88c:	89a3      	ldrh	r3, [r4, #12]
 800e88e:	075a      	lsls	r2, r3, #29
 800e890:	d505      	bpl.n	800e89e <__sflush_r+0x46>
 800e892:	6863      	ldr	r3, [r4, #4]
 800e894:	1ac0      	subs	r0, r0, r3
 800e896:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e898:	b10b      	cbz	r3, 800e89e <__sflush_r+0x46>
 800e89a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e89c:	1ac0      	subs	r0, r0, r3
 800e89e:	2300      	movs	r3, #0
 800e8a0:	4602      	mov	r2, r0
 800e8a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e8a4:	6a21      	ldr	r1, [r4, #32]
 800e8a6:	4628      	mov	r0, r5
 800e8a8:	47b0      	blx	r6
 800e8aa:	1c43      	adds	r3, r0, #1
 800e8ac:	89a3      	ldrh	r3, [r4, #12]
 800e8ae:	d106      	bne.n	800e8be <__sflush_r+0x66>
 800e8b0:	6829      	ldr	r1, [r5, #0]
 800e8b2:	291d      	cmp	r1, #29
 800e8b4:	d82c      	bhi.n	800e910 <__sflush_r+0xb8>
 800e8b6:	4a2a      	ldr	r2, [pc, #168]	; (800e960 <__sflush_r+0x108>)
 800e8b8:	40ca      	lsrs	r2, r1
 800e8ba:	07d6      	lsls	r6, r2, #31
 800e8bc:	d528      	bpl.n	800e910 <__sflush_r+0xb8>
 800e8be:	2200      	movs	r2, #0
 800e8c0:	6062      	str	r2, [r4, #4]
 800e8c2:	04d9      	lsls	r1, r3, #19
 800e8c4:	6922      	ldr	r2, [r4, #16]
 800e8c6:	6022      	str	r2, [r4, #0]
 800e8c8:	d504      	bpl.n	800e8d4 <__sflush_r+0x7c>
 800e8ca:	1c42      	adds	r2, r0, #1
 800e8cc:	d101      	bne.n	800e8d2 <__sflush_r+0x7a>
 800e8ce:	682b      	ldr	r3, [r5, #0]
 800e8d0:	b903      	cbnz	r3, 800e8d4 <__sflush_r+0x7c>
 800e8d2:	6560      	str	r0, [r4, #84]	; 0x54
 800e8d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e8d6:	602f      	str	r7, [r5, #0]
 800e8d8:	2900      	cmp	r1, #0
 800e8da:	d0ca      	beq.n	800e872 <__sflush_r+0x1a>
 800e8dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e8e0:	4299      	cmp	r1, r3
 800e8e2:	d002      	beq.n	800e8ea <__sflush_r+0x92>
 800e8e4:	4628      	mov	r0, r5
 800e8e6:	f000 f9d7 	bl	800ec98 <_free_r>
 800e8ea:	2000      	movs	r0, #0
 800e8ec:	6360      	str	r0, [r4, #52]	; 0x34
 800e8ee:	e7c1      	b.n	800e874 <__sflush_r+0x1c>
 800e8f0:	6a21      	ldr	r1, [r4, #32]
 800e8f2:	2301      	movs	r3, #1
 800e8f4:	4628      	mov	r0, r5
 800e8f6:	47b0      	blx	r6
 800e8f8:	1c41      	adds	r1, r0, #1
 800e8fa:	d1c7      	bne.n	800e88c <__sflush_r+0x34>
 800e8fc:	682b      	ldr	r3, [r5, #0]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d0c4      	beq.n	800e88c <__sflush_r+0x34>
 800e902:	2b1d      	cmp	r3, #29
 800e904:	d001      	beq.n	800e90a <__sflush_r+0xb2>
 800e906:	2b16      	cmp	r3, #22
 800e908:	d101      	bne.n	800e90e <__sflush_r+0xb6>
 800e90a:	602f      	str	r7, [r5, #0]
 800e90c:	e7b1      	b.n	800e872 <__sflush_r+0x1a>
 800e90e:	89a3      	ldrh	r3, [r4, #12]
 800e910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e914:	81a3      	strh	r3, [r4, #12]
 800e916:	e7ad      	b.n	800e874 <__sflush_r+0x1c>
 800e918:	690f      	ldr	r7, [r1, #16]
 800e91a:	2f00      	cmp	r7, #0
 800e91c:	d0a9      	beq.n	800e872 <__sflush_r+0x1a>
 800e91e:	0793      	lsls	r3, r2, #30
 800e920:	680e      	ldr	r6, [r1, #0]
 800e922:	bf08      	it	eq
 800e924:	694b      	ldreq	r3, [r1, #20]
 800e926:	600f      	str	r7, [r1, #0]
 800e928:	bf18      	it	ne
 800e92a:	2300      	movne	r3, #0
 800e92c:	eba6 0807 	sub.w	r8, r6, r7
 800e930:	608b      	str	r3, [r1, #8]
 800e932:	f1b8 0f00 	cmp.w	r8, #0
 800e936:	dd9c      	ble.n	800e872 <__sflush_r+0x1a>
 800e938:	6a21      	ldr	r1, [r4, #32]
 800e93a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e93c:	4643      	mov	r3, r8
 800e93e:	463a      	mov	r2, r7
 800e940:	4628      	mov	r0, r5
 800e942:	47b0      	blx	r6
 800e944:	2800      	cmp	r0, #0
 800e946:	dc06      	bgt.n	800e956 <__sflush_r+0xfe>
 800e948:	89a3      	ldrh	r3, [r4, #12]
 800e94a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e94e:	81a3      	strh	r3, [r4, #12]
 800e950:	f04f 30ff 	mov.w	r0, #4294967295
 800e954:	e78e      	b.n	800e874 <__sflush_r+0x1c>
 800e956:	4407      	add	r7, r0
 800e958:	eba8 0800 	sub.w	r8, r8, r0
 800e95c:	e7e9      	b.n	800e932 <__sflush_r+0xda>
 800e95e:	bf00      	nop
 800e960:	20400001 	.word	0x20400001

0800e964 <_fflush_r>:
 800e964:	b538      	push	{r3, r4, r5, lr}
 800e966:	690b      	ldr	r3, [r1, #16]
 800e968:	4605      	mov	r5, r0
 800e96a:	460c      	mov	r4, r1
 800e96c:	b913      	cbnz	r3, 800e974 <_fflush_r+0x10>
 800e96e:	2500      	movs	r5, #0
 800e970:	4628      	mov	r0, r5
 800e972:	bd38      	pop	{r3, r4, r5, pc}
 800e974:	b118      	cbz	r0, 800e97e <_fflush_r+0x1a>
 800e976:	6983      	ldr	r3, [r0, #24]
 800e978:	b90b      	cbnz	r3, 800e97e <_fflush_r+0x1a>
 800e97a:	f000 f887 	bl	800ea8c <__sinit>
 800e97e:	4b14      	ldr	r3, [pc, #80]	; (800e9d0 <_fflush_r+0x6c>)
 800e980:	429c      	cmp	r4, r3
 800e982:	d11b      	bne.n	800e9bc <_fflush_r+0x58>
 800e984:	686c      	ldr	r4, [r5, #4]
 800e986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d0ef      	beq.n	800e96e <_fflush_r+0xa>
 800e98e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e990:	07d0      	lsls	r0, r2, #31
 800e992:	d404      	bmi.n	800e99e <_fflush_r+0x3a>
 800e994:	0599      	lsls	r1, r3, #22
 800e996:	d402      	bmi.n	800e99e <_fflush_r+0x3a>
 800e998:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e99a:	f000 f915 	bl	800ebc8 <__retarget_lock_acquire_recursive>
 800e99e:	4628      	mov	r0, r5
 800e9a0:	4621      	mov	r1, r4
 800e9a2:	f7ff ff59 	bl	800e858 <__sflush_r>
 800e9a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e9a8:	07da      	lsls	r2, r3, #31
 800e9aa:	4605      	mov	r5, r0
 800e9ac:	d4e0      	bmi.n	800e970 <_fflush_r+0xc>
 800e9ae:	89a3      	ldrh	r3, [r4, #12]
 800e9b0:	059b      	lsls	r3, r3, #22
 800e9b2:	d4dd      	bmi.n	800e970 <_fflush_r+0xc>
 800e9b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e9b6:	f000 f908 	bl	800ebca <__retarget_lock_release_recursive>
 800e9ba:	e7d9      	b.n	800e970 <_fflush_r+0xc>
 800e9bc:	4b05      	ldr	r3, [pc, #20]	; (800e9d4 <_fflush_r+0x70>)
 800e9be:	429c      	cmp	r4, r3
 800e9c0:	d101      	bne.n	800e9c6 <_fflush_r+0x62>
 800e9c2:	68ac      	ldr	r4, [r5, #8]
 800e9c4:	e7df      	b.n	800e986 <_fflush_r+0x22>
 800e9c6:	4b04      	ldr	r3, [pc, #16]	; (800e9d8 <_fflush_r+0x74>)
 800e9c8:	429c      	cmp	r4, r3
 800e9ca:	bf08      	it	eq
 800e9cc:	68ec      	ldreq	r4, [r5, #12]
 800e9ce:	e7da      	b.n	800e986 <_fflush_r+0x22>
 800e9d0:	080117b8 	.word	0x080117b8
 800e9d4:	080117d8 	.word	0x080117d8
 800e9d8:	08011798 	.word	0x08011798

0800e9dc <std>:
 800e9dc:	2300      	movs	r3, #0
 800e9de:	b510      	push	{r4, lr}
 800e9e0:	4604      	mov	r4, r0
 800e9e2:	e9c0 3300 	strd	r3, r3, [r0]
 800e9e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e9ea:	6083      	str	r3, [r0, #8]
 800e9ec:	8181      	strh	r1, [r0, #12]
 800e9ee:	6643      	str	r3, [r0, #100]	; 0x64
 800e9f0:	81c2      	strh	r2, [r0, #14]
 800e9f2:	6183      	str	r3, [r0, #24]
 800e9f4:	4619      	mov	r1, r3
 800e9f6:	2208      	movs	r2, #8
 800e9f8:	305c      	adds	r0, #92	; 0x5c
 800e9fa:	f7ff fda3 	bl	800e544 <memset>
 800e9fe:	4b05      	ldr	r3, [pc, #20]	; (800ea14 <std+0x38>)
 800ea00:	6263      	str	r3, [r4, #36]	; 0x24
 800ea02:	4b05      	ldr	r3, [pc, #20]	; (800ea18 <std+0x3c>)
 800ea04:	62a3      	str	r3, [r4, #40]	; 0x28
 800ea06:	4b05      	ldr	r3, [pc, #20]	; (800ea1c <std+0x40>)
 800ea08:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ea0a:	4b05      	ldr	r3, [pc, #20]	; (800ea20 <std+0x44>)
 800ea0c:	6224      	str	r4, [r4, #32]
 800ea0e:	6323      	str	r3, [r4, #48]	; 0x30
 800ea10:	bd10      	pop	{r4, pc}
 800ea12:	bf00      	nop
 800ea14:	0800f70d 	.word	0x0800f70d
 800ea18:	0800f72f 	.word	0x0800f72f
 800ea1c:	0800f767 	.word	0x0800f767
 800ea20:	0800f78b 	.word	0x0800f78b

0800ea24 <_cleanup_r>:
 800ea24:	4901      	ldr	r1, [pc, #4]	; (800ea2c <_cleanup_r+0x8>)
 800ea26:	f000 b8af 	b.w	800eb88 <_fwalk_reent>
 800ea2a:	bf00      	nop
 800ea2c:	0800e965 	.word	0x0800e965

0800ea30 <__sfmoreglue>:
 800ea30:	b570      	push	{r4, r5, r6, lr}
 800ea32:	2268      	movs	r2, #104	; 0x68
 800ea34:	1e4d      	subs	r5, r1, #1
 800ea36:	4355      	muls	r5, r2
 800ea38:	460e      	mov	r6, r1
 800ea3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ea3e:	f000 f997 	bl	800ed70 <_malloc_r>
 800ea42:	4604      	mov	r4, r0
 800ea44:	b140      	cbz	r0, 800ea58 <__sfmoreglue+0x28>
 800ea46:	2100      	movs	r1, #0
 800ea48:	e9c0 1600 	strd	r1, r6, [r0]
 800ea4c:	300c      	adds	r0, #12
 800ea4e:	60a0      	str	r0, [r4, #8]
 800ea50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ea54:	f7ff fd76 	bl	800e544 <memset>
 800ea58:	4620      	mov	r0, r4
 800ea5a:	bd70      	pop	{r4, r5, r6, pc}

0800ea5c <__sfp_lock_acquire>:
 800ea5c:	4801      	ldr	r0, [pc, #4]	; (800ea64 <__sfp_lock_acquire+0x8>)
 800ea5e:	f000 b8b3 	b.w	800ebc8 <__retarget_lock_acquire_recursive>
 800ea62:	bf00      	nop
 800ea64:	200012d5 	.word	0x200012d5

0800ea68 <__sfp_lock_release>:
 800ea68:	4801      	ldr	r0, [pc, #4]	; (800ea70 <__sfp_lock_release+0x8>)
 800ea6a:	f000 b8ae 	b.w	800ebca <__retarget_lock_release_recursive>
 800ea6e:	bf00      	nop
 800ea70:	200012d5 	.word	0x200012d5

0800ea74 <__sinit_lock_acquire>:
 800ea74:	4801      	ldr	r0, [pc, #4]	; (800ea7c <__sinit_lock_acquire+0x8>)
 800ea76:	f000 b8a7 	b.w	800ebc8 <__retarget_lock_acquire_recursive>
 800ea7a:	bf00      	nop
 800ea7c:	200012d6 	.word	0x200012d6

0800ea80 <__sinit_lock_release>:
 800ea80:	4801      	ldr	r0, [pc, #4]	; (800ea88 <__sinit_lock_release+0x8>)
 800ea82:	f000 b8a2 	b.w	800ebca <__retarget_lock_release_recursive>
 800ea86:	bf00      	nop
 800ea88:	200012d6 	.word	0x200012d6

0800ea8c <__sinit>:
 800ea8c:	b510      	push	{r4, lr}
 800ea8e:	4604      	mov	r4, r0
 800ea90:	f7ff fff0 	bl	800ea74 <__sinit_lock_acquire>
 800ea94:	69a3      	ldr	r3, [r4, #24]
 800ea96:	b11b      	cbz	r3, 800eaa0 <__sinit+0x14>
 800ea98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea9c:	f7ff bff0 	b.w	800ea80 <__sinit_lock_release>
 800eaa0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800eaa4:	6523      	str	r3, [r4, #80]	; 0x50
 800eaa6:	4b13      	ldr	r3, [pc, #76]	; (800eaf4 <__sinit+0x68>)
 800eaa8:	4a13      	ldr	r2, [pc, #76]	; (800eaf8 <__sinit+0x6c>)
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	62a2      	str	r2, [r4, #40]	; 0x28
 800eaae:	42a3      	cmp	r3, r4
 800eab0:	bf04      	itt	eq
 800eab2:	2301      	moveq	r3, #1
 800eab4:	61a3      	streq	r3, [r4, #24]
 800eab6:	4620      	mov	r0, r4
 800eab8:	f000 f820 	bl	800eafc <__sfp>
 800eabc:	6060      	str	r0, [r4, #4]
 800eabe:	4620      	mov	r0, r4
 800eac0:	f000 f81c 	bl	800eafc <__sfp>
 800eac4:	60a0      	str	r0, [r4, #8]
 800eac6:	4620      	mov	r0, r4
 800eac8:	f000 f818 	bl	800eafc <__sfp>
 800eacc:	2200      	movs	r2, #0
 800eace:	60e0      	str	r0, [r4, #12]
 800ead0:	2104      	movs	r1, #4
 800ead2:	6860      	ldr	r0, [r4, #4]
 800ead4:	f7ff ff82 	bl	800e9dc <std>
 800ead8:	68a0      	ldr	r0, [r4, #8]
 800eada:	2201      	movs	r2, #1
 800eadc:	2109      	movs	r1, #9
 800eade:	f7ff ff7d 	bl	800e9dc <std>
 800eae2:	68e0      	ldr	r0, [r4, #12]
 800eae4:	2202      	movs	r2, #2
 800eae6:	2112      	movs	r1, #18
 800eae8:	f7ff ff78 	bl	800e9dc <std>
 800eaec:	2301      	movs	r3, #1
 800eaee:	61a3      	str	r3, [r4, #24]
 800eaf0:	e7d2      	b.n	800ea98 <__sinit+0xc>
 800eaf2:	bf00      	nop
 800eaf4:	08011794 	.word	0x08011794
 800eaf8:	0800ea25 	.word	0x0800ea25

0800eafc <__sfp>:
 800eafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eafe:	4607      	mov	r7, r0
 800eb00:	f7ff ffac 	bl	800ea5c <__sfp_lock_acquire>
 800eb04:	4b1e      	ldr	r3, [pc, #120]	; (800eb80 <__sfp+0x84>)
 800eb06:	681e      	ldr	r6, [r3, #0]
 800eb08:	69b3      	ldr	r3, [r6, #24]
 800eb0a:	b913      	cbnz	r3, 800eb12 <__sfp+0x16>
 800eb0c:	4630      	mov	r0, r6
 800eb0e:	f7ff ffbd 	bl	800ea8c <__sinit>
 800eb12:	3648      	adds	r6, #72	; 0x48
 800eb14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800eb18:	3b01      	subs	r3, #1
 800eb1a:	d503      	bpl.n	800eb24 <__sfp+0x28>
 800eb1c:	6833      	ldr	r3, [r6, #0]
 800eb1e:	b30b      	cbz	r3, 800eb64 <__sfp+0x68>
 800eb20:	6836      	ldr	r6, [r6, #0]
 800eb22:	e7f7      	b.n	800eb14 <__sfp+0x18>
 800eb24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800eb28:	b9d5      	cbnz	r5, 800eb60 <__sfp+0x64>
 800eb2a:	4b16      	ldr	r3, [pc, #88]	; (800eb84 <__sfp+0x88>)
 800eb2c:	60e3      	str	r3, [r4, #12]
 800eb2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800eb32:	6665      	str	r5, [r4, #100]	; 0x64
 800eb34:	f000 f847 	bl	800ebc6 <__retarget_lock_init_recursive>
 800eb38:	f7ff ff96 	bl	800ea68 <__sfp_lock_release>
 800eb3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800eb40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800eb44:	6025      	str	r5, [r4, #0]
 800eb46:	61a5      	str	r5, [r4, #24]
 800eb48:	2208      	movs	r2, #8
 800eb4a:	4629      	mov	r1, r5
 800eb4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800eb50:	f7ff fcf8 	bl	800e544 <memset>
 800eb54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800eb58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800eb5c:	4620      	mov	r0, r4
 800eb5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb60:	3468      	adds	r4, #104	; 0x68
 800eb62:	e7d9      	b.n	800eb18 <__sfp+0x1c>
 800eb64:	2104      	movs	r1, #4
 800eb66:	4638      	mov	r0, r7
 800eb68:	f7ff ff62 	bl	800ea30 <__sfmoreglue>
 800eb6c:	4604      	mov	r4, r0
 800eb6e:	6030      	str	r0, [r6, #0]
 800eb70:	2800      	cmp	r0, #0
 800eb72:	d1d5      	bne.n	800eb20 <__sfp+0x24>
 800eb74:	f7ff ff78 	bl	800ea68 <__sfp_lock_release>
 800eb78:	230c      	movs	r3, #12
 800eb7a:	603b      	str	r3, [r7, #0]
 800eb7c:	e7ee      	b.n	800eb5c <__sfp+0x60>
 800eb7e:	bf00      	nop
 800eb80:	08011794 	.word	0x08011794
 800eb84:	ffff0001 	.word	0xffff0001

0800eb88 <_fwalk_reent>:
 800eb88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb8c:	4606      	mov	r6, r0
 800eb8e:	4688      	mov	r8, r1
 800eb90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800eb94:	2700      	movs	r7, #0
 800eb96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eb9a:	f1b9 0901 	subs.w	r9, r9, #1
 800eb9e:	d505      	bpl.n	800ebac <_fwalk_reent+0x24>
 800eba0:	6824      	ldr	r4, [r4, #0]
 800eba2:	2c00      	cmp	r4, #0
 800eba4:	d1f7      	bne.n	800eb96 <_fwalk_reent+0xe>
 800eba6:	4638      	mov	r0, r7
 800eba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebac:	89ab      	ldrh	r3, [r5, #12]
 800ebae:	2b01      	cmp	r3, #1
 800ebb0:	d907      	bls.n	800ebc2 <_fwalk_reent+0x3a>
 800ebb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ebb6:	3301      	adds	r3, #1
 800ebb8:	d003      	beq.n	800ebc2 <_fwalk_reent+0x3a>
 800ebba:	4629      	mov	r1, r5
 800ebbc:	4630      	mov	r0, r6
 800ebbe:	47c0      	blx	r8
 800ebc0:	4307      	orrs	r7, r0
 800ebc2:	3568      	adds	r5, #104	; 0x68
 800ebc4:	e7e9      	b.n	800eb9a <_fwalk_reent+0x12>

0800ebc6 <__retarget_lock_init_recursive>:
 800ebc6:	4770      	bx	lr

0800ebc8 <__retarget_lock_acquire_recursive>:
 800ebc8:	4770      	bx	lr

0800ebca <__retarget_lock_release_recursive>:
 800ebca:	4770      	bx	lr

0800ebcc <__swhatbuf_r>:
 800ebcc:	b570      	push	{r4, r5, r6, lr}
 800ebce:	460e      	mov	r6, r1
 800ebd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebd4:	2900      	cmp	r1, #0
 800ebd6:	b096      	sub	sp, #88	; 0x58
 800ebd8:	4614      	mov	r4, r2
 800ebda:	461d      	mov	r5, r3
 800ebdc:	da08      	bge.n	800ebf0 <__swhatbuf_r+0x24>
 800ebde:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	602a      	str	r2, [r5, #0]
 800ebe6:	061a      	lsls	r2, r3, #24
 800ebe8:	d410      	bmi.n	800ec0c <__swhatbuf_r+0x40>
 800ebea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ebee:	e00e      	b.n	800ec0e <__swhatbuf_r+0x42>
 800ebf0:	466a      	mov	r2, sp
 800ebf2:	f000 fdf1 	bl	800f7d8 <_fstat_r>
 800ebf6:	2800      	cmp	r0, #0
 800ebf8:	dbf1      	blt.n	800ebde <__swhatbuf_r+0x12>
 800ebfa:	9a01      	ldr	r2, [sp, #4]
 800ebfc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ec00:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ec04:	425a      	negs	r2, r3
 800ec06:	415a      	adcs	r2, r3
 800ec08:	602a      	str	r2, [r5, #0]
 800ec0a:	e7ee      	b.n	800ebea <__swhatbuf_r+0x1e>
 800ec0c:	2340      	movs	r3, #64	; 0x40
 800ec0e:	2000      	movs	r0, #0
 800ec10:	6023      	str	r3, [r4, #0]
 800ec12:	b016      	add	sp, #88	; 0x58
 800ec14:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ec18 <__smakebuf_r>:
 800ec18:	898b      	ldrh	r3, [r1, #12]
 800ec1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ec1c:	079d      	lsls	r5, r3, #30
 800ec1e:	4606      	mov	r6, r0
 800ec20:	460c      	mov	r4, r1
 800ec22:	d507      	bpl.n	800ec34 <__smakebuf_r+0x1c>
 800ec24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ec28:	6023      	str	r3, [r4, #0]
 800ec2a:	6123      	str	r3, [r4, #16]
 800ec2c:	2301      	movs	r3, #1
 800ec2e:	6163      	str	r3, [r4, #20]
 800ec30:	b002      	add	sp, #8
 800ec32:	bd70      	pop	{r4, r5, r6, pc}
 800ec34:	ab01      	add	r3, sp, #4
 800ec36:	466a      	mov	r2, sp
 800ec38:	f7ff ffc8 	bl	800ebcc <__swhatbuf_r>
 800ec3c:	9900      	ldr	r1, [sp, #0]
 800ec3e:	4605      	mov	r5, r0
 800ec40:	4630      	mov	r0, r6
 800ec42:	f000 f895 	bl	800ed70 <_malloc_r>
 800ec46:	b948      	cbnz	r0, 800ec5c <__smakebuf_r+0x44>
 800ec48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec4c:	059a      	lsls	r2, r3, #22
 800ec4e:	d4ef      	bmi.n	800ec30 <__smakebuf_r+0x18>
 800ec50:	f023 0303 	bic.w	r3, r3, #3
 800ec54:	f043 0302 	orr.w	r3, r3, #2
 800ec58:	81a3      	strh	r3, [r4, #12]
 800ec5a:	e7e3      	b.n	800ec24 <__smakebuf_r+0xc>
 800ec5c:	4b0d      	ldr	r3, [pc, #52]	; (800ec94 <__smakebuf_r+0x7c>)
 800ec5e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ec60:	89a3      	ldrh	r3, [r4, #12]
 800ec62:	6020      	str	r0, [r4, #0]
 800ec64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec68:	81a3      	strh	r3, [r4, #12]
 800ec6a:	9b00      	ldr	r3, [sp, #0]
 800ec6c:	6163      	str	r3, [r4, #20]
 800ec6e:	9b01      	ldr	r3, [sp, #4]
 800ec70:	6120      	str	r0, [r4, #16]
 800ec72:	b15b      	cbz	r3, 800ec8c <__smakebuf_r+0x74>
 800ec74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec78:	4630      	mov	r0, r6
 800ec7a:	f000 fdbf 	bl	800f7fc <_isatty_r>
 800ec7e:	b128      	cbz	r0, 800ec8c <__smakebuf_r+0x74>
 800ec80:	89a3      	ldrh	r3, [r4, #12]
 800ec82:	f023 0303 	bic.w	r3, r3, #3
 800ec86:	f043 0301 	orr.w	r3, r3, #1
 800ec8a:	81a3      	strh	r3, [r4, #12]
 800ec8c:	89a0      	ldrh	r0, [r4, #12]
 800ec8e:	4305      	orrs	r5, r0
 800ec90:	81a5      	strh	r5, [r4, #12]
 800ec92:	e7cd      	b.n	800ec30 <__smakebuf_r+0x18>
 800ec94:	0800ea25 	.word	0x0800ea25

0800ec98 <_free_r>:
 800ec98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec9a:	2900      	cmp	r1, #0
 800ec9c:	d044      	beq.n	800ed28 <_free_r+0x90>
 800ec9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eca2:	9001      	str	r0, [sp, #4]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	f1a1 0404 	sub.w	r4, r1, #4
 800ecaa:	bfb8      	it	lt
 800ecac:	18e4      	addlt	r4, r4, r3
 800ecae:	f000 fdef 	bl	800f890 <__malloc_lock>
 800ecb2:	4a1e      	ldr	r2, [pc, #120]	; (800ed2c <_free_r+0x94>)
 800ecb4:	9801      	ldr	r0, [sp, #4]
 800ecb6:	6813      	ldr	r3, [r2, #0]
 800ecb8:	b933      	cbnz	r3, 800ecc8 <_free_r+0x30>
 800ecba:	6063      	str	r3, [r4, #4]
 800ecbc:	6014      	str	r4, [r2, #0]
 800ecbe:	b003      	add	sp, #12
 800ecc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ecc4:	f000 bdea 	b.w	800f89c <__malloc_unlock>
 800ecc8:	42a3      	cmp	r3, r4
 800ecca:	d908      	bls.n	800ecde <_free_r+0x46>
 800eccc:	6825      	ldr	r5, [r4, #0]
 800ecce:	1961      	adds	r1, r4, r5
 800ecd0:	428b      	cmp	r3, r1
 800ecd2:	bf01      	itttt	eq
 800ecd4:	6819      	ldreq	r1, [r3, #0]
 800ecd6:	685b      	ldreq	r3, [r3, #4]
 800ecd8:	1949      	addeq	r1, r1, r5
 800ecda:	6021      	streq	r1, [r4, #0]
 800ecdc:	e7ed      	b.n	800ecba <_free_r+0x22>
 800ecde:	461a      	mov	r2, r3
 800ece0:	685b      	ldr	r3, [r3, #4]
 800ece2:	b10b      	cbz	r3, 800ece8 <_free_r+0x50>
 800ece4:	42a3      	cmp	r3, r4
 800ece6:	d9fa      	bls.n	800ecde <_free_r+0x46>
 800ece8:	6811      	ldr	r1, [r2, #0]
 800ecea:	1855      	adds	r5, r2, r1
 800ecec:	42a5      	cmp	r5, r4
 800ecee:	d10b      	bne.n	800ed08 <_free_r+0x70>
 800ecf0:	6824      	ldr	r4, [r4, #0]
 800ecf2:	4421      	add	r1, r4
 800ecf4:	1854      	adds	r4, r2, r1
 800ecf6:	42a3      	cmp	r3, r4
 800ecf8:	6011      	str	r1, [r2, #0]
 800ecfa:	d1e0      	bne.n	800ecbe <_free_r+0x26>
 800ecfc:	681c      	ldr	r4, [r3, #0]
 800ecfe:	685b      	ldr	r3, [r3, #4]
 800ed00:	6053      	str	r3, [r2, #4]
 800ed02:	4421      	add	r1, r4
 800ed04:	6011      	str	r1, [r2, #0]
 800ed06:	e7da      	b.n	800ecbe <_free_r+0x26>
 800ed08:	d902      	bls.n	800ed10 <_free_r+0x78>
 800ed0a:	230c      	movs	r3, #12
 800ed0c:	6003      	str	r3, [r0, #0]
 800ed0e:	e7d6      	b.n	800ecbe <_free_r+0x26>
 800ed10:	6825      	ldr	r5, [r4, #0]
 800ed12:	1961      	adds	r1, r4, r5
 800ed14:	428b      	cmp	r3, r1
 800ed16:	bf04      	itt	eq
 800ed18:	6819      	ldreq	r1, [r3, #0]
 800ed1a:	685b      	ldreq	r3, [r3, #4]
 800ed1c:	6063      	str	r3, [r4, #4]
 800ed1e:	bf04      	itt	eq
 800ed20:	1949      	addeq	r1, r1, r5
 800ed22:	6021      	streq	r1, [r4, #0]
 800ed24:	6054      	str	r4, [r2, #4]
 800ed26:	e7ca      	b.n	800ecbe <_free_r+0x26>
 800ed28:	b003      	add	sp, #12
 800ed2a:	bd30      	pop	{r4, r5, pc}
 800ed2c:	200012d8 	.word	0x200012d8

0800ed30 <sbrk_aligned>:
 800ed30:	b570      	push	{r4, r5, r6, lr}
 800ed32:	4e0e      	ldr	r6, [pc, #56]	; (800ed6c <sbrk_aligned+0x3c>)
 800ed34:	460c      	mov	r4, r1
 800ed36:	6831      	ldr	r1, [r6, #0]
 800ed38:	4605      	mov	r5, r0
 800ed3a:	b911      	cbnz	r1, 800ed42 <sbrk_aligned+0x12>
 800ed3c:	f000 fcd6 	bl	800f6ec <_sbrk_r>
 800ed40:	6030      	str	r0, [r6, #0]
 800ed42:	4621      	mov	r1, r4
 800ed44:	4628      	mov	r0, r5
 800ed46:	f000 fcd1 	bl	800f6ec <_sbrk_r>
 800ed4a:	1c43      	adds	r3, r0, #1
 800ed4c:	d00a      	beq.n	800ed64 <sbrk_aligned+0x34>
 800ed4e:	1cc4      	adds	r4, r0, #3
 800ed50:	f024 0403 	bic.w	r4, r4, #3
 800ed54:	42a0      	cmp	r0, r4
 800ed56:	d007      	beq.n	800ed68 <sbrk_aligned+0x38>
 800ed58:	1a21      	subs	r1, r4, r0
 800ed5a:	4628      	mov	r0, r5
 800ed5c:	f000 fcc6 	bl	800f6ec <_sbrk_r>
 800ed60:	3001      	adds	r0, #1
 800ed62:	d101      	bne.n	800ed68 <sbrk_aligned+0x38>
 800ed64:	f04f 34ff 	mov.w	r4, #4294967295
 800ed68:	4620      	mov	r0, r4
 800ed6a:	bd70      	pop	{r4, r5, r6, pc}
 800ed6c:	200012dc 	.word	0x200012dc

0800ed70 <_malloc_r>:
 800ed70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed74:	1ccd      	adds	r5, r1, #3
 800ed76:	f025 0503 	bic.w	r5, r5, #3
 800ed7a:	3508      	adds	r5, #8
 800ed7c:	2d0c      	cmp	r5, #12
 800ed7e:	bf38      	it	cc
 800ed80:	250c      	movcc	r5, #12
 800ed82:	2d00      	cmp	r5, #0
 800ed84:	4607      	mov	r7, r0
 800ed86:	db01      	blt.n	800ed8c <_malloc_r+0x1c>
 800ed88:	42a9      	cmp	r1, r5
 800ed8a:	d905      	bls.n	800ed98 <_malloc_r+0x28>
 800ed8c:	230c      	movs	r3, #12
 800ed8e:	603b      	str	r3, [r7, #0]
 800ed90:	2600      	movs	r6, #0
 800ed92:	4630      	mov	r0, r6
 800ed94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed98:	4e2e      	ldr	r6, [pc, #184]	; (800ee54 <_malloc_r+0xe4>)
 800ed9a:	f000 fd79 	bl	800f890 <__malloc_lock>
 800ed9e:	6833      	ldr	r3, [r6, #0]
 800eda0:	461c      	mov	r4, r3
 800eda2:	bb34      	cbnz	r4, 800edf2 <_malloc_r+0x82>
 800eda4:	4629      	mov	r1, r5
 800eda6:	4638      	mov	r0, r7
 800eda8:	f7ff ffc2 	bl	800ed30 <sbrk_aligned>
 800edac:	1c43      	adds	r3, r0, #1
 800edae:	4604      	mov	r4, r0
 800edb0:	d14d      	bne.n	800ee4e <_malloc_r+0xde>
 800edb2:	6834      	ldr	r4, [r6, #0]
 800edb4:	4626      	mov	r6, r4
 800edb6:	2e00      	cmp	r6, #0
 800edb8:	d140      	bne.n	800ee3c <_malloc_r+0xcc>
 800edba:	6823      	ldr	r3, [r4, #0]
 800edbc:	4631      	mov	r1, r6
 800edbe:	4638      	mov	r0, r7
 800edc0:	eb04 0803 	add.w	r8, r4, r3
 800edc4:	f000 fc92 	bl	800f6ec <_sbrk_r>
 800edc8:	4580      	cmp	r8, r0
 800edca:	d13a      	bne.n	800ee42 <_malloc_r+0xd2>
 800edcc:	6821      	ldr	r1, [r4, #0]
 800edce:	3503      	adds	r5, #3
 800edd0:	1a6d      	subs	r5, r5, r1
 800edd2:	f025 0503 	bic.w	r5, r5, #3
 800edd6:	3508      	adds	r5, #8
 800edd8:	2d0c      	cmp	r5, #12
 800edda:	bf38      	it	cc
 800eddc:	250c      	movcc	r5, #12
 800edde:	4629      	mov	r1, r5
 800ede0:	4638      	mov	r0, r7
 800ede2:	f7ff ffa5 	bl	800ed30 <sbrk_aligned>
 800ede6:	3001      	adds	r0, #1
 800ede8:	d02b      	beq.n	800ee42 <_malloc_r+0xd2>
 800edea:	6823      	ldr	r3, [r4, #0]
 800edec:	442b      	add	r3, r5
 800edee:	6023      	str	r3, [r4, #0]
 800edf0:	e00e      	b.n	800ee10 <_malloc_r+0xa0>
 800edf2:	6822      	ldr	r2, [r4, #0]
 800edf4:	1b52      	subs	r2, r2, r5
 800edf6:	d41e      	bmi.n	800ee36 <_malloc_r+0xc6>
 800edf8:	2a0b      	cmp	r2, #11
 800edfa:	d916      	bls.n	800ee2a <_malloc_r+0xba>
 800edfc:	1961      	adds	r1, r4, r5
 800edfe:	42a3      	cmp	r3, r4
 800ee00:	6025      	str	r5, [r4, #0]
 800ee02:	bf18      	it	ne
 800ee04:	6059      	strne	r1, [r3, #4]
 800ee06:	6863      	ldr	r3, [r4, #4]
 800ee08:	bf08      	it	eq
 800ee0a:	6031      	streq	r1, [r6, #0]
 800ee0c:	5162      	str	r2, [r4, r5]
 800ee0e:	604b      	str	r3, [r1, #4]
 800ee10:	4638      	mov	r0, r7
 800ee12:	f104 060b 	add.w	r6, r4, #11
 800ee16:	f000 fd41 	bl	800f89c <__malloc_unlock>
 800ee1a:	f026 0607 	bic.w	r6, r6, #7
 800ee1e:	1d23      	adds	r3, r4, #4
 800ee20:	1af2      	subs	r2, r6, r3
 800ee22:	d0b6      	beq.n	800ed92 <_malloc_r+0x22>
 800ee24:	1b9b      	subs	r3, r3, r6
 800ee26:	50a3      	str	r3, [r4, r2]
 800ee28:	e7b3      	b.n	800ed92 <_malloc_r+0x22>
 800ee2a:	6862      	ldr	r2, [r4, #4]
 800ee2c:	42a3      	cmp	r3, r4
 800ee2e:	bf0c      	ite	eq
 800ee30:	6032      	streq	r2, [r6, #0]
 800ee32:	605a      	strne	r2, [r3, #4]
 800ee34:	e7ec      	b.n	800ee10 <_malloc_r+0xa0>
 800ee36:	4623      	mov	r3, r4
 800ee38:	6864      	ldr	r4, [r4, #4]
 800ee3a:	e7b2      	b.n	800eda2 <_malloc_r+0x32>
 800ee3c:	4634      	mov	r4, r6
 800ee3e:	6876      	ldr	r6, [r6, #4]
 800ee40:	e7b9      	b.n	800edb6 <_malloc_r+0x46>
 800ee42:	230c      	movs	r3, #12
 800ee44:	603b      	str	r3, [r7, #0]
 800ee46:	4638      	mov	r0, r7
 800ee48:	f000 fd28 	bl	800f89c <__malloc_unlock>
 800ee4c:	e7a1      	b.n	800ed92 <_malloc_r+0x22>
 800ee4e:	6025      	str	r5, [r4, #0]
 800ee50:	e7de      	b.n	800ee10 <_malloc_r+0xa0>
 800ee52:	bf00      	nop
 800ee54:	200012d8 	.word	0x200012d8

0800ee58 <__ssputs_r>:
 800ee58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee5c:	688e      	ldr	r6, [r1, #8]
 800ee5e:	429e      	cmp	r6, r3
 800ee60:	4682      	mov	sl, r0
 800ee62:	460c      	mov	r4, r1
 800ee64:	4690      	mov	r8, r2
 800ee66:	461f      	mov	r7, r3
 800ee68:	d838      	bhi.n	800eedc <__ssputs_r+0x84>
 800ee6a:	898a      	ldrh	r2, [r1, #12]
 800ee6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ee70:	d032      	beq.n	800eed8 <__ssputs_r+0x80>
 800ee72:	6825      	ldr	r5, [r4, #0]
 800ee74:	6909      	ldr	r1, [r1, #16]
 800ee76:	eba5 0901 	sub.w	r9, r5, r1
 800ee7a:	6965      	ldr	r5, [r4, #20]
 800ee7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ee80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ee84:	3301      	adds	r3, #1
 800ee86:	444b      	add	r3, r9
 800ee88:	106d      	asrs	r5, r5, #1
 800ee8a:	429d      	cmp	r5, r3
 800ee8c:	bf38      	it	cc
 800ee8e:	461d      	movcc	r5, r3
 800ee90:	0553      	lsls	r3, r2, #21
 800ee92:	d531      	bpl.n	800eef8 <__ssputs_r+0xa0>
 800ee94:	4629      	mov	r1, r5
 800ee96:	f7ff ff6b 	bl	800ed70 <_malloc_r>
 800ee9a:	4606      	mov	r6, r0
 800ee9c:	b950      	cbnz	r0, 800eeb4 <__ssputs_r+0x5c>
 800ee9e:	230c      	movs	r3, #12
 800eea0:	f8ca 3000 	str.w	r3, [sl]
 800eea4:	89a3      	ldrh	r3, [r4, #12]
 800eea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eeaa:	81a3      	strh	r3, [r4, #12]
 800eeac:	f04f 30ff 	mov.w	r0, #4294967295
 800eeb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eeb4:	6921      	ldr	r1, [r4, #16]
 800eeb6:	464a      	mov	r2, r9
 800eeb8:	f000 fcc2 	bl	800f840 <memcpy>
 800eebc:	89a3      	ldrh	r3, [r4, #12]
 800eebe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eec6:	81a3      	strh	r3, [r4, #12]
 800eec8:	6126      	str	r6, [r4, #16]
 800eeca:	6165      	str	r5, [r4, #20]
 800eecc:	444e      	add	r6, r9
 800eece:	eba5 0509 	sub.w	r5, r5, r9
 800eed2:	6026      	str	r6, [r4, #0]
 800eed4:	60a5      	str	r5, [r4, #8]
 800eed6:	463e      	mov	r6, r7
 800eed8:	42be      	cmp	r6, r7
 800eeda:	d900      	bls.n	800eede <__ssputs_r+0x86>
 800eedc:	463e      	mov	r6, r7
 800eede:	6820      	ldr	r0, [r4, #0]
 800eee0:	4632      	mov	r2, r6
 800eee2:	4641      	mov	r1, r8
 800eee4:	f000 fcba 	bl	800f85c <memmove>
 800eee8:	68a3      	ldr	r3, [r4, #8]
 800eeea:	1b9b      	subs	r3, r3, r6
 800eeec:	60a3      	str	r3, [r4, #8]
 800eeee:	6823      	ldr	r3, [r4, #0]
 800eef0:	4433      	add	r3, r6
 800eef2:	6023      	str	r3, [r4, #0]
 800eef4:	2000      	movs	r0, #0
 800eef6:	e7db      	b.n	800eeb0 <__ssputs_r+0x58>
 800eef8:	462a      	mov	r2, r5
 800eefa:	f000 fcd5 	bl	800f8a8 <_realloc_r>
 800eefe:	4606      	mov	r6, r0
 800ef00:	2800      	cmp	r0, #0
 800ef02:	d1e1      	bne.n	800eec8 <__ssputs_r+0x70>
 800ef04:	6921      	ldr	r1, [r4, #16]
 800ef06:	4650      	mov	r0, sl
 800ef08:	f7ff fec6 	bl	800ec98 <_free_r>
 800ef0c:	e7c7      	b.n	800ee9e <__ssputs_r+0x46>
	...

0800ef10 <_svfiprintf_r>:
 800ef10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef14:	4698      	mov	r8, r3
 800ef16:	898b      	ldrh	r3, [r1, #12]
 800ef18:	061b      	lsls	r3, r3, #24
 800ef1a:	b09d      	sub	sp, #116	; 0x74
 800ef1c:	4607      	mov	r7, r0
 800ef1e:	460d      	mov	r5, r1
 800ef20:	4614      	mov	r4, r2
 800ef22:	d50e      	bpl.n	800ef42 <_svfiprintf_r+0x32>
 800ef24:	690b      	ldr	r3, [r1, #16]
 800ef26:	b963      	cbnz	r3, 800ef42 <_svfiprintf_r+0x32>
 800ef28:	2140      	movs	r1, #64	; 0x40
 800ef2a:	f7ff ff21 	bl	800ed70 <_malloc_r>
 800ef2e:	6028      	str	r0, [r5, #0]
 800ef30:	6128      	str	r0, [r5, #16]
 800ef32:	b920      	cbnz	r0, 800ef3e <_svfiprintf_r+0x2e>
 800ef34:	230c      	movs	r3, #12
 800ef36:	603b      	str	r3, [r7, #0]
 800ef38:	f04f 30ff 	mov.w	r0, #4294967295
 800ef3c:	e0d1      	b.n	800f0e2 <_svfiprintf_r+0x1d2>
 800ef3e:	2340      	movs	r3, #64	; 0x40
 800ef40:	616b      	str	r3, [r5, #20]
 800ef42:	2300      	movs	r3, #0
 800ef44:	9309      	str	r3, [sp, #36]	; 0x24
 800ef46:	2320      	movs	r3, #32
 800ef48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ef4c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef50:	2330      	movs	r3, #48	; 0x30
 800ef52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f0fc <_svfiprintf_r+0x1ec>
 800ef56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ef5a:	f04f 0901 	mov.w	r9, #1
 800ef5e:	4623      	mov	r3, r4
 800ef60:	469a      	mov	sl, r3
 800ef62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef66:	b10a      	cbz	r2, 800ef6c <_svfiprintf_r+0x5c>
 800ef68:	2a25      	cmp	r2, #37	; 0x25
 800ef6a:	d1f9      	bne.n	800ef60 <_svfiprintf_r+0x50>
 800ef6c:	ebba 0b04 	subs.w	fp, sl, r4
 800ef70:	d00b      	beq.n	800ef8a <_svfiprintf_r+0x7a>
 800ef72:	465b      	mov	r3, fp
 800ef74:	4622      	mov	r2, r4
 800ef76:	4629      	mov	r1, r5
 800ef78:	4638      	mov	r0, r7
 800ef7a:	f7ff ff6d 	bl	800ee58 <__ssputs_r>
 800ef7e:	3001      	adds	r0, #1
 800ef80:	f000 80aa 	beq.w	800f0d8 <_svfiprintf_r+0x1c8>
 800ef84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef86:	445a      	add	r2, fp
 800ef88:	9209      	str	r2, [sp, #36]	; 0x24
 800ef8a:	f89a 3000 	ldrb.w	r3, [sl]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	f000 80a2 	beq.w	800f0d8 <_svfiprintf_r+0x1c8>
 800ef94:	2300      	movs	r3, #0
 800ef96:	f04f 32ff 	mov.w	r2, #4294967295
 800ef9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef9e:	f10a 0a01 	add.w	sl, sl, #1
 800efa2:	9304      	str	r3, [sp, #16]
 800efa4:	9307      	str	r3, [sp, #28]
 800efa6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800efaa:	931a      	str	r3, [sp, #104]	; 0x68
 800efac:	4654      	mov	r4, sl
 800efae:	2205      	movs	r2, #5
 800efb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efb4:	4851      	ldr	r0, [pc, #324]	; (800f0fc <_svfiprintf_r+0x1ec>)
 800efb6:	f7f1 f913 	bl	80001e0 <memchr>
 800efba:	9a04      	ldr	r2, [sp, #16]
 800efbc:	b9d8      	cbnz	r0, 800eff6 <_svfiprintf_r+0xe6>
 800efbe:	06d0      	lsls	r0, r2, #27
 800efc0:	bf44      	itt	mi
 800efc2:	2320      	movmi	r3, #32
 800efc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800efc8:	0711      	lsls	r1, r2, #28
 800efca:	bf44      	itt	mi
 800efcc:	232b      	movmi	r3, #43	; 0x2b
 800efce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800efd2:	f89a 3000 	ldrb.w	r3, [sl]
 800efd6:	2b2a      	cmp	r3, #42	; 0x2a
 800efd8:	d015      	beq.n	800f006 <_svfiprintf_r+0xf6>
 800efda:	9a07      	ldr	r2, [sp, #28]
 800efdc:	4654      	mov	r4, sl
 800efde:	2000      	movs	r0, #0
 800efe0:	f04f 0c0a 	mov.w	ip, #10
 800efe4:	4621      	mov	r1, r4
 800efe6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800efea:	3b30      	subs	r3, #48	; 0x30
 800efec:	2b09      	cmp	r3, #9
 800efee:	d94e      	bls.n	800f08e <_svfiprintf_r+0x17e>
 800eff0:	b1b0      	cbz	r0, 800f020 <_svfiprintf_r+0x110>
 800eff2:	9207      	str	r2, [sp, #28]
 800eff4:	e014      	b.n	800f020 <_svfiprintf_r+0x110>
 800eff6:	eba0 0308 	sub.w	r3, r0, r8
 800effa:	fa09 f303 	lsl.w	r3, r9, r3
 800effe:	4313      	orrs	r3, r2
 800f000:	9304      	str	r3, [sp, #16]
 800f002:	46a2      	mov	sl, r4
 800f004:	e7d2      	b.n	800efac <_svfiprintf_r+0x9c>
 800f006:	9b03      	ldr	r3, [sp, #12]
 800f008:	1d19      	adds	r1, r3, #4
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	9103      	str	r1, [sp, #12]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	bfbb      	ittet	lt
 800f012:	425b      	neglt	r3, r3
 800f014:	f042 0202 	orrlt.w	r2, r2, #2
 800f018:	9307      	strge	r3, [sp, #28]
 800f01a:	9307      	strlt	r3, [sp, #28]
 800f01c:	bfb8      	it	lt
 800f01e:	9204      	strlt	r2, [sp, #16]
 800f020:	7823      	ldrb	r3, [r4, #0]
 800f022:	2b2e      	cmp	r3, #46	; 0x2e
 800f024:	d10c      	bne.n	800f040 <_svfiprintf_r+0x130>
 800f026:	7863      	ldrb	r3, [r4, #1]
 800f028:	2b2a      	cmp	r3, #42	; 0x2a
 800f02a:	d135      	bne.n	800f098 <_svfiprintf_r+0x188>
 800f02c:	9b03      	ldr	r3, [sp, #12]
 800f02e:	1d1a      	adds	r2, r3, #4
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	9203      	str	r2, [sp, #12]
 800f034:	2b00      	cmp	r3, #0
 800f036:	bfb8      	it	lt
 800f038:	f04f 33ff 	movlt.w	r3, #4294967295
 800f03c:	3402      	adds	r4, #2
 800f03e:	9305      	str	r3, [sp, #20]
 800f040:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f10c <_svfiprintf_r+0x1fc>
 800f044:	7821      	ldrb	r1, [r4, #0]
 800f046:	2203      	movs	r2, #3
 800f048:	4650      	mov	r0, sl
 800f04a:	f7f1 f8c9 	bl	80001e0 <memchr>
 800f04e:	b140      	cbz	r0, 800f062 <_svfiprintf_r+0x152>
 800f050:	2340      	movs	r3, #64	; 0x40
 800f052:	eba0 000a 	sub.w	r0, r0, sl
 800f056:	fa03 f000 	lsl.w	r0, r3, r0
 800f05a:	9b04      	ldr	r3, [sp, #16]
 800f05c:	4303      	orrs	r3, r0
 800f05e:	3401      	adds	r4, #1
 800f060:	9304      	str	r3, [sp, #16]
 800f062:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f066:	4826      	ldr	r0, [pc, #152]	; (800f100 <_svfiprintf_r+0x1f0>)
 800f068:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f06c:	2206      	movs	r2, #6
 800f06e:	f7f1 f8b7 	bl	80001e0 <memchr>
 800f072:	2800      	cmp	r0, #0
 800f074:	d038      	beq.n	800f0e8 <_svfiprintf_r+0x1d8>
 800f076:	4b23      	ldr	r3, [pc, #140]	; (800f104 <_svfiprintf_r+0x1f4>)
 800f078:	bb1b      	cbnz	r3, 800f0c2 <_svfiprintf_r+0x1b2>
 800f07a:	9b03      	ldr	r3, [sp, #12]
 800f07c:	3307      	adds	r3, #7
 800f07e:	f023 0307 	bic.w	r3, r3, #7
 800f082:	3308      	adds	r3, #8
 800f084:	9303      	str	r3, [sp, #12]
 800f086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f088:	4433      	add	r3, r6
 800f08a:	9309      	str	r3, [sp, #36]	; 0x24
 800f08c:	e767      	b.n	800ef5e <_svfiprintf_r+0x4e>
 800f08e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f092:	460c      	mov	r4, r1
 800f094:	2001      	movs	r0, #1
 800f096:	e7a5      	b.n	800efe4 <_svfiprintf_r+0xd4>
 800f098:	2300      	movs	r3, #0
 800f09a:	3401      	adds	r4, #1
 800f09c:	9305      	str	r3, [sp, #20]
 800f09e:	4619      	mov	r1, r3
 800f0a0:	f04f 0c0a 	mov.w	ip, #10
 800f0a4:	4620      	mov	r0, r4
 800f0a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0aa:	3a30      	subs	r2, #48	; 0x30
 800f0ac:	2a09      	cmp	r2, #9
 800f0ae:	d903      	bls.n	800f0b8 <_svfiprintf_r+0x1a8>
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d0c5      	beq.n	800f040 <_svfiprintf_r+0x130>
 800f0b4:	9105      	str	r1, [sp, #20]
 800f0b6:	e7c3      	b.n	800f040 <_svfiprintf_r+0x130>
 800f0b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f0bc:	4604      	mov	r4, r0
 800f0be:	2301      	movs	r3, #1
 800f0c0:	e7f0      	b.n	800f0a4 <_svfiprintf_r+0x194>
 800f0c2:	ab03      	add	r3, sp, #12
 800f0c4:	9300      	str	r3, [sp, #0]
 800f0c6:	462a      	mov	r2, r5
 800f0c8:	4b0f      	ldr	r3, [pc, #60]	; (800f108 <_svfiprintf_r+0x1f8>)
 800f0ca:	a904      	add	r1, sp, #16
 800f0cc:	4638      	mov	r0, r7
 800f0ce:	f3af 8000 	nop.w
 800f0d2:	1c42      	adds	r2, r0, #1
 800f0d4:	4606      	mov	r6, r0
 800f0d6:	d1d6      	bne.n	800f086 <_svfiprintf_r+0x176>
 800f0d8:	89ab      	ldrh	r3, [r5, #12]
 800f0da:	065b      	lsls	r3, r3, #25
 800f0dc:	f53f af2c 	bmi.w	800ef38 <_svfiprintf_r+0x28>
 800f0e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f0e2:	b01d      	add	sp, #116	; 0x74
 800f0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0e8:	ab03      	add	r3, sp, #12
 800f0ea:	9300      	str	r3, [sp, #0]
 800f0ec:	462a      	mov	r2, r5
 800f0ee:	4b06      	ldr	r3, [pc, #24]	; (800f108 <_svfiprintf_r+0x1f8>)
 800f0f0:	a904      	add	r1, sp, #16
 800f0f2:	4638      	mov	r0, r7
 800f0f4:	f000 f9d4 	bl	800f4a0 <_printf_i>
 800f0f8:	e7eb      	b.n	800f0d2 <_svfiprintf_r+0x1c2>
 800f0fa:	bf00      	nop
 800f0fc:	080117f8 	.word	0x080117f8
 800f100:	08011802 	.word	0x08011802
 800f104:	00000000 	.word	0x00000000
 800f108:	0800ee59 	.word	0x0800ee59
 800f10c:	080117fe 	.word	0x080117fe

0800f110 <__sfputc_r>:
 800f110:	6893      	ldr	r3, [r2, #8]
 800f112:	3b01      	subs	r3, #1
 800f114:	2b00      	cmp	r3, #0
 800f116:	b410      	push	{r4}
 800f118:	6093      	str	r3, [r2, #8]
 800f11a:	da08      	bge.n	800f12e <__sfputc_r+0x1e>
 800f11c:	6994      	ldr	r4, [r2, #24]
 800f11e:	42a3      	cmp	r3, r4
 800f120:	db01      	blt.n	800f126 <__sfputc_r+0x16>
 800f122:	290a      	cmp	r1, #10
 800f124:	d103      	bne.n	800f12e <__sfputc_r+0x1e>
 800f126:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f12a:	f7ff bad5 	b.w	800e6d8 <__swbuf_r>
 800f12e:	6813      	ldr	r3, [r2, #0]
 800f130:	1c58      	adds	r0, r3, #1
 800f132:	6010      	str	r0, [r2, #0]
 800f134:	7019      	strb	r1, [r3, #0]
 800f136:	4608      	mov	r0, r1
 800f138:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f13c:	4770      	bx	lr

0800f13e <__sfputs_r>:
 800f13e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f140:	4606      	mov	r6, r0
 800f142:	460f      	mov	r7, r1
 800f144:	4614      	mov	r4, r2
 800f146:	18d5      	adds	r5, r2, r3
 800f148:	42ac      	cmp	r4, r5
 800f14a:	d101      	bne.n	800f150 <__sfputs_r+0x12>
 800f14c:	2000      	movs	r0, #0
 800f14e:	e007      	b.n	800f160 <__sfputs_r+0x22>
 800f150:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f154:	463a      	mov	r2, r7
 800f156:	4630      	mov	r0, r6
 800f158:	f7ff ffda 	bl	800f110 <__sfputc_r>
 800f15c:	1c43      	adds	r3, r0, #1
 800f15e:	d1f3      	bne.n	800f148 <__sfputs_r+0xa>
 800f160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f164 <_vfiprintf_r>:
 800f164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f168:	460d      	mov	r5, r1
 800f16a:	b09d      	sub	sp, #116	; 0x74
 800f16c:	4614      	mov	r4, r2
 800f16e:	4698      	mov	r8, r3
 800f170:	4606      	mov	r6, r0
 800f172:	b118      	cbz	r0, 800f17c <_vfiprintf_r+0x18>
 800f174:	6983      	ldr	r3, [r0, #24]
 800f176:	b90b      	cbnz	r3, 800f17c <_vfiprintf_r+0x18>
 800f178:	f7ff fc88 	bl	800ea8c <__sinit>
 800f17c:	4b89      	ldr	r3, [pc, #548]	; (800f3a4 <_vfiprintf_r+0x240>)
 800f17e:	429d      	cmp	r5, r3
 800f180:	d11b      	bne.n	800f1ba <_vfiprintf_r+0x56>
 800f182:	6875      	ldr	r5, [r6, #4]
 800f184:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f186:	07d9      	lsls	r1, r3, #31
 800f188:	d405      	bmi.n	800f196 <_vfiprintf_r+0x32>
 800f18a:	89ab      	ldrh	r3, [r5, #12]
 800f18c:	059a      	lsls	r2, r3, #22
 800f18e:	d402      	bmi.n	800f196 <_vfiprintf_r+0x32>
 800f190:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f192:	f7ff fd19 	bl	800ebc8 <__retarget_lock_acquire_recursive>
 800f196:	89ab      	ldrh	r3, [r5, #12]
 800f198:	071b      	lsls	r3, r3, #28
 800f19a:	d501      	bpl.n	800f1a0 <_vfiprintf_r+0x3c>
 800f19c:	692b      	ldr	r3, [r5, #16]
 800f19e:	b9eb      	cbnz	r3, 800f1dc <_vfiprintf_r+0x78>
 800f1a0:	4629      	mov	r1, r5
 800f1a2:	4630      	mov	r0, r6
 800f1a4:	f7ff faea 	bl	800e77c <__swsetup_r>
 800f1a8:	b1c0      	cbz	r0, 800f1dc <_vfiprintf_r+0x78>
 800f1aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f1ac:	07dc      	lsls	r4, r3, #31
 800f1ae:	d50e      	bpl.n	800f1ce <_vfiprintf_r+0x6a>
 800f1b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f1b4:	b01d      	add	sp, #116	; 0x74
 800f1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1ba:	4b7b      	ldr	r3, [pc, #492]	; (800f3a8 <_vfiprintf_r+0x244>)
 800f1bc:	429d      	cmp	r5, r3
 800f1be:	d101      	bne.n	800f1c4 <_vfiprintf_r+0x60>
 800f1c0:	68b5      	ldr	r5, [r6, #8]
 800f1c2:	e7df      	b.n	800f184 <_vfiprintf_r+0x20>
 800f1c4:	4b79      	ldr	r3, [pc, #484]	; (800f3ac <_vfiprintf_r+0x248>)
 800f1c6:	429d      	cmp	r5, r3
 800f1c8:	bf08      	it	eq
 800f1ca:	68f5      	ldreq	r5, [r6, #12]
 800f1cc:	e7da      	b.n	800f184 <_vfiprintf_r+0x20>
 800f1ce:	89ab      	ldrh	r3, [r5, #12]
 800f1d0:	0598      	lsls	r0, r3, #22
 800f1d2:	d4ed      	bmi.n	800f1b0 <_vfiprintf_r+0x4c>
 800f1d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f1d6:	f7ff fcf8 	bl	800ebca <__retarget_lock_release_recursive>
 800f1da:	e7e9      	b.n	800f1b0 <_vfiprintf_r+0x4c>
 800f1dc:	2300      	movs	r3, #0
 800f1de:	9309      	str	r3, [sp, #36]	; 0x24
 800f1e0:	2320      	movs	r3, #32
 800f1e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f1e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f1ea:	2330      	movs	r3, #48	; 0x30
 800f1ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f3b0 <_vfiprintf_r+0x24c>
 800f1f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f1f4:	f04f 0901 	mov.w	r9, #1
 800f1f8:	4623      	mov	r3, r4
 800f1fa:	469a      	mov	sl, r3
 800f1fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f200:	b10a      	cbz	r2, 800f206 <_vfiprintf_r+0xa2>
 800f202:	2a25      	cmp	r2, #37	; 0x25
 800f204:	d1f9      	bne.n	800f1fa <_vfiprintf_r+0x96>
 800f206:	ebba 0b04 	subs.w	fp, sl, r4
 800f20a:	d00b      	beq.n	800f224 <_vfiprintf_r+0xc0>
 800f20c:	465b      	mov	r3, fp
 800f20e:	4622      	mov	r2, r4
 800f210:	4629      	mov	r1, r5
 800f212:	4630      	mov	r0, r6
 800f214:	f7ff ff93 	bl	800f13e <__sfputs_r>
 800f218:	3001      	adds	r0, #1
 800f21a:	f000 80aa 	beq.w	800f372 <_vfiprintf_r+0x20e>
 800f21e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f220:	445a      	add	r2, fp
 800f222:	9209      	str	r2, [sp, #36]	; 0x24
 800f224:	f89a 3000 	ldrb.w	r3, [sl]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	f000 80a2 	beq.w	800f372 <_vfiprintf_r+0x20e>
 800f22e:	2300      	movs	r3, #0
 800f230:	f04f 32ff 	mov.w	r2, #4294967295
 800f234:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f238:	f10a 0a01 	add.w	sl, sl, #1
 800f23c:	9304      	str	r3, [sp, #16]
 800f23e:	9307      	str	r3, [sp, #28]
 800f240:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f244:	931a      	str	r3, [sp, #104]	; 0x68
 800f246:	4654      	mov	r4, sl
 800f248:	2205      	movs	r2, #5
 800f24a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f24e:	4858      	ldr	r0, [pc, #352]	; (800f3b0 <_vfiprintf_r+0x24c>)
 800f250:	f7f0 ffc6 	bl	80001e0 <memchr>
 800f254:	9a04      	ldr	r2, [sp, #16]
 800f256:	b9d8      	cbnz	r0, 800f290 <_vfiprintf_r+0x12c>
 800f258:	06d1      	lsls	r1, r2, #27
 800f25a:	bf44      	itt	mi
 800f25c:	2320      	movmi	r3, #32
 800f25e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f262:	0713      	lsls	r3, r2, #28
 800f264:	bf44      	itt	mi
 800f266:	232b      	movmi	r3, #43	; 0x2b
 800f268:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f26c:	f89a 3000 	ldrb.w	r3, [sl]
 800f270:	2b2a      	cmp	r3, #42	; 0x2a
 800f272:	d015      	beq.n	800f2a0 <_vfiprintf_r+0x13c>
 800f274:	9a07      	ldr	r2, [sp, #28]
 800f276:	4654      	mov	r4, sl
 800f278:	2000      	movs	r0, #0
 800f27a:	f04f 0c0a 	mov.w	ip, #10
 800f27e:	4621      	mov	r1, r4
 800f280:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f284:	3b30      	subs	r3, #48	; 0x30
 800f286:	2b09      	cmp	r3, #9
 800f288:	d94e      	bls.n	800f328 <_vfiprintf_r+0x1c4>
 800f28a:	b1b0      	cbz	r0, 800f2ba <_vfiprintf_r+0x156>
 800f28c:	9207      	str	r2, [sp, #28]
 800f28e:	e014      	b.n	800f2ba <_vfiprintf_r+0x156>
 800f290:	eba0 0308 	sub.w	r3, r0, r8
 800f294:	fa09 f303 	lsl.w	r3, r9, r3
 800f298:	4313      	orrs	r3, r2
 800f29a:	9304      	str	r3, [sp, #16]
 800f29c:	46a2      	mov	sl, r4
 800f29e:	e7d2      	b.n	800f246 <_vfiprintf_r+0xe2>
 800f2a0:	9b03      	ldr	r3, [sp, #12]
 800f2a2:	1d19      	adds	r1, r3, #4
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	9103      	str	r1, [sp, #12]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	bfbb      	ittet	lt
 800f2ac:	425b      	neglt	r3, r3
 800f2ae:	f042 0202 	orrlt.w	r2, r2, #2
 800f2b2:	9307      	strge	r3, [sp, #28]
 800f2b4:	9307      	strlt	r3, [sp, #28]
 800f2b6:	bfb8      	it	lt
 800f2b8:	9204      	strlt	r2, [sp, #16]
 800f2ba:	7823      	ldrb	r3, [r4, #0]
 800f2bc:	2b2e      	cmp	r3, #46	; 0x2e
 800f2be:	d10c      	bne.n	800f2da <_vfiprintf_r+0x176>
 800f2c0:	7863      	ldrb	r3, [r4, #1]
 800f2c2:	2b2a      	cmp	r3, #42	; 0x2a
 800f2c4:	d135      	bne.n	800f332 <_vfiprintf_r+0x1ce>
 800f2c6:	9b03      	ldr	r3, [sp, #12]
 800f2c8:	1d1a      	adds	r2, r3, #4
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	9203      	str	r2, [sp, #12]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	bfb8      	it	lt
 800f2d2:	f04f 33ff 	movlt.w	r3, #4294967295
 800f2d6:	3402      	adds	r4, #2
 800f2d8:	9305      	str	r3, [sp, #20]
 800f2da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f3c0 <_vfiprintf_r+0x25c>
 800f2de:	7821      	ldrb	r1, [r4, #0]
 800f2e0:	2203      	movs	r2, #3
 800f2e2:	4650      	mov	r0, sl
 800f2e4:	f7f0 ff7c 	bl	80001e0 <memchr>
 800f2e8:	b140      	cbz	r0, 800f2fc <_vfiprintf_r+0x198>
 800f2ea:	2340      	movs	r3, #64	; 0x40
 800f2ec:	eba0 000a 	sub.w	r0, r0, sl
 800f2f0:	fa03 f000 	lsl.w	r0, r3, r0
 800f2f4:	9b04      	ldr	r3, [sp, #16]
 800f2f6:	4303      	orrs	r3, r0
 800f2f8:	3401      	adds	r4, #1
 800f2fa:	9304      	str	r3, [sp, #16]
 800f2fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f300:	482c      	ldr	r0, [pc, #176]	; (800f3b4 <_vfiprintf_r+0x250>)
 800f302:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f306:	2206      	movs	r2, #6
 800f308:	f7f0 ff6a 	bl	80001e0 <memchr>
 800f30c:	2800      	cmp	r0, #0
 800f30e:	d03f      	beq.n	800f390 <_vfiprintf_r+0x22c>
 800f310:	4b29      	ldr	r3, [pc, #164]	; (800f3b8 <_vfiprintf_r+0x254>)
 800f312:	bb1b      	cbnz	r3, 800f35c <_vfiprintf_r+0x1f8>
 800f314:	9b03      	ldr	r3, [sp, #12]
 800f316:	3307      	adds	r3, #7
 800f318:	f023 0307 	bic.w	r3, r3, #7
 800f31c:	3308      	adds	r3, #8
 800f31e:	9303      	str	r3, [sp, #12]
 800f320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f322:	443b      	add	r3, r7
 800f324:	9309      	str	r3, [sp, #36]	; 0x24
 800f326:	e767      	b.n	800f1f8 <_vfiprintf_r+0x94>
 800f328:	fb0c 3202 	mla	r2, ip, r2, r3
 800f32c:	460c      	mov	r4, r1
 800f32e:	2001      	movs	r0, #1
 800f330:	e7a5      	b.n	800f27e <_vfiprintf_r+0x11a>
 800f332:	2300      	movs	r3, #0
 800f334:	3401      	adds	r4, #1
 800f336:	9305      	str	r3, [sp, #20]
 800f338:	4619      	mov	r1, r3
 800f33a:	f04f 0c0a 	mov.w	ip, #10
 800f33e:	4620      	mov	r0, r4
 800f340:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f344:	3a30      	subs	r2, #48	; 0x30
 800f346:	2a09      	cmp	r2, #9
 800f348:	d903      	bls.n	800f352 <_vfiprintf_r+0x1ee>
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d0c5      	beq.n	800f2da <_vfiprintf_r+0x176>
 800f34e:	9105      	str	r1, [sp, #20]
 800f350:	e7c3      	b.n	800f2da <_vfiprintf_r+0x176>
 800f352:	fb0c 2101 	mla	r1, ip, r1, r2
 800f356:	4604      	mov	r4, r0
 800f358:	2301      	movs	r3, #1
 800f35a:	e7f0      	b.n	800f33e <_vfiprintf_r+0x1da>
 800f35c:	ab03      	add	r3, sp, #12
 800f35e:	9300      	str	r3, [sp, #0]
 800f360:	462a      	mov	r2, r5
 800f362:	4b16      	ldr	r3, [pc, #88]	; (800f3bc <_vfiprintf_r+0x258>)
 800f364:	a904      	add	r1, sp, #16
 800f366:	4630      	mov	r0, r6
 800f368:	f3af 8000 	nop.w
 800f36c:	4607      	mov	r7, r0
 800f36e:	1c78      	adds	r0, r7, #1
 800f370:	d1d6      	bne.n	800f320 <_vfiprintf_r+0x1bc>
 800f372:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f374:	07d9      	lsls	r1, r3, #31
 800f376:	d405      	bmi.n	800f384 <_vfiprintf_r+0x220>
 800f378:	89ab      	ldrh	r3, [r5, #12]
 800f37a:	059a      	lsls	r2, r3, #22
 800f37c:	d402      	bmi.n	800f384 <_vfiprintf_r+0x220>
 800f37e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f380:	f7ff fc23 	bl	800ebca <__retarget_lock_release_recursive>
 800f384:	89ab      	ldrh	r3, [r5, #12]
 800f386:	065b      	lsls	r3, r3, #25
 800f388:	f53f af12 	bmi.w	800f1b0 <_vfiprintf_r+0x4c>
 800f38c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f38e:	e711      	b.n	800f1b4 <_vfiprintf_r+0x50>
 800f390:	ab03      	add	r3, sp, #12
 800f392:	9300      	str	r3, [sp, #0]
 800f394:	462a      	mov	r2, r5
 800f396:	4b09      	ldr	r3, [pc, #36]	; (800f3bc <_vfiprintf_r+0x258>)
 800f398:	a904      	add	r1, sp, #16
 800f39a:	4630      	mov	r0, r6
 800f39c:	f000 f880 	bl	800f4a0 <_printf_i>
 800f3a0:	e7e4      	b.n	800f36c <_vfiprintf_r+0x208>
 800f3a2:	bf00      	nop
 800f3a4:	080117b8 	.word	0x080117b8
 800f3a8:	080117d8 	.word	0x080117d8
 800f3ac:	08011798 	.word	0x08011798
 800f3b0:	080117f8 	.word	0x080117f8
 800f3b4:	08011802 	.word	0x08011802
 800f3b8:	00000000 	.word	0x00000000
 800f3bc:	0800f13f 	.word	0x0800f13f
 800f3c0:	080117fe 	.word	0x080117fe

0800f3c4 <_printf_common>:
 800f3c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3c8:	4616      	mov	r6, r2
 800f3ca:	4699      	mov	r9, r3
 800f3cc:	688a      	ldr	r2, [r1, #8]
 800f3ce:	690b      	ldr	r3, [r1, #16]
 800f3d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f3d4:	4293      	cmp	r3, r2
 800f3d6:	bfb8      	it	lt
 800f3d8:	4613      	movlt	r3, r2
 800f3da:	6033      	str	r3, [r6, #0]
 800f3dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f3e0:	4607      	mov	r7, r0
 800f3e2:	460c      	mov	r4, r1
 800f3e4:	b10a      	cbz	r2, 800f3ea <_printf_common+0x26>
 800f3e6:	3301      	adds	r3, #1
 800f3e8:	6033      	str	r3, [r6, #0]
 800f3ea:	6823      	ldr	r3, [r4, #0]
 800f3ec:	0699      	lsls	r1, r3, #26
 800f3ee:	bf42      	ittt	mi
 800f3f0:	6833      	ldrmi	r3, [r6, #0]
 800f3f2:	3302      	addmi	r3, #2
 800f3f4:	6033      	strmi	r3, [r6, #0]
 800f3f6:	6825      	ldr	r5, [r4, #0]
 800f3f8:	f015 0506 	ands.w	r5, r5, #6
 800f3fc:	d106      	bne.n	800f40c <_printf_common+0x48>
 800f3fe:	f104 0a19 	add.w	sl, r4, #25
 800f402:	68e3      	ldr	r3, [r4, #12]
 800f404:	6832      	ldr	r2, [r6, #0]
 800f406:	1a9b      	subs	r3, r3, r2
 800f408:	42ab      	cmp	r3, r5
 800f40a:	dc26      	bgt.n	800f45a <_printf_common+0x96>
 800f40c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f410:	1e13      	subs	r3, r2, #0
 800f412:	6822      	ldr	r2, [r4, #0]
 800f414:	bf18      	it	ne
 800f416:	2301      	movne	r3, #1
 800f418:	0692      	lsls	r2, r2, #26
 800f41a:	d42b      	bmi.n	800f474 <_printf_common+0xb0>
 800f41c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f420:	4649      	mov	r1, r9
 800f422:	4638      	mov	r0, r7
 800f424:	47c0      	blx	r8
 800f426:	3001      	adds	r0, #1
 800f428:	d01e      	beq.n	800f468 <_printf_common+0xa4>
 800f42a:	6823      	ldr	r3, [r4, #0]
 800f42c:	68e5      	ldr	r5, [r4, #12]
 800f42e:	6832      	ldr	r2, [r6, #0]
 800f430:	f003 0306 	and.w	r3, r3, #6
 800f434:	2b04      	cmp	r3, #4
 800f436:	bf08      	it	eq
 800f438:	1aad      	subeq	r5, r5, r2
 800f43a:	68a3      	ldr	r3, [r4, #8]
 800f43c:	6922      	ldr	r2, [r4, #16]
 800f43e:	bf0c      	ite	eq
 800f440:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f444:	2500      	movne	r5, #0
 800f446:	4293      	cmp	r3, r2
 800f448:	bfc4      	itt	gt
 800f44a:	1a9b      	subgt	r3, r3, r2
 800f44c:	18ed      	addgt	r5, r5, r3
 800f44e:	2600      	movs	r6, #0
 800f450:	341a      	adds	r4, #26
 800f452:	42b5      	cmp	r5, r6
 800f454:	d11a      	bne.n	800f48c <_printf_common+0xc8>
 800f456:	2000      	movs	r0, #0
 800f458:	e008      	b.n	800f46c <_printf_common+0xa8>
 800f45a:	2301      	movs	r3, #1
 800f45c:	4652      	mov	r2, sl
 800f45e:	4649      	mov	r1, r9
 800f460:	4638      	mov	r0, r7
 800f462:	47c0      	blx	r8
 800f464:	3001      	adds	r0, #1
 800f466:	d103      	bne.n	800f470 <_printf_common+0xac>
 800f468:	f04f 30ff 	mov.w	r0, #4294967295
 800f46c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f470:	3501      	adds	r5, #1
 800f472:	e7c6      	b.n	800f402 <_printf_common+0x3e>
 800f474:	18e1      	adds	r1, r4, r3
 800f476:	1c5a      	adds	r2, r3, #1
 800f478:	2030      	movs	r0, #48	; 0x30
 800f47a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f47e:	4422      	add	r2, r4
 800f480:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f484:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f488:	3302      	adds	r3, #2
 800f48a:	e7c7      	b.n	800f41c <_printf_common+0x58>
 800f48c:	2301      	movs	r3, #1
 800f48e:	4622      	mov	r2, r4
 800f490:	4649      	mov	r1, r9
 800f492:	4638      	mov	r0, r7
 800f494:	47c0      	blx	r8
 800f496:	3001      	adds	r0, #1
 800f498:	d0e6      	beq.n	800f468 <_printf_common+0xa4>
 800f49a:	3601      	adds	r6, #1
 800f49c:	e7d9      	b.n	800f452 <_printf_common+0x8e>
	...

0800f4a0 <_printf_i>:
 800f4a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f4a4:	7e0f      	ldrb	r7, [r1, #24]
 800f4a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f4a8:	2f78      	cmp	r7, #120	; 0x78
 800f4aa:	4691      	mov	r9, r2
 800f4ac:	4680      	mov	r8, r0
 800f4ae:	460c      	mov	r4, r1
 800f4b0:	469a      	mov	sl, r3
 800f4b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f4b6:	d807      	bhi.n	800f4c8 <_printf_i+0x28>
 800f4b8:	2f62      	cmp	r7, #98	; 0x62
 800f4ba:	d80a      	bhi.n	800f4d2 <_printf_i+0x32>
 800f4bc:	2f00      	cmp	r7, #0
 800f4be:	f000 80d8 	beq.w	800f672 <_printf_i+0x1d2>
 800f4c2:	2f58      	cmp	r7, #88	; 0x58
 800f4c4:	f000 80a3 	beq.w	800f60e <_printf_i+0x16e>
 800f4c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f4cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f4d0:	e03a      	b.n	800f548 <_printf_i+0xa8>
 800f4d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f4d6:	2b15      	cmp	r3, #21
 800f4d8:	d8f6      	bhi.n	800f4c8 <_printf_i+0x28>
 800f4da:	a101      	add	r1, pc, #4	; (adr r1, 800f4e0 <_printf_i+0x40>)
 800f4dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f4e0:	0800f539 	.word	0x0800f539
 800f4e4:	0800f54d 	.word	0x0800f54d
 800f4e8:	0800f4c9 	.word	0x0800f4c9
 800f4ec:	0800f4c9 	.word	0x0800f4c9
 800f4f0:	0800f4c9 	.word	0x0800f4c9
 800f4f4:	0800f4c9 	.word	0x0800f4c9
 800f4f8:	0800f54d 	.word	0x0800f54d
 800f4fc:	0800f4c9 	.word	0x0800f4c9
 800f500:	0800f4c9 	.word	0x0800f4c9
 800f504:	0800f4c9 	.word	0x0800f4c9
 800f508:	0800f4c9 	.word	0x0800f4c9
 800f50c:	0800f659 	.word	0x0800f659
 800f510:	0800f57d 	.word	0x0800f57d
 800f514:	0800f63b 	.word	0x0800f63b
 800f518:	0800f4c9 	.word	0x0800f4c9
 800f51c:	0800f4c9 	.word	0x0800f4c9
 800f520:	0800f67b 	.word	0x0800f67b
 800f524:	0800f4c9 	.word	0x0800f4c9
 800f528:	0800f57d 	.word	0x0800f57d
 800f52c:	0800f4c9 	.word	0x0800f4c9
 800f530:	0800f4c9 	.word	0x0800f4c9
 800f534:	0800f643 	.word	0x0800f643
 800f538:	682b      	ldr	r3, [r5, #0]
 800f53a:	1d1a      	adds	r2, r3, #4
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	602a      	str	r2, [r5, #0]
 800f540:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f544:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f548:	2301      	movs	r3, #1
 800f54a:	e0a3      	b.n	800f694 <_printf_i+0x1f4>
 800f54c:	6820      	ldr	r0, [r4, #0]
 800f54e:	6829      	ldr	r1, [r5, #0]
 800f550:	0606      	lsls	r6, r0, #24
 800f552:	f101 0304 	add.w	r3, r1, #4
 800f556:	d50a      	bpl.n	800f56e <_printf_i+0xce>
 800f558:	680e      	ldr	r6, [r1, #0]
 800f55a:	602b      	str	r3, [r5, #0]
 800f55c:	2e00      	cmp	r6, #0
 800f55e:	da03      	bge.n	800f568 <_printf_i+0xc8>
 800f560:	232d      	movs	r3, #45	; 0x2d
 800f562:	4276      	negs	r6, r6
 800f564:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f568:	485e      	ldr	r0, [pc, #376]	; (800f6e4 <_printf_i+0x244>)
 800f56a:	230a      	movs	r3, #10
 800f56c:	e019      	b.n	800f5a2 <_printf_i+0x102>
 800f56e:	680e      	ldr	r6, [r1, #0]
 800f570:	602b      	str	r3, [r5, #0]
 800f572:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f576:	bf18      	it	ne
 800f578:	b236      	sxthne	r6, r6
 800f57a:	e7ef      	b.n	800f55c <_printf_i+0xbc>
 800f57c:	682b      	ldr	r3, [r5, #0]
 800f57e:	6820      	ldr	r0, [r4, #0]
 800f580:	1d19      	adds	r1, r3, #4
 800f582:	6029      	str	r1, [r5, #0]
 800f584:	0601      	lsls	r1, r0, #24
 800f586:	d501      	bpl.n	800f58c <_printf_i+0xec>
 800f588:	681e      	ldr	r6, [r3, #0]
 800f58a:	e002      	b.n	800f592 <_printf_i+0xf2>
 800f58c:	0646      	lsls	r6, r0, #25
 800f58e:	d5fb      	bpl.n	800f588 <_printf_i+0xe8>
 800f590:	881e      	ldrh	r6, [r3, #0]
 800f592:	4854      	ldr	r0, [pc, #336]	; (800f6e4 <_printf_i+0x244>)
 800f594:	2f6f      	cmp	r7, #111	; 0x6f
 800f596:	bf0c      	ite	eq
 800f598:	2308      	moveq	r3, #8
 800f59a:	230a      	movne	r3, #10
 800f59c:	2100      	movs	r1, #0
 800f59e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f5a2:	6865      	ldr	r5, [r4, #4]
 800f5a4:	60a5      	str	r5, [r4, #8]
 800f5a6:	2d00      	cmp	r5, #0
 800f5a8:	bfa2      	ittt	ge
 800f5aa:	6821      	ldrge	r1, [r4, #0]
 800f5ac:	f021 0104 	bicge.w	r1, r1, #4
 800f5b0:	6021      	strge	r1, [r4, #0]
 800f5b2:	b90e      	cbnz	r6, 800f5b8 <_printf_i+0x118>
 800f5b4:	2d00      	cmp	r5, #0
 800f5b6:	d04d      	beq.n	800f654 <_printf_i+0x1b4>
 800f5b8:	4615      	mov	r5, r2
 800f5ba:	fbb6 f1f3 	udiv	r1, r6, r3
 800f5be:	fb03 6711 	mls	r7, r3, r1, r6
 800f5c2:	5dc7      	ldrb	r7, [r0, r7]
 800f5c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f5c8:	4637      	mov	r7, r6
 800f5ca:	42bb      	cmp	r3, r7
 800f5cc:	460e      	mov	r6, r1
 800f5ce:	d9f4      	bls.n	800f5ba <_printf_i+0x11a>
 800f5d0:	2b08      	cmp	r3, #8
 800f5d2:	d10b      	bne.n	800f5ec <_printf_i+0x14c>
 800f5d4:	6823      	ldr	r3, [r4, #0]
 800f5d6:	07de      	lsls	r6, r3, #31
 800f5d8:	d508      	bpl.n	800f5ec <_printf_i+0x14c>
 800f5da:	6923      	ldr	r3, [r4, #16]
 800f5dc:	6861      	ldr	r1, [r4, #4]
 800f5de:	4299      	cmp	r1, r3
 800f5e0:	bfde      	ittt	le
 800f5e2:	2330      	movle	r3, #48	; 0x30
 800f5e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f5e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f5ec:	1b52      	subs	r2, r2, r5
 800f5ee:	6122      	str	r2, [r4, #16]
 800f5f0:	f8cd a000 	str.w	sl, [sp]
 800f5f4:	464b      	mov	r3, r9
 800f5f6:	aa03      	add	r2, sp, #12
 800f5f8:	4621      	mov	r1, r4
 800f5fa:	4640      	mov	r0, r8
 800f5fc:	f7ff fee2 	bl	800f3c4 <_printf_common>
 800f600:	3001      	adds	r0, #1
 800f602:	d14c      	bne.n	800f69e <_printf_i+0x1fe>
 800f604:	f04f 30ff 	mov.w	r0, #4294967295
 800f608:	b004      	add	sp, #16
 800f60a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f60e:	4835      	ldr	r0, [pc, #212]	; (800f6e4 <_printf_i+0x244>)
 800f610:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f614:	6829      	ldr	r1, [r5, #0]
 800f616:	6823      	ldr	r3, [r4, #0]
 800f618:	f851 6b04 	ldr.w	r6, [r1], #4
 800f61c:	6029      	str	r1, [r5, #0]
 800f61e:	061d      	lsls	r5, r3, #24
 800f620:	d514      	bpl.n	800f64c <_printf_i+0x1ac>
 800f622:	07df      	lsls	r7, r3, #31
 800f624:	bf44      	itt	mi
 800f626:	f043 0320 	orrmi.w	r3, r3, #32
 800f62a:	6023      	strmi	r3, [r4, #0]
 800f62c:	b91e      	cbnz	r6, 800f636 <_printf_i+0x196>
 800f62e:	6823      	ldr	r3, [r4, #0]
 800f630:	f023 0320 	bic.w	r3, r3, #32
 800f634:	6023      	str	r3, [r4, #0]
 800f636:	2310      	movs	r3, #16
 800f638:	e7b0      	b.n	800f59c <_printf_i+0xfc>
 800f63a:	6823      	ldr	r3, [r4, #0]
 800f63c:	f043 0320 	orr.w	r3, r3, #32
 800f640:	6023      	str	r3, [r4, #0]
 800f642:	2378      	movs	r3, #120	; 0x78
 800f644:	4828      	ldr	r0, [pc, #160]	; (800f6e8 <_printf_i+0x248>)
 800f646:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f64a:	e7e3      	b.n	800f614 <_printf_i+0x174>
 800f64c:	0659      	lsls	r1, r3, #25
 800f64e:	bf48      	it	mi
 800f650:	b2b6      	uxthmi	r6, r6
 800f652:	e7e6      	b.n	800f622 <_printf_i+0x182>
 800f654:	4615      	mov	r5, r2
 800f656:	e7bb      	b.n	800f5d0 <_printf_i+0x130>
 800f658:	682b      	ldr	r3, [r5, #0]
 800f65a:	6826      	ldr	r6, [r4, #0]
 800f65c:	6961      	ldr	r1, [r4, #20]
 800f65e:	1d18      	adds	r0, r3, #4
 800f660:	6028      	str	r0, [r5, #0]
 800f662:	0635      	lsls	r5, r6, #24
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	d501      	bpl.n	800f66c <_printf_i+0x1cc>
 800f668:	6019      	str	r1, [r3, #0]
 800f66a:	e002      	b.n	800f672 <_printf_i+0x1d2>
 800f66c:	0670      	lsls	r0, r6, #25
 800f66e:	d5fb      	bpl.n	800f668 <_printf_i+0x1c8>
 800f670:	8019      	strh	r1, [r3, #0]
 800f672:	2300      	movs	r3, #0
 800f674:	6123      	str	r3, [r4, #16]
 800f676:	4615      	mov	r5, r2
 800f678:	e7ba      	b.n	800f5f0 <_printf_i+0x150>
 800f67a:	682b      	ldr	r3, [r5, #0]
 800f67c:	1d1a      	adds	r2, r3, #4
 800f67e:	602a      	str	r2, [r5, #0]
 800f680:	681d      	ldr	r5, [r3, #0]
 800f682:	6862      	ldr	r2, [r4, #4]
 800f684:	2100      	movs	r1, #0
 800f686:	4628      	mov	r0, r5
 800f688:	f7f0 fdaa 	bl	80001e0 <memchr>
 800f68c:	b108      	cbz	r0, 800f692 <_printf_i+0x1f2>
 800f68e:	1b40      	subs	r0, r0, r5
 800f690:	6060      	str	r0, [r4, #4]
 800f692:	6863      	ldr	r3, [r4, #4]
 800f694:	6123      	str	r3, [r4, #16]
 800f696:	2300      	movs	r3, #0
 800f698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f69c:	e7a8      	b.n	800f5f0 <_printf_i+0x150>
 800f69e:	6923      	ldr	r3, [r4, #16]
 800f6a0:	462a      	mov	r2, r5
 800f6a2:	4649      	mov	r1, r9
 800f6a4:	4640      	mov	r0, r8
 800f6a6:	47d0      	blx	sl
 800f6a8:	3001      	adds	r0, #1
 800f6aa:	d0ab      	beq.n	800f604 <_printf_i+0x164>
 800f6ac:	6823      	ldr	r3, [r4, #0]
 800f6ae:	079b      	lsls	r3, r3, #30
 800f6b0:	d413      	bmi.n	800f6da <_printf_i+0x23a>
 800f6b2:	68e0      	ldr	r0, [r4, #12]
 800f6b4:	9b03      	ldr	r3, [sp, #12]
 800f6b6:	4298      	cmp	r0, r3
 800f6b8:	bfb8      	it	lt
 800f6ba:	4618      	movlt	r0, r3
 800f6bc:	e7a4      	b.n	800f608 <_printf_i+0x168>
 800f6be:	2301      	movs	r3, #1
 800f6c0:	4632      	mov	r2, r6
 800f6c2:	4649      	mov	r1, r9
 800f6c4:	4640      	mov	r0, r8
 800f6c6:	47d0      	blx	sl
 800f6c8:	3001      	adds	r0, #1
 800f6ca:	d09b      	beq.n	800f604 <_printf_i+0x164>
 800f6cc:	3501      	adds	r5, #1
 800f6ce:	68e3      	ldr	r3, [r4, #12]
 800f6d0:	9903      	ldr	r1, [sp, #12]
 800f6d2:	1a5b      	subs	r3, r3, r1
 800f6d4:	42ab      	cmp	r3, r5
 800f6d6:	dcf2      	bgt.n	800f6be <_printf_i+0x21e>
 800f6d8:	e7eb      	b.n	800f6b2 <_printf_i+0x212>
 800f6da:	2500      	movs	r5, #0
 800f6dc:	f104 0619 	add.w	r6, r4, #25
 800f6e0:	e7f5      	b.n	800f6ce <_printf_i+0x22e>
 800f6e2:	bf00      	nop
 800f6e4:	08011809 	.word	0x08011809
 800f6e8:	0801181a 	.word	0x0801181a

0800f6ec <_sbrk_r>:
 800f6ec:	b538      	push	{r3, r4, r5, lr}
 800f6ee:	4d06      	ldr	r5, [pc, #24]	; (800f708 <_sbrk_r+0x1c>)
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	4604      	mov	r4, r0
 800f6f4:	4608      	mov	r0, r1
 800f6f6:	602b      	str	r3, [r5, #0]
 800f6f8:	f7f2 fe86 	bl	8002408 <_sbrk>
 800f6fc:	1c43      	adds	r3, r0, #1
 800f6fe:	d102      	bne.n	800f706 <_sbrk_r+0x1a>
 800f700:	682b      	ldr	r3, [r5, #0]
 800f702:	b103      	cbz	r3, 800f706 <_sbrk_r+0x1a>
 800f704:	6023      	str	r3, [r4, #0]
 800f706:	bd38      	pop	{r3, r4, r5, pc}
 800f708:	200012e0 	.word	0x200012e0

0800f70c <__sread>:
 800f70c:	b510      	push	{r4, lr}
 800f70e:	460c      	mov	r4, r1
 800f710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f714:	f000 f8f8 	bl	800f908 <_read_r>
 800f718:	2800      	cmp	r0, #0
 800f71a:	bfab      	itete	ge
 800f71c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f71e:	89a3      	ldrhlt	r3, [r4, #12]
 800f720:	181b      	addge	r3, r3, r0
 800f722:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f726:	bfac      	ite	ge
 800f728:	6563      	strge	r3, [r4, #84]	; 0x54
 800f72a:	81a3      	strhlt	r3, [r4, #12]
 800f72c:	bd10      	pop	{r4, pc}

0800f72e <__swrite>:
 800f72e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f732:	461f      	mov	r7, r3
 800f734:	898b      	ldrh	r3, [r1, #12]
 800f736:	05db      	lsls	r3, r3, #23
 800f738:	4605      	mov	r5, r0
 800f73a:	460c      	mov	r4, r1
 800f73c:	4616      	mov	r6, r2
 800f73e:	d505      	bpl.n	800f74c <__swrite+0x1e>
 800f740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f744:	2302      	movs	r3, #2
 800f746:	2200      	movs	r2, #0
 800f748:	f000 f868 	bl	800f81c <_lseek_r>
 800f74c:	89a3      	ldrh	r3, [r4, #12]
 800f74e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f752:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f756:	81a3      	strh	r3, [r4, #12]
 800f758:	4632      	mov	r2, r6
 800f75a:	463b      	mov	r3, r7
 800f75c:	4628      	mov	r0, r5
 800f75e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f762:	f000 b817 	b.w	800f794 <_write_r>

0800f766 <__sseek>:
 800f766:	b510      	push	{r4, lr}
 800f768:	460c      	mov	r4, r1
 800f76a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f76e:	f000 f855 	bl	800f81c <_lseek_r>
 800f772:	1c43      	adds	r3, r0, #1
 800f774:	89a3      	ldrh	r3, [r4, #12]
 800f776:	bf15      	itete	ne
 800f778:	6560      	strne	r0, [r4, #84]	; 0x54
 800f77a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f77e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f782:	81a3      	strheq	r3, [r4, #12]
 800f784:	bf18      	it	ne
 800f786:	81a3      	strhne	r3, [r4, #12]
 800f788:	bd10      	pop	{r4, pc}

0800f78a <__sclose>:
 800f78a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f78e:	f000 b813 	b.w	800f7b8 <_close_r>
	...

0800f794 <_write_r>:
 800f794:	b538      	push	{r3, r4, r5, lr}
 800f796:	4d07      	ldr	r5, [pc, #28]	; (800f7b4 <_write_r+0x20>)
 800f798:	4604      	mov	r4, r0
 800f79a:	4608      	mov	r0, r1
 800f79c:	4611      	mov	r1, r2
 800f79e:	2200      	movs	r2, #0
 800f7a0:	602a      	str	r2, [r5, #0]
 800f7a2:	461a      	mov	r2, r3
 800f7a4:	f7f2 fddf 	bl	8002366 <_write>
 800f7a8:	1c43      	adds	r3, r0, #1
 800f7aa:	d102      	bne.n	800f7b2 <_write_r+0x1e>
 800f7ac:	682b      	ldr	r3, [r5, #0]
 800f7ae:	b103      	cbz	r3, 800f7b2 <_write_r+0x1e>
 800f7b0:	6023      	str	r3, [r4, #0]
 800f7b2:	bd38      	pop	{r3, r4, r5, pc}
 800f7b4:	200012e0 	.word	0x200012e0

0800f7b8 <_close_r>:
 800f7b8:	b538      	push	{r3, r4, r5, lr}
 800f7ba:	4d06      	ldr	r5, [pc, #24]	; (800f7d4 <_close_r+0x1c>)
 800f7bc:	2300      	movs	r3, #0
 800f7be:	4604      	mov	r4, r0
 800f7c0:	4608      	mov	r0, r1
 800f7c2:	602b      	str	r3, [r5, #0]
 800f7c4:	f7f2 fdeb 	bl	800239e <_close>
 800f7c8:	1c43      	adds	r3, r0, #1
 800f7ca:	d102      	bne.n	800f7d2 <_close_r+0x1a>
 800f7cc:	682b      	ldr	r3, [r5, #0]
 800f7ce:	b103      	cbz	r3, 800f7d2 <_close_r+0x1a>
 800f7d0:	6023      	str	r3, [r4, #0]
 800f7d2:	bd38      	pop	{r3, r4, r5, pc}
 800f7d4:	200012e0 	.word	0x200012e0

0800f7d8 <_fstat_r>:
 800f7d8:	b538      	push	{r3, r4, r5, lr}
 800f7da:	4d07      	ldr	r5, [pc, #28]	; (800f7f8 <_fstat_r+0x20>)
 800f7dc:	2300      	movs	r3, #0
 800f7de:	4604      	mov	r4, r0
 800f7e0:	4608      	mov	r0, r1
 800f7e2:	4611      	mov	r1, r2
 800f7e4:	602b      	str	r3, [r5, #0]
 800f7e6:	f7f2 fde6 	bl	80023b6 <_fstat>
 800f7ea:	1c43      	adds	r3, r0, #1
 800f7ec:	d102      	bne.n	800f7f4 <_fstat_r+0x1c>
 800f7ee:	682b      	ldr	r3, [r5, #0]
 800f7f0:	b103      	cbz	r3, 800f7f4 <_fstat_r+0x1c>
 800f7f2:	6023      	str	r3, [r4, #0]
 800f7f4:	bd38      	pop	{r3, r4, r5, pc}
 800f7f6:	bf00      	nop
 800f7f8:	200012e0 	.word	0x200012e0

0800f7fc <_isatty_r>:
 800f7fc:	b538      	push	{r3, r4, r5, lr}
 800f7fe:	4d06      	ldr	r5, [pc, #24]	; (800f818 <_isatty_r+0x1c>)
 800f800:	2300      	movs	r3, #0
 800f802:	4604      	mov	r4, r0
 800f804:	4608      	mov	r0, r1
 800f806:	602b      	str	r3, [r5, #0]
 800f808:	f7f2 fde5 	bl	80023d6 <_isatty>
 800f80c:	1c43      	adds	r3, r0, #1
 800f80e:	d102      	bne.n	800f816 <_isatty_r+0x1a>
 800f810:	682b      	ldr	r3, [r5, #0]
 800f812:	b103      	cbz	r3, 800f816 <_isatty_r+0x1a>
 800f814:	6023      	str	r3, [r4, #0]
 800f816:	bd38      	pop	{r3, r4, r5, pc}
 800f818:	200012e0 	.word	0x200012e0

0800f81c <_lseek_r>:
 800f81c:	b538      	push	{r3, r4, r5, lr}
 800f81e:	4d07      	ldr	r5, [pc, #28]	; (800f83c <_lseek_r+0x20>)
 800f820:	4604      	mov	r4, r0
 800f822:	4608      	mov	r0, r1
 800f824:	4611      	mov	r1, r2
 800f826:	2200      	movs	r2, #0
 800f828:	602a      	str	r2, [r5, #0]
 800f82a:	461a      	mov	r2, r3
 800f82c:	f7f2 fdde 	bl	80023ec <_lseek>
 800f830:	1c43      	adds	r3, r0, #1
 800f832:	d102      	bne.n	800f83a <_lseek_r+0x1e>
 800f834:	682b      	ldr	r3, [r5, #0]
 800f836:	b103      	cbz	r3, 800f83a <_lseek_r+0x1e>
 800f838:	6023      	str	r3, [r4, #0]
 800f83a:	bd38      	pop	{r3, r4, r5, pc}
 800f83c:	200012e0 	.word	0x200012e0

0800f840 <memcpy>:
 800f840:	440a      	add	r2, r1
 800f842:	4291      	cmp	r1, r2
 800f844:	f100 33ff 	add.w	r3, r0, #4294967295
 800f848:	d100      	bne.n	800f84c <memcpy+0xc>
 800f84a:	4770      	bx	lr
 800f84c:	b510      	push	{r4, lr}
 800f84e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f852:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f856:	4291      	cmp	r1, r2
 800f858:	d1f9      	bne.n	800f84e <memcpy+0xe>
 800f85a:	bd10      	pop	{r4, pc}

0800f85c <memmove>:
 800f85c:	4288      	cmp	r0, r1
 800f85e:	b510      	push	{r4, lr}
 800f860:	eb01 0402 	add.w	r4, r1, r2
 800f864:	d902      	bls.n	800f86c <memmove+0x10>
 800f866:	4284      	cmp	r4, r0
 800f868:	4623      	mov	r3, r4
 800f86a:	d807      	bhi.n	800f87c <memmove+0x20>
 800f86c:	1e43      	subs	r3, r0, #1
 800f86e:	42a1      	cmp	r1, r4
 800f870:	d008      	beq.n	800f884 <memmove+0x28>
 800f872:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f876:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f87a:	e7f8      	b.n	800f86e <memmove+0x12>
 800f87c:	4402      	add	r2, r0
 800f87e:	4601      	mov	r1, r0
 800f880:	428a      	cmp	r2, r1
 800f882:	d100      	bne.n	800f886 <memmove+0x2a>
 800f884:	bd10      	pop	{r4, pc}
 800f886:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f88a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f88e:	e7f7      	b.n	800f880 <memmove+0x24>

0800f890 <__malloc_lock>:
 800f890:	4801      	ldr	r0, [pc, #4]	; (800f898 <__malloc_lock+0x8>)
 800f892:	f7ff b999 	b.w	800ebc8 <__retarget_lock_acquire_recursive>
 800f896:	bf00      	nop
 800f898:	200012d4 	.word	0x200012d4

0800f89c <__malloc_unlock>:
 800f89c:	4801      	ldr	r0, [pc, #4]	; (800f8a4 <__malloc_unlock+0x8>)
 800f89e:	f7ff b994 	b.w	800ebca <__retarget_lock_release_recursive>
 800f8a2:	bf00      	nop
 800f8a4:	200012d4 	.word	0x200012d4

0800f8a8 <_realloc_r>:
 800f8a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8ac:	4680      	mov	r8, r0
 800f8ae:	4614      	mov	r4, r2
 800f8b0:	460e      	mov	r6, r1
 800f8b2:	b921      	cbnz	r1, 800f8be <_realloc_r+0x16>
 800f8b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f8b8:	4611      	mov	r1, r2
 800f8ba:	f7ff ba59 	b.w	800ed70 <_malloc_r>
 800f8be:	b92a      	cbnz	r2, 800f8cc <_realloc_r+0x24>
 800f8c0:	f7ff f9ea 	bl	800ec98 <_free_r>
 800f8c4:	4625      	mov	r5, r4
 800f8c6:	4628      	mov	r0, r5
 800f8c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8cc:	f000 f82e 	bl	800f92c <_malloc_usable_size_r>
 800f8d0:	4284      	cmp	r4, r0
 800f8d2:	4607      	mov	r7, r0
 800f8d4:	d802      	bhi.n	800f8dc <_realloc_r+0x34>
 800f8d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f8da:	d812      	bhi.n	800f902 <_realloc_r+0x5a>
 800f8dc:	4621      	mov	r1, r4
 800f8de:	4640      	mov	r0, r8
 800f8e0:	f7ff fa46 	bl	800ed70 <_malloc_r>
 800f8e4:	4605      	mov	r5, r0
 800f8e6:	2800      	cmp	r0, #0
 800f8e8:	d0ed      	beq.n	800f8c6 <_realloc_r+0x1e>
 800f8ea:	42bc      	cmp	r4, r7
 800f8ec:	4622      	mov	r2, r4
 800f8ee:	4631      	mov	r1, r6
 800f8f0:	bf28      	it	cs
 800f8f2:	463a      	movcs	r2, r7
 800f8f4:	f7ff ffa4 	bl	800f840 <memcpy>
 800f8f8:	4631      	mov	r1, r6
 800f8fa:	4640      	mov	r0, r8
 800f8fc:	f7ff f9cc 	bl	800ec98 <_free_r>
 800f900:	e7e1      	b.n	800f8c6 <_realloc_r+0x1e>
 800f902:	4635      	mov	r5, r6
 800f904:	e7df      	b.n	800f8c6 <_realloc_r+0x1e>
	...

0800f908 <_read_r>:
 800f908:	b538      	push	{r3, r4, r5, lr}
 800f90a:	4d07      	ldr	r5, [pc, #28]	; (800f928 <_read_r+0x20>)
 800f90c:	4604      	mov	r4, r0
 800f90e:	4608      	mov	r0, r1
 800f910:	4611      	mov	r1, r2
 800f912:	2200      	movs	r2, #0
 800f914:	602a      	str	r2, [r5, #0]
 800f916:	461a      	mov	r2, r3
 800f918:	f7f2 fd08 	bl	800232c <_read>
 800f91c:	1c43      	adds	r3, r0, #1
 800f91e:	d102      	bne.n	800f926 <_read_r+0x1e>
 800f920:	682b      	ldr	r3, [r5, #0]
 800f922:	b103      	cbz	r3, 800f926 <_read_r+0x1e>
 800f924:	6023      	str	r3, [r4, #0]
 800f926:	bd38      	pop	{r3, r4, r5, pc}
 800f928:	200012e0 	.word	0x200012e0

0800f92c <_malloc_usable_size_r>:
 800f92c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f930:	1f18      	subs	r0, r3, #4
 800f932:	2b00      	cmp	r3, #0
 800f934:	bfbc      	itt	lt
 800f936:	580b      	ldrlt	r3, [r1, r0]
 800f938:	18c0      	addlt	r0, r0, r3
 800f93a:	4770      	bx	lr

0800f93c <_init>:
 800f93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f93e:	bf00      	nop
 800f940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f942:	bc08      	pop	{r3}
 800f944:	469e      	mov	lr, r3
 800f946:	4770      	bx	lr

0800f948 <_fini>:
 800f948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f94a:	bf00      	nop
 800f94c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f94e:	bc08      	pop	{r3}
 800f950:	469e      	mov	lr, r3
 800f952:	4770      	bx	lr
