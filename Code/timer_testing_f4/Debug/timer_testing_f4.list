
timer_testing_f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064a4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800663c  0800663c  0001663c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006694  08006694  0002011c  2**0
                  CONTENTS
  4 .ARM          00000008  08006694  08006694  00016694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800669c  0800669c  0002011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800669c  0800669c  0001669c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066a0  080066a0  000166a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  080066a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a20  2000011c  080067c0  0002011c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b3c  080067c0  00020b3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c902  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025bc  00000000  00000000  0002ca4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac8  00000000  00000000  0002f010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  0002fad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ca5  00000000  00000000  00030478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000debc  00000000  00000000  0004811d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086bda  00000000  00000000  00055fd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dcbb3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ac8  00000000  00000000  000dcc04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000011c 	.word	0x2000011c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006624 	.word	0x08006624

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000120 	.word	0x20000120
 80001d4:	08006624 	.word	0x08006624

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 f936 	bl	8000750 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f806 	bl	80004f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f86c 	bl	80005c4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004ec:	f005 fc40 	bl	8005d70 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <main+0x14>
	...

080004f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b094      	sub	sp, #80	; 0x50
 80004f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fa:	f107 0320 	add.w	r3, r7, #32
 80004fe:	2230      	movs	r2, #48	; 0x30
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f006 f886 	bl	8006614 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000508:	f107 030c 	add.w	r3, r7, #12
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000518:	2300      	movs	r3, #0
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	4b27      	ldr	r3, [pc, #156]	; (80005bc <SystemClock_Config+0xc8>)
 800051e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000520:	4a26      	ldr	r2, [pc, #152]	; (80005bc <SystemClock_Config+0xc8>)
 8000522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000526:	6413      	str	r3, [r2, #64]	; 0x40
 8000528:	4b24      	ldr	r3, [pc, #144]	; (80005bc <SystemClock_Config+0xc8>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000530:	60bb      	str	r3, [r7, #8]
 8000532:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000534:	2300      	movs	r3, #0
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	4b21      	ldr	r3, [pc, #132]	; (80005c0 <SystemClock_Config+0xcc>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a20      	ldr	r2, [pc, #128]	; (80005c0 <SystemClock_Config+0xcc>)
 800053e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000542:	6013      	str	r3, [r2, #0]
 8000544:	4b1e      	ldr	r3, [pc, #120]	; (80005c0 <SystemClock_Config+0xcc>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800054c:	607b      	str	r3, [r7, #4]
 800054e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000550:	2301      	movs	r3, #1
 8000552:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000554:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000558:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055a:	2302      	movs	r3, #2
 800055c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800055e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000562:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000564:	230f      	movs	r3, #15
 8000566:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000568:	2390      	movs	r3, #144	; 0x90
 800056a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800056c:	2304      	movs	r3, #4
 800056e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000570:	2305      	movs	r3, #5
 8000572:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000574:	f107 0320 	add.w	r3, r7, #32
 8000578:	4618      	mov	r0, r3
 800057a:	f001 fe7b 	bl	8002274 <HAL_RCC_OscConfig>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000584:	f000 f846 	bl	8000614 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000588:	230f      	movs	r3, #15
 800058a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058c:	2302      	movs	r3, #2
 800058e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000598:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800059e:	f107 030c 	add.w	r3, r7, #12
 80005a2:	2101      	movs	r1, #1
 80005a4:	4618      	mov	r0, r3
 80005a6:	f002 f8dd 	bl	8002764 <HAL_RCC_ClockConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005b0:	f000 f830 	bl	8000614 <Error_Handler>
  }
}
 80005b4:	bf00      	nop
 80005b6:	3750      	adds	r7, #80	; 0x50
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40023800 	.word	0x40023800
 80005c0:	40007000 	.word	0x40007000

080005c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	4b10      	ldr	r3, [pc, #64]	; (8000610 <MX_GPIO_Init+0x4c>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a0f      	ldr	r2, [pc, #60]	; (8000610 <MX_GPIO_Init+0x4c>)
 80005d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <MX_GPIO_Init+0x4c>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	603b      	str	r3, [r7, #0]
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <MX_GPIO_Init+0x4c>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a08      	ldr	r2, [pc, #32]	; (8000610 <MX_GPIO_Init+0x4c>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <MX_GPIO_Init+0x4c>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]

}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	40023800 	.word	0x40023800

08000614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000618:	b672      	cpsid	i
}
 800061a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800061c:	e7fe      	b.n	800061c <Error_Handler+0x8>
	...

08000620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	4b10      	ldr	r3, [pc, #64]	; (800066c <HAL_MspInit+0x4c>)
 800062c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800062e:	4a0f      	ldr	r2, [pc, #60]	; (800066c <HAL_MspInit+0x4c>)
 8000630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000634:	6453      	str	r3, [r2, #68]	; 0x44
 8000636:	4b0d      	ldr	r3, [pc, #52]	; (800066c <HAL_MspInit+0x4c>)
 8000638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800063a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	603b      	str	r3, [r7, #0]
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <HAL_MspInit+0x4c>)
 8000648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064a:	4a08      	ldr	r2, [pc, #32]	; (800066c <HAL_MspInit+0x4c>)
 800064c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000650:	6413      	str	r3, [r2, #64]	; 0x40
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <HAL_MspInit+0x4c>)
 8000654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065a:	603b      	str	r3, [r7, #0]
 800065c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800065e:	bf00      	nop
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800

08000670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000674:	e7fe      	b.n	8000674 <NMI_Handler+0x4>

08000676 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800067a:	e7fe      	b.n	800067a <HardFault_Handler+0x4>

0800067c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000680:	e7fe      	b.n	8000680 <MemManage_Handler+0x4>

08000682 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000686:	e7fe      	b.n	8000686 <BusFault_Handler+0x4>

08000688 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800068c:	e7fe      	b.n	800068c <UsageFault_Handler+0x4>

0800068e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr

0800069c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr

080006aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr

080006b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006bc:	f000 f89a 	bl	80007f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80006c8:	4802      	ldr	r0, [pc, #8]	; (80006d4 <OTG_FS_IRQHandler+0x10>)
 80006ca:	f000 fcbd 	bl	8001048 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	2000061c 	.word	0x2000061c

080006d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <SystemInit+0x20>)
 80006de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006e2:	4a05      	ldr	r2, [pc, #20]	; (80006f8 <SystemInit+0x20>)
 80006e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80006fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000734 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000700:	480d      	ldr	r0, [pc, #52]	; (8000738 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000702:	490e      	ldr	r1, [pc, #56]	; (800073c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000704:	4a0e      	ldr	r2, [pc, #56]	; (8000740 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000708:	e002      	b.n	8000710 <LoopCopyDataInit>

0800070a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800070a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800070c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800070e:	3304      	adds	r3, #4

08000710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000714:	d3f9      	bcc.n	800070a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000716:	4a0b      	ldr	r2, [pc, #44]	; (8000744 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000718:	4c0b      	ldr	r4, [pc, #44]	; (8000748 <LoopFillZerobss+0x26>)
  movs r3, #0
 800071a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800071c:	e001      	b.n	8000722 <LoopFillZerobss>

0800071e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800071e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000720:	3204      	adds	r2, #4

08000722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000724:	d3fb      	bcc.n	800071e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000726:	f7ff ffd7 	bl	80006d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800072a:	f005 ff4f 	bl	80065cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800072e:	f7ff fed5 	bl	80004dc <main>
  bx  lr    
 8000732:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000734:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800073c:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 8000740:	080066a4 	.word	0x080066a4
  ldr r2, =_sbss
 8000744:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 8000748:	20000b3c 	.word	0x20000b3c

0800074c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800074c:	e7fe      	b.n	800074c <ADC_IRQHandler>
	...

08000750 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000754:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <HAL_Init+0x40>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a0d      	ldr	r2, [pc, #52]	; (8000790 <HAL_Init+0x40>)
 800075a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800075e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000760:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <HAL_Init+0x40>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <HAL_Init+0x40>)
 8000766:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800076a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800076c:	4b08      	ldr	r3, [pc, #32]	; (8000790 <HAL_Init+0x40>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a07      	ldr	r2, [pc, #28]	; (8000790 <HAL_Init+0x40>)
 8000772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000776:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000778:	2003      	movs	r0, #3
 800077a:	f000 f94f 	bl	8000a1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800077e:	200f      	movs	r0, #15
 8000780:	f000 f808 	bl	8000794 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000784:	f7ff ff4c 	bl	8000620 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023c00 	.word	0x40023c00

08000794 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <HAL_InitTick+0x54>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <HAL_InitTick+0x58>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	4619      	mov	r1, r3
 80007a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 f967 	bl	8000a86 <HAL_SYSTICK_Config>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007be:	2301      	movs	r3, #1
 80007c0:	e00e      	b.n	80007e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b0f      	cmp	r3, #15
 80007c6:	d80a      	bhi.n	80007de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007c8:	2200      	movs	r2, #0
 80007ca:	6879      	ldr	r1, [r7, #4]
 80007cc:	f04f 30ff 	mov.w	r0, #4294967295
 80007d0:	f000 f92f 	bl	8000a32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007d4:	4a06      	ldr	r2, [pc, #24]	; (80007f0 <HAL_InitTick+0x5c>)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007da:	2300      	movs	r3, #0
 80007dc:	e000      	b.n	80007e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000000 	.word	0x20000000
 80007ec:	20000008 	.word	0x20000008
 80007f0:	20000004 	.word	0x20000004

080007f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <HAL_IncTick+0x20>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	461a      	mov	r2, r3
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <HAL_IncTick+0x24>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4413      	add	r3, r2
 8000804:	4a04      	ldr	r2, [pc, #16]	; (8000818 <HAL_IncTick+0x24>)
 8000806:	6013      	str	r3, [r2, #0]
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	20000008 	.word	0x20000008
 8000818:	20000138 	.word	0x20000138

0800081c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  return uwTick;
 8000820:	4b03      	ldr	r3, [pc, #12]	; (8000830 <HAL_GetTick+0x14>)
 8000822:	681b      	ldr	r3, [r3, #0]
}
 8000824:	4618      	mov	r0, r3
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	20000138 	.word	0x20000138

08000834 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800083c:	f7ff ffee 	bl	800081c <HAL_GetTick>
 8000840:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800084c:	d005      	beq.n	800085a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800084e:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <HAL_Delay+0x44>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	461a      	mov	r2, r3
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	4413      	add	r3, r2
 8000858:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800085a:	bf00      	nop
 800085c:	f7ff ffde 	bl	800081c <HAL_GetTick>
 8000860:	4602      	mov	r2, r0
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	429a      	cmp	r2, r3
 800086a:	d8f7      	bhi.n	800085c <HAL_Delay+0x28>
  {
  }
}
 800086c:	bf00      	nop
 800086e:	bf00      	nop
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000008 	.word	0x20000008

0800087c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	f003 0307 	and.w	r3, r3, #7
 800088a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <__NVIC_SetPriorityGrouping+0x44>)
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000892:	68ba      	ldr	r2, [r7, #8]
 8000894:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000898:	4013      	ands	r3, r2
 800089a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ae:	4a04      	ldr	r2, [pc, #16]	; (80008c0 <__NVIC_SetPriorityGrouping+0x44>)
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	60d3      	str	r3, [r2, #12]
}
 80008b4:	bf00      	nop
 80008b6:	3714      	adds	r7, #20
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	e000ed00 	.word	0xe000ed00

080008c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008c8:	4b04      	ldr	r3, [pc, #16]	; (80008dc <__NVIC_GetPriorityGrouping+0x18>)
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	0a1b      	lsrs	r3, r3, #8
 80008ce:	f003 0307 	and.w	r3, r3, #7
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	db0b      	blt.n	800090a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	f003 021f 	and.w	r2, r3, #31
 80008f8:	4907      	ldr	r1, [pc, #28]	; (8000918 <__NVIC_EnableIRQ+0x38>)
 80008fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fe:	095b      	lsrs	r3, r3, #5
 8000900:	2001      	movs	r0, #1
 8000902:	fa00 f202 	lsl.w	r2, r0, r2
 8000906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800090a:	bf00      	nop
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	e000e100 	.word	0xe000e100

0800091c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	6039      	str	r1, [r7, #0]
 8000926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092c:	2b00      	cmp	r3, #0
 800092e:	db0a      	blt.n	8000946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	b2da      	uxtb	r2, r3
 8000934:	490c      	ldr	r1, [pc, #48]	; (8000968 <__NVIC_SetPriority+0x4c>)
 8000936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093a:	0112      	lsls	r2, r2, #4
 800093c:	b2d2      	uxtb	r2, r2
 800093e:	440b      	add	r3, r1
 8000940:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000944:	e00a      	b.n	800095c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	b2da      	uxtb	r2, r3
 800094a:	4908      	ldr	r1, [pc, #32]	; (800096c <__NVIC_SetPriority+0x50>)
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	f003 030f 	and.w	r3, r3, #15
 8000952:	3b04      	subs	r3, #4
 8000954:	0112      	lsls	r2, r2, #4
 8000956:	b2d2      	uxtb	r2, r2
 8000958:	440b      	add	r3, r1
 800095a:	761a      	strb	r2, [r3, #24]
}
 800095c:	bf00      	nop
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	e000e100 	.word	0xe000e100
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000970:	b480      	push	{r7}
 8000972:	b089      	sub	sp, #36	; 0x24
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	f003 0307 	and.w	r3, r3, #7
 8000982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	f1c3 0307 	rsb	r3, r3, #7
 800098a:	2b04      	cmp	r3, #4
 800098c:	bf28      	it	cs
 800098e:	2304      	movcs	r3, #4
 8000990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	3304      	adds	r3, #4
 8000996:	2b06      	cmp	r3, #6
 8000998:	d902      	bls.n	80009a0 <NVIC_EncodePriority+0x30>
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	3b03      	subs	r3, #3
 800099e:	e000      	b.n	80009a2 <NVIC_EncodePriority+0x32>
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a4:	f04f 32ff 	mov.w	r2, #4294967295
 80009a8:	69bb      	ldr	r3, [r7, #24]
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	43da      	mvns	r2, r3
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	401a      	ands	r2, r3
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009b8:	f04f 31ff 	mov.w	r1, #4294967295
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	fa01 f303 	lsl.w	r3, r1, r3
 80009c2:	43d9      	mvns	r1, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c8:	4313      	orrs	r3, r2
         );
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3724      	adds	r7, #36	; 0x24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
	...

080009d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009e8:	d301      	bcc.n	80009ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ea:	2301      	movs	r3, #1
 80009ec:	e00f      	b.n	8000a0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ee:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <SysTick_Config+0x40>)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3b01      	subs	r3, #1
 80009f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009f6:	210f      	movs	r1, #15
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295
 80009fc:	f7ff ff8e 	bl	800091c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <SysTick_Config+0x40>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a06:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <SysTick_Config+0x40>)
 8000a08:	2207      	movs	r2, #7
 8000a0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	e000e010 	.word	0xe000e010

08000a1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f7ff ff29 	bl	800087c <__NVIC_SetPriorityGrouping>
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b086      	sub	sp, #24
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	4603      	mov	r3, r0
 8000a3a:	60b9      	str	r1, [r7, #8]
 8000a3c:	607a      	str	r2, [r7, #4]
 8000a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a44:	f7ff ff3e 	bl	80008c4 <__NVIC_GetPriorityGrouping>
 8000a48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	68b9      	ldr	r1, [r7, #8]
 8000a4e:	6978      	ldr	r0, [r7, #20]
 8000a50:	f7ff ff8e 	bl	8000970 <NVIC_EncodePriority>
 8000a54:	4602      	mov	r2, r0
 8000a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ff5d 	bl	800091c <__NVIC_SetPriority>
}
 8000a62:	bf00      	nop
 8000a64:	3718      	adds	r7, #24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b082      	sub	sp, #8
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	4603      	mov	r3, r0
 8000a72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff ff31 	bl	80008e0 <__NVIC_EnableIRQ>
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b082      	sub	sp, #8
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f7ff ffa2 	bl	80009d8 <SysTick_Config>
 8000a94:	4603      	mov	r3, r0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b089      	sub	sp, #36	; 0x24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
 8000aba:	e159      	b.n	8000d70 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000abc:	2201      	movs	r2, #1
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	697a      	ldr	r2, [r7, #20]
 8000acc:	4013      	ands	r3, r2
 8000ace:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ad0:	693a      	ldr	r2, [r7, #16]
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	f040 8148 	bne.w	8000d6a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f003 0303 	and.w	r3, r3, #3
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d005      	beq.n	8000af2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d130      	bne.n	8000b54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	2203      	movs	r2, #3
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	43db      	mvns	r3, r3
 8000b04:	69ba      	ldr	r2, [r7, #24]
 8000b06:	4013      	ands	r3, r2
 8000b08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	68da      	ldr	r2, [r3, #12]
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	69ba      	ldr	r2, [r7, #24]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	69ba      	ldr	r2, [r7, #24]
 8000b20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b28:	2201      	movs	r2, #1
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	43db      	mvns	r3, r3
 8000b32:	69ba      	ldr	r2, [r7, #24]
 8000b34:	4013      	ands	r3, r2
 8000b36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	091b      	lsrs	r3, r3, #4
 8000b3e:	f003 0201 	and.w	r2, r3, #1
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	69ba      	ldr	r2, [r7, #24]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	69ba      	ldr	r2, [r7, #24]
 8000b52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f003 0303 	and.w	r3, r3, #3
 8000b5c:	2b03      	cmp	r3, #3
 8000b5e:	d017      	beq.n	8000b90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	2203      	movs	r2, #3
 8000b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b70:	43db      	mvns	r3, r3
 8000b72:	69ba      	ldr	r2, [r7, #24]
 8000b74:	4013      	ands	r3, r2
 8000b76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	689a      	ldr	r2, [r3, #8]
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	69ba      	ldr	r2, [r7, #24]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f003 0303 	and.w	r3, r3, #3
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d123      	bne.n	8000be4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	08da      	lsrs	r2, r3, #3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	3208      	adds	r2, #8
 8000ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	f003 0307 	and.w	r3, r3, #7
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	220f      	movs	r2, #15
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	69ba      	ldr	r2, [r7, #24]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	691a      	ldr	r2, [r3, #16]
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	69ba      	ldr	r2, [r7, #24]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	08da      	lsrs	r2, r3, #3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	3208      	adds	r2, #8
 8000bde:	69b9      	ldr	r1, [r7, #24]
 8000be0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	2203      	movs	r2, #3
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	69ba      	ldr	r2, [r7, #24]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f003 0203 	and.w	r2, r3, #3
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	69ba      	ldr	r2, [r7, #24]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	f000 80a2 	beq.w	8000d6a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	4b57      	ldr	r3, [pc, #348]	; (8000d88 <HAL_GPIO_Init+0x2e8>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	4a56      	ldr	r2, [pc, #344]	; (8000d88 <HAL_GPIO_Init+0x2e8>)
 8000c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c34:	6453      	str	r3, [r2, #68]	; 0x44
 8000c36:	4b54      	ldr	r3, [pc, #336]	; (8000d88 <HAL_GPIO_Init+0x2e8>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c42:	4a52      	ldr	r2, [pc, #328]	; (8000d8c <HAL_GPIO_Init+0x2ec>)
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	089b      	lsrs	r3, r3, #2
 8000c48:	3302      	adds	r3, #2
 8000c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	f003 0303 	and.w	r3, r3, #3
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	220f      	movs	r2, #15
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	4013      	ands	r3, r2
 8000c64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a49      	ldr	r2, [pc, #292]	; (8000d90 <HAL_GPIO_Init+0x2f0>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d019      	beq.n	8000ca2 <HAL_GPIO_Init+0x202>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a48      	ldr	r2, [pc, #288]	; (8000d94 <HAL_GPIO_Init+0x2f4>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d013      	beq.n	8000c9e <HAL_GPIO_Init+0x1fe>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a47      	ldr	r2, [pc, #284]	; (8000d98 <HAL_GPIO_Init+0x2f8>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d00d      	beq.n	8000c9a <HAL_GPIO_Init+0x1fa>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a46      	ldr	r2, [pc, #280]	; (8000d9c <HAL_GPIO_Init+0x2fc>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d007      	beq.n	8000c96 <HAL_GPIO_Init+0x1f6>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a45      	ldr	r2, [pc, #276]	; (8000da0 <HAL_GPIO_Init+0x300>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d101      	bne.n	8000c92 <HAL_GPIO_Init+0x1f2>
 8000c8e:	2304      	movs	r3, #4
 8000c90:	e008      	b.n	8000ca4 <HAL_GPIO_Init+0x204>
 8000c92:	2307      	movs	r3, #7
 8000c94:	e006      	b.n	8000ca4 <HAL_GPIO_Init+0x204>
 8000c96:	2303      	movs	r3, #3
 8000c98:	e004      	b.n	8000ca4 <HAL_GPIO_Init+0x204>
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	e002      	b.n	8000ca4 <HAL_GPIO_Init+0x204>
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e000      	b.n	8000ca4 <HAL_GPIO_Init+0x204>
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	69fa      	ldr	r2, [r7, #28]
 8000ca6:	f002 0203 	and.w	r2, r2, #3
 8000caa:	0092      	lsls	r2, r2, #2
 8000cac:	4093      	lsls	r3, r2
 8000cae:	69ba      	ldr	r2, [r7, #24]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cb4:	4935      	ldr	r1, [pc, #212]	; (8000d8c <HAL_GPIO_Init+0x2ec>)
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	089b      	lsrs	r3, r3, #2
 8000cba:	3302      	adds	r3, #2
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cc2:	4b38      	ldr	r3, [pc, #224]	; (8000da4 <HAL_GPIO_Init+0x304>)
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d003      	beq.n	8000ce6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ce6:	4a2f      	ldr	r2, [pc, #188]	; (8000da4 <HAL_GPIO_Init+0x304>)
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cec:	4b2d      	ldr	r3, [pc, #180]	; (8000da4 <HAL_GPIO_Init+0x304>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d003      	beq.n	8000d10 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d10:	4a24      	ldr	r2, [pc, #144]	; (8000da4 <HAL_GPIO_Init+0x304>)
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d16:	4b23      	ldr	r3, [pc, #140]	; (8000da4 <HAL_GPIO_Init+0x304>)
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4013      	ands	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d003      	beq.n	8000d3a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d3a:	4a1a      	ldr	r2, [pc, #104]	; (8000da4 <HAL_GPIO_Init+0x304>)
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d40:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <HAL_GPIO_Init+0x304>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d003      	beq.n	8000d64 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d64:	4a0f      	ldr	r2, [pc, #60]	; (8000da4 <HAL_GPIO_Init+0x304>)
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	61fb      	str	r3, [r7, #28]
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	2b0f      	cmp	r3, #15
 8000d74:	f67f aea2 	bls.w	8000abc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000d78:	bf00      	nop
 8000d7a:	bf00      	nop
 8000d7c:	3724      	adds	r7, #36	; 0x24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40013800 	.word	0x40013800
 8000d90:	40020000 	.word	0x40020000
 8000d94:	40020400 	.word	0x40020400
 8000d98:	40020800 	.word	0x40020800
 8000d9c:	40020c00 	.word	0x40020c00
 8000da0:	40021000 	.word	0x40021000
 8000da4:	40013c00 	.word	0x40013c00

08000da8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000daa:	b08f      	sub	sp, #60	; 0x3c
 8000dac:	af0a      	add	r7, sp, #40	; 0x28
 8000dae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d101      	bne.n	8000dba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e10f      	b.n	8000fda <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d106      	bne.n	8000dda <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f005 f901 	bl	8005fdc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2203      	movs	r2, #3
 8000dde:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d102      	bne.n	8000df4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f001 ff80 	bl	8002cfe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	687e      	ldr	r6, [r7, #4]
 8000e06:	466d      	mov	r5, sp
 8000e08:	f106 0410 	add.w	r4, r6, #16
 8000e0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e18:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e1c:	1d33      	adds	r3, r6, #4
 8000e1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e20:	6838      	ldr	r0, [r7, #0]
 8000e22:	f001 fe57 	bl	8002ad4 <USB_CoreInit>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d005      	beq.n	8000e38 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2202      	movs	r2, #2
 8000e30:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000e34:	2301      	movs	r3, #1
 8000e36:	e0d0      	b.n	8000fda <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f001 ff6e 	bl	8002d20 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e44:	2300      	movs	r3, #0
 8000e46:	73fb      	strb	r3, [r7, #15]
 8000e48:	e04a      	b.n	8000ee0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e4a:	7bfa      	ldrb	r2, [r7, #15]
 8000e4c:	6879      	ldr	r1, [r7, #4]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	4413      	add	r3, r2
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	440b      	add	r3, r1
 8000e58:	333d      	adds	r3, #61	; 0x3d
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e5e:	7bfa      	ldrb	r2, [r7, #15]
 8000e60:	6879      	ldr	r1, [r7, #4]
 8000e62:	4613      	mov	r3, r2
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	4413      	add	r3, r2
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	440b      	add	r3, r1
 8000e6c:	333c      	adds	r3, #60	; 0x3c
 8000e6e:	7bfa      	ldrb	r2, [r7, #15]
 8000e70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e72:	7bfa      	ldrb	r2, [r7, #15]
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	b298      	uxth	r0, r3
 8000e78:	6879      	ldr	r1, [r7, #4]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	4413      	add	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	440b      	add	r3, r1
 8000e84:	3344      	adds	r3, #68	; 0x44
 8000e86:	4602      	mov	r2, r0
 8000e88:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e8a:	7bfa      	ldrb	r2, [r7, #15]
 8000e8c:	6879      	ldr	r1, [r7, #4]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	4413      	add	r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	440b      	add	r3, r1
 8000e98:	3340      	adds	r3, #64	; 0x40
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000e9e:	7bfa      	ldrb	r2, [r7, #15]
 8000ea0:	6879      	ldr	r1, [r7, #4]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	4413      	add	r3, r2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	440b      	add	r3, r1
 8000eac:	3348      	adds	r3, #72	; 0x48
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000eb2:	7bfa      	ldrb	r2, [r7, #15]
 8000eb4:	6879      	ldr	r1, [r7, #4]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	4413      	add	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	334c      	adds	r3, #76	; 0x4c
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ec6:	7bfa      	ldrb	r2, [r7, #15]
 8000ec8:	6879      	ldr	r1, [r7, #4]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	4413      	add	r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	3354      	adds	r3, #84	; 0x54
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	3301      	adds	r3, #1
 8000ede:	73fb      	strb	r3, [r7, #15]
 8000ee0:	7bfa      	ldrb	r2, [r7, #15]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d3af      	bcc.n	8000e4a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eea:	2300      	movs	r3, #0
 8000eec:	73fb      	strb	r3, [r7, #15]
 8000eee:	e044      	b.n	8000f7a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000ef0:	7bfa      	ldrb	r2, [r7, #15]
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	00db      	lsls	r3, r3, #3
 8000ef8:	4413      	add	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	440b      	add	r3, r1
 8000efe:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f06:	7bfa      	ldrb	r2, [r7, #15]
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	4413      	add	r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	440b      	add	r3, r1
 8000f14:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000f18:	7bfa      	ldrb	r2, [r7, #15]
 8000f1a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f1c:	7bfa      	ldrb	r2, [r7, #15]
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	4613      	mov	r3, r2
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	4413      	add	r3, r2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	440b      	add	r3, r1
 8000f2a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f32:	7bfa      	ldrb	r2, [r7, #15]
 8000f34:	6879      	ldr	r1, [r7, #4]
 8000f36:	4613      	mov	r3, r2
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	4413      	add	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	440b      	add	r3, r1
 8000f40:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f48:	7bfa      	ldrb	r2, [r7, #15]
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	4413      	add	r3, r2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	440b      	add	r3, r1
 8000f56:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f5e:	7bfa      	ldrb	r2, [r7, #15]
 8000f60:	6879      	ldr	r1, [r7, #4]
 8000f62:	4613      	mov	r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	4413      	add	r3, r2
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	3301      	adds	r3, #1
 8000f78:	73fb      	strb	r3, [r7, #15]
 8000f7a:	7bfa      	ldrb	r2, [r7, #15]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d3b5      	bcc.n	8000ef0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	603b      	str	r3, [r7, #0]
 8000f8a:	687e      	ldr	r6, [r7, #4]
 8000f8c:	466d      	mov	r5, sp
 8000f8e:	f106 0410 	add.w	r4, r6, #16
 8000f92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f9e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fa2:	1d33      	adds	r3, r6, #4
 8000fa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fa6:	6838      	ldr	r0, [r7, #0]
 8000fa8:	f001 ff06 	bl	8002db8 <USB_DevInit>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d005      	beq.n	8000fbe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e00d      	b.n	8000fda <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f003 f855 	bl	8004082 <USB_DevDisconnect>

  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000fe2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b084      	sub	sp, #16
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d101      	bne.n	8000ffe <HAL_PCD_Start+0x1c>
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	e020      	b.n	8001040 <HAL_PCD_Start+0x5e>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2201      	movs	r2, #1
 8001002:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800100a:	2b01      	cmp	r3, #1
 800100c:	d109      	bne.n	8001022 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001012:	2b01      	cmp	r3, #1
 8001014:	d005      	beq.n	8001022 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800101a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f001 fe58 	bl	8002cdc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f003 f805 	bl	8004040 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b08d      	sub	sp, #52	; 0x34
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001056:	6a3b      	ldr	r3, [r7, #32]
 8001058:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4618      	mov	r0, r3
 8001060:	f003 f8c3 	bl	80041ea <USB_GetMode>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	f040 848a 	bne.w	8001980 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4618      	mov	r0, r3
 8001072:	f003 f827 	bl	80040c4 <USB_ReadInterrupts>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	f000 8480 	beq.w	800197e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	0a1b      	lsrs	r3, r3, #8
 8001088:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f003 f814 	bl	80040c4 <USB_ReadInterrupts>
 800109c:	4603      	mov	r3, r0
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d107      	bne.n	80010b6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	695a      	ldr	r2, [r3, #20]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f002 0202 	and.w	r2, r2, #2
 80010b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f003 f802 	bl	80040c4 <USB_ReadInterrupts>
 80010c0:	4603      	mov	r3, r0
 80010c2:	f003 0310 	and.w	r3, r3, #16
 80010c6:	2b10      	cmp	r3, #16
 80010c8:	d161      	bne.n	800118e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	699a      	ldr	r2, [r3, #24]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f022 0210 	bic.w	r2, r2, #16
 80010d8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80010da:	6a3b      	ldr	r3, [r7, #32]
 80010dc:	6a1b      	ldr	r3, [r3, #32]
 80010de:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	f003 020f 	and.w	r2, r3, #15
 80010e6:	4613      	mov	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	4413      	add	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	3304      	adds	r3, #4
 80010f8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	0c5b      	lsrs	r3, r3, #17
 80010fe:	f003 030f 	and.w	r3, r3, #15
 8001102:	2b02      	cmp	r3, #2
 8001104:	d124      	bne.n	8001150 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800110c:	4013      	ands	r3, r2
 800110e:	2b00      	cmp	r3, #0
 8001110:	d035      	beq.n	800117e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	091b      	lsrs	r3, r3, #4
 800111a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800111c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001120:	b29b      	uxth	r3, r3
 8001122:	461a      	mov	r2, r3
 8001124:	6a38      	ldr	r0, [r7, #32]
 8001126:	f002 fe39 	bl	8003d9c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	691a      	ldr	r2, [r3, #16]
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	091b      	lsrs	r3, r3, #4
 8001132:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001136:	441a      	add	r2, r3
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	6a1a      	ldr	r2, [r3, #32]
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	091b      	lsrs	r3, r3, #4
 8001144:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001148:	441a      	add	r2, r3
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	621a      	str	r2, [r3, #32]
 800114e:	e016      	b.n	800117e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	0c5b      	lsrs	r3, r3, #17
 8001154:	f003 030f 	and.w	r3, r3, #15
 8001158:	2b06      	cmp	r3, #6
 800115a:	d110      	bne.n	800117e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001162:	2208      	movs	r2, #8
 8001164:	4619      	mov	r1, r3
 8001166:	6a38      	ldr	r0, [r7, #32]
 8001168:	f002 fe18 	bl	8003d9c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	6a1a      	ldr	r2, [r3, #32]
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	091b      	lsrs	r3, r3, #4
 8001174:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001178:	441a      	add	r2, r3
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	699a      	ldr	r2, [r3, #24]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f042 0210 	orr.w	r2, r2, #16
 800118c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f002 ff96 	bl	80040c4 <USB_ReadInterrupts>
 8001198:	4603      	mov	r3, r0
 800119a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800119e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80011a2:	f040 80a7 	bne.w	80012f4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f002 ff9b 	bl	80040ea <USB_ReadDevAllOutEpInterrupt>
 80011b4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80011b6:	e099      	b.n	80012ec <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80011b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f000 808e 	beq.w	80012e0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	4611      	mov	r1, r2
 80011ce:	4618      	mov	r0, r3
 80011d0:	f002 ffbf 	bl	8004152 <USB_ReadDevOutEPInterrupt>
 80011d4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d00c      	beq.n	80011fa <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80011e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e2:	015a      	lsls	r2, r3, #5
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	4413      	add	r3, r2
 80011e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80011ec:	461a      	mov	r2, r3
 80011ee:	2301      	movs	r3, #1
 80011f0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80011f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 feab 	bl	8001f50 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	f003 0308 	and.w	r3, r3, #8
 8001200:	2b00      	cmp	r3, #0
 8001202:	d00c      	beq.n	800121e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001206:	015a      	lsls	r2, r3, #5
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	4413      	add	r3, r2
 800120c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001210:	461a      	mov	r2, r3
 8001212:	2308      	movs	r3, #8
 8001214:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001216:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f000 ff81 	bl	8002120 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	f003 0310 	and.w	r3, r3, #16
 8001224:	2b00      	cmp	r3, #0
 8001226:	d008      	beq.n	800123a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122a:	015a      	lsls	r2, r3, #5
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	4413      	add	r3, r2
 8001230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001234:	461a      	mov	r2, r3
 8001236:	2310      	movs	r3, #16
 8001238:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d030      	beq.n	80012a6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001244:	6a3b      	ldr	r3, [r7, #32]
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800124c:	2b80      	cmp	r3, #128	; 0x80
 800124e:	d109      	bne.n	8001264 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	69fa      	ldr	r2, [r7, #28]
 800125a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800125e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001262:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001266:	4613      	mov	r3, r2
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	4413      	add	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	4413      	add	r3, r2
 8001276:	3304      	adds	r3, #4
 8001278:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	78db      	ldrb	r3, [r3, #3]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d108      	bne.n	8001294 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	2200      	movs	r2, #0
 8001286:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	b2db      	uxtb	r3, r3
 800128c:	4619      	mov	r1, r3
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f004 ffa0 	bl	80061d4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001296:	015a      	lsls	r2, r3, #5
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	4413      	add	r3, r2
 800129c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012a0:	461a      	mov	r2, r3
 80012a2:	2302      	movs	r3, #2
 80012a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	f003 0320 	and.w	r3, r3, #32
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d008      	beq.n	80012c2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80012b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b2:	015a      	lsls	r2, r3, #5
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	4413      	add	r3, r2
 80012b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012bc:	461a      	mov	r2, r3
 80012be:	2320      	movs	r3, #32
 80012c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d009      	beq.n	80012e0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ce:	015a      	lsls	r2, r3, #5
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	4413      	add	r3, r2
 80012d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012d8:	461a      	mov	r2, r3
 80012da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012de:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80012e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e2:	3301      	adds	r3, #1
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80012e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e8:	085b      	lsrs	r3, r3, #1
 80012ea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80012ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f47f af62 	bne.w	80011b8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f002 fee3 	bl	80040c4 <USB_ReadInterrupts>
 80012fe:	4603      	mov	r3, r0
 8001300:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001304:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001308:	f040 80db 	bne.w	80014c2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f002 ff04 	bl	800411e <USB_ReadDevAllInEpInterrupt>
 8001316:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001318:	2300      	movs	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800131c:	e0cd      	b.n	80014ba <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800131e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	2b00      	cmp	r3, #0
 8001326:	f000 80c2 	beq.w	80014ae <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	4611      	mov	r1, r2
 8001334:	4618      	mov	r0, r3
 8001336:	f002 ff2a 	bl	800418e <USB_ReadDevInEPInterrupt>
 800133a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	2b00      	cmp	r3, #0
 8001344:	d057      	beq.n	80013f6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001348:	f003 030f 	and.w	r3, r3, #15
 800134c:	2201      	movs	r2, #1
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800135a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	43db      	mvns	r3, r3
 8001360:	69f9      	ldr	r1, [r7, #28]
 8001362:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001366:	4013      	ands	r3, r2
 8001368:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	015a      	lsls	r2, r3, #5
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	4413      	add	r3, r2
 8001372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001376:	461a      	mov	r2, r3
 8001378:	2301      	movs	r3, #1
 800137a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d132      	bne.n	80013ea <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001384:	6879      	ldr	r1, [r7, #4]
 8001386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001388:	4613      	mov	r3, r2
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	4413      	add	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	440b      	add	r3, r1
 8001392:	334c      	adds	r3, #76	; 0x4c
 8001394:	6819      	ldr	r1, [r3, #0]
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800139a:	4613      	mov	r3, r2
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	4413      	add	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4403      	add	r3, r0
 80013a4:	3348      	adds	r3, #72	; 0x48
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4419      	add	r1, r3
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ae:	4613      	mov	r3, r2
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	4413      	add	r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4403      	add	r3, r0
 80013b8:	334c      	adds	r3, #76	; 0x4c
 80013ba:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80013bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d113      	bne.n	80013ea <HAL_PCD_IRQHandler+0x3a2>
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013c6:	4613      	mov	r3, r2
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	4413      	add	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	440b      	add	r3, r1
 80013d0:	3354      	adds	r3, #84	; 0x54
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d108      	bne.n	80013ea <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6818      	ldr	r0, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80013e2:	461a      	mov	r2, r3
 80013e4:	2101      	movs	r1, #1
 80013e6:	f002 ff31 	bl	800424c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	4619      	mov	r1, r3
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f004 fe74 	bl	80060de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	f003 0308 	and.w	r3, r3, #8
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d008      	beq.n	8001412 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001402:	015a      	lsls	r2, r3, #5
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	4413      	add	r3, r2
 8001408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800140c:	461a      	mov	r2, r3
 800140e:	2308      	movs	r3, #8
 8001410:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	f003 0310 	and.w	r3, r3, #16
 8001418:	2b00      	cmp	r3, #0
 800141a:	d008      	beq.n	800142e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141e:	015a      	lsls	r2, r3, #5
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	4413      	add	r3, r2
 8001424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001428:	461a      	mov	r2, r3
 800142a:	2310      	movs	r3, #16
 800142c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001434:	2b00      	cmp	r3, #0
 8001436:	d008      	beq.n	800144a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143a:	015a      	lsls	r2, r3, #5
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	4413      	add	r3, r2
 8001440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001444:	461a      	mov	r2, r3
 8001446:	2340      	movs	r3, #64	; 0x40
 8001448:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d023      	beq.n	800149c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001454:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001456:	6a38      	ldr	r0, [r7, #32]
 8001458:	f001 fe12 	bl	8003080 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800145c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800145e:	4613      	mov	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	4413      	add	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	3338      	adds	r3, #56	; 0x38
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	4413      	add	r3, r2
 800146c:	3304      	adds	r3, #4
 800146e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	78db      	ldrb	r3, [r3, #3]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d108      	bne.n	800148a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	2200      	movs	r2, #0
 800147c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	b2db      	uxtb	r3, r3
 8001482:	4619      	mov	r1, r3
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f004 feb7 	bl	80061f8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	015a      	lsls	r2, r3, #5
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	4413      	add	r3, r2
 8001492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001496:	461a      	mov	r2, r3
 8001498:	2302      	movs	r3, #2
 800149a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80014a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f000 fcc3 	bl	8001e34 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	3301      	adds	r3, #1
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80014b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b6:	085b      	lsrs	r3, r3, #1
 80014b8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80014ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f47f af2e 	bne.w	800131e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f002 fdfc 	bl	80040c4 <USB_ReadInterrupts>
 80014cc:	4603      	mov	r3, r0
 80014ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80014d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014d6:	d122      	bne.n	800151e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	69fa      	ldr	r2, [r7, #28]
 80014e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014e6:	f023 0301 	bic.w	r3, r3, #1
 80014ea:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d108      	bne.n	8001508 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80014fe:	2100      	movs	r1, #0
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 feab 	bl	800225c <HAL_PCDEx_LPM_Callback>
 8001506:	e002      	b.n	800150e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f004 fe55 	bl	80061b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	695a      	ldr	r2, [r3, #20]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800151c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f002 fdce 	bl	80040c4 <USB_ReadInterrupts>
 8001528:	4603      	mov	r3, r0
 800152a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800152e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001532:	d112      	bne.n	800155a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	2b01      	cmp	r3, #1
 8001542:	d102      	bne.n	800154a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f004 fe11 	bl	800616c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	695a      	ldr	r2, [r3, #20]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001558:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f002 fdb0 	bl	80040c4 <USB_ReadInterrupts>
 8001564:	4603      	mov	r3, r0
 8001566:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800156a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800156e:	f040 80b7 	bne.w	80016e0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	69fa      	ldr	r2, [r7, #28]
 800157c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001580:	f023 0301 	bic.w	r3, r3, #1
 8001584:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2110      	movs	r1, #16
 800158c:	4618      	mov	r0, r3
 800158e:	f001 fd77 	bl	8003080 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001592:	2300      	movs	r3, #0
 8001594:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001596:	e046      	b.n	8001626 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800159a:	015a      	lsls	r2, r3, #5
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	4413      	add	r3, r2
 80015a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015a4:	461a      	mov	r2, r3
 80015a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80015aa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80015ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ae:	015a      	lsls	r2, r3, #5
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	4413      	add	r3, r2
 80015b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015bc:	0151      	lsls	r1, r2, #5
 80015be:	69fa      	ldr	r2, [r7, #28]
 80015c0:	440a      	add	r2, r1
 80015c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80015c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80015ca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80015cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ce:	015a      	lsls	r2, r3, #5
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	4413      	add	r3, r2
 80015d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015d8:	461a      	mov	r2, r3
 80015da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80015de:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80015e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e2:	015a      	lsls	r2, r3, #5
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	4413      	add	r3, r2
 80015e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015f0:	0151      	lsls	r1, r2, #5
 80015f2:	69fa      	ldr	r2, [r7, #28]
 80015f4:	440a      	add	r2, r1
 80015f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80015fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80015fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001602:	015a      	lsls	r2, r3, #5
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	4413      	add	r3, r2
 8001608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001610:	0151      	lsls	r1, r2, #5
 8001612:	69fa      	ldr	r2, [r7, #28]
 8001614:	440a      	add	r2, r1
 8001616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800161a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800161e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001622:	3301      	adds	r3, #1
 8001624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800162c:	429a      	cmp	r2, r3
 800162e:	d3b3      	bcc.n	8001598 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001636:	69db      	ldr	r3, [r3, #28]
 8001638:	69fa      	ldr	r2, [r7, #28]
 800163a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800163e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001642:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001648:	2b00      	cmp	r3, #0
 800164a:	d016      	beq.n	800167a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001656:	69fa      	ldr	r2, [r7, #28]
 8001658:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800165c:	f043 030b 	orr.w	r3, r3, #11
 8001660:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800166a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166c:	69fa      	ldr	r2, [r7, #28]
 800166e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001672:	f043 030b 	orr.w	r3, r3, #11
 8001676:	6453      	str	r3, [r2, #68]	; 0x44
 8001678:	e015      	b.n	80016a6 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	69fa      	ldr	r2, [r7, #28]
 8001684:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001688:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800168c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001690:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	69fa      	ldr	r2, [r7, #28]
 800169c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016a0:	f043 030b 	orr.w	r3, r3, #11
 80016a4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	69fa      	ldr	r2, [r7, #28]
 80016b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016b4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80016b8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6818      	ldr	r0, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80016ca:	461a      	mov	r2, r3
 80016cc:	f002 fdbe 	bl	800424c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	695a      	ldr	r2, [r3, #20]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80016de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f002 fced 	bl	80040c4 <USB_ReadInterrupts>
 80016ea:	4603      	mov	r3, r0
 80016ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016f4:	d124      	bne.n	8001740 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f002 fd83 	bl	8004206 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f001 fd38 	bl	800317a <USB_GetDevSpeed>
 800170a:	4603      	mov	r3, r0
 800170c:	461a      	mov	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681c      	ldr	r4, [r3, #0]
 8001716:	f001 f9d1 	bl	8002abc <HAL_RCC_GetHCLKFreq>
 800171a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001720:	b2db      	uxtb	r3, r3
 8001722:	461a      	mov	r2, r3
 8001724:	4620      	mov	r0, r4
 8001726:	f001 fa37 	bl	8002b98 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f004 fcff 	bl	800612e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	695a      	ldr	r2, [r3, #20]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800173e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f002 fcbd 	bl	80040c4 <USB_ReadInterrupts>
 800174a:	4603      	mov	r3, r0
 800174c:	f003 0308 	and.w	r3, r3, #8
 8001750:	2b08      	cmp	r3, #8
 8001752:	d10a      	bne.n	800176a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f004 fcdc 	bl	8006112 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	695a      	ldr	r2, [r3, #20]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f002 0208 	and.w	r2, r2, #8
 8001768:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f002 fca8 	bl	80040c4 <USB_ReadInterrupts>
 8001774:	4603      	mov	r3, r0
 8001776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800177a:	2b80      	cmp	r3, #128	; 0x80
 800177c:	d122      	bne.n	80017c4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800177e:	6a3b      	ldr	r3, [r7, #32]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001786:	6a3b      	ldr	r3, [r7, #32]
 8001788:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800178a:	2301      	movs	r3, #1
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
 800178e:	e014      	b.n	80017ba <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001790:	6879      	ldr	r1, [r7, #4]
 8001792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001794:	4613      	mov	r3, r2
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	4413      	add	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	440b      	add	r3, r1
 800179e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d105      	bne.n	80017b4 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	4619      	mov	r1, r3
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 fb0f 	bl	8001dd2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	3301      	adds	r3, #1
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d3e5      	bcc.n	8001790 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f002 fc7b 	bl	80040c4 <USB_ReadInterrupts>
 80017ce:	4603      	mov	r3, r0
 80017d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017d8:	d13b      	bne.n	8001852 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017da:	2301      	movs	r3, #1
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
 80017de:	e02b      	b.n	8001838 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	015a      	lsls	r2, r3, #5
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	4413      	add	r3, r2
 80017e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80017f0:	6879      	ldr	r1, [r7, #4]
 80017f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017f4:	4613      	mov	r3, r2
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	4413      	add	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	440b      	add	r3, r1
 80017fe:	3340      	adds	r3, #64	; 0x40
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d115      	bne.n	8001832 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001806:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001808:	2b00      	cmp	r3, #0
 800180a:	da12      	bge.n	8001832 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001810:	4613      	mov	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	4413      	add	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	333f      	adds	r3, #63	; 0x3f
 800181c:	2201      	movs	r2, #1
 800181e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	b2db      	uxtb	r3, r3
 8001824:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001828:	b2db      	uxtb	r3, r3
 800182a:	4619      	mov	r1, r3
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f000 fad0 	bl	8001dd2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	3301      	adds	r3, #1
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800183e:	429a      	cmp	r2, r3
 8001840:	d3ce      	bcc.n	80017e0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	695a      	ldr	r2, [r3, #20]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001850:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f002 fc34 	bl	80040c4 <USB_ReadInterrupts>
 800185c:	4603      	mov	r3, r0
 800185e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001862:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001866:	d155      	bne.n	8001914 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001868:	2301      	movs	r3, #1
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
 800186c:	e045      	b.n	80018fa <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	015a      	lsls	r2, r3, #5
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	4413      	add	r3, r2
 8001876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001882:	4613      	mov	r3, r2
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	4413      	add	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	440b      	add	r3, r1
 800188c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d12e      	bne.n	80018f4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001896:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001898:	2b00      	cmp	r3, #0
 800189a:	da2b      	bge.n	80018f4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80018a8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d121      	bne.n	80018f4 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b4:	4613      	mov	r3, r2
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	4413      	add	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	440b      	add	r3, r1
 80018be:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80018c6:	6a3b      	ldr	r3, [r7, #32]
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80018ce:	6a3b      	ldr	r3, [r7, #32]
 80018d0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80018d2:	6a3b      	ldr	r3, [r7, #32]
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10a      	bne.n	80018f4 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	69fa      	ldr	r2, [r7, #28]
 80018e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018f0:	6053      	str	r3, [r2, #4]
            break;
 80018f2:	e007      	b.n	8001904 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	3301      	adds	r3, #1
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001900:	429a      	cmp	r2, r3
 8001902:	d3b4      	bcc.n	800186e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	695a      	ldr	r2, [r3, #20]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001912:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f002 fbd3 	bl	80040c4 <USB_ReadInterrupts>
 800191e:	4603      	mov	r3, r0
 8001920:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001928:	d10a      	bne.n	8001940 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f004 fc76 	bl	800621c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	695a      	ldr	r2, [r3, #20]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800193e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f002 fbbd 	bl	80040c4 <USB_ReadInterrupts>
 800194a:	4603      	mov	r3, r0
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b04      	cmp	r3, #4
 8001952:	d115      	bne.n	8001980 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	2b00      	cmp	r3, #0
 8001964:	d002      	beq.n	800196c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f004 fc66 	bl	8006238 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6859      	ldr	r1, [r3, #4]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	430a      	orrs	r2, r1
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	e000      	b.n	8001980 <HAL_PCD_IRQHandler+0x938>
      return;
 800197e:	bf00      	nop
    }
  }
}
 8001980:	3734      	adds	r7, #52	; 0x34
 8001982:	46bd      	mov	sp, r7
 8001984:	bd90      	pop	{r4, r7, pc}

08001986 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b082      	sub	sp, #8
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
 800198e:	460b      	mov	r3, r1
 8001990:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001998:	2b01      	cmp	r3, #1
 800199a:	d101      	bne.n	80019a0 <HAL_PCD_SetAddress+0x1a>
 800199c:	2302      	movs	r3, #2
 800199e:	e013      	b.n	80019c8 <HAL_PCD_SetAddress+0x42>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	78fa      	ldrb	r2, [r7, #3]
 80019ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	78fa      	ldrb	r2, [r7, #3]
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f002 fb1b 	bl	8003ff4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	4608      	mov	r0, r1
 80019da:	4611      	mov	r1, r2
 80019dc:	461a      	mov	r2, r3
 80019de:	4603      	mov	r3, r0
 80019e0:	70fb      	strb	r3, [r7, #3]
 80019e2:	460b      	mov	r3, r1
 80019e4:	803b      	strh	r3, [r7, #0]
 80019e6:	4613      	mov	r3, r2
 80019e8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	da0f      	bge.n	8001a16 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019f6:	78fb      	ldrb	r3, [r7, #3]
 80019f8:	f003 020f 	and.w	r2, r3, #15
 80019fc:	4613      	mov	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	4413      	add	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	3338      	adds	r3, #56	; 0x38
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	4413      	add	r3, r2
 8001a0a:	3304      	adds	r3, #4
 8001a0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2201      	movs	r2, #1
 8001a12:	705a      	strb	r2, [r3, #1]
 8001a14:	e00f      	b.n	8001a36 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a16:	78fb      	ldrb	r3, [r7, #3]
 8001a18:	f003 020f 	and.w	r2, r3, #15
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	4413      	add	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a36:	78fb      	ldrb	r3, [r7, #3]
 8001a38:	f003 030f 	and.w	r3, r3, #15
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a42:	883a      	ldrh	r2, [r7, #0]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	78ba      	ldrb	r2, [r7, #2]
 8001a4c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	785b      	ldrb	r3, [r3, #1]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d004      	beq.n	8001a60 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a60:	78bb      	ldrb	r3, [r7, #2]
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d102      	bne.n	8001a6c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d101      	bne.n	8001a7a <HAL_PCD_EP_Open+0xaa>
 8001a76:	2302      	movs	r3, #2
 8001a78:	e00e      	b.n	8001a98 <HAL_PCD_EP_Open+0xc8>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68f9      	ldr	r1, [r7, #12]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f001 fb9b 	bl	80031c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001a96:	7afb      	ldrb	r3, [r7, #11]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001aac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	da0f      	bge.n	8001ad4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ab4:	78fb      	ldrb	r3, [r7, #3]
 8001ab6:	f003 020f 	and.w	r2, r3, #15
 8001aba:	4613      	mov	r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	4413      	add	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	3338      	adds	r3, #56	; 0x38
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	3304      	adds	r3, #4
 8001aca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	705a      	strb	r2, [r3, #1]
 8001ad2:	e00f      	b.n	8001af4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ad4:	78fb      	ldrb	r3, [r7, #3]
 8001ad6:	f003 020f 	and.w	r2, r3, #15
 8001ada:	4613      	mov	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	4413      	add	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	4413      	add	r3, r2
 8001aea:	3304      	adds	r3, #4
 8001aec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2200      	movs	r2, #0
 8001af2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001af4:	78fb      	ldrb	r3, [r7, #3]
 8001af6:	f003 030f 	and.w	r3, r3, #15
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d101      	bne.n	8001b0e <HAL_PCD_EP_Close+0x6e>
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	e00e      	b.n	8001b2c <HAL_PCD_EP_Close+0x8c>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68f9      	ldr	r1, [r7, #12]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f001 fbd9 	bl	80032d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	607a      	str	r2, [r7, #4]
 8001b3e:	603b      	str	r3, [r7, #0]
 8001b40:	460b      	mov	r3, r1
 8001b42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b44:	7afb      	ldrb	r3, [r7, #11]
 8001b46:	f003 020f 	and.w	r2, r3, #15
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	4413      	add	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	4413      	add	r3, r2
 8001b5a:	3304      	adds	r3, #4
 8001b5c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	2200      	movs	r2, #0
 8001b74:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b76:	7afb      	ldrb	r3, [r7, #11]
 8001b78:	f003 030f 	and.w	r3, r3, #15
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d102      	bne.n	8001b90 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b90:	7afb      	ldrb	r3, [r7, #11]
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d109      	bne.n	8001bae <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6818      	ldr	r0, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	6979      	ldr	r1, [r7, #20]
 8001ba8:	f001 feb8 	bl	800391c <USB_EP0StartXfer>
 8001bac:	e008      	b.n	8001bc0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6818      	ldr	r0, [r3, #0]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	461a      	mov	r2, r3
 8001bba:	6979      	ldr	r1, [r7, #20]
 8001bbc:	f001 fc66 	bl	800348c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b086      	sub	sp, #24
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	60f8      	str	r0, [r7, #12]
 8001bd2:	607a      	str	r2, [r7, #4]
 8001bd4:	603b      	str	r3, [r7, #0]
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bda:	7afb      	ldrb	r3, [r7, #11]
 8001bdc:	f003 020f 	and.w	r2, r3, #15
 8001be0:	4613      	mov	r3, r2
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	4413      	add	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	3338      	adds	r3, #56	; 0x38
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	4413      	add	r3, r2
 8001bee:	3304      	adds	r3, #4
 8001bf0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	2200      	movs	r2, #0
 8001c02:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	2201      	movs	r2, #1
 8001c08:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c0a:	7afb      	ldrb	r3, [r7, #11]
 8001c0c:	f003 030f 	and.w	r3, r3, #15
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d102      	bne.n	8001c24 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c24:	7afb      	ldrb	r3, [r7, #11]
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d109      	bne.n	8001c42 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6818      	ldr	r0, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	461a      	mov	r2, r3
 8001c3a:	6979      	ldr	r1, [r7, #20]
 8001c3c:	f001 fe6e 	bl	800391c <USB_EP0StartXfer>
 8001c40:	e008      	b.n	8001c54 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6818      	ldr	r0, [r3, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	6979      	ldr	r1, [r7, #20]
 8001c50:	f001 fc1c 	bl	800348c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b084      	sub	sp, #16
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	460b      	mov	r3, r1
 8001c68:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c6a:	78fb      	ldrb	r3, [r7, #3]
 8001c6c:	f003 020f 	and.w	r2, r3, #15
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d901      	bls.n	8001c7c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e050      	b.n	8001d1e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	da0f      	bge.n	8001ca4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c84:	78fb      	ldrb	r3, [r7, #3]
 8001c86:	f003 020f 	and.w	r2, r3, #15
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	4413      	add	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	3338      	adds	r3, #56	; 0x38
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	4413      	add	r3, r2
 8001c98:	3304      	adds	r3, #4
 8001c9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	705a      	strb	r2, [r3, #1]
 8001ca2:	e00d      	b.n	8001cc0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ca4:	78fa      	ldrb	r2, [r7, #3]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	4413      	add	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cc6:	78fb      	ldrb	r3, [r7, #3]
 8001cc8:	f003 030f 	and.w	r3, r3, #15
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d101      	bne.n	8001ce0 <HAL_PCD_EP_SetStall+0x82>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	e01e      	b.n	8001d1e <HAL_PCD_EP_SetStall+0xc0>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68f9      	ldr	r1, [r7, #12]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f002 f8ac 	bl	8003e4c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cf4:	78fb      	ldrb	r3, [r7, #3]
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10a      	bne.n	8001d14 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6818      	ldr	r0, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	b2d9      	uxtb	r1, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001d0e:	461a      	mov	r2, r3
 8001d10:	f002 fa9c 	bl	800424c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b084      	sub	sp, #16
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d32:	78fb      	ldrb	r3, [r7, #3]
 8001d34:	f003 020f 	and.w	r2, r3, #15
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d901      	bls.n	8001d44 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e042      	b.n	8001dca <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	da0f      	bge.n	8001d6c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d4c:	78fb      	ldrb	r3, [r7, #3]
 8001d4e:	f003 020f 	and.w	r2, r3, #15
 8001d52:	4613      	mov	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	4413      	add	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	3338      	adds	r3, #56	; 0x38
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	4413      	add	r3, r2
 8001d60:	3304      	adds	r3, #4
 8001d62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2201      	movs	r2, #1
 8001d68:	705a      	strb	r2, [r3, #1]
 8001d6a:	e00f      	b.n	8001d8c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d6c:	78fb      	ldrb	r3, [r7, #3]
 8001d6e:	f003 020f 	and.w	r2, r3, #15
 8001d72:	4613      	mov	r3, r2
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	4413      	add	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	3304      	adds	r3, #4
 8001d84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d92:	78fb      	ldrb	r3, [r7, #3]
 8001d94:	f003 030f 	and.w	r3, r3, #15
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d101      	bne.n	8001dac <HAL_PCD_EP_ClrStall+0x86>
 8001da8:	2302      	movs	r3, #2
 8001daa:	e00e      	b.n	8001dca <HAL_PCD_EP_ClrStall+0xa4>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68f9      	ldr	r1, [r7, #12]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f002 f8b4 	bl	8003f28 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b084      	sub	sp, #16
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001dde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	da0c      	bge.n	8001e00 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001de6:	78fb      	ldrb	r3, [r7, #3]
 8001de8:	f003 020f 	and.w	r2, r3, #15
 8001dec:	4613      	mov	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	4413      	add	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	3338      	adds	r3, #56	; 0x38
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	e00c      	b.n	8001e1a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e00:	78fb      	ldrb	r3, [r7, #3]
 8001e02:	f003 020f 	and.w	r2, r3, #15
 8001e06:	4613      	mov	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	4413      	add	r3, r2
 8001e16:	3304      	adds	r3, #4
 8001e18:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68f9      	ldr	r1, [r7, #12]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f001 fed3 	bl	8003bcc <USB_EPStopXfer>
 8001e26:	4603      	mov	r3, r0
 8001e28:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001e2a:	7afb      	ldrb	r3, [r7, #11]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08a      	sub	sp, #40	; 0x28
 8001e38:	af02      	add	r7, sp, #8
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	4413      	add	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	3338      	adds	r3, #56	; 0x38
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	4413      	add	r3, r2
 8001e58:	3304      	adds	r3, #4
 8001e5a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6a1a      	ldr	r2, [r3, #32]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d901      	bls.n	8001e6c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e06c      	b.n	8001f46 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	699a      	ldr	r2, [r3, #24]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	69fa      	ldr	r2, [r7, #28]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d902      	bls.n	8001e88 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	3303      	adds	r3, #3
 8001e8c:	089b      	lsrs	r3, r3, #2
 8001e8e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e90:	e02b      	b.n	8001eea <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	699a      	ldr	r2, [r3, #24]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	69fa      	ldr	r2, [r7, #28]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d902      	bls.n	8001eae <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3303      	adds	r3, #3
 8001eb2:	089b      	lsrs	r3, r3, #2
 8001eb4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6919      	ldr	r1, [r3, #16]
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	4603      	mov	r3, r0
 8001ecc:	6978      	ldr	r0, [r7, #20]
 8001ece:	f001 ff27 	bl	8003d20 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	691a      	ldr	r2, [r3, #16]
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	441a      	add	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6a1a      	ldr	r2, [r3, #32]
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	441a      	add	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	015a      	lsls	r2, r3, #5
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d809      	bhi.n	8001f14 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6a1a      	ldr	r2, [r3, #32]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d203      	bcs.n	8001f14 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1be      	bne.n	8001e92 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	699a      	ldr	r2, [r3, #24]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d811      	bhi.n	8001f44 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	2201      	movs	r2, #1
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	6939      	ldr	r1, [r7, #16]
 8001f3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f40:	4013      	ands	r3, r2
 8001f42:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3720      	adds	r7, #32
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
	...

08001f50 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b088      	sub	sp, #32
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	333c      	adds	r3, #60	; 0x3c
 8001f68:	3304      	adds	r3, #4
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	015a      	lsls	r2, r3, #5
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	4413      	add	r3, r2
 8001f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d17b      	bne.n	800207e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d015      	beq.n	8001fbc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	4a61      	ldr	r2, [pc, #388]	; (8002118 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	f240 80b9 	bls.w	800210c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 80b3 	beq.w	800210c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	015a      	lsls	r2, r3, #5
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	4413      	add	r3, r2
 8001fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fb8:	6093      	str	r3, [r2, #8]
 8001fba:	e0a7      	b.n	800210c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	f003 0320 	and.w	r3, r3, #32
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d009      	beq.n	8001fda <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	015a      	lsls	r2, r3, #5
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	4413      	add	r3, r2
 8001fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	2320      	movs	r3, #32
 8001fd6:	6093      	str	r3, [r2, #8]
 8001fd8:	e098      	b.n	800210c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f040 8093 	bne.w	800210c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	4a4b      	ldr	r2, [pc, #300]	; (8002118 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d90f      	bls.n	800200e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00a      	beq.n	800200e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	015a      	lsls	r2, r3, #5
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	4413      	add	r3, r2
 8002000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002004:	461a      	mov	r2, r3
 8002006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800200a:	6093      	str	r3, [r2, #8]
 800200c:	e07e      	b.n	800210c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	4613      	mov	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	4413      	add	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	4413      	add	r3, r2
 8002020:	3304      	adds	r3, #4
 8002022:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	69da      	ldr	r2, [r3, #28]
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	0159      	lsls	r1, r3, #5
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	440b      	add	r3, r1
 8002030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800203a:	1ad2      	subs	r2, r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d114      	bne.n	8002070 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d109      	bne.n	8002062 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6818      	ldr	r0, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002058:	461a      	mov	r2, r3
 800205a:	2101      	movs	r1, #1
 800205c:	f002 f8f6 	bl	800424c <USB_EP0_OutStart>
 8002060:	e006      	b.n	8002070 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	691a      	ldr	r2, [r3, #16]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	441a      	add	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	4619      	mov	r1, r3
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f004 f816 	bl	80060a8 <HAL_PCD_DataOutStageCallback>
 800207c:	e046      	b.n	800210c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	4a26      	ldr	r2, [pc, #152]	; (800211c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d124      	bne.n	80020d0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00a      	beq.n	80020a6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	015a      	lsls	r2, r3, #5
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	4413      	add	r3, r2
 8002098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800209c:	461a      	mov	r2, r3
 800209e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020a2:	6093      	str	r3, [r2, #8]
 80020a4:	e032      	b.n	800210c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	f003 0320 	and.w	r3, r3, #32
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d008      	beq.n	80020c2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	015a      	lsls	r2, r3, #5
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	4413      	add	r3, r2
 80020b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020bc:	461a      	mov	r2, r3
 80020be:	2320      	movs	r3, #32
 80020c0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	4619      	mov	r1, r3
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f003 ffed 	bl	80060a8 <HAL_PCD_DataOutStageCallback>
 80020ce:	e01d      	b.n	800210c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d114      	bne.n	8002100 <PCD_EP_OutXfrComplete_int+0x1b0>
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	4613      	mov	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	4413      	add	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d108      	bne.n	8002100 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6818      	ldr	r0, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80020f8:	461a      	mov	r2, r3
 80020fa:	2100      	movs	r1, #0
 80020fc:	f002 f8a6 	bl	800424c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	b2db      	uxtb	r3, r3
 8002104:	4619      	mov	r1, r3
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f003 ffce 	bl	80060a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3720      	adds	r7, #32
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	4f54300a 	.word	0x4f54300a
 800211c:	4f54310a 	.word	0x4f54310a

08002120 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	333c      	adds	r3, #60	; 0x3c
 8002138:	3304      	adds	r3, #4
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	015a      	lsls	r2, r3, #5
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4413      	add	r3, r2
 8002146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	4a15      	ldr	r2, [pc, #84]	; (80021a8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d90e      	bls.n	8002174 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800215c:	2b00      	cmp	r3, #0
 800215e:	d009      	beq.n	8002174 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	015a      	lsls	r2, r3, #5
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	4413      	add	r3, r2
 8002168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800216c:	461a      	mov	r2, r3
 800216e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002172:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f003 ff85 	bl	8006084 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	4a0a      	ldr	r2, [pc, #40]	; (80021a8 <PCD_EP_OutSetupPacket_int+0x88>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d90c      	bls.n	800219c <PCD_EP_OutSetupPacket_int+0x7c>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d108      	bne.n	800219c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6818      	ldr	r0, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002194:	461a      	mov	r2, r3
 8002196:	2101      	movs	r1, #1
 8002198:	f002 f858 	bl	800424c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	4f54300a 	.word	0x4f54300a

080021ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	70fb      	strb	r3, [r7, #3]
 80021b8:	4613      	mov	r3, r2
 80021ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80021c4:	78fb      	ldrb	r3, [r7, #3]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d107      	bne.n	80021da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80021ca:	883b      	ldrh	r3, [r7, #0]
 80021cc:	0419      	lsls	r1, r3, #16
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	629a      	str	r2, [r3, #40]	; 0x28
 80021d8:	e028      	b.n	800222c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e0:	0c1b      	lsrs	r3, r3, #16
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	4413      	add	r3, r2
 80021e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80021e8:	2300      	movs	r3, #0
 80021ea:	73fb      	strb	r3, [r7, #15]
 80021ec:	e00d      	b.n	800220a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	7bfb      	ldrb	r3, [r7, #15]
 80021f4:	3340      	adds	r3, #64	; 0x40
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	0c1b      	lsrs	r3, r3, #16
 80021fe:	68ba      	ldr	r2, [r7, #8]
 8002200:	4413      	add	r3, r2
 8002202:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	3301      	adds	r3, #1
 8002208:	73fb      	strb	r3, [r7, #15]
 800220a:	7bfa      	ldrb	r2, [r7, #15]
 800220c:	78fb      	ldrb	r3, [r7, #3]
 800220e:	3b01      	subs	r3, #1
 8002210:	429a      	cmp	r2, r3
 8002212:	d3ec      	bcc.n	80021ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002214:	883b      	ldrh	r3, [r7, #0]
 8002216:	0418      	lsls	r0, r3, #16
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6819      	ldr	r1, [r3, #0]
 800221c:	78fb      	ldrb	r3, [r7, #3]
 800221e:	3b01      	subs	r3, #1
 8002220:	68ba      	ldr	r2, [r7, #8]
 8002222:	4302      	orrs	r2, r0
 8002224:	3340      	adds	r3, #64	; 0x40
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	440b      	add	r3, r1
 800222a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
 8002242:	460b      	mov	r3, r1
 8002244:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	887a      	ldrh	r2, [r7, #2]
 800224c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e267      	b.n	8002756 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b00      	cmp	r3, #0
 8002290:	d075      	beq.n	800237e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002292:	4b88      	ldr	r3, [pc, #544]	; (80024b4 <HAL_RCC_OscConfig+0x240>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b04      	cmp	r3, #4
 800229c:	d00c      	beq.n	80022b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800229e:	4b85      	ldr	r3, [pc, #532]	; (80024b4 <HAL_RCC_OscConfig+0x240>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d112      	bne.n	80022d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022aa:	4b82      	ldr	r3, [pc, #520]	; (80024b4 <HAL_RCC_OscConfig+0x240>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022b6:	d10b      	bne.n	80022d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b8:	4b7e      	ldr	r3, [pc, #504]	; (80024b4 <HAL_RCC_OscConfig+0x240>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d05b      	beq.n	800237c <HAL_RCC_OscConfig+0x108>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d157      	bne.n	800237c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e242      	b.n	8002756 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022d8:	d106      	bne.n	80022e8 <HAL_RCC_OscConfig+0x74>
 80022da:	4b76      	ldr	r3, [pc, #472]	; (80024b4 <HAL_RCC_OscConfig+0x240>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a75      	ldr	r2, [pc, #468]	; (80024b4 <HAL_RCC_OscConfig+0x240>)
 80022e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	e01d      	b.n	8002324 <HAL_RCC_OscConfig+0xb0>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022f0:	d10c      	bne.n	800230c <HAL_RCC_OscConfig+0x98>
 80022f2:	4b70      	ldr	r3, [pc, #448]	; (80024b4 <HAL_RCC_OscConfig+0x240>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a6f      	ldr	r2, [pc, #444]	; (80024b4 <HAL_RCC_OscConfig+0x240>)
 80022f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	4b6d      	ldr	r3, [pc, #436]	; (80024b4 <HAL_RCC_OscConfig+0x240>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a6c      	ldr	r2, [pc, #432]	; (80024b4 <HAL_RCC_OscConfig+0x240>)
 8002304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	e00b      	b.n	8002324 <HAL_RCC_OscConfig+0xb0>
 800230c:	4b69      	ldr	r3, [pc, #420]	; (80024b4 <HAL_RCC_OscConfig+0x240>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a68      	ldr	r2, [pc, #416]	; (80024b4 <HAL_RCC_OscConfig+0x240>)
 8002312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002316:	6013      	str	r3, [r2, #0]
 8002318:	4b66      	ldr	r3, [pc, #408]	; (80024b4 <HAL_RCC_OscConfig+0x240>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a65      	ldr	r2, [pc, #404]	; (80024b4 <HAL_RCC_OscConfig+0x240>)
 800231e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002322:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d013      	beq.n	8002354 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232c:	f7fe fa76 	bl	800081c <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002334:	f7fe fa72 	bl	800081c <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b64      	cmp	r3, #100	; 0x64
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e207      	b.n	8002756 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002346:	4b5b      	ldr	r3, [pc, #364]	; (80024b4 <HAL_RCC_OscConfig+0x240>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d0f0      	beq.n	8002334 <HAL_RCC_OscConfig+0xc0>
 8002352:	e014      	b.n	800237e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002354:	f7fe fa62 	bl	800081c <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800235c:	f7fe fa5e 	bl	800081c <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b64      	cmp	r3, #100	; 0x64
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e1f3      	b.n	8002756 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800236e:	4b51      	ldr	r3, [pc, #324]	; (80024b4 <HAL_RCC_OscConfig+0x240>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f0      	bne.n	800235c <HAL_RCC_OscConfig+0xe8>
 800237a:	e000      	b.n	800237e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d063      	beq.n	8002452 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800238a:	4b4a      	ldr	r3, [pc, #296]	; (80024b4 <HAL_RCC_OscConfig+0x240>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 030c 	and.w	r3, r3, #12
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00b      	beq.n	80023ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002396:	4b47      	ldr	r3, [pc, #284]	; (80024b4 <HAL_RCC_OscConfig+0x240>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800239e:	2b08      	cmp	r3, #8
 80023a0:	d11c      	bne.n	80023dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023a2:	4b44      	ldr	r3, [pc, #272]	; (80024b4 <HAL_RCC_OscConfig+0x240>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d116      	bne.n	80023dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ae:	4b41      	ldr	r3, [pc, #260]	; (80024b4 <HAL_RCC_OscConfig+0x240>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d005      	beq.n	80023c6 <HAL_RCC_OscConfig+0x152>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d001      	beq.n	80023c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e1c7      	b.n	8002756 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c6:	4b3b      	ldr	r3, [pc, #236]	; (80024b4 <HAL_RCC_OscConfig+0x240>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	4937      	ldr	r1, [pc, #220]	; (80024b4 <HAL_RCC_OscConfig+0x240>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023da:	e03a      	b.n	8002452 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d020      	beq.n	8002426 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023e4:	4b34      	ldr	r3, [pc, #208]	; (80024b8 <HAL_RCC_OscConfig+0x244>)
 80023e6:	2201      	movs	r2, #1
 80023e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ea:	f7fe fa17 	bl	800081c <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023f2:	f7fe fa13 	bl	800081c <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e1a8      	b.n	8002756 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002404:	4b2b      	ldr	r3, [pc, #172]	; (80024b4 <HAL_RCC_OscConfig+0x240>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0f0      	beq.n	80023f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002410:	4b28      	ldr	r3, [pc, #160]	; (80024b4 <HAL_RCC_OscConfig+0x240>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	4925      	ldr	r1, [pc, #148]	; (80024b4 <HAL_RCC_OscConfig+0x240>)
 8002420:	4313      	orrs	r3, r2
 8002422:	600b      	str	r3, [r1, #0]
 8002424:	e015      	b.n	8002452 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002426:	4b24      	ldr	r3, [pc, #144]	; (80024b8 <HAL_RCC_OscConfig+0x244>)
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242c:	f7fe f9f6 	bl	800081c <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002434:	f7fe f9f2 	bl	800081c <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e187      	b.n	8002756 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002446:	4b1b      	ldr	r3, [pc, #108]	; (80024b4 <HAL_RCC_OscConfig+0x240>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f0      	bne.n	8002434 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	2b00      	cmp	r3, #0
 800245c:	d036      	beq.n	80024cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d016      	beq.n	8002494 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002466:	4b15      	ldr	r3, [pc, #84]	; (80024bc <HAL_RCC_OscConfig+0x248>)
 8002468:	2201      	movs	r2, #1
 800246a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800246c:	f7fe f9d6 	bl	800081c <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002474:	f7fe f9d2 	bl	800081c <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e167      	b.n	8002756 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002486:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <HAL_RCC_OscConfig+0x240>)
 8002488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f0      	beq.n	8002474 <HAL_RCC_OscConfig+0x200>
 8002492:	e01b      	b.n	80024cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002494:	4b09      	ldr	r3, [pc, #36]	; (80024bc <HAL_RCC_OscConfig+0x248>)
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249a:	f7fe f9bf 	bl	800081c <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a0:	e00e      	b.n	80024c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024a2:	f7fe f9bb 	bl	800081c <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d907      	bls.n	80024c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e150      	b.n	8002756 <HAL_RCC_OscConfig+0x4e2>
 80024b4:	40023800 	.word	0x40023800
 80024b8:	42470000 	.word	0x42470000
 80024bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c0:	4b88      	ldr	r3, [pc, #544]	; (80026e4 <HAL_RCC_OscConfig+0x470>)
 80024c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1ea      	bne.n	80024a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 8097 	beq.w	8002608 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024da:	2300      	movs	r3, #0
 80024dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024de:	4b81      	ldr	r3, [pc, #516]	; (80026e4 <HAL_RCC_OscConfig+0x470>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10f      	bne.n	800250a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	4b7d      	ldr	r3, [pc, #500]	; (80026e4 <HAL_RCC_OscConfig+0x470>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	4a7c      	ldr	r2, [pc, #496]	; (80026e4 <HAL_RCC_OscConfig+0x470>)
 80024f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f8:	6413      	str	r3, [r2, #64]	; 0x40
 80024fa:	4b7a      	ldr	r3, [pc, #488]	; (80026e4 <HAL_RCC_OscConfig+0x470>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002502:	60bb      	str	r3, [r7, #8]
 8002504:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002506:	2301      	movs	r3, #1
 8002508:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250a:	4b77      	ldr	r3, [pc, #476]	; (80026e8 <HAL_RCC_OscConfig+0x474>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002512:	2b00      	cmp	r3, #0
 8002514:	d118      	bne.n	8002548 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002516:	4b74      	ldr	r3, [pc, #464]	; (80026e8 <HAL_RCC_OscConfig+0x474>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a73      	ldr	r2, [pc, #460]	; (80026e8 <HAL_RCC_OscConfig+0x474>)
 800251c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002520:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002522:	f7fe f97b 	bl	800081c <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800252a:	f7fe f977 	bl	800081c <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e10c      	b.n	8002756 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800253c:	4b6a      	ldr	r3, [pc, #424]	; (80026e8 <HAL_RCC_OscConfig+0x474>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0f0      	beq.n	800252a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d106      	bne.n	800255e <HAL_RCC_OscConfig+0x2ea>
 8002550:	4b64      	ldr	r3, [pc, #400]	; (80026e4 <HAL_RCC_OscConfig+0x470>)
 8002552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002554:	4a63      	ldr	r2, [pc, #396]	; (80026e4 <HAL_RCC_OscConfig+0x470>)
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	6713      	str	r3, [r2, #112]	; 0x70
 800255c:	e01c      	b.n	8002598 <HAL_RCC_OscConfig+0x324>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	2b05      	cmp	r3, #5
 8002564:	d10c      	bne.n	8002580 <HAL_RCC_OscConfig+0x30c>
 8002566:	4b5f      	ldr	r3, [pc, #380]	; (80026e4 <HAL_RCC_OscConfig+0x470>)
 8002568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256a:	4a5e      	ldr	r2, [pc, #376]	; (80026e4 <HAL_RCC_OscConfig+0x470>)
 800256c:	f043 0304 	orr.w	r3, r3, #4
 8002570:	6713      	str	r3, [r2, #112]	; 0x70
 8002572:	4b5c      	ldr	r3, [pc, #368]	; (80026e4 <HAL_RCC_OscConfig+0x470>)
 8002574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002576:	4a5b      	ldr	r2, [pc, #364]	; (80026e4 <HAL_RCC_OscConfig+0x470>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	6713      	str	r3, [r2, #112]	; 0x70
 800257e:	e00b      	b.n	8002598 <HAL_RCC_OscConfig+0x324>
 8002580:	4b58      	ldr	r3, [pc, #352]	; (80026e4 <HAL_RCC_OscConfig+0x470>)
 8002582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002584:	4a57      	ldr	r2, [pc, #348]	; (80026e4 <HAL_RCC_OscConfig+0x470>)
 8002586:	f023 0301 	bic.w	r3, r3, #1
 800258a:	6713      	str	r3, [r2, #112]	; 0x70
 800258c:	4b55      	ldr	r3, [pc, #340]	; (80026e4 <HAL_RCC_OscConfig+0x470>)
 800258e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002590:	4a54      	ldr	r2, [pc, #336]	; (80026e4 <HAL_RCC_OscConfig+0x470>)
 8002592:	f023 0304 	bic.w	r3, r3, #4
 8002596:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d015      	beq.n	80025cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a0:	f7fe f93c 	bl	800081c <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a6:	e00a      	b.n	80025be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025a8:	f7fe f938 	bl	800081c <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e0cb      	b.n	8002756 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025be:	4b49      	ldr	r3, [pc, #292]	; (80026e4 <HAL_RCC_OscConfig+0x470>)
 80025c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0ee      	beq.n	80025a8 <HAL_RCC_OscConfig+0x334>
 80025ca:	e014      	b.n	80025f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025cc:	f7fe f926 	bl	800081c <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d2:	e00a      	b.n	80025ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025d4:	f7fe f922 	bl	800081c <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e0b5      	b.n	8002756 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ea:	4b3e      	ldr	r3, [pc, #248]	; (80026e4 <HAL_RCC_OscConfig+0x470>)
 80025ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1ee      	bne.n	80025d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025f6:	7dfb      	ldrb	r3, [r7, #23]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d105      	bne.n	8002608 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025fc:	4b39      	ldr	r3, [pc, #228]	; (80026e4 <HAL_RCC_OscConfig+0x470>)
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	4a38      	ldr	r2, [pc, #224]	; (80026e4 <HAL_RCC_OscConfig+0x470>)
 8002602:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002606:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 80a1 	beq.w	8002754 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002612:	4b34      	ldr	r3, [pc, #208]	; (80026e4 <HAL_RCC_OscConfig+0x470>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 030c 	and.w	r3, r3, #12
 800261a:	2b08      	cmp	r3, #8
 800261c:	d05c      	beq.n	80026d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	2b02      	cmp	r3, #2
 8002624:	d141      	bne.n	80026aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002626:	4b31      	ldr	r3, [pc, #196]	; (80026ec <HAL_RCC_OscConfig+0x478>)
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262c:	f7fe f8f6 	bl	800081c <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002634:	f7fe f8f2 	bl	800081c <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e087      	b.n	8002756 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002646:	4b27      	ldr	r3, [pc, #156]	; (80026e4 <HAL_RCC_OscConfig+0x470>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f0      	bne.n	8002634 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69da      	ldr	r2, [r3, #28]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	019b      	lsls	r3, r3, #6
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002668:	085b      	lsrs	r3, r3, #1
 800266a:	3b01      	subs	r3, #1
 800266c:	041b      	lsls	r3, r3, #16
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002674:	061b      	lsls	r3, r3, #24
 8002676:	491b      	ldr	r1, [pc, #108]	; (80026e4 <HAL_RCC_OscConfig+0x470>)
 8002678:	4313      	orrs	r3, r2
 800267a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800267c:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <HAL_RCC_OscConfig+0x478>)
 800267e:	2201      	movs	r2, #1
 8002680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002682:	f7fe f8cb 	bl	800081c <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800268a:	f7fe f8c7 	bl	800081c <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e05c      	b.n	8002756 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800269c:	4b11      	ldr	r3, [pc, #68]	; (80026e4 <HAL_RCC_OscConfig+0x470>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0f0      	beq.n	800268a <HAL_RCC_OscConfig+0x416>
 80026a8:	e054      	b.n	8002754 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026aa:	4b10      	ldr	r3, [pc, #64]	; (80026ec <HAL_RCC_OscConfig+0x478>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b0:	f7fe f8b4 	bl	800081c <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026b8:	f7fe f8b0 	bl	800081c <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e045      	b.n	8002756 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ca:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <HAL_RCC_OscConfig+0x470>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0x444>
 80026d6:	e03d      	b.n	8002754 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d107      	bne.n	80026f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e038      	b.n	8002756 <HAL_RCC_OscConfig+0x4e2>
 80026e4:	40023800 	.word	0x40023800
 80026e8:	40007000 	.word	0x40007000
 80026ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026f0:	4b1b      	ldr	r3, [pc, #108]	; (8002760 <HAL_RCC_OscConfig+0x4ec>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d028      	beq.n	8002750 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002708:	429a      	cmp	r2, r3
 800270a:	d121      	bne.n	8002750 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002716:	429a      	cmp	r2, r3
 8002718:	d11a      	bne.n	8002750 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002720:	4013      	ands	r3, r2
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002726:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002728:	4293      	cmp	r3, r2
 800272a:	d111      	bne.n	8002750 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002736:	085b      	lsrs	r3, r3, #1
 8002738:	3b01      	subs	r3, #1
 800273a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800273c:	429a      	cmp	r2, r3
 800273e:	d107      	bne.n	8002750 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800274c:	429a      	cmp	r2, r3
 800274e:	d001      	beq.n	8002754 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e000      	b.n	8002756 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40023800 	.word	0x40023800

08002764 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e0cc      	b.n	8002912 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002778:	4b68      	ldr	r3, [pc, #416]	; (800291c <HAL_RCC_ClockConfig+0x1b8>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d90c      	bls.n	80027a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002786:	4b65      	ldr	r3, [pc, #404]	; (800291c <HAL_RCC_ClockConfig+0x1b8>)
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800278e:	4b63      	ldr	r3, [pc, #396]	; (800291c <HAL_RCC_ClockConfig+0x1b8>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	429a      	cmp	r2, r3
 800279a:	d001      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e0b8      	b.n	8002912 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d020      	beq.n	80027ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d005      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027b8:	4b59      	ldr	r3, [pc, #356]	; (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	4a58      	ldr	r2, [pc, #352]	; (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 80027be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0308 	and.w	r3, r3, #8
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d005      	beq.n	80027dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027d0:	4b53      	ldr	r3, [pc, #332]	; (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	4a52      	ldr	r2, [pc, #328]	; (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 80027d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027dc:	4b50      	ldr	r3, [pc, #320]	; (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	494d      	ldr	r1, [pc, #308]	; (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d044      	beq.n	8002884 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d107      	bne.n	8002812 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002802:	4b47      	ldr	r3, [pc, #284]	; (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d119      	bne.n	8002842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e07f      	b.n	8002912 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b02      	cmp	r3, #2
 8002818:	d003      	beq.n	8002822 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800281e:	2b03      	cmp	r3, #3
 8002820:	d107      	bne.n	8002832 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002822:	4b3f      	ldr	r3, [pc, #252]	; (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d109      	bne.n	8002842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e06f      	b.n	8002912 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002832:	4b3b      	ldr	r3, [pc, #236]	; (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e067      	b.n	8002912 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002842:	4b37      	ldr	r3, [pc, #220]	; (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f023 0203 	bic.w	r2, r3, #3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	4934      	ldr	r1, [pc, #208]	; (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 8002850:	4313      	orrs	r3, r2
 8002852:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002854:	f7fd ffe2 	bl	800081c <HAL_GetTick>
 8002858:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285a:	e00a      	b.n	8002872 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800285c:	f7fd ffde 	bl	800081c <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	f241 3288 	movw	r2, #5000	; 0x1388
 800286a:	4293      	cmp	r3, r2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e04f      	b.n	8002912 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002872:	4b2b      	ldr	r3, [pc, #172]	; (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 020c 	and.w	r2, r3, #12
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	429a      	cmp	r2, r3
 8002882:	d1eb      	bne.n	800285c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002884:	4b25      	ldr	r3, [pc, #148]	; (800291c <HAL_RCC_ClockConfig+0x1b8>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	429a      	cmp	r2, r3
 8002890:	d20c      	bcs.n	80028ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002892:	4b22      	ldr	r3, [pc, #136]	; (800291c <HAL_RCC_ClockConfig+0x1b8>)
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800289a:	4b20      	ldr	r3, [pc, #128]	; (800291c <HAL_RCC_ClockConfig+0x1b8>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d001      	beq.n	80028ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e032      	b.n	8002912 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d008      	beq.n	80028ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028b8:	4b19      	ldr	r3, [pc, #100]	; (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	4916      	ldr	r1, [pc, #88]	; (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0308 	and.w	r3, r3, #8
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d009      	beq.n	80028ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028d6:	4b12      	ldr	r3, [pc, #72]	; (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	490e      	ldr	r1, [pc, #56]	; (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028ea:	f000 f821 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 80028ee:	4602      	mov	r2, r0
 80028f0:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	091b      	lsrs	r3, r3, #4
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	490a      	ldr	r1, [pc, #40]	; (8002924 <HAL_RCC_ClockConfig+0x1c0>)
 80028fc:	5ccb      	ldrb	r3, [r1, r3]
 80028fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002902:	4a09      	ldr	r2, [pc, #36]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 8002904:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002906:	4b09      	ldr	r3, [pc, #36]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f7fd ff42 	bl	8000794 <HAL_InitTick>

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40023c00 	.word	0x40023c00
 8002920:	40023800 	.word	0x40023800
 8002924:	08006684 	.word	0x08006684
 8002928:	20000000 	.word	0x20000000
 800292c:	20000004 	.word	0x20000004

08002930 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002930:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002934:	b090      	sub	sp, #64	; 0x40
 8002936:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002938:	2300      	movs	r3, #0
 800293a:	637b      	str	r3, [r7, #52]	; 0x34
 800293c:	2300      	movs	r3, #0
 800293e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002940:	2300      	movs	r3, #0
 8002942:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002948:	4b59      	ldr	r3, [pc, #356]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x180>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 030c 	and.w	r3, r3, #12
 8002950:	2b08      	cmp	r3, #8
 8002952:	d00d      	beq.n	8002970 <HAL_RCC_GetSysClockFreq+0x40>
 8002954:	2b08      	cmp	r3, #8
 8002956:	f200 80a1 	bhi.w	8002a9c <HAL_RCC_GetSysClockFreq+0x16c>
 800295a:	2b00      	cmp	r3, #0
 800295c:	d002      	beq.n	8002964 <HAL_RCC_GetSysClockFreq+0x34>
 800295e:	2b04      	cmp	r3, #4
 8002960:	d003      	beq.n	800296a <HAL_RCC_GetSysClockFreq+0x3a>
 8002962:	e09b      	b.n	8002a9c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002964:	4b53      	ldr	r3, [pc, #332]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002966:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002968:	e09b      	b.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800296a:	4b53      	ldr	r3, [pc, #332]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x188>)
 800296c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800296e:	e098      	b.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002970:	4b4f      	ldr	r3, [pc, #316]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002978:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800297a:	4b4d      	ldr	r3, [pc, #308]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x180>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d028      	beq.n	80029d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002986:	4b4a      	ldr	r3, [pc, #296]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	099b      	lsrs	r3, r3, #6
 800298c:	2200      	movs	r2, #0
 800298e:	623b      	str	r3, [r7, #32]
 8002990:	627a      	str	r2, [r7, #36]	; 0x24
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002998:	2100      	movs	r1, #0
 800299a:	4b47      	ldr	r3, [pc, #284]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x188>)
 800299c:	fb03 f201 	mul.w	r2, r3, r1
 80029a0:	2300      	movs	r3, #0
 80029a2:	fb00 f303 	mul.w	r3, r0, r3
 80029a6:	4413      	add	r3, r2
 80029a8:	4a43      	ldr	r2, [pc, #268]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x188>)
 80029aa:	fba0 1202 	umull	r1, r2, r0, r2
 80029ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029b0:	460a      	mov	r2, r1
 80029b2:	62ba      	str	r2, [r7, #40]	; 0x28
 80029b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029b6:	4413      	add	r3, r2
 80029b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029bc:	2200      	movs	r2, #0
 80029be:	61bb      	str	r3, [r7, #24]
 80029c0:	61fa      	str	r2, [r7, #28]
 80029c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80029ca:	f7fd fc05 	bl	80001d8 <__aeabi_uldivmod>
 80029ce:	4602      	mov	r2, r0
 80029d0:	460b      	mov	r3, r1
 80029d2:	4613      	mov	r3, r2
 80029d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029d6:	e053      	b.n	8002a80 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029d8:	4b35      	ldr	r3, [pc, #212]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x180>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	099b      	lsrs	r3, r3, #6
 80029de:	2200      	movs	r2, #0
 80029e0:	613b      	str	r3, [r7, #16]
 80029e2:	617a      	str	r2, [r7, #20]
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80029ea:	f04f 0b00 	mov.w	fp, #0
 80029ee:	4652      	mov	r2, sl
 80029f0:	465b      	mov	r3, fp
 80029f2:	f04f 0000 	mov.w	r0, #0
 80029f6:	f04f 0100 	mov.w	r1, #0
 80029fa:	0159      	lsls	r1, r3, #5
 80029fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a00:	0150      	lsls	r0, r2, #5
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	ebb2 080a 	subs.w	r8, r2, sl
 8002a0a:	eb63 090b 	sbc.w	r9, r3, fp
 8002a0e:	f04f 0200 	mov.w	r2, #0
 8002a12:	f04f 0300 	mov.w	r3, #0
 8002a16:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a1a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a1e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a22:	ebb2 0408 	subs.w	r4, r2, r8
 8002a26:	eb63 0509 	sbc.w	r5, r3, r9
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	f04f 0300 	mov.w	r3, #0
 8002a32:	00eb      	lsls	r3, r5, #3
 8002a34:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a38:	00e2      	lsls	r2, r4, #3
 8002a3a:	4614      	mov	r4, r2
 8002a3c:	461d      	mov	r5, r3
 8002a3e:	eb14 030a 	adds.w	r3, r4, sl
 8002a42:	603b      	str	r3, [r7, #0]
 8002a44:	eb45 030b 	adc.w	r3, r5, fp
 8002a48:	607b      	str	r3, [r7, #4]
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a56:	4629      	mov	r1, r5
 8002a58:	028b      	lsls	r3, r1, #10
 8002a5a:	4621      	mov	r1, r4
 8002a5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a60:	4621      	mov	r1, r4
 8002a62:	028a      	lsls	r2, r1, #10
 8002a64:	4610      	mov	r0, r2
 8002a66:	4619      	mov	r1, r3
 8002a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	60bb      	str	r3, [r7, #8]
 8002a6e:	60fa      	str	r2, [r7, #12]
 8002a70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a74:	f7fd fbb0 	bl	80001d8 <__aeabi_uldivmod>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a80:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	0c1b      	lsrs	r3, r3, #16
 8002a86:	f003 0303 	and.w	r3, r3, #3
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002a90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a98:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a9a:	e002      	b.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a9c:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a9e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002aa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3740      	adds	r7, #64	; 0x40
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aae:	bf00      	nop
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	00f42400 	.word	0x00f42400
 8002ab8:	017d7840 	.word	0x017d7840

08002abc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ac0:	4b03      	ldr	r3, [pc, #12]	; (8002ad0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	20000000 	.word	0x20000000

08002ad4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ad4:	b084      	sub	sp, #16
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b084      	sub	sp, #16
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
 8002ade:	f107 001c 	add.w	r0, r7, #28
 8002ae2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d122      	bne.n	8002b32 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002b00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002b14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d105      	bne.n	8002b26 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f001 fbee 	bl	8004308 <USB_CoreReset>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	73fb      	strb	r3, [r7, #15]
 8002b30:	e01a      	b.n	8002b68 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f001 fbe2 	bl	8004308 <USB_CoreReset>
 8002b44:	4603      	mov	r3, r0
 8002b46:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002b48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d106      	bne.n	8002b5c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b52:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	639a      	str	r2, [r3, #56]	; 0x38
 8002b5a:	e005      	b.n	8002b68 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d10b      	bne.n	8002b86 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f043 0206 	orr.w	r2, r3, #6
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f043 0220 	orr.w	r2, r3, #32
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002b92:	b004      	add	sp, #16
 8002b94:	4770      	bx	lr
	...

08002b98 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b087      	sub	sp, #28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d165      	bne.n	8002c78 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	4a41      	ldr	r2, [pc, #260]	; (8002cb4 <USB_SetTurnaroundTime+0x11c>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d906      	bls.n	8002bc2 <USB_SetTurnaroundTime+0x2a>
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	4a40      	ldr	r2, [pc, #256]	; (8002cb8 <USB_SetTurnaroundTime+0x120>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d202      	bcs.n	8002bc2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002bbc:	230f      	movs	r3, #15
 8002bbe:	617b      	str	r3, [r7, #20]
 8002bc0:	e062      	b.n	8002c88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	4a3c      	ldr	r2, [pc, #240]	; (8002cb8 <USB_SetTurnaroundTime+0x120>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d306      	bcc.n	8002bd8 <USB_SetTurnaroundTime+0x40>
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	4a3b      	ldr	r2, [pc, #236]	; (8002cbc <USB_SetTurnaroundTime+0x124>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d202      	bcs.n	8002bd8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002bd2:	230e      	movs	r3, #14
 8002bd4:	617b      	str	r3, [r7, #20]
 8002bd6:	e057      	b.n	8002c88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	4a38      	ldr	r2, [pc, #224]	; (8002cbc <USB_SetTurnaroundTime+0x124>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d306      	bcc.n	8002bee <USB_SetTurnaroundTime+0x56>
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	4a37      	ldr	r2, [pc, #220]	; (8002cc0 <USB_SetTurnaroundTime+0x128>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d202      	bcs.n	8002bee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002be8:	230d      	movs	r3, #13
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	e04c      	b.n	8002c88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	4a33      	ldr	r2, [pc, #204]	; (8002cc0 <USB_SetTurnaroundTime+0x128>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d306      	bcc.n	8002c04 <USB_SetTurnaroundTime+0x6c>
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	4a32      	ldr	r2, [pc, #200]	; (8002cc4 <USB_SetTurnaroundTime+0x12c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d802      	bhi.n	8002c04 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002bfe:	230c      	movs	r3, #12
 8002c00:	617b      	str	r3, [r7, #20]
 8002c02:	e041      	b.n	8002c88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	4a2f      	ldr	r2, [pc, #188]	; (8002cc4 <USB_SetTurnaroundTime+0x12c>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d906      	bls.n	8002c1a <USB_SetTurnaroundTime+0x82>
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4a2e      	ldr	r2, [pc, #184]	; (8002cc8 <USB_SetTurnaroundTime+0x130>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d802      	bhi.n	8002c1a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002c14:	230b      	movs	r3, #11
 8002c16:	617b      	str	r3, [r7, #20]
 8002c18:	e036      	b.n	8002c88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	4a2a      	ldr	r2, [pc, #168]	; (8002cc8 <USB_SetTurnaroundTime+0x130>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d906      	bls.n	8002c30 <USB_SetTurnaroundTime+0x98>
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	4a29      	ldr	r2, [pc, #164]	; (8002ccc <USB_SetTurnaroundTime+0x134>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d802      	bhi.n	8002c30 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002c2a:	230a      	movs	r3, #10
 8002c2c:	617b      	str	r3, [r7, #20]
 8002c2e:	e02b      	b.n	8002c88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	4a26      	ldr	r2, [pc, #152]	; (8002ccc <USB_SetTurnaroundTime+0x134>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d906      	bls.n	8002c46 <USB_SetTurnaroundTime+0xae>
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	4a25      	ldr	r2, [pc, #148]	; (8002cd0 <USB_SetTurnaroundTime+0x138>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d202      	bcs.n	8002c46 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002c40:	2309      	movs	r3, #9
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	e020      	b.n	8002c88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	4a21      	ldr	r2, [pc, #132]	; (8002cd0 <USB_SetTurnaroundTime+0x138>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d306      	bcc.n	8002c5c <USB_SetTurnaroundTime+0xc4>
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	4a20      	ldr	r2, [pc, #128]	; (8002cd4 <USB_SetTurnaroundTime+0x13c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d802      	bhi.n	8002c5c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002c56:	2308      	movs	r3, #8
 8002c58:	617b      	str	r3, [r7, #20]
 8002c5a:	e015      	b.n	8002c88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	4a1d      	ldr	r2, [pc, #116]	; (8002cd4 <USB_SetTurnaroundTime+0x13c>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d906      	bls.n	8002c72 <USB_SetTurnaroundTime+0xda>
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	4a1c      	ldr	r2, [pc, #112]	; (8002cd8 <USB_SetTurnaroundTime+0x140>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d202      	bcs.n	8002c72 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002c6c:	2307      	movs	r3, #7
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	e00a      	b.n	8002c88 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002c72:	2306      	movs	r3, #6
 8002c74:	617b      	str	r3, [r7, #20]
 8002c76:	e007      	b.n	8002c88 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002c78:	79fb      	ldrb	r3, [r7, #7]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d102      	bne.n	8002c84 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002c7e:	2309      	movs	r3, #9
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	e001      	b.n	8002c88 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002c84:	2309      	movs	r3, #9
 8002c86:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	68da      	ldr	r2, [r3, #12]
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	029b      	lsls	r3, r3, #10
 8002c9c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	371c      	adds	r7, #28
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	00d8acbf 	.word	0x00d8acbf
 8002cb8:	00e4e1c0 	.word	0x00e4e1c0
 8002cbc:	00f42400 	.word	0x00f42400
 8002cc0:	01067380 	.word	0x01067380
 8002cc4:	011a499f 	.word	0x011a499f
 8002cc8:	01312cff 	.word	0x01312cff
 8002ccc:	014ca43f 	.word	0x014ca43f
 8002cd0:	016e3600 	.word	0x016e3600
 8002cd4:	01a6ab1f 	.word	0x01a6ab1f
 8002cd8:	01e84800 	.word	0x01e84800

08002cdc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f043 0201 	orr.w	r2, r3, #1
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f023 0201 	bic.w	r2, r3, #1
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002d3c:	78fb      	ldrb	r3, [r7, #3]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d115      	bne.n	8002d6e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002d4e:	2001      	movs	r0, #1
 8002d50:	f7fd fd70 	bl	8000834 <HAL_Delay>
      ms++;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	3301      	adds	r3, #1
 8002d58:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f001 fa45 	bl	80041ea <USB_GetMode>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d01e      	beq.n	8002da4 <USB_SetCurrentMode+0x84>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2b31      	cmp	r3, #49	; 0x31
 8002d6a:	d9f0      	bls.n	8002d4e <USB_SetCurrentMode+0x2e>
 8002d6c:	e01a      	b.n	8002da4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002d6e:	78fb      	ldrb	r3, [r7, #3]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d115      	bne.n	8002da0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002d80:	2001      	movs	r0, #1
 8002d82:	f7fd fd57 	bl	8000834 <HAL_Delay>
      ms++;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f001 fa2c 	bl	80041ea <USB_GetMode>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <USB_SetCurrentMode+0x84>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2b31      	cmp	r3, #49	; 0x31
 8002d9c:	d9f0      	bls.n	8002d80 <USB_SetCurrentMode+0x60>
 8002d9e:	e001      	b.n	8002da4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e005      	b.n	8002db0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2b32      	cmp	r3, #50	; 0x32
 8002da8:	d101      	bne.n	8002dae <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e000      	b.n	8002db0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002db8:	b084      	sub	sp, #16
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b086      	sub	sp, #24
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
 8002dc2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002dc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	613b      	str	r3, [r7, #16]
 8002dd6:	e009      	b.n	8002dec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	3340      	adds	r3, #64	; 0x40
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	2200      	movs	r2, #0
 8002de4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	3301      	adds	r3, #1
 8002dea:	613b      	str	r3, [r7, #16]
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	2b0e      	cmp	r3, #14
 8002df0:	d9f2      	bls.n	8002dd8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d11c      	bne.n	8002e32 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e06:	f043 0302 	orr.w	r3, r3, #2
 8002e0a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e10:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e28:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	639a      	str	r2, [r3, #56]	; 0x38
 8002e30:	e00b      	b.n	8002e4a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e36:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e42:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002e50:	461a      	mov	r2, r3
 8002e52:	2300      	movs	r3, #0
 8002e54:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e64:	461a      	mov	r2, r3
 8002e66:	680b      	ldr	r3, [r1, #0]
 8002e68:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d10c      	bne.n	8002e8a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d104      	bne.n	8002e80 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002e76:	2100      	movs	r1, #0
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f965 	bl	8003148 <USB_SetDevSpeed>
 8002e7e:	e008      	b.n	8002e92 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002e80:	2101      	movs	r1, #1
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f960 	bl	8003148 <USB_SetDevSpeed>
 8002e88:	e003      	b.n	8002e92 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002e8a:	2103      	movs	r1, #3
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 f95b 	bl	8003148 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002e92:	2110      	movs	r1, #16
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 f8f3 	bl	8003080 <USB_FlushTxFifo>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f91f 	bl	80030e8 <USB_FlushRxFifo>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eba:	461a      	mov	r2, r3
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	2300      	movs	r3, #0
 8002eca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ed8:	2300      	movs	r3, #0
 8002eda:	613b      	str	r3, [r7, #16]
 8002edc:	e043      	b.n	8002f66 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	015a      	lsls	r2, r3, #5
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ef0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ef4:	d118      	bne.n	8002f28 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10a      	bne.n	8002f12 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	015a      	lsls	r2, r3, #5
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4413      	add	r3, r2
 8002f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f08:	461a      	mov	r2, r3
 8002f0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f0e:	6013      	str	r3, [r2, #0]
 8002f10:	e013      	b.n	8002f3a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	015a      	lsls	r2, r3, #5
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	4413      	add	r3, r2
 8002f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f1e:	461a      	mov	r2, r3
 8002f20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002f24:	6013      	str	r3, [r2, #0]
 8002f26:	e008      	b.n	8002f3a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	015a      	lsls	r2, r3, #5
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	4413      	add	r3, r2
 8002f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f34:	461a      	mov	r2, r3
 8002f36:	2300      	movs	r3, #0
 8002f38:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	015a      	lsls	r2, r3, #5
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	4413      	add	r3, r2
 8002f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f46:	461a      	mov	r2, r3
 8002f48:	2300      	movs	r3, #0
 8002f4a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	015a      	lsls	r2, r3, #5
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4413      	add	r3, r2
 8002f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f58:	461a      	mov	r2, r3
 8002f5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	3301      	adds	r3, #1
 8002f64:	613b      	str	r3, [r7, #16]
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d3b7      	bcc.n	8002ede <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f6e:	2300      	movs	r3, #0
 8002f70:	613b      	str	r3, [r7, #16]
 8002f72:	e043      	b.n	8002ffc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	015a      	lsls	r2, r3, #5
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f8a:	d118      	bne.n	8002fbe <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10a      	bne.n	8002fa8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	015a      	lsls	r2, r3, #5
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4413      	add	r3, r2
 8002f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002fa4:	6013      	str	r3, [r2, #0]
 8002fa6:	e013      	b.n	8002fd0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	015a      	lsls	r2, r3, #5
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	4413      	add	r3, r2
 8002fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002fba:	6013      	str	r3, [r2, #0]
 8002fbc:	e008      	b.n	8002fd0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	015a      	lsls	r2, r3, #5
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fca:	461a      	mov	r2, r3
 8002fcc:	2300      	movs	r3, #0
 8002fce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	015a      	lsls	r2, r3, #5
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fdc:	461a      	mov	r2, r3
 8002fde:	2300      	movs	r3, #0
 8002fe0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	015a      	lsls	r2, r3, #5
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	4413      	add	r3, r2
 8002fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fee:	461a      	mov	r2, r3
 8002ff0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ff4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	613b      	str	r3, [r7, #16]
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	429a      	cmp	r2, r3
 8003002:	d3b7      	bcc.n	8002f74 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003012:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003016:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003024:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003028:	2b00      	cmp	r3, #0
 800302a:	d105      	bne.n	8003038 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	f043 0210 	orr.w	r2, r3, #16
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	699a      	ldr	r2, [r3, #24]
 800303c:	4b0f      	ldr	r3, [pc, #60]	; (800307c <USB_DevInit+0x2c4>)
 800303e:	4313      	orrs	r3, r2
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003046:	2b00      	cmp	r3, #0
 8003048:	d005      	beq.n	8003056 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	f043 0208 	orr.w	r2, r3, #8
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003058:	2b01      	cmp	r3, #1
 800305a:	d107      	bne.n	800306c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003064:	f043 0304 	orr.w	r3, r3, #4
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800306c:	7dfb      	ldrb	r3, [r7, #23]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003078:	b004      	add	sp, #16
 800307a:	4770      	bx	lr
 800307c:	803c3800 	.word	0x803c3800

08003080 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800308a:	2300      	movs	r3, #0
 800308c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	3301      	adds	r3, #1
 8003092:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4a13      	ldr	r2, [pc, #76]	; (80030e4 <USB_FlushTxFifo+0x64>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d901      	bls.n	80030a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e01b      	b.n	80030d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	daf2      	bge.n	800308e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	019b      	lsls	r3, r3, #6
 80030b0:	f043 0220 	orr.w	r2, r3, #32
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	3301      	adds	r3, #1
 80030bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	4a08      	ldr	r2, [pc, #32]	; (80030e4 <USB_FlushTxFifo+0x64>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d901      	bls.n	80030ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e006      	b.n	80030d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f003 0320 	and.w	r3, r3, #32
 80030d2:	2b20      	cmp	r3, #32
 80030d4:	d0f0      	beq.n	80030b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	00030d40 	.word	0x00030d40

080030e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	3301      	adds	r3, #1
 80030f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	4a11      	ldr	r2, [pc, #68]	; (8003144 <USB_FlushRxFifo+0x5c>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d901      	bls.n	8003106 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e018      	b.n	8003138 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	2b00      	cmp	r3, #0
 800310c:	daf2      	bge.n	80030f4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2210      	movs	r2, #16
 8003116:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	3301      	adds	r3, #1
 800311c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	4a08      	ldr	r2, [pc, #32]	; (8003144 <USB_FlushRxFifo+0x5c>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d901      	bls.n	800312a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e006      	b.n	8003138 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	f003 0310 	and.w	r3, r3, #16
 8003132:	2b10      	cmp	r3, #16
 8003134:	d0f0      	beq.n	8003118 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3714      	adds	r7, #20
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	00030d40 	.word	0x00030d40

08003148 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	460b      	mov	r3, r1
 8003152:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	78fb      	ldrb	r3, [r7, #3]
 8003162:	68f9      	ldr	r1, [r7, #12]
 8003164:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003168:	4313      	orrs	r3, r2
 800316a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800317a:	b480      	push	{r7}
 800317c:	b087      	sub	sp, #28
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 0306 	and.w	r3, r3, #6
 8003192:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d102      	bne.n	80031a0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800319a:	2300      	movs	r3, #0
 800319c:	75fb      	strb	r3, [r7, #23]
 800319e:	e00a      	b.n	80031b6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d002      	beq.n	80031ac <USB_GetDevSpeed+0x32>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2b06      	cmp	r3, #6
 80031aa:	d102      	bne.n	80031b2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80031ac:	2302      	movs	r3, #2
 80031ae:	75fb      	strb	r3, [r7, #23]
 80031b0:	e001      	b.n	80031b6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80031b2:	230f      	movs	r3, #15
 80031b4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80031b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	371c      	adds	r7, #28
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	785b      	ldrb	r3, [r3, #1]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d13a      	bne.n	8003256 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031e6:	69da      	ldr	r2, [r3, #28]
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	f003 030f 	and.w	r3, r3, #15
 80031f0:	2101      	movs	r1, #1
 80031f2:	fa01 f303 	lsl.w	r3, r1, r3
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	68f9      	ldr	r1, [r7, #12]
 80031fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031fe:	4313      	orrs	r3, r2
 8003200:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	015a      	lsls	r2, r3, #5
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	4413      	add	r3, r2
 800320a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d155      	bne.n	80032c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	015a      	lsls	r2, r3, #5
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4413      	add	r3, r2
 8003220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	791b      	ldrb	r3, [r3, #4]
 8003232:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003234:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	059b      	lsls	r3, r3, #22
 800323a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800323c:	4313      	orrs	r3, r2
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	0151      	lsls	r1, r2, #5
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	440a      	add	r2, r1
 8003246:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800324a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800324e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003252:	6013      	str	r3, [r2, #0]
 8003254:	e036      	b.n	80032c4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800325c:	69da      	ldr	r2, [r3, #28]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	2101      	movs	r1, #1
 8003268:	fa01 f303 	lsl.w	r3, r1, r3
 800326c:	041b      	lsls	r3, r3, #16
 800326e:	68f9      	ldr	r1, [r7, #12]
 8003270:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003274:	4313      	orrs	r3, r2
 8003276:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	015a      	lsls	r2, r3, #5
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4413      	add	r3, r2
 8003280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d11a      	bne.n	80032c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	015a      	lsls	r2, r3, #5
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4413      	add	r3, r2
 8003296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	791b      	ldrb	r3, [r3, #4]
 80032a8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80032aa:	430b      	orrs	r3, r1
 80032ac:	4313      	orrs	r3, r2
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	0151      	lsls	r1, r2, #5
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	440a      	add	r2, r1
 80032b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032c2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
	...

080032d4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	785b      	ldrb	r3, [r3, #1]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d161      	bne.n	80033b4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	015a      	lsls	r2, r3, #5
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003302:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003306:	d11f      	bne.n	8003348 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	015a      	lsls	r2, r3, #5
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4413      	add	r3, r2
 8003310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	0151      	lsls	r1, r2, #5
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	440a      	add	r2, r1
 800331e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003322:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003326:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	015a      	lsls	r2, r3, #5
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4413      	add	r3, r2
 8003330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	0151      	lsls	r1, r2, #5
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	440a      	add	r2, r1
 800333e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003342:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003346:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800334e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	f003 030f 	and.w	r3, r3, #15
 8003358:	2101      	movs	r1, #1
 800335a:	fa01 f303 	lsl.w	r3, r1, r3
 800335e:	b29b      	uxth	r3, r3
 8003360:	43db      	mvns	r3, r3
 8003362:	68f9      	ldr	r1, [r7, #12]
 8003364:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003368:	4013      	ands	r3, r2
 800336a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003372:	69da      	ldr	r2, [r3, #28]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	f003 030f 	and.w	r3, r3, #15
 800337c:	2101      	movs	r1, #1
 800337e:	fa01 f303 	lsl.w	r3, r1, r3
 8003382:	b29b      	uxth	r3, r3
 8003384:	43db      	mvns	r3, r3
 8003386:	68f9      	ldr	r1, [r7, #12]
 8003388:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800338c:	4013      	ands	r3, r2
 800338e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	015a      	lsls	r2, r3, #5
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4413      	add	r3, r2
 8003398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	0159      	lsls	r1, r3, #5
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	440b      	add	r3, r1
 80033a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033aa:	4619      	mov	r1, r3
 80033ac:	4b35      	ldr	r3, [pc, #212]	; (8003484 <USB_DeactivateEndpoint+0x1b0>)
 80033ae:	4013      	ands	r3, r2
 80033b0:	600b      	str	r3, [r1, #0]
 80033b2:	e060      	b.n	8003476 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	015a      	lsls	r2, r3, #5
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4413      	add	r3, r2
 80033bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033ca:	d11f      	bne.n	800340c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	015a      	lsls	r2, r3, #5
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4413      	add	r3, r2
 80033d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	0151      	lsls	r1, r2, #5
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	440a      	add	r2, r1
 80033e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033ea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	015a      	lsls	r2, r3, #5
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4413      	add	r3, r2
 80033f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	0151      	lsls	r1, r2, #5
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	440a      	add	r2, r1
 8003402:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003406:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800340a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003412:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	f003 030f 	and.w	r3, r3, #15
 800341c:	2101      	movs	r1, #1
 800341e:	fa01 f303 	lsl.w	r3, r1, r3
 8003422:	041b      	lsls	r3, r3, #16
 8003424:	43db      	mvns	r3, r3
 8003426:	68f9      	ldr	r1, [r7, #12]
 8003428:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800342c:	4013      	ands	r3, r2
 800342e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003436:	69da      	ldr	r2, [r3, #28]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	f003 030f 	and.w	r3, r3, #15
 8003440:	2101      	movs	r1, #1
 8003442:	fa01 f303 	lsl.w	r3, r1, r3
 8003446:	041b      	lsls	r3, r3, #16
 8003448:	43db      	mvns	r3, r3
 800344a:	68f9      	ldr	r1, [r7, #12]
 800344c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003450:	4013      	ands	r3, r2
 8003452:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	015a      	lsls	r2, r3, #5
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4413      	add	r3, r2
 800345c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	0159      	lsls	r1, r3, #5
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	440b      	add	r3, r1
 800346a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800346e:	4619      	mov	r1, r3
 8003470:	4b05      	ldr	r3, [pc, #20]	; (8003488 <USB_DeactivateEndpoint+0x1b4>)
 8003472:	4013      	ands	r3, r2
 8003474:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	ec337800 	.word	0xec337800
 8003488:	eff37800 	.word	0xeff37800

0800348c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b08a      	sub	sp, #40	; 0x28
 8003490:	af02      	add	r7, sp, #8
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	4613      	mov	r3, r2
 8003498:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	785b      	ldrb	r3, [r3, #1]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	f040 815c 	bne.w	8003766 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d132      	bne.n	800351c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	015a      	lsls	r2, r3, #5
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	4413      	add	r3, r2
 80034be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	0151      	lsls	r1, r2, #5
 80034c8:	69fa      	ldr	r2, [r7, #28]
 80034ca:	440a      	add	r2, r1
 80034cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80034d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80034d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	015a      	lsls	r2, r3, #5
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	4413      	add	r3, r2
 80034e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	0151      	lsls	r1, r2, #5
 80034ec:	69fa      	ldr	r2, [r7, #28]
 80034ee:	440a      	add	r2, r1
 80034f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80034f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	015a      	lsls	r2, r3, #5
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	4413      	add	r3, r2
 8003502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	0151      	lsls	r1, r2, #5
 800350c:	69fa      	ldr	r2, [r7, #28]
 800350e:	440a      	add	r2, r1
 8003510:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003514:	0cdb      	lsrs	r3, r3, #19
 8003516:	04db      	lsls	r3, r3, #19
 8003518:	6113      	str	r3, [r2, #16]
 800351a:	e074      	b.n	8003606 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	4413      	add	r3, r2
 8003524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	0151      	lsls	r1, r2, #5
 800352e:	69fa      	ldr	r2, [r7, #28]
 8003530:	440a      	add	r2, r1
 8003532:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003536:	0cdb      	lsrs	r3, r3, #19
 8003538:	04db      	lsls	r3, r3, #19
 800353a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	015a      	lsls	r2, r3, #5
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	4413      	add	r3, r2
 8003544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	0151      	lsls	r1, r2, #5
 800354e:	69fa      	ldr	r2, [r7, #28]
 8003550:	440a      	add	r2, r1
 8003552:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003556:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800355a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800355e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	015a      	lsls	r2, r3, #5
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	4413      	add	r3, r2
 8003568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800356c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	6999      	ldr	r1, [r3, #24]
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	440b      	add	r3, r1
 8003578:	1e59      	subs	r1, r3, #1
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003582:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003584:	4b9d      	ldr	r3, [pc, #628]	; (80037fc <USB_EPStartXfer+0x370>)
 8003586:	400b      	ands	r3, r1
 8003588:	69b9      	ldr	r1, [r7, #24]
 800358a:	0148      	lsls	r0, r1, #5
 800358c:	69f9      	ldr	r1, [r7, #28]
 800358e:	4401      	add	r1, r0
 8003590:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003594:	4313      	orrs	r3, r2
 8003596:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035a4:	691a      	ldr	r2, [r3, #16]
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ae:	69b9      	ldr	r1, [r7, #24]
 80035b0:	0148      	lsls	r0, r1, #5
 80035b2:	69f9      	ldr	r1, [r7, #28]
 80035b4:	4401      	add	r1, r0
 80035b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80035ba:	4313      	orrs	r3, r2
 80035bc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	791b      	ldrb	r3, [r3, #4]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d11f      	bne.n	8003606 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	015a      	lsls	r2, r3, #5
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	4413      	add	r3, r2
 80035ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	0151      	lsls	r1, r2, #5
 80035d8:	69fa      	ldr	r2, [r7, #28]
 80035da:	440a      	add	r2, r1
 80035dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035e0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80035e4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	015a      	lsls	r2, r3, #5
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	4413      	add	r3, r2
 80035ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	0151      	lsls	r1, r2, #5
 80035f8:	69fa      	ldr	r2, [r7, #28]
 80035fa:	440a      	add	r2, r1
 80035fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003600:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003604:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003606:	79fb      	ldrb	r3, [r7, #7]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d14b      	bne.n	80036a4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d009      	beq.n	8003628 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	015a      	lsls	r2, r3, #5
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	4413      	add	r3, r2
 800361c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003620:	461a      	mov	r2, r3
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	791b      	ldrb	r3, [r3, #4]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d128      	bne.n	8003682 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363c:	2b00      	cmp	r3, #0
 800363e:	d110      	bne.n	8003662 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	015a      	lsls	r2, r3, #5
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	4413      	add	r3, r2
 8003648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	0151      	lsls	r1, r2, #5
 8003652:	69fa      	ldr	r2, [r7, #28]
 8003654:	440a      	add	r2, r1
 8003656:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800365a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800365e:	6013      	str	r3, [r2, #0]
 8003660:	e00f      	b.n	8003682 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	015a      	lsls	r2, r3, #5
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	4413      	add	r3, r2
 800366a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	0151      	lsls	r1, r2, #5
 8003674:	69fa      	ldr	r2, [r7, #28]
 8003676:	440a      	add	r2, r1
 8003678:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800367c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003680:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	015a      	lsls	r2, r3, #5
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	4413      	add	r3, r2
 800368a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	0151      	lsls	r1, r2, #5
 8003694:	69fa      	ldr	r2, [r7, #28]
 8003696:	440a      	add	r2, r1
 8003698:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800369c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80036a0:	6013      	str	r3, [r2, #0]
 80036a2:	e133      	b.n	800390c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	015a      	lsls	r2, r3, #5
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	4413      	add	r3, r2
 80036ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	0151      	lsls	r1, r2, #5
 80036b6:	69fa      	ldr	r2, [r7, #28]
 80036b8:	440a      	add	r2, r1
 80036ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80036c2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	791b      	ldrb	r3, [r3, #4]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d015      	beq.n	80036f8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 811b 	beq.w	800390c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	2101      	movs	r1, #1
 80036e8:	fa01 f303 	lsl.w	r3, r1, r3
 80036ec:	69f9      	ldr	r1, [r7, #28]
 80036ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036f2:	4313      	orrs	r3, r2
 80036f4:	634b      	str	r3, [r1, #52]	; 0x34
 80036f6:	e109      	b.n	800390c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003704:	2b00      	cmp	r3, #0
 8003706:	d110      	bne.n	800372a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	015a      	lsls	r2, r3, #5
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	4413      	add	r3, r2
 8003710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	0151      	lsls	r1, r2, #5
 800371a:	69fa      	ldr	r2, [r7, #28]
 800371c:	440a      	add	r2, r1
 800371e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003722:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003726:	6013      	str	r3, [r2, #0]
 8003728:	e00f      	b.n	800374a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	015a      	lsls	r2, r3, #5
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	4413      	add	r3, r2
 8003732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	0151      	lsls	r1, r2, #5
 800373c:	69fa      	ldr	r2, [r7, #28]
 800373e:	440a      	add	r2, r1
 8003740:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003748:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	6919      	ldr	r1, [r3, #16]
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	781a      	ldrb	r2, [r3, #0]
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	b298      	uxth	r0, r3
 8003758:	79fb      	ldrb	r3, [r7, #7]
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	4603      	mov	r3, r0
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f000 fade 	bl	8003d20 <USB_WritePacket>
 8003764:	e0d2      	b.n	800390c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	015a      	lsls	r2, r3, #5
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	4413      	add	r3, r2
 800376e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	0151      	lsls	r1, r2, #5
 8003778:	69fa      	ldr	r2, [r7, #28]
 800377a:	440a      	add	r2, r1
 800377c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003780:	0cdb      	lsrs	r3, r3, #19
 8003782:	04db      	lsls	r3, r3, #19
 8003784:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	015a      	lsls	r2, r3, #5
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	4413      	add	r3, r2
 800378e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	0151      	lsls	r1, r2, #5
 8003798:	69fa      	ldr	r2, [r7, #28]
 800379a:	440a      	add	r2, r1
 800379c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80037a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80037a8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d126      	bne.n	8003800 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	015a      	lsls	r2, r3, #5
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	4413      	add	r3, r2
 80037ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037be:	691a      	ldr	r2, [r3, #16]
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037c8:	69b9      	ldr	r1, [r7, #24]
 80037ca:	0148      	lsls	r0, r1, #5
 80037cc:	69f9      	ldr	r1, [r7, #28]
 80037ce:	4401      	add	r1, r0
 80037d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80037d4:	4313      	orrs	r3, r2
 80037d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	0151      	lsls	r1, r2, #5
 80037ea:	69fa      	ldr	r2, [r7, #28]
 80037ec:	440a      	add	r2, r1
 80037ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80037f6:	6113      	str	r3, [r2, #16]
 80037f8:	e03a      	b.n	8003870 <USB_EPStartXfer+0x3e4>
 80037fa:	bf00      	nop
 80037fc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	699a      	ldr	r2, [r3, #24]
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	4413      	add	r3, r2
 800380a:	1e5a      	subs	r2, r3, #1
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	fbb2 f3f3 	udiv	r3, r2, r3
 8003814:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	8afa      	ldrh	r2, [r7, #22]
 800381c:	fb03 f202 	mul.w	r2, r3, r2
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	015a      	lsls	r2, r3, #5
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	4413      	add	r3, r2
 800382c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003830:	691a      	ldr	r2, [r3, #16]
 8003832:	8afb      	ldrh	r3, [r7, #22]
 8003834:	04d9      	lsls	r1, r3, #19
 8003836:	4b38      	ldr	r3, [pc, #224]	; (8003918 <USB_EPStartXfer+0x48c>)
 8003838:	400b      	ands	r3, r1
 800383a:	69b9      	ldr	r1, [r7, #24]
 800383c:	0148      	lsls	r0, r1, #5
 800383e:	69f9      	ldr	r1, [r7, #28]
 8003840:	4401      	add	r1, r0
 8003842:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003846:	4313      	orrs	r3, r2
 8003848:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	4413      	add	r3, r2
 8003852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003856:	691a      	ldr	r2, [r3, #16]
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	69db      	ldr	r3, [r3, #28]
 800385c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003860:	69b9      	ldr	r1, [r7, #24]
 8003862:	0148      	lsls	r0, r1, #5
 8003864:	69f9      	ldr	r1, [r7, #28]
 8003866:	4401      	add	r1, r0
 8003868:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800386c:	4313      	orrs	r3, r2
 800386e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003870:	79fb      	ldrb	r3, [r7, #7]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d10d      	bne.n	8003892 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d009      	beq.n	8003892 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	6919      	ldr	r1, [r3, #16]
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	015a      	lsls	r2, r3, #5
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	4413      	add	r3, r2
 800388a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800388e:	460a      	mov	r2, r1
 8003890:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	791b      	ldrb	r3, [r3, #4]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d128      	bne.n	80038ec <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d110      	bne.n	80038cc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	015a      	lsls	r2, r3, #5
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	0151      	lsls	r1, r2, #5
 80038bc:	69fa      	ldr	r2, [r7, #28]
 80038be:	440a      	add	r2, r1
 80038c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	e00f      	b.n	80038ec <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	015a      	lsls	r2, r3, #5
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	4413      	add	r3, r2
 80038d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	0151      	lsls	r1, r2, #5
 80038de:	69fa      	ldr	r2, [r7, #28]
 80038e0:	440a      	add	r2, r1
 80038e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	015a      	lsls	r2, r3, #5
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	0151      	lsls	r1, r2, #5
 80038fe:	69fa      	ldr	r2, [r7, #28]
 8003900:	440a      	add	r2, r1
 8003902:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003906:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800390a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3720      	adds	r7, #32
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	1ff80000 	.word	0x1ff80000

0800391c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800391c:	b480      	push	{r7}
 800391e:	b087      	sub	sp, #28
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	4613      	mov	r3, r2
 8003928:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	785b      	ldrb	r3, [r3, #1]
 8003938:	2b01      	cmp	r3, #1
 800393a:	f040 80ce 	bne.w	8003ada <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d132      	bne.n	80039ac <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	015a      	lsls	r2, r3, #5
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	4413      	add	r3, r2
 800394e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	0151      	lsls	r1, r2, #5
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	440a      	add	r2, r1
 800395c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003960:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003964:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003968:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	015a      	lsls	r2, r3, #5
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	4413      	add	r3, r2
 8003972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	0151      	lsls	r1, r2, #5
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	440a      	add	r2, r1
 8003980:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003984:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003988:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	015a      	lsls	r2, r3, #5
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	4413      	add	r3, r2
 8003992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	0151      	lsls	r1, r2, #5
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	440a      	add	r2, r1
 80039a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039a4:	0cdb      	lsrs	r3, r3, #19
 80039a6:	04db      	lsls	r3, r3, #19
 80039a8:	6113      	str	r3, [r2, #16]
 80039aa:	e04e      	b.n	8003a4a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	015a      	lsls	r2, r3, #5
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	4413      	add	r3, r2
 80039b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	0151      	lsls	r1, r2, #5
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	440a      	add	r2, r1
 80039c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039c6:	0cdb      	lsrs	r3, r3, #19
 80039c8:	04db      	lsls	r3, r3, #19
 80039ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	0151      	lsls	r1, r2, #5
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	440a      	add	r2, r1
 80039e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80039ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80039ee:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	699a      	ldr	r2, [r3, #24]
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d903      	bls.n	8003a04 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	68da      	ldr	r2, [r3, #12]
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	0151      	lsls	r1, r2, #5
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	440a      	add	r2, r1
 8003a1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a30:	691a      	ldr	r2, [r3, #16]
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a3a:	6939      	ldr	r1, [r7, #16]
 8003a3c:	0148      	lsls	r0, r1, #5
 8003a3e:	6979      	ldr	r1, [r7, #20]
 8003a40:	4401      	add	r1, r0
 8003a42:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003a46:	4313      	orrs	r3, r2
 8003a48:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003a4a:	79fb      	ldrb	r3, [r7, #7]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d11e      	bne.n	8003a8e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d009      	beq.n	8003a6c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	015a      	lsls	r2, r3, #5
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	4413      	add	r3, r2
 8003a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a64:	461a      	mov	r2, r3
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	0151      	lsls	r1, r2, #5
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	440a      	add	r2, r1
 8003a82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a8a:	6013      	str	r3, [r2, #0]
 8003a8c:	e097      	b.n	8003bbe <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	015a      	lsls	r2, r3, #5
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	4413      	add	r3, r2
 8003a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	0151      	lsls	r1, r2, #5
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	440a      	add	r2, r1
 8003aa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003aa8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003aac:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 8083 	beq.w	8003bbe <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003abe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	f003 030f 	and.w	r3, r3, #15
 8003ac8:	2101      	movs	r1, #1
 8003aca:	fa01 f303 	lsl.w	r3, r1, r3
 8003ace:	6979      	ldr	r1, [r7, #20]
 8003ad0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	634b      	str	r3, [r1, #52]	; 0x34
 8003ad8:	e071      	b.n	8003bbe <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	015a      	lsls	r2, r3, #5
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	0151      	lsls	r1, r2, #5
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	440a      	add	r2, r1
 8003af0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003af4:	0cdb      	lsrs	r3, r3, #19
 8003af6:	04db      	lsls	r3, r3, #19
 8003af8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	0151      	lsls	r1, r2, #5
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	440a      	add	r2, r1
 8003b10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b1c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	015a      	lsls	r2, r3, #5
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	0151      	lsls	r1, r2, #5
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	440a      	add	r2, r1
 8003b4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	015a      	lsls	r2, r3, #5
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b62:	691a      	ldr	r2, [r3, #16]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b6c:	6939      	ldr	r1, [r7, #16]
 8003b6e:	0148      	lsls	r0, r1, #5
 8003b70:	6979      	ldr	r1, [r7, #20]
 8003b72:	4401      	add	r1, r0
 8003b74:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003b7c:	79fb      	ldrb	r3, [r7, #7]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d10d      	bne.n	8003b9e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d009      	beq.n	8003b9e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	6919      	ldr	r1, [r3, #16]
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	015a      	lsls	r2, r3, #5
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	4413      	add	r3, r2
 8003b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b9a:	460a      	mov	r2, r1
 8003b9c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	015a      	lsls	r2, r3, #5
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	0151      	lsls	r1, r2, #5
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	440a      	add	r2, r1
 8003bb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bb8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003bbc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	371c      	adds	r7, #28
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b087      	sub	sp, #28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	785b      	ldrb	r3, [r3, #1]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d14a      	bne.n	8003c80 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	015a      	lsls	r2, r3, #5
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c02:	f040 8086 	bne.w	8003d12 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	7812      	ldrb	r2, [r2, #0]
 8003c1a:	0151      	lsls	r1, r2, #5
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	440a      	add	r2, r1
 8003c20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c28:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	015a      	lsls	r2, r3, #5
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	4413      	add	r3, r2
 8003c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	7812      	ldrb	r2, [r2, #0]
 8003c3e:	0151      	lsls	r1, r2, #5
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	440a      	add	r2, r1
 8003c44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c4c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	3301      	adds	r3, #1
 8003c52:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d902      	bls.n	8003c64 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	75fb      	strb	r3, [r7, #23]
          break;
 8003c62:	e056      	b.n	8003d12 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	015a      	lsls	r2, r3, #5
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c7c:	d0e7      	beq.n	8003c4e <USB_EPStopXfer+0x82>
 8003c7e:	e048      	b.n	8003d12 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	015a      	lsls	r2, r3, #5
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	4413      	add	r3, r2
 8003c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c98:	d13b      	bne.n	8003d12 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	015a      	lsls	r2, r3, #5
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	7812      	ldrb	r2, [r2, #0]
 8003cae:	0151      	lsls	r1, r2, #5
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	440a      	add	r2, r1
 8003cb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cb8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003cbc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	015a      	lsls	r2, r3, #5
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	7812      	ldrb	r2, [r2, #0]
 8003cd2:	0151      	lsls	r1, r2, #5
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	440a      	add	r2, r1
 8003cd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cdc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ce0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f242 7210 	movw	r2, #10000	; 0x2710
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d902      	bls.n	8003cf8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	75fb      	strb	r3, [r7, #23]
          break;
 8003cf6:	e00c      	b.n	8003d12 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	015a      	lsls	r2, r3, #5
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d10:	d0e7      	beq.n	8003ce2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	371c      	adds	r7, #28
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b089      	sub	sp, #36	; 0x24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	4611      	mov	r1, r2
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	460b      	mov	r3, r1
 8003d30:	71fb      	strb	r3, [r7, #7]
 8003d32:	4613      	mov	r3, r2
 8003d34:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003d3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d123      	bne.n	8003d8e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003d46:	88bb      	ldrh	r3, [r7, #4]
 8003d48:	3303      	adds	r3, #3
 8003d4a:	089b      	lsrs	r3, r3, #2
 8003d4c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61bb      	str	r3, [r7, #24]
 8003d52:	e018      	b.n	8003d86 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003d54:	79fb      	ldrb	r3, [r7, #7]
 8003d56:	031a      	lsls	r2, r3, #12
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d60:	461a      	mov	r2, r3
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	3301      	adds	r3, #1
 8003d72:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	3301      	adds	r3, #1
 8003d78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	3301      	adds	r3, #1
 8003d84:	61bb      	str	r3, [r7, #24]
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d3e2      	bcc.n	8003d54 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3724      	adds	r7, #36	; 0x24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b08b      	sub	sp, #44	; 0x2c
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	4613      	mov	r3, r2
 8003da8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003db2:	88fb      	ldrh	r3, [r7, #6]
 8003db4:	089b      	lsrs	r3, r3, #2
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003dba:	88fb      	ldrh	r3, [r7, #6]
 8003dbc:	f003 0303 	and.w	r3, r3, #3
 8003dc0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	623b      	str	r3, [r7, #32]
 8003dc6:	e014      	b.n	8003df2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	601a      	str	r2, [r3, #0]
    pDest++;
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	3301      	adds	r3, #1
 8003dde:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	3301      	adds	r3, #1
 8003de4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	3301      	adds	r3, #1
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	3301      	adds	r3, #1
 8003df0:	623b      	str	r3, [r7, #32]
 8003df2:	6a3a      	ldr	r2, [r7, #32]
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d3e6      	bcc.n	8003dc8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003dfa:	8bfb      	ldrh	r3, [r7, #30]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d01e      	beq.n	8003e3e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	f107 0310 	add.w	r3, r7, #16
 8003e10:	6812      	ldr	r2, [r2, #0]
 8003e12:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	6a3b      	ldr	r3, [r7, #32]
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e24:	701a      	strb	r2, [r3, #0]
      i++;
 8003e26:	6a3b      	ldr	r3, [r7, #32]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	623b      	str	r3, [r7, #32]
      pDest++;
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	3301      	adds	r3, #1
 8003e30:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003e32:	8bfb      	ldrh	r3, [r7, #30]
 8003e34:	3b01      	subs	r3, #1
 8003e36:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003e38:	8bfb      	ldrh	r3, [r7, #30]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1ea      	bne.n	8003e14 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	372c      	adds	r7, #44	; 0x2c
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	785b      	ldrb	r3, [r3, #1]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d12c      	bne.n	8003ec2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	db12      	blt.n	8003ea0 <USB_EPSetStall+0x54>
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00f      	beq.n	8003ea0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	0151      	lsls	r1, r2, #5
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	440a      	add	r2, r1
 8003e96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e9e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	0151      	lsls	r1, r2, #5
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	440a      	add	r2, r1
 8003eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ebe:	6013      	str	r3, [r2, #0]
 8003ec0:	e02b      	b.n	8003f1a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	015a      	lsls	r2, r3, #5
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	db12      	blt.n	8003efa <USB_EPSetStall+0xae>
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00f      	beq.n	8003efa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	015a      	lsls	r2, r3, #5
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	0151      	lsls	r1, r2, #5
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	440a      	add	r2, r1
 8003ef0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ef4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ef8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	015a      	lsls	r2, r3, #5
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	4413      	add	r3, r2
 8003f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	0151      	lsls	r1, r2, #5
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	440a      	add	r2, r1
 8003f10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f18:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	785b      	ldrb	r3, [r3, #1]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d128      	bne.n	8003f96 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	015a      	lsls	r2, r3, #5
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	0151      	lsls	r1, r2, #5
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	440a      	add	r2, r1
 8003f5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f62:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	791b      	ldrb	r3, [r3, #4]
 8003f68:	2b03      	cmp	r3, #3
 8003f6a:	d003      	beq.n	8003f74 <USB_EPClearStall+0x4c>
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	791b      	ldrb	r3, [r3, #4]
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d138      	bne.n	8003fe6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	015a      	lsls	r2, r3, #5
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	0151      	lsls	r1, r2, #5
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	440a      	add	r2, r1
 8003f8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f92:	6013      	str	r3, [r2, #0]
 8003f94:	e027      	b.n	8003fe6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	015a      	lsls	r2, r3, #5
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	0151      	lsls	r1, r2, #5
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	440a      	add	r2, r1
 8003fac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fb0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fb4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	791b      	ldrb	r3, [r3, #4]
 8003fba:	2b03      	cmp	r3, #3
 8003fbc:	d003      	beq.n	8003fc6 <USB_EPClearStall+0x9e>
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	791b      	ldrb	r3, [r3, #4]
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d10f      	bne.n	8003fe6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	015a      	lsls	r2, r3, #5
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	4413      	add	r3, r2
 8003fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	0151      	lsls	r1, r2, #5
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	440a      	add	r2, r1
 8003fdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004012:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004016:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	78fb      	ldrb	r3, [r7, #3]
 8004022:	011b      	lsls	r3, r3, #4
 8004024:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004028:	68f9      	ldr	r1, [r7, #12]
 800402a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800402e:	4313      	orrs	r3, r2
 8004030:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800405a:	f023 0303 	bic.w	r3, r3, #3
 800405e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800406e:	f023 0302 	bic.w	r3, r3, #2
 8004072:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004082:	b480      	push	{r7}
 8004084:	b085      	sub	sp, #20
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800409c:	f023 0303 	bic.w	r3, r3, #3
 80040a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040b0:	f043 0302 	orr.w	r3, r3, #2
 80040b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3714      	adds	r7, #20
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	4013      	ands	r3, r2
 80040da:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80040dc:	68fb      	ldr	r3, [r7, #12]
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b085      	sub	sp, #20
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004106:	69db      	ldr	r3, [r3, #28]
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	4013      	ands	r3, r2
 800410c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	0c1b      	lsrs	r3, r3, #16
}
 8004112:	4618      	mov	r0, r3
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800411e:	b480      	push	{r7}
 8004120:	b085      	sub	sp, #20
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	4013      	ands	r3, r2
 8004140:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	b29b      	uxth	r3, r3
}
 8004146:	4618      	mov	r0, r3
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004152:	b480      	push	{r7}
 8004154:	b085      	sub	sp, #20
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
 800415a:	460b      	mov	r3, r1
 800415c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004162:	78fb      	ldrb	r3, [r7, #3]
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	4413      	add	r3, r2
 800416a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	4013      	ands	r3, r2
 800417e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004180:	68bb      	ldr	r3, [r7, #8]
}
 8004182:	4618      	mov	r0, r3
 8004184:	3714      	adds	r7, #20
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800418e:	b480      	push	{r7}
 8004190:	b087      	sub	sp, #28
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
 8004196:	460b      	mov	r3, r1
 8004198:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80041b2:	78fb      	ldrb	r3, [r7, #3]
 80041b4:	f003 030f 	and.w	r3, r3, #15
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	fa22 f303 	lsr.w	r3, r2, r3
 80041be:	01db      	lsls	r3, r3, #7
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80041c8:	78fb      	ldrb	r3, [r7, #3]
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	4013      	ands	r3, r2
 80041da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80041dc:	68bb      	ldr	r3, [r7, #8]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	371c      	adds	r7, #28
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b083      	sub	sp, #12
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	f003 0301 	and.w	r3, r3, #1
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004206:	b480      	push	{r7}
 8004208:	b085      	sub	sp, #20
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004220:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004224:	f023 0307 	bic.w	r3, r3, #7
 8004228:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800423c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800424c:	b480      	push	{r7}
 800424e:	b087      	sub	sp, #28
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	460b      	mov	r3, r1
 8004256:	607a      	str	r2, [r7, #4]
 8004258:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	333c      	adds	r3, #60	; 0x3c
 8004262:	3304      	adds	r3, #4
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	4a26      	ldr	r2, [pc, #152]	; (8004304 <USB_EP0_OutStart+0xb8>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d90a      	bls.n	8004286 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800427c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004280:	d101      	bne.n	8004286 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004282:	2300      	movs	r3, #0
 8004284:	e037      	b.n	80042f6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800428c:	461a      	mov	r2, r3
 800428e:	2300      	movs	r3, #0
 8004290:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042b4:	f043 0318 	orr.w	r3, r3, #24
 80042b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042c8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80042cc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80042ce:	7afb      	ldrb	r3, [r7, #11]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d10f      	bne.n	80042f4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042da:	461a      	mov	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042ee:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80042f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	371c      	adds	r7, #28
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	4f54300a 	.word	0x4f54300a

08004308 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004310:	2300      	movs	r3, #0
 8004312:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	3301      	adds	r3, #1
 8004318:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	4a13      	ldr	r2, [pc, #76]	; (800436c <USB_CoreReset+0x64>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d901      	bls.n	8004326 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e01b      	b.n	800435e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	2b00      	cmp	r3, #0
 800432c:	daf2      	bge.n	8004314 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800432e:	2300      	movs	r3, #0
 8004330:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	f043 0201 	orr.w	r2, r3, #1
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	3301      	adds	r3, #1
 8004342:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4a09      	ldr	r2, [pc, #36]	; (800436c <USB_CoreReset+0x64>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d901      	bls.n	8004350 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e006      	b.n	800435e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b01      	cmp	r3, #1
 800435a:	d0f0      	beq.n	800433e <USB_CoreReset+0x36>

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	00030d40 	.word	0x00030d40

08004370 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	460b      	mov	r3, r1
 800437a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800437c:	2010      	movs	r0, #16
 800437e:	f002 f8e1 	bl	8006544 <USBD_static_malloc>
 8004382:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d109      	bne.n	800439e <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	32b0      	adds	r2, #176	; 0xb0
 8004394:	2100      	movs	r1, #0
 8004396:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800439a:	2302      	movs	r3, #2
 800439c:	e048      	b.n	8004430 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	32b0      	adds	r2, #176	; 0xb0
 80043a8:	68f9      	ldr	r1, [r7, #12]
 80043aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	32b0      	adds	r2, #176	; 0xb0
 80043b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	7c1b      	ldrb	r3, [r3, #16]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10d      	bne.n	80043e6 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 80043ca:	4b1b      	ldr	r3, [pc, #108]	; (8004438 <USBD_HID_Init+0xc8>)
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	f003 020f 	and.w	r2, r3, #15
 80043d2:	6879      	ldr	r1, [r7, #4]
 80043d4:	4613      	mov	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	440b      	add	r3, r1
 80043de:	3326      	adds	r3, #38	; 0x26
 80043e0:	2207      	movs	r2, #7
 80043e2:	801a      	strh	r2, [r3, #0]
 80043e4:	e00c      	b.n	8004400 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 80043e6:	4b14      	ldr	r3, [pc, #80]	; (8004438 <USBD_HID_Init+0xc8>)
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	f003 020f 	and.w	r2, r3, #15
 80043ee:	6879      	ldr	r1, [r7, #4]
 80043f0:	4613      	mov	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	440b      	add	r3, r1
 80043fa:	3326      	adds	r3, #38	; 0x26
 80043fc:	220a      	movs	r2, #10
 80043fe:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8004400:	4b0d      	ldr	r3, [pc, #52]	; (8004438 <USBD_HID_Init+0xc8>)
 8004402:	7819      	ldrb	r1, [r3, #0]
 8004404:	2304      	movs	r3, #4
 8004406:	2203      	movs	r2, #3
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f001 ff8a 	bl	8006322 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 800440e:	4b0a      	ldr	r3, [pc, #40]	; (8004438 <USBD_HID_Init+0xc8>)
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	f003 020f 	and.w	r2, r3, #15
 8004416:	6879      	ldr	r1, [r7, #4]
 8004418:	4613      	mov	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	440b      	add	r3, r1
 8004422:	3324      	adds	r3, #36	; 0x24
 8004424:	2201      	movs	r2, #1
 8004426:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	200000ca 	.word	0x200000ca

0800443c <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	460b      	mov	r3, r1
 8004446:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8004448:	4b1f      	ldr	r3, [pc, #124]	; (80044c8 <USBD_HID_DeInit+0x8c>)
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	4619      	mov	r1, r3
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f001 ff8d 	bl	800636e <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8004454:	4b1c      	ldr	r3, [pc, #112]	; (80044c8 <USBD_HID_DeInit+0x8c>)
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	f003 020f 	and.w	r2, r3, #15
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	4613      	mov	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	440b      	add	r3, r1
 8004468:	3324      	adds	r3, #36	; 0x24
 800446a:	2200      	movs	r2, #0
 800446c:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 800446e:	4b16      	ldr	r3, [pc, #88]	; (80044c8 <USBD_HID_DeInit+0x8c>)
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	f003 020f 	and.w	r2, r3, #15
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	4613      	mov	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4413      	add	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	440b      	add	r3, r1
 8004482:	3326      	adds	r3, #38	; 0x26
 8004484:	2200      	movs	r2, #0
 8004486:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	32b0      	adds	r2, #176	; 0xb0
 8004492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d011      	beq.n	80044be <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	32b0      	adds	r2, #176	; 0xb0
 80044a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f002 f859 	bl	8006560 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	32b0      	adds	r2, #176	; 0xb0
 80044b8:	2100      	movs	r1, #0
 80044ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	200000ca 	.word	0x200000ca

080044cc <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	32b0      	adds	r2, #176	; 0xb0
 80044e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044e4:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80044e6:	2300      	movs	r3, #0
 80044e8:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80044ea:	2300      	movs	r3, #0
 80044ec:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e0e8      	b.n	80046ca <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004500:	2b00      	cmp	r3, #0
 8004502:	d046      	beq.n	8004592 <USBD_HID_Setup+0xc6>
 8004504:	2b20      	cmp	r3, #32
 8004506:	f040 80d8 	bne.w	80046ba <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	785b      	ldrb	r3, [r3, #1]
 800450e:	3b02      	subs	r3, #2
 8004510:	2b09      	cmp	r3, #9
 8004512:	d836      	bhi.n	8004582 <USBD_HID_Setup+0xb6>
 8004514:	a201      	add	r2, pc, #4	; (adr r2, 800451c <USBD_HID_Setup+0x50>)
 8004516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451a:	bf00      	nop
 800451c:	08004573 	.word	0x08004573
 8004520:	08004553 	.word	0x08004553
 8004524:	08004583 	.word	0x08004583
 8004528:	08004583 	.word	0x08004583
 800452c:	08004583 	.word	0x08004583
 8004530:	08004583 	.word	0x08004583
 8004534:	08004583 	.word	0x08004583
 8004538:	08004583 	.word	0x08004583
 800453c:	08004561 	.word	0x08004561
 8004540:	08004545 	.word	0x08004545
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	885b      	ldrh	r3, [r3, #2]
 8004548:	b2db      	uxtb	r3, r3
 800454a:	461a      	mov	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	601a      	str	r2, [r3, #0]
          break;
 8004550:	e01e      	b.n	8004590 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2201      	movs	r2, #1
 8004556:	4619      	mov	r1, r3
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f001 fba5 	bl	8005ca8 <USBD_CtlSendData>
          break;
 800455e:	e017      	b.n	8004590 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	885b      	ldrh	r3, [r3, #2]
 8004564:	0a1b      	lsrs	r3, r3, #8
 8004566:	b29b      	uxth	r3, r3
 8004568:	b2db      	uxtb	r3, r3
 800456a:	461a      	mov	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	605a      	str	r2, [r3, #4]
          break;
 8004570:	e00e      	b.n	8004590 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	3304      	adds	r3, #4
 8004576:	2201      	movs	r2, #1
 8004578:	4619      	mov	r1, r3
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f001 fb94 	bl	8005ca8 <USBD_CtlSendData>
          break;
 8004580:	e006      	b.n	8004590 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8004582:	6839      	ldr	r1, [r7, #0]
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f001 fb1e 	bl	8005bc6 <USBD_CtlError>
          ret = USBD_FAIL;
 800458a:	2303      	movs	r3, #3
 800458c:	75fb      	strb	r3, [r7, #23]
          break;
 800458e:	bf00      	nop
      }
      break;
 8004590:	e09a      	b.n	80046c8 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	785b      	ldrb	r3, [r3, #1]
 8004596:	2b0b      	cmp	r3, #11
 8004598:	f200 8086 	bhi.w	80046a8 <USBD_HID_Setup+0x1dc>
 800459c:	a201      	add	r2, pc, #4	; (adr r2, 80045a4 <USBD_HID_Setup+0xd8>)
 800459e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a2:	bf00      	nop
 80045a4:	080045d5 	.word	0x080045d5
 80045a8:	080046b7 	.word	0x080046b7
 80045ac:	080046a9 	.word	0x080046a9
 80045b0:	080046a9 	.word	0x080046a9
 80045b4:	080046a9 	.word	0x080046a9
 80045b8:	080046a9 	.word	0x080046a9
 80045bc:	080045ff 	.word	0x080045ff
 80045c0:	080046a9 	.word	0x080046a9
 80045c4:	080046a9 	.word	0x080046a9
 80045c8:	080046a9 	.word	0x080046a9
 80045cc:	08004657 	.word	0x08004657
 80045d0:	08004681 	.word	0x08004681
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b03      	cmp	r3, #3
 80045de:	d107      	bne.n	80045f0 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80045e0:	f107 030a 	add.w	r3, r7, #10
 80045e4:	2202      	movs	r2, #2
 80045e6:	4619      	mov	r1, r3
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f001 fb5d 	bl	8005ca8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80045ee:	e063      	b.n	80046b8 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80045f0:	6839      	ldr	r1, [r7, #0]
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f001 fae7 	bl	8005bc6 <USBD_CtlError>
            ret = USBD_FAIL;
 80045f8:	2303      	movs	r3, #3
 80045fa:	75fb      	strb	r3, [r7, #23]
          break;
 80045fc:	e05c      	b.n	80046b8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	885b      	ldrh	r3, [r3, #2]
 8004602:	0a1b      	lsrs	r3, r3, #8
 8004604:	b29b      	uxth	r3, r3
 8004606:	2b22      	cmp	r3, #34	; 0x22
 8004608:	d108      	bne.n	800461c <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	88db      	ldrh	r3, [r3, #6]
 800460e:	2b4a      	cmp	r3, #74	; 0x4a
 8004610:	bf28      	it	cs
 8004612:	234a      	movcs	r3, #74	; 0x4a
 8004614:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8004616:	4b2f      	ldr	r3, [pc, #188]	; (80046d4 <USBD_HID_Setup+0x208>)
 8004618:	613b      	str	r3, [r7, #16]
 800461a:	e015      	b.n	8004648 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	885b      	ldrh	r3, [r3, #2]
 8004620:	0a1b      	lsrs	r3, r3, #8
 8004622:	b29b      	uxth	r3, r3
 8004624:	2b21      	cmp	r3, #33	; 0x21
 8004626:	d108      	bne.n	800463a <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8004628:	4b2b      	ldr	r3, [pc, #172]	; (80046d8 <USBD_HID_Setup+0x20c>)
 800462a:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	88db      	ldrh	r3, [r3, #6]
 8004630:	2b09      	cmp	r3, #9
 8004632:	bf28      	it	cs
 8004634:	2309      	movcs	r3, #9
 8004636:	82bb      	strh	r3, [r7, #20]
 8004638:	e006      	b.n	8004648 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800463a:	6839      	ldr	r1, [r7, #0]
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f001 fac2 	bl	8005bc6 <USBD_CtlError>
            ret = USBD_FAIL;
 8004642:	2303      	movs	r3, #3
 8004644:	75fb      	strb	r3, [r7, #23]
            break;
 8004646:	e037      	b.n	80046b8 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8004648:	8abb      	ldrh	r3, [r7, #20]
 800464a:	461a      	mov	r2, r3
 800464c:	6939      	ldr	r1, [r7, #16]
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f001 fb2a 	bl	8005ca8 <USBD_CtlSendData>
          break;
 8004654:	e030      	b.n	80046b8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b03      	cmp	r3, #3
 8004660:	d107      	bne.n	8004672 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	3308      	adds	r3, #8
 8004666:	2201      	movs	r2, #1
 8004668:	4619      	mov	r1, r3
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f001 fb1c 	bl	8005ca8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004670:	e022      	b.n	80046b8 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8004672:	6839      	ldr	r1, [r7, #0]
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f001 faa6 	bl	8005bc6 <USBD_CtlError>
            ret = USBD_FAIL;
 800467a:	2303      	movs	r3, #3
 800467c:	75fb      	strb	r3, [r7, #23]
          break;
 800467e:	e01b      	b.n	80046b8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b03      	cmp	r3, #3
 800468a:	d106      	bne.n	800469a <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	885b      	ldrh	r3, [r3, #2]
 8004690:	b2db      	uxtb	r3, r3
 8004692:	461a      	mov	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004698:	e00e      	b.n	80046b8 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800469a:	6839      	ldr	r1, [r7, #0]
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f001 fa92 	bl	8005bc6 <USBD_CtlError>
            ret = USBD_FAIL;
 80046a2:	2303      	movs	r3, #3
 80046a4:	75fb      	strb	r3, [r7, #23]
          break;
 80046a6:	e007      	b.n	80046b8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80046a8:	6839      	ldr	r1, [r7, #0]
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f001 fa8b 	bl	8005bc6 <USBD_CtlError>
          ret = USBD_FAIL;
 80046b0:	2303      	movs	r3, #3
 80046b2:	75fb      	strb	r3, [r7, #23]
          break;
 80046b4:	e000      	b.n	80046b8 <USBD_HID_Setup+0x1ec>
          break;
 80046b6:	bf00      	nop
      }
      break;
 80046b8:	e006      	b.n	80046c8 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 80046ba:	6839      	ldr	r1, [r7, #0]
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f001 fa82 	bl	8005bc6 <USBD_CtlError>
      ret = USBD_FAIL;
 80046c2:	2303      	movs	r3, #3
 80046c4:	75fb      	strb	r3, [r7, #23]
      break;
 80046c6:	bf00      	nop
  }

  return (uint8_t)ret;
 80046c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3718      	adds	r7, #24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	20000080 	.word	0x20000080
 80046d8:	20000068 	.word	0x20000068

080046dc <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80046e4:	2181      	movs	r1, #129	; 0x81
 80046e6:	4809      	ldr	r0, [pc, #36]	; (800470c <USBD_HID_GetFSCfgDesc+0x30>)
 80046e8:	f000 fc35 	bl	8004f56 <USBD_GetEpDesc>
 80046ec:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d002      	beq.n	80046fa <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	220a      	movs	r2, #10
 80046f8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2222      	movs	r2, #34	; 0x22
 80046fe:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8004700:	4b02      	ldr	r3, [pc, #8]	; (800470c <USBD_HID_GetFSCfgDesc+0x30>)
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	20000044 	.word	0x20000044

08004710 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8004718:	2181      	movs	r1, #129	; 0x81
 800471a:	4809      	ldr	r0, [pc, #36]	; (8004740 <USBD_HID_GetHSCfgDesc+0x30>)
 800471c:	f000 fc1b 	bl	8004f56 <USBD_GetEpDesc>
 8004720:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d002      	beq.n	800472e <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2207      	movs	r2, #7
 800472c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2222      	movs	r2, #34	; 0x22
 8004732:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8004734:	4b02      	ldr	r3, [pc, #8]	; (8004740 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	20000044 	.word	0x20000044

08004744 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800474c:	2181      	movs	r1, #129	; 0x81
 800474e:	4809      	ldr	r0, [pc, #36]	; (8004774 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8004750:	f000 fc01 	bl	8004f56 <USBD_GetEpDesc>
 8004754:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	220a      	movs	r2, #10
 8004760:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2222      	movs	r2, #34	; 0x22
 8004766:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8004768:	4b02      	ldr	r3, [pc, #8]	; (8004774 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	20000044 	.word	0x20000044

08004778 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	460b      	mov	r3, r1
 8004782:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	32b0      	adds	r2, #176	; 0xb0
 800478e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004792:	2200      	movs	r2, #0
 8004794:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	220a      	movs	r2, #10
 80047b0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80047b2:	4b03      	ldr	r3, [pc, #12]	; (80047c0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	20000074 	.word	0x20000074

080047c4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	4613      	mov	r3, r2
 80047d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d101      	bne.n	80047dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80047d8:	2303      	movs	r3, #3
 80047da:	e01f      	b.n	800481c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d003      	beq.n	8004802 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	79fa      	ldrb	r2, [r7, #7]
 800480e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f001 fd1f 	bl	8006254 <USBD_LL_Init>
 8004816:	4603      	mov	r3, r0
 8004818:	75fb      	strb	r3, [r7, #23]

  return ret;
 800481a:	7dfb      	ldrb	r3, [r7, #23]
}
 800481c:	4618      	mov	r0, r3
 800481e:	3718      	adds	r7, #24
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800482e:	2300      	movs	r3, #0
 8004830:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004838:	2303      	movs	r3, #3
 800483a:	e025      	b.n	8004888 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	32ae      	adds	r2, #174	; 0xae
 800484e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00f      	beq.n	8004878 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	32ae      	adds	r2, #174	; 0xae
 8004862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004868:	f107 020e 	add.w	r2, r7, #14
 800486c:	4610      	mov	r0, r2
 800486e:	4798      	blx	r3
 8004870:	4602      	mov	r2, r0
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f001 fd27 	bl	80062ec <USBD_LL_Start>
 800489e:	4603      	mov	r3, r0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80048b0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b084      	sub	sp, #16
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
 80048c6:	460b      	mov	r3, r1
 80048c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80048ca:	2300      	movs	r3, #0
 80048cc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d009      	beq.n	80048ec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	78fa      	ldrb	r2, [r7, #3]
 80048e2:	4611      	mov	r1, r2
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	4798      	blx	r3
 80048e8:	4603      	mov	r3, r0
 80048ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80048ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b084      	sub	sp, #16
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
 80048fe:	460b      	mov	r3, r1
 8004900:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004902:	2300      	movs	r3, #0
 8004904:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	78fa      	ldrb	r2, [r7, #3]
 8004910:	4611      	mov	r1, r2
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	4798      	blx	r3
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d001      	beq.n	8004920 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800491c:	2303      	movs	r3, #3
 800491e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004920:	7bfb      	ldrb	r3, [r7, #15]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b084      	sub	sp, #16
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
 8004932:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800493a:	6839      	ldr	r1, [r7, #0]
 800493c:	4618      	mov	r0, r3
 800493e:	f001 f908 	bl	8005b52 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004950:	461a      	mov	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800495e:	f003 031f 	and.w	r3, r3, #31
 8004962:	2b02      	cmp	r3, #2
 8004964:	d01a      	beq.n	800499c <USBD_LL_SetupStage+0x72>
 8004966:	2b02      	cmp	r3, #2
 8004968:	d822      	bhi.n	80049b0 <USBD_LL_SetupStage+0x86>
 800496a:	2b00      	cmp	r3, #0
 800496c:	d002      	beq.n	8004974 <USBD_LL_SetupStage+0x4a>
 800496e:	2b01      	cmp	r3, #1
 8004970:	d00a      	beq.n	8004988 <USBD_LL_SetupStage+0x5e>
 8004972:	e01d      	b.n	80049b0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800497a:	4619      	mov	r1, r3
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 fb5f 	bl	8005040 <USBD_StdDevReq>
 8004982:	4603      	mov	r3, r0
 8004984:	73fb      	strb	r3, [r7, #15]
      break;
 8004986:	e020      	b.n	80049ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800498e:	4619      	mov	r1, r3
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 fbc7 	bl	8005124 <USBD_StdItfReq>
 8004996:	4603      	mov	r3, r0
 8004998:	73fb      	strb	r3, [r7, #15]
      break;
 800499a:	e016      	b.n	80049ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80049a2:	4619      	mov	r1, r3
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 fc29 	bl	80051fc <USBD_StdEPReq>
 80049aa:	4603      	mov	r3, r0
 80049ac:	73fb      	strb	r3, [r7, #15]
      break;
 80049ae:	e00c      	b.n	80049ca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80049b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	4619      	mov	r1, r3
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f001 fcf4 	bl	80063ac <USBD_LL_StallEP>
 80049c4:	4603      	mov	r3, r0
 80049c6:	73fb      	strb	r3, [r7, #15]
      break;
 80049c8:	bf00      	nop
  }

  return ret;
 80049ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	460b      	mov	r3, r1
 80049de:	607a      	str	r2, [r7, #4]
 80049e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80049e2:	2300      	movs	r3, #0
 80049e4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80049e6:	7afb      	ldrb	r3, [r7, #11]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d16e      	bne.n	8004aca <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80049f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80049fa:	2b03      	cmp	r3, #3
 80049fc:	f040 8098 	bne.w	8004b30 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d913      	bls.n	8004a34 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	689a      	ldr	r2, [r3, #8]
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	1ad2      	subs	r2, r2, r3
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	68da      	ldr	r2, [r3, #12]
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	4293      	cmp	r3, r2
 8004a24:	bf28      	it	cs
 8004a26:	4613      	movcs	r3, r2
 8004a28:	461a      	mov	r2, r3
 8004a2a:	6879      	ldr	r1, [r7, #4]
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f001 f967 	bl	8005d00 <USBD_CtlContinueRx>
 8004a32:	e07d      	b.n	8004b30 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004a3a:	f003 031f 	and.w	r3, r3, #31
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d014      	beq.n	8004a6c <USBD_LL_DataOutStage+0x98>
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d81d      	bhi.n	8004a82 <USBD_LL_DataOutStage+0xae>
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <USBD_LL_DataOutStage+0x7c>
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d003      	beq.n	8004a56 <USBD_LL_DataOutStage+0x82>
 8004a4e:	e018      	b.n	8004a82 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	75bb      	strb	r3, [r7, #22]
            break;
 8004a54:	e018      	b.n	8004a88 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	4619      	mov	r1, r3
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 fa5e 	bl	8004f22 <USBD_CoreFindIF>
 8004a66:	4603      	mov	r3, r0
 8004a68:	75bb      	strb	r3, [r7, #22]
            break;
 8004a6a:	e00d      	b.n	8004a88 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	4619      	mov	r1, r3
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f000 fa60 	bl	8004f3c <USBD_CoreFindEP>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	75bb      	strb	r3, [r7, #22]
            break;
 8004a80:	e002      	b.n	8004a88 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	75bb      	strb	r3, [r7, #22]
            break;
 8004a86:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8004a88:	7dbb      	ldrb	r3, [r7, #22]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d119      	bne.n	8004ac2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b03      	cmp	r3, #3
 8004a98:	d113      	bne.n	8004ac2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004a9a:	7dba      	ldrb	r2, [r7, #22]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	32ae      	adds	r2, #174	; 0xae
 8004aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00b      	beq.n	8004ac2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8004aaa:	7dba      	ldrb	r2, [r7, #22]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004ab2:	7dba      	ldrb	r2, [r7, #22]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	32ae      	adds	r2, #174	; 0xae
 8004ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f001 f92d 	bl	8005d22 <USBD_CtlSendStatus>
 8004ac8:	e032      	b.n	8004b30 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004aca:	7afb      	ldrb	r3, [r7, #11]
 8004acc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f000 fa31 	bl	8004f3c <USBD_CoreFindEP>
 8004ada:	4603      	mov	r3, r0
 8004adc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004ade:	7dbb      	ldrb	r3, [r7, #22]
 8004ae0:	2bff      	cmp	r3, #255	; 0xff
 8004ae2:	d025      	beq.n	8004b30 <USBD_LL_DataOutStage+0x15c>
 8004ae4:	7dbb      	ldrb	r3, [r7, #22]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d122      	bne.n	8004b30 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b03      	cmp	r3, #3
 8004af4:	d117      	bne.n	8004b26 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8004af6:	7dba      	ldrb	r2, [r7, #22]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	32ae      	adds	r2, #174	; 0xae
 8004afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00f      	beq.n	8004b26 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8004b06:	7dba      	ldrb	r2, [r7, #22]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004b0e:	7dba      	ldrb	r2, [r7, #22]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	32ae      	adds	r2, #174	; 0xae
 8004b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	7afa      	ldrb	r2, [r7, #11]
 8004b1c:	4611      	mov	r1, r2
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	4798      	blx	r3
 8004b22:	4603      	mov	r3, r0
 8004b24:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8004b26:	7dfb      	ldrb	r3, [r7, #23]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8004b2c:	7dfb      	ldrb	r3, [r7, #23]
 8004b2e:	e000      	b.n	8004b32 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3718      	adds	r7, #24
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b086      	sub	sp, #24
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	60f8      	str	r0, [r7, #12]
 8004b42:	460b      	mov	r3, r1
 8004b44:	607a      	str	r2, [r7, #4]
 8004b46:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8004b48:	7afb      	ldrb	r3, [r7, #11]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d16f      	bne.n	8004c2e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	3314      	adds	r3, #20
 8004b52:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d15a      	bne.n	8004c14 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	689a      	ldr	r2, [r3, #8]
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d914      	bls.n	8004b94 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	689a      	ldr	r2, [r3, #8]
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	1ad2      	subs	r2, r2, r3
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	6879      	ldr	r1, [r7, #4]
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f001 f8ac 	bl	8005cde <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004b86:	2300      	movs	r3, #0
 8004b88:	2200      	movs	r2, #0
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f001 fcb7 	bl	8006500 <USBD_LL_PrepareReceive>
 8004b92:	e03f      	b.n	8004c14 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	68da      	ldr	r2, [r3, #12]
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d11c      	bne.n	8004bda <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d316      	bcc.n	8004bda <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d20f      	bcs.n	8004bda <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004bba:	2200      	movs	r2, #0
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f001 f88d 	bl	8005cde <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004bcc:	2300      	movs	r3, #0
 8004bce:	2200      	movs	r2, #0
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f001 fc94 	bl	8006500 <USBD_LL_PrepareReceive>
 8004bd8:	e01c      	b.n	8004c14 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b03      	cmp	r3, #3
 8004be4:	d10f      	bne.n	8004c06 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d009      	beq.n	8004c06 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004c06:	2180      	movs	r1, #128	; 0x80
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f001 fbcf 	bl	80063ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f001 f89a 	bl	8005d48 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d03a      	beq.n	8004c94 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f7ff fe42 	bl	80048a8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004c2c:	e032      	b.n	8004c94 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8004c2e:	7afb      	ldrb	r3, [r7, #11]
 8004c30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	4619      	mov	r1, r3
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 f97f 	bl	8004f3c <USBD_CoreFindEP>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004c42:	7dfb      	ldrb	r3, [r7, #23]
 8004c44:	2bff      	cmp	r3, #255	; 0xff
 8004c46:	d025      	beq.n	8004c94 <USBD_LL_DataInStage+0x15a>
 8004c48:	7dfb      	ldrb	r3, [r7, #23]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d122      	bne.n	8004c94 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b03      	cmp	r3, #3
 8004c58:	d11c      	bne.n	8004c94 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8004c5a:	7dfa      	ldrb	r2, [r7, #23]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	32ae      	adds	r2, #174	; 0xae
 8004c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d014      	beq.n	8004c94 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8004c6a:	7dfa      	ldrb	r2, [r7, #23]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8004c72:	7dfa      	ldrb	r2, [r7, #23]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	32ae      	adds	r2, #174	; 0xae
 8004c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	7afa      	ldrb	r2, [r7, #11]
 8004c80:	4611      	mov	r1, r2
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	4798      	blx	r3
 8004c86:	4603      	mov	r3, r0
 8004c88:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8004c8a:	7dbb      	ldrb	r3, [r7, #22]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8004c90:	7dbb      	ldrb	r3, [r7, #22]
 8004c92:	e000      	b.n	8004c96 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3718      	adds	r7, #24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b084      	sub	sp, #16
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d014      	beq.n	8004d04 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00e      	beq.n	8004d04 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	6852      	ldr	r2, [r2, #4]
 8004cf2:	b2d2      	uxtb	r2, r2
 8004cf4:	4611      	mov	r1, r2
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	4798      	blx	r3
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8004d00:	2303      	movs	r3, #3
 8004d02:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004d04:	2340      	movs	r3, #64	; 0x40
 8004d06:	2200      	movs	r2, #0
 8004d08:	2100      	movs	r1, #0
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f001 fb09 	bl	8006322 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2240      	movs	r2, #64	; 0x40
 8004d1c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004d20:	2340      	movs	r3, #64	; 0x40
 8004d22:	2200      	movs	r2, #0
 8004d24:	2180      	movs	r1, #128	; 0x80
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f001 fafb 	bl	8006322 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2240      	movs	r2, #64	; 0x40
 8004d36:	621a      	str	r2, [r3, #32]

  return ret;
 8004d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b083      	sub	sp, #12
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	78fa      	ldrb	r2, [r7, #3]
 8004d52:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b083      	sub	sp, #12
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d70:	b2da      	uxtb	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2204      	movs	r2, #4
 8004d7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b083      	sub	sp, #12
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d106      	bne.n	8004db0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8004da8:	b2da      	uxtb	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b082      	sub	sp, #8
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b03      	cmp	r3, #3
 8004dd0:	d110      	bne.n	8004df4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00b      	beq.n	8004df4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004de2:	69db      	ldr	r3, [r3, #28]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d005      	beq.n	8004df4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dee:	69db      	ldr	r3, [r3, #28]
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b082      	sub	sp, #8
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
 8004e06:	460b      	mov	r3, r1
 8004e08:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	32ae      	adds	r2, #174	; 0xae
 8004e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e01c      	b.n	8004e5a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b03      	cmp	r3, #3
 8004e2a:	d115      	bne.n	8004e58 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	32ae      	adds	r2, #174	; 0xae
 8004e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00b      	beq.n	8004e58 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	32ae      	adds	r2, #174	; 0xae
 8004e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e4e:	6a1b      	ldr	r3, [r3, #32]
 8004e50:	78fa      	ldrb	r2, [r7, #3]
 8004e52:	4611      	mov	r1, r2
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3708      	adds	r7, #8
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b082      	sub	sp, #8
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	32ae      	adds	r2, #174	; 0xae
 8004e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d101      	bne.n	8004e84 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e01c      	b.n	8004ebe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b03      	cmp	r3, #3
 8004e8e:	d115      	bne.n	8004ebc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	32ae      	adds	r2, #174	; 0xae
 8004e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00b      	beq.n	8004ebc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	32ae      	adds	r2, #174	; 0xae
 8004eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb4:	78fa      	ldrb	r2, [r7, #3]
 8004eb6:	4611      	mov	r1, r2
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b083      	sub	sp, #12
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00e      	beq.n	8004f18 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	6852      	ldr	r2, [r2, #4]
 8004f06:	b2d2      	uxtb	r2, r2
 8004f08:	4611      	mov	r1, r2
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	4798      	blx	r3
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d001      	beq.n	8004f18 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8004f14:	2303      	movs	r3, #3
 8004f16:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b083      	sub	sp, #12
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8004f2e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	460b      	mov	r3, r1
 8004f46:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8004f48:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b086      	sub	sp, #24
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
 8004f5e:	460b      	mov	r3, r1
 8004f60:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	885b      	ldrh	r3, [r3, #2]
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d920      	bls.n	8004fc0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8004f86:	e013      	b.n	8004fb0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8004f88:	f107 030a 	add.w	r3, r7, #10
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	6978      	ldr	r0, [r7, #20]
 8004f90:	f000 f81b 	bl	8004fca <USBD_GetNextDesc>
 8004f94:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	785b      	ldrb	r3, [r3, #1]
 8004f9a:	2b05      	cmp	r3, #5
 8004f9c:	d108      	bne.n	8004fb0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	789b      	ldrb	r3, [r3, #2]
 8004fa6:	78fa      	ldrb	r2, [r7, #3]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d008      	beq.n	8004fbe <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8004fac:	2300      	movs	r3, #0
 8004fae:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	885b      	ldrh	r3, [r3, #2]
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	897b      	ldrh	r3, [r7, #10]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d8e5      	bhi.n	8004f88 <USBD_GetEpDesc+0x32>
 8004fbc:	e000      	b.n	8004fc0 <USBD_GetEpDesc+0x6a>
          break;
 8004fbe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8004fc0:	693b      	ldr	r3, [r7, #16]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3718      	adds	r7, #24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b085      	sub	sp, #20
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
 8004fd2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	881a      	ldrh	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	4413      	add	r3, r2
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3714      	adds	r7, #20
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005004:	b480      	push	{r7}
 8005006:	b087      	sub	sp, #28
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	3301      	adds	r3, #1
 800501a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005022:	8a3b      	ldrh	r3, [r7, #16]
 8005024:	021b      	lsls	r3, r3, #8
 8005026:	b21a      	sxth	r2, r3
 8005028:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800502c:	4313      	orrs	r3, r2
 800502e:	b21b      	sxth	r3, r3
 8005030:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005032:	89fb      	ldrh	r3, [r7, #14]
}
 8005034:	4618      	mov	r0, r3
 8005036:	371c      	adds	r7, #28
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800504a:	2300      	movs	r3, #0
 800504c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005056:	2b40      	cmp	r3, #64	; 0x40
 8005058:	d005      	beq.n	8005066 <USBD_StdDevReq+0x26>
 800505a:	2b40      	cmp	r3, #64	; 0x40
 800505c:	d857      	bhi.n	800510e <USBD_StdDevReq+0xce>
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00f      	beq.n	8005082 <USBD_StdDevReq+0x42>
 8005062:	2b20      	cmp	r3, #32
 8005064:	d153      	bne.n	800510e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	32ae      	adds	r2, #174	; 0xae
 8005070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	6839      	ldr	r1, [r7, #0]
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	4798      	blx	r3
 800507c:	4603      	mov	r3, r0
 800507e:	73fb      	strb	r3, [r7, #15]
      break;
 8005080:	e04a      	b.n	8005118 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	785b      	ldrb	r3, [r3, #1]
 8005086:	2b09      	cmp	r3, #9
 8005088:	d83b      	bhi.n	8005102 <USBD_StdDevReq+0xc2>
 800508a:	a201      	add	r2, pc, #4	; (adr r2, 8005090 <USBD_StdDevReq+0x50>)
 800508c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005090:	080050e5 	.word	0x080050e5
 8005094:	080050f9 	.word	0x080050f9
 8005098:	08005103 	.word	0x08005103
 800509c:	080050ef 	.word	0x080050ef
 80050a0:	08005103 	.word	0x08005103
 80050a4:	080050c3 	.word	0x080050c3
 80050a8:	080050b9 	.word	0x080050b9
 80050ac:	08005103 	.word	0x08005103
 80050b0:	080050db 	.word	0x080050db
 80050b4:	080050cd 	.word	0x080050cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80050b8:	6839      	ldr	r1, [r7, #0]
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 fa3c 	bl	8005538 <USBD_GetDescriptor>
          break;
 80050c0:	e024      	b.n	800510c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80050c2:	6839      	ldr	r1, [r7, #0]
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 fba1 	bl	800580c <USBD_SetAddress>
          break;
 80050ca:	e01f      	b.n	800510c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80050cc:	6839      	ldr	r1, [r7, #0]
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 fbe0 	bl	8005894 <USBD_SetConfig>
 80050d4:	4603      	mov	r3, r0
 80050d6:	73fb      	strb	r3, [r7, #15]
          break;
 80050d8:	e018      	b.n	800510c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80050da:	6839      	ldr	r1, [r7, #0]
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 fc83 	bl	80059e8 <USBD_GetConfig>
          break;
 80050e2:	e013      	b.n	800510c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80050e4:	6839      	ldr	r1, [r7, #0]
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 fcb4 	bl	8005a54 <USBD_GetStatus>
          break;
 80050ec:	e00e      	b.n	800510c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80050ee:	6839      	ldr	r1, [r7, #0]
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 fce3 	bl	8005abc <USBD_SetFeature>
          break;
 80050f6:	e009      	b.n	800510c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80050f8:	6839      	ldr	r1, [r7, #0]
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 fd07 	bl	8005b0e <USBD_ClrFeature>
          break;
 8005100:	e004      	b.n	800510c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005102:	6839      	ldr	r1, [r7, #0]
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 fd5e 	bl	8005bc6 <USBD_CtlError>
          break;
 800510a:	bf00      	nop
      }
      break;
 800510c:	e004      	b.n	8005118 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800510e:	6839      	ldr	r1, [r7, #0]
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 fd58 	bl	8005bc6 <USBD_CtlError>
      break;
 8005116:	bf00      	nop
  }

  return ret;
 8005118:	7bfb      	ldrb	r3, [r7, #15]
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop

08005124 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800512e:	2300      	movs	r3, #0
 8005130:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800513a:	2b40      	cmp	r3, #64	; 0x40
 800513c:	d005      	beq.n	800514a <USBD_StdItfReq+0x26>
 800513e:	2b40      	cmp	r3, #64	; 0x40
 8005140:	d852      	bhi.n	80051e8 <USBD_StdItfReq+0xc4>
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <USBD_StdItfReq+0x26>
 8005146:	2b20      	cmp	r3, #32
 8005148:	d14e      	bne.n	80051e8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005150:	b2db      	uxtb	r3, r3
 8005152:	3b01      	subs	r3, #1
 8005154:	2b02      	cmp	r3, #2
 8005156:	d840      	bhi.n	80051da <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	889b      	ldrh	r3, [r3, #4]
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b01      	cmp	r3, #1
 8005160:	d836      	bhi.n	80051d0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	889b      	ldrh	r3, [r3, #4]
 8005166:	b2db      	uxtb	r3, r3
 8005168:	4619      	mov	r1, r3
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7ff fed9 	bl	8004f22 <USBD_CoreFindIF>
 8005170:	4603      	mov	r3, r0
 8005172:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005174:	7bbb      	ldrb	r3, [r7, #14]
 8005176:	2bff      	cmp	r3, #255	; 0xff
 8005178:	d01d      	beq.n	80051b6 <USBD_StdItfReq+0x92>
 800517a:	7bbb      	ldrb	r3, [r7, #14]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d11a      	bne.n	80051b6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005180:	7bba      	ldrb	r2, [r7, #14]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	32ae      	adds	r2, #174	; 0xae
 8005186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00f      	beq.n	80051b0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005190:	7bba      	ldrb	r2, [r7, #14]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005198:	7bba      	ldrb	r2, [r7, #14]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	32ae      	adds	r2, #174	; 0xae
 800519e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	6839      	ldr	r1, [r7, #0]
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	4798      	blx	r3
 80051aa:	4603      	mov	r3, r0
 80051ac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80051ae:	e004      	b.n	80051ba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80051b0:	2303      	movs	r3, #3
 80051b2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80051b4:	e001      	b.n	80051ba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80051b6:	2303      	movs	r3, #3
 80051b8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	88db      	ldrh	r3, [r3, #6]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d110      	bne.n	80051e4 <USBD_StdItfReq+0xc0>
 80051c2:	7bfb      	ldrb	r3, [r7, #15]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d10d      	bne.n	80051e4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 fdaa 	bl	8005d22 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80051ce:	e009      	b.n	80051e4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80051d0:	6839      	ldr	r1, [r7, #0]
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 fcf7 	bl	8005bc6 <USBD_CtlError>
          break;
 80051d8:	e004      	b.n	80051e4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80051da:	6839      	ldr	r1, [r7, #0]
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 fcf2 	bl	8005bc6 <USBD_CtlError>
          break;
 80051e2:	e000      	b.n	80051e6 <USBD_StdItfReq+0xc2>
          break;
 80051e4:	bf00      	nop
      }
      break;
 80051e6:	e004      	b.n	80051f2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80051e8:	6839      	ldr	r1, [r7, #0]
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 fceb 	bl	8005bc6 <USBD_CtlError>
      break;
 80051f0:	bf00      	nop
  }

  return ret;
 80051f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005206:	2300      	movs	r3, #0
 8005208:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	889b      	ldrh	r3, [r3, #4]
 800520e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005218:	2b40      	cmp	r3, #64	; 0x40
 800521a:	d007      	beq.n	800522c <USBD_StdEPReq+0x30>
 800521c:	2b40      	cmp	r3, #64	; 0x40
 800521e:	f200 817f 	bhi.w	8005520 <USBD_StdEPReq+0x324>
 8005222:	2b00      	cmp	r3, #0
 8005224:	d02a      	beq.n	800527c <USBD_StdEPReq+0x80>
 8005226:	2b20      	cmp	r3, #32
 8005228:	f040 817a 	bne.w	8005520 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800522c:	7bbb      	ldrb	r3, [r7, #14]
 800522e:	4619      	mov	r1, r3
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f7ff fe83 	bl	8004f3c <USBD_CoreFindEP>
 8005236:	4603      	mov	r3, r0
 8005238:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800523a:	7b7b      	ldrb	r3, [r7, #13]
 800523c:	2bff      	cmp	r3, #255	; 0xff
 800523e:	f000 8174 	beq.w	800552a <USBD_StdEPReq+0x32e>
 8005242:	7b7b      	ldrb	r3, [r7, #13]
 8005244:	2b00      	cmp	r3, #0
 8005246:	f040 8170 	bne.w	800552a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800524a:	7b7a      	ldrb	r2, [r7, #13]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005252:	7b7a      	ldrb	r2, [r7, #13]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	32ae      	adds	r2, #174	; 0xae
 8005258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	2b00      	cmp	r3, #0
 8005260:	f000 8163 	beq.w	800552a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005264:	7b7a      	ldrb	r2, [r7, #13]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	32ae      	adds	r2, #174	; 0xae
 800526a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	6839      	ldr	r1, [r7, #0]
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	4798      	blx	r3
 8005276:	4603      	mov	r3, r0
 8005278:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800527a:	e156      	b.n	800552a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	785b      	ldrb	r3, [r3, #1]
 8005280:	2b03      	cmp	r3, #3
 8005282:	d008      	beq.n	8005296 <USBD_StdEPReq+0x9a>
 8005284:	2b03      	cmp	r3, #3
 8005286:	f300 8145 	bgt.w	8005514 <USBD_StdEPReq+0x318>
 800528a:	2b00      	cmp	r3, #0
 800528c:	f000 809b 	beq.w	80053c6 <USBD_StdEPReq+0x1ca>
 8005290:	2b01      	cmp	r3, #1
 8005292:	d03c      	beq.n	800530e <USBD_StdEPReq+0x112>
 8005294:	e13e      	b.n	8005514 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d002      	beq.n	80052a8 <USBD_StdEPReq+0xac>
 80052a2:	2b03      	cmp	r3, #3
 80052a4:	d016      	beq.n	80052d4 <USBD_StdEPReq+0xd8>
 80052a6:	e02c      	b.n	8005302 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80052a8:	7bbb      	ldrb	r3, [r7, #14]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00d      	beq.n	80052ca <USBD_StdEPReq+0xce>
 80052ae:	7bbb      	ldrb	r3, [r7, #14]
 80052b0:	2b80      	cmp	r3, #128	; 0x80
 80052b2:	d00a      	beq.n	80052ca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80052b4:	7bbb      	ldrb	r3, [r7, #14]
 80052b6:	4619      	mov	r1, r3
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f001 f877 	bl	80063ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80052be:	2180      	movs	r1, #128	; 0x80
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f001 f873 	bl	80063ac <USBD_LL_StallEP>
 80052c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80052c8:	e020      	b.n	800530c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80052ca:	6839      	ldr	r1, [r7, #0]
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 fc7a 	bl	8005bc6 <USBD_CtlError>
              break;
 80052d2:	e01b      	b.n	800530c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	885b      	ldrh	r3, [r3, #2]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10e      	bne.n	80052fa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80052dc:	7bbb      	ldrb	r3, [r7, #14]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00b      	beq.n	80052fa <USBD_StdEPReq+0xfe>
 80052e2:	7bbb      	ldrb	r3, [r7, #14]
 80052e4:	2b80      	cmp	r3, #128	; 0x80
 80052e6:	d008      	beq.n	80052fa <USBD_StdEPReq+0xfe>
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	88db      	ldrh	r3, [r3, #6]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d104      	bne.n	80052fa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80052f0:	7bbb      	ldrb	r3, [r7, #14]
 80052f2:	4619      	mov	r1, r3
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f001 f859 	bl	80063ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 fd11 	bl	8005d22 <USBD_CtlSendStatus>

              break;
 8005300:	e004      	b.n	800530c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005302:	6839      	ldr	r1, [r7, #0]
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 fc5e 	bl	8005bc6 <USBD_CtlError>
              break;
 800530a:	bf00      	nop
          }
          break;
 800530c:	e107      	b.n	800551e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b02      	cmp	r3, #2
 8005318:	d002      	beq.n	8005320 <USBD_StdEPReq+0x124>
 800531a:	2b03      	cmp	r3, #3
 800531c:	d016      	beq.n	800534c <USBD_StdEPReq+0x150>
 800531e:	e04b      	b.n	80053b8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005320:	7bbb      	ldrb	r3, [r7, #14]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00d      	beq.n	8005342 <USBD_StdEPReq+0x146>
 8005326:	7bbb      	ldrb	r3, [r7, #14]
 8005328:	2b80      	cmp	r3, #128	; 0x80
 800532a:	d00a      	beq.n	8005342 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800532c:	7bbb      	ldrb	r3, [r7, #14]
 800532e:	4619      	mov	r1, r3
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f001 f83b 	bl	80063ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005336:	2180      	movs	r1, #128	; 0x80
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f001 f837 	bl	80063ac <USBD_LL_StallEP>
 800533e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005340:	e040      	b.n	80053c4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005342:	6839      	ldr	r1, [r7, #0]
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 fc3e 	bl	8005bc6 <USBD_CtlError>
              break;
 800534a:	e03b      	b.n	80053c4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	885b      	ldrh	r3, [r3, #2]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d136      	bne.n	80053c2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005354:	7bbb      	ldrb	r3, [r7, #14]
 8005356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800535a:	2b00      	cmp	r3, #0
 800535c:	d004      	beq.n	8005368 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800535e:	7bbb      	ldrb	r3, [r7, #14]
 8005360:	4619      	mov	r1, r3
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f001 f841 	bl	80063ea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 fcda 	bl	8005d22 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800536e:	7bbb      	ldrb	r3, [r7, #14]
 8005370:	4619      	mov	r1, r3
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f7ff fde2 	bl	8004f3c <USBD_CoreFindEP>
 8005378:	4603      	mov	r3, r0
 800537a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800537c:	7b7b      	ldrb	r3, [r7, #13]
 800537e:	2bff      	cmp	r3, #255	; 0xff
 8005380:	d01f      	beq.n	80053c2 <USBD_StdEPReq+0x1c6>
 8005382:	7b7b      	ldrb	r3, [r7, #13]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d11c      	bne.n	80053c2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005388:	7b7a      	ldrb	r2, [r7, #13]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005390:	7b7a      	ldrb	r2, [r7, #13]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	32ae      	adds	r2, #174	; 0xae
 8005396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d010      	beq.n	80053c2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80053a0:	7b7a      	ldrb	r2, [r7, #13]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	32ae      	adds	r2, #174	; 0xae
 80053a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	6839      	ldr	r1, [r7, #0]
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	4798      	blx	r3
 80053b2:	4603      	mov	r3, r0
 80053b4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80053b6:	e004      	b.n	80053c2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80053b8:	6839      	ldr	r1, [r7, #0]
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 fc03 	bl	8005bc6 <USBD_CtlError>
              break;
 80053c0:	e000      	b.n	80053c4 <USBD_StdEPReq+0x1c8>
              break;
 80053c2:	bf00      	nop
          }
          break;
 80053c4:	e0ab      	b.n	800551e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d002      	beq.n	80053d8 <USBD_StdEPReq+0x1dc>
 80053d2:	2b03      	cmp	r3, #3
 80053d4:	d032      	beq.n	800543c <USBD_StdEPReq+0x240>
 80053d6:	e097      	b.n	8005508 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80053d8:	7bbb      	ldrb	r3, [r7, #14]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d007      	beq.n	80053ee <USBD_StdEPReq+0x1f2>
 80053de:	7bbb      	ldrb	r3, [r7, #14]
 80053e0:	2b80      	cmp	r3, #128	; 0x80
 80053e2:	d004      	beq.n	80053ee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80053e4:	6839      	ldr	r1, [r7, #0]
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 fbed 	bl	8005bc6 <USBD_CtlError>
                break;
 80053ec:	e091      	b.n	8005512 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80053ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	da0b      	bge.n	800540e <USBD_StdEPReq+0x212>
 80053f6:	7bbb      	ldrb	r3, [r7, #14]
 80053f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053fc:	4613      	mov	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	4413      	add	r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	3310      	adds	r3, #16
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	4413      	add	r3, r2
 800540a:	3304      	adds	r3, #4
 800540c:	e00b      	b.n	8005426 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800540e:	7bbb      	ldrb	r3, [r7, #14]
 8005410:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005414:	4613      	mov	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	4413      	add	r3, r2
 8005424:	3304      	adds	r3, #4
 8005426:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	2200      	movs	r2, #0
 800542c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	2202      	movs	r2, #2
 8005432:	4619      	mov	r1, r3
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 fc37 	bl	8005ca8 <USBD_CtlSendData>
              break;
 800543a:	e06a      	b.n	8005512 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800543c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005440:	2b00      	cmp	r3, #0
 8005442:	da11      	bge.n	8005468 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005444:	7bbb      	ldrb	r3, [r7, #14]
 8005446:	f003 020f 	and.w	r2, r3, #15
 800544a:	6879      	ldr	r1, [r7, #4]
 800544c:	4613      	mov	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	440b      	add	r3, r1
 8005456:	3324      	adds	r3, #36	; 0x24
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d117      	bne.n	800548e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800545e:	6839      	ldr	r1, [r7, #0]
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 fbb0 	bl	8005bc6 <USBD_CtlError>
                  break;
 8005466:	e054      	b.n	8005512 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005468:	7bbb      	ldrb	r3, [r7, #14]
 800546a:	f003 020f 	and.w	r2, r3, #15
 800546e:	6879      	ldr	r1, [r7, #4]
 8005470:	4613      	mov	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	440b      	add	r3, r1
 800547a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800547e:	881b      	ldrh	r3, [r3, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d104      	bne.n	800548e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005484:	6839      	ldr	r1, [r7, #0]
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 fb9d 	bl	8005bc6 <USBD_CtlError>
                  break;
 800548c:	e041      	b.n	8005512 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800548e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005492:	2b00      	cmp	r3, #0
 8005494:	da0b      	bge.n	80054ae <USBD_StdEPReq+0x2b2>
 8005496:	7bbb      	ldrb	r3, [r7, #14]
 8005498:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800549c:	4613      	mov	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	3310      	adds	r3, #16
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	4413      	add	r3, r2
 80054aa:	3304      	adds	r3, #4
 80054ac:	e00b      	b.n	80054c6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80054ae:	7bbb      	ldrb	r3, [r7, #14]
 80054b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80054b4:	4613      	mov	r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4413      	add	r3, r2
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	4413      	add	r3, r2
 80054c4:	3304      	adds	r3, #4
 80054c6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80054c8:	7bbb      	ldrb	r3, [r7, #14]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d002      	beq.n	80054d4 <USBD_StdEPReq+0x2d8>
 80054ce:	7bbb      	ldrb	r3, [r7, #14]
 80054d0:	2b80      	cmp	r3, #128	; 0x80
 80054d2:	d103      	bne.n	80054dc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	2200      	movs	r2, #0
 80054d8:	601a      	str	r2, [r3, #0]
 80054da:	e00e      	b.n	80054fa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80054dc:	7bbb      	ldrb	r3, [r7, #14]
 80054de:	4619      	mov	r1, r3
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 ffa1 	bl	8006428 <USBD_LL_IsStallEP>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d003      	beq.n	80054f4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	2201      	movs	r2, #1
 80054f0:	601a      	str	r2, [r3, #0]
 80054f2:	e002      	b.n	80054fa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	2200      	movs	r2, #0
 80054f8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	2202      	movs	r2, #2
 80054fe:	4619      	mov	r1, r3
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 fbd1 	bl	8005ca8 <USBD_CtlSendData>
              break;
 8005506:	e004      	b.n	8005512 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005508:	6839      	ldr	r1, [r7, #0]
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 fb5b 	bl	8005bc6 <USBD_CtlError>
              break;
 8005510:	bf00      	nop
          }
          break;
 8005512:	e004      	b.n	800551e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005514:	6839      	ldr	r1, [r7, #0]
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 fb55 	bl	8005bc6 <USBD_CtlError>
          break;
 800551c:	bf00      	nop
      }
      break;
 800551e:	e005      	b.n	800552c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005520:	6839      	ldr	r1, [r7, #0]
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 fb4f 	bl	8005bc6 <USBD_CtlError>
      break;
 8005528:	e000      	b.n	800552c <USBD_StdEPReq+0x330>
      break;
 800552a:	bf00      	nop
  }

  return ret;
 800552c:	7bfb      	ldrb	r3, [r7, #15]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
	...

08005538 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005542:	2300      	movs	r3, #0
 8005544:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005546:	2300      	movs	r3, #0
 8005548:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800554a:	2300      	movs	r3, #0
 800554c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	885b      	ldrh	r3, [r3, #2]
 8005552:	0a1b      	lsrs	r3, r3, #8
 8005554:	b29b      	uxth	r3, r3
 8005556:	3b01      	subs	r3, #1
 8005558:	2b06      	cmp	r3, #6
 800555a:	f200 8128 	bhi.w	80057ae <USBD_GetDescriptor+0x276>
 800555e:	a201      	add	r2, pc, #4	; (adr r2, 8005564 <USBD_GetDescriptor+0x2c>)
 8005560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005564:	08005581 	.word	0x08005581
 8005568:	08005599 	.word	0x08005599
 800556c:	080055d9 	.word	0x080055d9
 8005570:	080057af 	.word	0x080057af
 8005574:	080057af 	.word	0x080057af
 8005578:	0800574f 	.word	0x0800574f
 800557c:	0800577b 	.word	0x0800577b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	7c12      	ldrb	r2, [r2, #16]
 800558c:	f107 0108 	add.w	r1, r7, #8
 8005590:	4610      	mov	r0, r2
 8005592:	4798      	blx	r3
 8005594:	60f8      	str	r0, [r7, #12]
      break;
 8005596:	e112      	b.n	80057be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	7c1b      	ldrb	r3, [r3, #16]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10d      	bne.n	80055bc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a8:	f107 0208 	add.w	r2, r7, #8
 80055ac:	4610      	mov	r0, r2
 80055ae:	4798      	blx	r3
 80055b0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	3301      	adds	r3, #1
 80055b6:	2202      	movs	r2, #2
 80055b8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80055ba:	e100      	b.n	80057be <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c4:	f107 0208 	add.w	r2, r7, #8
 80055c8:	4610      	mov	r0, r2
 80055ca:	4798      	blx	r3
 80055cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	3301      	adds	r3, #1
 80055d2:	2202      	movs	r2, #2
 80055d4:	701a      	strb	r2, [r3, #0]
      break;
 80055d6:	e0f2      	b.n	80057be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	885b      	ldrh	r3, [r3, #2]
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b05      	cmp	r3, #5
 80055e0:	f200 80ac 	bhi.w	800573c <USBD_GetDescriptor+0x204>
 80055e4:	a201      	add	r2, pc, #4	; (adr r2, 80055ec <USBD_GetDescriptor+0xb4>)
 80055e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ea:	bf00      	nop
 80055ec:	08005605 	.word	0x08005605
 80055f0:	08005639 	.word	0x08005639
 80055f4:	0800566d 	.word	0x0800566d
 80055f8:	080056a1 	.word	0x080056a1
 80055fc:	080056d5 	.word	0x080056d5
 8005600:	08005709 	.word	0x08005709
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00b      	beq.n	8005628 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	7c12      	ldrb	r2, [r2, #16]
 800561c:	f107 0108 	add.w	r1, r7, #8
 8005620:	4610      	mov	r0, r2
 8005622:	4798      	blx	r3
 8005624:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005626:	e091      	b.n	800574c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005628:	6839      	ldr	r1, [r7, #0]
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 facb 	bl	8005bc6 <USBD_CtlError>
            err++;
 8005630:	7afb      	ldrb	r3, [r7, #11]
 8005632:	3301      	adds	r3, #1
 8005634:	72fb      	strb	r3, [r7, #11]
          break;
 8005636:	e089      	b.n	800574c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00b      	beq.n	800565c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	7c12      	ldrb	r2, [r2, #16]
 8005650:	f107 0108 	add.w	r1, r7, #8
 8005654:	4610      	mov	r0, r2
 8005656:	4798      	blx	r3
 8005658:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800565a:	e077      	b.n	800574c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800565c:	6839      	ldr	r1, [r7, #0]
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 fab1 	bl	8005bc6 <USBD_CtlError>
            err++;
 8005664:	7afb      	ldrb	r3, [r7, #11]
 8005666:	3301      	adds	r3, #1
 8005668:	72fb      	strb	r3, [r7, #11]
          break;
 800566a:	e06f      	b.n	800574c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00b      	beq.n	8005690 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	7c12      	ldrb	r2, [r2, #16]
 8005684:	f107 0108 	add.w	r1, r7, #8
 8005688:	4610      	mov	r0, r2
 800568a:	4798      	blx	r3
 800568c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800568e:	e05d      	b.n	800574c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005690:	6839      	ldr	r1, [r7, #0]
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 fa97 	bl	8005bc6 <USBD_CtlError>
            err++;
 8005698:	7afb      	ldrb	r3, [r7, #11]
 800569a:	3301      	adds	r3, #1
 800569c:	72fb      	strb	r3, [r7, #11]
          break;
 800569e:	e055      	b.n	800574c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00b      	beq.n	80056c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	7c12      	ldrb	r2, [r2, #16]
 80056b8:	f107 0108 	add.w	r1, r7, #8
 80056bc:	4610      	mov	r0, r2
 80056be:	4798      	blx	r3
 80056c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80056c2:	e043      	b.n	800574c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80056c4:	6839      	ldr	r1, [r7, #0]
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 fa7d 	bl	8005bc6 <USBD_CtlError>
            err++;
 80056cc:	7afb      	ldrb	r3, [r7, #11]
 80056ce:	3301      	adds	r3, #1
 80056d0:	72fb      	strb	r3, [r7, #11]
          break;
 80056d2:	e03b      	b.n	800574c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056da:	695b      	ldr	r3, [r3, #20]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00b      	beq.n	80056f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056e6:	695b      	ldr	r3, [r3, #20]
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	7c12      	ldrb	r2, [r2, #16]
 80056ec:	f107 0108 	add.w	r1, r7, #8
 80056f0:	4610      	mov	r0, r2
 80056f2:	4798      	blx	r3
 80056f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80056f6:	e029      	b.n	800574c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80056f8:	6839      	ldr	r1, [r7, #0]
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 fa63 	bl	8005bc6 <USBD_CtlError>
            err++;
 8005700:	7afb      	ldrb	r3, [r7, #11]
 8005702:	3301      	adds	r3, #1
 8005704:	72fb      	strb	r3, [r7, #11]
          break;
 8005706:	e021      	b.n	800574c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00b      	beq.n	800572c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	7c12      	ldrb	r2, [r2, #16]
 8005720:	f107 0108 	add.w	r1, r7, #8
 8005724:	4610      	mov	r0, r2
 8005726:	4798      	blx	r3
 8005728:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800572a:	e00f      	b.n	800574c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800572c:	6839      	ldr	r1, [r7, #0]
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 fa49 	bl	8005bc6 <USBD_CtlError>
            err++;
 8005734:	7afb      	ldrb	r3, [r7, #11]
 8005736:	3301      	adds	r3, #1
 8005738:	72fb      	strb	r3, [r7, #11]
          break;
 800573a:	e007      	b.n	800574c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800573c:	6839      	ldr	r1, [r7, #0]
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 fa41 	bl	8005bc6 <USBD_CtlError>
          err++;
 8005744:	7afb      	ldrb	r3, [r7, #11]
 8005746:	3301      	adds	r3, #1
 8005748:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800574a:	bf00      	nop
      }
      break;
 800574c:	e037      	b.n	80057be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	7c1b      	ldrb	r3, [r3, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d109      	bne.n	800576a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800575c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800575e:	f107 0208 	add.w	r2, r7, #8
 8005762:	4610      	mov	r0, r2
 8005764:	4798      	blx	r3
 8005766:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005768:	e029      	b.n	80057be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800576a:	6839      	ldr	r1, [r7, #0]
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 fa2a 	bl	8005bc6 <USBD_CtlError>
        err++;
 8005772:	7afb      	ldrb	r3, [r7, #11]
 8005774:	3301      	adds	r3, #1
 8005776:	72fb      	strb	r3, [r7, #11]
      break;
 8005778:	e021      	b.n	80057be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	7c1b      	ldrb	r3, [r3, #16]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10d      	bne.n	800579e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578a:	f107 0208 	add.w	r2, r7, #8
 800578e:	4610      	mov	r0, r2
 8005790:	4798      	blx	r3
 8005792:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	3301      	adds	r3, #1
 8005798:	2207      	movs	r2, #7
 800579a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800579c:	e00f      	b.n	80057be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800579e:	6839      	ldr	r1, [r7, #0]
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 fa10 	bl	8005bc6 <USBD_CtlError>
        err++;
 80057a6:	7afb      	ldrb	r3, [r7, #11]
 80057a8:	3301      	adds	r3, #1
 80057aa:	72fb      	strb	r3, [r7, #11]
      break;
 80057ac:	e007      	b.n	80057be <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80057ae:	6839      	ldr	r1, [r7, #0]
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 fa08 	bl	8005bc6 <USBD_CtlError>
      err++;
 80057b6:	7afb      	ldrb	r3, [r7, #11]
 80057b8:	3301      	adds	r3, #1
 80057ba:	72fb      	strb	r3, [r7, #11]
      break;
 80057bc:	bf00      	nop
  }

  if (err != 0U)
 80057be:	7afb      	ldrb	r3, [r7, #11]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d11e      	bne.n	8005802 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	88db      	ldrh	r3, [r3, #6]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d016      	beq.n	80057fa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80057cc:	893b      	ldrh	r3, [r7, #8]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00e      	beq.n	80057f0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	88da      	ldrh	r2, [r3, #6]
 80057d6:	893b      	ldrh	r3, [r7, #8]
 80057d8:	4293      	cmp	r3, r2
 80057da:	bf28      	it	cs
 80057dc:	4613      	movcs	r3, r2
 80057de:	b29b      	uxth	r3, r3
 80057e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80057e2:	893b      	ldrh	r3, [r7, #8]
 80057e4:	461a      	mov	r2, r3
 80057e6:	68f9      	ldr	r1, [r7, #12]
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 fa5d 	bl	8005ca8 <USBD_CtlSendData>
 80057ee:	e009      	b.n	8005804 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80057f0:	6839      	ldr	r1, [r7, #0]
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f9e7 	bl	8005bc6 <USBD_CtlError>
 80057f8:	e004      	b.n	8005804 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 fa91 	bl	8005d22 <USBD_CtlSendStatus>
 8005800:	e000      	b.n	8005804 <USBD_GetDescriptor+0x2cc>
    return;
 8005802:	bf00      	nop
  }
}
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop

0800580c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	889b      	ldrh	r3, [r3, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d131      	bne.n	8005882 <USBD_SetAddress+0x76>
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	88db      	ldrh	r3, [r3, #6]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d12d      	bne.n	8005882 <USBD_SetAddress+0x76>
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	885b      	ldrh	r3, [r3, #2]
 800582a:	2b7f      	cmp	r3, #127	; 0x7f
 800582c:	d829      	bhi.n	8005882 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	885b      	ldrh	r3, [r3, #2]
 8005832:	b2db      	uxtb	r3, r3
 8005834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005838:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b03      	cmp	r3, #3
 8005844:	d104      	bne.n	8005850 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005846:	6839      	ldr	r1, [r7, #0]
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 f9bc 	bl	8005bc6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800584e:	e01d      	b.n	800588c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	7bfa      	ldrb	r2, [r7, #15]
 8005854:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005858:	7bfb      	ldrb	r3, [r7, #15]
 800585a:	4619      	mov	r1, r3
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 fe0f 	bl	8006480 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 fa5d 	bl	8005d22 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005868:	7bfb      	ldrb	r3, [r7, #15]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d004      	beq.n	8005878 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2202      	movs	r2, #2
 8005872:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005876:	e009      	b.n	800588c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005880:	e004      	b.n	800588c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005882:	6839      	ldr	r1, [r7, #0]
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 f99e 	bl	8005bc6 <USBD_CtlError>
  }
}
 800588a:	bf00      	nop
 800588c:	bf00      	nop
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800589e:	2300      	movs	r3, #0
 80058a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	885b      	ldrh	r3, [r3, #2]
 80058a6:	b2da      	uxtb	r2, r3
 80058a8:	4b4e      	ldr	r3, [pc, #312]	; (80059e4 <USBD_SetConfig+0x150>)
 80058aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80058ac:	4b4d      	ldr	r3, [pc, #308]	; (80059e4 <USBD_SetConfig+0x150>)
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d905      	bls.n	80058c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80058b4:	6839      	ldr	r1, [r7, #0]
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f985 	bl	8005bc6 <USBD_CtlError>
    return USBD_FAIL;
 80058bc:	2303      	movs	r3, #3
 80058be:	e08c      	b.n	80059da <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d002      	beq.n	80058d2 <USBD_SetConfig+0x3e>
 80058cc:	2b03      	cmp	r3, #3
 80058ce:	d029      	beq.n	8005924 <USBD_SetConfig+0x90>
 80058d0:	e075      	b.n	80059be <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80058d2:	4b44      	ldr	r3, [pc, #272]	; (80059e4 <USBD_SetConfig+0x150>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d020      	beq.n	800591c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80058da:	4b42      	ldr	r3, [pc, #264]	; (80059e4 <USBD_SetConfig+0x150>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	461a      	mov	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80058e4:	4b3f      	ldr	r3, [pc, #252]	; (80059e4 <USBD_SetConfig+0x150>)
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	4619      	mov	r1, r3
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7fe ffe7 	bl	80048be <USBD_SetClassConfig>
 80058f0:	4603      	mov	r3, r0
 80058f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80058f4:	7bfb      	ldrb	r3, [r7, #15]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d008      	beq.n	800590c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80058fa:	6839      	ldr	r1, [r7, #0]
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 f962 	bl	8005bc6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2202      	movs	r2, #2
 8005906:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800590a:	e065      	b.n	80059d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 fa08 	bl	8005d22 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2203      	movs	r2, #3
 8005916:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800591a:	e05d      	b.n	80059d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 fa00 	bl	8005d22 <USBD_CtlSendStatus>
      break;
 8005922:	e059      	b.n	80059d8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005924:	4b2f      	ldr	r3, [pc, #188]	; (80059e4 <USBD_SetConfig+0x150>)
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d112      	bne.n	8005952 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005934:	4b2b      	ldr	r3, [pc, #172]	; (80059e4 <USBD_SetConfig+0x150>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	461a      	mov	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800593e:	4b29      	ldr	r3, [pc, #164]	; (80059e4 <USBD_SetConfig+0x150>)
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	4619      	mov	r1, r3
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f7fe ffd6 	bl	80048f6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f9e9 	bl	8005d22 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005950:	e042      	b.n	80059d8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005952:	4b24      	ldr	r3, [pc, #144]	; (80059e4 <USBD_SetConfig+0x150>)
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	461a      	mov	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	429a      	cmp	r2, r3
 800595e:	d02a      	beq.n	80059b6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	b2db      	uxtb	r3, r3
 8005966:	4619      	mov	r1, r3
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f7fe ffc4 	bl	80048f6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800596e:	4b1d      	ldr	r3, [pc, #116]	; (80059e4 <USBD_SetConfig+0x150>)
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	461a      	mov	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005978:	4b1a      	ldr	r3, [pc, #104]	; (80059e4 <USBD_SetConfig+0x150>)
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	4619      	mov	r1, r3
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7fe ff9d 	bl	80048be <USBD_SetClassConfig>
 8005984:	4603      	mov	r3, r0
 8005986:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005988:	7bfb      	ldrb	r3, [r7, #15]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00f      	beq.n	80059ae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800598e:	6839      	ldr	r1, [r7, #0]
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f918 	bl	8005bc6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	b2db      	uxtb	r3, r3
 800599c:	4619      	mov	r1, r3
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f7fe ffa9 	bl	80048f6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2202      	movs	r2, #2
 80059a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80059ac:	e014      	b.n	80059d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f9b7 	bl	8005d22 <USBD_CtlSendStatus>
      break;
 80059b4:	e010      	b.n	80059d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f9b3 	bl	8005d22 <USBD_CtlSendStatus>
      break;
 80059bc:	e00c      	b.n	80059d8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80059be:	6839      	ldr	r1, [r7, #0]
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 f900 	bl	8005bc6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80059c6:	4b07      	ldr	r3, [pc, #28]	; (80059e4 <USBD_SetConfig+0x150>)
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	4619      	mov	r1, r3
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7fe ff92 	bl	80048f6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80059d2:	2303      	movs	r3, #3
 80059d4:	73fb      	strb	r3, [r7, #15]
      break;
 80059d6:	bf00      	nop
  }

  return ret;
 80059d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	2000013c 	.word	0x2000013c

080059e8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	88db      	ldrh	r3, [r3, #6]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d004      	beq.n	8005a04 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80059fa:	6839      	ldr	r1, [r7, #0]
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 f8e2 	bl	8005bc6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005a02:	e023      	b.n	8005a4c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	dc02      	bgt.n	8005a16 <USBD_GetConfig+0x2e>
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	dc03      	bgt.n	8005a1c <USBD_GetConfig+0x34>
 8005a14:	e015      	b.n	8005a42 <USBD_GetConfig+0x5a>
 8005a16:	2b03      	cmp	r3, #3
 8005a18:	d00b      	beq.n	8005a32 <USBD_GetConfig+0x4a>
 8005a1a:	e012      	b.n	8005a42 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	3308      	adds	r3, #8
 8005a26:	2201      	movs	r2, #1
 8005a28:	4619      	mov	r1, r3
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f93c 	bl	8005ca8 <USBD_CtlSendData>
        break;
 8005a30:	e00c      	b.n	8005a4c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	3304      	adds	r3, #4
 8005a36:	2201      	movs	r2, #1
 8005a38:	4619      	mov	r1, r3
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f934 	bl	8005ca8 <USBD_CtlSendData>
        break;
 8005a40:	e004      	b.n	8005a4c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005a42:	6839      	ldr	r1, [r7, #0]
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f8be 	bl	8005bc6 <USBD_CtlError>
        break;
 8005a4a:	bf00      	nop
}
 8005a4c:	bf00      	nop
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	3b01      	subs	r3, #1
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d81e      	bhi.n	8005aaa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	88db      	ldrh	r3, [r3, #6]
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d004      	beq.n	8005a7e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005a74:	6839      	ldr	r1, [r7, #0]
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f8a5 	bl	8005bc6 <USBD_CtlError>
        break;
 8005a7c:	e01a      	b.n	8005ab4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d005      	beq.n	8005a9a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	f043 0202 	orr.w	r2, r3, #2
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	330c      	adds	r3, #12
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f900 	bl	8005ca8 <USBD_CtlSendData>
      break;
 8005aa8:	e004      	b.n	8005ab4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005aaa:	6839      	ldr	r1, [r7, #0]
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 f88a 	bl	8005bc6 <USBD_CtlError>
      break;
 8005ab2:	bf00      	nop
  }
}
 8005ab4:	bf00      	nop
 8005ab6:	3708      	adds	r7, #8
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	885b      	ldrh	r3, [r3, #2]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d107      	bne.n	8005ade <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f923 	bl	8005d22 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8005adc:	e013      	b.n	8005b06 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	885b      	ldrh	r3, [r3, #2]
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d10b      	bne.n	8005afe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	889b      	ldrh	r3, [r3, #4]
 8005aea:	0a1b      	lsrs	r3, r3, #8
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	b2da      	uxtb	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f913 	bl	8005d22 <USBD_CtlSendStatus>
}
 8005afc:	e003      	b.n	8005b06 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8005afe:	6839      	ldr	r1, [r7, #0]
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 f860 	bl	8005bc6 <USBD_CtlError>
}
 8005b06:	bf00      	nop
 8005b08:	3708      	adds	r7, #8
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b082      	sub	sp, #8
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
 8005b16:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	3b01      	subs	r3, #1
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d80b      	bhi.n	8005b3e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	885b      	ldrh	r3, [r3, #2]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d10c      	bne.n	8005b48 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f8f3 	bl	8005d22 <USBD_CtlSendStatus>
      }
      break;
 8005b3c:	e004      	b.n	8005b48 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005b3e:	6839      	ldr	r1, [r7, #0]
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 f840 	bl	8005bc6 <USBD_CtlError>
      break;
 8005b46:	e000      	b.n	8005b4a <USBD_ClrFeature+0x3c>
      break;
 8005b48:	bf00      	nop
  }
}
 8005b4a:	bf00      	nop
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b084      	sub	sp, #16
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
 8005b5a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	781a      	ldrb	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	781a      	ldrb	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f7ff fa41 	bl	8005004 <SWAPBYTE>
 8005b82:	4603      	mov	r3, r0
 8005b84:	461a      	mov	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	3301      	adds	r3, #1
 8005b94:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f7ff fa34 	bl	8005004 <SWAPBYTE>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	3301      	adds	r3, #1
 8005bae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f7ff fa27 	bl	8005004 <SWAPBYTE>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	461a      	mov	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	80da      	strh	r2, [r3, #6]
}
 8005bbe:	bf00      	nop
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b082      	sub	sp, #8
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
 8005bce:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005bd0:	2180      	movs	r1, #128	; 0x80
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 fbea 	bl	80063ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005bd8:	2100      	movs	r1, #0
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 fbe6 	bl	80063ac <USBD_LL_StallEP>
}
 8005be0:	bf00      	nop
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d036      	beq.n	8005c6c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005c02:	6938      	ldr	r0, [r7, #16]
 8005c04:	f000 f836 	bl	8005c74 <USBD_GetLen>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	005b      	lsls	r3, r3, #1
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005c16:	7dfb      	ldrb	r3, [r7, #23]
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	7812      	ldrb	r2, [r2, #0]
 8005c20:	701a      	strb	r2, [r3, #0]
  idx++;
 8005c22:	7dfb      	ldrb	r3, [r7, #23]
 8005c24:	3301      	adds	r3, #1
 8005c26:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005c28:	7dfb      	ldrb	r3, [r7, #23]
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	2203      	movs	r2, #3
 8005c30:	701a      	strb	r2, [r3, #0]
  idx++;
 8005c32:	7dfb      	ldrb	r3, [r7, #23]
 8005c34:	3301      	adds	r3, #1
 8005c36:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005c38:	e013      	b.n	8005c62 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005c3a:	7dfb      	ldrb	r3, [r7, #23]
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	4413      	add	r3, r2
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	7812      	ldrb	r2, [r2, #0]
 8005c44:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	3301      	adds	r3, #1
 8005c4a:	613b      	str	r3, [r7, #16]
    idx++;
 8005c4c:	7dfb      	ldrb	r3, [r7, #23]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005c52:	7dfb      	ldrb	r3, [r7, #23]
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	4413      	add	r3, r2
 8005c58:	2200      	movs	r2, #0
 8005c5a:	701a      	strb	r2, [r3, #0]
    idx++;
 8005c5c:	7dfb      	ldrb	r3, [r7, #23]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1e7      	bne.n	8005c3a <USBD_GetString+0x52>
 8005c6a:	e000      	b.n	8005c6e <USBD_GetString+0x86>
    return;
 8005c6c:	bf00      	nop
  }
}
 8005c6e:	3718      	adds	r7, #24
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005c84:	e005      	b.n	8005c92 <USBD_GetLen+0x1e>
  {
    len++;
 8005c86:	7bfb      	ldrb	r3, [r7, #15]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1f5      	bne.n	8005c86 <USBD_GetLen+0x12>
  }

  return len;
 8005c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3714      	adds	r7, #20
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	2100      	movs	r1, #0
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f000 fbf5 	bl	80064be <USBD_LL_Transmit>

  return USBD_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3710      	adds	r7, #16
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b084      	sub	sp, #16
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	60f8      	str	r0, [r7, #12]
 8005ce6:	60b9      	str	r1, [r7, #8]
 8005ce8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	2100      	movs	r1, #0
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f000 fbe4 	bl	80064be <USBD_LL_Transmit>

  return USBD_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	2100      	movs	r1, #0
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f000 fbf4 	bl	8006500 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b082      	sub	sp, #8
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2204      	movs	r2, #4
 8005d2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005d32:	2300      	movs	r3, #0
 8005d34:	2200      	movs	r2, #0
 8005d36:	2100      	movs	r1, #0
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 fbc0 	bl	80064be <USBD_LL_Transmit>

  return USBD_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3708      	adds	r7, #8
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2205      	movs	r2, #5
 8005d54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d58:	2300      	movs	r3, #0
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 fbce 	bl	8006500 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3708      	adds	r7, #8
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
	...

08005d70 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005d74:	2200      	movs	r2, #0
 8005d76:	490e      	ldr	r1, [pc, #56]	; (8005db0 <MX_USB_DEVICE_Init+0x40>)
 8005d78:	480e      	ldr	r0, [pc, #56]	; (8005db4 <MX_USB_DEVICE_Init+0x44>)
 8005d7a:	f7fe fd23 	bl	80047c4 <USBD_Init>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d001      	beq.n	8005d88 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005d84:	f7fa fc46 	bl	8000614 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8005d88:	490b      	ldr	r1, [pc, #44]	; (8005db8 <MX_USB_DEVICE_Init+0x48>)
 8005d8a:	480a      	ldr	r0, [pc, #40]	; (8005db4 <MX_USB_DEVICE_Init+0x44>)
 8005d8c:	f7fe fd4a 	bl	8004824 <USBD_RegisterClass>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005d96:	f7fa fc3d 	bl	8000614 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005d9a:	4806      	ldr	r0, [pc, #24]	; (8005db4 <MX_USB_DEVICE_Init+0x44>)
 8005d9c:	f7fe fd78 	bl	8004890 <USBD_Start>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d001      	beq.n	8005daa <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8005da6:	f7fa fc35 	bl	8000614 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005daa:	bf00      	nop
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	200000cc 	.word	0x200000cc
 8005db4:	20000140 	.word	0x20000140
 8005db8:	2000000c 	.word	0x2000000c

08005dbc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	6039      	str	r1, [r7, #0]
 8005dc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	2212      	movs	r2, #18
 8005dcc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005dce:	4b03      	ldr	r3, [pc, #12]	; (8005ddc <USBD_FS_DeviceDescriptor+0x20>)
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr
 8005ddc:	200000e8 	.word	0x200000e8

08005de0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	4603      	mov	r3, r0
 8005de8:	6039      	str	r1, [r7, #0]
 8005dea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	2204      	movs	r2, #4
 8005df0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005df2:	4b03      	ldr	r3, [pc, #12]	; (8005e00 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	200000fc 	.word	0x200000fc

08005e04 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	6039      	str	r1, [r7, #0]
 8005e0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005e10:	79fb      	ldrb	r3, [r7, #7]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d105      	bne.n	8005e22 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	4907      	ldr	r1, [pc, #28]	; (8005e38 <USBD_FS_ProductStrDescriptor+0x34>)
 8005e1a:	4808      	ldr	r0, [pc, #32]	; (8005e3c <USBD_FS_ProductStrDescriptor+0x38>)
 8005e1c:	f7ff fee4 	bl	8005be8 <USBD_GetString>
 8005e20:	e004      	b.n	8005e2c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	4904      	ldr	r1, [pc, #16]	; (8005e38 <USBD_FS_ProductStrDescriptor+0x34>)
 8005e26:	4805      	ldr	r0, [pc, #20]	; (8005e3c <USBD_FS_ProductStrDescriptor+0x38>)
 8005e28:	f7ff fede 	bl	8005be8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005e2c:	4b02      	ldr	r3, [pc, #8]	; (8005e38 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3708      	adds	r7, #8
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	2000041c 	.word	0x2000041c
 8005e3c:	0800663c 	.word	0x0800663c

08005e40 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	4603      	mov	r3, r0
 8005e48:	6039      	str	r1, [r7, #0]
 8005e4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005e4c:	683a      	ldr	r2, [r7, #0]
 8005e4e:	4904      	ldr	r1, [pc, #16]	; (8005e60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005e50:	4804      	ldr	r0, [pc, #16]	; (8005e64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005e52:	f7ff fec9 	bl	8005be8 <USBD_GetString>
  return USBD_StrDesc;
 8005e56:	4b02      	ldr	r3, [pc, #8]	; (8005e60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3708      	adds	r7, #8
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	2000041c 	.word	0x2000041c
 8005e64:	08006654 	.word	0x08006654

08005e68 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	4603      	mov	r3, r0
 8005e70:	6039      	str	r1, [r7, #0]
 8005e72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	221a      	movs	r2, #26
 8005e78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005e7a:	f000 f843 	bl	8005f04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005e7e:	4b02      	ldr	r3, [pc, #8]	; (8005e88 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3708      	adds	r7, #8
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	20000100 	.word	0x20000100

08005e8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	4603      	mov	r3, r0
 8005e94:	6039      	str	r1, [r7, #0]
 8005e96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005e98:	79fb      	ldrb	r3, [r7, #7]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d105      	bne.n	8005eaa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005e9e:	683a      	ldr	r2, [r7, #0]
 8005ea0:	4907      	ldr	r1, [pc, #28]	; (8005ec0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005ea2:	4808      	ldr	r0, [pc, #32]	; (8005ec4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005ea4:	f7ff fea0 	bl	8005be8 <USBD_GetString>
 8005ea8:	e004      	b.n	8005eb4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005eaa:	683a      	ldr	r2, [r7, #0]
 8005eac:	4904      	ldr	r1, [pc, #16]	; (8005ec0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005eae:	4805      	ldr	r0, [pc, #20]	; (8005ec4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005eb0:	f7ff fe9a 	bl	8005be8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005eb4:	4b02      	ldr	r3, [pc, #8]	; (8005ec0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3708      	adds	r7, #8
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	2000041c 	.word	0x2000041c
 8005ec4:	08006668 	.word	0x08006668

08005ec8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	4603      	mov	r3, r0
 8005ed0:	6039      	str	r1, [r7, #0]
 8005ed2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005ed4:	79fb      	ldrb	r3, [r7, #7]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d105      	bne.n	8005ee6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	4907      	ldr	r1, [pc, #28]	; (8005efc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005ede:	4808      	ldr	r0, [pc, #32]	; (8005f00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005ee0:	f7ff fe82 	bl	8005be8 <USBD_GetString>
 8005ee4:	e004      	b.n	8005ef0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005ee6:	683a      	ldr	r2, [r7, #0]
 8005ee8:	4904      	ldr	r1, [pc, #16]	; (8005efc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005eea:	4805      	ldr	r0, [pc, #20]	; (8005f00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005eec:	f7ff fe7c 	bl	8005be8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005ef0:	4b02      	ldr	r3, [pc, #8]	; (8005efc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3708      	adds	r7, #8
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	2000041c 	.word	0x2000041c
 8005f00:	08006674 	.word	0x08006674

08005f04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005f0a:	4b0f      	ldr	r3, [pc, #60]	; (8005f48 <Get_SerialNum+0x44>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005f10:	4b0e      	ldr	r3, [pc, #56]	; (8005f4c <Get_SerialNum+0x48>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005f16:	4b0e      	ldr	r3, [pc, #56]	; (8005f50 <Get_SerialNum+0x4c>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4413      	add	r3, r2
 8005f22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d009      	beq.n	8005f3e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005f2a:	2208      	movs	r2, #8
 8005f2c:	4909      	ldr	r1, [pc, #36]	; (8005f54 <Get_SerialNum+0x50>)
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	f000 f814 	bl	8005f5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005f34:	2204      	movs	r2, #4
 8005f36:	4908      	ldr	r1, [pc, #32]	; (8005f58 <Get_SerialNum+0x54>)
 8005f38:	68b8      	ldr	r0, [r7, #8]
 8005f3a:	f000 f80f 	bl	8005f5c <IntToUnicode>
  }
}
 8005f3e:	bf00      	nop
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	1fff7a10 	.word	0x1fff7a10
 8005f4c:	1fff7a14 	.word	0x1fff7a14
 8005f50:	1fff7a18 	.word	0x1fff7a18
 8005f54:	20000102 	.word	0x20000102
 8005f58:	20000112 	.word	0x20000112

08005f5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b087      	sub	sp, #28
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	4613      	mov	r3, r2
 8005f68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005f6e:	2300      	movs	r3, #0
 8005f70:	75fb      	strb	r3, [r7, #23]
 8005f72:	e027      	b.n	8005fc4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	0f1b      	lsrs	r3, r3, #28
 8005f78:	2b09      	cmp	r3, #9
 8005f7a:	d80b      	bhi.n	8005f94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	0f1b      	lsrs	r3, r3, #28
 8005f80:	b2da      	uxtb	r2, r3
 8005f82:	7dfb      	ldrb	r3, [r7, #23]
 8005f84:	005b      	lsls	r3, r3, #1
 8005f86:	4619      	mov	r1, r3
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	440b      	add	r3, r1
 8005f8c:	3230      	adds	r2, #48	; 0x30
 8005f8e:	b2d2      	uxtb	r2, r2
 8005f90:	701a      	strb	r2, [r3, #0]
 8005f92:	e00a      	b.n	8005faa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	0f1b      	lsrs	r3, r3, #28
 8005f98:	b2da      	uxtb	r2, r3
 8005f9a:	7dfb      	ldrb	r3, [r7, #23]
 8005f9c:	005b      	lsls	r3, r3, #1
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	440b      	add	r3, r1
 8005fa4:	3237      	adds	r2, #55	; 0x37
 8005fa6:	b2d2      	uxtb	r2, r2
 8005fa8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	011b      	lsls	r3, r3, #4
 8005fae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005fb0:	7dfb      	ldrb	r3, [r7, #23]
 8005fb2:	005b      	lsls	r3, r3, #1
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	68ba      	ldr	r2, [r7, #8]
 8005fb8:	4413      	add	r3, r2
 8005fba:	2200      	movs	r2, #0
 8005fbc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005fbe:	7dfb      	ldrb	r3, [r7, #23]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	75fb      	strb	r3, [r7, #23]
 8005fc4:	7dfa      	ldrb	r2, [r7, #23]
 8005fc6:	79fb      	ldrb	r3, [r7, #7]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d3d3      	bcc.n	8005f74 <IntToUnicode+0x18>
  }
}
 8005fcc:	bf00      	nop
 8005fce:	bf00      	nop
 8005fd0:	371c      	adds	r7, #28
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
	...

08005fdc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b08a      	sub	sp, #40	; 0x28
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fe4:	f107 0314 	add.w	r3, r7, #20
 8005fe8:	2200      	movs	r2, #0
 8005fea:	601a      	str	r2, [r3, #0]
 8005fec:	605a      	str	r2, [r3, #4]
 8005fee:	609a      	str	r2, [r3, #8]
 8005ff0:	60da      	str	r2, [r3, #12]
 8005ff2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ffc:	d13a      	bne.n	8006074 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ffe:	2300      	movs	r3, #0
 8006000:	613b      	str	r3, [r7, #16]
 8006002:	4b1e      	ldr	r3, [pc, #120]	; (800607c <HAL_PCD_MspInit+0xa0>)
 8006004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006006:	4a1d      	ldr	r2, [pc, #116]	; (800607c <HAL_PCD_MspInit+0xa0>)
 8006008:	f043 0301 	orr.w	r3, r3, #1
 800600c:	6313      	str	r3, [r2, #48]	; 0x30
 800600e:	4b1b      	ldr	r3, [pc, #108]	; (800607c <HAL_PCD_MspInit+0xa0>)
 8006010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	613b      	str	r3, [r7, #16]
 8006018:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800601a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800601e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006020:	2302      	movs	r3, #2
 8006022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006024:	2300      	movs	r3, #0
 8006026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006028:	2303      	movs	r3, #3
 800602a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800602c:	230a      	movs	r3, #10
 800602e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006030:	f107 0314 	add.w	r3, r7, #20
 8006034:	4619      	mov	r1, r3
 8006036:	4812      	ldr	r0, [pc, #72]	; (8006080 <HAL_PCD_MspInit+0xa4>)
 8006038:	f7fa fd32 	bl	8000aa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800603c:	4b0f      	ldr	r3, [pc, #60]	; (800607c <HAL_PCD_MspInit+0xa0>)
 800603e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006040:	4a0e      	ldr	r2, [pc, #56]	; (800607c <HAL_PCD_MspInit+0xa0>)
 8006042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006046:	6353      	str	r3, [r2, #52]	; 0x34
 8006048:	2300      	movs	r3, #0
 800604a:	60fb      	str	r3, [r7, #12]
 800604c:	4b0b      	ldr	r3, [pc, #44]	; (800607c <HAL_PCD_MspInit+0xa0>)
 800604e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006050:	4a0a      	ldr	r2, [pc, #40]	; (800607c <HAL_PCD_MspInit+0xa0>)
 8006052:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006056:	6453      	str	r3, [r2, #68]	; 0x44
 8006058:	4b08      	ldr	r3, [pc, #32]	; (800607c <HAL_PCD_MspInit+0xa0>)
 800605a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800605c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006060:	60fb      	str	r3, [r7, #12]
 8006062:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006064:	2200      	movs	r2, #0
 8006066:	2100      	movs	r1, #0
 8006068:	2043      	movs	r0, #67	; 0x43
 800606a:	f7fa fce2 	bl	8000a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800606e:	2043      	movs	r0, #67	; 0x43
 8006070:	f7fa fcfb 	bl	8000a6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006074:	bf00      	nop
 8006076:	3728      	adds	r7, #40	; 0x28
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	40023800 	.word	0x40023800
 8006080:	40020000 	.word	0x40020000

08006084 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006098:	4619      	mov	r1, r3
 800609a:	4610      	mov	r0, r2
 800609c:	f7fe fc45 	bl	800492a <USBD_LL_SetupStage>
}
 80060a0:	bf00      	nop
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	460b      	mov	r3, r1
 80060b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80060ba:	78fa      	ldrb	r2, [r7, #3]
 80060bc:	6879      	ldr	r1, [r7, #4]
 80060be:	4613      	mov	r3, r2
 80060c0:	00db      	lsls	r3, r3, #3
 80060c2:	4413      	add	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	440b      	add	r3, r1
 80060c8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	78fb      	ldrb	r3, [r7, #3]
 80060d0:	4619      	mov	r1, r3
 80060d2:	f7fe fc7f 	bl	80049d4 <USBD_LL_DataOutStage>
}
 80060d6:	bf00      	nop
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b082      	sub	sp, #8
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
 80060e6:	460b      	mov	r3, r1
 80060e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80060f0:	78fa      	ldrb	r2, [r7, #3]
 80060f2:	6879      	ldr	r1, [r7, #4]
 80060f4:	4613      	mov	r3, r2
 80060f6:	00db      	lsls	r3, r3, #3
 80060f8:	4413      	add	r3, r2
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	440b      	add	r3, r1
 80060fe:	334c      	adds	r3, #76	; 0x4c
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	78fb      	ldrb	r3, [r7, #3]
 8006104:	4619      	mov	r1, r3
 8006106:	f7fe fd18 	bl	8004b3a <USBD_LL_DataInStage>
}
 800610a:	bf00      	nop
 800610c:	3708      	adds	r7, #8
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b082      	sub	sp, #8
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006120:	4618      	mov	r0, r3
 8006122:	f7fe fe4c 	bl	8004dbe <USBD_LL_SOF>
}
 8006126:	bf00      	nop
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b084      	sub	sp, #16
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006136:	2301      	movs	r3, #1
 8006138:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	2b02      	cmp	r3, #2
 8006140:	d001      	beq.n	8006146 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006142:	f7fa fa67 	bl	8000614 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800614c:	7bfa      	ldrb	r2, [r7, #15]
 800614e:	4611      	mov	r1, r2
 8006150:	4618      	mov	r0, r3
 8006152:	f7fe fdf6 	bl	8004d42 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800615c:	4618      	mov	r0, r3
 800615e:	f7fe fd9e 	bl	8004c9e <USBD_LL_Reset>
}
 8006162:	bf00      	nop
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
	...

0800616c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800617a:	4618      	mov	r0, r3
 800617c:	f7fe fdf1 	bl	8004d62 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	6812      	ldr	r2, [r2, #0]
 800618e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006192:	f043 0301 	orr.w	r3, r3, #1
 8006196:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d005      	beq.n	80061ac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80061a0:	4b04      	ldr	r3, [pc, #16]	; (80061b4 <HAL_PCD_SuspendCallback+0x48>)
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	4a03      	ldr	r2, [pc, #12]	; (80061b4 <HAL_PCD_SuspendCallback+0x48>)
 80061a6:	f043 0306 	orr.w	r3, r3, #6
 80061aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80061ac:	bf00      	nop
 80061ae:	3708      	adds	r7, #8
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	e000ed00 	.word	0xe000ed00

080061b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7fe fde1 	bl	8004d8e <USBD_LL_Resume>
}
 80061cc:	bf00      	nop
 80061ce:	3708      	adds	r7, #8
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	460b      	mov	r3, r1
 80061de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80061e6:	78fa      	ldrb	r2, [r7, #3]
 80061e8:	4611      	mov	r1, r2
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7fe fe39 	bl	8004e62 <USBD_LL_IsoOUTIncomplete>
}
 80061f0:	bf00      	nop
 80061f2:	3708      	adds	r7, #8
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	460b      	mov	r3, r1
 8006202:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800620a:	78fa      	ldrb	r2, [r7, #3]
 800620c:	4611      	mov	r1, r2
 800620e:	4618      	mov	r0, r3
 8006210:	f7fe fdf5 	bl	8004dfe <USBD_LL_IsoINIncomplete>
}
 8006214:	bf00      	nop
 8006216:	3708      	adds	r7, #8
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800622a:	4618      	mov	r0, r3
 800622c:	f7fe fe4b 	bl	8004ec6 <USBD_LL_DevConnected>
}
 8006230:	bf00      	nop
 8006232:	3708      	adds	r7, #8
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006246:	4618      	mov	r0, r3
 8006248:	f7fe fe48 	bl	8004edc <USBD_LL_DevDisconnected>
}
 800624c:	bf00      	nop
 800624e:	3708      	adds	r7, #8
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d13c      	bne.n	80062de <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006264:	4a20      	ldr	r2, [pc, #128]	; (80062e8 <USBD_LL_Init+0x94>)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a1e      	ldr	r2, [pc, #120]	; (80062e8 <USBD_LL_Init+0x94>)
 8006270:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006274:	4b1c      	ldr	r3, [pc, #112]	; (80062e8 <USBD_LL_Init+0x94>)
 8006276:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800627a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800627c:	4b1a      	ldr	r3, [pc, #104]	; (80062e8 <USBD_LL_Init+0x94>)
 800627e:	2204      	movs	r2, #4
 8006280:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006282:	4b19      	ldr	r3, [pc, #100]	; (80062e8 <USBD_LL_Init+0x94>)
 8006284:	2202      	movs	r2, #2
 8006286:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006288:	4b17      	ldr	r3, [pc, #92]	; (80062e8 <USBD_LL_Init+0x94>)
 800628a:	2200      	movs	r2, #0
 800628c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800628e:	4b16      	ldr	r3, [pc, #88]	; (80062e8 <USBD_LL_Init+0x94>)
 8006290:	2202      	movs	r2, #2
 8006292:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006294:	4b14      	ldr	r3, [pc, #80]	; (80062e8 <USBD_LL_Init+0x94>)
 8006296:	2200      	movs	r2, #0
 8006298:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800629a:	4b13      	ldr	r3, [pc, #76]	; (80062e8 <USBD_LL_Init+0x94>)
 800629c:	2200      	movs	r2, #0
 800629e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80062a0:	4b11      	ldr	r3, [pc, #68]	; (80062e8 <USBD_LL_Init+0x94>)
 80062a2:	2200      	movs	r2, #0
 80062a4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80062a6:	4b10      	ldr	r3, [pc, #64]	; (80062e8 <USBD_LL_Init+0x94>)
 80062a8:	2200      	movs	r2, #0
 80062aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80062ac:	4b0e      	ldr	r3, [pc, #56]	; (80062e8 <USBD_LL_Init+0x94>)
 80062ae:	2200      	movs	r2, #0
 80062b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80062b2:	480d      	ldr	r0, [pc, #52]	; (80062e8 <USBD_LL_Init+0x94>)
 80062b4:	f7fa fd78 	bl	8000da8 <HAL_PCD_Init>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d001      	beq.n	80062c2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80062be:	f7fa f9a9 	bl	8000614 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80062c2:	2180      	movs	r1, #128	; 0x80
 80062c4:	4808      	ldr	r0, [pc, #32]	; (80062e8 <USBD_LL_Init+0x94>)
 80062c6:	f7fb ffb8 	bl	800223a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80062ca:	2240      	movs	r2, #64	; 0x40
 80062cc:	2100      	movs	r1, #0
 80062ce:	4806      	ldr	r0, [pc, #24]	; (80062e8 <USBD_LL_Init+0x94>)
 80062d0:	f7fb ff6c 	bl	80021ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80062d4:	2280      	movs	r2, #128	; 0x80
 80062d6:	2101      	movs	r1, #1
 80062d8:	4803      	ldr	r0, [pc, #12]	; (80062e8 <USBD_LL_Init+0x94>)
 80062da:	f7fb ff67 	bl	80021ac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3708      	adds	r7, #8
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	2000061c 	.word	0x2000061c

080062ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062f4:	2300      	movs	r3, #0
 80062f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062f8:	2300      	movs	r3, #0
 80062fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006302:	4618      	mov	r0, r3
 8006304:	f7fa fe6d 	bl	8000fe2 <HAL_PCD_Start>
 8006308:	4603      	mov	r3, r0
 800630a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800630c:	7bfb      	ldrb	r3, [r7, #15]
 800630e:	4618      	mov	r0, r3
 8006310:	f000 f930 	bl	8006574 <USBD_Get_USB_Status>
 8006314:	4603      	mov	r3, r0
 8006316:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006318:	7bbb      	ldrb	r3, [r7, #14]
}
 800631a:	4618      	mov	r0, r3
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b084      	sub	sp, #16
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
 800632a:	4608      	mov	r0, r1
 800632c:	4611      	mov	r1, r2
 800632e:	461a      	mov	r2, r3
 8006330:	4603      	mov	r3, r0
 8006332:	70fb      	strb	r3, [r7, #3]
 8006334:	460b      	mov	r3, r1
 8006336:	70bb      	strb	r3, [r7, #2]
 8006338:	4613      	mov	r3, r2
 800633a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800633c:	2300      	movs	r3, #0
 800633e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006340:	2300      	movs	r3, #0
 8006342:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800634a:	78bb      	ldrb	r3, [r7, #2]
 800634c:	883a      	ldrh	r2, [r7, #0]
 800634e:	78f9      	ldrb	r1, [r7, #3]
 8006350:	f7fb fb3e 	bl	80019d0 <HAL_PCD_EP_Open>
 8006354:	4603      	mov	r3, r0
 8006356:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006358:	7bfb      	ldrb	r3, [r7, #15]
 800635a:	4618      	mov	r0, r3
 800635c:	f000 f90a 	bl	8006574 <USBD_Get_USB_Status>
 8006360:	4603      	mov	r3, r0
 8006362:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006364:	7bbb      	ldrb	r3, [r7, #14]
}
 8006366:	4618      	mov	r0, r3
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b084      	sub	sp, #16
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
 8006376:	460b      	mov	r3, r1
 8006378:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800637a:	2300      	movs	r3, #0
 800637c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800637e:	2300      	movs	r3, #0
 8006380:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006388:	78fa      	ldrb	r2, [r7, #3]
 800638a:	4611      	mov	r1, r2
 800638c:	4618      	mov	r0, r3
 800638e:	f7fb fb87 	bl	8001aa0 <HAL_PCD_EP_Close>
 8006392:	4603      	mov	r3, r0
 8006394:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006396:	7bfb      	ldrb	r3, [r7, #15]
 8006398:	4618      	mov	r0, r3
 800639a:	f000 f8eb 	bl	8006574 <USBD_Get_USB_Status>
 800639e:	4603      	mov	r3, r0
 80063a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80063a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	460b      	mov	r3, r1
 80063b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063b8:	2300      	movs	r3, #0
 80063ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063bc:	2300      	movs	r3, #0
 80063be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80063c6:	78fa      	ldrb	r2, [r7, #3]
 80063c8:	4611      	mov	r1, r2
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7fb fc47 	bl	8001c5e <HAL_PCD_EP_SetStall>
 80063d0:	4603      	mov	r3, r0
 80063d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80063d4:	7bfb      	ldrb	r3, [r7, #15]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 f8cc 	bl	8006574 <USBD_Get_USB_Status>
 80063dc:	4603      	mov	r3, r0
 80063de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80063e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b084      	sub	sp, #16
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
 80063f2:	460b      	mov	r3, r1
 80063f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063f6:	2300      	movs	r3, #0
 80063f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063fa:	2300      	movs	r3, #0
 80063fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006404:	78fa      	ldrb	r2, [r7, #3]
 8006406:	4611      	mov	r1, r2
 8006408:	4618      	mov	r0, r3
 800640a:	f7fb fc8c 	bl	8001d26 <HAL_PCD_EP_ClrStall>
 800640e:	4603      	mov	r3, r0
 8006410:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006412:	7bfb      	ldrb	r3, [r7, #15]
 8006414:	4618      	mov	r0, r3
 8006416:	f000 f8ad 	bl	8006574 <USBD_Get_USB_Status>
 800641a:	4603      	mov	r3, r0
 800641c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800641e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	460b      	mov	r3, r1
 8006432:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800643a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800643c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006440:	2b00      	cmp	r3, #0
 8006442:	da0b      	bge.n	800645c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006444:	78fb      	ldrb	r3, [r7, #3]
 8006446:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800644a:	68f9      	ldr	r1, [r7, #12]
 800644c:	4613      	mov	r3, r2
 800644e:	00db      	lsls	r3, r3, #3
 8006450:	4413      	add	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	440b      	add	r3, r1
 8006456:	333e      	adds	r3, #62	; 0x3e
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	e00b      	b.n	8006474 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800645c:	78fb      	ldrb	r3, [r7, #3]
 800645e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006462:	68f9      	ldr	r1, [r7, #12]
 8006464:	4613      	mov	r3, r2
 8006466:	00db      	lsls	r3, r3, #3
 8006468:	4413      	add	r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	440b      	add	r3, r1
 800646e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8006472:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006474:	4618      	mov	r0, r3
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	460b      	mov	r3, r1
 800648a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800648c:	2300      	movs	r3, #0
 800648e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006490:	2300      	movs	r3, #0
 8006492:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800649a:	78fa      	ldrb	r2, [r7, #3]
 800649c:	4611      	mov	r1, r2
 800649e:	4618      	mov	r0, r3
 80064a0:	f7fb fa71 	bl	8001986 <HAL_PCD_SetAddress>
 80064a4:	4603      	mov	r3, r0
 80064a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80064a8:	7bfb      	ldrb	r3, [r7, #15]
 80064aa:	4618      	mov	r0, r3
 80064ac:	f000 f862 	bl	8006574 <USBD_Get_USB_Status>
 80064b0:	4603      	mov	r3, r0
 80064b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80064b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b086      	sub	sp, #24
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	60f8      	str	r0, [r7, #12]
 80064c6:	607a      	str	r2, [r7, #4]
 80064c8:	603b      	str	r3, [r7, #0]
 80064ca:	460b      	mov	r3, r1
 80064cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064ce:	2300      	movs	r3, #0
 80064d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80064dc:	7af9      	ldrb	r1, [r7, #11]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	f7fb fb72 	bl	8001bca <HAL_PCD_EP_Transmit>
 80064e6:	4603      	mov	r3, r0
 80064e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80064ea:	7dfb      	ldrb	r3, [r7, #23]
 80064ec:	4618      	mov	r0, r3
 80064ee:	f000 f841 	bl	8006574 <USBD_Get_USB_Status>
 80064f2:	4603      	mov	r3, r0
 80064f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80064f6:	7dbb      	ldrb	r3, [r7, #22]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3718      	adds	r7, #24
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b086      	sub	sp, #24
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	607a      	str	r2, [r7, #4]
 800650a:	603b      	str	r3, [r7, #0]
 800650c:	460b      	mov	r3, r1
 800650e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006510:	2300      	movs	r3, #0
 8006512:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006514:	2300      	movs	r3, #0
 8006516:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800651e:	7af9      	ldrb	r1, [r7, #11]
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	f7fb fb06 	bl	8001b34 <HAL_PCD_EP_Receive>
 8006528:	4603      	mov	r3, r0
 800652a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800652c:	7dfb      	ldrb	r3, [r7, #23]
 800652e:	4618      	mov	r0, r3
 8006530:	f000 f820 	bl	8006574 <USBD_Get_USB_Status>
 8006534:	4603      	mov	r3, r0
 8006536:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006538:	7dbb      	ldrb	r3, [r7, #22]
}
 800653a:	4618      	mov	r0, r3
 800653c:	3718      	adds	r7, #24
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
	...

08006544 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800654c:	4b03      	ldr	r3, [pc, #12]	; (800655c <USBD_static_malloc+0x18>)
}
 800654e:	4618      	mov	r0, r3
 8006550:	370c      	adds	r7, #12
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	20000b28 	.word	0x20000b28

08006560 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]

}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	4603      	mov	r3, r0
 800657c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800657e:	2300      	movs	r3, #0
 8006580:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006582:	79fb      	ldrb	r3, [r7, #7]
 8006584:	2b03      	cmp	r3, #3
 8006586:	d817      	bhi.n	80065b8 <USBD_Get_USB_Status+0x44>
 8006588:	a201      	add	r2, pc, #4	; (adr r2, 8006590 <USBD_Get_USB_Status+0x1c>)
 800658a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800658e:	bf00      	nop
 8006590:	080065a1 	.word	0x080065a1
 8006594:	080065a7 	.word	0x080065a7
 8006598:	080065ad 	.word	0x080065ad
 800659c:	080065b3 	.word	0x080065b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80065a0:	2300      	movs	r3, #0
 80065a2:	73fb      	strb	r3, [r7, #15]
    break;
 80065a4:	e00b      	b.n	80065be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80065a6:	2303      	movs	r3, #3
 80065a8:	73fb      	strb	r3, [r7, #15]
    break;
 80065aa:	e008      	b.n	80065be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80065ac:	2301      	movs	r3, #1
 80065ae:	73fb      	strb	r3, [r7, #15]
    break;
 80065b0:	e005      	b.n	80065be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80065b2:	2303      	movs	r3, #3
 80065b4:	73fb      	strb	r3, [r7, #15]
    break;
 80065b6:	e002      	b.n	80065be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80065b8:	2303      	movs	r3, #3
 80065ba:	73fb      	strb	r3, [r7, #15]
    break;
 80065bc:	bf00      	nop
  }
  return usb_status;
 80065be:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3714      	adds	r7, #20
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <__libc_init_array>:
 80065cc:	b570      	push	{r4, r5, r6, lr}
 80065ce:	4d0d      	ldr	r5, [pc, #52]	; (8006604 <__libc_init_array+0x38>)
 80065d0:	4c0d      	ldr	r4, [pc, #52]	; (8006608 <__libc_init_array+0x3c>)
 80065d2:	1b64      	subs	r4, r4, r5
 80065d4:	10a4      	asrs	r4, r4, #2
 80065d6:	2600      	movs	r6, #0
 80065d8:	42a6      	cmp	r6, r4
 80065da:	d109      	bne.n	80065f0 <__libc_init_array+0x24>
 80065dc:	4d0b      	ldr	r5, [pc, #44]	; (800660c <__libc_init_array+0x40>)
 80065de:	4c0c      	ldr	r4, [pc, #48]	; (8006610 <__libc_init_array+0x44>)
 80065e0:	f000 f820 	bl	8006624 <_init>
 80065e4:	1b64      	subs	r4, r4, r5
 80065e6:	10a4      	asrs	r4, r4, #2
 80065e8:	2600      	movs	r6, #0
 80065ea:	42a6      	cmp	r6, r4
 80065ec:	d105      	bne.n	80065fa <__libc_init_array+0x2e>
 80065ee:	bd70      	pop	{r4, r5, r6, pc}
 80065f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80065f4:	4798      	blx	r3
 80065f6:	3601      	adds	r6, #1
 80065f8:	e7ee      	b.n	80065d8 <__libc_init_array+0xc>
 80065fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80065fe:	4798      	blx	r3
 8006600:	3601      	adds	r6, #1
 8006602:	e7f2      	b.n	80065ea <__libc_init_array+0x1e>
 8006604:	0800669c 	.word	0x0800669c
 8006608:	0800669c 	.word	0x0800669c
 800660c:	0800669c 	.word	0x0800669c
 8006610:	080066a0 	.word	0x080066a0

08006614 <memset>:
 8006614:	4402      	add	r2, r0
 8006616:	4603      	mov	r3, r0
 8006618:	4293      	cmp	r3, r2
 800661a:	d100      	bne.n	800661e <memset+0xa>
 800661c:	4770      	bx	lr
 800661e:	f803 1b01 	strb.w	r1, [r3], #1
 8006622:	e7f9      	b.n	8006618 <memset+0x4>

08006624 <_init>:
 8006624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006626:	bf00      	nop
 8006628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800662a:	bc08      	pop	{r3}
 800662c:	469e      	mov	lr, r3
 800662e:	4770      	bx	lr

08006630 <_fini>:
 8006630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006632:	bf00      	nop
 8006634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006636:	bc08      	pop	{r3}
 8006638:	469e      	mov	lr, r3
 800663a:	4770      	bx	lr
