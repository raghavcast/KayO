
hid_f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007948  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007ae0  08007ae0  00017ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b38  08007b38  000200f4  2**0
                  CONTENTS
  4 .ARM          00000008  08007b38  08007b38  00017b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b40  08007b40  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b40  08007b40  00017b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b44  08007b44  00017b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  08007b48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b40  200000f4  08007c3c  000200f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c34  08007c3c  00020c34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000160e6  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000309d  00000000  00000000  0003620a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  000392a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001150  00000000  00000000  0003a520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019196  00000000  00000000  0003b670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001605e  00000000  00000000  00054806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091b8e  00000000  00000000  0006a864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fc3f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dd4  00000000  00000000  000fc444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000f4 	.word	0x200000f4
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007ac8 	.word	0x08007ac8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000f8 	.word	0x200000f8
 80001d4:	08007ac8 	.word	0x08007ac8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fbd0 	bl	8000c84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f820 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f974 	bl	80007d4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004ec:	f006 fe92 	bl	8007214 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80004f0:	f000 f882 	bl	80005f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004f4:	f000 f8cc 	bl	8000690 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80004f8:	f000 f918 	bl	800072c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80004fc:	f000 f940 	bl	8000780 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  GPIOB->BSRR = 0xf << 16;
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <main+0x40>)
 8000502:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8000506:	619a      	str	r2, [r3, #24]
  GPIOB->BSRR = 0x1;
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <main+0x40>)
 800050a:	2201      	movs	r2, #1
 800050c:	619a      	str	r2, [r3, #24]
  HAL_TIM_Base_Start_IT(&htim2);
 800050e:	4804      	ldr	r0, [pc, #16]	; (8000520 <main+0x44>)
 8000510:	f002 fe4a 	bl	80031a8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000514:	4803      	ldr	r0, [pc, #12]	; (8000524 <main+0x48>)
 8000516:	f002 fe47 	bl	80031a8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051a:	e7fe      	b.n	800051a <main+0x3e>
 800051c:	40020400 	.word	0x40020400
 8000520:	20000110 	.word	0x20000110
 8000524:	20000158 	.word	0x20000158

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b094      	sub	sp, #80	; 0x50
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0320 	add.w	r3, r7, #32
 8000532:	2230      	movs	r2, #48	; 0x30
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f007 fabe 	bl	8007ab8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	4b27      	ldr	r3, [pc, #156]	; (80005f0 <SystemClock_Config+0xc8>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	4a26      	ldr	r2, [pc, #152]	; (80005f0 <SystemClock_Config+0xc8>)
 8000556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055a:	6413      	str	r3, [r2, #64]	; 0x40
 800055c:	4b24      	ldr	r3, [pc, #144]	; (80005f0 <SystemClock_Config+0xc8>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000568:	2300      	movs	r3, #0
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	4b21      	ldr	r3, [pc, #132]	; (80005f4 <SystemClock_Config+0xcc>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a20      	ldr	r2, [pc, #128]	; (80005f4 <SystemClock_Config+0xcc>)
 8000572:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b1e      	ldr	r3, [pc, #120]	; (80005f4 <SystemClock_Config+0xcc>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000584:	2301      	movs	r3, #1
 8000586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000588:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800058c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058e:	2302      	movs	r3, #2
 8000590:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000592:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000596:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000598:	2304      	movs	r3, #4
 800059a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800059c:	2390      	movs	r3, #144	; 0x90
 800059e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005a0:	2304      	movs	r3, #4
 80005a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80005a4:	2306      	movs	r3, #6
 80005a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	f107 0320 	add.w	r3, r7, #32
 80005ac:	4618      	mov	r0, r3
 80005ae:	f002 f913 	bl	80027d8 <HAL_RCC_OscConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005b8:	f000 f9f2 	bl	80009a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005bc:	230f      	movs	r3, #15
 80005be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c0:	2302      	movs	r3, #2
 80005c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005d2:	f107 030c 	add.w	r3, r7, #12
 80005d6:	2102      	movs	r1, #2
 80005d8:	4618      	mov	r0, r3
 80005da:	f002 fb75 	bl	8002cc8 <HAL_RCC_ClockConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005e4:	f000 f9dc 	bl	80009a0 <Error_Handler>
  }
}
 80005e8:	bf00      	nop
 80005ea:	3750      	adds	r7, #80	; 0x50
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40007000 	.word	0x40007000

080005f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005fe:	f107 0308 	add.w	r3, r7, #8
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800060c:	463b      	mov	r3, r7
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000614:	4b1d      	ldr	r3, [pc, #116]	; (800068c <MX_TIM2_Init+0x94>)
 8000616:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800061a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800061c:	4b1b      	ldr	r3, [pc, #108]	; (800068c <MX_TIM2_Init+0x94>)
 800061e:	2247      	movs	r2, #71	; 0x47
 8000620:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000622:	4b1a      	ldr	r3, [pc, #104]	; (800068c <MX_TIM2_Init+0x94>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000628:	4b18      	ldr	r3, [pc, #96]	; (800068c <MX_TIM2_Init+0x94>)
 800062a:	2263      	movs	r2, #99	; 0x63
 800062c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800062e:	4b17      	ldr	r3, [pc, #92]	; (800068c <MX_TIM2_Init+0x94>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000634:	4b15      	ldr	r3, [pc, #84]	; (800068c <MX_TIM2_Init+0x94>)
 8000636:	2200      	movs	r2, #0
 8000638:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800063a:	4814      	ldr	r0, [pc, #80]	; (800068c <MX_TIM2_Init+0x94>)
 800063c:	f002 fd64 	bl	8003108 <HAL_TIM_Base_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000646:	f000 f9ab 	bl	80009a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800064a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	4619      	mov	r1, r3
 8000656:	480d      	ldr	r0, [pc, #52]	; (800068c <MX_TIM2_Init+0x94>)
 8000658:	f002 ff10 	bl	800347c <HAL_TIM_ConfigClockSource>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000662:	f000 f99d 	bl	80009a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000666:	2300      	movs	r3, #0
 8000668:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800066a:	2300      	movs	r3, #0
 800066c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800066e:	463b      	mov	r3, r7
 8000670:	4619      	mov	r1, r3
 8000672:	4806      	ldr	r0, [pc, #24]	; (800068c <MX_TIM2_Init+0x94>)
 8000674:	f003 f90c 	bl	8003890 <HAL_TIMEx_MasterConfigSynchronization>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800067e:	f000 f98f 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	3718      	adds	r7, #24
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000110 	.word	0x20000110

08000690 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000696:	f107 0308 	add.w	r3, r7, #8
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a4:	463b      	mov	r3, r7
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006ac:	4b1d      	ldr	r3, [pc, #116]	; (8000724 <MX_TIM3_Init+0x94>)
 80006ae:	4a1e      	ldr	r2, [pc, #120]	; (8000728 <MX_TIM3_Init+0x98>)
 80006b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 600-1;
 80006b2:	4b1c      	ldr	r3, [pc, #112]	; (8000724 <MX_TIM3_Init+0x94>)
 80006b4:	f240 2257 	movw	r2, #599	; 0x257
 80006b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ba:	4b1a      	ldr	r3, [pc, #104]	; (8000724 <MX_TIM3_Init+0x94>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80006c0:	4b18      	ldr	r3, [pc, #96]	; (8000724 <MX_TIM3_Init+0x94>)
 80006c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c8:	4b16      	ldr	r3, [pc, #88]	; (8000724 <MX_TIM3_Init+0x94>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <MX_TIM3_Init+0x94>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006d4:	4813      	ldr	r0, [pc, #76]	; (8000724 <MX_TIM3_Init+0x94>)
 80006d6:	f002 fd17 	bl	8003108 <HAL_TIM_Base_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80006e0:	f000 f95e 	bl	80009a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006ea:	f107 0308 	add.w	r3, r7, #8
 80006ee:	4619      	mov	r1, r3
 80006f0:	480c      	ldr	r0, [pc, #48]	; (8000724 <MX_TIM3_Init+0x94>)
 80006f2:	f002 fec3 	bl	800347c <HAL_TIM_ConfigClockSource>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80006fc:	f000 f950 	bl	80009a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000700:	2300      	movs	r3, #0
 8000702:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000708:	463b      	mov	r3, r7
 800070a:	4619      	mov	r1, r3
 800070c:	4805      	ldr	r0, [pc, #20]	; (8000724 <MX_TIM3_Init+0x94>)
 800070e:	f003 f8bf 	bl	8003890 <HAL_TIMEx_MasterConfigSynchronization>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000718:	f000 f942 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	3718      	adds	r7, #24
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000158 	.word	0x20000158
 8000728:	40000400 	.word	0x40000400

0800072c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000730:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_USART1_UART_Init+0x4c>)
 8000732:	4a12      	ldr	r2, [pc, #72]	; (800077c <MX_USART1_UART_Init+0x50>)
 8000734:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000736:	4b10      	ldr	r3, [pc, #64]	; (8000778 <MX_USART1_UART_Init+0x4c>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800073c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_USART1_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_USART1_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <MX_USART1_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_USART1_UART_Init+0x4c>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b08      	ldr	r3, [pc, #32]	; (8000778 <MX_USART1_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_USART1_UART_Init+0x4c>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000762:	4805      	ldr	r0, [pc, #20]	; (8000778 <MX_USART1_UART_Init+0x4c>)
 8000764:	f003 f916 	bl	8003994 <HAL_UART_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800076e:	f000 f917 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200001a0 	.word	0x200001a0
 800077c:	40011000 	.word	0x40011000

08000780 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 8000786:	4a12      	ldr	r2, [pc, #72]	; (80007d0 <MX_USART2_UART_Init+0x50>)
 8000788:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 800078c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000790:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 80007b8:	f003 f8ec 	bl	8003994 <HAL_UART_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007c2:	f000 f8ed 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200001e4 	.word	0x200001e4
 80007d0:	40004400 	.word	0x40004400

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	f107 030c 	add.w	r3, r7, #12
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	4b25      	ldr	r3, [pc, #148]	; (8000884 <MX_GPIO_Init+0xb0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a24      	ldr	r2, [pc, #144]	; (8000884 <MX_GPIO_Init+0xb0>)
 80007f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b22      	ldr	r3, [pc, #136]	; (8000884 <MX_GPIO_Init+0xb0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <MX_GPIO_Init+0xb0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a1d      	ldr	r2, [pc, #116]	; (8000884 <MX_GPIO_Init+0xb0>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <MX_GPIO_Init+0xb0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	4b17      	ldr	r3, [pc, #92]	; (8000884 <MX_GPIO_Init+0xb0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a16      	ldr	r2, [pc, #88]	; (8000884 <MX_GPIO_Init+0xb0>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <MX_GPIO_Init+0xb0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Col0_Pin|Col1_Pin|Col2_Pin|Col3_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	210f      	movs	r1, #15
 8000842:	4811      	ldr	r0, [pc, #68]	; (8000888 <MX_GPIO_Init+0xb4>)
 8000844:	f000 fd4a 	bl	80012dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Col0_Pin Col1_Pin Col2_Pin Col3_Pin */
  GPIO_InitStruct.Pin = Col0_Pin|Col1_Pin|Col2_Pin|Col3_Pin;
 8000848:	230f      	movs	r3, #15
 800084a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	2301      	movs	r3, #1
 800084e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	4619      	mov	r1, r3
 800085e:	480a      	ldr	r0, [pc, #40]	; (8000888 <MX_GPIO_Init+0xb4>)
 8000860:	f000 fbb8 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Row0_Pin Row1_Pin Row2_Pin Row3_Pin */
  GPIO_InitStruct.Pin = Row0_Pin|Row1_Pin|Row2_Pin|Row3_Pin;
 8000864:	23f0      	movs	r3, #240	; 0xf0
 8000866:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000868:	2300      	movs	r3, #0
 800086a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800086c:	2302      	movs	r3, #2
 800086e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000870:	f107 030c 	add.w	r3, r7, #12
 8000874:	4619      	mov	r1, r3
 8000876:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_GPIO_Init+0xb4>)
 8000878:	f000 fbac 	bl	8000fd4 <HAL_GPIO_Init>

}
 800087c:	bf00      	nop
 800087e:	3720      	adds	r7, #32
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40023800 	.word	0x40023800
 8000888:	40020400 	.word	0x40020400

0800088c <drive_column>:

/* USER CODE BEGIN 4 */
void drive_column(void) {
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
	col = (col + 1) & 0x3;
 8000890:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <drive_column+0x30>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	3301      	adds	r3, #1
 8000896:	f003 0303 	and.w	r3, r3, #3
 800089a:	4a08      	ldr	r2, [pc, #32]	; (80008bc <drive_column+0x30>)
 800089c:	6013      	str	r3, [r2, #0]
	GPIOB->BSRR = 0xf << 16;
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <drive_column+0x34>)
 80008a0:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 80008a4:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR = 0x1 << (col);
 80008a6:	4b05      	ldr	r3, [pc, #20]	; (80008bc <drive_column+0x30>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2201      	movs	r2, #1
 80008ac:	409a      	lsls	r2, r3
 80008ae:	4b04      	ldr	r3, [pc, #16]	; (80008c0 <drive_column+0x34>)
 80008b0:	619a      	str	r2, [r3, #24]
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	20000228 	.word	0x20000228
 80008c0:	40020400 	.word	0x40020400

080008c4 <read_rows>:

uint8_t read_rows(void) {
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
	return ((GPIOB->IDR & 0xf0) >> 4) & 0xf;
 80008c8:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <read_rows+0x1c>)
 80008ca:	691b      	ldr	r3, [r3, #16]
 80008cc:	091b      	lsrs	r3, r3, #4
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	f003 030f 	and.w	r3, r3, #15
 80008d4:	b2db      	uxtb	r3, r3
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	40020400 	.word	0x40020400

080008e4 <HAL_TIM_PeriodElapsedCallback>:
	bt_clean_buffer[1] = buffer[0];
	bt_clean_buffer[2] = buffer[1];
	bt_clean_buffer[3] = buffer[2];
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4a27      	ldr	r2, [pc, #156]	; (800098c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d13e      	bne.n	8000972 <HAL_TIM_PeriodElapsedCallback+0x8e>
		uint8_t rows = read_rows();
 80008f4:	f7ff ffe6 	bl	80008c4 <read_rows>
 80008f8:	4603      	mov	r3, r0
 80008fa:	73fb      	strb	r3, [r7, #15]
		int idx = col / 2;
 80008fc:	4b24      	ldr	r3, [pc, #144]	; (8000990 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	0fda      	lsrs	r2, r3, #31
 8000902:	4413      	add	r3, r2
 8000904:	105b      	asrs	r3, r3, #1
 8000906:	60bb      	str	r3, [r7, #8]
		buffer[idx] &= ~(0xf << ((col % 2) * 4));
 8000908:	4b21      	ldr	r3, [pc, #132]	; (8000990 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	bfb8      	it	lt
 8000914:	425b      	neglt	r3, r3
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	220f      	movs	r2, #15
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	43d9      	mvns	r1, r3
 8000920:	4a1c      	ldr	r2, [pc, #112]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	4413      	add	r3, r2
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	b25a      	sxtb	r2, r3
 800092a:	b24b      	sxtb	r3, r1
 800092c:	4013      	ands	r3, r2
 800092e:	b25b      	sxtb	r3, r3
 8000930:	b2d9      	uxtb	r1, r3
 8000932:	4a18      	ldr	r2, [pc, #96]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	4413      	add	r3, r2
 8000938:	460a      	mov	r2, r1
 800093a:	701a      	strb	r2, [r3, #0]
		buffer[idx] |= rows << ((col % 2) * 4);
 800093c:	7bfa      	ldrb	r2, [r7, #15]
 800093e:	4b14      	ldr	r3, [pc, #80]	; (8000990 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	2b00      	cmp	r3, #0
 8000944:	f003 0301 	and.w	r3, r3, #1
 8000948:	bfb8      	it	lt
 800094a:	425b      	neglt	r3, r3
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	fa02 f103 	lsl.w	r1, r2, r3
 8000952:	4a10      	ldr	r2, [pc, #64]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	4413      	add	r3, r2
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	b25a      	sxtb	r2, r3
 800095c:	b24b      	sxtb	r3, r1
 800095e:	4313      	orrs	r3, r2
 8000960:	b25b      	sxtb	r3, r3
 8000962:	b2d9      	uxtb	r1, r3
 8000964:	4a0b      	ldr	r2, [pc, #44]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	4413      	add	r3, r2
 800096a:	460a      	mov	r2, r1
 800096c:	701a      	strb	r2, [r3, #0]
		drive_column();
 800096e:	f7ff ff8d 	bl	800088c <drive_column>
	}

	if (htim == &htim3) {
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a08      	ldr	r2, [pc, #32]	; (8000998 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d104      	bne.n	8000984 <HAL_TIM_PeriodElapsedCallback+0xa0>
		USBD_HID_SendReport(&hUsbDeviceFS, buffer, sizeof(buffer));
 800097a:	2203      	movs	r2, #3
 800097c:	4905      	ldr	r1, [pc, #20]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800097e:	4807      	ldr	r0, [pc, #28]	; (800099c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000980:	f005 f8ce 	bl	8005b20 <USBD_HID_SendReport>
//		HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 100);
//		printf("%d\r\n",buffer);
	}
}
 8000984:	bf00      	nop
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000110 	.word	0x20000110
 8000990:	20000228 	.word	0x20000228
 8000994:	2000022c 	.word	0x2000022c
 8000998:	20000158 	.word	0x20000158
 800099c:	20000238 	.word	0x20000238

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <Error_Handler+0x8>
	...

080009ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <HAL_MspInit+0x4c>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ba:	4a0f      	ldr	r2, [pc, #60]	; (80009f8 <HAL_MspInit+0x4c>)
 80009bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c0:	6453      	str	r3, [r2, #68]	; 0x44
 80009c2:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <HAL_MspInit+0x4c>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	603b      	str	r3, [r7, #0]
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <HAL_MspInit+0x4c>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	4a08      	ldr	r2, [pc, #32]	; (80009f8 <HAL_MspInit+0x4c>)
 80009d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009dc:	6413      	str	r3, [r2, #64]	; 0x40
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <HAL_MspInit+0x4c>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800

080009fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a0c:	d116      	bne.n	8000a3c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <HAL_TIM_Base_MspInit+0x80>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	4a19      	ldr	r2, [pc, #100]	; (8000a7c <HAL_TIM_Base_MspInit+0x80>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1e:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <HAL_TIM_Base_MspInit+0x80>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	201c      	movs	r0, #28
 8000a30:	f000 fa99 	bl	8000f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a34:	201c      	movs	r0, #28
 8000a36:	f000 fab2 	bl	8000f9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a3a:	e01a      	b.n	8000a72 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a0f      	ldr	r2, [pc, #60]	; (8000a80 <HAL_TIM_Base_MspInit+0x84>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d115      	bne.n	8000a72 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <HAL_TIM_Base_MspInit+0x80>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	4a0b      	ldr	r2, [pc, #44]	; (8000a7c <HAL_TIM_Base_MspInit+0x80>)
 8000a50:	f043 0302 	orr.w	r3, r3, #2
 8000a54:	6413      	str	r3, [r2, #64]	; 0x40
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <HAL_TIM_Base_MspInit+0x80>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	f003 0302 	and.w	r3, r3, #2
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2101      	movs	r1, #1
 8000a66:	201d      	movs	r0, #29
 8000a68:	f000 fa7d 	bl	8000f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a6c:	201d      	movs	r0, #29
 8000a6e:	f000 fa96 	bl	8000f9e <HAL_NVIC_EnableIRQ>
}
 8000a72:	bf00      	nop
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40000400 	.word	0x40000400

08000a84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08c      	sub	sp, #48	; 0x30
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a32      	ldr	r2, [pc, #200]	; (8000b6c <HAL_UART_MspInit+0xe8>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d12d      	bne.n	8000b02 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61bb      	str	r3, [r7, #24]
 8000aaa:	4b31      	ldr	r3, [pc, #196]	; (8000b70 <HAL_UART_MspInit+0xec>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aae:	4a30      	ldr	r2, [pc, #192]	; (8000b70 <HAL_UART_MspInit+0xec>)
 8000ab0:	f043 0310 	orr.w	r3, r3, #16
 8000ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ab6:	4b2e      	ldr	r3, [pc, #184]	; (8000b70 <HAL_UART_MspInit+0xec>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aba:	f003 0310 	and.w	r3, r3, #16
 8000abe:	61bb      	str	r3, [r7, #24]
 8000ac0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]
 8000ac6:	4b2a      	ldr	r3, [pc, #168]	; (8000b70 <HAL_UART_MspInit+0xec>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a29      	ldr	r2, [pc, #164]	; (8000b70 <HAL_UART_MspInit+0xec>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b27      	ldr	r3, [pc, #156]	; (8000b70 <HAL_UART_MspInit+0xec>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ade:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aec:	2303      	movs	r3, #3
 8000aee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000af0:	2307      	movs	r3, #7
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af4:	f107 031c 	add.w	r3, r7, #28
 8000af8:	4619      	mov	r1, r3
 8000afa:	481e      	ldr	r0, [pc, #120]	; (8000b74 <HAL_UART_MspInit+0xf0>)
 8000afc:	f000 fa6a 	bl	8000fd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b00:	e030      	b.n	8000b64 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a1c      	ldr	r2, [pc, #112]	; (8000b78 <HAL_UART_MspInit+0xf4>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d12b      	bne.n	8000b64 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <HAL_UART_MspInit+0xec>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	4a16      	ldr	r2, [pc, #88]	; (8000b70 <HAL_UART_MspInit+0xec>)
 8000b16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1c:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <HAL_UART_MspInit+0xec>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <HAL_UART_MspInit+0xec>)
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b30:	4a0f      	ldr	r2, [pc, #60]	; (8000b70 <HAL_UART_MspInit+0xec>)
 8000b32:	f043 0301 	orr.w	r3, r3, #1
 8000b36:	6313      	str	r3, [r2, #48]	; 0x30
 8000b38:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <HAL_UART_MspInit+0xec>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3c:	f003 0301 	and.w	r3, r3, #1
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b44:	230c      	movs	r3, #12
 8000b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b54:	2307      	movs	r3, #7
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b58:	f107 031c 	add.w	r3, r7, #28
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4805      	ldr	r0, [pc, #20]	; (8000b74 <HAL_UART_MspInit+0xf0>)
 8000b60:	f000 fa38 	bl	8000fd4 <HAL_GPIO_Init>
}
 8000b64:	bf00      	nop
 8000b66:	3730      	adds	r7, #48	; 0x30
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40011000 	.word	0x40011000
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020000 	.word	0x40020000
 8000b78:	40004400 	.word	0x40004400

08000b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <NMI_Handler+0x4>

08000b82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <HardFault_Handler+0x4>

08000b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <MemManage_Handler+0x4>

08000b8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <BusFault_Handler+0x4>

08000b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <UsageFault_Handler+0x4>

08000b9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc8:	f000 f8ae 	bl	8000d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bd4:	4802      	ldr	r0, [pc, #8]	; (8000be0 <TIM2_IRQHandler+0x10>)
 8000bd6:	f002 fb49 	bl	800326c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000110 	.word	0x20000110

08000be4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <TIM3_IRQHandler+0x10>)
 8000bea:	f002 fb3f 	bl	800326c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000158 	.word	0x20000158

08000bf8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <OTG_FS_IRQHandler+0x10>)
 8000bfe:	f000 fcd6 	bl	80015ae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000714 	.word	0x20000714

08000c0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <SystemInit+0x20>)
 8000c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c16:	4a05      	ldr	r2, [pc, #20]	; (8000c2c <SystemInit+0x20>)
 8000c18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c34:	480d      	ldr	r0, [pc, #52]	; (8000c6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c36:	490e      	ldr	r1, [pc, #56]	; (8000c70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c38:	4a0e      	ldr	r2, [pc, #56]	; (8000c74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c3c:	e002      	b.n	8000c44 <LoopCopyDataInit>

08000c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c42:	3304      	adds	r3, #4

08000c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c48:	d3f9      	bcc.n	8000c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4a:	4a0b      	ldr	r2, [pc, #44]	; (8000c78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c4c:	4c0b      	ldr	r4, [pc, #44]	; (8000c7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c50:	e001      	b.n	8000c56 <LoopFillZerobss>

08000c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c54:	3204      	adds	r2, #4

08000c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c58:	d3fb      	bcc.n	8000c52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c5a:	f7ff ffd7 	bl	8000c0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c5e:	f006 ff07 	bl	8007a70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c62:	f7ff fc3b 	bl	80004dc <main>
  bx  lr    
 8000c66:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c70:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 8000c74:	08007b48 	.word	0x08007b48
  ldr r2, =_sbss
 8000c78:	200000f4 	.word	0x200000f4
  ldr r4, =_ebss
 8000c7c:	20000c34 	.word	0x20000c34

08000c80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c80:	e7fe      	b.n	8000c80 <ADC_IRQHandler>
	...

08000c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c88:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <HAL_Init+0x40>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a0d      	ldr	r2, [pc, #52]	; (8000cc4 <HAL_Init+0x40>)
 8000c8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c94:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <HAL_Init+0x40>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <HAL_Init+0x40>)
 8000c9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <HAL_Init+0x40>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a07      	ldr	r2, [pc, #28]	; (8000cc4 <HAL_Init+0x40>)
 8000ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000caa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cac:	2003      	movs	r0, #3
 8000cae:	f000 f94f 	bl	8000f50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cb2:	200f      	movs	r0, #15
 8000cb4:	f000 f808 	bl	8000cc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb8:	f7ff fe78 	bl	80009ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40023c00 	.word	0x40023c00

08000cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <HAL_InitTick+0x54>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <HAL_InitTick+0x58>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 f967 	bl	8000fba <HAL_SYSTICK_Config>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e00e      	b.n	8000d14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b0f      	cmp	r3, #15
 8000cfa:	d80a      	bhi.n	8000d12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	6879      	ldr	r1, [r7, #4]
 8000d00:	f04f 30ff 	mov.w	r0, #4294967295
 8000d04:	f000 f92f 	bl	8000f66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d08:	4a06      	ldr	r2, [pc, #24]	; (8000d24 <HAL_InitTick+0x5c>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	e000      	b.n	8000d14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000000 	.word	0x20000000
 8000d20:	20000008 	.word	0x20000008
 8000d24:	20000004 	.word	0x20000004

08000d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_IncTick+0x20>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_IncTick+0x24>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4413      	add	r3, r2
 8000d38:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <HAL_IncTick+0x24>)
 8000d3a:	6013      	str	r3, [r2, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000008 	.word	0x20000008
 8000d4c:	20000230 	.word	0x20000230

08000d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return uwTick;
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <HAL_GetTick+0x14>)
 8000d56:	681b      	ldr	r3, [r3, #0]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000230 	.word	0x20000230

08000d68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d70:	f7ff ffee 	bl	8000d50 <HAL_GetTick>
 8000d74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d80:	d005      	beq.n	8000d8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d82:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <HAL_Delay+0x44>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	461a      	mov	r2, r3
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d8e:	bf00      	nop
 8000d90:	f7ff ffde 	bl	8000d50 <HAL_GetTick>
 8000d94:	4602      	mov	r2, r0
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d8f7      	bhi.n	8000d90 <HAL_Delay+0x28>
  {
  }
}
 8000da0:	bf00      	nop
 8000da2:	bf00      	nop
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000008 	.word	0x20000008

08000db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc6:	68ba      	ldr	r2, [r7, #8]
 8000dc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dcc:	4013      	ands	r3, r2
 8000dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000de2:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <__NVIC_SetPriorityGrouping+0x44>)
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	60d3      	str	r3, [r2, #12]
}
 8000de8:	bf00      	nop
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dfc:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <__NVIC_GetPriorityGrouping+0x18>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	0a1b      	lsrs	r3, r3, #8
 8000e02:	f003 0307 	and.w	r3, r3, #7
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	db0b      	blt.n	8000e3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	f003 021f 	and.w	r2, r3, #31
 8000e2c:	4907      	ldr	r1, [pc, #28]	; (8000e4c <__NVIC_EnableIRQ+0x38>)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	095b      	lsrs	r3, r3, #5
 8000e34:	2001      	movs	r0, #1
 8000e36:	fa00 f202 	lsl.w	r2, r0, r2
 8000e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000e100 	.word	0xe000e100

08000e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	6039      	str	r1, [r7, #0]
 8000e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	db0a      	blt.n	8000e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	490c      	ldr	r1, [pc, #48]	; (8000e9c <__NVIC_SetPriority+0x4c>)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	0112      	lsls	r2, r2, #4
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	440b      	add	r3, r1
 8000e74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e78:	e00a      	b.n	8000e90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4908      	ldr	r1, [pc, #32]	; (8000ea0 <__NVIC_SetPriority+0x50>)
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	f003 030f 	and.w	r3, r3, #15
 8000e86:	3b04      	subs	r3, #4
 8000e88:	0112      	lsls	r2, r2, #4
 8000e8a:	b2d2      	uxtb	r2, r2
 8000e8c:	440b      	add	r3, r1
 8000e8e:	761a      	strb	r2, [r3, #24]
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	e000e100 	.word	0xe000e100
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b089      	sub	sp, #36	; 0x24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	f1c3 0307 	rsb	r3, r3, #7
 8000ebe:	2b04      	cmp	r3, #4
 8000ec0:	bf28      	it	cs
 8000ec2:	2304      	movcs	r3, #4
 8000ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3304      	adds	r3, #4
 8000eca:	2b06      	cmp	r3, #6
 8000ecc:	d902      	bls.n	8000ed4 <NVIC_EncodePriority+0x30>
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3b03      	subs	r3, #3
 8000ed2:	e000      	b.n	8000ed6 <NVIC_EncodePriority+0x32>
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43da      	mvns	r2, r3
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	401a      	ands	r2, r3
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef6:	43d9      	mvns	r1, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	4313      	orrs	r3, r2
         );
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3724      	adds	r7, #36	; 0x24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
	...

08000f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f1c:	d301      	bcc.n	8000f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e00f      	b.n	8000f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f22:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <SysTick_Config+0x40>)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f2a:	210f      	movs	r1, #15
 8000f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f30:	f7ff ff8e 	bl	8000e50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <SysTick_Config+0x40>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f3a:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <SysTick_Config+0x40>)
 8000f3c:	2207      	movs	r2, #7
 8000f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	e000e010 	.word	0xe000e010

08000f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff ff29 	bl	8000db0 <__NVIC_SetPriorityGrouping>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b086      	sub	sp, #24
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	60b9      	str	r1, [r7, #8]
 8000f70:	607a      	str	r2, [r7, #4]
 8000f72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f78:	f7ff ff3e 	bl	8000df8 <__NVIC_GetPriorityGrouping>
 8000f7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	68b9      	ldr	r1, [r7, #8]
 8000f82:	6978      	ldr	r0, [r7, #20]
 8000f84:	f7ff ff8e 	bl	8000ea4 <NVIC_EncodePriority>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8e:	4611      	mov	r1, r2
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff5d 	bl	8000e50 <__NVIC_SetPriority>
}
 8000f96:	bf00      	nop
 8000f98:	3718      	adds	r7, #24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ff31 	bl	8000e14 <__NVIC_EnableIRQ>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff ffa2 	bl	8000f0c <SysTick_Config>
 8000fc8:	4603      	mov	r3, r0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b089      	sub	sp, #36	; 0x24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
 8000fee:	e159      	b.n	80012a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	429a      	cmp	r2, r3
 800100a:	f040 8148 	bne.w	800129e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f003 0303 	and.w	r3, r3, #3
 8001016:	2b01      	cmp	r3, #1
 8001018:	d005      	beq.n	8001026 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001022:	2b02      	cmp	r3, #2
 8001024:	d130      	bne.n	8001088 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	2203      	movs	r2, #3
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	68da      	ldr	r2, [r3, #12]
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800105c:	2201      	movs	r2, #1
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	091b      	lsrs	r3, r3, #4
 8001072:	f003 0201 	and.w	r2, r3, #1
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 0303 	and.w	r3, r3, #3
 8001090:	2b03      	cmp	r3, #3
 8001092:	d017      	beq.n	80010c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	2203      	movs	r2, #3
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	689a      	ldr	r2, [r3, #8]
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 0303 	and.w	r3, r3, #3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d123      	bne.n	8001118 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	08da      	lsrs	r2, r3, #3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3208      	adds	r2, #8
 80010d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	f003 0307 	and.w	r3, r3, #7
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	220f      	movs	r2, #15
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	691a      	ldr	r2, [r3, #16]
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	08da      	lsrs	r2, r3, #3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3208      	adds	r2, #8
 8001112:	69b9      	ldr	r1, [r7, #24]
 8001114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	2203      	movs	r2, #3
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 0203 	and.w	r2, r3, #3
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001154:	2b00      	cmp	r3, #0
 8001156:	f000 80a2 	beq.w	800129e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	4b57      	ldr	r3, [pc, #348]	; (80012bc <HAL_GPIO_Init+0x2e8>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	4a56      	ldr	r2, [pc, #344]	; (80012bc <HAL_GPIO_Init+0x2e8>)
 8001164:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001168:	6453      	str	r3, [r2, #68]	; 0x44
 800116a:	4b54      	ldr	r3, [pc, #336]	; (80012bc <HAL_GPIO_Init+0x2e8>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001176:	4a52      	ldr	r2, [pc, #328]	; (80012c0 <HAL_GPIO_Init+0x2ec>)
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	089b      	lsrs	r3, r3, #2
 800117c:	3302      	adds	r3, #2
 800117e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f003 0303 	and.w	r3, r3, #3
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	220f      	movs	r2, #15
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a49      	ldr	r2, [pc, #292]	; (80012c4 <HAL_GPIO_Init+0x2f0>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d019      	beq.n	80011d6 <HAL_GPIO_Init+0x202>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a48      	ldr	r2, [pc, #288]	; (80012c8 <HAL_GPIO_Init+0x2f4>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d013      	beq.n	80011d2 <HAL_GPIO_Init+0x1fe>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a47      	ldr	r2, [pc, #284]	; (80012cc <HAL_GPIO_Init+0x2f8>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d00d      	beq.n	80011ce <HAL_GPIO_Init+0x1fa>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a46      	ldr	r2, [pc, #280]	; (80012d0 <HAL_GPIO_Init+0x2fc>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d007      	beq.n	80011ca <HAL_GPIO_Init+0x1f6>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a45      	ldr	r2, [pc, #276]	; (80012d4 <HAL_GPIO_Init+0x300>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d101      	bne.n	80011c6 <HAL_GPIO_Init+0x1f2>
 80011c2:	2304      	movs	r3, #4
 80011c4:	e008      	b.n	80011d8 <HAL_GPIO_Init+0x204>
 80011c6:	2307      	movs	r3, #7
 80011c8:	e006      	b.n	80011d8 <HAL_GPIO_Init+0x204>
 80011ca:	2303      	movs	r3, #3
 80011cc:	e004      	b.n	80011d8 <HAL_GPIO_Init+0x204>
 80011ce:	2302      	movs	r3, #2
 80011d0:	e002      	b.n	80011d8 <HAL_GPIO_Init+0x204>
 80011d2:	2301      	movs	r3, #1
 80011d4:	e000      	b.n	80011d8 <HAL_GPIO_Init+0x204>
 80011d6:	2300      	movs	r3, #0
 80011d8:	69fa      	ldr	r2, [r7, #28]
 80011da:	f002 0203 	and.w	r2, r2, #3
 80011de:	0092      	lsls	r2, r2, #2
 80011e0:	4093      	lsls	r3, r2
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e8:	4935      	ldr	r1, [pc, #212]	; (80012c0 <HAL_GPIO_Init+0x2ec>)
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	089b      	lsrs	r3, r3, #2
 80011ee:	3302      	adds	r3, #2
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011f6:	4b38      	ldr	r3, [pc, #224]	; (80012d8 <HAL_GPIO_Init+0x304>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800121a:	4a2f      	ldr	r2, [pc, #188]	; (80012d8 <HAL_GPIO_Init+0x304>)
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001220:	4b2d      	ldr	r3, [pc, #180]	; (80012d8 <HAL_GPIO_Init+0x304>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001244:	4a24      	ldr	r2, [pc, #144]	; (80012d8 <HAL_GPIO_Init+0x304>)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800124a:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <HAL_GPIO_Init+0x304>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800126e:	4a1a      	ldr	r2, [pc, #104]	; (80012d8 <HAL_GPIO_Init+0x304>)
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001274:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <HAL_GPIO_Init+0x304>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001298:	4a0f      	ldr	r2, [pc, #60]	; (80012d8 <HAL_GPIO_Init+0x304>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3301      	adds	r3, #1
 80012a2:	61fb      	str	r3, [r7, #28]
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	2b0f      	cmp	r3, #15
 80012a8:	f67f aea2 	bls.w	8000ff0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	3724      	adds	r7, #36	; 0x24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40013800 	.word	0x40013800
 80012c4:	40020000 	.word	0x40020000
 80012c8:	40020400 	.word	0x40020400
 80012cc:	40020800 	.word	0x40020800
 80012d0:	40020c00 	.word	0x40020c00
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40013c00 	.word	0x40013c00

080012dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	460b      	mov	r3, r1
 80012e6:	807b      	strh	r3, [r7, #2]
 80012e8:	4613      	mov	r3, r2
 80012ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012ec:	787b      	ldrb	r3, [r7, #1]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012f2:	887a      	ldrh	r2, [r7, #2]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012f8:	e003      	b.n	8001302 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012fa:	887b      	ldrh	r3, [r7, #2]
 80012fc:	041a      	lsls	r2, r3, #16
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	619a      	str	r2, [r3, #24]
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800130e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001310:	b08f      	sub	sp, #60	; 0x3c
 8001312:	af0a      	add	r7, sp, #40	; 0x28
 8001314:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d101      	bne.n	8001320 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e10f      	b.n	8001540 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	d106      	bne.n	8001340 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f006 f8a0 	bl	8007480 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2203      	movs	r2, #3
 8001344:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800134c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001350:	2b00      	cmp	r3, #0
 8001352:	d102      	bne.n	800135a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f002 feef 	bl	8004142 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	603b      	str	r3, [r7, #0]
 800136a:	687e      	ldr	r6, [r7, #4]
 800136c:	466d      	mov	r5, sp
 800136e:	f106 0410 	add.w	r4, r6, #16
 8001372:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001374:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001376:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001378:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800137a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800137e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001382:	1d33      	adds	r3, r6, #4
 8001384:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001386:	6838      	ldr	r0, [r7, #0]
 8001388:	f002 fdc6 	bl	8003f18 <USB_CoreInit>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d005      	beq.n	800139e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2202      	movs	r2, #2
 8001396:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e0d0      	b.n	8001540 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2100      	movs	r1, #0
 80013a4:	4618      	mov	r0, r3
 80013a6:	f002 fedd 	bl	8004164 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013aa:	2300      	movs	r3, #0
 80013ac:	73fb      	strb	r3, [r7, #15]
 80013ae:	e04a      	b.n	8001446 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013b0:	7bfa      	ldrb	r2, [r7, #15]
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	4613      	mov	r3, r2
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	4413      	add	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	440b      	add	r3, r1
 80013be:	333d      	adds	r3, #61	; 0x3d
 80013c0:	2201      	movs	r2, #1
 80013c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013c4:	7bfa      	ldrb	r2, [r7, #15]
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	4613      	mov	r3, r2
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	4413      	add	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	440b      	add	r3, r1
 80013d2:	333c      	adds	r3, #60	; 0x3c
 80013d4:	7bfa      	ldrb	r2, [r7, #15]
 80013d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013d8:	7bfa      	ldrb	r2, [r7, #15]
 80013da:	7bfb      	ldrb	r3, [r7, #15]
 80013dc:	b298      	uxth	r0, r3
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	4613      	mov	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	4413      	add	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	440b      	add	r3, r1
 80013ea:	3344      	adds	r3, #68	; 0x44
 80013ec:	4602      	mov	r2, r0
 80013ee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013f0:	7bfa      	ldrb	r2, [r7, #15]
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	4613      	mov	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	4413      	add	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	440b      	add	r3, r1
 80013fe:	3340      	adds	r3, #64	; 0x40
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001404:	7bfa      	ldrb	r2, [r7, #15]
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	4613      	mov	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	4413      	add	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	440b      	add	r3, r1
 8001412:	3348      	adds	r3, #72	; 0x48
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001418:	7bfa      	ldrb	r2, [r7, #15]
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	4613      	mov	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	4413      	add	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	440b      	add	r3, r1
 8001426:	334c      	adds	r3, #76	; 0x4c
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800142c:	7bfa      	ldrb	r2, [r7, #15]
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	4613      	mov	r3, r2
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	4413      	add	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	440b      	add	r3, r1
 800143a:	3354      	adds	r3, #84	; 0x54
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	3301      	adds	r3, #1
 8001444:	73fb      	strb	r3, [r7, #15]
 8001446:	7bfa      	ldrb	r2, [r7, #15]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	429a      	cmp	r2, r3
 800144e:	d3af      	bcc.n	80013b0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001450:	2300      	movs	r3, #0
 8001452:	73fb      	strb	r3, [r7, #15]
 8001454:	e044      	b.n	80014e0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001456:	7bfa      	ldrb	r2, [r7, #15]
 8001458:	6879      	ldr	r1, [r7, #4]
 800145a:	4613      	mov	r3, r2
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	4413      	add	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	440b      	add	r3, r1
 8001464:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001468:	2200      	movs	r2, #0
 800146a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800146c:	7bfa      	ldrb	r2, [r7, #15]
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	4613      	mov	r3, r2
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	4413      	add	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	440b      	add	r3, r1
 800147a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800147e:	7bfa      	ldrb	r2, [r7, #15]
 8001480:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001482:	7bfa      	ldrb	r2, [r7, #15]
 8001484:	6879      	ldr	r1, [r7, #4]
 8001486:	4613      	mov	r3, r2
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	4413      	add	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	440b      	add	r3, r1
 8001490:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001498:	7bfa      	ldrb	r2, [r7, #15]
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	4613      	mov	r3, r2
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	4413      	add	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	440b      	add	r3, r1
 80014a6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014ae:	7bfa      	ldrb	r2, [r7, #15]
 80014b0:	6879      	ldr	r1, [r7, #4]
 80014b2:	4613      	mov	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	4413      	add	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	440b      	add	r3, r1
 80014bc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014c4:	7bfa      	ldrb	r2, [r7, #15]
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	4613      	mov	r3, r2
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	4413      	add	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	440b      	add	r3, r1
 80014d2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	3301      	adds	r3, #1
 80014de:	73fb      	strb	r3, [r7, #15]
 80014e0:	7bfa      	ldrb	r2, [r7, #15]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d3b5      	bcc.n	8001456 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	687e      	ldr	r6, [r7, #4]
 80014f2:	466d      	mov	r5, sp
 80014f4:	f106 0410 	add.w	r4, r6, #16
 80014f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001500:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001504:	e885 0003 	stmia.w	r5, {r0, r1}
 8001508:	1d33      	adds	r3, r6, #4
 800150a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800150c:	6838      	ldr	r0, [r7, #0]
 800150e:	f002 fe75 	bl	80041fc <USB_DevInit>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d005      	beq.n	8001524 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2202      	movs	r2, #2
 800151c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e00d      	b.n	8001540 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2201      	movs	r2, #1
 8001530:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f003 ffc4 	bl	80054c6 <USB_DevDisconnect>

  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3714      	adds	r7, #20
 8001544:	46bd      	mov	sp, r7
 8001546:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001548 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800155c:	2b01      	cmp	r3, #1
 800155e:	d101      	bne.n	8001564 <HAL_PCD_Start+0x1c>
 8001560:	2302      	movs	r3, #2
 8001562:	e020      	b.n	80015a6 <HAL_PCD_Start+0x5e>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001570:	2b01      	cmp	r3, #1
 8001572:	d109      	bne.n	8001588 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001578:	2b01      	cmp	r3, #1
 800157a:	d005      	beq.n	8001588 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001580:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f002 fdc7 	bl	8004120 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f003 ff74 	bl	8005484 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80015ae:	b590      	push	{r4, r7, lr}
 80015b0:	b08d      	sub	sp, #52	; 0x34
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015bc:	6a3b      	ldr	r3, [r7, #32]
 80015be:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f004 f832 	bl	800562e <USB_GetMode>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f040 848a 	bne.w	8001ee6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f003 ff96 	bl	8005508 <USB_ReadInterrupts>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 8480 	beq.w	8001ee4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	0a1b      	lsrs	r3, r3, #8
 80015ee:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f003 ff83 	bl	8005508 <USB_ReadInterrupts>
 8001602:	4603      	mov	r3, r0
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b02      	cmp	r3, #2
 800160a:	d107      	bne.n	800161c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	695a      	ldr	r2, [r3, #20]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f002 0202 	and.w	r2, r2, #2
 800161a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f003 ff71 	bl	8005508 <USB_ReadInterrupts>
 8001626:	4603      	mov	r3, r0
 8001628:	f003 0310 	and.w	r3, r3, #16
 800162c:	2b10      	cmp	r3, #16
 800162e:	d161      	bne.n	80016f4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	699a      	ldr	r2, [r3, #24]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 0210 	bic.w	r2, r2, #16
 800163e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001640:	6a3b      	ldr	r3, [r7, #32]
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	f003 020f 	and.w	r2, r3, #15
 800164c:	4613      	mov	r3, r2
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	4413      	add	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	4413      	add	r3, r2
 800165c:	3304      	adds	r3, #4
 800165e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	0c5b      	lsrs	r3, r3, #17
 8001664:	f003 030f 	and.w	r3, r3, #15
 8001668:	2b02      	cmp	r3, #2
 800166a:	d124      	bne.n	80016b6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001672:	4013      	ands	r3, r2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d035      	beq.n	80016e4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	091b      	lsrs	r3, r3, #4
 8001680:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001682:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001686:	b29b      	uxth	r3, r3
 8001688:	461a      	mov	r2, r3
 800168a:	6a38      	ldr	r0, [r7, #32]
 800168c:	f003 fda8 	bl	80051e0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	691a      	ldr	r2, [r3, #16]
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	091b      	lsrs	r3, r3, #4
 8001698:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800169c:	441a      	add	r2, r3
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	6a1a      	ldr	r2, [r3, #32]
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	091b      	lsrs	r3, r3, #4
 80016aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016ae:	441a      	add	r2, r3
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	621a      	str	r2, [r3, #32]
 80016b4:	e016      	b.n	80016e4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	0c5b      	lsrs	r3, r3, #17
 80016ba:	f003 030f 	and.w	r3, r3, #15
 80016be:	2b06      	cmp	r3, #6
 80016c0:	d110      	bne.n	80016e4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80016c8:	2208      	movs	r2, #8
 80016ca:	4619      	mov	r1, r3
 80016cc:	6a38      	ldr	r0, [r7, #32]
 80016ce:	f003 fd87 	bl	80051e0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	6a1a      	ldr	r2, [r3, #32]
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	091b      	lsrs	r3, r3, #4
 80016da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016de:	441a      	add	r2, r3
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	699a      	ldr	r2, [r3, #24]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 0210 	orr.w	r2, r2, #16
 80016f2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f003 ff05 	bl	8005508 <USB_ReadInterrupts>
 80016fe:	4603      	mov	r3, r0
 8001700:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001704:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001708:	f040 80a7 	bne.w	800185a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800170c:	2300      	movs	r3, #0
 800170e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f003 ff0a 	bl	800552e <USB_ReadDevAllOutEpInterrupt>
 800171a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800171c:	e099      	b.n	8001852 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800171e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	2b00      	cmp	r3, #0
 8001726:	f000 808e 	beq.w	8001846 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	4611      	mov	r1, r2
 8001734:	4618      	mov	r0, r3
 8001736:	f003 ff2e 	bl	8005596 <USB_ReadDevOutEPInterrupt>
 800173a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00c      	beq.n	8001760 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	015a      	lsls	r2, r3, #5
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	4413      	add	r3, r2
 800174e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001752:	461a      	mov	r2, r3
 8001754:	2301      	movs	r3, #1
 8001756:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001758:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 feaa 	bl	80024b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	2b00      	cmp	r3, #0
 8001768:	d00c      	beq.n	8001784 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	015a      	lsls	r2, r3, #5
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	4413      	add	r3, r2
 8001772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001776:	461a      	mov	r2, r3
 8001778:	2308      	movs	r3, #8
 800177a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800177c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 ff80 	bl	8002684 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	f003 0310 	and.w	r3, r3, #16
 800178a:	2b00      	cmp	r3, #0
 800178c:	d008      	beq.n	80017a0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	015a      	lsls	r2, r3, #5
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	4413      	add	r3, r2
 8001796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800179a:	461a      	mov	r2, r3
 800179c:	2310      	movs	r3, #16
 800179e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d030      	beq.n	800180c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80017aa:	6a3b      	ldr	r3, [r7, #32]
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017b2:	2b80      	cmp	r3, #128	; 0x80
 80017b4:	d109      	bne.n	80017ca <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	69fa      	ldr	r2, [r7, #28]
 80017c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017c8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80017ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017cc:	4613      	mov	r3, r2
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	4413      	add	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	4413      	add	r3, r2
 80017dc:	3304      	adds	r3, #4
 80017de:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	78db      	ldrb	r3, [r3, #3]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d108      	bne.n	80017fa <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	2200      	movs	r2, #0
 80017ec:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	4619      	mov	r1, r3
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f005 ff3f 	bl	8007678 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	015a      	lsls	r2, r3, #5
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	4413      	add	r3, r2
 8001802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001806:	461a      	mov	r2, r3
 8001808:	2302      	movs	r3, #2
 800180a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	f003 0320 	and.w	r3, r3, #32
 8001812:	2b00      	cmp	r3, #0
 8001814:	d008      	beq.n	8001828 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	015a      	lsls	r2, r3, #5
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	4413      	add	r3, r2
 800181e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001822:	461a      	mov	r2, r3
 8001824:	2320      	movs	r3, #32
 8001826:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d009      	beq.n	8001846 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	015a      	lsls	r2, r3, #5
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	4413      	add	r3, r2
 800183a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800183e:	461a      	mov	r2, r3
 8001840:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001844:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	3301      	adds	r3, #1
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800184c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800184e:	085b      	lsrs	r3, r3, #1
 8001850:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001854:	2b00      	cmp	r3, #0
 8001856:	f47f af62 	bne.w	800171e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f003 fe52 	bl	8005508 <USB_ReadInterrupts>
 8001864:	4603      	mov	r3, r0
 8001866:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800186a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800186e:	f040 80db 	bne.w	8001a28 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f003 fe73 	bl	8005562 <USB_ReadDevAllInEpInterrupt>
 800187c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800187e:	2300      	movs	r3, #0
 8001880:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001882:	e0cd      	b.n	8001a20 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	f000 80c2 	beq.w	8001a14 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	4611      	mov	r1, r2
 800189a:	4618      	mov	r0, r3
 800189c:	f003 fe99 	bl	80055d2 <USB_ReadDevInEPInterrupt>
 80018a0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d057      	beq.n	800195c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	2201      	movs	r2, #1
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	69f9      	ldr	r1, [r7, #28]
 80018c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80018cc:	4013      	ands	r3, r2
 80018ce:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	015a      	lsls	r2, r3, #5
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	4413      	add	r3, r2
 80018d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018dc:	461a      	mov	r2, r3
 80018de:	2301      	movs	r3, #1
 80018e0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d132      	bne.n	8001950 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ee:	4613      	mov	r3, r2
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	4413      	add	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	440b      	add	r3, r1
 80018f8:	334c      	adds	r3, #76	; 0x4c
 80018fa:	6819      	ldr	r1, [r3, #0]
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001900:	4613      	mov	r3, r2
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	4413      	add	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4403      	add	r3, r0
 800190a:	3348      	adds	r3, #72	; 0x48
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4419      	add	r1, r3
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001914:	4613      	mov	r3, r2
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	4413      	add	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4403      	add	r3, r0
 800191e:	334c      	adds	r3, #76	; 0x4c
 8001920:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	2b00      	cmp	r3, #0
 8001926:	d113      	bne.n	8001950 <HAL_PCD_IRQHandler+0x3a2>
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800192c:	4613      	mov	r3, r2
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	4413      	add	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	3354      	adds	r3, #84	; 0x54
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d108      	bne.n	8001950 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6818      	ldr	r0, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001948:	461a      	mov	r2, r3
 800194a:	2101      	movs	r1, #1
 800194c:	f003 fea0 	bl	8005690 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	b2db      	uxtb	r3, r3
 8001954:	4619      	mov	r1, r3
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f005 fe13 	bl	8007582 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	2b00      	cmp	r3, #0
 8001964:	d008      	beq.n	8001978 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	015a      	lsls	r2, r3, #5
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	4413      	add	r3, r2
 800196e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001972:	461a      	mov	r2, r3
 8001974:	2308      	movs	r3, #8
 8001976:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	f003 0310 	and.w	r3, r3, #16
 800197e:	2b00      	cmp	r3, #0
 8001980:	d008      	beq.n	8001994 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	015a      	lsls	r2, r3, #5
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	4413      	add	r3, r2
 800198a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800198e:	461a      	mov	r2, r3
 8001990:	2310      	movs	r3, #16
 8001992:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800199a:	2b00      	cmp	r3, #0
 800199c:	d008      	beq.n	80019b0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	015a      	lsls	r2, r3, #5
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	4413      	add	r3, r2
 80019a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019aa:	461a      	mov	r2, r3
 80019ac:	2340      	movs	r3, #64	; 0x40
 80019ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d023      	beq.n	8001a02 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80019ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019bc:	6a38      	ldr	r0, [r7, #32]
 80019be:	f002 fd81 	bl	80044c4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80019c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c4:	4613      	mov	r3, r2
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	4413      	add	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	3338      	adds	r3, #56	; 0x38
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	4413      	add	r3, r2
 80019d2:	3304      	adds	r3, #4
 80019d4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	78db      	ldrb	r3, [r3, #3]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d108      	bne.n	80019f0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	2200      	movs	r2, #0
 80019e2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	4619      	mov	r1, r3
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f005 fe56 	bl	800769c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	015a      	lsls	r2, r3, #5
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	4413      	add	r3, r2
 80019f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019fc:	461a      	mov	r2, r3
 80019fe:	2302      	movs	r3, #2
 8001a00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001a0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 fcc3 	bl	800239a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	3301      	adds	r3, #1
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a1c:	085b      	lsrs	r3, r3, #1
 8001a1e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f47f af2e 	bne.w	8001884 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f003 fd6b 	bl	8005508 <USB_ReadInterrupts>
 8001a32:	4603      	mov	r3, r0
 8001a34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001a38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a3c:	d122      	bne.n	8001a84 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	69fa      	ldr	r2, [r7, #28]
 8001a48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a4c:	f023 0301 	bic.w	r3, r3, #1
 8001a50:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d108      	bne.n	8001a6e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a64:	2100      	movs	r1, #0
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 feaa 	bl	80027c0 <HAL_PCDEx_LPM_Callback>
 8001a6c:	e002      	b.n	8001a74 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f005 fdf4 	bl	800765c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	695a      	ldr	r2, [r3, #20]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001a82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f003 fd3d 	bl	8005508 <USB_ReadInterrupts>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a98:	d112      	bne.n	8001ac0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d102      	bne.n	8001ab0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f005 fdb0 	bl	8007610 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	695a      	ldr	r2, [r3, #20]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001abe:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f003 fd1f 	bl	8005508 <USB_ReadInterrupts>
 8001aca:	4603      	mov	r3, r0
 8001acc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ad4:	f040 80b7 	bne.w	8001c46 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	69fa      	ldr	r2, [r7, #28]
 8001ae2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ae6:	f023 0301 	bic.w	r3, r3, #1
 8001aea:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2110      	movs	r1, #16
 8001af2:	4618      	mov	r0, r3
 8001af4:	f002 fce6 	bl	80044c4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001af8:	2300      	movs	r3, #0
 8001afa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001afc:	e046      	b.n	8001b8c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b00:	015a      	lsls	r2, r3, #5
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	4413      	add	r3, r2
 8001b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b10:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b14:	015a      	lsls	r2, r3, #5
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	4413      	add	r3, r2
 8001b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b22:	0151      	lsls	r1, r2, #5
 8001b24:	69fa      	ldr	r2, [r7, #28]
 8001b26:	440a      	add	r2, r1
 8001b28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001b2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b30:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b34:	015a      	lsls	r2, r3, #5
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	4413      	add	r3, r2
 8001b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b3e:	461a      	mov	r2, r3
 8001b40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b44:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b48:	015a      	lsls	r2, r3, #5
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b56:	0151      	lsls	r1, r2, #5
 8001b58:	69fa      	ldr	r2, [r7, #28]
 8001b5a:	440a      	add	r2, r1
 8001b5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b64:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b68:	015a      	lsls	r2, r3, #5
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b76:	0151      	lsls	r1, r2, #5
 8001b78:	69fa      	ldr	r2, [r7, #28]
 8001b7a:	440a      	add	r2, r1
 8001b7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b84:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b88:	3301      	adds	r3, #1
 8001b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d3b3      	bcc.n	8001afe <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	69fa      	ldr	r2, [r7, #28]
 8001ba0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ba4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001ba8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d016      	beq.n	8001be0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bbc:	69fa      	ldr	r2, [r7, #28]
 8001bbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bc2:	f043 030b 	orr.w	r3, r3, #11
 8001bc6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	69fa      	ldr	r2, [r7, #28]
 8001bd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bd8:	f043 030b 	orr.w	r3, r3, #11
 8001bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bde:	e015      	b.n	8001c0c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	69fa      	ldr	r2, [r7, #28]
 8001bea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bf2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001bf6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	69fa      	ldr	r2, [r7, #28]
 8001c02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c06:	f043 030b 	orr.w	r3, r3, #11
 8001c0a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	69fa      	ldr	r2, [r7, #28]
 8001c16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c1a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001c1e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6818      	ldr	r0, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c30:	461a      	mov	r2, r3
 8001c32:	f003 fd2d 	bl	8005690 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	695a      	ldr	r2, [r3, #20]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001c44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f003 fc5c 	bl	8005508 <USB_ReadInterrupts>
 8001c50:	4603      	mov	r3, r0
 8001c52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c5a:	d124      	bne.n	8001ca6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f003 fcf2 	bl	800564a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f002 fca7 	bl	80045be <USB_GetDevSpeed>
 8001c70:	4603      	mov	r3, r0
 8001c72:	461a      	mov	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681c      	ldr	r4, [r3, #0]
 8001c7c:	f001 fa10 	bl	80030a0 <HAL_RCC_GetHCLKFreq>
 8001c80:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4620      	mov	r0, r4
 8001c8c:	f002 f9a6 	bl	8003fdc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f005 fc9e 	bl	80075d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	695a      	ldr	r2, [r3, #20]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001ca4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f003 fc2c 	bl	8005508 <USB_ReadInterrupts>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	f003 0308 	and.w	r3, r3, #8
 8001cb6:	2b08      	cmp	r3, #8
 8001cb8:	d10a      	bne.n	8001cd0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f005 fc7b 	bl	80075b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	695a      	ldr	r2, [r3, #20]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f002 0208 	and.w	r2, r2, #8
 8001cce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f003 fc17 	bl	8005508 <USB_ReadInterrupts>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce0:	2b80      	cmp	r3, #128	; 0x80
 8001ce2:	d122      	bne.n	8001d2a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001ce4:	6a3b      	ldr	r3, [r7, #32]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001cec:	6a3b      	ldr	r3, [r7, #32]
 8001cee:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf4:	e014      	b.n	8001d20 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	4413      	add	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	440b      	add	r3, r1
 8001d04:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d105      	bne.n	8001d1a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	4619      	mov	r1, r3
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 fb0f 	bl	8002338 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d3e5      	bcc.n	8001cf6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f003 fbea 	bl	8005508 <USB_ReadInterrupts>
 8001d34:	4603      	mov	r3, r0
 8001d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d3e:	d13b      	bne.n	8001db8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d40:	2301      	movs	r3, #1
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
 8001d44:	e02b      	b.n	8001d9e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	015a      	lsls	r2, r3, #5
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	4413      	add	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	440b      	add	r3, r1
 8001d64:	3340      	adds	r3, #64	; 0x40
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d115      	bne.n	8001d98 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001d6c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	da12      	bge.n	8001d98 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d76:	4613      	mov	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	4413      	add	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	440b      	add	r3, r1
 8001d80:	333f      	adds	r3, #63	; 0x3f
 8001d82:	2201      	movs	r2, #1
 8001d84:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	4619      	mov	r1, r3
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 fad0 	bl	8002338 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d3ce      	bcc.n	8001d46 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	695a      	ldr	r2, [r3, #20]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001db6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f003 fba3 	bl	8005508 <USB_ReadInterrupts>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001dcc:	d155      	bne.n	8001e7a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dce:	2301      	movs	r3, #1
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd2:	e045      	b.n	8001e60 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	015a      	lsls	r2, r3, #5
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	4413      	add	r3, r2
 8001ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de8:	4613      	mov	r3, r2
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	4413      	add	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	440b      	add	r3, r1
 8001df2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d12e      	bne.n	8001e5a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001dfc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	da2b      	bge.n	8001e5a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001e0e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d121      	bne.n	8001e5a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	4413      	add	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	440b      	add	r3, r1
 8001e24:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001e28:	2201      	movs	r2, #1
 8001e2a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001e34:	6a3b      	ldr	r3, [r7, #32]
 8001e36:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001e38:	6a3b      	ldr	r3, [r7, #32]
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10a      	bne.n	8001e5a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	69fa      	ldr	r2, [r7, #28]
 8001e4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e56:	6053      	str	r3, [r2, #4]
            break;
 8001e58:	e007      	b.n	8001e6a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d3b4      	bcc.n	8001dd4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	695a      	ldr	r2, [r3, #20]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001e78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f003 fb42 	bl	8005508 <USB_ReadInterrupts>
 8001e84:	4603      	mov	r3, r0
 8001e86:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e8e:	d10a      	bne.n	8001ea6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f005 fc15 	bl	80076c0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	695a      	ldr	r2, [r3, #20]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001ea4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f003 fb2c 	bl	8005508 <USB_ReadInterrupts>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	f003 0304 	and.w	r3, r3, #4
 8001eb6:	2b04      	cmp	r3, #4
 8001eb8:	d115      	bne.n	8001ee6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d002      	beq.n	8001ed2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f005 fc05 	bl	80076dc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6859      	ldr	r1, [r3, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	e000      	b.n	8001ee6 <HAL_PCD_IRQHandler+0x938>
      return;
 8001ee4:	bf00      	nop
    }
  }
}
 8001ee6:	3734      	adds	r7, #52	; 0x34
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd90      	pop	{r4, r7, pc}

08001eec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d101      	bne.n	8001f06 <HAL_PCD_SetAddress+0x1a>
 8001f02:	2302      	movs	r3, #2
 8001f04:	e013      	b.n	8001f2e <HAL_PCD_SetAddress+0x42>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	78fa      	ldrb	r2, [r7, #3]
 8001f12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	78fa      	ldrb	r2, [r7, #3]
 8001f1c:	4611      	mov	r1, r2
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f003 fa8a 	bl	8005438 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b084      	sub	sp, #16
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
 8001f3e:	4608      	mov	r0, r1
 8001f40:	4611      	mov	r1, r2
 8001f42:	461a      	mov	r2, r3
 8001f44:	4603      	mov	r3, r0
 8001f46:	70fb      	strb	r3, [r7, #3]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	803b      	strh	r3, [r7, #0]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f50:	2300      	movs	r3, #0
 8001f52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	da0f      	bge.n	8001f7c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f5c:	78fb      	ldrb	r3, [r7, #3]
 8001f5e:	f003 020f 	and.w	r2, r3, #15
 8001f62:	4613      	mov	r3, r2
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	4413      	add	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	3338      	adds	r3, #56	; 0x38
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	4413      	add	r3, r2
 8001f70:	3304      	adds	r3, #4
 8001f72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2201      	movs	r2, #1
 8001f78:	705a      	strb	r2, [r3, #1]
 8001f7a:	e00f      	b.n	8001f9c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	f003 020f 	and.w	r2, r3, #15
 8001f82:	4613      	mov	r3, r2
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	4413      	add	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	3304      	adds	r3, #4
 8001f94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f9c:	78fb      	ldrb	r3, [r7, #3]
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001fa8:	883a      	ldrh	r2, [r7, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	78ba      	ldrb	r2, [r7, #2]
 8001fb2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	785b      	ldrb	r3, [r3, #1]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d004      	beq.n	8001fc6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001fc6:	78bb      	ldrb	r3, [r7, #2]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d102      	bne.n	8001fd2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d101      	bne.n	8001fe0 <HAL_PCD_EP_Open+0xaa>
 8001fdc:	2302      	movs	r3, #2
 8001fde:	e00e      	b.n	8001ffe <HAL_PCD_EP_Open+0xc8>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68f9      	ldr	r1, [r7, #12]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f002 fb0a 	bl	8004608 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001ffc:	7afb      	ldrb	r3, [r7, #11]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b084      	sub	sp, #16
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	460b      	mov	r3, r1
 8002010:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002012:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002016:	2b00      	cmp	r3, #0
 8002018:	da0f      	bge.n	800203a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800201a:	78fb      	ldrb	r3, [r7, #3]
 800201c:	f003 020f 	and.w	r2, r3, #15
 8002020:	4613      	mov	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	4413      	add	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	3338      	adds	r3, #56	; 0x38
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	4413      	add	r3, r2
 800202e:	3304      	adds	r3, #4
 8002030:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2201      	movs	r2, #1
 8002036:	705a      	strb	r2, [r3, #1]
 8002038:	e00f      	b.n	800205a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800203a:	78fb      	ldrb	r3, [r7, #3]
 800203c:	f003 020f 	and.w	r2, r3, #15
 8002040:	4613      	mov	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	4413      	add	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	4413      	add	r3, r2
 8002050:	3304      	adds	r3, #4
 8002052:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800205a:	78fb      	ldrb	r3, [r7, #3]
 800205c:	f003 030f 	and.w	r3, r3, #15
 8002060:	b2da      	uxtb	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800206c:	2b01      	cmp	r3, #1
 800206e:	d101      	bne.n	8002074 <HAL_PCD_EP_Close+0x6e>
 8002070:	2302      	movs	r3, #2
 8002072:	e00e      	b.n	8002092 <HAL_PCD_EP_Close+0x8c>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68f9      	ldr	r1, [r7, #12]
 8002082:	4618      	mov	r0, r3
 8002084:	f002 fb48 	bl	8004718 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b086      	sub	sp, #24
 800209e:	af00      	add	r7, sp, #0
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	607a      	str	r2, [r7, #4]
 80020a4:	603b      	str	r3, [r7, #0]
 80020a6:	460b      	mov	r3, r1
 80020a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020aa:	7afb      	ldrb	r3, [r7, #11]
 80020ac:	f003 020f 	and.w	r2, r3, #15
 80020b0:	4613      	mov	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	4413      	add	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	4413      	add	r3, r2
 80020c0:	3304      	adds	r3, #4
 80020c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	2200      	movs	r2, #0
 80020d4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	2200      	movs	r2, #0
 80020da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020dc:	7afb      	ldrb	r3, [r7, #11]
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d102      	bne.n	80020f6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020f6:	7afb      	ldrb	r3, [r7, #11]
 80020f8:	f003 030f 	and.w	r3, r3, #15
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d109      	bne.n	8002114 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6818      	ldr	r0, [r3, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	b2db      	uxtb	r3, r3
 800210a:	461a      	mov	r2, r3
 800210c:	6979      	ldr	r1, [r7, #20]
 800210e:	f002 fe27 	bl	8004d60 <USB_EP0StartXfer>
 8002112:	e008      	b.n	8002126 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6818      	ldr	r0, [r3, #0]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	b2db      	uxtb	r3, r3
 800211e:	461a      	mov	r2, r3
 8002120:	6979      	ldr	r1, [r7, #20]
 8002122:	f002 fbd5 	bl	80048d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3718      	adds	r7, #24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	607a      	str	r2, [r7, #4]
 800213a:	603b      	str	r3, [r7, #0]
 800213c:	460b      	mov	r3, r1
 800213e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002140:	7afb      	ldrb	r3, [r7, #11]
 8002142:	f003 020f 	and.w	r2, r3, #15
 8002146:	4613      	mov	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	4413      	add	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	3338      	adds	r3, #56	; 0x38
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	4413      	add	r3, r2
 8002154:	3304      	adds	r3, #4
 8002156:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	2200      	movs	r2, #0
 8002168:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	2201      	movs	r2, #1
 800216e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002170:	7afb      	ldrb	r3, [r7, #11]
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	b2da      	uxtb	r2, r3
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d102      	bne.n	800218a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800218a:	7afb      	ldrb	r3, [r7, #11]
 800218c:	f003 030f 	and.w	r3, r3, #15
 8002190:	2b00      	cmp	r3, #0
 8002192:	d109      	bne.n	80021a8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6818      	ldr	r0, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	b2db      	uxtb	r3, r3
 800219e:	461a      	mov	r2, r3
 80021a0:	6979      	ldr	r1, [r7, #20]
 80021a2:	f002 fddd 	bl	8004d60 <USB_EP0StartXfer>
 80021a6:	e008      	b.n	80021ba <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6818      	ldr	r0, [r3, #0]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	461a      	mov	r2, r3
 80021b4:	6979      	ldr	r1, [r7, #20]
 80021b6:	f002 fb8b 	bl	80048d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	460b      	mov	r3, r1
 80021ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80021d0:	78fb      	ldrb	r3, [r7, #3]
 80021d2:	f003 020f 	and.w	r2, r3, #15
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d901      	bls.n	80021e2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e050      	b.n	8002284 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	da0f      	bge.n	800220a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021ea:	78fb      	ldrb	r3, [r7, #3]
 80021ec:	f003 020f 	and.w	r2, r3, #15
 80021f0:	4613      	mov	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4413      	add	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	3338      	adds	r3, #56	; 0x38
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	4413      	add	r3, r2
 80021fe:	3304      	adds	r3, #4
 8002200:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2201      	movs	r2, #1
 8002206:	705a      	strb	r2, [r3, #1]
 8002208:	e00d      	b.n	8002226 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800220a:	78fa      	ldrb	r2, [r7, #3]
 800220c:	4613      	mov	r3, r2
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	4413      	add	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	4413      	add	r3, r2
 800221c:	3304      	adds	r3, #4
 800221e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2201      	movs	r2, #1
 800222a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800222c:	78fb      	ldrb	r3, [r7, #3]
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	b2da      	uxtb	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800223e:	2b01      	cmp	r3, #1
 8002240:	d101      	bne.n	8002246 <HAL_PCD_EP_SetStall+0x82>
 8002242:	2302      	movs	r3, #2
 8002244:	e01e      	b.n	8002284 <HAL_PCD_EP_SetStall+0xc0>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68f9      	ldr	r1, [r7, #12]
 8002254:	4618      	mov	r0, r3
 8002256:	f003 f81b 	bl	8005290 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800225a:	78fb      	ldrb	r3, [r7, #3]
 800225c:	f003 030f 	and.w	r3, r3, #15
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10a      	bne.n	800227a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6818      	ldr	r0, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	b2d9      	uxtb	r1, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002274:	461a      	mov	r2, r3
 8002276:	f003 fa0b 	bl	8005690 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	f003 020f 	and.w	r2, r3, #15
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d901      	bls.n	80022aa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e042      	b.n	8002330 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	da0f      	bge.n	80022d2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022b2:	78fb      	ldrb	r3, [r7, #3]
 80022b4:	f003 020f 	and.w	r2, r3, #15
 80022b8:	4613      	mov	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4413      	add	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	3338      	adds	r3, #56	; 0x38
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	4413      	add	r3, r2
 80022c6:	3304      	adds	r3, #4
 80022c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2201      	movs	r2, #1
 80022ce:	705a      	strb	r2, [r3, #1]
 80022d0:	e00f      	b.n	80022f2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022d2:	78fb      	ldrb	r3, [r7, #3]
 80022d4:	f003 020f 	and.w	r2, r3, #15
 80022d8:	4613      	mov	r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	4413      	add	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	4413      	add	r3, r2
 80022e8:	3304      	adds	r3, #4
 80022ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022f8:	78fb      	ldrb	r3, [r7, #3]
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800230a:	2b01      	cmp	r3, #1
 800230c:	d101      	bne.n	8002312 <HAL_PCD_EP_ClrStall+0x86>
 800230e:	2302      	movs	r3, #2
 8002310:	e00e      	b.n	8002330 <HAL_PCD_EP_ClrStall+0xa4>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68f9      	ldr	r1, [r7, #12]
 8002320:	4618      	mov	r0, r3
 8002322:	f003 f823 	bl	800536c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	460b      	mov	r3, r1
 8002342:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002344:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002348:	2b00      	cmp	r3, #0
 800234a:	da0c      	bge.n	8002366 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800234c:	78fb      	ldrb	r3, [r7, #3]
 800234e:	f003 020f 	and.w	r2, r3, #15
 8002352:	4613      	mov	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	4413      	add	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	3338      	adds	r3, #56	; 0x38
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	4413      	add	r3, r2
 8002360:	3304      	adds	r3, #4
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	e00c      	b.n	8002380 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002366:	78fb      	ldrb	r3, [r7, #3]
 8002368:	f003 020f 	and.w	r2, r3, #15
 800236c:	4613      	mov	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4413      	add	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	4413      	add	r3, r2
 800237c:	3304      	adds	r3, #4
 800237e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68f9      	ldr	r1, [r7, #12]
 8002386:	4618      	mov	r0, r3
 8002388:	f002 fe42 	bl	8005010 <USB_EPStopXfer>
 800238c:	4603      	mov	r3, r0
 800238e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002390:	7afb      	ldrb	r3, [r7, #11]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b08a      	sub	sp, #40	; 0x28
 800239e:	af02      	add	r7, sp, #8
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	4613      	mov	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	4413      	add	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	3338      	adds	r3, #56	; 0x38
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	4413      	add	r3, r2
 80023be:	3304      	adds	r3, #4
 80023c0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6a1a      	ldr	r2, [r3, #32]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d901      	bls.n	80023d2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e06c      	b.n	80024ac <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	699a      	ldr	r2, [r3, #24]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	69fa      	ldr	r2, [r7, #28]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d902      	bls.n	80023ee <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3303      	adds	r3, #3
 80023f2:	089b      	lsrs	r3, r3, #2
 80023f4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023f6:	e02b      	b.n	8002450 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	699a      	ldr	r2, [r3, #24]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	69fa      	ldr	r2, [r7, #28]
 800240a:	429a      	cmp	r2, r3
 800240c:	d902      	bls.n	8002414 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	3303      	adds	r3, #3
 8002418:	089b      	lsrs	r3, r3, #2
 800241a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6919      	ldr	r1, [r3, #16]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	b2da      	uxtb	r2, r3
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800242c:	b2db      	uxtb	r3, r3
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	4603      	mov	r3, r0
 8002432:	6978      	ldr	r0, [r7, #20]
 8002434:	f002 fe96 	bl	8005164 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	691a      	ldr	r2, [r3, #16]
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	441a      	add	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6a1a      	ldr	r2, [r3, #32]
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	441a      	add	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	015a      	lsls	r2, r3, #5
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	4413      	add	r3, r2
 8002458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	b29b      	uxth	r3, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	429a      	cmp	r2, r3
 8002464:	d809      	bhi.n	800247a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6a1a      	ldr	r2, [r3, #32]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800246e:	429a      	cmp	r2, r3
 8002470:	d203      	bcs.n	800247a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1be      	bne.n	80023f8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	699a      	ldr	r2, [r3, #24]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	429a      	cmp	r2, r3
 8002484:	d811      	bhi.n	80024aa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	f003 030f 	and.w	r3, r3, #15
 800248c:	2201      	movs	r2, #1
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800249a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	43db      	mvns	r3, r3
 80024a0:	6939      	ldr	r1, [r7, #16]
 80024a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80024a6:	4013      	ands	r3, r2
 80024a8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3720      	adds	r7, #32
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b088      	sub	sp, #32
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	333c      	adds	r3, #60	; 0x3c
 80024cc:	3304      	adds	r3, #4
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	015a      	lsls	r2, r3, #5
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	4413      	add	r3, r2
 80024da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d17b      	bne.n	80025e2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	f003 0308 	and.w	r3, r3, #8
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d015      	beq.n	8002520 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	4a61      	ldr	r2, [pc, #388]	; (800267c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	f240 80b9 	bls.w	8002670 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 80b3 	beq.w	8002670 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	015a      	lsls	r2, r3, #5
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	4413      	add	r3, r2
 8002512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002516:	461a      	mov	r2, r3
 8002518:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800251c:	6093      	str	r3, [r2, #8]
 800251e:	e0a7      	b.n	8002670 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	f003 0320 	and.w	r3, r3, #32
 8002526:	2b00      	cmp	r3, #0
 8002528:	d009      	beq.n	800253e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	015a      	lsls	r2, r3, #5
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	4413      	add	r3, r2
 8002532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002536:	461a      	mov	r2, r3
 8002538:	2320      	movs	r3, #32
 800253a:	6093      	str	r3, [r2, #8]
 800253c:	e098      	b.n	8002670 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002544:	2b00      	cmp	r3, #0
 8002546:	f040 8093 	bne.w	8002670 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	4a4b      	ldr	r2, [pc, #300]	; (800267c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d90f      	bls.n	8002572 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00a      	beq.n	8002572 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	015a      	lsls	r2, r3, #5
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	4413      	add	r3, r2
 8002564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002568:	461a      	mov	r2, r3
 800256a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800256e:	6093      	str	r3, [r2, #8]
 8002570:	e07e      	b.n	8002670 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	4613      	mov	r3, r2
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	4413      	add	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	4413      	add	r3, r2
 8002584:	3304      	adds	r3, #4
 8002586:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	69da      	ldr	r2, [r3, #28]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	0159      	lsls	r1, r3, #5
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	440b      	add	r3, r1
 8002594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800259e:	1ad2      	subs	r2, r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d114      	bne.n	80025d4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d109      	bne.n	80025c6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6818      	ldr	r0, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025bc:	461a      	mov	r2, r3
 80025be:	2101      	movs	r1, #1
 80025c0:	f003 f866 	bl	8005690 <USB_EP0_OutStart>
 80025c4:	e006      	b.n	80025d4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	691a      	ldr	r2, [r3, #16]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	441a      	add	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	4619      	mov	r1, r3
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f004 ffb6 	bl	800754c <HAL_PCD_DataOutStageCallback>
 80025e0:	e046      	b.n	8002670 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	4a26      	ldr	r2, [pc, #152]	; (8002680 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d124      	bne.n	8002634 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00a      	beq.n	800260a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	015a      	lsls	r2, r3, #5
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	4413      	add	r3, r2
 80025fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002600:	461a      	mov	r2, r3
 8002602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002606:	6093      	str	r3, [r2, #8]
 8002608:	e032      	b.n	8002670 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	f003 0320 	and.w	r3, r3, #32
 8002610:	2b00      	cmp	r3, #0
 8002612:	d008      	beq.n	8002626 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	015a      	lsls	r2, r3, #5
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	4413      	add	r3, r2
 800261c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002620:	461a      	mov	r2, r3
 8002622:	2320      	movs	r3, #32
 8002624:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	b2db      	uxtb	r3, r3
 800262a:	4619      	mov	r1, r3
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f004 ff8d 	bl	800754c <HAL_PCD_DataOutStageCallback>
 8002632:	e01d      	b.n	8002670 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d114      	bne.n	8002664 <PCD_EP_OutXfrComplete_int+0x1b0>
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	4613      	mov	r3, r2
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	4413      	add	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	440b      	add	r3, r1
 8002648:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d108      	bne.n	8002664 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800265c:	461a      	mov	r2, r3
 800265e:	2100      	movs	r1, #0
 8002660:	f003 f816 	bl	8005690 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	4619      	mov	r1, r3
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f004 ff6e 	bl	800754c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3720      	adds	r7, #32
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	4f54300a 	.word	0x4f54300a
 8002680:	4f54310a 	.word	0x4f54310a

08002684 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	333c      	adds	r3, #60	; 0x3c
 800269c:	3304      	adds	r3, #4
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	015a      	lsls	r2, r3, #5
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4413      	add	r3, r2
 80026aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	4a15      	ldr	r2, [pc, #84]	; (800270c <PCD_EP_OutSetupPacket_int+0x88>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d90e      	bls.n	80026d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d009      	beq.n	80026d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	015a      	lsls	r2, r3, #5
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	4413      	add	r3, r2
 80026cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026d0:	461a      	mov	r2, r3
 80026d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f004 ff25 	bl	8007528 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	4a0a      	ldr	r2, [pc, #40]	; (800270c <PCD_EP_OutSetupPacket_int+0x88>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d90c      	bls.n	8002700 <PCD_EP_OutSetupPacket_int+0x7c>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d108      	bne.n	8002700 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6818      	ldr	r0, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026f8:	461a      	mov	r2, r3
 80026fa:	2101      	movs	r1, #1
 80026fc:	f002 ffc8 	bl	8005690 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	4f54300a 	.word	0x4f54300a

08002710 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	70fb      	strb	r3, [r7, #3]
 800271c:	4613      	mov	r3, r2
 800271e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002728:	78fb      	ldrb	r3, [r7, #3]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d107      	bne.n	800273e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800272e:	883b      	ldrh	r3, [r7, #0]
 8002730:	0419      	lsls	r1, r3, #16
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	430a      	orrs	r2, r1
 800273a:	629a      	str	r2, [r3, #40]	; 0x28
 800273c:	e028      	b.n	8002790 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002744:	0c1b      	lsrs	r3, r3, #16
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	4413      	add	r3, r2
 800274a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800274c:	2300      	movs	r3, #0
 800274e:	73fb      	strb	r3, [r7, #15]
 8002750:	e00d      	b.n	800276e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	3340      	adds	r3, #64	; 0x40
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	0c1b      	lsrs	r3, r3, #16
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	4413      	add	r3, r2
 8002766:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002768:	7bfb      	ldrb	r3, [r7, #15]
 800276a:	3301      	adds	r3, #1
 800276c:	73fb      	strb	r3, [r7, #15]
 800276e:	7bfa      	ldrb	r2, [r7, #15]
 8002770:	78fb      	ldrb	r3, [r7, #3]
 8002772:	3b01      	subs	r3, #1
 8002774:	429a      	cmp	r2, r3
 8002776:	d3ec      	bcc.n	8002752 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002778:	883b      	ldrh	r3, [r7, #0]
 800277a:	0418      	lsls	r0, r3, #16
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6819      	ldr	r1, [r3, #0]
 8002780:	78fb      	ldrb	r3, [r7, #3]
 8002782:	3b01      	subs	r3, #1
 8002784:	68ba      	ldr	r2, [r7, #8]
 8002786:	4302      	orrs	r2, r0
 8002788:	3340      	adds	r3, #64	; 0x40
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	440b      	add	r3, r1
 800278e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3714      	adds	r7, #20
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
 80027a6:	460b      	mov	r3, r1
 80027a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	887a      	ldrh	r2, [r7, #2]
 80027b0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	460b      	mov	r3, r1
 80027ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e267      	b.n	8002cba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d075      	beq.n	80028e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027f6:	4b88      	ldr	r3, [pc, #544]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 030c 	and.w	r3, r3, #12
 80027fe:	2b04      	cmp	r3, #4
 8002800:	d00c      	beq.n	800281c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002802:	4b85      	ldr	r3, [pc, #532]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800280a:	2b08      	cmp	r3, #8
 800280c:	d112      	bne.n	8002834 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800280e:	4b82      	ldr	r3, [pc, #520]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002816:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800281a:	d10b      	bne.n	8002834 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800281c:	4b7e      	ldr	r3, [pc, #504]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d05b      	beq.n	80028e0 <HAL_RCC_OscConfig+0x108>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d157      	bne.n	80028e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e242      	b.n	8002cba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800283c:	d106      	bne.n	800284c <HAL_RCC_OscConfig+0x74>
 800283e:	4b76      	ldr	r3, [pc, #472]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a75      	ldr	r2, [pc, #468]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 8002844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	e01d      	b.n	8002888 <HAL_RCC_OscConfig+0xb0>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002854:	d10c      	bne.n	8002870 <HAL_RCC_OscConfig+0x98>
 8002856:	4b70      	ldr	r3, [pc, #448]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a6f      	ldr	r2, [pc, #444]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 800285c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	4b6d      	ldr	r3, [pc, #436]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a6c      	ldr	r2, [pc, #432]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 8002868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	e00b      	b.n	8002888 <HAL_RCC_OscConfig+0xb0>
 8002870:	4b69      	ldr	r3, [pc, #420]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a68      	ldr	r2, [pc, #416]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 8002876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	4b66      	ldr	r3, [pc, #408]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a65      	ldr	r2, [pc, #404]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 8002882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d013      	beq.n	80028b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002890:	f7fe fa5e 	bl	8000d50 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002898:	f7fe fa5a 	bl	8000d50 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b64      	cmp	r3, #100	; 0x64
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e207      	b.n	8002cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028aa:	4b5b      	ldr	r3, [pc, #364]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0xc0>
 80028b6:	e014      	b.n	80028e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b8:	f7fe fa4a 	bl	8000d50 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028c0:	f7fe fa46 	bl	8000d50 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b64      	cmp	r3, #100	; 0x64
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e1f3      	b.n	8002cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028d2:	4b51      	ldr	r3, [pc, #324]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f0      	bne.n	80028c0 <HAL_RCC_OscConfig+0xe8>
 80028de:	e000      	b.n	80028e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d063      	beq.n	80029b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028ee:	4b4a      	ldr	r3, [pc, #296]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 030c 	and.w	r3, r3, #12
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00b      	beq.n	8002912 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028fa:	4b47      	ldr	r3, [pc, #284]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002902:	2b08      	cmp	r3, #8
 8002904:	d11c      	bne.n	8002940 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002906:	4b44      	ldr	r3, [pc, #272]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d116      	bne.n	8002940 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002912:	4b41      	ldr	r3, [pc, #260]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d005      	beq.n	800292a <HAL_RCC_OscConfig+0x152>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d001      	beq.n	800292a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e1c7      	b.n	8002cba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800292a:	4b3b      	ldr	r3, [pc, #236]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	4937      	ldr	r1, [pc, #220]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 800293a:	4313      	orrs	r3, r2
 800293c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800293e:	e03a      	b.n	80029b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d020      	beq.n	800298a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002948:	4b34      	ldr	r3, [pc, #208]	; (8002a1c <HAL_RCC_OscConfig+0x244>)
 800294a:	2201      	movs	r2, #1
 800294c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294e:	f7fe f9ff 	bl	8000d50 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002956:	f7fe f9fb 	bl	8000d50 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e1a8      	b.n	8002cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002968:	4b2b      	ldr	r3, [pc, #172]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0f0      	beq.n	8002956 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002974:	4b28      	ldr	r3, [pc, #160]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	4925      	ldr	r1, [pc, #148]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 8002984:	4313      	orrs	r3, r2
 8002986:	600b      	str	r3, [r1, #0]
 8002988:	e015      	b.n	80029b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800298a:	4b24      	ldr	r3, [pc, #144]	; (8002a1c <HAL_RCC_OscConfig+0x244>)
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002990:	f7fe f9de 	bl	8000d50 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002998:	f7fe f9da 	bl	8000d50 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e187      	b.n	8002cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029aa:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1f0      	bne.n	8002998 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0308 	and.w	r3, r3, #8
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d036      	beq.n	8002a30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d016      	beq.n	80029f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ca:	4b15      	ldr	r3, [pc, #84]	; (8002a20 <HAL_RCC_OscConfig+0x248>)
 80029cc:	2201      	movs	r2, #1
 80029ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d0:	f7fe f9be 	bl	8000d50 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029d8:	f7fe f9ba 	bl	8000d50 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e167      	b.n	8002cba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ea:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 80029ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0f0      	beq.n	80029d8 <HAL_RCC_OscConfig+0x200>
 80029f6:	e01b      	b.n	8002a30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029f8:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <HAL_RCC_OscConfig+0x248>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029fe:	f7fe f9a7 	bl	8000d50 <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a04:	e00e      	b.n	8002a24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a06:	f7fe f9a3 	bl	8000d50 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d907      	bls.n	8002a24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e150      	b.n	8002cba <HAL_RCC_OscConfig+0x4e2>
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	42470000 	.word	0x42470000
 8002a20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a24:	4b88      	ldr	r3, [pc, #544]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1ea      	bne.n	8002a06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 8097 	beq.w	8002b6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a42:	4b81      	ldr	r3, [pc, #516]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10f      	bne.n	8002a6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60bb      	str	r3, [r7, #8]
 8002a52:	4b7d      	ldr	r3, [pc, #500]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	4a7c      	ldr	r2, [pc, #496]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a5e:	4b7a      	ldr	r3, [pc, #488]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a66:	60bb      	str	r3, [r7, #8]
 8002a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6e:	4b77      	ldr	r3, [pc, #476]	; (8002c4c <HAL_RCC_OscConfig+0x474>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d118      	bne.n	8002aac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a7a:	4b74      	ldr	r3, [pc, #464]	; (8002c4c <HAL_RCC_OscConfig+0x474>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a73      	ldr	r2, [pc, #460]	; (8002c4c <HAL_RCC_OscConfig+0x474>)
 8002a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a86:	f7fe f963 	bl	8000d50 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a8e:	f7fe f95f 	bl	8000d50 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e10c      	b.n	8002cba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa0:	4b6a      	ldr	r3, [pc, #424]	; (8002c4c <HAL_RCC_OscConfig+0x474>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0f0      	beq.n	8002a8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d106      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x2ea>
 8002ab4:	4b64      	ldr	r3, [pc, #400]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab8:	4a63      	ldr	r2, [pc, #396]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac0:	e01c      	b.n	8002afc <HAL_RCC_OscConfig+0x324>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	2b05      	cmp	r3, #5
 8002ac8:	d10c      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x30c>
 8002aca:	4b5f      	ldr	r3, [pc, #380]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ace:	4a5e      	ldr	r2, [pc, #376]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002ad0:	f043 0304 	orr.w	r3, r3, #4
 8002ad4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad6:	4b5c      	ldr	r3, [pc, #368]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ada:	4a5b      	ldr	r2, [pc, #364]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae2:	e00b      	b.n	8002afc <HAL_RCC_OscConfig+0x324>
 8002ae4:	4b58      	ldr	r3, [pc, #352]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae8:	4a57      	ldr	r2, [pc, #348]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002aea:	f023 0301 	bic.w	r3, r3, #1
 8002aee:	6713      	str	r3, [r2, #112]	; 0x70
 8002af0:	4b55      	ldr	r3, [pc, #340]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af4:	4a54      	ldr	r2, [pc, #336]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002af6:	f023 0304 	bic.w	r3, r3, #4
 8002afa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d015      	beq.n	8002b30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b04:	f7fe f924 	bl	8000d50 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b0a:	e00a      	b.n	8002b22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b0c:	f7fe f920 	bl	8000d50 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e0cb      	b.n	8002cba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b22:	4b49      	ldr	r3, [pc, #292]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0ee      	beq.n	8002b0c <HAL_RCC_OscConfig+0x334>
 8002b2e:	e014      	b.n	8002b5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b30:	f7fe f90e 	bl	8000d50 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b36:	e00a      	b.n	8002b4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b38:	f7fe f90a 	bl	8000d50 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e0b5      	b.n	8002cba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b4e:	4b3e      	ldr	r3, [pc, #248]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1ee      	bne.n	8002b38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b5a:	7dfb      	ldrb	r3, [r7, #23]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d105      	bne.n	8002b6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b60:	4b39      	ldr	r3, [pc, #228]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	4a38      	ldr	r2, [pc, #224]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002b66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 80a1 	beq.w	8002cb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b76:	4b34      	ldr	r3, [pc, #208]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 030c 	and.w	r3, r3, #12
 8002b7e:	2b08      	cmp	r3, #8
 8002b80:	d05c      	beq.n	8002c3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d141      	bne.n	8002c0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b8a:	4b31      	ldr	r3, [pc, #196]	; (8002c50 <HAL_RCC_OscConfig+0x478>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b90:	f7fe f8de 	bl	8000d50 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b98:	f7fe f8da 	bl	8000d50 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e087      	b.n	8002cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002baa:	4b27      	ldr	r3, [pc, #156]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f0      	bne.n	8002b98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69da      	ldr	r2, [r3, #28]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	019b      	lsls	r3, r3, #6
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bcc:	085b      	lsrs	r3, r3, #1
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	041b      	lsls	r3, r3, #16
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd8:	061b      	lsls	r3, r3, #24
 8002bda:	491b      	ldr	r1, [pc, #108]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002be0:	4b1b      	ldr	r3, [pc, #108]	; (8002c50 <HAL_RCC_OscConfig+0x478>)
 8002be2:	2201      	movs	r2, #1
 8002be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be6:	f7fe f8b3 	bl	8000d50 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bee:	f7fe f8af 	bl	8000d50 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e05c      	b.n	8002cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c00:	4b11      	ldr	r3, [pc, #68]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0f0      	beq.n	8002bee <HAL_RCC_OscConfig+0x416>
 8002c0c:	e054      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c0e:	4b10      	ldr	r3, [pc, #64]	; (8002c50 <HAL_RCC_OscConfig+0x478>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7fe f89c 	bl	8000d50 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c1c:	f7fe f898 	bl	8000d50 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e045      	b.n	8002cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c2e:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0x444>
 8002c3a:	e03d      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d107      	bne.n	8002c54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e038      	b.n	8002cba <HAL_RCC_OscConfig+0x4e2>
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40007000 	.word	0x40007000
 8002c50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c54:	4b1b      	ldr	r3, [pc, #108]	; (8002cc4 <HAL_RCC_OscConfig+0x4ec>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d028      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d121      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d11a      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c84:	4013      	ands	r3, r2
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d111      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9a:	085b      	lsrs	r3, r3, #1
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d107      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d001      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e000      	b.n	8002cba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3718      	adds	r7, #24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40023800 	.word	0x40023800

08002cc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e0cc      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cdc:	4b68      	ldr	r3, [pc, #416]	; (8002e80 <HAL_RCC_ClockConfig+0x1b8>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d90c      	bls.n	8002d04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cea:	4b65      	ldr	r3, [pc, #404]	; (8002e80 <HAL_RCC_ClockConfig+0x1b8>)
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf2:	4b63      	ldr	r3, [pc, #396]	; (8002e80 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d001      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e0b8      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d020      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d1c:	4b59      	ldr	r3, [pc, #356]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	4a58      	ldr	r2, [pc, #352]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0308 	and.w	r3, r3, #8
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d005      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d34:	4b53      	ldr	r3, [pc, #332]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	4a52      	ldr	r2, [pc, #328]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d40:	4b50      	ldr	r3, [pc, #320]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	494d      	ldr	r1, [pc, #308]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d044      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d107      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d66:	4b47      	ldr	r3, [pc, #284]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d119      	bne.n	8002da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e07f      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d003      	beq.n	8002d86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d82:	2b03      	cmp	r3, #3
 8002d84:	d107      	bne.n	8002d96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d86:	4b3f      	ldr	r3, [pc, #252]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d109      	bne.n	8002da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e06f      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d96:	4b3b      	ldr	r3, [pc, #236]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e067      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002da6:	4b37      	ldr	r3, [pc, #220]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f023 0203 	bic.w	r2, r3, #3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	4934      	ldr	r1, [pc, #208]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002db8:	f7fd ffca 	bl	8000d50 <HAL_GetTick>
 8002dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dbe:	e00a      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc0:	f7fd ffc6 	bl	8000d50 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e04f      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd6:	4b2b      	ldr	r3, [pc, #172]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 020c 	and.w	r2, r3, #12
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d1eb      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002de8:	4b25      	ldr	r3, [pc, #148]	; (8002e80 <HAL_RCC_ClockConfig+0x1b8>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d20c      	bcs.n	8002e10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df6:	4b22      	ldr	r3, [pc, #136]	; (8002e80 <HAL_RCC_ClockConfig+0x1b8>)
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfe:	4b20      	ldr	r3, [pc, #128]	; (8002e80 <HAL_RCC_ClockConfig+0x1b8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d001      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e032      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d008      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e1c:	4b19      	ldr	r3, [pc, #100]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	4916      	ldr	r1, [pc, #88]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d009      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e3a:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	490e      	ldr	r1, [pc, #56]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e4e:	f000 f821 	bl	8002e94 <HAL_RCC_GetSysClockFreq>
 8002e52:	4602      	mov	r2, r0
 8002e54:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	091b      	lsrs	r3, r3, #4
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	490a      	ldr	r1, [pc, #40]	; (8002e88 <HAL_RCC_ClockConfig+0x1c0>)
 8002e60:	5ccb      	ldrb	r3, [r1, r3]
 8002e62:	fa22 f303 	lsr.w	r3, r2, r3
 8002e66:	4a09      	ldr	r2, [pc, #36]	; (8002e8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e6a:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <HAL_RCC_ClockConfig+0x1c8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fd ff2a 	bl	8000cc8 <HAL_InitTick>

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	40023c00 	.word	0x40023c00
 8002e84:	40023800 	.word	0x40023800
 8002e88:	08007b20 	.word	0x08007b20
 8002e8c:	20000000 	.word	0x20000000
 8002e90:	20000004 	.word	0x20000004

08002e94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e98:	b094      	sub	sp, #80	; 0x50
 8002e9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	647b      	str	r3, [r7, #68]	; 0x44
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eac:	4b79      	ldr	r3, [pc, #484]	; (8003094 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 030c 	and.w	r3, r3, #12
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	d00d      	beq.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x40>
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	f200 80e1 	bhi.w	8003080 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d003      	beq.n	8002ece <HAL_RCC_GetSysClockFreq+0x3a>
 8002ec6:	e0db      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ec8:	4b73      	ldr	r3, [pc, #460]	; (8003098 <HAL_RCC_GetSysClockFreq+0x204>)
 8002eca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ecc:	e0db      	b.n	8003086 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ece:	4b73      	ldr	r3, [pc, #460]	; (800309c <HAL_RCC_GetSysClockFreq+0x208>)
 8002ed0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ed2:	e0d8      	b.n	8003086 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ed4:	4b6f      	ldr	r3, [pc, #444]	; (8003094 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002edc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ede:	4b6d      	ldr	r3, [pc, #436]	; (8003094 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d063      	beq.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eea:	4b6a      	ldr	r3, [pc, #424]	; (8003094 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	099b      	lsrs	r3, r3, #6
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ef4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002efc:	633b      	str	r3, [r7, #48]	; 0x30
 8002efe:	2300      	movs	r3, #0
 8002f00:	637b      	str	r3, [r7, #52]	; 0x34
 8002f02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f06:	4622      	mov	r2, r4
 8002f08:	462b      	mov	r3, r5
 8002f0a:	f04f 0000 	mov.w	r0, #0
 8002f0e:	f04f 0100 	mov.w	r1, #0
 8002f12:	0159      	lsls	r1, r3, #5
 8002f14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f18:	0150      	lsls	r0, r2, #5
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4621      	mov	r1, r4
 8002f20:	1a51      	subs	r1, r2, r1
 8002f22:	6139      	str	r1, [r7, #16]
 8002f24:	4629      	mov	r1, r5
 8002f26:	eb63 0301 	sbc.w	r3, r3, r1
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	f04f 0200 	mov.w	r2, #0
 8002f30:	f04f 0300 	mov.w	r3, #0
 8002f34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f38:	4659      	mov	r1, fp
 8002f3a:	018b      	lsls	r3, r1, #6
 8002f3c:	4651      	mov	r1, sl
 8002f3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f42:	4651      	mov	r1, sl
 8002f44:	018a      	lsls	r2, r1, #6
 8002f46:	4651      	mov	r1, sl
 8002f48:	ebb2 0801 	subs.w	r8, r2, r1
 8002f4c:	4659      	mov	r1, fp
 8002f4e:	eb63 0901 	sbc.w	r9, r3, r1
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	f04f 0300 	mov.w	r3, #0
 8002f5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f66:	4690      	mov	r8, r2
 8002f68:	4699      	mov	r9, r3
 8002f6a:	4623      	mov	r3, r4
 8002f6c:	eb18 0303 	adds.w	r3, r8, r3
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	462b      	mov	r3, r5
 8002f74:	eb49 0303 	adc.w	r3, r9, r3
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	f04f 0200 	mov.w	r2, #0
 8002f7e:	f04f 0300 	mov.w	r3, #0
 8002f82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f86:	4629      	mov	r1, r5
 8002f88:	024b      	lsls	r3, r1, #9
 8002f8a:	4621      	mov	r1, r4
 8002f8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f90:	4621      	mov	r1, r4
 8002f92:	024a      	lsls	r2, r1, #9
 8002f94:	4610      	mov	r0, r2
 8002f96:	4619      	mov	r1, r3
 8002f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fa0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fa4:	f7fd f918 	bl	80001d8 <__aeabi_uldivmod>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	4613      	mov	r3, r2
 8002fae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fb0:	e058      	b.n	8003064 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fb2:	4b38      	ldr	r3, [pc, #224]	; (8003094 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	099b      	lsrs	r3, r3, #6
 8002fb8:	2200      	movs	r2, #0
 8002fba:	4618      	mov	r0, r3
 8002fbc:	4611      	mov	r1, r2
 8002fbe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fc2:	623b      	str	r3, [r7, #32]
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fcc:	4642      	mov	r2, r8
 8002fce:	464b      	mov	r3, r9
 8002fd0:	f04f 0000 	mov.w	r0, #0
 8002fd4:	f04f 0100 	mov.w	r1, #0
 8002fd8:	0159      	lsls	r1, r3, #5
 8002fda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fde:	0150      	lsls	r0, r2, #5
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	4641      	mov	r1, r8
 8002fe6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fea:	4649      	mov	r1, r9
 8002fec:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ff0:	f04f 0200 	mov.w	r2, #0
 8002ff4:	f04f 0300 	mov.w	r3, #0
 8002ff8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ffc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003000:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003004:	ebb2 040a 	subs.w	r4, r2, sl
 8003008:	eb63 050b 	sbc.w	r5, r3, fp
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	00eb      	lsls	r3, r5, #3
 8003016:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800301a:	00e2      	lsls	r2, r4, #3
 800301c:	4614      	mov	r4, r2
 800301e:	461d      	mov	r5, r3
 8003020:	4643      	mov	r3, r8
 8003022:	18e3      	adds	r3, r4, r3
 8003024:	603b      	str	r3, [r7, #0]
 8003026:	464b      	mov	r3, r9
 8003028:	eb45 0303 	adc.w	r3, r5, r3
 800302c:	607b      	str	r3, [r7, #4]
 800302e:	f04f 0200 	mov.w	r2, #0
 8003032:	f04f 0300 	mov.w	r3, #0
 8003036:	e9d7 4500 	ldrd	r4, r5, [r7]
 800303a:	4629      	mov	r1, r5
 800303c:	028b      	lsls	r3, r1, #10
 800303e:	4621      	mov	r1, r4
 8003040:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003044:	4621      	mov	r1, r4
 8003046:	028a      	lsls	r2, r1, #10
 8003048:	4610      	mov	r0, r2
 800304a:	4619      	mov	r1, r3
 800304c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800304e:	2200      	movs	r2, #0
 8003050:	61bb      	str	r3, [r7, #24]
 8003052:	61fa      	str	r2, [r7, #28]
 8003054:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003058:	f7fd f8be 	bl	80001d8 <__aeabi_uldivmod>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	4613      	mov	r3, r2
 8003062:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003064:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <HAL_RCC_GetSysClockFreq+0x200>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	0c1b      	lsrs	r3, r3, #16
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	3301      	adds	r3, #1
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003074:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003078:	fbb2 f3f3 	udiv	r3, r2, r3
 800307c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800307e:	e002      	b.n	8003086 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003080:	4b05      	ldr	r3, [pc, #20]	; (8003098 <HAL_RCC_GetSysClockFreq+0x204>)
 8003082:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003084:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003088:	4618      	mov	r0, r3
 800308a:	3750      	adds	r7, #80	; 0x50
 800308c:	46bd      	mov	sp, r7
 800308e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003092:	bf00      	nop
 8003094:	40023800 	.word	0x40023800
 8003098:	00f42400 	.word	0x00f42400
 800309c:	007a1200 	.word	0x007a1200

080030a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030a4:	4b03      	ldr	r3, [pc, #12]	; (80030b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80030a6:	681b      	ldr	r3, [r3, #0]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	20000000 	.word	0x20000000

080030b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030bc:	f7ff fff0 	bl	80030a0 <HAL_RCC_GetHCLKFreq>
 80030c0:	4602      	mov	r2, r0
 80030c2:	4b05      	ldr	r3, [pc, #20]	; (80030d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	0a9b      	lsrs	r3, r3, #10
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	4903      	ldr	r1, [pc, #12]	; (80030dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ce:	5ccb      	ldrb	r3, [r1, r3]
 80030d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40023800 	.word	0x40023800
 80030dc:	08007b30 	.word	0x08007b30

080030e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030e4:	f7ff ffdc 	bl	80030a0 <HAL_RCC_GetHCLKFreq>
 80030e8:	4602      	mov	r2, r0
 80030ea:	4b05      	ldr	r3, [pc, #20]	; (8003100 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	0b5b      	lsrs	r3, r3, #13
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	4903      	ldr	r1, [pc, #12]	; (8003104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030f6:	5ccb      	ldrb	r3, [r1, r3]
 80030f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40023800 	.word	0x40023800
 8003104:	08007b30 	.word	0x08007b30

08003108 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e041      	b.n	800319e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d106      	bne.n	8003134 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7fd fc64 	bl	80009fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3304      	adds	r3, #4
 8003144:	4619      	mov	r1, r3
 8003146:	4610      	mov	r0, r2
 8003148:	f000 fa88 	bl	800365c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
	...

080031a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d001      	beq.n	80031c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e044      	b.n	800324a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2202      	movs	r2, #2
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0201 	orr.w	r2, r2, #1
 80031d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a1e      	ldr	r2, [pc, #120]	; (8003258 <HAL_TIM_Base_Start_IT+0xb0>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d018      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0x6c>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ea:	d013      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0x6c>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a1a      	ldr	r2, [pc, #104]	; (800325c <HAL_TIM_Base_Start_IT+0xb4>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d00e      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0x6c>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a19      	ldr	r2, [pc, #100]	; (8003260 <HAL_TIM_Base_Start_IT+0xb8>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d009      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0x6c>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a17      	ldr	r2, [pc, #92]	; (8003264 <HAL_TIM_Base_Start_IT+0xbc>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d004      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0x6c>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a16      	ldr	r2, [pc, #88]	; (8003268 <HAL_TIM_Base_Start_IT+0xc0>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d111      	bne.n	8003238 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2b06      	cmp	r3, #6
 8003224:	d010      	beq.n	8003248 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f042 0201 	orr.w	r2, r2, #1
 8003234:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003236:	e007      	b.n	8003248 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0201 	orr.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40010000 	.word	0x40010000
 800325c:	40000400 	.word	0x40000400
 8003260:	40000800 	.word	0x40000800
 8003264:	40000c00 	.word	0x40000c00
 8003268:	40014000 	.word	0x40014000

0800326c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b02      	cmp	r3, #2
 8003280:	d122      	bne.n	80032c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b02      	cmp	r3, #2
 800328e:	d11b      	bne.n	80032c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f06f 0202 	mvn.w	r2, #2
 8003298:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f9b5 	bl	800361e <HAL_TIM_IC_CaptureCallback>
 80032b4:	e005      	b.n	80032c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f9a7 	bl	800360a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 f9b8 	bl	8003632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	f003 0304 	and.w	r3, r3, #4
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d122      	bne.n	800331c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	2b04      	cmp	r3, #4
 80032e2:	d11b      	bne.n	800331c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f06f 0204 	mvn.w	r2, #4
 80032ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2202      	movs	r2, #2
 80032f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f98b 	bl	800361e <HAL_TIM_IC_CaptureCallback>
 8003308:	e005      	b.n	8003316 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f97d 	bl	800360a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 f98e 	bl	8003632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b08      	cmp	r3, #8
 8003328:	d122      	bne.n	8003370 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f003 0308 	and.w	r3, r3, #8
 8003334:	2b08      	cmp	r3, #8
 8003336:	d11b      	bne.n	8003370 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f06f 0208 	mvn.w	r2, #8
 8003340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2204      	movs	r2, #4
 8003346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f961 	bl	800361e <HAL_TIM_IC_CaptureCallback>
 800335c:	e005      	b.n	800336a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f953 	bl	800360a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 f964 	bl	8003632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	f003 0310 	and.w	r3, r3, #16
 800337a:	2b10      	cmp	r3, #16
 800337c:	d122      	bne.n	80033c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	f003 0310 	and.w	r3, r3, #16
 8003388:	2b10      	cmp	r3, #16
 800338a:	d11b      	bne.n	80033c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f06f 0210 	mvn.w	r2, #16
 8003394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2208      	movs	r2, #8
 800339a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f937 	bl	800361e <HAL_TIM_IC_CaptureCallback>
 80033b0:	e005      	b.n	80033be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f929 	bl	800360a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f93a 	bl	8003632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d10e      	bne.n	80033f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d107      	bne.n	80033f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f06f 0201 	mvn.w	r2, #1
 80033e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7fd fa7a 	bl	80008e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fa:	2b80      	cmp	r3, #128	; 0x80
 80033fc:	d10e      	bne.n	800341c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003408:	2b80      	cmp	r3, #128	; 0x80
 800340a:	d107      	bne.n	800341c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 fab2 	bl	8003980 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003426:	2b40      	cmp	r3, #64	; 0x40
 8003428:	d10e      	bne.n	8003448 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003434:	2b40      	cmp	r3, #64	; 0x40
 8003436:	d107      	bne.n	8003448 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f8ff 	bl	8003646 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	f003 0320 	and.w	r3, r3, #32
 8003452:	2b20      	cmp	r3, #32
 8003454:	d10e      	bne.n	8003474 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f003 0320 	and.w	r3, r3, #32
 8003460:	2b20      	cmp	r3, #32
 8003462:	d107      	bne.n	8003474 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f06f 0220 	mvn.w	r2, #32
 800346c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 fa7c 	bl	800396c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003474:	bf00      	nop
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003490:	2b01      	cmp	r3, #1
 8003492:	d101      	bne.n	8003498 <HAL_TIM_ConfigClockSource+0x1c>
 8003494:	2302      	movs	r3, #2
 8003496:	e0b4      	b.n	8003602 <HAL_TIM_ConfigClockSource+0x186>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034d0:	d03e      	beq.n	8003550 <HAL_TIM_ConfigClockSource+0xd4>
 80034d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034d6:	f200 8087 	bhi.w	80035e8 <HAL_TIM_ConfigClockSource+0x16c>
 80034da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034de:	f000 8086 	beq.w	80035ee <HAL_TIM_ConfigClockSource+0x172>
 80034e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034e6:	d87f      	bhi.n	80035e8 <HAL_TIM_ConfigClockSource+0x16c>
 80034e8:	2b70      	cmp	r3, #112	; 0x70
 80034ea:	d01a      	beq.n	8003522 <HAL_TIM_ConfigClockSource+0xa6>
 80034ec:	2b70      	cmp	r3, #112	; 0x70
 80034ee:	d87b      	bhi.n	80035e8 <HAL_TIM_ConfigClockSource+0x16c>
 80034f0:	2b60      	cmp	r3, #96	; 0x60
 80034f2:	d050      	beq.n	8003596 <HAL_TIM_ConfigClockSource+0x11a>
 80034f4:	2b60      	cmp	r3, #96	; 0x60
 80034f6:	d877      	bhi.n	80035e8 <HAL_TIM_ConfigClockSource+0x16c>
 80034f8:	2b50      	cmp	r3, #80	; 0x50
 80034fa:	d03c      	beq.n	8003576 <HAL_TIM_ConfigClockSource+0xfa>
 80034fc:	2b50      	cmp	r3, #80	; 0x50
 80034fe:	d873      	bhi.n	80035e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003500:	2b40      	cmp	r3, #64	; 0x40
 8003502:	d058      	beq.n	80035b6 <HAL_TIM_ConfigClockSource+0x13a>
 8003504:	2b40      	cmp	r3, #64	; 0x40
 8003506:	d86f      	bhi.n	80035e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003508:	2b30      	cmp	r3, #48	; 0x30
 800350a:	d064      	beq.n	80035d6 <HAL_TIM_ConfigClockSource+0x15a>
 800350c:	2b30      	cmp	r3, #48	; 0x30
 800350e:	d86b      	bhi.n	80035e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003510:	2b20      	cmp	r3, #32
 8003512:	d060      	beq.n	80035d6 <HAL_TIM_ConfigClockSource+0x15a>
 8003514:	2b20      	cmp	r3, #32
 8003516:	d867      	bhi.n	80035e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003518:	2b00      	cmp	r3, #0
 800351a:	d05c      	beq.n	80035d6 <HAL_TIM_ConfigClockSource+0x15a>
 800351c:	2b10      	cmp	r3, #16
 800351e:	d05a      	beq.n	80035d6 <HAL_TIM_ConfigClockSource+0x15a>
 8003520:	e062      	b.n	80035e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6818      	ldr	r0, [r3, #0]
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	6899      	ldr	r1, [r3, #8]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f000 f98d 	bl	8003850 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003544:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	609a      	str	r2, [r3, #8]
      break;
 800354e:	e04f      	b.n	80035f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6818      	ldr	r0, [r3, #0]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	6899      	ldr	r1, [r3, #8]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f000 f976 	bl	8003850 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003572:	609a      	str	r2, [r3, #8]
      break;
 8003574:	e03c      	b.n	80035f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6818      	ldr	r0, [r3, #0]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	6859      	ldr	r1, [r3, #4]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	461a      	mov	r2, r3
 8003584:	f000 f8ea 	bl	800375c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2150      	movs	r1, #80	; 0x50
 800358e:	4618      	mov	r0, r3
 8003590:	f000 f943 	bl	800381a <TIM_ITRx_SetConfig>
      break;
 8003594:	e02c      	b.n	80035f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6818      	ldr	r0, [r3, #0]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	6859      	ldr	r1, [r3, #4]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	461a      	mov	r2, r3
 80035a4:	f000 f909 	bl	80037ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2160      	movs	r1, #96	; 0x60
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 f933 	bl	800381a <TIM_ITRx_SetConfig>
      break;
 80035b4:	e01c      	b.n	80035f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6818      	ldr	r0, [r3, #0]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	6859      	ldr	r1, [r3, #4]
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	461a      	mov	r2, r3
 80035c4:	f000 f8ca 	bl	800375c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2140      	movs	r1, #64	; 0x40
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 f923 	bl	800381a <TIM_ITRx_SetConfig>
      break;
 80035d4:	e00c      	b.n	80035f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4619      	mov	r1, r3
 80035e0:	4610      	mov	r0, r2
 80035e2:	f000 f91a 	bl	800381a <TIM_ITRx_SetConfig>
      break;
 80035e6:	e003      	b.n	80035f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	73fb      	strb	r3, [r7, #15]
      break;
 80035ec:	e000      	b.n	80035f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80035ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003600:	7bfb      	ldrb	r3, [r7, #15]
}
 8003602:	4618      	mov	r0, r3
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800361e:	b480      	push	{r7}
 8003620:	b083      	sub	sp, #12
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
	...

0800365c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a34      	ldr	r2, [pc, #208]	; (8003740 <TIM_Base_SetConfig+0xe4>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d00f      	beq.n	8003694 <TIM_Base_SetConfig+0x38>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800367a:	d00b      	beq.n	8003694 <TIM_Base_SetConfig+0x38>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a31      	ldr	r2, [pc, #196]	; (8003744 <TIM_Base_SetConfig+0xe8>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d007      	beq.n	8003694 <TIM_Base_SetConfig+0x38>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a30      	ldr	r2, [pc, #192]	; (8003748 <TIM_Base_SetConfig+0xec>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d003      	beq.n	8003694 <TIM_Base_SetConfig+0x38>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a2f      	ldr	r2, [pc, #188]	; (800374c <TIM_Base_SetConfig+0xf0>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d108      	bne.n	80036a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800369a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a25      	ldr	r2, [pc, #148]	; (8003740 <TIM_Base_SetConfig+0xe4>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d01b      	beq.n	80036e6 <TIM_Base_SetConfig+0x8a>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b4:	d017      	beq.n	80036e6 <TIM_Base_SetConfig+0x8a>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a22      	ldr	r2, [pc, #136]	; (8003744 <TIM_Base_SetConfig+0xe8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d013      	beq.n	80036e6 <TIM_Base_SetConfig+0x8a>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a21      	ldr	r2, [pc, #132]	; (8003748 <TIM_Base_SetConfig+0xec>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d00f      	beq.n	80036e6 <TIM_Base_SetConfig+0x8a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a20      	ldr	r2, [pc, #128]	; (800374c <TIM_Base_SetConfig+0xf0>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d00b      	beq.n	80036e6 <TIM_Base_SetConfig+0x8a>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a1f      	ldr	r2, [pc, #124]	; (8003750 <TIM_Base_SetConfig+0xf4>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d007      	beq.n	80036e6 <TIM_Base_SetConfig+0x8a>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a1e      	ldr	r2, [pc, #120]	; (8003754 <TIM_Base_SetConfig+0xf8>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d003      	beq.n	80036e6 <TIM_Base_SetConfig+0x8a>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a1d      	ldr	r2, [pc, #116]	; (8003758 <TIM_Base_SetConfig+0xfc>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d108      	bne.n	80036f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	4313      	orrs	r3, r2
 8003704:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a08      	ldr	r2, [pc, #32]	; (8003740 <TIM_Base_SetConfig+0xe4>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d103      	bne.n	800372c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	691a      	ldr	r2, [r3, #16]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	615a      	str	r2, [r3, #20]
}
 8003732:	bf00      	nop
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	40010000 	.word	0x40010000
 8003744:	40000400 	.word	0x40000400
 8003748:	40000800 	.word	0x40000800
 800374c:	40000c00 	.word	0x40000c00
 8003750:	40014000 	.word	0x40014000
 8003754:	40014400 	.word	0x40014400
 8003758:	40014800 	.word	0x40014800

0800375c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800375c:	b480      	push	{r7}
 800375e:	b087      	sub	sp, #28
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	f023 0201 	bic.w	r2, r3, #1
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003786:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	011b      	lsls	r3, r3, #4
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	4313      	orrs	r3, r2
 8003790:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f023 030a 	bic.w	r3, r3, #10
 8003798:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	4313      	orrs	r3, r2
 80037a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	621a      	str	r2, [r3, #32]
}
 80037ae:	bf00      	nop
 80037b0:	371c      	adds	r7, #28
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b087      	sub	sp, #28
 80037be:	af00      	add	r7, sp, #0
 80037c0:	60f8      	str	r0, [r7, #12]
 80037c2:	60b9      	str	r1, [r7, #8]
 80037c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	f023 0210 	bic.w	r2, r3, #16
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	031b      	lsls	r3, r3, #12
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	011b      	lsls	r3, r3, #4
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	4313      	orrs	r3, r2
 8003800:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	621a      	str	r2, [r3, #32]
}
 800380e:	bf00      	nop
 8003810:	371c      	adds	r7, #28
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800381a:	b480      	push	{r7}
 800381c:	b085      	sub	sp, #20
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
 8003822:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003830:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4313      	orrs	r3, r2
 8003838:	f043 0307 	orr.w	r3, r3, #7
 800383c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	609a      	str	r2, [r3, #8]
}
 8003844:	bf00      	nop
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003850:	b480      	push	{r7}
 8003852:	b087      	sub	sp, #28
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
 800385c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800386a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	021a      	lsls	r2, r3, #8
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	431a      	orrs	r2, r3
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	4313      	orrs	r3, r2
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	4313      	orrs	r3, r2
 800387c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	609a      	str	r2, [r3, #8]
}
 8003884:	bf00      	nop
 8003886:	371c      	adds	r7, #28
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d101      	bne.n	80038a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038a4:	2302      	movs	r3, #2
 80038a6:	e050      	b.n	800394a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2202      	movs	r2, #2
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a1c      	ldr	r2, [pc, #112]	; (8003958 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d018      	beq.n	800391e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f4:	d013      	beq.n	800391e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a18      	ldr	r2, [pc, #96]	; (800395c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d00e      	beq.n	800391e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a16      	ldr	r2, [pc, #88]	; (8003960 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d009      	beq.n	800391e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a15      	ldr	r2, [pc, #84]	; (8003964 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d004      	beq.n	800391e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a13      	ldr	r2, [pc, #76]	; (8003968 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d10c      	bne.n	8003938 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003924:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	4313      	orrs	r3, r2
 800392e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	40010000 	.word	0x40010000
 800395c:	40000400 	.word	0x40000400
 8003960:	40000800 	.word	0x40000800
 8003964:	40000c00 	.word	0x40000c00
 8003968:	40014000 	.word	0x40014000

0800396c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e03f      	b.n	8003a26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d106      	bne.n	80039c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7fd f862 	bl	8000a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2224      	movs	r2, #36	; 0x24
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f829 	bl	8003a30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695a      	ldr	r2, [r3, #20]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68da      	ldr	r2, [r3, #12]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2220      	movs	r2, #32
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
	...

08003a30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a34:	b0c0      	sub	sp, #256	; 0x100
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a4c:	68d9      	ldr	r1, [r3, #12]
 8003a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	ea40 0301 	orr.w	r3, r0, r1
 8003a58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	431a      	orrs	r2, r3
 8003a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a88:	f021 010c 	bic.w	r1, r1, #12
 8003a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a96:	430b      	orrs	r3, r1
 8003a98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aaa:	6999      	ldr	r1, [r3, #24]
 8003aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	ea40 0301 	orr.w	r3, r0, r1
 8003ab6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	4b8f      	ldr	r3, [pc, #572]	; (8003cfc <UART_SetConfig+0x2cc>)
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d005      	beq.n	8003ad0 <UART_SetConfig+0xa0>
 8003ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	4b8d      	ldr	r3, [pc, #564]	; (8003d00 <UART_SetConfig+0x2d0>)
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d104      	bne.n	8003ada <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ad0:	f7ff fb06 	bl	80030e0 <HAL_RCC_GetPCLK2Freq>
 8003ad4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003ad8:	e003      	b.n	8003ae2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ada:	f7ff faed 	bl	80030b8 <HAL_RCC_GetPCLK1Freq>
 8003ade:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae6:	69db      	ldr	r3, [r3, #28]
 8003ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aec:	f040 810c 	bne.w	8003d08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003af0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003af4:	2200      	movs	r2, #0
 8003af6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003afa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003afe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b02:	4622      	mov	r2, r4
 8003b04:	462b      	mov	r3, r5
 8003b06:	1891      	adds	r1, r2, r2
 8003b08:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b0a:	415b      	adcs	r3, r3
 8003b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b12:	4621      	mov	r1, r4
 8003b14:	eb12 0801 	adds.w	r8, r2, r1
 8003b18:	4629      	mov	r1, r5
 8003b1a:	eb43 0901 	adc.w	r9, r3, r1
 8003b1e:	f04f 0200 	mov.w	r2, #0
 8003b22:	f04f 0300 	mov.w	r3, #0
 8003b26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b32:	4690      	mov	r8, r2
 8003b34:	4699      	mov	r9, r3
 8003b36:	4623      	mov	r3, r4
 8003b38:	eb18 0303 	adds.w	r3, r8, r3
 8003b3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b40:	462b      	mov	r3, r5
 8003b42:	eb49 0303 	adc.w	r3, r9, r3
 8003b46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b56:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003b5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003b5e:	460b      	mov	r3, r1
 8003b60:	18db      	adds	r3, r3, r3
 8003b62:	653b      	str	r3, [r7, #80]	; 0x50
 8003b64:	4613      	mov	r3, r2
 8003b66:	eb42 0303 	adc.w	r3, r2, r3
 8003b6a:	657b      	str	r3, [r7, #84]	; 0x54
 8003b6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003b70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003b74:	f7fc fb30 	bl	80001d8 <__aeabi_uldivmod>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	4b61      	ldr	r3, [pc, #388]	; (8003d04 <UART_SetConfig+0x2d4>)
 8003b7e:	fba3 2302 	umull	r2, r3, r3, r2
 8003b82:	095b      	lsrs	r3, r3, #5
 8003b84:	011c      	lsls	r4, r3, #4
 8003b86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b90:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003b94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003b98:	4642      	mov	r2, r8
 8003b9a:	464b      	mov	r3, r9
 8003b9c:	1891      	adds	r1, r2, r2
 8003b9e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ba0:	415b      	adcs	r3, r3
 8003ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ba4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ba8:	4641      	mov	r1, r8
 8003baa:	eb12 0a01 	adds.w	sl, r2, r1
 8003bae:	4649      	mov	r1, r9
 8003bb0:	eb43 0b01 	adc.w	fp, r3, r1
 8003bb4:	f04f 0200 	mov.w	r2, #0
 8003bb8:	f04f 0300 	mov.w	r3, #0
 8003bbc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bc0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bc8:	4692      	mov	sl, r2
 8003bca:	469b      	mov	fp, r3
 8003bcc:	4643      	mov	r3, r8
 8003bce:	eb1a 0303 	adds.w	r3, sl, r3
 8003bd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bd6:	464b      	mov	r3, r9
 8003bd8:	eb4b 0303 	adc.w	r3, fp, r3
 8003bdc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003bec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003bf0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	18db      	adds	r3, r3, r3
 8003bf8:	643b      	str	r3, [r7, #64]	; 0x40
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	eb42 0303 	adc.w	r3, r2, r3
 8003c00:	647b      	str	r3, [r7, #68]	; 0x44
 8003c02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003c0a:	f7fc fae5 	bl	80001d8 <__aeabi_uldivmod>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	4611      	mov	r1, r2
 8003c14:	4b3b      	ldr	r3, [pc, #236]	; (8003d04 <UART_SetConfig+0x2d4>)
 8003c16:	fba3 2301 	umull	r2, r3, r3, r1
 8003c1a:	095b      	lsrs	r3, r3, #5
 8003c1c:	2264      	movs	r2, #100	; 0x64
 8003c1e:	fb02 f303 	mul.w	r3, r2, r3
 8003c22:	1acb      	subs	r3, r1, r3
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003c2a:	4b36      	ldr	r3, [pc, #216]	; (8003d04 <UART_SetConfig+0x2d4>)
 8003c2c:	fba3 2302 	umull	r2, r3, r3, r2
 8003c30:	095b      	lsrs	r3, r3, #5
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c38:	441c      	add	r4, r3
 8003c3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c44:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003c48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003c4c:	4642      	mov	r2, r8
 8003c4e:	464b      	mov	r3, r9
 8003c50:	1891      	adds	r1, r2, r2
 8003c52:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c54:	415b      	adcs	r3, r3
 8003c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c5c:	4641      	mov	r1, r8
 8003c5e:	1851      	adds	r1, r2, r1
 8003c60:	6339      	str	r1, [r7, #48]	; 0x30
 8003c62:	4649      	mov	r1, r9
 8003c64:	414b      	adcs	r3, r1
 8003c66:	637b      	str	r3, [r7, #52]	; 0x34
 8003c68:	f04f 0200 	mov.w	r2, #0
 8003c6c:	f04f 0300 	mov.w	r3, #0
 8003c70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003c74:	4659      	mov	r1, fp
 8003c76:	00cb      	lsls	r3, r1, #3
 8003c78:	4651      	mov	r1, sl
 8003c7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c7e:	4651      	mov	r1, sl
 8003c80:	00ca      	lsls	r2, r1, #3
 8003c82:	4610      	mov	r0, r2
 8003c84:	4619      	mov	r1, r3
 8003c86:	4603      	mov	r3, r0
 8003c88:	4642      	mov	r2, r8
 8003c8a:	189b      	adds	r3, r3, r2
 8003c8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c90:	464b      	mov	r3, r9
 8003c92:	460a      	mov	r2, r1
 8003c94:	eb42 0303 	adc.w	r3, r2, r3
 8003c98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ca8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003cac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	18db      	adds	r3, r3, r3
 8003cb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	eb42 0303 	adc.w	r3, r2, r3
 8003cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cc2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003cc6:	f7fc fa87 	bl	80001d8 <__aeabi_uldivmod>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	460b      	mov	r3, r1
 8003cce:	4b0d      	ldr	r3, [pc, #52]	; (8003d04 <UART_SetConfig+0x2d4>)
 8003cd0:	fba3 1302 	umull	r1, r3, r3, r2
 8003cd4:	095b      	lsrs	r3, r3, #5
 8003cd6:	2164      	movs	r1, #100	; 0x64
 8003cd8:	fb01 f303 	mul.w	r3, r1, r3
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	3332      	adds	r3, #50	; 0x32
 8003ce2:	4a08      	ldr	r2, [pc, #32]	; (8003d04 <UART_SetConfig+0x2d4>)
 8003ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce8:	095b      	lsrs	r3, r3, #5
 8003cea:	f003 0207 	and.w	r2, r3, #7
 8003cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4422      	add	r2, r4
 8003cf6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003cf8:	e105      	b.n	8003f06 <UART_SetConfig+0x4d6>
 8003cfa:	bf00      	nop
 8003cfc:	40011000 	.word	0x40011000
 8003d00:	40011400 	.word	0x40011400
 8003d04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d12:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003d16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003d1a:	4642      	mov	r2, r8
 8003d1c:	464b      	mov	r3, r9
 8003d1e:	1891      	adds	r1, r2, r2
 8003d20:	6239      	str	r1, [r7, #32]
 8003d22:	415b      	adcs	r3, r3
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
 8003d26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d2a:	4641      	mov	r1, r8
 8003d2c:	1854      	adds	r4, r2, r1
 8003d2e:	4649      	mov	r1, r9
 8003d30:	eb43 0501 	adc.w	r5, r3, r1
 8003d34:	f04f 0200 	mov.w	r2, #0
 8003d38:	f04f 0300 	mov.w	r3, #0
 8003d3c:	00eb      	lsls	r3, r5, #3
 8003d3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d42:	00e2      	lsls	r2, r4, #3
 8003d44:	4614      	mov	r4, r2
 8003d46:	461d      	mov	r5, r3
 8003d48:	4643      	mov	r3, r8
 8003d4a:	18e3      	adds	r3, r4, r3
 8003d4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d50:	464b      	mov	r3, r9
 8003d52:	eb45 0303 	adc.w	r3, r5, r3
 8003d56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d6a:	f04f 0200 	mov.w	r2, #0
 8003d6e:	f04f 0300 	mov.w	r3, #0
 8003d72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003d76:	4629      	mov	r1, r5
 8003d78:	008b      	lsls	r3, r1, #2
 8003d7a:	4621      	mov	r1, r4
 8003d7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d80:	4621      	mov	r1, r4
 8003d82:	008a      	lsls	r2, r1, #2
 8003d84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003d88:	f7fc fa26 	bl	80001d8 <__aeabi_uldivmod>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	4b60      	ldr	r3, [pc, #384]	; (8003f14 <UART_SetConfig+0x4e4>)
 8003d92:	fba3 2302 	umull	r2, r3, r3, r2
 8003d96:	095b      	lsrs	r3, r3, #5
 8003d98:	011c      	lsls	r4, r3, #4
 8003d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003da4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003da8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003dac:	4642      	mov	r2, r8
 8003dae:	464b      	mov	r3, r9
 8003db0:	1891      	adds	r1, r2, r2
 8003db2:	61b9      	str	r1, [r7, #24]
 8003db4:	415b      	adcs	r3, r3
 8003db6:	61fb      	str	r3, [r7, #28]
 8003db8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dbc:	4641      	mov	r1, r8
 8003dbe:	1851      	adds	r1, r2, r1
 8003dc0:	6139      	str	r1, [r7, #16]
 8003dc2:	4649      	mov	r1, r9
 8003dc4:	414b      	adcs	r3, r1
 8003dc6:	617b      	str	r3, [r7, #20]
 8003dc8:	f04f 0200 	mov.w	r2, #0
 8003dcc:	f04f 0300 	mov.w	r3, #0
 8003dd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003dd4:	4659      	mov	r1, fp
 8003dd6:	00cb      	lsls	r3, r1, #3
 8003dd8:	4651      	mov	r1, sl
 8003dda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dde:	4651      	mov	r1, sl
 8003de0:	00ca      	lsls	r2, r1, #3
 8003de2:	4610      	mov	r0, r2
 8003de4:	4619      	mov	r1, r3
 8003de6:	4603      	mov	r3, r0
 8003de8:	4642      	mov	r2, r8
 8003dea:	189b      	adds	r3, r3, r2
 8003dec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003df0:	464b      	mov	r3, r9
 8003df2:	460a      	mov	r2, r1
 8003df4:	eb42 0303 	adc.w	r3, r2, r3
 8003df8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e06:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003e08:	f04f 0200 	mov.w	r2, #0
 8003e0c:	f04f 0300 	mov.w	r3, #0
 8003e10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003e14:	4649      	mov	r1, r9
 8003e16:	008b      	lsls	r3, r1, #2
 8003e18:	4641      	mov	r1, r8
 8003e1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e1e:	4641      	mov	r1, r8
 8003e20:	008a      	lsls	r2, r1, #2
 8003e22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003e26:	f7fc f9d7 	bl	80001d8 <__aeabi_uldivmod>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	4b39      	ldr	r3, [pc, #228]	; (8003f14 <UART_SetConfig+0x4e4>)
 8003e30:	fba3 1302 	umull	r1, r3, r3, r2
 8003e34:	095b      	lsrs	r3, r3, #5
 8003e36:	2164      	movs	r1, #100	; 0x64
 8003e38:	fb01 f303 	mul.w	r3, r1, r3
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	3332      	adds	r3, #50	; 0x32
 8003e42:	4a34      	ldr	r2, [pc, #208]	; (8003f14 <UART_SetConfig+0x4e4>)
 8003e44:	fba2 2303 	umull	r2, r3, r2, r3
 8003e48:	095b      	lsrs	r3, r3, #5
 8003e4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e4e:	441c      	add	r4, r3
 8003e50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e54:	2200      	movs	r2, #0
 8003e56:	673b      	str	r3, [r7, #112]	; 0x70
 8003e58:	677a      	str	r2, [r7, #116]	; 0x74
 8003e5a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003e5e:	4642      	mov	r2, r8
 8003e60:	464b      	mov	r3, r9
 8003e62:	1891      	adds	r1, r2, r2
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	415b      	adcs	r3, r3
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e6e:	4641      	mov	r1, r8
 8003e70:	1851      	adds	r1, r2, r1
 8003e72:	6039      	str	r1, [r7, #0]
 8003e74:	4649      	mov	r1, r9
 8003e76:	414b      	adcs	r3, r1
 8003e78:	607b      	str	r3, [r7, #4]
 8003e7a:	f04f 0200 	mov.w	r2, #0
 8003e7e:	f04f 0300 	mov.w	r3, #0
 8003e82:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e86:	4659      	mov	r1, fp
 8003e88:	00cb      	lsls	r3, r1, #3
 8003e8a:	4651      	mov	r1, sl
 8003e8c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e90:	4651      	mov	r1, sl
 8003e92:	00ca      	lsls	r2, r1, #3
 8003e94:	4610      	mov	r0, r2
 8003e96:	4619      	mov	r1, r3
 8003e98:	4603      	mov	r3, r0
 8003e9a:	4642      	mov	r2, r8
 8003e9c:	189b      	adds	r3, r3, r2
 8003e9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ea0:	464b      	mov	r3, r9
 8003ea2:	460a      	mov	r2, r1
 8003ea4:	eb42 0303 	adc.w	r3, r2, r3
 8003ea8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	663b      	str	r3, [r7, #96]	; 0x60
 8003eb4:	667a      	str	r2, [r7, #100]	; 0x64
 8003eb6:	f04f 0200 	mov.w	r2, #0
 8003eba:	f04f 0300 	mov.w	r3, #0
 8003ebe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003ec2:	4649      	mov	r1, r9
 8003ec4:	008b      	lsls	r3, r1, #2
 8003ec6:	4641      	mov	r1, r8
 8003ec8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ecc:	4641      	mov	r1, r8
 8003ece:	008a      	lsls	r2, r1, #2
 8003ed0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003ed4:	f7fc f980 	bl	80001d8 <__aeabi_uldivmod>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	460b      	mov	r3, r1
 8003edc:	4b0d      	ldr	r3, [pc, #52]	; (8003f14 <UART_SetConfig+0x4e4>)
 8003ede:	fba3 1302 	umull	r1, r3, r3, r2
 8003ee2:	095b      	lsrs	r3, r3, #5
 8003ee4:	2164      	movs	r1, #100	; 0x64
 8003ee6:	fb01 f303 	mul.w	r3, r1, r3
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	011b      	lsls	r3, r3, #4
 8003eee:	3332      	adds	r3, #50	; 0x32
 8003ef0:	4a08      	ldr	r2, [pc, #32]	; (8003f14 <UART_SetConfig+0x4e4>)
 8003ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef6:	095b      	lsrs	r3, r3, #5
 8003ef8:	f003 020f 	and.w	r2, r3, #15
 8003efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4422      	add	r2, r4
 8003f04:	609a      	str	r2, [r3, #8]
}
 8003f06:	bf00      	nop
 8003f08:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f12:	bf00      	nop
 8003f14:	51eb851f 	.word	0x51eb851f

08003f18 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f18:	b084      	sub	sp, #16
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b084      	sub	sp, #16
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	f107 001c 	add.w	r0, r7, #28
 8003f26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d122      	bne.n	8003f76 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003f44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d105      	bne.n	8003f6a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f001 fbee 	bl	800574c <USB_CoreReset>
 8003f70:	4603      	mov	r3, r0
 8003f72:	73fb      	strb	r3, [r7, #15]
 8003f74:	e01a      	b.n	8003fac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f001 fbe2 	bl	800574c <USB_CoreReset>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003f8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d106      	bne.n	8003fa0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	639a      	str	r2, [r3, #56]	; 0x38
 8003f9e:	e005      	b.n	8003fac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d10b      	bne.n	8003fca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f043 0206 	orr.w	r2, r3, #6
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f043 0220 	orr.w	r2, r3, #32
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fd6:	b004      	add	sp, #16
 8003fd8:	4770      	bx	lr
	...

08003fdc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003fea:	79fb      	ldrb	r3, [r7, #7]
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d165      	bne.n	80040bc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	4a41      	ldr	r2, [pc, #260]	; (80040f8 <USB_SetTurnaroundTime+0x11c>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d906      	bls.n	8004006 <USB_SetTurnaroundTime+0x2a>
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	4a40      	ldr	r2, [pc, #256]	; (80040fc <USB_SetTurnaroundTime+0x120>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d202      	bcs.n	8004006 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004000:	230f      	movs	r3, #15
 8004002:	617b      	str	r3, [r7, #20]
 8004004:	e062      	b.n	80040cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	4a3c      	ldr	r2, [pc, #240]	; (80040fc <USB_SetTurnaroundTime+0x120>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d306      	bcc.n	800401c <USB_SetTurnaroundTime+0x40>
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	4a3b      	ldr	r2, [pc, #236]	; (8004100 <USB_SetTurnaroundTime+0x124>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d202      	bcs.n	800401c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004016:	230e      	movs	r3, #14
 8004018:	617b      	str	r3, [r7, #20]
 800401a:	e057      	b.n	80040cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	4a38      	ldr	r2, [pc, #224]	; (8004100 <USB_SetTurnaroundTime+0x124>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d306      	bcc.n	8004032 <USB_SetTurnaroundTime+0x56>
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	4a37      	ldr	r2, [pc, #220]	; (8004104 <USB_SetTurnaroundTime+0x128>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d202      	bcs.n	8004032 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800402c:	230d      	movs	r3, #13
 800402e:	617b      	str	r3, [r7, #20]
 8004030:	e04c      	b.n	80040cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	4a33      	ldr	r2, [pc, #204]	; (8004104 <USB_SetTurnaroundTime+0x128>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d306      	bcc.n	8004048 <USB_SetTurnaroundTime+0x6c>
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	4a32      	ldr	r2, [pc, #200]	; (8004108 <USB_SetTurnaroundTime+0x12c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d802      	bhi.n	8004048 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004042:	230c      	movs	r3, #12
 8004044:	617b      	str	r3, [r7, #20]
 8004046:	e041      	b.n	80040cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	4a2f      	ldr	r2, [pc, #188]	; (8004108 <USB_SetTurnaroundTime+0x12c>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d906      	bls.n	800405e <USB_SetTurnaroundTime+0x82>
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	4a2e      	ldr	r2, [pc, #184]	; (800410c <USB_SetTurnaroundTime+0x130>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d802      	bhi.n	800405e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004058:	230b      	movs	r3, #11
 800405a:	617b      	str	r3, [r7, #20]
 800405c:	e036      	b.n	80040cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	4a2a      	ldr	r2, [pc, #168]	; (800410c <USB_SetTurnaroundTime+0x130>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d906      	bls.n	8004074 <USB_SetTurnaroundTime+0x98>
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	4a29      	ldr	r2, [pc, #164]	; (8004110 <USB_SetTurnaroundTime+0x134>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d802      	bhi.n	8004074 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800406e:	230a      	movs	r3, #10
 8004070:	617b      	str	r3, [r7, #20]
 8004072:	e02b      	b.n	80040cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	4a26      	ldr	r2, [pc, #152]	; (8004110 <USB_SetTurnaroundTime+0x134>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d906      	bls.n	800408a <USB_SetTurnaroundTime+0xae>
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	4a25      	ldr	r2, [pc, #148]	; (8004114 <USB_SetTurnaroundTime+0x138>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d202      	bcs.n	800408a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004084:	2309      	movs	r3, #9
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	e020      	b.n	80040cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	4a21      	ldr	r2, [pc, #132]	; (8004114 <USB_SetTurnaroundTime+0x138>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d306      	bcc.n	80040a0 <USB_SetTurnaroundTime+0xc4>
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	4a20      	ldr	r2, [pc, #128]	; (8004118 <USB_SetTurnaroundTime+0x13c>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d802      	bhi.n	80040a0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800409a:	2308      	movs	r3, #8
 800409c:	617b      	str	r3, [r7, #20]
 800409e:	e015      	b.n	80040cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	4a1d      	ldr	r2, [pc, #116]	; (8004118 <USB_SetTurnaroundTime+0x13c>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d906      	bls.n	80040b6 <USB_SetTurnaroundTime+0xda>
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	4a1c      	ldr	r2, [pc, #112]	; (800411c <USB_SetTurnaroundTime+0x140>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d202      	bcs.n	80040b6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80040b0:	2307      	movs	r3, #7
 80040b2:	617b      	str	r3, [r7, #20]
 80040b4:	e00a      	b.n	80040cc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80040b6:	2306      	movs	r3, #6
 80040b8:	617b      	str	r3, [r7, #20]
 80040ba:	e007      	b.n	80040cc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80040bc:	79fb      	ldrb	r3, [r7, #7]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d102      	bne.n	80040c8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80040c2:	2309      	movs	r3, #9
 80040c4:	617b      	str	r3, [r7, #20]
 80040c6:	e001      	b.n	80040cc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80040c8:	2309      	movs	r3, #9
 80040ca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	68da      	ldr	r2, [r3, #12]
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	029b      	lsls	r3, r3, #10
 80040e0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80040e4:	431a      	orrs	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	371c      	adds	r7, #28
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	00d8acbf 	.word	0x00d8acbf
 80040fc:	00e4e1c0 	.word	0x00e4e1c0
 8004100:	00f42400 	.word	0x00f42400
 8004104:	01067380 	.word	0x01067380
 8004108:	011a499f 	.word	0x011a499f
 800410c:	01312cff 	.word	0x01312cff
 8004110:	014ca43f 	.word	0x014ca43f
 8004114:	016e3600 	.word	0x016e3600
 8004118:	01a6ab1f 	.word	0x01a6ab1f
 800411c:	01e84800 	.word	0x01e84800

08004120 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f043 0201 	orr.w	r2, r3, #1
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f023 0201 	bic.w	r2, r3, #1
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	460b      	mov	r3, r1
 800416e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004180:	78fb      	ldrb	r3, [r7, #3]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d115      	bne.n	80041b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004192:	2001      	movs	r0, #1
 8004194:	f7fc fde8 	bl	8000d68 <HAL_Delay>
      ms++;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	3301      	adds	r3, #1
 800419c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f001 fa45 	bl	800562e <USB_GetMode>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d01e      	beq.n	80041e8 <USB_SetCurrentMode+0x84>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2b31      	cmp	r3, #49	; 0x31
 80041ae:	d9f0      	bls.n	8004192 <USB_SetCurrentMode+0x2e>
 80041b0:	e01a      	b.n	80041e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80041b2:	78fb      	ldrb	r3, [r7, #3]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d115      	bne.n	80041e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80041c4:	2001      	movs	r0, #1
 80041c6:	f7fc fdcf 	bl	8000d68 <HAL_Delay>
      ms++;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	3301      	adds	r3, #1
 80041ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f001 fa2c 	bl	800562e <USB_GetMode>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d005      	beq.n	80041e8 <USB_SetCurrentMode+0x84>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2b31      	cmp	r3, #49	; 0x31
 80041e0:	d9f0      	bls.n	80041c4 <USB_SetCurrentMode+0x60>
 80041e2:	e001      	b.n	80041e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e005      	b.n	80041f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2b32      	cmp	r3, #50	; 0x32
 80041ec:	d101      	bne.n	80041f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e000      	b.n	80041f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041fc:	b084      	sub	sp, #16
 80041fe:	b580      	push	{r7, lr}
 8004200:	b086      	sub	sp, #24
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800420a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800420e:	2300      	movs	r3, #0
 8004210:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004216:	2300      	movs	r3, #0
 8004218:	613b      	str	r3, [r7, #16]
 800421a:	e009      	b.n	8004230 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	3340      	adds	r3, #64	; 0x40
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	2200      	movs	r2, #0
 8004228:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	3301      	adds	r3, #1
 800422e:	613b      	str	r3, [r7, #16]
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	2b0e      	cmp	r3, #14
 8004234:	d9f2      	bls.n	800421c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004238:	2b00      	cmp	r3, #0
 800423a:	d11c      	bne.n	8004276 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800424a:	f043 0302 	orr.w	r3, r3, #2
 800424e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004254:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004260:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	639a      	str	r2, [r3, #56]	; 0x38
 8004274:	e00b      	b.n	800428e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004286:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004294:	461a      	mov	r2, r3
 8004296:	2300      	movs	r3, #0
 8004298:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a0:	4619      	mov	r1, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a8:	461a      	mov	r2, r3
 80042aa:	680b      	ldr	r3, [r1, #0]
 80042ac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d10c      	bne.n	80042ce <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80042b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d104      	bne.n	80042c4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80042ba:	2100      	movs	r1, #0
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f965 	bl	800458c <USB_SetDevSpeed>
 80042c2:	e008      	b.n	80042d6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80042c4:	2101      	movs	r1, #1
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f960 	bl	800458c <USB_SetDevSpeed>
 80042cc:	e003      	b.n	80042d6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80042ce:	2103      	movs	r1, #3
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f95b 	bl	800458c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80042d6:	2110      	movs	r1, #16
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 f8f3 	bl	80044c4 <USB_FlushTxFifo>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f91f 	bl	800452c <USB_FlushRxFifo>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042fe:	461a      	mov	r2, r3
 8004300:	2300      	movs	r3, #0
 8004302:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800430a:	461a      	mov	r2, r3
 800430c:	2300      	movs	r3, #0
 800430e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004316:	461a      	mov	r2, r3
 8004318:	2300      	movs	r3, #0
 800431a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800431c:	2300      	movs	r3, #0
 800431e:	613b      	str	r3, [r7, #16]
 8004320:	e043      	b.n	80043aa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	015a      	lsls	r2, r3, #5
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	4413      	add	r3, r2
 800432a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004334:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004338:	d118      	bne.n	800436c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10a      	bne.n	8004356 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	015a      	lsls	r2, r3, #5
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4413      	add	r3, r2
 8004348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800434c:	461a      	mov	r2, r3
 800434e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004352:	6013      	str	r3, [r2, #0]
 8004354:	e013      	b.n	800437e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	015a      	lsls	r2, r3, #5
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	4413      	add	r3, r2
 800435e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004362:	461a      	mov	r2, r3
 8004364:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004368:	6013      	str	r3, [r2, #0]
 800436a:	e008      	b.n	800437e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	015a      	lsls	r2, r3, #5
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	4413      	add	r3, r2
 8004374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004378:	461a      	mov	r2, r3
 800437a:	2300      	movs	r3, #0
 800437c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4413      	add	r3, r2
 8004386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800438a:	461a      	mov	r2, r3
 800438c:	2300      	movs	r3, #0
 800438e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	015a      	lsls	r2, r3, #5
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4413      	add	r3, r2
 8004398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800439c:	461a      	mov	r2, r3
 800439e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	3301      	adds	r3, #1
 80043a8:	613b      	str	r3, [r7, #16]
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d3b7      	bcc.n	8004322 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043b2:	2300      	movs	r3, #0
 80043b4:	613b      	str	r3, [r7, #16]
 80043b6:	e043      	b.n	8004440 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	015a      	lsls	r2, r3, #5
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4413      	add	r3, r2
 80043c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043ce:	d118      	bne.n	8004402 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10a      	bne.n	80043ec <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	015a      	lsls	r2, r3, #5
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	4413      	add	r3, r2
 80043de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e2:	461a      	mov	r2, r3
 80043e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043e8:	6013      	str	r3, [r2, #0]
 80043ea:	e013      	b.n	8004414 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	015a      	lsls	r2, r3, #5
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f8:	461a      	mov	r2, r3
 80043fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80043fe:	6013      	str	r3, [r2, #0]
 8004400:	e008      	b.n	8004414 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	015a      	lsls	r2, r3, #5
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	4413      	add	r3, r2
 800440a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800440e:	461a      	mov	r2, r3
 8004410:	2300      	movs	r3, #0
 8004412:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4413      	add	r3, r2
 800441c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004420:	461a      	mov	r2, r3
 8004422:	2300      	movs	r3, #0
 8004424:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	015a      	lsls	r2, r3, #5
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	4413      	add	r3, r2
 800442e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004432:	461a      	mov	r2, r3
 8004434:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004438:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	3301      	adds	r3, #1
 800443e:	613b      	str	r3, [r7, #16]
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	429a      	cmp	r2, r3
 8004446:	d3b7      	bcc.n	80043b8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004456:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800445a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004468:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800446a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446c:	2b00      	cmp	r3, #0
 800446e:	d105      	bne.n	800447c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	f043 0210 	orr.w	r2, r3, #16
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	699a      	ldr	r2, [r3, #24]
 8004480:	4b0f      	ldr	r3, [pc, #60]	; (80044c0 <USB_DevInit+0x2c4>)
 8004482:	4313      	orrs	r3, r2
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800448a:	2b00      	cmp	r3, #0
 800448c:	d005      	beq.n	800449a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	f043 0208 	orr.w	r2, r3, #8
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800449a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800449c:	2b01      	cmp	r3, #1
 800449e:	d107      	bne.n	80044b0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044a8:	f043 0304 	orr.w	r3, r3, #4
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80044b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3718      	adds	r7, #24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044bc:	b004      	add	sp, #16
 80044be:	4770      	bx	lr
 80044c0:	803c3800 	.word	0x803c3800

080044c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80044ce:	2300      	movs	r3, #0
 80044d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	3301      	adds	r3, #1
 80044d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4a13      	ldr	r2, [pc, #76]	; (8004528 <USB_FlushTxFifo+0x64>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d901      	bls.n	80044e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e01b      	b.n	800451c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	daf2      	bge.n	80044d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	019b      	lsls	r3, r3, #6
 80044f4:	f043 0220 	orr.w	r2, r3, #32
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	3301      	adds	r3, #1
 8004500:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	4a08      	ldr	r2, [pc, #32]	; (8004528 <USB_FlushTxFifo+0x64>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d901      	bls.n	800450e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e006      	b.n	800451c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	f003 0320 	and.w	r3, r3, #32
 8004516:	2b20      	cmp	r3, #32
 8004518:	d0f0      	beq.n	80044fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	00030d40 	.word	0x00030d40

0800452c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004534:	2300      	movs	r3, #0
 8004536:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	3301      	adds	r3, #1
 800453c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	4a11      	ldr	r2, [pc, #68]	; (8004588 <USB_FlushRxFifo+0x5c>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d901      	bls.n	800454a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e018      	b.n	800457c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	2b00      	cmp	r3, #0
 8004550:	daf2      	bge.n	8004538 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004552:	2300      	movs	r3, #0
 8004554:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2210      	movs	r2, #16
 800455a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	3301      	adds	r3, #1
 8004560:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	4a08      	ldr	r2, [pc, #32]	; (8004588 <USB_FlushRxFifo+0x5c>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d901      	bls.n	800456e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e006      	b.n	800457c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	f003 0310 	and.w	r3, r3, #16
 8004576:	2b10      	cmp	r3, #16
 8004578:	d0f0      	beq.n	800455c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr
 8004588:	00030d40 	.word	0x00030d40

0800458c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	460b      	mov	r3, r1
 8004596:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	78fb      	ldrb	r3, [r7, #3]
 80045a6:	68f9      	ldr	r1, [r7, #12]
 80045a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045ac:	4313      	orrs	r3, r2
 80045ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80045be:	b480      	push	{r7}
 80045c0:	b087      	sub	sp, #28
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 0306 	and.w	r3, r3, #6
 80045d6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d102      	bne.n	80045e4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80045de:	2300      	movs	r3, #0
 80045e0:	75fb      	strb	r3, [r7, #23]
 80045e2:	e00a      	b.n	80045fa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d002      	beq.n	80045f0 <USB_GetDevSpeed+0x32>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2b06      	cmp	r3, #6
 80045ee:	d102      	bne.n	80045f6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80045f0:	2302      	movs	r3, #2
 80045f2:	75fb      	strb	r3, [r7, #23]
 80045f4:	e001      	b.n	80045fa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80045f6:	230f      	movs	r3, #15
 80045f8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80045fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	371c      	adds	r7, #28
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	785b      	ldrb	r3, [r3, #1]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d13a      	bne.n	800469a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800462a:	69da      	ldr	r2, [r3, #28]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	f003 030f 	and.w	r3, r3, #15
 8004634:	2101      	movs	r1, #1
 8004636:	fa01 f303 	lsl.w	r3, r1, r3
 800463a:	b29b      	uxth	r3, r3
 800463c:	68f9      	ldr	r1, [r7, #12]
 800463e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004642:	4313      	orrs	r3, r2
 8004644:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	015a      	lsls	r2, r3, #5
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4413      	add	r3, r2
 800464e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d155      	bne.n	8004708 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4413      	add	r3, r2
 8004664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	791b      	ldrb	r3, [r3, #4]
 8004676:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004678:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	059b      	lsls	r3, r3, #22
 800467e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004680:	4313      	orrs	r3, r2
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	0151      	lsls	r1, r2, #5
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	440a      	add	r2, r1
 800468a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800468e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004696:	6013      	str	r3, [r2, #0]
 8004698:	e036      	b.n	8004708 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046a0:	69da      	ldr	r2, [r3, #28]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	f003 030f 	and.w	r3, r3, #15
 80046aa:	2101      	movs	r1, #1
 80046ac:	fa01 f303 	lsl.w	r3, r1, r3
 80046b0:	041b      	lsls	r3, r3, #16
 80046b2:	68f9      	ldr	r1, [r7, #12]
 80046b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046b8:	4313      	orrs	r3, r2
 80046ba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	015a      	lsls	r2, r3, #5
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4413      	add	r3, r2
 80046c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d11a      	bne.n	8004708 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	015a      	lsls	r2, r3, #5
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4413      	add	r3, r2
 80046da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	791b      	ldrb	r3, [r3, #4]
 80046ec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80046ee:	430b      	orrs	r3, r1
 80046f0:	4313      	orrs	r3, r2
 80046f2:	68ba      	ldr	r2, [r7, #8]
 80046f4:	0151      	lsls	r1, r2, #5
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	440a      	add	r2, r1
 80046fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004706:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
	...

08004718 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	785b      	ldrb	r3, [r3, #1]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d161      	bne.n	80047f8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4413      	add	r3, r2
 800473c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004746:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800474a:	d11f      	bne.n	800478c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4413      	add	r3, r2
 8004754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	0151      	lsls	r1, r2, #5
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	440a      	add	r2, r1
 8004762:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004766:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800476a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4413      	add	r3, r2
 8004774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	0151      	lsls	r1, r2, #5
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	440a      	add	r2, r1
 8004782:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004786:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800478a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004792:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	f003 030f 	and.w	r3, r3, #15
 800479c:	2101      	movs	r1, #1
 800479e:	fa01 f303 	lsl.w	r3, r1, r3
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	43db      	mvns	r3, r3
 80047a6:	68f9      	ldr	r1, [r7, #12]
 80047a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047ac:	4013      	ands	r3, r2
 80047ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b6:	69da      	ldr	r2, [r3, #28]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	f003 030f 	and.w	r3, r3, #15
 80047c0:	2101      	movs	r1, #1
 80047c2:	fa01 f303 	lsl.w	r3, r1, r3
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	43db      	mvns	r3, r3
 80047ca:	68f9      	ldr	r1, [r7, #12]
 80047cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047d0:	4013      	ands	r3, r2
 80047d2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	015a      	lsls	r2, r3, #5
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	4413      	add	r3, r2
 80047dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	0159      	lsls	r1, r3, #5
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	440b      	add	r3, r1
 80047ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ee:	4619      	mov	r1, r3
 80047f0:	4b35      	ldr	r3, [pc, #212]	; (80048c8 <USB_DeactivateEndpoint+0x1b0>)
 80047f2:	4013      	ands	r3, r2
 80047f4:	600b      	str	r3, [r1, #0]
 80047f6:	e060      	b.n	80048ba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800480a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800480e:	d11f      	bne.n	8004850 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4413      	add	r3, r2
 8004818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	0151      	lsls	r1, r2, #5
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	440a      	add	r2, r1
 8004826:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800482a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800482e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4413      	add	r3, r2
 8004838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	0151      	lsls	r1, r2, #5
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	440a      	add	r2, r1
 8004846:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800484a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800484e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004856:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	f003 030f 	and.w	r3, r3, #15
 8004860:	2101      	movs	r1, #1
 8004862:	fa01 f303 	lsl.w	r3, r1, r3
 8004866:	041b      	lsls	r3, r3, #16
 8004868:	43db      	mvns	r3, r3
 800486a:	68f9      	ldr	r1, [r7, #12]
 800486c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004870:	4013      	ands	r3, r2
 8004872:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800487a:	69da      	ldr	r2, [r3, #28]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	f003 030f 	and.w	r3, r3, #15
 8004884:	2101      	movs	r1, #1
 8004886:	fa01 f303 	lsl.w	r3, r1, r3
 800488a:	041b      	lsls	r3, r3, #16
 800488c:	43db      	mvns	r3, r3
 800488e:	68f9      	ldr	r1, [r7, #12]
 8004890:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004894:	4013      	ands	r3, r2
 8004896:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	015a      	lsls	r2, r3, #5
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	0159      	lsls	r1, r3, #5
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	440b      	add	r3, r1
 80048ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b2:	4619      	mov	r1, r3
 80048b4:	4b05      	ldr	r3, [pc, #20]	; (80048cc <USB_DeactivateEndpoint+0x1b4>)
 80048b6:	4013      	ands	r3, r2
 80048b8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	ec337800 	.word	0xec337800
 80048cc:	eff37800 	.word	0xeff37800

080048d0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b08a      	sub	sp, #40	; 0x28
 80048d4:	af02      	add	r7, sp, #8
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	4613      	mov	r3, r2
 80048dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	785b      	ldrb	r3, [r3, #1]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	f040 815c 	bne.w	8004baa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d132      	bne.n	8004960 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	4413      	add	r3, r2
 8004902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	0151      	lsls	r1, r2, #5
 800490c:	69fa      	ldr	r2, [r7, #28]
 800490e:	440a      	add	r2, r1
 8004910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004914:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004918:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800491c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	015a      	lsls	r2, r3, #5
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	4413      	add	r3, r2
 8004926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	0151      	lsls	r1, r2, #5
 8004930:	69fa      	ldr	r2, [r7, #28]
 8004932:	440a      	add	r2, r1
 8004934:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004938:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800493c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	015a      	lsls	r2, r3, #5
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	4413      	add	r3, r2
 8004946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	0151      	lsls	r1, r2, #5
 8004950:	69fa      	ldr	r2, [r7, #28]
 8004952:	440a      	add	r2, r1
 8004954:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004958:	0cdb      	lsrs	r3, r3, #19
 800495a:	04db      	lsls	r3, r3, #19
 800495c:	6113      	str	r3, [r2, #16]
 800495e:	e074      	b.n	8004a4a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	4413      	add	r3, r2
 8004968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	69ba      	ldr	r2, [r7, #24]
 8004970:	0151      	lsls	r1, r2, #5
 8004972:	69fa      	ldr	r2, [r7, #28]
 8004974:	440a      	add	r2, r1
 8004976:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800497a:	0cdb      	lsrs	r3, r3, #19
 800497c:	04db      	lsls	r3, r3, #19
 800497e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	015a      	lsls	r2, r3, #5
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	4413      	add	r3, r2
 8004988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	0151      	lsls	r1, r2, #5
 8004992:	69fa      	ldr	r2, [r7, #28]
 8004994:	440a      	add	r2, r1
 8004996:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800499a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800499e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	015a      	lsls	r2, r3, #5
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	4413      	add	r3, r2
 80049ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	6999      	ldr	r1, [r3, #24]
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	440b      	add	r3, r1
 80049bc:	1e59      	subs	r1, r3, #1
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80049c6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80049c8:	4b9d      	ldr	r3, [pc, #628]	; (8004c40 <USB_EPStartXfer+0x370>)
 80049ca:	400b      	ands	r3, r1
 80049cc:	69b9      	ldr	r1, [r7, #24]
 80049ce:	0148      	lsls	r0, r1, #5
 80049d0:	69f9      	ldr	r1, [r7, #28]
 80049d2:	4401      	add	r1, r0
 80049d4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80049d8:	4313      	orrs	r3, r2
 80049da:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e8:	691a      	ldr	r2, [r3, #16]
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049f2:	69b9      	ldr	r1, [r7, #24]
 80049f4:	0148      	lsls	r0, r1, #5
 80049f6:	69f9      	ldr	r1, [r7, #28]
 80049f8:	4401      	add	r1, r0
 80049fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80049fe:	4313      	orrs	r3, r2
 8004a00:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	791b      	ldrb	r3, [r3, #4]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d11f      	bne.n	8004a4a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	0151      	lsls	r1, r2, #5
 8004a1c:	69fa      	ldr	r2, [r7, #28]
 8004a1e:	440a      	add	r2, r1
 8004a20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a24:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004a28:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	0151      	lsls	r1, r2, #5
 8004a3c:	69fa      	ldr	r2, [r7, #28]
 8004a3e:	440a      	add	r2, r1
 8004a40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a44:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a48:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004a4a:	79fb      	ldrb	r3, [r7, #7]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d14b      	bne.n	8004ae8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d009      	beq.n	8004a6c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	015a      	lsls	r2, r3, #5
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a64:	461a      	mov	r2, r3
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	791b      	ldrb	r3, [r3, #4]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d128      	bne.n	8004ac6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d110      	bne.n	8004aa6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	69ba      	ldr	r2, [r7, #24]
 8004a94:	0151      	lsls	r1, r2, #5
 8004a96:	69fa      	ldr	r2, [r7, #28]
 8004a98:	440a      	add	r2, r1
 8004a9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004aa2:	6013      	str	r3, [r2, #0]
 8004aa4:	e00f      	b.n	8004ac6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	015a      	lsls	r2, r3, #5
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	4413      	add	r3, r2
 8004aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	0151      	lsls	r1, r2, #5
 8004ab8:	69fa      	ldr	r2, [r7, #28]
 8004aba:	440a      	add	r2, r1
 8004abc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ac4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	015a      	lsls	r2, r3, #5
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	0151      	lsls	r1, r2, #5
 8004ad8:	69fa      	ldr	r2, [r7, #28]
 8004ada:	440a      	add	r2, r1
 8004adc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ae0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	e133      	b.n	8004d50 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	0151      	lsls	r1, r2, #5
 8004afa:	69fa      	ldr	r2, [r7, #28]
 8004afc:	440a      	add	r2, r1
 8004afe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b06:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	791b      	ldrb	r3, [r3, #4]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d015      	beq.n	8004b3c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 811b 	beq.w	8004d50 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	f003 030f 	and.w	r3, r3, #15
 8004b2a:	2101      	movs	r1, #1
 8004b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b30:	69f9      	ldr	r1, [r7, #28]
 8004b32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b36:	4313      	orrs	r3, r2
 8004b38:	634b      	str	r3, [r1, #52]	; 0x34
 8004b3a:	e109      	b.n	8004d50 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d110      	bne.n	8004b6e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	015a      	lsls	r2, r3, #5
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	69ba      	ldr	r2, [r7, #24]
 8004b5c:	0151      	lsls	r1, r2, #5
 8004b5e:	69fa      	ldr	r2, [r7, #28]
 8004b60:	440a      	add	r2, r1
 8004b62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b6a:	6013      	str	r3, [r2, #0]
 8004b6c:	e00f      	b.n	8004b8e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	015a      	lsls	r2, r3, #5
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	4413      	add	r3, r2
 8004b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	0151      	lsls	r1, r2, #5
 8004b80:	69fa      	ldr	r2, [r7, #28]
 8004b82:	440a      	add	r2, r1
 8004b84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b8c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	6919      	ldr	r1, [r3, #16]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	781a      	ldrb	r2, [r3, #0]
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	b298      	uxth	r0, r3
 8004b9c:	79fb      	ldrb	r3, [r7, #7]
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f000 fade 	bl	8005164 <USB_WritePacket>
 8004ba8:	e0d2      	b.n	8004d50 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	015a      	lsls	r2, r3, #5
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	0151      	lsls	r1, r2, #5
 8004bbc:	69fa      	ldr	r2, [r7, #28]
 8004bbe:	440a      	add	r2, r1
 8004bc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bc4:	0cdb      	lsrs	r3, r3, #19
 8004bc6:	04db      	lsls	r3, r3, #19
 8004bc8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	0151      	lsls	r1, r2, #5
 8004bdc:	69fa      	ldr	r2, [r7, #28]
 8004bde:	440a      	add	r2, r1
 8004be0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004be4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004be8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d126      	bne.n	8004c44 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	015a      	lsls	r2, r3, #5
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c02:	691a      	ldr	r2, [r3, #16]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c0c:	69b9      	ldr	r1, [r7, #24]
 8004c0e:	0148      	lsls	r0, r1, #5
 8004c10:	69f9      	ldr	r1, [r7, #28]
 8004c12:	4401      	add	r1, r0
 8004c14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	0151      	lsls	r1, r2, #5
 8004c2e:	69fa      	ldr	r2, [r7, #28]
 8004c30:	440a      	add	r2, r1
 8004c32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c3a:	6113      	str	r3, [r2, #16]
 8004c3c:	e03a      	b.n	8004cb4 <USB_EPStartXfer+0x3e4>
 8004c3e:	bf00      	nop
 8004c40:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	699a      	ldr	r2, [r3, #24]
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	1e5a      	subs	r2, r3, #1
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c58:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	8afa      	ldrh	r2, [r7, #22]
 8004c60:	fb03 f202 	mul.w	r2, r3, r2
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	015a      	lsls	r2, r3, #5
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	4413      	add	r3, r2
 8004c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c74:	691a      	ldr	r2, [r3, #16]
 8004c76:	8afb      	ldrh	r3, [r7, #22]
 8004c78:	04d9      	lsls	r1, r3, #19
 8004c7a:	4b38      	ldr	r3, [pc, #224]	; (8004d5c <USB_EPStartXfer+0x48c>)
 8004c7c:	400b      	ands	r3, r1
 8004c7e:	69b9      	ldr	r1, [r7, #24]
 8004c80:	0148      	lsls	r0, r1, #5
 8004c82:	69f9      	ldr	r1, [r7, #28]
 8004c84:	4401      	add	r1, r0
 8004c86:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	015a      	lsls	r2, r3, #5
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	4413      	add	r3, r2
 8004c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c9a:	691a      	ldr	r2, [r3, #16]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	69db      	ldr	r3, [r3, #28]
 8004ca0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ca4:	69b9      	ldr	r1, [r7, #24]
 8004ca6:	0148      	lsls	r0, r1, #5
 8004ca8:	69f9      	ldr	r1, [r7, #28]
 8004caa:	4401      	add	r1, r0
 8004cac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004cb4:	79fb      	ldrb	r3, [r7, #7]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d10d      	bne.n	8004cd6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d009      	beq.n	8004cd6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	6919      	ldr	r1, [r3, #16]
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	015a      	lsls	r2, r3, #5
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	4413      	add	r3, r2
 8004cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd2:	460a      	mov	r2, r1
 8004cd4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	791b      	ldrb	r3, [r3, #4]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d128      	bne.n	8004d30 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d110      	bne.n	8004d10 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	015a      	lsls	r2, r3, #5
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	0151      	lsls	r1, r2, #5
 8004d00:	69fa      	ldr	r2, [r7, #28]
 8004d02:	440a      	add	r2, r1
 8004d04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d0c:	6013      	str	r3, [r2, #0]
 8004d0e:	e00f      	b.n	8004d30 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	69ba      	ldr	r2, [r7, #24]
 8004d20:	0151      	lsls	r1, r2, #5
 8004d22:	69fa      	ldr	r2, [r7, #28]
 8004d24:	440a      	add	r2, r1
 8004d26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d2e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	69ba      	ldr	r2, [r7, #24]
 8004d40:	0151      	lsls	r1, r2, #5
 8004d42:	69fa      	ldr	r2, [r7, #28]
 8004d44:	440a      	add	r2, r1
 8004d46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3720      	adds	r7, #32
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	1ff80000 	.word	0x1ff80000

08004d60 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b087      	sub	sp, #28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	785b      	ldrb	r3, [r3, #1]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	f040 80ce 	bne.w	8004f1e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d132      	bne.n	8004df0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	015a      	lsls	r2, r3, #5
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	4413      	add	r3, r2
 8004d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	0151      	lsls	r1, r2, #5
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	440a      	add	r2, r1
 8004da0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004da4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004da8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004dac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	015a      	lsls	r2, r3, #5
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	4413      	add	r3, r2
 8004db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	0151      	lsls	r1, r2, #5
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	440a      	add	r2, r1
 8004dc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004dcc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	015a      	lsls	r2, r3, #5
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	0151      	lsls	r1, r2, #5
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	440a      	add	r2, r1
 8004de4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004de8:	0cdb      	lsrs	r3, r3, #19
 8004dea:	04db      	lsls	r3, r3, #19
 8004dec:	6113      	str	r3, [r2, #16]
 8004dee:	e04e      	b.n	8004e8e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	0151      	lsls	r1, r2, #5
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	440a      	add	r2, r1
 8004e06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e0a:	0cdb      	lsrs	r3, r3, #19
 8004e0c:	04db      	lsls	r3, r3, #19
 8004e0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	0151      	lsls	r1, r2, #5
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	440a      	add	r2, r1
 8004e26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e2a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e2e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e32:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	699a      	ldr	r2, [r3, #24]
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d903      	bls.n	8004e48 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	68da      	ldr	r2, [r3, #12]
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	0151      	lsls	r1, r2, #5
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	440a      	add	r2, r1
 8004e5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e74:	691a      	ldr	r2, [r3, #16]
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e7e:	6939      	ldr	r1, [r7, #16]
 8004e80:	0148      	lsls	r0, r1, #5
 8004e82:	6979      	ldr	r1, [r7, #20]
 8004e84:	4401      	add	r1, r0
 8004e86:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004e8e:	79fb      	ldrb	r3, [r7, #7]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d11e      	bne.n	8004ed2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d009      	beq.n	8004eb0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	015a      	lsls	r2, r3, #5
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	0151      	lsls	r1, r2, #5
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	440a      	add	r2, r1
 8004ec6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ece:	6013      	str	r3, [r2, #0]
 8004ed0:	e097      	b.n	8005002 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	015a      	lsls	r2, r3, #5
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	0151      	lsls	r1, r2, #5
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	440a      	add	r2, r1
 8004ee8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ef0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f000 8083 	beq.w	8005002 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	f003 030f 	and.w	r3, r3, #15
 8004f0c:	2101      	movs	r1, #1
 8004f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f12:	6979      	ldr	r1, [r7, #20]
 8004f14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	634b      	str	r3, [r1, #52]	; 0x34
 8004f1c:	e071      	b.n	8005002 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	015a      	lsls	r2, r3, #5
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	4413      	add	r3, r2
 8004f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	0151      	lsls	r1, r2, #5
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	440a      	add	r2, r1
 8004f34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f38:	0cdb      	lsrs	r3, r3, #19
 8004f3a:	04db      	lsls	r3, r3, #19
 8004f3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	015a      	lsls	r2, r3, #5
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	0151      	lsls	r1, r2, #5
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	440a      	add	r2, r1
 8004f54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f58:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f5c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f60:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	68da      	ldr	r2, [r3, #12]
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	68da      	ldr	r2, [r3, #12]
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	015a      	lsls	r2, r3, #5
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	4413      	add	r3, r2
 8004f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	0151      	lsls	r1, r2, #5
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	440a      	add	r2, r1
 8004f90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	015a      	lsls	r2, r3, #5
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa6:	691a      	ldr	r2, [r3, #16]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	69db      	ldr	r3, [r3, #28]
 8004fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fb0:	6939      	ldr	r1, [r7, #16]
 8004fb2:	0148      	lsls	r0, r1, #5
 8004fb4:	6979      	ldr	r1, [r7, #20]
 8004fb6:	4401      	add	r1, r0
 8004fb8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004fc0:	79fb      	ldrb	r3, [r7, #7]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d10d      	bne.n	8004fe2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d009      	beq.n	8004fe2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	6919      	ldr	r1, [r3, #16]
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	015a      	lsls	r2, r3, #5
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	4413      	add	r3, r2
 8004fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fde:	460a      	mov	r2, r1
 8004fe0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	0151      	lsls	r1, r2, #5
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	440a      	add	r2, r1
 8004ff8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ffc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005000:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	371c      	adds	r7, #28
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005010:	b480      	push	{r7}
 8005012:	b087      	sub	sp, #28
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800501a:	2300      	movs	r3, #0
 800501c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800501e:	2300      	movs	r3, #0
 8005020:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	785b      	ldrb	r3, [r3, #1]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d14a      	bne.n	80050c4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	4413      	add	r3, r2
 8005038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005042:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005046:	f040 8086 	bne.w	8005156 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	015a      	lsls	r2, r3, #5
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	4413      	add	r3, r2
 8005054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	7812      	ldrb	r2, [r2, #0]
 800505e:	0151      	lsls	r1, r2, #5
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	440a      	add	r2, r1
 8005064:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005068:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800506c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	015a      	lsls	r2, r3, #5
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	4413      	add	r3, r2
 8005078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	7812      	ldrb	r2, [r2, #0]
 8005082:	0151      	lsls	r1, r2, #5
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	440a      	add	r2, r1
 8005088:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800508c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005090:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	3301      	adds	r3, #1
 8005096:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f242 7210 	movw	r2, #10000	; 0x2710
 800509e:	4293      	cmp	r3, r2
 80050a0:	d902      	bls.n	80050a8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	75fb      	strb	r3, [r7, #23]
          break;
 80050a6:	e056      	b.n	8005156 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	015a      	lsls	r2, r3, #5
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	4413      	add	r3, r2
 80050b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050c0:	d0e7      	beq.n	8005092 <USB_EPStopXfer+0x82>
 80050c2:	e048      	b.n	8005156 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	015a      	lsls	r2, r3, #5
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	4413      	add	r3, r2
 80050ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050dc:	d13b      	bne.n	8005156 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	683a      	ldr	r2, [r7, #0]
 80050f0:	7812      	ldrb	r2, [r2, #0]
 80050f2:	0151      	lsls	r1, r2, #5
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	440a      	add	r2, r1
 80050f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005100:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	4413      	add	r3, r2
 800510c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	7812      	ldrb	r2, [r2, #0]
 8005116:	0151      	lsls	r1, r2, #5
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	440a      	add	r2, r1
 800511c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005120:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005124:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	3301      	adds	r3, #1
 800512a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005132:	4293      	cmp	r3, r2
 8005134:	d902      	bls.n	800513c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	75fb      	strb	r3, [r7, #23]
          break;
 800513a:	e00c      	b.n	8005156 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	015a      	lsls	r2, r3, #5
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	4413      	add	r3, r2
 8005146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005150:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005154:	d0e7      	beq.n	8005126 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005156:	7dfb      	ldrb	r3, [r7, #23]
}
 8005158:	4618      	mov	r0, r3
 800515a:	371c      	adds	r7, #28
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005164:	b480      	push	{r7}
 8005166:	b089      	sub	sp, #36	; 0x24
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	4611      	mov	r1, r2
 8005170:	461a      	mov	r2, r3
 8005172:	460b      	mov	r3, r1
 8005174:	71fb      	strb	r3, [r7, #7]
 8005176:	4613      	mov	r3, r2
 8005178:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005182:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005186:	2b00      	cmp	r3, #0
 8005188:	d123      	bne.n	80051d2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800518a:	88bb      	ldrh	r3, [r7, #4]
 800518c:	3303      	adds	r3, #3
 800518e:	089b      	lsrs	r3, r3, #2
 8005190:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005192:	2300      	movs	r3, #0
 8005194:	61bb      	str	r3, [r7, #24]
 8005196:	e018      	b.n	80051ca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005198:	79fb      	ldrb	r3, [r7, #7]
 800519a:	031a      	lsls	r2, r3, #12
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051a4:	461a      	mov	r2, r3
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	3301      	adds	r3, #1
 80051b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	3301      	adds	r3, #1
 80051b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	3301      	adds	r3, #1
 80051bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	3301      	adds	r3, #1
 80051c2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	3301      	adds	r3, #1
 80051c8:	61bb      	str	r3, [r7, #24]
 80051ca:	69ba      	ldr	r2, [r7, #24]
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d3e2      	bcc.n	8005198 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3724      	adds	r7, #36	; 0x24
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b08b      	sub	sp, #44	; 0x2c
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	4613      	mov	r3, r2
 80051ec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80051f6:	88fb      	ldrh	r3, [r7, #6]
 80051f8:	089b      	lsrs	r3, r3, #2
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80051fe:	88fb      	ldrh	r3, [r7, #6]
 8005200:	f003 0303 	and.w	r3, r3, #3
 8005204:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005206:	2300      	movs	r3, #0
 8005208:	623b      	str	r3, [r7, #32]
 800520a:	e014      	b.n	8005236 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	601a      	str	r2, [r3, #0]
    pDest++;
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	3301      	adds	r3, #1
 800521c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	3301      	adds	r3, #1
 8005222:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	3301      	adds	r3, #1
 8005228:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	3301      	adds	r3, #1
 800522e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005230:	6a3b      	ldr	r3, [r7, #32]
 8005232:	3301      	adds	r3, #1
 8005234:	623b      	str	r3, [r7, #32]
 8005236:	6a3a      	ldr	r2, [r7, #32]
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	429a      	cmp	r2, r3
 800523c:	d3e6      	bcc.n	800520c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800523e:	8bfb      	ldrh	r3, [r7, #30]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d01e      	beq.n	8005282 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005244:	2300      	movs	r3, #0
 8005246:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800524e:	461a      	mov	r2, r3
 8005250:	f107 0310 	add.w	r3, r7, #16
 8005254:	6812      	ldr	r2, [r2, #0]
 8005256:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	6a3b      	ldr	r3, [r7, #32]
 800525c:	b2db      	uxtb	r3, r3
 800525e:	00db      	lsls	r3, r3, #3
 8005260:	fa22 f303 	lsr.w	r3, r2, r3
 8005264:	b2da      	uxtb	r2, r3
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	701a      	strb	r2, [r3, #0]
      i++;
 800526a:	6a3b      	ldr	r3, [r7, #32]
 800526c:	3301      	adds	r3, #1
 800526e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005272:	3301      	adds	r3, #1
 8005274:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005276:	8bfb      	ldrh	r3, [r7, #30]
 8005278:	3b01      	subs	r3, #1
 800527a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800527c:	8bfb      	ldrh	r3, [r7, #30]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1ea      	bne.n	8005258 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005284:	4618      	mov	r0, r3
 8005286:	372c      	adds	r7, #44	; 0x2c
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	785b      	ldrb	r3, [r3, #1]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d12c      	bne.n	8005306 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	db12      	blt.n	80052e4 <USB_EPSetStall+0x54>
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00f      	beq.n	80052e4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	015a      	lsls	r2, r3, #5
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	4413      	add	r3, r2
 80052cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	0151      	lsls	r1, r2, #5
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	440a      	add	r2, r1
 80052da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052e2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	015a      	lsls	r2, r3, #5
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	0151      	lsls	r1, r2, #5
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	440a      	add	r2, r1
 80052fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005302:	6013      	str	r3, [r2, #0]
 8005304:	e02b      	b.n	800535e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	015a      	lsls	r2, r3, #5
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	4413      	add	r3, r2
 800530e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	db12      	blt.n	800533e <USB_EPSetStall+0xae>
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00f      	beq.n	800533e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	015a      	lsls	r2, r3, #5
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	4413      	add	r3, r2
 8005326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	0151      	lsls	r1, r2, #5
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	440a      	add	r2, r1
 8005334:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005338:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800533c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	015a      	lsls	r2, r3, #5
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	4413      	add	r3, r2
 8005346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	0151      	lsls	r1, r2, #5
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	440a      	add	r2, r1
 8005354:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005358:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800535c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3714      	adds	r7, #20
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	785b      	ldrb	r3, [r3, #1]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d128      	bne.n	80053da <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4413      	add	r3, r2
 8005390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	0151      	lsls	r1, r2, #5
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	440a      	add	r2, r1
 800539e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053a6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	791b      	ldrb	r3, [r3, #4]
 80053ac:	2b03      	cmp	r3, #3
 80053ae:	d003      	beq.n	80053b8 <USB_EPClearStall+0x4c>
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	791b      	ldrb	r3, [r3, #4]
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d138      	bne.n	800542a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	015a      	lsls	r2, r3, #5
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4413      	add	r3, r2
 80053c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	0151      	lsls	r1, r2, #5
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	440a      	add	r2, r1
 80053ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053d6:	6013      	str	r3, [r2, #0]
 80053d8:	e027      	b.n	800542a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	015a      	lsls	r2, r3, #5
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	0151      	lsls	r1, r2, #5
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	440a      	add	r2, r1
 80053f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053f8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	791b      	ldrb	r3, [r3, #4]
 80053fe:	2b03      	cmp	r3, #3
 8005400:	d003      	beq.n	800540a <USB_EPClearStall+0x9e>
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	791b      	ldrb	r3, [r3, #4]
 8005406:	2b02      	cmp	r3, #2
 8005408:	d10f      	bne.n	800542a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	015a      	lsls	r2, r3, #5
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	4413      	add	r3, r2
 8005412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	0151      	lsls	r1, r2, #5
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	440a      	add	r2, r1
 8005420:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005428:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	460b      	mov	r3, r1
 8005442:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005456:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800545a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	78fb      	ldrb	r3, [r7, #3]
 8005466:	011b      	lsls	r3, r3, #4
 8005468:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800546c:	68f9      	ldr	r1, [r7, #12]
 800546e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005472:	4313      	orrs	r3, r2
 8005474:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3714      	adds	r7, #20
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800549e:	f023 0303 	bic.w	r3, r3, #3
 80054a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054b2:	f023 0302 	bic.w	r3, r3, #2
 80054b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b085      	sub	sp, #20
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80054e0:	f023 0303 	bic.w	r3, r3, #3
 80054e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054f4:	f043 0302 	orr.w	r3, r3, #2
 80054f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3714      	adds	r7, #20
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	4013      	ands	r3, r2
 800551e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005520:	68fb      	ldr	r3, [r7, #12]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800552e:	b480      	push	{r7}
 8005530:	b085      	sub	sp, #20
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554a:	69db      	ldr	r3, [r3, #28]
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	4013      	ands	r3, r2
 8005550:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	0c1b      	lsrs	r3, r3, #16
}
 8005556:	4618      	mov	r0, r3
 8005558:	3714      	adds	r7, #20
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr

08005562 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005562:	b480      	push	{r7}
 8005564:	b085      	sub	sp, #20
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800557e:	69db      	ldr	r3, [r3, #28]
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	4013      	ands	r3, r2
 8005584:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	b29b      	uxth	r3, r3
}
 800558a:	4618      	mov	r0, r3
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr

08005596 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005596:	b480      	push	{r7}
 8005598:	b085      	sub	sp, #20
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
 800559e:	460b      	mov	r3, r1
 80055a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80055a6:	78fb      	ldrb	r3, [r7, #3]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	4013      	ands	r3, r2
 80055c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80055c4:	68bb      	ldr	r3, [r7, #8]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b087      	sub	sp, #28
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
 80055da:	460b      	mov	r3, r1
 80055dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80055f6:	78fb      	ldrb	r3, [r7, #3]
 80055f8:	f003 030f 	and.w	r3, r3, #15
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005602:	01db      	lsls	r3, r3, #7
 8005604:	b2db      	uxtb	r3, r3
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	4313      	orrs	r3, r2
 800560a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800560c:	78fb      	ldrb	r3, [r7, #3]
 800560e:	015a      	lsls	r2, r3, #5
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	4413      	add	r3, r2
 8005614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	4013      	ands	r3, r2
 800561e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005620:	68bb      	ldr	r3, [r7, #8]
}
 8005622:	4618      	mov	r0, r3
 8005624:	371c      	adds	r7, #28
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800562e:	b480      	push	{r7}
 8005630:	b083      	sub	sp, #12
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	f003 0301 	and.w	r3, r3, #1
}
 800563e:	4618      	mov	r0, r3
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800564a:	b480      	push	{r7}
 800564c:	b085      	sub	sp, #20
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005664:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005668:	f023 0307 	bic.w	r3, r3, #7
 800566c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800567c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005680:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3714      	adds	r7, #20
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005690:	b480      	push	{r7}
 8005692:	b087      	sub	sp, #28
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	460b      	mov	r3, r1
 800569a:	607a      	str	r2, [r7, #4]
 800569c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	333c      	adds	r3, #60	; 0x3c
 80056a6:	3304      	adds	r3, #4
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	4a26      	ldr	r2, [pc, #152]	; (8005748 <USB_EP0_OutStart+0xb8>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d90a      	bls.n	80056ca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056c4:	d101      	bne.n	80056ca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80056c6:	2300      	movs	r3, #0
 80056c8:	e037      	b.n	800573a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d0:	461a      	mov	r2, r3
 80056d2:	2300      	movs	r3, #0
 80056d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056f8:	f043 0318 	orr.w	r3, r3, #24
 80056fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800570c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005710:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005712:	7afb      	ldrb	r3, [r7, #11]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d10f      	bne.n	8005738 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571e:	461a      	mov	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005732:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005736:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	371c      	adds	r7, #28
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	4f54300a 	.word	0x4f54300a

0800574c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005754:	2300      	movs	r3, #0
 8005756:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	3301      	adds	r3, #1
 800575c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	4a13      	ldr	r2, [pc, #76]	; (80057b0 <USB_CoreReset+0x64>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d901      	bls.n	800576a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e01b      	b.n	80057a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	2b00      	cmp	r3, #0
 8005770:	daf2      	bge.n	8005758 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005772:	2300      	movs	r3, #0
 8005774:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	f043 0201 	orr.w	r2, r3, #1
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	3301      	adds	r3, #1
 8005786:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4a09      	ldr	r2, [pc, #36]	; (80057b0 <USB_CoreReset+0x64>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d901      	bls.n	8005794 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e006      	b.n	80057a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	2b01      	cmp	r3, #1
 800579e:	d0f0      	beq.n	8005782 <USB_CoreReset+0x36>

  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	00030d40 	.word	0x00030d40

080057b4 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	460b      	mov	r3, r1
 80057be:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80057c0:	2010      	movs	r0, #16
 80057c2:	f002 f911 	bl	80079e8 <USBD_static_malloc>
 80057c6:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d109      	bne.n	80057e2 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	32b0      	adds	r2, #176	; 0xb0
 80057d8:	2100      	movs	r1, #0
 80057da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80057de:	2302      	movs	r3, #2
 80057e0:	e048      	b.n	8005874 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	32b0      	adds	r2, #176	; 0xb0
 80057ec:	68f9      	ldr	r1, [r7, #12]
 80057ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	32b0      	adds	r2, #176	; 0xb0
 80057fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	7c1b      	ldrb	r3, [r3, #16]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10d      	bne.n	800582a <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 800580e:	4b1b      	ldr	r3, [pc, #108]	; (800587c <USBD_HID_Init+0xc8>)
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	f003 020f 	and.w	r2, r3, #15
 8005816:	6879      	ldr	r1, [r7, #4]
 8005818:	4613      	mov	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4413      	add	r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	440b      	add	r3, r1
 8005822:	3326      	adds	r3, #38	; 0x26
 8005824:	2207      	movs	r2, #7
 8005826:	801a      	strh	r2, [r3, #0]
 8005828:	e00c      	b.n	8005844 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800582a:	4b14      	ldr	r3, [pc, #80]	; (800587c <USBD_HID_Init+0xc8>)
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	f003 020f 	and.w	r2, r3, #15
 8005832:	6879      	ldr	r1, [r7, #4]
 8005834:	4613      	mov	r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	440b      	add	r3, r1
 800583e:	3326      	adds	r3, #38	; 0x26
 8005840:	220a      	movs	r2, #10
 8005842:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005844:	4b0d      	ldr	r3, [pc, #52]	; (800587c <USBD_HID_Init+0xc8>)
 8005846:	7819      	ldrb	r1, [r3, #0]
 8005848:	2304      	movs	r3, #4
 800584a:	2203      	movs	r2, #3
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f001 ffba 	bl	80077c6 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8005852:	4b0a      	ldr	r3, [pc, #40]	; (800587c <USBD_HID_Init+0xc8>)
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	f003 020f 	and.w	r2, r3, #15
 800585a:	6879      	ldr	r1, [r7, #4]
 800585c:	4613      	mov	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	440b      	add	r3, r1
 8005866:	3324      	adds	r3, #36	; 0x24
 8005868:	2201      	movs	r2, #1
 800586a:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	200000a0 	.word	0x200000a0

08005880 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	460b      	mov	r3, r1
 800588a:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 800588c:	4b1f      	ldr	r3, [pc, #124]	; (800590c <USBD_HID_DeInit+0x8c>)
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	4619      	mov	r1, r3
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f001 ffbd 	bl	8007812 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8005898:	4b1c      	ldr	r3, [pc, #112]	; (800590c <USBD_HID_DeInit+0x8c>)
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	f003 020f 	and.w	r2, r3, #15
 80058a0:	6879      	ldr	r1, [r7, #4]
 80058a2:	4613      	mov	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	440b      	add	r3, r1
 80058ac:	3324      	adds	r3, #36	; 0x24
 80058ae:	2200      	movs	r2, #0
 80058b0:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 80058b2:	4b16      	ldr	r3, [pc, #88]	; (800590c <USBD_HID_DeInit+0x8c>)
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	f003 020f 	and.w	r2, r3, #15
 80058ba:	6879      	ldr	r1, [r7, #4]
 80058bc:	4613      	mov	r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4413      	add	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	440b      	add	r3, r1
 80058c6:	3326      	adds	r3, #38	; 0x26
 80058c8:	2200      	movs	r2, #0
 80058ca:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	32b0      	adds	r2, #176	; 0xb0
 80058d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d011      	beq.n	8005902 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	32b0      	adds	r2, #176	; 0xb0
 80058e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f002 f889 	bl	8007a04 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	32b0      	adds	r2, #176	; 0xb0
 80058fc:	2100      	movs	r1, #0
 80058fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3708      	adds	r7, #8
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	200000a0 	.word	0x200000a0

08005910 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	32b0      	adds	r2, #176	; 0xb0
 8005924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005928:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800592a:	2300      	movs	r3, #0
 800592c:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800592e:	2300      	movs	r3, #0
 8005930:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d101      	bne.n	800593c <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005938:	2303      	movs	r3, #3
 800593a:	e0e8      	b.n	8005b0e <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005944:	2b00      	cmp	r3, #0
 8005946:	d046      	beq.n	80059d6 <USBD_HID_Setup+0xc6>
 8005948:	2b20      	cmp	r3, #32
 800594a:	f040 80d8 	bne.w	8005afe <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	785b      	ldrb	r3, [r3, #1]
 8005952:	3b02      	subs	r3, #2
 8005954:	2b09      	cmp	r3, #9
 8005956:	d836      	bhi.n	80059c6 <USBD_HID_Setup+0xb6>
 8005958:	a201      	add	r2, pc, #4	; (adr r2, 8005960 <USBD_HID_Setup+0x50>)
 800595a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800595e:	bf00      	nop
 8005960:	080059b7 	.word	0x080059b7
 8005964:	08005997 	.word	0x08005997
 8005968:	080059c7 	.word	0x080059c7
 800596c:	080059c7 	.word	0x080059c7
 8005970:	080059c7 	.word	0x080059c7
 8005974:	080059c7 	.word	0x080059c7
 8005978:	080059c7 	.word	0x080059c7
 800597c:	080059c7 	.word	0x080059c7
 8005980:	080059a5 	.word	0x080059a5
 8005984:	08005989 	.word	0x08005989
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	885b      	ldrh	r3, [r3, #2]
 800598c:	b2db      	uxtb	r3, r3
 800598e:	461a      	mov	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	601a      	str	r2, [r3, #0]
          break;
 8005994:	e01e      	b.n	80059d4 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2201      	movs	r2, #1
 800599a:	4619      	mov	r1, r3
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f001 fbd5 	bl	800714c <USBD_CtlSendData>
          break;
 80059a2:	e017      	b.n	80059d4 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	885b      	ldrh	r3, [r3, #2]
 80059a8:	0a1b      	lsrs	r3, r3, #8
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	461a      	mov	r2, r3
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	605a      	str	r2, [r3, #4]
          break;
 80059b4:	e00e      	b.n	80059d4 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	3304      	adds	r3, #4
 80059ba:	2201      	movs	r2, #1
 80059bc:	4619      	mov	r1, r3
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f001 fbc4 	bl	800714c <USBD_CtlSendData>
          break;
 80059c4:	e006      	b.n	80059d4 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80059c6:	6839      	ldr	r1, [r7, #0]
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f001 fb4e 	bl	800706a <USBD_CtlError>
          ret = USBD_FAIL;
 80059ce:	2303      	movs	r3, #3
 80059d0:	75fb      	strb	r3, [r7, #23]
          break;
 80059d2:	bf00      	nop
      }
      break;
 80059d4:	e09a      	b.n	8005b0c <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	785b      	ldrb	r3, [r3, #1]
 80059da:	2b0b      	cmp	r3, #11
 80059dc:	f200 8086 	bhi.w	8005aec <USBD_HID_Setup+0x1dc>
 80059e0:	a201      	add	r2, pc, #4	; (adr r2, 80059e8 <USBD_HID_Setup+0xd8>)
 80059e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e6:	bf00      	nop
 80059e8:	08005a19 	.word	0x08005a19
 80059ec:	08005afb 	.word	0x08005afb
 80059f0:	08005aed 	.word	0x08005aed
 80059f4:	08005aed 	.word	0x08005aed
 80059f8:	08005aed 	.word	0x08005aed
 80059fc:	08005aed 	.word	0x08005aed
 8005a00:	08005a43 	.word	0x08005a43
 8005a04:	08005aed 	.word	0x08005aed
 8005a08:	08005aed 	.word	0x08005aed
 8005a0c:	08005aed 	.word	0x08005aed
 8005a10:	08005a9b 	.word	0x08005a9b
 8005a14:	08005ac5 	.word	0x08005ac5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	2b03      	cmp	r3, #3
 8005a22:	d107      	bne.n	8005a34 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005a24:	f107 030a 	add.w	r3, r7, #10
 8005a28:	2202      	movs	r2, #2
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f001 fb8d 	bl	800714c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a32:	e063      	b.n	8005afc <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005a34:	6839      	ldr	r1, [r7, #0]
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f001 fb17 	bl	800706a <USBD_CtlError>
            ret = USBD_FAIL;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	75fb      	strb	r3, [r7, #23]
          break;
 8005a40:	e05c      	b.n	8005afc <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	885b      	ldrh	r3, [r3, #2]
 8005a46:	0a1b      	lsrs	r3, r3, #8
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	2b22      	cmp	r3, #34	; 0x22
 8005a4c:	d108      	bne.n	8005a60 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	88db      	ldrh	r3, [r3, #6]
 8005a52:	2b20      	cmp	r3, #32
 8005a54:	bf28      	it	cs
 8005a56:	2320      	movcs	r3, #32
 8005a58:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8005a5a:	4b2f      	ldr	r3, [pc, #188]	; (8005b18 <USBD_HID_Setup+0x208>)
 8005a5c:	613b      	str	r3, [r7, #16]
 8005a5e:	e015      	b.n	8005a8c <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	885b      	ldrh	r3, [r3, #2]
 8005a64:	0a1b      	lsrs	r3, r3, #8
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	2b21      	cmp	r3, #33	; 0x21
 8005a6a:	d108      	bne.n	8005a7e <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8005a6c:	4b2b      	ldr	r3, [pc, #172]	; (8005b1c <USBD_HID_Setup+0x20c>)
 8005a6e:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	88db      	ldrh	r3, [r3, #6]
 8005a74:	2b09      	cmp	r3, #9
 8005a76:	bf28      	it	cs
 8005a78:	2309      	movcs	r3, #9
 8005a7a:	82bb      	strh	r3, [r7, #20]
 8005a7c:	e006      	b.n	8005a8c <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005a7e:	6839      	ldr	r1, [r7, #0]
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f001 faf2 	bl	800706a <USBD_CtlError>
            ret = USBD_FAIL;
 8005a86:	2303      	movs	r3, #3
 8005a88:	75fb      	strb	r3, [r7, #23]
            break;
 8005a8a:	e037      	b.n	8005afc <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005a8c:	8abb      	ldrh	r3, [r7, #20]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	6939      	ldr	r1, [r7, #16]
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f001 fb5a 	bl	800714c <USBD_CtlSendData>
          break;
 8005a98:	e030      	b.n	8005afc <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b03      	cmp	r3, #3
 8005aa4:	d107      	bne.n	8005ab6 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	3308      	adds	r3, #8
 8005aaa:	2201      	movs	r2, #1
 8005aac:	4619      	mov	r1, r3
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f001 fb4c 	bl	800714c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ab4:	e022      	b.n	8005afc <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005ab6:	6839      	ldr	r1, [r7, #0]
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f001 fad6 	bl	800706a <USBD_CtlError>
            ret = USBD_FAIL;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	75fb      	strb	r3, [r7, #23]
          break;
 8005ac2:	e01b      	b.n	8005afc <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b03      	cmp	r3, #3
 8005ace:	d106      	bne.n	8005ade <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	885b      	ldrh	r3, [r3, #2]
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005adc:	e00e      	b.n	8005afc <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005ade:	6839      	ldr	r1, [r7, #0]
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f001 fac2 	bl	800706a <USBD_CtlError>
            ret = USBD_FAIL;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	75fb      	strb	r3, [r7, #23]
          break;
 8005aea:	e007      	b.n	8005afc <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005aec:	6839      	ldr	r1, [r7, #0]
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f001 fabb 	bl	800706a <USBD_CtlError>
          ret = USBD_FAIL;
 8005af4:	2303      	movs	r3, #3
 8005af6:	75fb      	strb	r3, [r7, #23]
          break;
 8005af8:	e000      	b.n	8005afc <USBD_HID_Setup+0x1ec>
          break;
 8005afa:	bf00      	nop
      }
      break;
 8005afc:	e006      	b.n	8005b0c <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8005afe:	6839      	ldr	r1, [r7, #0]
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f001 fab2 	bl	800706a <USBD_CtlError>
      ret = USBD_FAIL;
 8005b06:	2303      	movs	r3, #3
 8005b08:	75fb      	strb	r3, [r7, #23]
      break;
 8005b0a:	bf00      	nop
  }

  return (uint8_t)ret;
 8005b0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3718      	adds	r7, #24
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	20000080 	.word	0x20000080
 8005b1c:	20000068 	.word	0x20000068

08005b20 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	32b0      	adds	r2, #176	; 0xb0
 8005b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b3c:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d101      	bne.n	8005b48 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e014      	b.n	8005b72 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b03      	cmp	r3, #3
 8005b52:	d10d      	bne.n	8005b70 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	7b1b      	ldrb	r3, [r3, #12]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d109      	bne.n	8005b70 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8005b62:	4b06      	ldr	r3, [pc, #24]	; (8005b7c <USBD_HID_SendReport+0x5c>)
 8005b64:	7819      	ldrb	r1, [r3, #0]
 8005b66:	88fb      	ldrh	r3, [r7, #6]
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f001 fef9 	bl	8007962 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3718      	adds	r7, #24
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	200000a0 	.word	0x200000a0

08005b80 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005b88:	2181      	movs	r1, #129	; 0x81
 8005b8a:	4809      	ldr	r0, [pc, #36]	; (8005bb0 <USBD_HID_GetFSCfgDesc+0x30>)
 8005b8c:	f000 fc35 	bl	80063fa <USBD_GetEpDesc>
 8005b90:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d002      	beq.n	8005b9e <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	220a      	movs	r2, #10
 8005b9c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2222      	movs	r2, #34	; 0x22
 8005ba2:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005ba4:	4b02      	ldr	r3, [pc, #8]	; (8005bb0 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	20000044 	.word	0x20000044

08005bb4 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005bbc:	2181      	movs	r1, #129	; 0x81
 8005bbe:	4809      	ldr	r0, [pc, #36]	; (8005be4 <USBD_HID_GetHSCfgDesc+0x30>)
 8005bc0:	f000 fc1b 	bl	80063fa <USBD_GetEpDesc>
 8005bc4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d002      	beq.n	8005bd2 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2207      	movs	r2, #7
 8005bd0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2222      	movs	r2, #34	; 0x22
 8005bd6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005bd8:	4b02      	ldr	r3, [pc, #8]	; (8005be4 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	20000044 	.word	0x20000044

08005be8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005bf0:	2181      	movs	r1, #129	; 0x81
 8005bf2:	4809      	ldr	r0, [pc, #36]	; (8005c18 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8005bf4:	f000 fc01 	bl	80063fa <USBD_GetEpDesc>
 8005bf8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d002      	beq.n	8005c06 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	220a      	movs	r2, #10
 8005c04:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2222      	movs	r2, #34	; 0x22
 8005c0a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005c0c:	4b02      	ldr	r3, [pc, #8]	; (8005c18 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	20000044 	.word	0x20000044

08005c1c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	460b      	mov	r3, r1
 8005c26:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	32b0      	adds	r2, #176	; 0xb0
 8005c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c36:	2200      	movs	r2, #0
 8005c38:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	220a      	movs	r2, #10
 8005c54:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005c56:	4b03      	ldr	r3, [pc, #12]	; (8005c64 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr
 8005c64:	20000074 	.word	0x20000074

08005c68 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	4613      	mov	r3, r2
 8005c74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d101      	bne.n	8005c80 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e01f      	b.n	8005cc0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	79fa      	ldrb	r2, [r7, #7]
 8005cb2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f001 fd1f 	bl	80076f8 <USBD_LL_Init>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3718      	adds	r7, #24
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d101      	bne.n	8005ce0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e025      	b.n	8005d2c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	32ae      	adds	r2, #174	; 0xae
 8005cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00f      	beq.n	8005d1c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	32ae      	adds	r2, #174	; 0xae
 8005d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0c:	f107 020e 	add.w	r2, r7, #14
 8005d10:	4610      	mov	r0, r2
 8005d12:	4798      	blx	r3
 8005d14:	4602      	mov	r2, r0
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005d22:	1c5a      	adds	r2, r3, #1
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f001 fd27 	bl	8007790 <USBD_LL_Start>
 8005d42:	4603      	mov	r3, r0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3708      	adds	r7, #8
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005d54:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	370c      	adds	r7, #12
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b084      	sub	sp, #16
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d009      	beq.n	8005d90 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	78fa      	ldrb	r2, [r7, #3]
 8005d86:	4611      	mov	r1, r2
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	4798      	blx	r3
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b084      	sub	sp, #16
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	460b      	mov	r3, r1
 8005da4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005da6:	2300      	movs	r3, #0
 8005da8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	78fa      	ldrb	r2, [r7, #3]
 8005db4:	4611      	mov	r1, r2
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	4798      	blx	r3
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d001      	beq.n	8005dc4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b084      	sub	sp, #16
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
 8005dd6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005dde:	6839      	ldr	r1, [r7, #0]
 8005de0:	4618      	mov	r0, r3
 8005de2:	f001 f908 	bl	8006ff6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005df4:	461a      	mov	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005e02:	f003 031f 	and.w	r3, r3, #31
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d01a      	beq.n	8005e40 <USBD_LL_SetupStage+0x72>
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d822      	bhi.n	8005e54 <USBD_LL_SetupStage+0x86>
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d002      	beq.n	8005e18 <USBD_LL_SetupStage+0x4a>
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d00a      	beq.n	8005e2c <USBD_LL_SetupStage+0x5e>
 8005e16:	e01d      	b.n	8005e54 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e1e:	4619      	mov	r1, r3
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 fb5f 	bl	80064e4 <USBD_StdDevReq>
 8005e26:	4603      	mov	r3, r0
 8005e28:	73fb      	strb	r3, [r7, #15]
      break;
 8005e2a:	e020      	b.n	8005e6e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e32:	4619      	mov	r1, r3
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 fbc7 	bl	80065c8 <USBD_StdItfReq>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	73fb      	strb	r3, [r7, #15]
      break;
 8005e3e:	e016      	b.n	8005e6e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e46:	4619      	mov	r1, r3
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 fc29 	bl	80066a0 <USBD_StdEPReq>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	73fb      	strb	r3, [r7, #15]
      break;
 8005e52:	e00c      	b.n	8005e6e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005e5a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	4619      	mov	r1, r3
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f001 fcf4 	bl	8007850 <USBD_LL_StallEP>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e6c:	bf00      	nop
  }

  return ret;
 8005e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	460b      	mov	r3, r1
 8005e82:	607a      	str	r2, [r7, #4]
 8005e84:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005e86:	2300      	movs	r3, #0
 8005e88:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005e8a:	7afb      	ldrb	r3, [r7, #11]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d16e      	bne.n	8005f6e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005e96:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e9e:	2b03      	cmp	r3, #3
 8005ea0:	f040 8098 	bne.w	8005fd4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	689a      	ldr	r2, [r3, #8]
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d913      	bls.n	8005ed8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	689a      	ldr	r2, [r3, #8]
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	1ad2      	subs	r2, r2, r3
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	68da      	ldr	r2, [r3, #12]
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	bf28      	it	cs
 8005eca:	4613      	movcs	r3, r2
 8005ecc:	461a      	mov	r2, r3
 8005ece:	6879      	ldr	r1, [r7, #4]
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f001 f967 	bl	80071a4 <USBD_CtlContinueRx>
 8005ed6:	e07d      	b.n	8005fd4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005ede:	f003 031f 	and.w	r3, r3, #31
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d014      	beq.n	8005f10 <USBD_LL_DataOutStage+0x98>
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d81d      	bhi.n	8005f26 <USBD_LL_DataOutStage+0xae>
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d002      	beq.n	8005ef4 <USBD_LL_DataOutStage+0x7c>
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d003      	beq.n	8005efa <USBD_LL_DataOutStage+0x82>
 8005ef2:	e018      	b.n	8005f26 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	75bb      	strb	r3, [r7, #22]
            break;
 8005ef8:	e018      	b.n	8005f2c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	4619      	mov	r1, r3
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f000 fa5e 	bl	80063c6 <USBD_CoreFindIF>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	75bb      	strb	r3, [r7, #22]
            break;
 8005f0e:	e00d      	b.n	8005f2c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	4619      	mov	r1, r3
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f000 fa60 	bl	80063e0 <USBD_CoreFindEP>
 8005f20:	4603      	mov	r3, r0
 8005f22:	75bb      	strb	r3, [r7, #22]
            break;
 8005f24:	e002      	b.n	8005f2c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005f26:	2300      	movs	r3, #0
 8005f28:	75bb      	strb	r3, [r7, #22]
            break;
 8005f2a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005f2c:	7dbb      	ldrb	r3, [r7, #22]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d119      	bne.n	8005f66 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b03      	cmp	r3, #3
 8005f3c:	d113      	bne.n	8005f66 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005f3e:	7dba      	ldrb	r2, [r7, #22]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	32ae      	adds	r2, #174	; 0xae
 8005f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00b      	beq.n	8005f66 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005f4e:	7dba      	ldrb	r2, [r7, #22]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005f56:	7dba      	ldrb	r2, [r7, #22]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	32ae      	adds	r2, #174	; 0xae
 8005f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f001 f92d 	bl	80071c6 <USBD_CtlSendStatus>
 8005f6c:	e032      	b.n	8005fd4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005f6e:	7afb      	ldrb	r3, [r7, #11]
 8005f70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	4619      	mov	r1, r3
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f000 fa31 	bl	80063e0 <USBD_CoreFindEP>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f82:	7dbb      	ldrb	r3, [r7, #22]
 8005f84:	2bff      	cmp	r3, #255	; 0xff
 8005f86:	d025      	beq.n	8005fd4 <USBD_LL_DataOutStage+0x15c>
 8005f88:	7dbb      	ldrb	r3, [r7, #22]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d122      	bne.n	8005fd4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b03      	cmp	r3, #3
 8005f98:	d117      	bne.n	8005fca <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005f9a:	7dba      	ldrb	r2, [r7, #22]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	32ae      	adds	r2, #174	; 0xae
 8005fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00f      	beq.n	8005fca <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005faa:	7dba      	ldrb	r2, [r7, #22]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005fb2:	7dba      	ldrb	r2, [r7, #22]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	32ae      	adds	r2, #174	; 0xae
 8005fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	7afa      	ldrb	r2, [r7, #11]
 8005fc0:	4611      	mov	r1, r2
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	4798      	blx	r3
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005fca:	7dfb      	ldrb	r3, [r7, #23]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d001      	beq.n	8005fd4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005fd0:	7dfb      	ldrb	r3, [r7, #23]
 8005fd2:	e000      	b.n	8005fd6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3718      	adds	r7, #24
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b086      	sub	sp, #24
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	60f8      	str	r0, [r7, #12]
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	607a      	str	r2, [r7, #4]
 8005fea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005fec:	7afb      	ldrb	r3, [r7, #11]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d16f      	bne.n	80060d2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	3314      	adds	r3, #20
 8005ff6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d15a      	bne.n	80060b8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	689a      	ldr	r2, [r3, #8]
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	429a      	cmp	r2, r3
 800600c:	d914      	bls.n	8006038 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	689a      	ldr	r2, [r3, #8]
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	1ad2      	subs	r2, r2, r3
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	461a      	mov	r2, r3
 8006022:	6879      	ldr	r1, [r7, #4]
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f001 f8ac 	bl	8007182 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800602a:	2300      	movs	r3, #0
 800602c:	2200      	movs	r2, #0
 800602e:	2100      	movs	r1, #0
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f001 fcb7 	bl	80079a4 <USBD_LL_PrepareReceive>
 8006036:	e03f      	b.n	80060b8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	68da      	ldr	r2, [r3, #12]
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	429a      	cmp	r2, r3
 8006042:	d11c      	bne.n	800607e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800604c:	429a      	cmp	r2, r3
 800604e:	d316      	bcc.n	800607e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	685a      	ldr	r2, [r3, #4]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800605a:	429a      	cmp	r2, r3
 800605c:	d20f      	bcs.n	800607e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800605e:	2200      	movs	r2, #0
 8006060:	2100      	movs	r1, #0
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f001 f88d 	bl	8007182 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006070:	2300      	movs	r3, #0
 8006072:	2200      	movs	r2, #0
 8006074:	2100      	movs	r1, #0
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f001 fc94 	bl	80079a4 <USBD_LL_PrepareReceive>
 800607c:	e01c      	b.n	80060b8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b03      	cmp	r3, #3
 8006088:	d10f      	bne.n	80060aa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d009      	beq.n	80060aa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80060aa:	2180      	movs	r1, #128	; 0x80
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f001 fbcf 	bl	8007850 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f001 f89a 	bl	80071ec <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d03a      	beq.n	8006138 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f7ff fe42 	bl	8005d4c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80060d0:	e032      	b.n	8006138 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80060d2:	7afb      	ldrb	r3, [r7, #11]
 80060d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	4619      	mov	r1, r3
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 f97f 	bl	80063e0 <USBD_CoreFindEP>
 80060e2:	4603      	mov	r3, r0
 80060e4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80060e6:	7dfb      	ldrb	r3, [r7, #23]
 80060e8:	2bff      	cmp	r3, #255	; 0xff
 80060ea:	d025      	beq.n	8006138 <USBD_LL_DataInStage+0x15a>
 80060ec:	7dfb      	ldrb	r3, [r7, #23]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d122      	bne.n	8006138 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b03      	cmp	r3, #3
 80060fc:	d11c      	bne.n	8006138 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80060fe:	7dfa      	ldrb	r2, [r7, #23]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	32ae      	adds	r2, #174	; 0xae
 8006104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d014      	beq.n	8006138 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800610e:	7dfa      	ldrb	r2, [r7, #23]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006116:	7dfa      	ldrb	r2, [r7, #23]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	32ae      	adds	r2, #174	; 0xae
 800611c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	7afa      	ldrb	r2, [r7, #11]
 8006124:	4611      	mov	r1, r2
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	4798      	blx	r3
 800612a:	4603      	mov	r3, r0
 800612c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800612e:	7dbb      	ldrb	r3, [r7, #22]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d001      	beq.n	8006138 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006134:	7dbb      	ldrb	r3, [r7, #22]
 8006136:	e000      	b.n	800613a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3718      	adds	r7, #24
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b084      	sub	sp, #16
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800614a:	2300      	movs	r3, #0
 800614c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800617a:	2b00      	cmp	r3, #0
 800617c:	d014      	beq.n	80061a8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00e      	beq.n	80061a8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	6852      	ldr	r2, [r2, #4]
 8006196:	b2d2      	uxtb	r2, r2
 8006198:	4611      	mov	r1, r2
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	4798      	blx	r3
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d001      	beq.n	80061a8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80061a4:	2303      	movs	r3, #3
 80061a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80061a8:	2340      	movs	r3, #64	; 0x40
 80061aa:	2200      	movs	r2, #0
 80061ac:	2100      	movs	r1, #0
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f001 fb09 	bl	80077c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2240      	movs	r2, #64	; 0x40
 80061c0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80061c4:	2340      	movs	r3, #64	; 0x40
 80061c6:	2200      	movs	r2, #0
 80061c8:	2180      	movs	r1, #128	; 0x80
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f001 fafb 	bl	80077c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2240      	movs	r2, #64	; 0x40
 80061da:	621a      	str	r2, [r3, #32]

  return ret;
 80061dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b083      	sub	sp, #12
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
 80061ee:	460b      	mov	r3, r1
 80061f0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	78fa      	ldrb	r2, [r7, #3]
 80061f6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	370c      	adds	r7, #12
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006206:	b480      	push	{r7}
 8006208:	b083      	sub	sp, #12
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006214:	b2da      	uxtb	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2204      	movs	r2, #4
 8006220:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006232:	b480      	push	{r7}
 8006234:	b083      	sub	sp, #12
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b04      	cmp	r3, #4
 8006244:	d106      	bne.n	8006254 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800624c:	b2da      	uxtb	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b082      	sub	sp, #8
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b03      	cmp	r3, #3
 8006274:	d110      	bne.n	8006298 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00b      	beq.n	8006298 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006286:	69db      	ldr	r3, [r3, #28]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d005      	beq.n	8006298 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006292:	69db      	ldr	r3, [r3, #28]
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3708      	adds	r7, #8
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b082      	sub	sp, #8
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
 80062aa:	460b      	mov	r3, r1
 80062ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	32ae      	adds	r2, #174	; 0xae
 80062b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d101      	bne.n	80062c4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e01c      	b.n	80062fe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b03      	cmp	r3, #3
 80062ce:	d115      	bne.n	80062fc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	32ae      	adds	r2, #174	; 0xae
 80062da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062de:	6a1b      	ldr	r3, [r3, #32]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00b      	beq.n	80062fc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	32ae      	adds	r2, #174	; 0xae
 80062ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062f2:	6a1b      	ldr	r3, [r3, #32]
 80062f4:	78fa      	ldrb	r2, [r7, #3]
 80062f6:	4611      	mov	r1, r2
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b082      	sub	sp, #8
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
 800630e:	460b      	mov	r3, r1
 8006310:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	32ae      	adds	r2, #174	; 0xae
 800631c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d101      	bne.n	8006328 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006324:	2303      	movs	r3, #3
 8006326:	e01c      	b.n	8006362 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800632e:	b2db      	uxtb	r3, r3
 8006330:	2b03      	cmp	r3, #3
 8006332:	d115      	bne.n	8006360 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	32ae      	adds	r2, #174	; 0xae
 800633e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00b      	beq.n	8006360 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	32ae      	adds	r2, #174	; 0xae
 8006352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006358:	78fa      	ldrb	r2, [r7, #3]
 800635a:	4611      	mov	r1, r2
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3708      	adds	r7, #8
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800636a:	b480      	push	{r7}
 800636c:	b083      	sub	sp, #12
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006388:	2300      	movs	r3, #0
 800638a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00e      	beq.n	80063bc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	6852      	ldr	r2, [r2, #4]
 80063aa:	b2d2      	uxtb	r2, r2
 80063ac:	4611      	mov	r1, r2
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	4798      	blx	r3
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d001      	beq.n	80063bc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80063b8:	2303      	movs	r3, #3
 80063ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80063bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b083      	sub	sp, #12
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
 80063ce:	460b      	mov	r3, r1
 80063d0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80063d2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	460b      	mov	r3, r1
 80063ea:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80063ec:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	370c      	adds	r7, #12
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b086      	sub	sp, #24
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
 8006402:	460b      	mov	r3, r1
 8006404:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800640e:	2300      	movs	r3, #0
 8006410:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	885b      	ldrh	r3, [r3, #2]
 8006416:	b29a      	uxth	r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	b29b      	uxth	r3, r3
 800641e:	429a      	cmp	r2, r3
 8006420:	d920      	bls.n	8006464 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	b29b      	uxth	r3, r3
 8006428:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800642a:	e013      	b.n	8006454 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800642c:	f107 030a 	add.w	r3, r7, #10
 8006430:	4619      	mov	r1, r3
 8006432:	6978      	ldr	r0, [r7, #20]
 8006434:	f000 f81b 	bl	800646e <USBD_GetNextDesc>
 8006438:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	785b      	ldrb	r3, [r3, #1]
 800643e:	2b05      	cmp	r3, #5
 8006440:	d108      	bne.n	8006454 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	789b      	ldrb	r3, [r3, #2]
 800644a:	78fa      	ldrb	r2, [r7, #3]
 800644c:	429a      	cmp	r2, r3
 800644e:	d008      	beq.n	8006462 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006450:	2300      	movs	r3, #0
 8006452:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	885b      	ldrh	r3, [r3, #2]
 8006458:	b29a      	uxth	r2, r3
 800645a:	897b      	ldrh	r3, [r7, #10]
 800645c:	429a      	cmp	r2, r3
 800645e:	d8e5      	bhi.n	800642c <USBD_GetEpDesc+0x32>
 8006460:	e000      	b.n	8006464 <USBD_GetEpDesc+0x6a>
          break;
 8006462:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006464:	693b      	ldr	r3, [r7, #16]
}
 8006466:	4618      	mov	r0, r3
 8006468:	3718      	adds	r7, #24
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800646e:	b480      	push	{r7}
 8006470:	b085      	sub	sp, #20
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
 8006476:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	881a      	ldrh	r2, [r3, #0]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	b29b      	uxth	r3, r3
 8006486:	4413      	add	r3, r2
 8006488:	b29a      	uxth	r2, r3
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	461a      	mov	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4413      	add	r3, r2
 8006498:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800649a:	68fb      	ldr	r3, [r7, #12]
}
 800649c:	4618      	mov	r0, r3
 800649e:	3714      	adds	r7, #20
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b087      	sub	sp, #28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	3301      	adds	r3, #1
 80064be:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80064c6:	8a3b      	ldrh	r3, [r7, #16]
 80064c8:	021b      	lsls	r3, r3, #8
 80064ca:	b21a      	sxth	r2, r3
 80064cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	b21b      	sxth	r3, r3
 80064d4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80064d6:	89fb      	ldrh	r3, [r7, #14]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	371c      	adds	r7, #28
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064ee:	2300      	movs	r3, #0
 80064f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064fa:	2b40      	cmp	r3, #64	; 0x40
 80064fc:	d005      	beq.n	800650a <USBD_StdDevReq+0x26>
 80064fe:	2b40      	cmp	r3, #64	; 0x40
 8006500:	d857      	bhi.n	80065b2 <USBD_StdDevReq+0xce>
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00f      	beq.n	8006526 <USBD_StdDevReq+0x42>
 8006506:	2b20      	cmp	r3, #32
 8006508:	d153      	bne.n	80065b2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	32ae      	adds	r2, #174	; 0xae
 8006514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	6839      	ldr	r1, [r7, #0]
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	4798      	blx	r3
 8006520:	4603      	mov	r3, r0
 8006522:	73fb      	strb	r3, [r7, #15]
      break;
 8006524:	e04a      	b.n	80065bc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	785b      	ldrb	r3, [r3, #1]
 800652a:	2b09      	cmp	r3, #9
 800652c:	d83b      	bhi.n	80065a6 <USBD_StdDevReq+0xc2>
 800652e:	a201      	add	r2, pc, #4	; (adr r2, 8006534 <USBD_StdDevReq+0x50>)
 8006530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006534:	08006589 	.word	0x08006589
 8006538:	0800659d 	.word	0x0800659d
 800653c:	080065a7 	.word	0x080065a7
 8006540:	08006593 	.word	0x08006593
 8006544:	080065a7 	.word	0x080065a7
 8006548:	08006567 	.word	0x08006567
 800654c:	0800655d 	.word	0x0800655d
 8006550:	080065a7 	.word	0x080065a7
 8006554:	0800657f 	.word	0x0800657f
 8006558:	08006571 	.word	0x08006571
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800655c:	6839      	ldr	r1, [r7, #0]
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 fa3c 	bl	80069dc <USBD_GetDescriptor>
          break;
 8006564:	e024      	b.n	80065b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006566:	6839      	ldr	r1, [r7, #0]
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 fba1 	bl	8006cb0 <USBD_SetAddress>
          break;
 800656e:	e01f      	b.n	80065b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006570:	6839      	ldr	r1, [r7, #0]
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fbe0 	bl	8006d38 <USBD_SetConfig>
 8006578:	4603      	mov	r3, r0
 800657a:	73fb      	strb	r3, [r7, #15]
          break;
 800657c:	e018      	b.n	80065b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800657e:	6839      	ldr	r1, [r7, #0]
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fc83 	bl	8006e8c <USBD_GetConfig>
          break;
 8006586:	e013      	b.n	80065b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006588:	6839      	ldr	r1, [r7, #0]
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 fcb4 	bl	8006ef8 <USBD_GetStatus>
          break;
 8006590:	e00e      	b.n	80065b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006592:	6839      	ldr	r1, [r7, #0]
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 fce3 	bl	8006f60 <USBD_SetFeature>
          break;
 800659a:	e009      	b.n	80065b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800659c:	6839      	ldr	r1, [r7, #0]
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 fd07 	bl	8006fb2 <USBD_ClrFeature>
          break;
 80065a4:	e004      	b.n	80065b0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80065a6:	6839      	ldr	r1, [r7, #0]
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 fd5e 	bl	800706a <USBD_CtlError>
          break;
 80065ae:	bf00      	nop
      }
      break;
 80065b0:	e004      	b.n	80065bc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80065b2:	6839      	ldr	r1, [r7, #0]
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 fd58 	bl	800706a <USBD_CtlError>
      break;
 80065ba:	bf00      	nop
  }

  return ret;
 80065bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop

080065c8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065d2:	2300      	movs	r3, #0
 80065d4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065de:	2b40      	cmp	r3, #64	; 0x40
 80065e0:	d005      	beq.n	80065ee <USBD_StdItfReq+0x26>
 80065e2:	2b40      	cmp	r3, #64	; 0x40
 80065e4:	d852      	bhi.n	800668c <USBD_StdItfReq+0xc4>
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d001      	beq.n	80065ee <USBD_StdItfReq+0x26>
 80065ea:	2b20      	cmp	r3, #32
 80065ec:	d14e      	bne.n	800668c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	3b01      	subs	r3, #1
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d840      	bhi.n	800667e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	889b      	ldrh	r3, [r3, #4]
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b01      	cmp	r3, #1
 8006604:	d836      	bhi.n	8006674 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	889b      	ldrh	r3, [r3, #4]
 800660a:	b2db      	uxtb	r3, r3
 800660c:	4619      	mov	r1, r3
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f7ff fed9 	bl	80063c6 <USBD_CoreFindIF>
 8006614:	4603      	mov	r3, r0
 8006616:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006618:	7bbb      	ldrb	r3, [r7, #14]
 800661a:	2bff      	cmp	r3, #255	; 0xff
 800661c:	d01d      	beq.n	800665a <USBD_StdItfReq+0x92>
 800661e:	7bbb      	ldrb	r3, [r7, #14]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d11a      	bne.n	800665a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006624:	7bba      	ldrb	r2, [r7, #14]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	32ae      	adds	r2, #174	; 0xae
 800662a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00f      	beq.n	8006654 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006634:	7bba      	ldrb	r2, [r7, #14]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800663c:	7bba      	ldrb	r2, [r7, #14]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	32ae      	adds	r2, #174	; 0xae
 8006642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	6839      	ldr	r1, [r7, #0]
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	4798      	blx	r3
 800664e:	4603      	mov	r3, r0
 8006650:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006652:	e004      	b.n	800665e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006654:	2303      	movs	r3, #3
 8006656:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006658:	e001      	b.n	800665e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800665a:	2303      	movs	r3, #3
 800665c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	88db      	ldrh	r3, [r3, #6]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d110      	bne.n	8006688 <USBD_StdItfReq+0xc0>
 8006666:	7bfb      	ldrb	r3, [r7, #15]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10d      	bne.n	8006688 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fdaa 	bl	80071c6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006672:	e009      	b.n	8006688 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006674:	6839      	ldr	r1, [r7, #0]
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 fcf7 	bl	800706a <USBD_CtlError>
          break;
 800667c:	e004      	b.n	8006688 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800667e:	6839      	ldr	r1, [r7, #0]
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 fcf2 	bl	800706a <USBD_CtlError>
          break;
 8006686:	e000      	b.n	800668a <USBD_StdItfReq+0xc2>
          break;
 8006688:	bf00      	nop
      }
      break;
 800668a:	e004      	b.n	8006696 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800668c:	6839      	ldr	r1, [r7, #0]
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 fceb 	bl	800706a <USBD_CtlError>
      break;
 8006694:	bf00      	nop
  }

  return ret;
 8006696:	7bfb      	ldrb	r3, [r7, #15]
}
 8006698:	4618      	mov	r0, r3
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	889b      	ldrh	r3, [r3, #4]
 80066b2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066bc:	2b40      	cmp	r3, #64	; 0x40
 80066be:	d007      	beq.n	80066d0 <USBD_StdEPReq+0x30>
 80066c0:	2b40      	cmp	r3, #64	; 0x40
 80066c2:	f200 817f 	bhi.w	80069c4 <USBD_StdEPReq+0x324>
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d02a      	beq.n	8006720 <USBD_StdEPReq+0x80>
 80066ca:	2b20      	cmp	r3, #32
 80066cc:	f040 817a 	bne.w	80069c4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80066d0:	7bbb      	ldrb	r3, [r7, #14]
 80066d2:	4619      	mov	r1, r3
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f7ff fe83 	bl	80063e0 <USBD_CoreFindEP>
 80066da:	4603      	mov	r3, r0
 80066dc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80066de:	7b7b      	ldrb	r3, [r7, #13]
 80066e0:	2bff      	cmp	r3, #255	; 0xff
 80066e2:	f000 8174 	beq.w	80069ce <USBD_StdEPReq+0x32e>
 80066e6:	7b7b      	ldrb	r3, [r7, #13]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f040 8170 	bne.w	80069ce <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80066ee:	7b7a      	ldrb	r2, [r7, #13]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80066f6:	7b7a      	ldrb	r2, [r7, #13]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	32ae      	adds	r2, #174	; 0xae
 80066fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	2b00      	cmp	r3, #0
 8006704:	f000 8163 	beq.w	80069ce <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006708:	7b7a      	ldrb	r2, [r7, #13]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	32ae      	adds	r2, #174	; 0xae
 800670e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	6839      	ldr	r1, [r7, #0]
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	4798      	blx	r3
 800671a:	4603      	mov	r3, r0
 800671c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800671e:	e156      	b.n	80069ce <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	785b      	ldrb	r3, [r3, #1]
 8006724:	2b03      	cmp	r3, #3
 8006726:	d008      	beq.n	800673a <USBD_StdEPReq+0x9a>
 8006728:	2b03      	cmp	r3, #3
 800672a:	f300 8145 	bgt.w	80069b8 <USBD_StdEPReq+0x318>
 800672e:	2b00      	cmp	r3, #0
 8006730:	f000 809b 	beq.w	800686a <USBD_StdEPReq+0x1ca>
 8006734:	2b01      	cmp	r3, #1
 8006736:	d03c      	beq.n	80067b2 <USBD_StdEPReq+0x112>
 8006738:	e13e      	b.n	80069b8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b02      	cmp	r3, #2
 8006744:	d002      	beq.n	800674c <USBD_StdEPReq+0xac>
 8006746:	2b03      	cmp	r3, #3
 8006748:	d016      	beq.n	8006778 <USBD_StdEPReq+0xd8>
 800674a:	e02c      	b.n	80067a6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800674c:	7bbb      	ldrb	r3, [r7, #14]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00d      	beq.n	800676e <USBD_StdEPReq+0xce>
 8006752:	7bbb      	ldrb	r3, [r7, #14]
 8006754:	2b80      	cmp	r3, #128	; 0x80
 8006756:	d00a      	beq.n	800676e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006758:	7bbb      	ldrb	r3, [r7, #14]
 800675a:	4619      	mov	r1, r3
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f001 f877 	bl	8007850 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006762:	2180      	movs	r1, #128	; 0x80
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f001 f873 	bl	8007850 <USBD_LL_StallEP>
 800676a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800676c:	e020      	b.n	80067b0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800676e:	6839      	ldr	r1, [r7, #0]
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 fc7a 	bl	800706a <USBD_CtlError>
              break;
 8006776:	e01b      	b.n	80067b0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	885b      	ldrh	r3, [r3, #2]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10e      	bne.n	800679e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006780:	7bbb      	ldrb	r3, [r7, #14]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00b      	beq.n	800679e <USBD_StdEPReq+0xfe>
 8006786:	7bbb      	ldrb	r3, [r7, #14]
 8006788:	2b80      	cmp	r3, #128	; 0x80
 800678a:	d008      	beq.n	800679e <USBD_StdEPReq+0xfe>
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	88db      	ldrh	r3, [r3, #6]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d104      	bne.n	800679e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006794:	7bbb      	ldrb	r3, [r7, #14]
 8006796:	4619      	mov	r1, r3
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f001 f859 	bl	8007850 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 fd11 	bl	80071c6 <USBD_CtlSendStatus>

              break;
 80067a4:	e004      	b.n	80067b0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80067a6:	6839      	ldr	r1, [r7, #0]
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 fc5e 	bl	800706a <USBD_CtlError>
              break;
 80067ae:	bf00      	nop
          }
          break;
 80067b0:	e107      	b.n	80069c2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d002      	beq.n	80067c4 <USBD_StdEPReq+0x124>
 80067be:	2b03      	cmp	r3, #3
 80067c0:	d016      	beq.n	80067f0 <USBD_StdEPReq+0x150>
 80067c2:	e04b      	b.n	800685c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067c4:	7bbb      	ldrb	r3, [r7, #14]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00d      	beq.n	80067e6 <USBD_StdEPReq+0x146>
 80067ca:	7bbb      	ldrb	r3, [r7, #14]
 80067cc:	2b80      	cmp	r3, #128	; 0x80
 80067ce:	d00a      	beq.n	80067e6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80067d0:	7bbb      	ldrb	r3, [r7, #14]
 80067d2:	4619      	mov	r1, r3
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f001 f83b 	bl	8007850 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80067da:	2180      	movs	r1, #128	; 0x80
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f001 f837 	bl	8007850 <USBD_LL_StallEP>
 80067e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80067e4:	e040      	b.n	8006868 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80067e6:	6839      	ldr	r1, [r7, #0]
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 fc3e 	bl	800706a <USBD_CtlError>
              break;
 80067ee:	e03b      	b.n	8006868 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	885b      	ldrh	r3, [r3, #2]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d136      	bne.n	8006866 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80067f8:	7bbb      	ldrb	r3, [r7, #14]
 80067fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d004      	beq.n	800680c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006802:	7bbb      	ldrb	r3, [r7, #14]
 8006804:	4619      	mov	r1, r3
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f001 f841 	bl	800788e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 fcda 	bl	80071c6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006812:	7bbb      	ldrb	r3, [r7, #14]
 8006814:	4619      	mov	r1, r3
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f7ff fde2 	bl	80063e0 <USBD_CoreFindEP>
 800681c:	4603      	mov	r3, r0
 800681e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006820:	7b7b      	ldrb	r3, [r7, #13]
 8006822:	2bff      	cmp	r3, #255	; 0xff
 8006824:	d01f      	beq.n	8006866 <USBD_StdEPReq+0x1c6>
 8006826:	7b7b      	ldrb	r3, [r7, #13]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d11c      	bne.n	8006866 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800682c:	7b7a      	ldrb	r2, [r7, #13]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006834:	7b7a      	ldrb	r2, [r7, #13]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	32ae      	adds	r2, #174	; 0xae
 800683a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d010      	beq.n	8006866 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006844:	7b7a      	ldrb	r2, [r7, #13]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	32ae      	adds	r2, #174	; 0xae
 800684a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	6839      	ldr	r1, [r7, #0]
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	4798      	blx	r3
 8006856:	4603      	mov	r3, r0
 8006858:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800685a:	e004      	b.n	8006866 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800685c:	6839      	ldr	r1, [r7, #0]
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 fc03 	bl	800706a <USBD_CtlError>
              break;
 8006864:	e000      	b.n	8006868 <USBD_StdEPReq+0x1c8>
              break;
 8006866:	bf00      	nop
          }
          break;
 8006868:	e0ab      	b.n	80069c2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b02      	cmp	r3, #2
 8006874:	d002      	beq.n	800687c <USBD_StdEPReq+0x1dc>
 8006876:	2b03      	cmp	r3, #3
 8006878:	d032      	beq.n	80068e0 <USBD_StdEPReq+0x240>
 800687a:	e097      	b.n	80069ac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800687c:	7bbb      	ldrb	r3, [r7, #14]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d007      	beq.n	8006892 <USBD_StdEPReq+0x1f2>
 8006882:	7bbb      	ldrb	r3, [r7, #14]
 8006884:	2b80      	cmp	r3, #128	; 0x80
 8006886:	d004      	beq.n	8006892 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006888:	6839      	ldr	r1, [r7, #0]
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 fbed 	bl	800706a <USBD_CtlError>
                break;
 8006890:	e091      	b.n	80069b6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006892:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006896:	2b00      	cmp	r3, #0
 8006898:	da0b      	bge.n	80068b2 <USBD_StdEPReq+0x212>
 800689a:	7bbb      	ldrb	r3, [r7, #14]
 800689c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068a0:	4613      	mov	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	3310      	adds	r3, #16
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	4413      	add	r3, r2
 80068ae:	3304      	adds	r3, #4
 80068b0:	e00b      	b.n	80068ca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80068b2:	7bbb      	ldrb	r3, [r7, #14]
 80068b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068b8:	4613      	mov	r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4413      	add	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	4413      	add	r3, r2
 80068c8:	3304      	adds	r3, #4
 80068ca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	2200      	movs	r2, #0
 80068d0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	2202      	movs	r2, #2
 80068d6:	4619      	mov	r1, r3
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 fc37 	bl	800714c <USBD_CtlSendData>
              break;
 80068de:	e06a      	b.n	80069b6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80068e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	da11      	bge.n	800690c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80068e8:	7bbb      	ldrb	r3, [r7, #14]
 80068ea:	f003 020f 	and.w	r2, r3, #15
 80068ee:	6879      	ldr	r1, [r7, #4]
 80068f0:	4613      	mov	r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4413      	add	r3, r2
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	440b      	add	r3, r1
 80068fa:	3324      	adds	r3, #36	; 0x24
 80068fc:	881b      	ldrh	r3, [r3, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d117      	bne.n	8006932 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006902:	6839      	ldr	r1, [r7, #0]
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 fbb0 	bl	800706a <USBD_CtlError>
                  break;
 800690a:	e054      	b.n	80069b6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800690c:	7bbb      	ldrb	r3, [r7, #14]
 800690e:	f003 020f 	and.w	r2, r3, #15
 8006912:	6879      	ldr	r1, [r7, #4]
 8006914:	4613      	mov	r3, r2
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	4413      	add	r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	440b      	add	r3, r1
 800691e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006922:	881b      	ldrh	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d104      	bne.n	8006932 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006928:	6839      	ldr	r1, [r7, #0]
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 fb9d 	bl	800706a <USBD_CtlError>
                  break;
 8006930:	e041      	b.n	80069b6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006932:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006936:	2b00      	cmp	r3, #0
 8006938:	da0b      	bge.n	8006952 <USBD_StdEPReq+0x2b2>
 800693a:	7bbb      	ldrb	r3, [r7, #14]
 800693c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006940:	4613      	mov	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	3310      	adds	r3, #16
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	4413      	add	r3, r2
 800694e:	3304      	adds	r3, #4
 8006950:	e00b      	b.n	800696a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006952:	7bbb      	ldrb	r3, [r7, #14]
 8006954:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006958:	4613      	mov	r3, r2
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	4413      	add	r3, r2
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	4413      	add	r3, r2
 8006968:	3304      	adds	r3, #4
 800696a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800696c:	7bbb      	ldrb	r3, [r7, #14]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d002      	beq.n	8006978 <USBD_StdEPReq+0x2d8>
 8006972:	7bbb      	ldrb	r3, [r7, #14]
 8006974:	2b80      	cmp	r3, #128	; 0x80
 8006976:	d103      	bne.n	8006980 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	2200      	movs	r2, #0
 800697c:	601a      	str	r2, [r3, #0]
 800697e:	e00e      	b.n	800699e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006980:	7bbb      	ldrb	r3, [r7, #14]
 8006982:	4619      	mov	r1, r3
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 ffa1 	bl	80078cc <USBD_LL_IsStallEP>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d003      	beq.n	8006998 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	2201      	movs	r2, #1
 8006994:	601a      	str	r2, [r3, #0]
 8006996:	e002      	b.n	800699e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	2200      	movs	r2, #0
 800699c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	2202      	movs	r2, #2
 80069a2:	4619      	mov	r1, r3
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fbd1 	bl	800714c <USBD_CtlSendData>
              break;
 80069aa:	e004      	b.n	80069b6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80069ac:	6839      	ldr	r1, [r7, #0]
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fb5b 	bl	800706a <USBD_CtlError>
              break;
 80069b4:	bf00      	nop
          }
          break;
 80069b6:	e004      	b.n	80069c2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80069b8:	6839      	ldr	r1, [r7, #0]
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fb55 	bl	800706a <USBD_CtlError>
          break;
 80069c0:	bf00      	nop
      }
      break;
 80069c2:	e005      	b.n	80069d0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80069c4:	6839      	ldr	r1, [r7, #0]
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 fb4f 	bl	800706a <USBD_CtlError>
      break;
 80069cc:	e000      	b.n	80069d0 <USBD_StdEPReq+0x330>
      break;
 80069ce:	bf00      	nop
  }

  return ret;
 80069d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
	...

080069dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80069e6:	2300      	movs	r3, #0
 80069e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80069ea:	2300      	movs	r3, #0
 80069ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80069ee:	2300      	movs	r3, #0
 80069f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	885b      	ldrh	r3, [r3, #2]
 80069f6:	0a1b      	lsrs	r3, r3, #8
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	3b01      	subs	r3, #1
 80069fc:	2b06      	cmp	r3, #6
 80069fe:	f200 8128 	bhi.w	8006c52 <USBD_GetDescriptor+0x276>
 8006a02:	a201      	add	r2, pc, #4	; (adr r2, 8006a08 <USBD_GetDescriptor+0x2c>)
 8006a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a08:	08006a25 	.word	0x08006a25
 8006a0c:	08006a3d 	.word	0x08006a3d
 8006a10:	08006a7d 	.word	0x08006a7d
 8006a14:	08006c53 	.word	0x08006c53
 8006a18:	08006c53 	.word	0x08006c53
 8006a1c:	08006bf3 	.word	0x08006bf3
 8006a20:	08006c1f 	.word	0x08006c1f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	7c12      	ldrb	r2, [r2, #16]
 8006a30:	f107 0108 	add.w	r1, r7, #8
 8006a34:	4610      	mov	r0, r2
 8006a36:	4798      	blx	r3
 8006a38:	60f8      	str	r0, [r7, #12]
      break;
 8006a3a:	e112      	b.n	8006c62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	7c1b      	ldrb	r3, [r3, #16]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d10d      	bne.n	8006a60 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4c:	f107 0208 	add.w	r2, r7, #8
 8006a50:	4610      	mov	r0, r2
 8006a52:	4798      	blx	r3
 8006a54:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	2202      	movs	r2, #2
 8006a5c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006a5e:	e100      	b.n	8006c62 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a68:	f107 0208 	add.w	r2, r7, #8
 8006a6c:	4610      	mov	r0, r2
 8006a6e:	4798      	blx	r3
 8006a70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	3301      	adds	r3, #1
 8006a76:	2202      	movs	r2, #2
 8006a78:	701a      	strb	r2, [r3, #0]
      break;
 8006a7a:	e0f2      	b.n	8006c62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	885b      	ldrh	r3, [r3, #2]
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b05      	cmp	r3, #5
 8006a84:	f200 80ac 	bhi.w	8006be0 <USBD_GetDescriptor+0x204>
 8006a88:	a201      	add	r2, pc, #4	; (adr r2, 8006a90 <USBD_GetDescriptor+0xb4>)
 8006a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8e:	bf00      	nop
 8006a90:	08006aa9 	.word	0x08006aa9
 8006a94:	08006add 	.word	0x08006add
 8006a98:	08006b11 	.word	0x08006b11
 8006a9c:	08006b45 	.word	0x08006b45
 8006aa0:	08006b79 	.word	0x08006b79
 8006aa4:	08006bad 	.word	0x08006bad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00b      	beq.n	8006acc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	7c12      	ldrb	r2, [r2, #16]
 8006ac0:	f107 0108 	add.w	r1, r7, #8
 8006ac4:	4610      	mov	r0, r2
 8006ac6:	4798      	blx	r3
 8006ac8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006aca:	e091      	b.n	8006bf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006acc:	6839      	ldr	r1, [r7, #0]
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 facb 	bl	800706a <USBD_CtlError>
            err++;
 8006ad4:	7afb      	ldrb	r3, [r7, #11]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	72fb      	strb	r3, [r7, #11]
          break;
 8006ada:	e089      	b.n	8006bf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00b      	beq.n	8006b00 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	7c12      	ldrb	r2, [r2, #16]
 8006af4:	f107 0108 	add.w	r1, r7, #8
 8006af8:	4610      	mov	r0, r2
 8006afa:	4798      	blx	r3
 8006afc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006afe:	e077      	b.n	8006bf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b00:	6839      	ldr	r1, [r7, #0]
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 fab1 	bl	800706a <USBD_CtlError>
            err++;
 8006b08:	7afb      	ldrb	r3, [r7, #11]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	72fb      	strb	r3, [r7, #11]
          break;
 8006b0e:	e06f      	b.n	8006bf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00b      	beq.n	8006b34 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	7c12      	ldrb	r2, [r2, #16]
 8006b28:	f107 0108 	add.w	r1, r7, #8
 8006b2c:	4610      	mov	r0, r2
 8006b2e:	4798      	blx	r3
 8006b30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b32:	e05d      	b.n	8006bf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b34:	6839      	ldr	r1, [r7, #0]
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 fa97 	bl	800706a <USBD_CtlError>
            err++;
 8006b3c:	7afb      	ldrb	r3, [r7, #11]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	72fb      	strb	r3, [r7, #11]
          break;
 8006b42:	e055      	b.n	8006bf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00b      	beq.n	8006b68 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	7c12      	ldrb	r2, [r2, #16]
 8006b5c:	f107 0108 	add.w	r1, r7, #8
 8006b60:	4610      	mov	r0, r2
 8006b62:	4798      	blx	r3
 8006b64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b66:	e043      	b.n	8006bf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b68:	6839      	ldr	r1, [r7, #0]
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 fa7d 	bl	800706a <USBD_CtlError>
            err++;
 8006b70:	7afb      	ldrb	r3, [r7, #11]
 8006b72:	3301      	adds	r3, #1
 8006b74:	72fb      	strb	r3, [r7, #11]
          break;
 8006b76:	e03b      	b.n	8006bf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b7e:	695b      	ldr	r3, [r3, #20]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00b      	beq.n	8006b9c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b8a:	695b      	ldr	r3, [r3, #20]
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	7c12      	ldrb	r2, [r2, #16]
 8006b90:	f107 0108 	add.w	r1, r7, #8
 8006b94:	4610      	mov	r0, r2
 8006b96:	4798      	blx	r3
 8006b98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b9a:	e029      	b.n	8006bf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b9c:	6839      	ldr	r1, [r7, #0]
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fa63 	bl	800706a <USBD_CtlError>
            err++;
 8006ba4:	7afb      	ldrb	r3, [r7, #11]
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	72fb      	strb	r3, [r7, #11]
          break;
 8006baa:	e021      	b.n	8006bf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00b      	beq.n	8006bd0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	7c12      	ldrb	r2, [r2, #16]
 8006bc4:	f107 0108 	add.w	r1, r7, #8
 8006bc8:	4610      	mov	r0, r2
 8006bca:	4798      	blx	r3
 8006bcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bce:	e00f      	b.n	8006bf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bd0:	6839      	ldr	r1, [r7, #0]
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 fa49 	bl	800706a <USBD_CtlError>
            err++;
 8006bd8:	7afb      	ldrb	r3, [r7, #11]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	72fb      	strb	r3, [r7, #11]
          break;
 8006bde:	e007      	b.n	8006bf0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006be0:	6839      	ldr	r1, [r7, #0]
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 fa41 	bl	800706a <USBD_CtlError>
          err++;
 8006be8:	7afb      	ldrb	r3, [r7, #11]
 8006bea:	3301      	adds	r3, #1
 8006bec:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006bee:	bf00      	nop
      }
      break;
 8006bf0:	e037      	b.n	8006c62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	7c1b      	ldrb	r3, [r3, #16]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d109      	bne.n	8006c0e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c02:	f107 0208 	add.w	r2, r7, #8
 8006c06:	4610      	mov	r0, r2
 8006c08:	4798      	blx	r3
 8006c0a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c0c:	e029      	b.n	8006c62 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006c0e:	6839      	ldr	r1, [r7, #0]
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fa2a 	bl	800706a <USBD_CtlError>
        err++;
 8006c16:	7afb      	ldrb	r3, [r7, #11]
 8006c18:	3301      	adds	r3, #1
 8006c1a:	72fb      	strb	r3, [r7, #11]
      break;
 8006c1c:	e021      	b.n	8006c62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	7c1b      	ldrb	r3, [r3, #16]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10d      	bne.n	8006c42 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c2e:	f107 0208 	add.w	r2, r7, #8
 8006c32:	4610      	mov	r0, r2
 8006c34:	4798      	blx	r3
 8006c36:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	2207      	movs	r2, #7
 8006c3e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c40:	e00f      	b.n	8006c62 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006c42:	6839      	ldr	r1, [r7, #0]
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 fa10 	bl	800706a <USBD_CtlError>
        err++;
 8006c4a:	7afb      	ldrb	r3, [r7, #11]
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	72fb      	strb	r3, [r7, #11]
      break;
 8006c50:	e007      	b.n	8006c62 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006c52:	6839      	ldr	r1, [r7, #0]
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 fa08 	bl	800706a <USBD_CtlError>
      err++;
 8006c5a:	7afb      	ldrb	r3, [r7, #11]
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	72fb      	strb	r3, [r7, #11]
      break;
 8006c60:	bf00      	nop
  }

  if (err != 0U)
 8006c62:	7afb      	ldrb	r3, [r7, #11]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d11e      	bne.n	8006ca6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	88db      	ldrh	r3, [r3, #6]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d016      	beq.n	8006c9e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006c70:	893b      	ldrh	r3, [r7, #8]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00e      	beq.n	8006c94 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	88da      	ldrh	r2, [r3, #6]
 8006c7a:	893b      	ldrh	r3, [r7, #8]
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	bf28      	it	cs
 8006c80:	4613      	movcs	r3, r2
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006c86:	893b      	ldrh	r3, [r7, #8]
 8006c88:	461a      	mov	r2, r3
 8006c8a:	68f9      	ldr	r1, [r7, #12]
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fa5d 	bl	800714c <USBD_CtlSendData>
 8006c92:	e009      	b.n	8006ca8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006c94:	6839      	ldr	r1, [r7, #0]
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f9e7 	bl	800706a <USBD_CtlError>
 8006c9c:	e004      	b.n	8006ca8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 fa91 	bl	80071c6 <USBD_CtlSendStatus>
 8006ca4:	e000      	b.n	8006ca8 <USBD_GetDescriptor+0x2cc>
    return;
 8006ca6:	bf00      	nop
  }
}
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop

08006cb0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	889b      	ldrh	r3, [r3, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d131      	bne.n	8006d26 <USBD_SetAddress+0x76>
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	88db      	ldrh	r3, [r3, #6]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d12d      	bne.n	8006d26 <USBD_SetAddress+0x76>
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	885b      	ldrh	r3, [r3, #2]
 8006cce:	2b7f      	cmp	r3, #127	; 0x7f
 8006cd0:	d829      	bhi.n	8006d26 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	885b      	ldrh	r3, [r3, #2]
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cdc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b03      	cmp	r3, #3
 8006ce8:	d104      	bne.n	8006cf4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006cea:	6839      	ldr	r1, [r7, #0]
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 f9bc 	bl	800706a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cf2:	e01d      	b.n	8006d30 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	7bfa      	ldrb	r2, [r7, #15]
 8006cf8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006cfc:	7bfb      	ldrb	r3, [r7, #15]
 8006cfe:	4619      	mov	r1, r3
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 fe0f 	bl	8007924 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 fa5d 	bl	80071c6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006d0c:	7bfb      	ldrb	r3, [r7, #15]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d004      	beq.n	8006d1c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2202      	movs	r2, #2
 8006d16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d1a:	e009      	b.n	8006d30 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d24:	e004      	b.n	8006d30 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006d26:	6839      	ldr	r1, [r7, #0]
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 f99e 	bl	800706a <USBD_CtlError>
  }
}
 8006d2e:	bf00      	nop
 8006d30:	bf00      	nop
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d42:	2300      	movs	r3, #0
 8006d44:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	885b      	ldrh	r3, [r3, #2]
 8006d4a:	b2da      	uxtb	r2, r3
 8006d4c:	4b4e      	ldr	r3, [pc, #312]	; (8006e88 <USBD_SetConfig+0x150>)
 8006d4e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006d50:	4b4d      	ldr	r3, [pc, #308]	; (8006e88 <USBD_SetConfig+0x150>)
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d905      	bls.n	8006d64 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006d58:	6839      	ldr	r1, [r7, #0]
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f985 	bl	800706a <USBD_CtlError>
    return USBD_FAIL;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e08c      	b.n	8006e7e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d002      	beq.n	8006d76 <USBD_SetConfig+0x3e>
 8006d70:	2b03      	cmp	r3, #3
 8006d72:	d029      	beq.n	8006dc8 <USBD_SetConfig+0x90>
 8006d74:	e075      	b.n	8006e62 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006d76:	4b44      	ldr	r3, [pc, #272]	; (8006e88 <USBD_SetConfig+0x150>)
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d020      	beq.n	8006dc0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006d7e:	4b42      	ldr	r3, [pc, #264]	; (8006e88 <USBD_SetConfig+0x150>)
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	461a      	mov	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d88:	4b3f      	ldr	r3, [pc, #252]	; (8006e88 <USBD_SetConfig+0x150>)
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f7fe ffe7 	bl	8005d62 <USBD_SetClassConfig>
 8006d94:	4603      	mov	r3, r0
 8006d96:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006d98:	7bfb      	ldrb	r3, [r7, #15]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d008      	beq.n	8006db0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006d9e:	6839      	ldr	r1, [r7, #0]
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 f962 	bl	800706a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2202      	movs	r2, #2
 8006daa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006dae:	e065      	b.n	8006e7c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 fa08 	bl	80071c6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2203      	movs	r2, #3
 8006dba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006dbe:	e05d      	b.n	8006e7c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 fa00 	bl	80071c6 <USBD_CtlSendStatus>
      break;
 8006dc6:	e059      	b.n	8006e7c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006dc8:	4b2f      	ldr	r3, [pc, #188]	; (8006e88 <USBD_SetConfig+0x150>)
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d112      	bne.n	8006df6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006dd8:	4b2b      	ldr	r3, [pc, #172]	; (8006e88 <USBD_SetConfig+0x150>)
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	461a      	mov	r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006de2:	4b29      	ldr	r3, [pc, #164]	; (8006e88 <USBD_SetConfig+0x150>)
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	4619      	mov	r1, r3
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f7fe ffd6 	bl	8005d9a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f9e9 	bl	80071c6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006df4:	e042      	b.n	8006e7c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006df6:	4b24      	ldr	r3, [pc, #144]	; (8006e88 <USBD_SetConfig+0x150>)
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d02a      	beq.n	8006e5a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f7fe ffc4 	bl	8005d9a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006e12:	4b1d      	ldr	r3, [pc, #116]	; (8006e88 <USBD_SetConfig+0x150>)
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	461a      	mov	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e1c:	4b1a      	ldr	r3, [pc, #104]	; (8006e88 <USBD_SetConfig+0x150>)
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	4619      	mov	r1, r3
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f7fe ff9d 	bl	8005d62 <USBD_SetClassConfig>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006e2c:	7bfb      	ldrb	r3, [r7, #15]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00f      	beq.n	8006e52 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006e32:	6839      	ldr	r1, [r7, #0]
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 f918 	bl	800706a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	4619      	mov	r1, r3
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f7fe ffa9 	bl	8005d9a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006e50:	e014      	b.n	8006e7c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f9b7 	bl	80071c6 <USBD_CtlSendStatus>
      break;
 8006e58:	e010      	b.n	8006e7c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f9b3 	bl	80071c6 <USBD_CtlSendStatus>
      break;
 8006e60:	e00c      	b.n	8006e7c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006e62:	6839      	ldr	r1, [r7, #0]
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 f900 	bl	800706a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006e6a:	4b07      	ldr	r3, [pc, #28]	; (8006e88 <USBD_SetConfig+0x150>)
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	4619      	mov	r1, r3
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f7fe ff92 	bl	8005d9a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006e76:	2303      	movs	r3, #3
 8006e78:	73fb      	strb	r3, [r7, #15]
      break;
 8006e7a:	bf00      	nop
  }

  return ret;
 8006e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	20000234 	.word	0x20000234

08006e8c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	88db      	ldrh	r3, [r3, #6]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d004      	beq.n	8006ea8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006e9e:	6839      	ldr	r1, [r7, #0]
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 f8e2 	bl	800706a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006ea6:	e023      	b.n	8006ef0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	dc02      	bgt.n	8006eba <USBD_GetConfig+0x2e>
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	dc03      	bgt.n	8006ec0 <USBD_GetConfig+0x34>
 8006eb8:	e015      	b.n	8006ee6 <USBD_GetConfig+0x5a>
 8006eba:	2b03      	cmp	r3, #3
 8006ebc:	d00b      	beq.n	8006ed6 <USBD_GetConfig+0x4a>
 8006ebe:	e012      	b.n	8006ee6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	3308      	adds	r3, #8
 8006eca:	2201      	movs	r2, #1
 8006ecc:	4619      	mov	r1, r3
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 f93c 	bl	800714c <USBD_CtlSendData>
        break;
 8006ed4:	e00c      	b.n	8006ef0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	3304      	adds	r3, #4
 8006eda:	2201      	movs	r2, #1
 8006edc:	4619      	mov	r1, r3
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 f934 	bl	800714c <USBD_CtlSendData>
        break;
 8006ee4:	e004      	b.n	8006ef0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006ee6:	6839      	ldr	r1, [r7, #0]
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 f8be 	bl	800706a <USBD_CtlError>
        break;
 8006eee:	bf00      	nop
}
 8006ef0:	bf00      	nop
 8006ef2:	3708      	adds	r7, #8
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d81e      	bhi.n	8006f4e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	88db      	ldrh	r3, [r3, #6]
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d004      	beq.n	8006f22 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006f18:	6839      	ldr	r1, [r7, #0]
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 f8a5 	bl	800706a <USBD_CtlError>
        break;
 8006f20:	e01a      	b.n	8006f58 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2201      	movs	r2, #1
 8006f26:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d005      	beq.n	8006f3e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	f043 0202 	orr.w	r2, r3, #2
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	330c      	adds	r3, #12
 8006f42:	2202      	movs	r2, #2
 8006f44:	4619      	mov	r1, r3
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f900 	bl	800714c <USBD_CtlSendData>
      break;
 8006f4c:	e004      	b.n	8006f58 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006f4e:	6839      	ldr	r1, [r7, #0]
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 f88a 	bl	800706a <USBD_CtlError>
      break;
 8006f56:	bf00      	nop
  }
}
 8006f58:	bf00      	nop
 8006f5a:	3708      	adds	r7, #8
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	885b      	ldrh	r3, [r3, #2]
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d107      	bne.n	8006f82 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f923 	bl	80071c6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006f80:	e013      	b.n	8006faa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	885b      	ldrh	r3, [r3, #2]
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d10b      	bne.n	8006fa2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	889b      	ldrh	r3, [r3, #4]
 8006f8e:	0a1b      	lsrs	r3, r3, #8
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	b2da      	uxtb	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 f913 	bl	80071c6 <USBD_CtlSendStatus>
}
 8006fa0:	e003      	b.n	8006faa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006fa2:	6839      	ldr	r1, [r7, #0]
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 f860 	bl	800706a <USBD_CtlError>
}
 8006faa:	bf00      	nop
 8006fac:	3708      	adds	r7, #8
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b082      	sub	sp, #8
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
 8006fba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d80b      	bhi.n	8006fe2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	885b      	ldrh	r3, [r3, #2]
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d10c      	bne.n	8006fec <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 f8f3 	bl	80071c6 <USBD_CtlSendStatus>
      }
      break;
 8006fe0:	e004      	b.n	8006fec <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006fe2:	6839      	ldr	r1, [r7, #0]
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 f840 	bl	800706a <USBD_CtlError>
      break;
 8006fea:	e000      	b.n	8006fee <USBD_ClrFeature+0x3c>
      break;
 8006fec:	bf00      	nop
  }
}
 8006fee:	bf00      	nop
 8006ff0:	3708      	adds	r7, #8
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b084      	sub	sp, #16
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
 8006ffe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	781a      	ldrb	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	3301      	adds	r3, #1
 8007010:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	781a      	ldrb	r2, [r3, #0]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	3301      	adds	r3, #1
 800701e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f7ff fa41 	bl	80064a8 <SWAPBYTE>
 8007026:	4603      	mov	r3, r0
 8007028:	461a      	mov	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	3301      	adds	r3, #1
 8007032:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	3301      	adds	r3, #1
 8007038:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f7ff fa34 	bl	80064a8 <SWAPBYTE>
 8007040:	4603      	mov	r3, r0
 8007042:	461a      	mov	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	3301      	adds	r3, #1
 800704c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	3301      	adds	r3, #1
 8007052:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	f7ff fa27 	bl	80064a8 <SWAPBYTE>
 800705a:	4603      	mov	r3, r0
 800705c:	461a      	mov	r2, r3
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	80da      	strh	r2, [r3, #6]
}
 8007062:	bf00      	nop
 8007064:	3710      	adds	r7, #16
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}

0800706a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b082      	sub	sp, #8
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
 8007072:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007074:	2180      	movs	r1, #128	; 0x80
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 fbea 	bl	8007850 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800707c:	2100      	movs	r1, #0
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 fbe6 	bl	8007850 <USBD_LL_StallEP>
}
 8007084:	bf00      	nop
 8007086:	3708      	adds	r7, #8
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b086      	sub	sp, #24
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007098:	2300      	movs	r3, #0
 800709a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d036      	beq.n	8007110 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80070a6:	6938      	ldr	r0, [r7, #16]
 80070a8:	f000 f836 	bl	8007118 <USBD_GetLen>
 80070ac:	4603      	mov	r3, r0
 80070ae:	3301      	adds	r3, #1
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	005b      	lsls	r3, r3, #1
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80070ba:	7dfb      	ldrb	r3, [r7, #23]
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	4413      	add	r3, r2
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	7812      	ldrb	r2, [r2, #0]
 80070c4:	701a      	strb	r2, [r3, #0]
  idx++;
 80070c6:	7dfb      	ldrb	r3, [r7, #23]
 80070c8:	3301      	adds	r3, #1
 80070ca:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80070cc:	7dfb      	ldrb	r3, [r7, #23]
 80070ce:	68ba      	ldr	r2, [r7, #8]
 80070d0:	4413      	add	r3, r2
 80070d2:	2203      	movs	r2, #3
 80070d4:	701a      	strb	r2, [r3, #0]
  idx++;
 80070d6:	7dfb      	ldrb	r3, [r7, #23]
 80070d8:	3301      	adds	r3, #1
 80070da:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80070dc:	e013      	b.n	8007106 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80070de:	7dfb      	ldrb	r3, [r7, #23]
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	4413      	add	r3, r2
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	7812      	ldrb	r2, [r2, #0]
 80070e8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	3301      	adds	r3, #1
 80070ee:	613b      	str	r3, [r7, #16]
    idx++;
 80070f0:	7dfb      	ldrb	r3, [r7, #23]
 80070f2:	3301      	adds	r3, #1
 80070f4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80070f6:	7dfb      	ldrb	r3, [r7, #23]
 80070f8:	68ba      	ldr	r2, [r7, #8]
 80070fa:	4413      	add	r3, r2
 80070fc:	2200      	movs	r2, #0
 80070fe:	701a      	strb	r2, [r3, #0]
    idx++;
 8007100:	7dfb      	ldrb	r3, [r7, #23]
 8007102:	3301      	adds	r3, #1
 8007104:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1e7      	bne.n	80070de <USBD_GetString+0x52>
 800710e:	e000      	b.n	8007112 <USBD_GetString+0x86>
    return;
 8007110:	bf00      	nop
  }
}
 8007112:	3718      	adds	r7, #24
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007120:	2300      	movs	r3, #0
 8007122:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007128:	e005      	b.n	8007136 <USBD_GetLen+0x1e>
  {
    len++;
 800712a:	7bfb      	ldrb	r3, [r7, #15]
 800712c:	3301      	adds	r3, #1
 800712e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	3301      	adds	r3, #1
 8007134:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1f5      	bne.n	800712a <USBD_GetLen+0x12>
  }

  return len;
 800713e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007140:	4618      	mov	r0, r3
 8007142:	3714      	adds	r7, #20
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2202      	movs	r2, #2
 800715c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	68ba      	ldr	r2, [r7, #8]
 8007170:	2100      	movs	r1, #0
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	f000 fbf5 	bl	8007962 <USBD_LL_Transmit>

  return USBD_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007182:	b580      	push	{r7, lr}
 8007184:	b084      	sub	sp, #16
 8007186:	af00      	add	r7, sp, #0
 8007188:	60f8      	str	r0, [r7, #12]
 800718a:	60b9      	str	r1, [r7, #8]
 800718c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	2100      	movs	r1, #0
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f000 fbe4 	bl	8007962 <USBD_LL_Transmit>

  return USBD_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3710      	adds	r7, #16
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	68ba      	ldr	r2, [r7, #8]
 80071b4:	2100      	movs	r1, #0
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f000 fbf4 	bl	80079a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b082      	sub	sp, #8
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2204      	movs	r2, #4
 80071d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80071d6:	2300      	movs	r3, #0
 80071d8:	2200      	movs	r2, #0
 80071da:	2100      	movs	r1, #0
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fbc0 	bl	8007962 <USBD_LL_Transmit>

  return USBD_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2205      	movs	r2, #5
 80071f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071fc:	2300      	movs	r3, #0
 80071fe:	2200      	movs	r2, #0
 8007200:	2100      	movs	r1, #0
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fbce 	bl	80079a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3708      	adds	r7, #8
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
	...

08007214 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007218:	2200      	movs	r2, #0
 800721a:	490e      	ldr	r1, [pc, #56]	; (8007254 <MX_USB_DEVICE_Init+0x40>)
 800721c:	480e      	ldr	r0, [pc, #56]	; (8007258 <MX_USB_DEVICE_Init+0x44>)
 800721e:	f7fe fd23 	bl	8005c68 <USBD_Init>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d001      	beq.n	800722c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007228:	f7f9 fbba 	bl	80009a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800722c:	490b      	ldr	r1, [pc, #44]	; (800725c <MX_USB_DEVICE_Init+0x48>)
 800722e:	480a      	ldr	r0, [pc, #40]	; (8007258 <MX_USB_DEVICE_Init+0x44>)
 8007230:	f7fe fd4a 	bl	8005cc8 <USBD_RegisterClass>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d001      	beq.n	800723e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800723a:	f7f9 fbb1 	bl	80009a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800723e:	4806      	ldr	r0, [pc, #24]	; (8007258 <MX_USB_DEVICE_Init+0x44>)
 8007240:	f7fe fd78 	bl	8005d34 <USBD_Start>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d001      	beq.n	800724e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800724a:	f7f9 fba9 	bl	80009a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800724e:	bf00      	nop
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	200000a4 	.word	0x200000a4
 8007258:	20000238 	.word	0x20000238
 800725c:	2000000c 	.word	0x2000000c

08007260 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	4603      	mov	r3, r0
 8007268:	6039      	str	r1, [r7, #0]
 800726a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	2212      	movs	r2, #18
 8007270:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007272:	4b03      	ldr	r3, [pc, #12]	; (8007280 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007274:	4618      	mov	r0, r3
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr
 8007280:	200000c0 	.word	0x200000c0

08007284 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	4603      	mov	r3, r0
 800728c:	6039      	str	r1, [r7, #0]
 800728e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	2204      	movs	r2, #4
 8007294:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007296:	4b03      	ldr	r3, [pc, #12]	; (80072a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007298:	4618      	mov	r0, r3
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr
 80072a4:	200000d4 	.word	0x200000d4

080072a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	4603      	mov	r3, r0
 80072b0:	6039      	str	r1, [r7, #0]
 80072b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80072b4:	79fb      	ldrb	r3, [r7, #7]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d105      	bne.n	80072c6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80072ba:	683a      	ldr	r2, [r7, #0]
 80072bc:	4907      	ldr	r1, [pc, #28]	; (80072dc <USBD_FS_ProductStrDescriptor+0x34>)
 80072be:	4808      	ldr	r0, [pc, #32]	; (80072e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80072c0:	f7ff fee4 	bl	800708c <USBD_GetString>
 80072c4:	e004      	b.n	80072d0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80072c6:	683a      	ldr	r2, [r7, #0]
 80072c8:	4904      	ldr	r1, [pc, #16]	; (80072dc <USBD_FS_ProductStrDescriptor+0x34>)
 80072ca:	4805      	ldr	r0, [pc, #20]	; (80072e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80072cc:	f7ff fede 	bl	800708c <USBD_GetString>
  }
  return USBD_StrDesc;
 80072d0:	4b02      	ldr	r3, [pc, #8]	; (80072dc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3708      	adds	r7, #8
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	20000514 	.word	0x20000514
 80072e0:	08007ae0 	.word	0x08007ae0

080072e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	4603      	mov	r3, r0
 80072ec:	6039      	str	r1, [r7, #0]
 80072ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80072f0:	683a      	ldr	r2, [r7, #0]
 80072f2:	4904      	ldr	r1, [pc, #16]	; (8007304 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80072f4:	4804      	ldr	r0, [pc, #16]	; (8007308 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80072f6:	f7ff fec9 	bl	800708c <USBD_GetString>
  return USBD_StrDesc;
 80072fa:	4b02      	ldr	r3, [pc, #8]	; (8007304 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3708      	adds	r7, #8
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	20000514 	.word	0x20000514
 8007308:	08007af0 	.word	0x08007af0

0800730c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	4603      	mov	r3, r0
 8007314:	6039      	str	r1, [r7, #0]
 8007316:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	221a      	movs	r2, #26
 800731c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800731e:	f000 f843 	bl	80073a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007322:	4b02      	ldr	r3, [pc, #8]	; (800732c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007324:	4618      	mov	r0, r3
 8007326:	3708      	adds	r7, #8
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	200000d8 	.word	0x200000d8

08007330 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	4603      	mov	r3, r0
 8007338:	6039      	str	r1, [r7, #0]
 800733a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800733c:	79fb      	ldrb	r3, [r7, #7]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d105      	bne.n	800734e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007342:	683a      	ldr	r2, [r7, #0]
 8007344:	4907      	ldr	r1, [pc, #28]	; (8007364 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007346:	4808      	ldr	r0, [pc, #32]	; (8007368 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007348:	f7ff fea0 	bl	800708c <USBD_GetString>
 800734c:	e004      	b.n	8007358 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800734e:	683a      	ldr	r2, [r7, #0]
 8007350:	4904      	ldr	r1, [pc, #16]	; (8007364 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007352:	4805      	ldr	r0, [pc, #20]	; (8007368 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007354:	f7ff fe9a 	bl	800708c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007358:	4b02      	ldr	r3, [pc, #8]	; (8007364 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800735a:	4618      	mov	r0, r3
 800735c:	3708      	adds	r7, #8
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	20000514 	.word	0x20000514
 8007368:	08007b04 	.word	0x08007b04

0800736c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	4603      	mov	r3, r0
 8007374:	6039      	str	r1, [r7, #0]
 8007376:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007378:	79fb      	ldrb	r3, [r7, #7]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d105      	bne.n	800738a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800737e:	683a      	ldr	r2, [r7, #0]
 8007380:	4907      	ldr	r1, [pc, #28]	; (80073a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007382:	4808      	ldr	r0, [pc, #32]	; (80073a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007384:	f7ff fe82 	bl	800708c <USBD_GetString>
 8007388:	e004      	b.n	8007394 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800738a:	683a      	ldr	r2, [r7, #0]
 800738c:	4904      	ldr	r1, [pc, #16]	; (80073a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800738e:	4805      	ldr	r0, [pc, #20]	; (80073a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007390:	f7ff fe7c 	bl	800708c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007394:	4b02      	ldr	r3, [pc, #8]	; (80073a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007396:	4618      	mov	r0, r3
 8007398:	3708      	adds	r7, #8
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	20000514 	.word	0x20000514
 80073a4:	08007b10 	.word	0x08007b10

080073a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80073ae:	4b0f      	ldr	r3, [pc, #60]	; (80073ec <Get_SerialNum+0x44>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80073b4:	4b0e      	ldr	r3, [pc, #56]	; (80073f0 <Get_SerialNum+0x48>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80073ba:	4b0e      	ldr	r3, [pc, #56]	; (80073f4 <Get_SerialNum+0x4c>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4413      	add	r3, r2
 80073c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d009      	beq.n	80073e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80073ce:	2208      	movs	r2, #8
 80073d0:	4909      	ldr	r1, [pc, #36]	; (80073f8 <Get_SerialNum+0x50>)
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	f000 f814 	bl	8007400 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80073d8:	2204      	movs	r2, #4
 80073da:	4908      	ldr	r1, [pc, #32]	; (80073fc <Get_SerialNum+0x54>)
 80073dc:	68b8      	ldr	r0, [r7, #8]
 80073de:	f000 f80f 	bl	8007400 <IntToUnicode>
  }
}
 80073e2:	bf00      	nop
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	1fff7a10 	.word	0x1fff7a10
 80073f0:	1fff7a14 	.word	0x1fff7a14
 80073f4:	1fff7a18 	.word	0x1fff7a18
 80073f8:	200000da 	.word	0x200000da
 80073fc:	200000ea 	.word	0x200000ea

08007400 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007400:	b480      	push	{r7}
 8007402:	b087      	sub	sp, #28
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	4613      	mov	r3, r2
 800740c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800740e:	2300      	movs	r3, #0
 8007410:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007412:	2300      	movs	r3, #0
 8007414:	75fb      	strb	r3, [r7, #23]
 8007416:	e027      	b.n	8007468 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	0f1b      	lsrs	r3, r3, #28
 800741c:	2b09      	cmp	r3, #9
 800741e:	d80b      	bhi.n	8007438 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	0f1b      	lsrs	r3, r3, #28
 8007424:	b2da      	uxtb	r2, r3
 8007426:	7dfb      	ldrb	r3, [r7, #23]
 8007428:	005b      	lsls	r3, r3, #1
 800742a:	4619      	mov	r1, r3
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	440b      	add	r3, r1
 8007430:	3230      	adds	r2, #48	; 0x30
 8007432:	b2d2      	uxtb	r2, r2
 8007434:	701a      	strb	r2, [r3, #0]
 8007436:	e00a      	b.n	800744e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	0f1b      	lsrs	r3, r3, #28
 800743c:	b2da      	uxtb	r2, r3
 800743e:	7dfb      	ldrb	r3, [r7, #23]
 8007440:	005b      	lsls	r3, r3, #1
 8007442:	4619      	mov	r1, r3
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	440b      	add	r3, r1
 8007448:	3237      	adds	r2, #55	; 0x37
 800744a:	b2d2      	uxtb	r2, r2
 800744c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	011b      	lsls	r3, r3, #4
 8007452:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007454:	7dfb      	ldrb	r3, [r7, #23]
 8007456:	005b      	lsls	r3, r3, #1
 8007458:	3301      	adds	r3, #1
 800745a:	68ba      	ldr	r2, [r7, #8]
 800745c:	4413      	add	r3, r2
 800745e:	2200      	movs	r2, #0
 8007460:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007462:	7dfb      	ldrb	r3, [r7, #23]
 8007464:	3301      	adds	r3, #1
 8007466:	75fb      	strb	r3, [r7, #23]
 8007468:	7dfa      	ldrb	r2, [r7, #23]
 800746a:	79fb      	ldrb	r3, [r7, #7]
 800746c:	429a      	cmp	r2, r3
 800746e:	d3d3      	bcc.n	8007418 <IntToUnicode+0x18>
  }
}
 8007470:	bf00      	nop
 8007472:	bf00      	nop
 8007474:	371c      	adds	r7, #28
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
	...

08007480 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b08a      	sub	sp, #40	; 0x28
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007488:	f107 0314 	add.w	r3, r7, #20
 800748c:	2200      	movs	r2, #0
 800748e:	601a      	str	r2, [r3, #0]
 8007490:	605a      	str	r2, [r3, #4]
 8007492:	609a      	str	r2, [r3, #8]
 8007494:	60da      	str	r2, [r3, #12]
 8007496:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074a0:	d13a      	bne.n	8007518 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074a2:	2300      	movs	r3, #0
 80074a4:	613b      	str	r3, [r7, #16]
 80074a6:	4b1e      	ldr	r3, [pc, #120]	; (8007520 <HAL_PCD_MspInit+0xa0>)
 80074a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074aa:	4a1d      	ldr	r2, [pc, #116]	; (8007520 <HAL_PCD_MspInit+0xa0>)
 80074ac:	f043 0301 	orr.w	r3, r3, #1
 80074b0:	6313      	str	r3, [r2, #48]	; 0x30
 80074b2:	4b1b      	ldr	r3, [pc, #108]	; (8007520 <HAL_PCD_MspInit+0xa0>)
 80074b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b6:	f003 0301 	and.w	r3, r3, #1
 80074ba:	613b      	str	r3, [r7, #16]
 80074bc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80074be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80074c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074c4:	2302      	movs	r3, #2
 80074c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074c8:	2300      	movs	r3, #0
 80074ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074cc:	2303      	movs	r3, #3
 80074ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80074d0:	230a      	movs	r3, #10
 80074d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074d4:	f107 0314 	add.w	r3, r7, #20
 80074d8:	4619      	mov	r1, r3
 80074da:	4812      	ldr	r0, [pc, #72]	; (8007524 <HAL_PCD_MspInit+0xa4>)
 80074dc:	f7f9 fd7a 	bl	8000fd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80074e0:	4b0f      	ldr	r3, [pc, #60]	; (8007520 <HAL_PCD_MspInit+0xa0>)
 80074e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074e4:	4a0e      	ldr	r2, [pc, #56]	; (8007520 <HAL_PCD_MspInit+0xa0>)
 80074e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074ea:	6353      	str	r3, [r2, #52]	; 0x34
 80074ec:	2300      	movs	r3, #0
 80074ee:	60fb      	str	r3, [r7, #12]
 80074f0:	4b0b      	ldr	r3, [pc, #44]	; (8007520 <HAL_PCD_MspInit+0xa0>)
 80074f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074f4:	4a0a      	ldr	r2, [pc, #40]	; (8007520 <HAL_PCD_MspInit+0xa0>)
 80074f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80074fa:	6453      	str	r3, [r2, #68]	; 0x44
 80074fc:	4b08      	ldr	r3, [pc, #32]	; (8007520 <HAL_PCD_MspInit+0xa0>)
 80074fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007504:	60fb      	str	r3, [r7, #12]
 8007506:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007508:	2200      	movs	r2, #0
 800750a:	2100      	movs	r1, #0
 800750c:	2043      	movs	r0, #67	; 0x43
 800750e:	f7f9 fd2a 	bl	8000f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007512:	2043      	movs	r0, #67	; 0x43
 8007514:	f7f9 fd43 	bl	8000f9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007518:	bf00      	nop
 800751a:	3728      	adds	r7, #40	; 0x28
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	40023800 	.word	0x40023800
 8007524:	40020000 	.word	0x40020000

08007528 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800753c:	4619      	mov	r1, r3
 800753e:	4610      	mov	r0, r2
 8007540:	f7fe fc45 	bl	8005dce <USBD_LL_SetupStage>
}
 8007544:	bf00      	nop
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	460b      	mov	r3, r1
 8007556:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800755e:	78fa      	ldrb	r2, [r7, #3]
 8007560:	6879      	ldr	r1, [r7, #4]
 8007562:	4613      	mov	r3, r2
 8007564:	00db      	lsls	r3, r3, #3
 8007566:	4413      	add	r3, r2
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	440b      	add	r3, r1
 800756c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	78fb      	ldrb	r3, [r7, #3]
 8007574:	4619      	mov	r1, r3
 8007576:	f7fe fc7f 	bl	8005e78 <USBD_LL_DataOutStage>
}
 800757a:	bf00      	nop
 800757c:	3708      	adds	r7, #8
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b082      	sub	sp, #8
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
 800758a:	460b      	mov	r3, r1
 800758c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007594:	78fa      	ldrb	r2, [r7, #3]
 8007596:	6879      	ldr	r1, [r7, #4]
 8007598:	4613      	mov	r3, r2
 800759a:	00db      	lsls	r3, r3, #3
 800759c:	4413      	add	r3, r2
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	440b      	add	r3, r1
 80075a2:	334c      	adds	r3, #76	; 0x4c
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	78fb      	ldrb	r3, [r7, #3]
 80075a8:	4619      	mov	r1, r3
 80075aa:	f7fe fd18 	bl	8005fde <USBD_LL_DataInStage>
}
 80075ae:	bf00      	nop
 80075b0:	3708      	adds	r7, #8
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b082      	sub	sp, #8
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7fe fe4c 	bl	8006262 <USBD_LL_SOF>
}
 80075ca:	bf00      	nop
 80075cc:	3708      	adds	r7, #8
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b084      	sub	sp, #16
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80075da:	2301      	movs	r3, #1
 80075dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d001      	beq.n	80075ea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80075e6:	f7f9 f9db 	bl	80009a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80075f0:	7bfa      	ldrb	r2, [r7, #15]
 80075f2:	4611      	mov	r1, r2
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7fe fdf6 	bl	80061e6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007600:	4618      	mov	r0, r3
 8007602:	f7fe fd9e 	bl	8006142 <USBD_LL_Reset>
}
 8007606:	bf00      	nop
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
	...

08007610 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800761e:	4618      	mov	r0, r3
 8007620:	f7fe fdf1 	bl	8006206 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	6812      	ldr	r2, [r2, #0]
 8007632:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007636:	f043 0301 	orr.w	r3, r3, #1
 800763a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a1b      	ldr	r3, [r3, #32]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d005      	beq.n	8007650 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007644:	4b04      	ldr	r3, [pc, #16]	; (8007658 <HAL_PCD_SuspendCallback+0x48>)
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	4a03      	ldr	r2, [pc, #12]	; (8007658 <HAL_PCD_SuspendCallback+0x48>)
 800764a:	f043 0306 	orr.w	r3, r3, #6
 800764e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007650:	bf00      	nop
 8007652:	3708      	adds	r7, #8
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	e000ed00 	.word	0xe000ed00

0800765c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800766a:	4618      	mov	r0, r3
 800766c:	f7fe fde1 	bl	8006232 <USBD_LL_Resume>
}
 8007670:	bf00      	nop
 8007672:	3708      	adds	r7, #8
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	460b      	mov	r3, r1
 8007682:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800768a:	78fa      	ldrb	r2, [r7, #3]
 800768c:	4611      	mov	r1, r2
 800768e:	4618      	mov	r0, r3
 8007690:	f7fe fe39 	bl	8006306 <USBD_LL_IsoOUTIncomplete>
}
 8007694:	bf00      	nop
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	460b      	mov	r3, r1
 80076a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80076ae:	78fa      	ldrb	r2, [r7, #3]
 80076b0:	4611      	mov	r1, r2
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7fe fdf5 	bl	80062a2 <USBD_LL_IsoINIncomplete>
}
 80076b8:	bf00      	nop
 80076ba:	3708      	adds	r7, #8
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7fe fe4b 	bl	800636a <USBD_LL_DevConnected>
}
 80076d4:	bf00      	nop
 80076d6:	3708      	adds	r7, #8
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7fe fe48 	bl	8006380 <USBD_LL_DevDisconnected>
}
 80076f0:	bf00      	nop
 80076f2:	3708      	adds	r7, #8
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d13c      	bne.n	8007782 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007708:	4a20      	ldr	r2, [pc, #128]	; (800778c <USBD_LL_Init+0x94>)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a1e      	ldr	r2, [pc, #120]	; (800778c <USBD_LL_Init+0x94>)
 8007714:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007718:	4b1c      	ldr	r3, [pc, #112]	; (800778c <USBD_LL_Init+0x94>)
 800771a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800771e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007720:	4b1a      	ldr	r3, [pc, #104]	; (800778c <USBD_LL_Init+0x94>)
 8007722:	2204      	movs	r2, #4
 8007724:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007726:	4b19      	ldr	r3, [pc, #100]	; (800778c <USBD_LL_Init+0x94>)
 8007728:	2202      	movs	r2, #2
 800772a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800772c:	4b17      	ldr	r3, [pc, #92]	; (800778c <USBD_LL_Init+0x94>)
 800772e:	2200      	movs	r2, #0
 8007730:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007732:	4b16      	ldr	r3, [pc, #88]	; (800778c <USBD_LL_Init+0x94>)
 8007734:	2202      	movs	r2, #2
 8007736:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007738:	4b14      	ldr	r3, [pc, #80]	; (800778c <USBD_LL_Init+0x94>)
 800773a:	2200      	movs	r2, #0
 800773c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800773e:	4b13      	ldr	r3, [pc, #76]	; (800778c <USBD_LL_Init+0x94>)
 8007740:	2200      	movs	r2, #0
 8007742:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007744:	4b11      	ldr	r3, [pc, #68]	; (800778c <USBD_LL_Init+0x94>)
 8007746:	2200      	movs	r2, #0
 8007748:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800774a:	4b10      	ldr	r3, [pc, #64]	; (800778c <USBD_LL_Init+0x94>)
 800774c:	2200      	movs	r2, #0
 800774e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007750:	4b0e      	ldr	r3, [pc, #56]	; (800778c <USBD_LL_Init+0x94>)
 8007752:	2200      	movs	r2, #0
 8007754:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007756:	480d      	ldr	r0, [pc, #52]	; (800778c <USBD_LL_Init+0x94>)
 8007758:	f7f9 fdd9 	bl	800130e <HAL_PCD_Init>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d001      	beq.n	8007766 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007762:	f7f9 f91d 	bl	80009a0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007766:	2180      	movs	r1, #128	; 0x80
 8007768:	4808      	ldr	r0, [pc, #32]	; (800778c <USBD_LL_Init+0x94>)
 800776a:	f7fb f818 	bl	800279e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800776e:	2240      	movs	r2, #64	; 0x40
 8007770:	2100      	movs	r1, #0
 8007772:	4806      	ldr	r0, [pc, #24]	; (800778c <USBD_LL_Init+0x94>)
 8007774:	f7fa ffcc 	bl	8002710 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007778:	2280      	movs	r2, #128	; 0x80
 800777a:	2101      	movs	r1, #1
 800777c:	4803      	ldr	r0, [pc, #12]	; (800778c <USBD_LL_Init+0x94>)
 800777e:	f7fa ffc7 	bl	8002710 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3708      	adds	r7, #8
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	20000714 	.word	0x20000714

08007790 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007798:	2300      	movs	r3, #0
 800779a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800779c:	2300      	movs	r3, #0
 800779e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7f9 fece 	bl	8001548 <HAL_PCD_Start>
 80077ac:	4603      	mov	r3, r0
 80077ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077b0:	7bfb      	ldrb	r3, [r7, #15]
 80077b2:	4618      	mov	r0, r3
 80077b4:	f000 f930 	bl	8007a18 <USBD_Get_USB_Status>
 80077b8:	4603      	mov	r3, r0
 80077ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b084      	sub	sp, #16
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
 80077ce:	4608      	mov	r0, r1
 80077d0:	4611      	mov	r1, r2
 80077d2:	461a      	mov	r2, r3
 80077d4:	4603      	mov	r3, r0
 80077d6:	70fb      	strb	r3, [r7, #3]
 80077d8:	460b      	mov	r3, r1
 80077da:	70bb      	strb	r3, [r7, #2]
 80077dc:	4613      	mov	r3, r2
 80077de:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077e0:	2300      	movs	r3, #0
 80077e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077e4:	2300      	movs	r3, #0
 80077e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80077ee:	78bb      	ldrb	r3, [r7, #2]
 80077f0:	883a      	ldrh	r2, [r7, #0]
 80077f2:	78f9      	ldrb	r1, [r7, #3]
 80077f4:	f7fa fb9f 	bl	8001f36 <HAL_PCD_EP_Open>
 80077f8:	4603      	mov	r3, r0
 80077fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077fc:	7bfb      	ldrb	r3, [r7, #15]
 80077fe:	4618      	mov	r0, r3
 8007800:	f000 f90a 	bl	8007a18 <USBD_Get_USB_Status>
 8007804:	4603      	mov	r3, r0
 8007806:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007808:	7bbb      	ldrb	r3, [r7, #14]
}
 800780a:	4618      	mov	r0, r3
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b084      	sub	sp, #16
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
 800781a:	460b      	mov	r3, r1
 800781c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800781e:	2300      	movs	r3, #0
 8007820:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007822:	2300      	movs	r3, #0
 8007824:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800782c:	78fa      	ldrb	r2, [r7, #3]
 800782e:	4611      	mov	r1, r2
 8007830:	4618      	mov	r0, r3
 8007832:	f7fa fbe8 	bl	8002006 <HAL_PCD_EP_Close>
 8007836:	4603      	mov	r3, r0
 8007838:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800783a:	7bfb      	ldrb	r3, [r7, #15]
 800783c:	4618      	mov	r0, r3
 800783e:	f000 f8eb 	bl	8007a18 <USBD_Get_USB_Status>
 8007842:	4603      	mov	r3, r0
 8007844:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007846:	7bbb      	ldrb	r3, [r7, #14]
}
 8007848:	4618      	mov	r0, r3
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	460b      	mov	r3, r1
 800785a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800785c:	2300      	movs	r3, #0
 800785e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007860:	2300      	movs	r3, #0
 8007862:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800786a:	78fa      	ldrb	r2, [r7, #3]
 800786c:	4611      	mov	r1, r2
 800786e:	4618      	mov	r0, r3
 8007870:	f7fa fca8 	bl	80021c4 <HAL_PCD_EP_SetStall>
 8007874:	4603      	mov	r3, r0
 8007876:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007878:	7bfb      	ldrb	r3, [r7, #15]
 800787a:	4618      	mov	r0, r3
 800787c:	f000 f8cc 	bl	8007a18 <USBD_Get_USB_Status>
 8007880:	4603      	mov	r3, r0
 8007882:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007884:	7bbb      	ldrb	r3, [r7, #14]
}
 8007886:	4618      	mov	r0, r3
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b084      	sub	sp, #16
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
 8007896:	460b      	mov	r3, r1
 8007898:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800789a:	2300      	movs	r3, #0
 800789c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800789e:	2300      	movs	r3, #0
 80078a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80078a8:	78fa      	ldrb	r2, [r7, #3]
 80078aa:	4611      	mov	r1, r2
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7fa fced 	bl	800228c <HAL_PCD_EP_ClrStall>
 80078b2:	4603      	mov	r3, r0
 80078b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078b6:	7bfb      	ldrb	r3, [r7, #15]
 80078b8:	4618      	mov	r0, r3
 80078ba:	f000 f8ad 	bl	8007a18 <USBD_Get_USB_Status>
 80078be:	4603      	mov	r3, r0
 80078c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3710      	adds	r7, #16
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	460b      	mov	r3, r1
 80078d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80078de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80078e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	da0b      	bge.n	8007900 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80078e8:	78fb      	ldrb	r3, [r7, #3]
 80078ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078ee:	68f9      	ldr	r1, [r7, #12]
 80078f0:	4613      	mov	r3, r2
 80078f2:	00db      	lsls	r3, r3, #3
 80078f4:	4413      	add	r3, r2
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	440b      	add	r3, r1
 80078fa:	333e      	adds	r3, #62	; 0x3e
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	e00b      	b.n	8007918 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007900:	78fb      	ldrb	r3, [r7, #3]
 8007902:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007906:	68f9      	ldr	r1, [r7, #12]
 8007908:	4613      	mov	r3, r2
 800790a:	00db      	lsls	r3, r3, #3
 800790c:	4413      	add	r3, r2
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	440b      	add	r3, r1
 8007912:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007916:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007918:	4618      	mov	r0, r3
 800791a:	3714      	adds	r7, #20
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr

08007924 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	460b      	mov	r3, r1
 800792e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007930:	2300      	movs	r3, #0
 8007932:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007934:	2300      	movs	r3, #0
 8007936:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800793e:	78fa      	ldrb	r2, [r7, #3]
 8007940:	4611      	mov	r1, r2
 8007942:	4618      	mov	r0, r3
 8007944:	f7fa fad2 	bl	8001eec <HAL_PCD_SetAddress>
 8007948:	4603      	mov	r3, r0
 800794a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800794c:	7bfb      	ldrb	r3, [r7, #15]
 800794e:	4618      	mov	r0, r3
 8007950:	f000 f862 	bl	8007a18 <USBD_Get_USB_Status>
 8007954:	4603      	mov	r3, r0
 8007956:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007958:	7bbb      	ldrb	r3, [r7, #14]
}
 800795a:	4618      	mov	r0, r3
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007962:	b580      	push	{r7, lr}
 8007964:	b086      	sub	sp, #24
 8007966:	af00      	add	r7, sp, #0
 8007968:	60f8      	str	r0, [r7, #12]
 800796a:	607a      	str	r2, [r7, #4]
 800796c:	603b      	str	r3, [r7, #0]
 800796e:	460b      	mov	r3, r1
 8007970:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007972:	2300      	movs	r3, #0
 8007974:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007976:	2300      	movs	r3, #0
 8007978:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007980:	7af9      	ldrb	r1, [r7, #11]
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	f7fa fbd3 	bl	8002130 <HAL_PCD_EP_Transmit>
 800798a:	4603      	mov	r3, r0
 800798c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800798e:	7dfb      	ldrb	r3, [r7, #23]
 8007990:	4618      	mov	r0, r3
 8007992:	f000 f841 	bl	8007a18 <USBD_Get_USB_Status>
 8007996:	4603      	mov	r3, r0
 8007998:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800799a:	7dbb      	ldrb	r3, [r7, #22]
}
 800799c:	4618      	mov	r0, r3
 800799e:	3718      	adds	r7, #24
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b086      	sub	sp, #24
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	607a      	str	r2, [r7, #4]
 80079ae:	603b      	str	r3, [r7, #0]
 80079b0:	460b      	mov	r3, r1
 80079b2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079b4:	2300      	movs	r3, #0
 80079b6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079b8:	2300      	movs	r3, #0
 80079ba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80079c2:	7af9      	ldrb	r1, [r7, #11]
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	f7fa fb67 	bl	800209a <HAL_PCD_EP_Receive>
 80079cc:	4603      	mov	r3, r0
 80079ce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079d0:	7dfb      	ldrb	r3, [r7, #23]
 80079d2:	4618      	mov	r0, r3
 80079d4:	f000 f820 	bl	8007a18 <USBD_Get_USB_Status>
 80079d8:	4603      	mov	r3, r0
 80079da:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80079dc:	7dbb      	ldrb	r3, [r7, #22]
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3718      	adds	r7, #24
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
	...

080079e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80079f0:	4b03      	ldr	r3, [pc, #12]	; (8007a00 <USBD_static_malloc+0x18>)
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	370c      	adds	r7, #12
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr
 80079fe:	bf00      	nop
 8007a00:	20000c20 	.word	0x20000c20

08007a04 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]

}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	4603      	mov	r3, r0
 8007a20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a22:	2300      	movs	r3, #0
 8007a24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007a26:	79fb      	ldrb	r3, [r7, #7]
 8007a28:	2b03      	cmp	r3, #3
 8007a2a:	d817      	bhi.n	8007a5c <USBD_Get_USB_Status+0x44>
 8007a2c:	a201      	add	r2, pc, #4	; (adr r2, 8007a34 <USBD_Get_USB_Status+0x1c>)
 8007a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a32:	bf00      	nop
 8007a34:	08007a45 	.word	0x08007a45
 8007a38:	08007a4b 	.word	0x08007a4b
 8007a3c:	08007a51 	.word	0x08007a51
 8007a40:	08007a57 	.word	0x08007a57
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007a44:	2300      	movs	r3, #0
 8007a46:	73fb      	strb	r3, [r7, #15]
    break;
 8007a48:	e00b      	b.n	8007a62 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	73fb      	strb	r3, [r7, #15]
    break;
 8007a4e:	e008      	b.n	8007a62 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007a50:	2301      	movs	r3, #1
 8007a52:	73fb      	strb	r3, [r7, #15]
    break;
 8007a54:	e005      	b.n	8007a62 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007a56:	2303      	movs	r3, #3
 8007a58:	73fb      	strb	r3, [r7, #15]
    break;
 8007a5a:	e002      	b.n	8007a62 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	73fb      	strb	r3, [r7, #15]
    break;
 8007a60:	bf00      	nop
  }
  return usb_status;
 8007a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3714      	adds	r7, #20
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <__libc_init_array>:
 8007a70:	b570      	push	{r4, r5, r6, lr}
 8007a72:	4d0d      	ldr	r5, [pc, #52]	; (8007aa8 <__libc_init_array+0x38>)
 8007a74:	4c0d      	ldr	r4, [pc, #52]	; (8007aac <__libc_init_array+0x3c>)
 8007a76:	1b64      	subs	r4, r4, r5
 8007a78:	10a4      	asrs	r4, r4, #2
 8007a7a:	2600      	movs	r6, #0
 8007a7c:	42a6      	cmp	r6, r4
 8007a7e:	d109      	bne.n	8007a94 <__libc_init_array+0x24>
 8007a80:	4d0b      	ldr	r5, [pc, #44]	; (8007ab0 <__libc_init_array+0x40>)
 8007a82:	4c0c      	ldr	r4, [pc, #48]	; (8007ab4 <__libc_init_array+0x44>)
 8007a84:	f000 f820 	bl	8007ac8 <_init>
 8007a88:	1b64      	subs	r4, r4, r5
 8007a8a:	10a4      	asrs	r4, r4, #2
 8007a8c:	2600      	movs	r6, #0
 8007a8e:	42a6      	cmp	r6, r4
 8007a90:	d105      	bne.n	8007a9e <__libc_init_array+0x2e>
 8007a92:	bd70      	pop	{r4, r5, r6, pc}
 8007a94:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a98:	4798      	blx	r3
 8007a9a:	3601      	adds	r6, #1
 8007a9c:	e7ee      	b.n	8007a7c <__libc_init_array+0xc>
 8007a9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aa2:	4798      	blx	r3
 8007aa4:	3601      	adds	r6, #1
 8007aa6:	e7f2      	b.n	8007a8e <__libc_init_array+0x1e>
 8007aa8:	08007b40 	.word	0x08007b40
 8007aac:	08007b40 	.word	0x08007b40
 8007ab0:	08007b40 	.word	0x08007b40
 8007ab4:	08007b44 	.word	0x08007b44

08007ab8 <memset>:
 8007ab8:	4402      	add	r2, r0
 8007aba:	4603      	mov	r3, r0
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d100      	bne.n	8007ac2 <memset+0xa>
 8007ac0:	4770      	bx	lr
 8007ac2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ac6:	e7f9      	b.n	8007abc <memset+0x4>

08007ac8 <_init>:
 8007ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aca:	bf00      	nop
 8007acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ace:	bc08      	pop	{r3}
 8007ad0:	469e      	mov	lr, r3
 8007ad2:	4770      	bx	lr

08007ad4 <_fini>:
 8007ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ad6:	bf00      	nop
 8007ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ada:	bc08      	pop	{r3}
 8007adc:	469e      	mov	lr, r3
 8007ade:	4770      	bx	lr
