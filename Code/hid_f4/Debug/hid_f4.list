
hid_f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007134  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080072cc  080072cc  000172cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800731c  0800731c  000200f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800731c  0800731c  0001731c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007324  08007324  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007324  08007324  00017324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007328  08007328  00017328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  0800732c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ab8  200000f4  08007420  000200f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bac  08007420  00020bac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012748  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d2e  00000000  00000000  0003286c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  000355a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f00  00000000  00000000  000365e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c40  00000000  00000000  000374e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000132b7  00000000  00000000  00050128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f58c  00000000  00000000  000633df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f296b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043e4  00000000  00000000  000f29bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000f4 	.word	0x200000f4
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080072b4 	.word	0x080072b4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000f8 	.word	0x200000f8
 80001d4:	080072b4 	.word	0x080072b4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 faf0 	bl	8000ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f81c 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f91c 	bl	8000724 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004ec:	f006 fa88 	bl	8006a00 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80004f0:	f000 f87e 	bl	80005f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004f4:	f000 f8c8 	bl	8000688 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  GPIOB->BSRR = 0xf;
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <main+0x38>)
 80004fa:	220f      	movs	r2, #15
 80004fc:	619a      	str	r2, [r3, #24]
  GPIOB->BSRR = 0x1 << 16;
 80004fe:	4b05      	ldr	r3, [pc, #20]	; (8000514 <main+0x38>)
 8000500:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000504:	619a      	str	r2, [r3, #24]
  HAL_TIM_Base_Start_IT(&htim2);
 8000506:	4804      	ldr	r0, [pc, #16]	; (8000518 <main+0x3c>)
 8000508:	f002 fd06 	bl	8002f18 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800050c:	4803      	ldr	r0, [pc, #12]	; (800051c <main+0x40>)
 800050e:	f002 fd03 	bl	8002f18 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000512:	e7fe      	b.n	8000512 <main+0x36>
 8000514:	40020400 	.word	0x40020400
 8000518:	20000110 	.word	0x20000110
 800051c:	20000158 	.word	0x20000158

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b094      	sub	sp, #80	; 0x50
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0320 	add.w	r3, r7, #32
 800052a:	2230      	movs	r2, #48	; 0x30
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f006 feb8 	bl	80072a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000544:	2300      	movs	r3, #0
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	4b27      	ldr	r3, [pc, #156]	; (80005e8 <SystemClock_Config+0xc8>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	4a26      	ldr	r2, [pc, #152]	; (80005e8 <SystemClock_Config+0xc8>)
 800054e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000552:	6413      	str	r3, [r2, #64]	; 0x40
 8000554:	4b24      	ldr	r3, [pc, #144]	; (80005e8 <SystemClock_Config+0xc8>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000560:	2300      	movs	r3, #0
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	4b21      	ldr	r3, [pc, #132]	; (80005ec <SystemClock_Config+0xcc>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a20      	ldr	r2, [pc, #128]	; (80005ec <SystemClock_Config+0xcc>)
 800056a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b1e      	ldr	r3, [pc, #120]	; (80005ec <SystemClock_Config+0xcc>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057c:	2302      	movs	r3, #2
 800057e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000580:	2301      	movs	r3, #1
 8000582:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000584:	2310      	movs	r3, #16
 8000586:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000588:	2302      	movs	r3, #2
 800058a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800058c:	2300      	movs	r3, #0
 800058e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000590:	2310      	movs	r3, #16
 8000592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000594:	2390      	movs	r3, #144	; 0x90
 8000596:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000598:	2302      	movs	r3, #2
 800059a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800059c:	2303      	movs	r3, #3
 800059e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a0:	f107 0320 	add.w	r3, r7, #32
 80005a4:	4618      	mov	r0, r3
 80005a6:	f002 f837 	bl	8002618 <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005b0:	f000 f992 	bl	80008d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	230f      	movs	r3, #15
 80005b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b8:	2302      	movs	r3, #2
 80005ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	2102      	movs	r1, #2
 80005d0:	4618      	mov	r0, r3
 80005d2:	f002 fa99 	bl	8002b08 <HAL_RCC_ClockConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005dc:	f000 f97c 	bl	80008d8 <Error_Handler>
  }
}
 80005e0:	bf00      	nop
 80005e2:	3750      	adds	r7, #80	; 0x50
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005f6:	f107 0308 	add.w	r3, r7, #8
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000604:	463b      	mov	r3, r7
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800060c:	4b1d      	ldr	r3, [pc, #116]	; (8000684 <MX_TIM2_Init+0x94>)
 800060e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000612:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000614:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <MX_TIM2_Init+0x94>)
 8000616:	2247      	movs	r2, #71	; 0x47
 8000618:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800061a:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <MX_TIM2_Init+0x94>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000620:	4b18      	ldr	r3, [pc, #96]	; (8000684 <MX_TIM2_Init+0x94>)
 8000622:	2263      	movs	r2, #99	; 0x63
 8000624:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000626:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MX_TIM2_Init+0x94>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800062c:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_TIM2_Init+0x94>)
 800062e:	2200      	movs	r2, #0
 8000630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000632:	4814      	ldr	r0, [pc, #80]	; (8000684 <MX_TIM2_Init+0x94>)
 8000634:	f002 fc20 	bl	8002e78 <HAL_TIM_Base_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800063e:	f000 f94b 	bl	80008d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000646:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000648:	f107 0308 	add.w	r3, r7, #8
 800064c:	4619      	mov	r1, r3
 800064e:	480d      	ldr	r0, [pc, #52]	; (8000684 <MX_TIM2_Init+0x94>)
 8000650:	f002 fdcc 	bl	80031ec <HAL_TIM_ConfigClockSource>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800065a:	f000 f93d 	bl	80008d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800065e:	2300      	movs	r3, #0
 8000660:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000662:	2300      	movs	r3, #0
 8000664:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000666:	463b      	mov	r3, r7
 8000668:	4619      	mov	r1, r3
 800066a:	4806      	ldr	r0, [pc, #24]	; (8000684 <MX_TIM2_Init+0x94>)
 800066c:	f002 ffc8 	bl	8003600 <HAL_TIMEx_MasterConfigSynchronization>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000676:	f000 f92f 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	3718      	adds	r7, #24
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000110 	.word	0x20000110

08000688 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800068e:	f107 0308 	add.w	r3, r7, #8
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800069c:	463b      	mov	r3, r7
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006a4:	4b1d      	ldr	r3, [pc, #116]	; (800071c <MX_TIM3_Init+0x94>)
 80006a6:	4a1e      	ldr	r2, [pc, #120]	; (8000720 <MX_TIM3_Init+0x98>)
 80006a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 600-1;
 80006aa:	4b1c      	ldr	r3, [pc, #112]	; (800071c <MX_TIM3_Init+0x94>)
 80006ac:	f240 2257 	movw	r2, #599	; 0x257
 80006b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b2:	4b1a      	ldr	r3, [pc, #104]	; (800071c <MX_TIM3_Init+0x94>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80006b8:	4b18      	ldr	r3, [pc, #96]	; (800071c <MX_TIM3_Init+0x94>)
 80006ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c0:	4b16      	ldr	r3, [pc, #88]	; (800071c <MX_TIM3_Init+0x94>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c6:	4b15      	ldr	r3, [pc, #84]	; (800071c <MX_TIM3_Init+0x94>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006cc:	4813      	ldr	r0, [pc, #76]	; (800071c <MX_TIM3_Init+0x94>)
 80006ce:	f002 fbd3 	bl	8002e78 <HAL_TIM_Base_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80006d8:	f000 f8fe 	bl	80008d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006e2:	f107 0308 	add.w	r3, r7, #8
 80006e6:	4619      	mov	r1, r3
 80006e8:	480c      	ldr	r0, [pc, #48]	; (800071c <MX_TIM3_Init+0x94>)
 80006ea:	f002 fd7f 	bl	80031ec <HAL_TIM_ConfigClockSource>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80006f4:	f000 f8f0 	bl	80008d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f8:	2300      	movs	r3, #0
 80006fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006fc:	2300      	movs	r3, #0
 80006fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000700:	463b      	mov	r3, r7
 8000702:	4619      	mov	r1, r3
 8000704:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_TIM3_Init+0x94>)
 8000706:	f002 ff7b 	bl	8003600 <HAL_TIMEx_MasterConfigSynchronization>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000710:	f000 f8e2 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000158 	.word	0x20000158
 8000720:	40000400 	.word	0x40000400

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b088      	sub	sp, #32
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 030c 	add.w	r3, r7, #12
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	4b1e      	ldr	r3, [pc, #120]	; (80007b8 <MX_GPIO_Init+0x94>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a1d      	ldr	r2, [pc, #116]	; (80007b8 <MX_GPIO_Init+0x94>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <MX_GPIO_Init+0x94>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <MX_GPIO_Init+0x94>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a16      	ldr	r2, [pc, #88]	; (80007b8 <MX_GPIO_Init+0x94>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_GPIO_Init+0x94>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Col0_Pin|Col1_Pin|Col2_Pin|Col3_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	210f      	movs	r1, #15
 8000776:	4811      	ldr	r0, [pc, #68]	; (80007bc <MX_GPIO_Init+0x98>)
 8000778:	f000 fcd0 	bl	800111c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Col0_Pin Col1_Pin Col2_Pin Col3_Pin */
  GPIO_InitStruct.Pin = Col0_Pin|Col1_Pin|Col2_Pin|Col3_Pin;
 800077c:	230f      	movs	r3, #15
 800077e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000780:	2311      	movs	r3, #17
 8000782:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000788:	2300      	movs	r3, #0
 800078a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	4619      	mov	r1, r3
 8000792:	480a      	ldr	r0, [pc, #40]	; (80007bc <MX_GPIO_Init+0x98>)
 8000794:	f000 fb3e 	bl	8000e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : Row0_Pin Row1_Pin Row2_Pin Row3_Pin */
  GPIO_InitStruct.Pin = Row0_Pin|Row1_Pin|Row2_Pin|Row3_Pin;
 8000798:	23f0      	movs	r3, #240	; 0xf0
 800079a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800079c:	2300      	movs	r3, #0
 800079e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	4619      	mov	r1, r3
 80007aa:	4804      	ldr	r0, [pc, #16]	; (80007bc <MX_GPIO_Init+0x98>)
 80007ac:	f000 fb32 	bl	8000e14 <HAL_GPIO_Init>

}
 80007b0:	bf00      	nop
 80007b2:	3720      	adds	r7, #32
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40020400 	.word	0x40020400

080007c0 <drive_column>:

/* USER CODE BEGIN 4 */
void drive_column(void) {
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
	col = (col + 1) & 0x3;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <drive_column+0x30>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	3301      	adds	r3, #1
 80007ca:	f003 0303 	and.w	r3, r3, #3
 80007ce:	4a08      	ldr	r2, [pc, #32]	; (80007f0 <drive_column+0x30>)
 80007d0:	6013      	str	r3, [r2, #0]
	GPIOB->BSRR = 0xf;
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <drive_column+0x34>)
 80007d4:	220f      	movs	r2, #15
 80007d6:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR = 0x1 << (col + 16);
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <drive_column+0x30>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	3310      	adds	r3, #16
 80007de:	2201      	movs	r2, #1
 80007e0:	409a      	lsls	r2, r3
 80007e2:	4b04      	ldr	r3, [pc, #16]	; (80007f4 <drive_column+0x34>)
 80007e4:	619a      	str	r2, [r3, #24]
}
 80007e6:	bf00      	nop
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	200001a0 	.word	0x200001a0
 80007f4:	40020400 	.word	0x40020400

080007f8 <read_rows>:

uint8_t read_rows(void) {
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
	return ~((GPIOB->IDR & 0xf0) >> 4) & 0xf;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <read_rows+0x20>)
 80007fe:	691b      	ldr	r3, [r3, #16]
 8000800:	091b      	lsrs	r3, r3, #4
 8000802:	b2db      	uxtb	r3, r3
 8000804:	43db      	mvns	r3, r3
 8000806:	b2db      	uxtb	r3, r3
 8000808:	f003 030f 	and.w	r3, r3, #15
 800080c:	b2db      	uxtb	r3, r3
}
 800080e:	4618      	mov	r0, r3
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	40020400 	.word	0x40020400

0800081c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4a27      	ldr	r2, [pc, #156]	; (80008c4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d13e      	bne.n	80008aa <HAL_TIM_PeriodElapsedCallback+0x8e>
		uint8_t rows = read_rows();
 800082c:	f7ff ffe4 	bl	80007f8 <read_rows>
 8000830:	4603      	mov	r3, r0
 8000832:	73fb      	strb	r3, [r7, #15]
		int idx = col / 2;
 8000834:	4b24      	ldr	r3, [pc, #144]	; (80008c8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	0fda      	lsrs	r2, r3, #31
 800083a:	4413      	add	r3, r2
 800083c:	105b      	asrs	r3, r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
		buffer[idx] &= ~(0xf << ((col % 2) * 4));
 8000840:	4b21      	ldr	r3, [pc, #132]	; (80008c8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	bfb8      	it	lt
 800084c:	425b      	neglt	r3, r3
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	220f      	movs	r2, #15
 8000852:	fa02 f303 	lsl.w	r3, r2, r3
 8000856:	43d9      	mvns	r1, r3
 8000858:	4a1c      	ldr	r2, [pc, #112]	; (80008cc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	4413      	add	r3, r2
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	b25a      	sxtb	r2, r3
 8000862:	b24b      	sxtb	r3, r1
 8000864:	4013      	ands	r3, r2
 8000866:	b25b      	sxtb	r3, r3
 8000868:	b2d9      	uxtb	r1, r3
 800086a:	4a18      	ldr	r2, [pc, #96]	; (80008cc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	4413      	add	r3, r2
 8000870:	460a      	mov	r2, r1
 8000872:	701a      	strb	r2, [r3, #0]
		buffer[idx] |= rows << ((col % 2) * 4);
 8000874:	7bfa      	ldrb	r2, [r7, #15]
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	f003 0301 	and.w	r3, r3, #1
 8000880:	bfb8      	it	lt
 8000882:	425b      	neglt	r3, r3
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	fa02 f103 	lsl.w	r1, r2, r3
 800088a:	4a10      	ldr	r2, [pc, #64]	; (80008cc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	4413      	add	r3, r2
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	b25a      	sxtb	r2, r3
 8000894:	b24b      	sxtb	r3, r1
 8000896:	4313      	orrs	r3, r2
 8000898:	b25b      	sxtb	r3, r3
 800089a:	b2d9      	uxtb	r1, r3
 800089c:	4a0b      	ldr	r2, [pc, #44]	; (80008cc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	4413      	add	r3, r2
 80008a2:	460a      	mov	r2, r1
 80008a4:	701a      	strb	r2, [r3, #0]
		drive_column();
 80008a6:	f7ff ff8b 	bl	80007c0 <drive_column>
	}

	if (htim == &htim3) {
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4a08      	ldr	r2, [pc, #32]	; (80008d0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d104      	bne.n	80008bc <HAL_TIM_PeriodElapsedCallback+0xa0>
		USBD_HID_SendReport(&hUsbDeviceFS, buffer, sizeof(buffer));
 80008b2:	2203      	movs	r2, #3
 80008b4:	4905      	ldr	r1, [pc, #20]	; (80008cc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80008b6:	4807      	ldr	r0, [pc, #28]	; (80008d4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80008b8:	f004 fd28 	bl	800530c <USBD_HID_SendReport>
	}
}
 80008bc:	bf00      	nop
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000110 	.word	0x20000110
 80008c8:	200001a0 	.word	0x200001a0
 80008cc:	200001a4 	.word	0x200001a4
 80008d0:	20000158 	.word	0x20000158
 80008d4:	200001b0 	.word	0x200001b0

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <Error_Handler+0x8>
	...

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <HAL_MspInit+0x4c>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f2:	4a0f      	ldr	r2, [pc, #60]	; (8000930 <HAL_MspInit+0x4c>)
 80008f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f8:	6453      	str	r3, [r2, #68]	; 0x44
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <HAL_MspInit+0x4c>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <HAL_MspInit+0x4c>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	4a08      	ldr	r2, [pc, #32]	; (8000930 <HAL_MspInit+0x4c>)
 8000910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000914:	6413      	str	r3, [r2, #64]	; 0x40
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_MspInit+0x4c>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800

08000934 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000944:	d116      	bne.n	8000974 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <HAL_TIM_Base_MspInit+0x80>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	4a19      	ldr	r2, [pc, #100]	; (80009b4 <HAL_TIM_Base_MspInit+0x80>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6413      	str	r3, [r2, #64]	; 0x40
 8000956:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <HAL_TIM_Base_MspInit+0x80>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2100      	movs	r1, #0
 8000966:	201c      	movs	r0, #28
 8000968:	f000 fa1d 	bl	8000da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800096c:	201c      	movs	r0, #28
 800096e:	f000 fa36 	bl	8000dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000972:	e01a      	b.n	80009aa <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a0f      	ldr	r2, [pc, #60]	; (80009b8 <HAL_TIM_Base_MspInit+0x84>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d115      	bne.n	80009aa <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <HAL_TIM_Base_MspInit+0x80>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	4a0b      	ldr	r2, [pc, #44]	; (80009b4 <HAL_TIM_Base_MspInit+0x80>)
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	6413      	str	r3, [r2, #64]	; 0x40
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <HAL_TIM_Base_MspInit+0x80>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2101      	movs	r1, #1
 800099e:	201d      	movs	r0, #29
 80009a0:	f000 fa01 	bl	8000da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80009a4:	201d      	movs	r0, #29
 80009a6:	f000 fa1a 	bl	8000dde <HAL_NVIC_EnableIRQ>
}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40000400 	.word	0x40000400

080009bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <NMI_Handler+0x4>

080009c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <HardFault_Handler+0x4>

080009c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <MemManage_Handler+0x4>

080009ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <BusFault_Handler+0x4>

080009d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <UsageFault_Handler+0x4>

080009da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a08:	f000 f8ae 	bl	8000b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <TIM2_IRQHandler+0x10>)
 8000a16:	f002 fae1 	bl	8002fdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000110 	.word	0x20000110

08000a24 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <TIM3_IRQHandler+0x10>)
 8000a2a:	f002 fad7 	bl	8002fdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000158 	.word	0x20000158

08000a38 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a3c:	4802      	ldr	r0, [pc, #8]	; (8000a48 <OTG_FS_IRQHandler+0x10>)
 8000a3e:	f000 fcd6 	bl	80013ee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	2000068c 	.word	0x2000068c

08000a4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <SystemInit+0x20>)
 8000a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a56:	4a05      	ldr	r2, [pc, #20]	; (8000a6c <SystemInit+0x20>)
 8000a58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aa8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a74:	480d      	ldr	r0, [pc, #52]	; (8000aac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a76:	490e      	ldr	r1, [pc, #56]	; (8000ab0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a78:	4a0e      	ldr	r2, [pc, #56]	; (8000ab4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a7c:	e002      	b.n	8000a84 <LoopCopyDataInit>

08000a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a82:	3304      	adds	r3, #4

08000a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a88:	d3f9      	bcc.n	8000a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8a:	4a0b      	ldr	r2, [pc, #44]	; (8000ab8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a8c:	4c0b      	ldr	r4, [pc, #44]	; (8000abc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a90:	e001      	b.n	8000a96 <LoopFillZerobss>

08000a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a94:	3204      	adds	r2, #4

08000a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a98:	d3fb      	bcc.n	8000a92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a9a:	f7ff ffd7 	bl	8000a4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a9e:	f006 fbdd 	bl	800725c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aa2:	f7ff fd1b 	bl	80004dc <main>
  bx  lr    
 8000aa6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000aa8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab0:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 8000ab4:	0800732c 	.word	0x0800732c
  ldr r2, =_sbss
 8000ab8:	200000f4 	.word	0x200000f4
  ldr r4, =_ebss
 8000abc:	20000bac 	.word	0x20000bac

08000ac0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ac0:	e7fe      	b.n	8000ac0 <ADC_IRQHandler>
	...

08000ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <HAL_Init+0x40>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a0d      	ldr	r2, [pc, #52]	; (8000b04 <HAL_Init+0x40>)
 8000ace:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ad2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <HAL_Init+0x40>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <HAL_Init+0x40>)
 8000ada:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ade:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae0:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <HAL_Init+0x40>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a07      	ldr	r2, [pc, #28]	; (8000b04 <HAL_Init+0x40>)
 8000ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aec:	2003      	movs	r0, #3
 8000aee:	f000 f94f 	bl	8000d90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000af2:	200f      	movs	r0, #15
 8000af4:	f000 f808 	bl	8000b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af8:	f7ff fef4 	bl	80008e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023c00 	.word	0x40023c00

08000b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <HAL_InitTick+0x54>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <HAL_InitTick+0x58>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 f967 	bl	8000dfa <HAL_SYSTICK_Config>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e00e      	b.n	8000b54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2b0f      	cmp	r3, #15
 8000b3a:	d80a      	bhi.n	8000b52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	6879      	ldr	r1, [r7, #4]
 8000b40:	f04f 30ff 	mov.w	r0, #4294967295
 8000b44:	f000 f92f 	bl	8000da6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b48:	4a06      	ldr	r2, [pc, #24]	; (8000b64 <HAL_InitTick+0x5c>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	e000      	b.n	8000b54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	20000008 	.word	0x20000008
 8000b64:	20000004 	.word	0x20000004

08000b68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_IncTick+0x20>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_IncTick+0x24>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4413      	add	r3, r2
 8000b78:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <HAL_IncTick+0x24>)
 8000b7a:	6013      	str	r3, [r2, #0]
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	20000008 	.word	0x20000008
 8000b8c:	200001a8 	.word	0x200001a8

08000b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  return uwTick;
 8000b94:	4b03      	ldr	r3, [pc, #12]	; (8000ba4 <HAL_GetTick+0x14>)
 8000b96:	681b      	ldr	r3, [r3, #0]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	200001a8 	.word	0x200001a8

08000ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bb0:	f7ff ffee 	bl	8000b90 <HAL_GetTick>
 8000bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc0:	d005      	beq.n	8000bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <HAL_Delay+0x44>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	4413      	add	r3, r2
 8000bcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bce:	bf00      	nop
 8000bd0:	f7ff ffde 	bl	8000b90 <HAL_GetTick>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d8f7      	bhi.n	8000bd0 <HAL_Delay+0x28>
  {
  }
}
 8000be0:	bf00      	nop
 8000be2:	bf00      	nop
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000008 	.word	0x20000008

08000bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <__NVIC_SetPriorityGrouping+0x44>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c06:	68ba      	ldr	r2, [r7, #8]
 8000c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c22:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <__NVIC_SetPriorityGrouping+0x44>)
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	60d3      	str	r3, [r2, #12]
}
 8000c28:	bf00      	nop
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c3c:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <__NVIC_GetPriorityGrouping+0x18>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	0a1b      	lsrs	r3, r3, #8
 8000c42:	f003 0307 	and.w	r3, r3, #7
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	db0b      	blt.n	8000c7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	f003 021f 	and.w	r2, r3, #31
 8000c6c:	4907      	ldr	r1, [pc, #28]	; (8000c8c <__NVIC_EnableIRQ+0x38>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	095b      	lsrs	r3, r3, #5
 8000c74:	2001      	movs	r0, #1
 8000c76:	fa00 f202 	lsl.w	r2, r0, r2
 8000c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000e100 	.word	0xe000e100

08000c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	6039      	str	r1, [r7, #0]
 8000c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db0a      	blt.n	8000cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	490c      	ldr	r1, [pc, #48]	; (8000cdc <__NVIC_SetPriority+0x4c>)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	0112      	lsls	r2, r2, #4
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	440b      	add	r3, r1
 8000cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb8:	e00a      	b.n	8000cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4908      	ldr	r1, [pc, #32]	; (8000ce0 <__NVIC_SetPriority+0x50>)
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	f003 030f 	and.w	r3, r3, #15
 8000cc6:	3b04      	subs	r3, #4
 8000cc8:	0112      	lsls	r2, r2, #4
 8000cca:	b2d2      	uxtb	r2, r2
 8000ccc:	440b      	add	r3, r1
 8000cce:	761a      	strb	r2, [r3, #24]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000e100 	.word	0xe000e100
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b089      	sub	sp, #36	; 0x24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	f1c3 0307 	rsb	r3, r3, #7
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	bf28      	it	cs
 8000d02:	2304      	movcs	r3, #4
 8000d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	2b06      	cmp	r3, #6
 8000d0c:	d902      	bls.n	8000d14 <NVIC_EncodePriority+0x30>
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3b03      	subs	r3, #3
 8000d12:	e000      	b.n	8000d16 <NVIC_EncodePriority+0x32>
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	f04f 32ff 	mov.w	r2, #4294967295
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43da      	mvns	r2, r3
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	401a      	ands	r2, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	fa01 f303 	lsl.w	r3, r1, r3
 8000d36:	43d9      	mvns	r1, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	4313      	orrs	r3, r2
         );
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3724      	adds	r7, #36	; 0x24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
	...

08000d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d5c:	d301      	bcc.n	8000d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e00f      	b.n	8000d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <SysTick_Config+0x40>)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d6a:	210f      	movs	r1, #15
 8000d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d70:	f7ff ff8e 	bl	8000c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <SysTick_Config+0x40>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d7a:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <SysTick_Config+0x40>)
 8000d7c:	2207      	movs	r2, #7
 8000d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	e000e010 	.word	0xe000e010

08000d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff ff29 	bl	8000bf0 <__NVIC_SetPriorityGrouping>
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b086      	sub	sp, #24
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	4603      	mov	r3, r0
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
 8000db2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db8:	f7ff ff3e 	bl	8000c38 <__NVIC_GetPriorityGrouping>
 8000dbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	68b9      	ldr	r1, [r7, #8]
 8000dc2:	6978      	ldr	r0, [r7, #20]
 8000dc4:	f7ff ff8e 	bl	8000ce4 <NVIC_EncodePriority>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dce:	4611      	mov	r1, r2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff5d 	bl	8000c90 <__NVIC_SetPriority>
}
 8000dd6:	bf00      	nop
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff31 	bl	8000c54 <__NVIC_EnableIRQ>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff ffa2 	bl	8000d4c <SysTick_Config>
 8000e08:	4603      	mov	r3, r0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	; 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
 8000e2e:	e159      	b.n	80010e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e30:	2201      	movs	r2, #1
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	697a      	ldr	r2, [r7, #20]
 8000e40:	4013      	ands	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	f040 8148 	bne.w	80010de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 0303 	and.w	r3, r3, #3
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d005      	beq.n	8000e66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d130      	bne.n	8000ec8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	2203      	movs	r2, #3
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	68da      	ldr	r2, [r3, #12]
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	091b      	lsrs	r3, r3, #4
 8000eb2:	f003 0201 	and.w	r2, r3, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f003 0303 	and.w	r3, r3, #3
 8000ed0:	2b03      	cmp	r3, #3
 8000ed2:	d017      	beq.n	8000f04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	2203      	movs	r2, #3
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	689a      	ldr	r2, [r3, #8]
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 0303 	and.w	r3, r3, #3
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d123      	bne.n	8000f58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	08da      	lsrs	r2, r3, #3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3208      	adds	r2, #8
 8000f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	f003 0307 	and.w	r3, r3, #7
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	220f      	movs	r2, #15
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	691a      	ldr	r2, [r3, #16]
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	08da      	lsrs	r2, r3, #3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3208      	adds	r2, #8
 8000f52:	69b9      	ldr	r1, [r7, #24]
 8000f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2203      	movs	r2, #3
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 0203 	and.w	r2, r3, #3
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	f000 80a2 	beq.w	80010de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	4b57      	ldr	r3, [pc, #348]	; (80010fc <HAL_GPIO_Init+0x2e8>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa2:	4a56      	ldr	r2, [pc, #344]	; (80010fc <HAL_GPIO_Init+0x2e8>)
 8000fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8000faa:	4b54      	ldr	r3, [pc, #336]	; (80010fc <HAL_GPIO_Init+0x2e8>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fb6:	4a52      	ldr	r2, [pc, #328]	; (8001100 <HAL_GPIO_Init+0x2ec>)
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	089b      	lsrs	r3, r3, #2
 8000fbc:	3302      	adds	r3, #2
 8000fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f003 0303 	and.w	r3, r3, #3
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	220f      	movs	r2, #15
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a49      	ldr	r2, [pc, #292]	; (8001104 <HAL_GPIO_Init+0x2f0>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d019      	beq.n	8001016 <HAL_GPIO_Init+0x202>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a48      	ldr	r2, [pc, #288]	; (8001108 <HAL_GPIO_Init+0x2f4>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d013      	beq.n	8001012 <HAL_GPIO_Init+0x1fe>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a47      	ldr	r2, [pc, #284]	; (800110c <HAL_GPIO_Init+0x2f8>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d00d      	beq.n	800100e <HAL_GPIO_Init+0x1fa>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a46      	ldr	r2, [pc, #280]	; (8001110 <HAL_GPIO_Init+0x2fc>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d007      	beq.n	800100a <HAL_GPIO_Init+0x1f6>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a45      	ldr	r2, [pc, #276]	; (8001114 <HAL_GPIO_Init+0x300>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d101      	bne.n	8001006 <HAL_GPIO_Init+0x1f2>
 8001002:	2304      	movs	r3, #4
 8001004:	e008      	b.n	8001018 <HAL_GPIO_Init+0x204>
 8001006:	2307      	movs	r3, #7
 8001008:	e006      	b.n	8001018 <HAL_GPIO_Init+0x204>
 800100a:	2303      	movs	r3, #3
 800100c:	e004      	b.n	8001018 <HAL_GPIO_Init+0x204>
 800100e:	2302      	movs	r3, #2
 8001010:	e002      	b.n	8001018 <HAL_GPIO_Init+0x204>
 8001012:	2301      	movs	r3, #1
 8001014:	e000      	b.n	8001018 <HAL_GPIO_Init+0x204>
 8001016:	2300      	movs	r3, #0
 8001018:	69fa      	ldr	r2, [r7, #28]
 800101a:	f002 0203 	and.w	r2, r2, #3
 800101e:	0092      	lsls	r2, r2, #2
 8001020:	4093      	lsls	r3, r2
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001028:	4935      	ldr	r1, [pc, #212]	; (8001100 <HAL_GPIO_Init+0x2ec>)
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	089b      	lsrs	r3, r3, #2
 800102e:	3302      	adds	r3, #2
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001036:	4b38      	ldr	r3, [pc, #224]	; (8001118 <HAL_GPIO_Init+0x304>)
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	43db      	mvns	r3, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4013      	ands	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800105a:	4a2f      	ldr	r2, [pc, #188]	; (8001118 <HAL_GPIO_Init+0x304>)
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001060:	4b2d      	ldr	r3, [pc, #180]	; (8001118 <HAL_GPIO_Init+0x304>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001084:	4a24      	ldr	r2, [pc, #144]	; (8001118 <HAL_GPIO_Init+0x304>)
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800108a:	4b23      	ldr	r3, [pc, #140]	; (8001118 <HAL_GPIO_Init+0x304>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ae:	4a1a      	ldr	r2, [pc, #104]	; (8001118 <HAL_GPIO_Init+0x304>)
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010b4:	4b18      	ldr	r3, [pc, #96]	; (8001118 <HAL_GPIO_Init+0x304>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d003      	beq.n	80010d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010d8:	4a0f      	ldr	r2, [pc, #60]	; (8001118 <HAL_GPIO_Init+0x304>)
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3301      	adds	r3, #1
 80010e2:	61fb      	str	r3, [r7, #28]
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	2b0f      	cmp	r3, #15
 80010e8:	f67f aea2 	bls.w	8000e30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3724      	adds	r7, #36	; 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800
 8001100:	40013800 	.word	0x40013800
 8001104:	40020000 	.word	0x40020000
 8001108:	40020400 	.word	0x40020400
 800110c:	40020800 	.word	0x40020800
 8001110:	40020c00 	.word	0x40020c00
 8001114:	40021000 	.word	0x40021000
 8001118:	40013c00 	.word	0x40013c00

0800111c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	807b      	strh	r3, [r7, #2]
 8001128:	4613      	mov	r3, r2
 800112a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800112c:	787b      	ldrb	r3, [r7, #1]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001132:	887a      	ldrh	r2, [r7, #2]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001138:	e003      	b.n	8001142 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800113a:	887b      	ldrh	r3, [r7, #2]
 800113c:	041a      	lsls	r2, r3, #16
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	619a      	str	r2, [r3, #24]
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800114e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001150:	b08f      	sub	sp, #60	; 0x3c
 8001152:	af0a      	add	r7, sp, #40	; 0x28
 8001154:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d101      	bne.n	8001160 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e10f      	b.n	8001380 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b00      	cmp	r3, #0
 8001170:	d106      	bne.n	8001180 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f005 fd76 	bl	8006c6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2203      	movs	r2, #3
 8001184:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800118c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001190:	2b00      	cmp	r3, #0
 8001192:	d102      	bne.n	800119a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f002 fbc5 	bl	800392e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	603b      	str	r3, [r7, #0]
 80011aa:	687e      	ldr	r6, [r7, #4]
 80011ac:	466d      	mov	r5, sp
 80011ae:	f106 0410 	add.w	r4, r6, #16
 80011b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011be:	e885 0003 	stmia.w	r5, {r0, r1}
 80011c2:	1d33      	adds	r3, r6, #4
 80011c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011c6:	6838      	ldr	r0, [r7, #0]
 80011c8:	f002 fa9c 	bl	8003704 <USB_CoreInit>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d005      	beq.n	80011de <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2202      	movs	r2, #2
 80011d6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e0d0      	b.n	8001380 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2100      	movs	r1, #0
 80011e4:	4618      	mov	r0, r3
 80011e6:	f002 fbb3 	bl	8003950 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011ea:	2300      	movs	r3, #0
 80011ec:	73fb      	strb	r3, [r7, #15]
 80011ee:	e04a      	b.n	8001286 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011f0:	7bfa      	ldrb	r2, [r7, #15]
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	4613      	mov	r3, r2
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	4413      	add	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	440b      	add	r3, r1
 80011fe:	333d      	adds	r3, #61	; 0x3d
 8001200:	2201      	movs	r2, #1
 8001202:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001204:	7bfa      	ldrb	r2, [r7, #15]
 8001206:	6879      	ldr	r1, [r7, #4]
 8001208:	4613      	mov	r3, r2
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	4413      	add	r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	440b      	add	r3, r1
 8001212:	333c      	adds	r3, #60	; 0x3c
 8001214:	7bfa      	ldrb	r2, [r7, #15]
 8001216:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001218:	7bfa      	ldrb	r2, [r7, #15]
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	b298      	uxth	r0, r3
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	4613      	mov	r3, r2
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	4413      	add	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	440b      	add	r3, r1
 800122a:	3344      	adds	r3, #68	; 0x44
 800122c:	4602      	mov	r2, r0
 800122e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001230:	7bfa      	ldrb	r2, [r7, #15]
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	4613      	mov	r3, r2
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	4413      	add	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	440b      	add	r3, r1
 800123e:	3340      	adds	r3, #64	; 0x40
 8001240:	2200      	movs	r2, #0
 8001242:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001244:	7bfa      	ldrb	r2, [r7, #15]
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	4613      	mov	r3, r2
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	4413      	add	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	440b      	add	r3, r1
 8001252:	3348      	adds	r3, #72	; 0x48
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001258:	7bfa      	ldrb	r2, [r7, #15]
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	4613      	mov	r3, r2
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	4413      	add	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	440b      	add	r3, r1
 8001266:	334c      	adds	r3, #76	; 0x4c
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800126c:	7bfa      	ldrb	r2, [r7, #15]
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	4613      	mov	r3, r2
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	4413      	add	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	440b      	add	r3, r1
 800127a:	3354      	adds	r3, #84	; 0x54
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	3301      	adds	r3, #1
 8001284:	73fb      	strb	r3, [r7, #15]
 8001286:	7bfa      	ldrb	r2, [r7, #15]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	429a      	cmp	r2, r3
 800128e:	d3af      	bcc.n	80011f0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001290:	2300      	movs	r3, #0
 8001292:	73fb      	strb	r3, [r7, #15]
 8001294:	e044      	b.n	8001320 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001296:	7bfa      	ldrb	r2, [r7, #15]
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	4613      	mov	r3, r2
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	4413      	add	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	440b      	add	r3, r1
 80012a4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012ac:	7bfa      	ldrb	r2, [r7, #15]
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	4613      	mov	r3, r2
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	4413      	add	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	440b      	add	r3, r1
 80012ba:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80012be:	7bfa      	ldrb	r2, [r7, #15]
 80012c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012c2:	7bfa      	ldrb	r2, [r7, #15]
 80012c4:	6879      	ldr	r1, [r7, #4]
 80012c6:	4613      	mov	r3, r2
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	4413      	add	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	440b      	add	r3, r1
 80012d0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012d8:	7bfa      	ldrb	r2, [r7, #15]
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	4613      	mov	r3, r2
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	4413      	add	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	440b      	add	r3, r1
 80012e6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012ee:	7bfa      	ldrb	r2, [r7, #15]
 80012f0:	6879      	ldr	r1, [r7, #4]
 80012f2:	4613      	mov	r3, r2
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	4413      	add	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	440b      	add	r3, r1
 80012fc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001304:	7bfa      	ldrb	r2, [r7, #15]
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	4613      	mov	r3, r2
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	4413      	add	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	440b      	add	r3, r1
 8001312:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	3301      	adds	r3, #1
 800131e:	73fb      	strb	r3, [r7, #15]
 8001320:	7bfa      	ldrb	r2, [r7, #15]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	429a      	cmp	r2, r3
 8001328:	d3b5      	bcc.n	8001296 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	687e      	ldr	r6, [r7, #4]
 8001332:	466d      	mov	r5, sp
 8001334:	f106 0410 	add.w	r4, r6, #16
 8001338:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800133a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800133c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800133e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001340:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001344:	e885 0003 	stmia.w	r5, {r0, r1}
 8001348:	1d33      	adds	r3, r6, #4
 800134a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800134c:	6838      	ldr	r0, [r7, #0]
 800134e:	f002 fb4b 	bl	80039e8 <USB_DevInit>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d005      	beq.n	8001364 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2202      	movs	r2, #2
 800135c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e00d      	b.n	8001380 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f003 fc9a 	bl	8004cb2 <USB_DevDisconnect>

  return HAL_OK;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001388 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800139c:	2b01      	cmp	r3, #1
 800139e:	d101      	bne.n	80013a4 <HAL_PCD_Start+0x1c>
 80013a0:	2302      	movs	r3, #2
 80013a2:	e020      	b.n	80013e6 <HAL_PCD_Start+0x5e>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d109      	bne.n	80013c8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d005      	beq.n	80013c8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f002 fa9d 	bl	800390c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f003 fc4a 	bl	8004c70 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80013ee:	b590      	push	{r4, r7, lr}
 80013f0:	b08d      	sub	sp, #52	; 0x34
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80013fc:	6a3b      	ldr	r3, [r7, #32]
 80013fe:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f003 fd08 	bl	8004e1a <USB_GetMode>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	f040 848a 	bne.w	8001d26 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f003 fc6c 	bl	8004cf4 <USB_ReadInterrupts>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	f000 8480 	beq.w	8001d24 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	0a1b      	lsrs	r3, r3, #8
 800142e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f003 fc59 	bl	8004cf4 <USB_ReadInterrupts>
 8001442:	4603      	mov	r3, r0
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b02      	cmp	r3, #2
 800144a:	d107      	bne.n	800145c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	695a      	ldr	r2, [r3, #20]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f002 0202 	and.w	r2, r2, #2
 800145a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f003 fc47 	bl	8004cf4 <USB_ReadInterrupts>
 8001466:	4603      	mov	r3, r0
 8001468:	f003 0310 	and.w	r3, r3, #16
 800146c:	2b10      	cmp	r3, #16
 800146e:	d161      	bne.n	8001534 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	699a      	ldr	r2, [r3, #24]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 0210 	bic.w	r2, r2, #16
 800147e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001480:	6a3b      	ldr	r3, [r7, #32]
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	f003 020f 	and.w	r2, r3, #15
 800148c:	4613      	mov	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	4413      	add	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	4413      	add	r3, r2
 800149c:	3304      	adds	r3, #4
 800149e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	0c5b      	lsrs	r3, r3, #17
 80014a4:	f003 030f 	and.w	r3, r3, #15
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d124      	bne.n	80014f6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80014b2:	4013      	ands	r3, r2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d035      	beq.n	8001524 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	091b      	lsrs	r3, r3, #4
 80014c0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	461a      	mov	r2, r3
 80014ca:	6a38      	ldr	r0, [r7, #32]
 80014cc:	f003 fa7e 	bl	80049cc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	691a      	ldr	r2, [r3, #16]
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	091b      	lsrs	r3, r3, #4
 80014d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014dc:	441a      	add	r2, r3
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	6a1a      	ldr	r2, [r3, #32]
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	091b      	lsrs	r3, r3, #4
 80014ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014ee:	441a      	add	r2, r3
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	621a      	str	r2, [r3, #32]
 80014f4:	e016      	b.n	8001524 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	0c5b      	lsrs	r3, r3, #17
 80014fa:	f003 030f 	and.w	r3, r3, #15
 80014fe:	2b06      	cmp	r3, #6
 8001500:	d110      	bne.n	8001524 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001508:	2208      	movs	r2, #8
 800150a:	4619      	mov	r1, r3
 800150c:	6a38      	ldr	r0, [r7, #32]
 800150e:	f003 fa5d 	bl	80049cc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	6a1a      	ldr	r2, [r3, #32]
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	091b      	lsrs	r3, r3, #4
 800151a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800151e:	441a      	add	r2, r3
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	699a      	ldr	r2, [r3, #24]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 0210 	orr.w	r2, r2, #16
 8001532:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f003 fbdb 	bl	8004cf4 <USB_ReadInterrupts>
 800153e:	4603      	mov	r3, r0
 8001540:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001544:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001548:	f040 80a7 	bne.w	800169a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800154c:	2300      	movs	r3, #0
 800154e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f003 fbe0 	bl	8004d1a <USB_ReadDevAllOutEpInterrupt>
 800155a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800155c:	e099      	b.n	8001692 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800155e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	2b00      	cmp	r3, #0
 8001566:	f000 808e 	beq.w	8001686 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	4611      	mov	r1, r2
 8001574:	4618      	mov	r0, r3
 8001576:	f003 fc04 	bl	8004d82 <USB_ReadDevOutEPInterrupt>
 800157a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b00      	cmp	r3, #0
 8001584:	d00c      	beq.n	80015a0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	015a      	lsls	r2, r3, #5
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	4413      	add	r3, r2
 800158e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001592:	461a      	mov	r2, r3
 8001594:	2301      	movs	r3, #1
 8001596:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001598:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 feaa 	bl	80022f4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d00c      	beq.n	80015c4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	015a      	lsls	r2, r3, #5
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	4413      	add	r3, r2
 80015b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015b6:	461a      	mov	r2, r3
 80015b8:	2308      	movs	r3, #8
 80015ba:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80015bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f000 ff80 	bl	80024c4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	f003 0310 	and.w	r3, r3, #16
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d008      	beq.n	80015e0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	015a      	lsls	r2, r3, #5
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	4413      	add	r3, r2
 80015d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015da:	461a      	mov	r2, r3
 80015dc:	2310      	movs	r3, #16
 80015de:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d030      	beq.n	800164c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80015ea:	6a3b      	ldr	r3, [r7, #32]
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015f2:	2b80      	cmp	r3, #128	; 0x80
 80015f4:	d109      	bne.n	800160a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	69fa      	ldr	r2, [r7, #28]
 8001600:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001604:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001608:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800160a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800160c:	4613      	mov	r3, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	4413      	add	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	4413      	add	r3, r2
 800161c:	3304      	adds	r3, #4
 800161e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	78db      	ldrb	r3, [r3, #3]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d108      	bne.n	800163a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	2200      	movs	r2, #0
 800162c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	b2db      	uxtb	r3, r3
 8001632:	4619      	mov	r1, r3
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f005 fc15 	bl	8006e64 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	015a      	lsls	r2, r3, #5
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	4413      	add	r3, r2
 8001642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001646:	461a      	mov	r2, r3
 8001648:	2302      	movs	r3, #2
 800164a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	f003 0320 	and.w	r3, r3, #32
 8001652:	2b00      	cmp	r3, #0
 8001654:	d008      	beq.n	8001668 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001658:	015a      	lsls	r2, r3, #5
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	4413      	add	r3, r2
 800165e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001662:	461a      	mov	r2, r3
 8001664:	2320      	movs	r3, #32
 8001666:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d009      	beq.n	8001686 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001674:	015a      	lsls	r2, r3, #5
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	4413      	add	r3, r2
 800167a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800167e:	461a      	mov	r2, r3
 8001680:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001684:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	3301      	adds	r3, #1
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800168c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800168e:	085b      	lsrs	r3, r3, #1
 8001690:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001694:	2b00      	cmp	r3, #0
 8001696:	f47f af62 	bne.w	800155e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f003 fb28 	bl	8004cf4 <USB_ReadInterrupts>
 80016a4:	4603      	mov	r3, r0
 80016a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80016ae:	f040 80db 	bne.w	8001868 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f003 fb49 	bl	8004d4e <USB_ReadDevAllInEpInterrupt>
 80016bc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80016be:	2300      	movs	r3, #0
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80016c2:	e0cd      	b.n	8001860 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80016c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 80c2 	beq.w	8001854 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	4611      	mov	r1, r2
 80016da:	4618      	mov	r0, r3
 80016dc:	f003 fb6f 	bl	8004dbe <USB_ReadDevInEPInterrupt>
 80016e0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d057      	beq.n	800179c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	f003 030f 	and.w	r3, r3, #15
 80016f2:	2201      	movs	r2, #1
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001700:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	43db      	mvns	r3, r3
 8001706:	69f9      	ldr	r1, [r7, #28]
 8001708:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800170c:	4013      	ands	r3, r2
 800170e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	015a      	lsls	r2, r3, #5
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	4413      	add	r3, r2
 8001718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800171c:	461a      	mov	r2, r3
 800171e:	2301      	movs	r3, #1
 8001720:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d132      	bne.n	8001790 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800172e:	4613      	mov	r3, r2
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	4413      	add	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	440b      	add	r3, r1
 8001738:	334c      	adds	r3, #76	; 0x4c
 800173a:	6819      	ldr	r1, [r3, #0]
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001740:	4613      	mov	r3, r2
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	4413      	add	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4403      	add	r3, r0
 800174a:	3348      	adds	r3, #72	; 0x48
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4419      	add	r1, r3
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001754:	4613      	mov	r3, r2
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	4413      	add	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4403      	add	r3, r0
 800175e:	334c      	adds	r3, #76	; 0x4c
 8001760:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	2b00      	cmp	r3, #0
 8001766:	d113      	bne.n	8001790 <HAL_PCD_IRQHandler+0x3a2>
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800176c:	4613      	mov	r3, r2
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	4413      	add	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	440b      	add	r3, r1
 8001776:	3354      	adds	r3, #84	; 0x54
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d108      	bne.n	8001790 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6818      	ldr	r0, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001788:	461a      	mov	r2, r3
 800178a:	2101      	movs	r1, #1
 800178c:	f003 fb76 	bl	8004e7c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001792:	b2db      	uxtb	r3, r3
 8001794:	4619      	mov	r1, r3
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f005 fae9 	bl	8006d6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d008      	beq.n	80017b8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	015a      	lsls	r2, r3, #5
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	4413      	add	r3, r2
 80017ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017b2:	461a      	mov	r2, r3
 80017b4:	2308      	movs	r3, #8
 80017b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	f003 0310 	and.w	r3, r3, #16
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d008      	beq.n	80017d4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	015a      	lsls	r2, r3, #5
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	4413      	add	r3, r2
 80017ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017ce:	461a      	mov	r2, r3
 80017d0:	2310      	movs	r3, #16
 80017d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d008      	beq.n	80017f0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	015a      	lsls	r2, r3, #5
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	4413      	add	r3, r2
 80017e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017ea:	461a      	mov	r2, r3
 80017ec:	2340      	movs	r3, #64	; 0x40
 80017ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d023      	beq.n	8001842 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80017fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017fc:	6a38      	ldr	r0, [r7, #32]
 80017fe:	f002 fa57 	bl	8003cb0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001804:	4613      	mov	r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	4413      	add	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	3338      	adds	r3, #56	; 0x38
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	3304      	adds	r3, #4
 8001814:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	78db      	ldrb	r3, [r3, #3]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d108      	bne.n	8001830 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	2200      	movs	r2, #0
 8001822:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	b2db      	uxtb	r3, r3
 8001828:	4619      	mov	r1, r3
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f005 fb2c 	bl	8006e88 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	015a      	lsls	r2, r3, #5
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	4413      	add	r3, r2
 8001838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800183c:	461a      	mov	r2, r3
 800183e:	2302      	movs	r3, #2
 8001840:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800184c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 fcc3 	bl	80021da <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	3301      	adds	r3, #1
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800185a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800185c:	085b      	lsrs	r3, r3, #1
 800185e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001862:	2b00      	cmp	r3, #0
 8001864:	f47f af2e 	bne.w	80016c4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f003 fa41 	bl	8004cf4 <USB_ReadInterrupts>
 8001872:	4603      	mov	r3, r0
 8001874:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001878:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800187c:	d122      	bne.n	80018c4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800188c:	f023 0301 	bic.w	r3, r3, #1
 8001890:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001898:	2b01      	cmp	r3, #1
 800189a:	d108      	bne.n	80018ae <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80018a4:	2100      	movs	r1, #0
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 feaa 	bl	8002600 <HAL_PCDEx_LPM_Callback>
 80018ac:	e002      	b.n	80018b4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f005 faca 	bl	8006e48 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	695a      	ldr	r2, [r3, #20]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80018c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f003 fa13 	bl	8004cf4 <USB_ReadInterrupts>
 80018ce:	4603      	mov	r3, r0
 80018d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018d8:	d112      	bne.n	8001900 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d102      	bne.n	80018f0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f005 fa86 	bl	8006dfc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	695a      	ldr	r2, [r3, #20]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80018fe:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f003 f9f5 	bl	8004cf4 <USB_ReadInterrupts>
 800190a:	4603      	mov	r3, r0
 800190c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001914:	f040 80b7 	bne.w	8001a86 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	69fa      	ldr	r2, [r7, #28]
 8001922:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001926:	f023 0301 	bic.w	r3, r3, #1
 800192a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2110      	movs	r1, #16
 8001932:	4618      	mov	r0, r3
 8001934:	f002 f9bc 	bl	8003cb0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001938:	2300      	movs	r3, #0
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800193c:	e046      	b.n	80019cc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800193e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001940:	015a      	lsls	r2, r3, #5
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	4413      	add	r3, r2
 8001946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800194a:	461a      	mov	r2, r3
 800194c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001950:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001954:	015a      	lsls	r2, r3, #5
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	4413      	add	r3, r2
 800195a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001962:	0151      	lsls	r1, r2, #5
 8001964:	69fa      	ldr	r2, [r7, #28]
 8001966:	440a      	add	r2, r1
 8001968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800196c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001970:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001974:	015a      	lsls	r2, r3, #5
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	4413      	add	r3, r2
 800197a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800197e:	461a      	mov	r2, r3
 8001980:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001984:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001988:	015a      	lsls	r2, r3, #5
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	4413      	add	r3, r2
 800198e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001996:	0151      	lsls	r1, r2, #5
 8001998:	69fa      	ldr	r2, [r7, #28]
 800199a:	440a      	add	r2, r1
 800199c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80019a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80019a4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80019a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a8:	015a      	lsls	r2, r3, #5
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	4413      	add	r3, r2
 80019ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019b6:	0151      	lsls	r1, r2, #5
 80019b8:	69fa      	ldr	r2, [r7, #28]
 80019ba:	440a      	add	r2, r1
 80019bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80019c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80019c4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c8:	3301      	adds	r3, #1
 80019ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d3b3      	bcc.n	800193e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	69fa      	ldr	r2, [r7, #28]
 80019e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019e4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80019e8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d016      	beq.n	8001a20 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019fc:	69fa      	ldr	r2, [r7, #28]
 80019fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a02:	f043 030b 	orr.w	r3, r3, #11
 8001a06:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	69fa      	ldr	r2, [r7, #28]
 8001a14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a18:	f043 030b 	orr.w	r3, r3, #11
 8001a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a1e:	e015      	b.n	8001a4c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	69fa      	ldr	r2, [r7, #28]
 8001a2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a2e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a32:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001a36:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	69fa      	ldr	r2, [r7, #28]
 8001a42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a46:	f043 030b 	orr.w	r3, r3, #11
 8001a4a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	69fa      	ldr	r2, [r7, #28]
 8001a56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a5a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001a5e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6818      	ldr	r0, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a70:	461a      	mov	r2, r3
 8001a72:	f003 fa03 	bl	8004e7c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	695a      	ldr	r2, [r3, #20]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001a84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f003 f932 	bl	8004cf4 <USB_ReadInterrupts>
 8001a90:	4603      	mov	r3, r0
 8001a92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a9a:	d124      	bne.n	8001ae6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f003 f9c8 	bl	8004e36 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f002 f97d 	bl	8003daa <USB_GetDevSpeed>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681c      	ldr	r4, [r3, #0]
 8001abc:	f001 f9d0 	bl	8002e60 <HAL_RCC_GetHCLKFreq>
 8001ac0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4620      	mov	r0, r4
 8001acc:	f001 fe7c 	bl	80037c8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f005 f974 	bl	8006dbe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	695a      	ldr	r2, [r3, #20]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001ae4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f003 f902 	bl	8004cf4 <USB_ReadInterrupts>
 8001af0:	4603      	mov	r3, r0
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b08      	cmp	r3, #8
 8001af8:	d10a      	bne.n	8001b10 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f005 f951 	bl	8006da2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	695a      	ldr	r2, [r3, #20]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f002 0208 	and.w	r2, r2, #8
 8001b0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f003 f8ed 	bl	8004cf4 <USB_ReadInterrupts>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b20:	2b80      	cmp	r3, #128	; 0x80
 8001b22:	d122      	bne.n	8001b6a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001b24:	6a3b      	ldr	r3, [r7, #32]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b2c:	6a3b      	ldr	r3, [r7, #32]
 8001b2e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b30:	2301      	movs	r3, #1
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
 8001b34:	e014      	b.n	8001b60 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	4413      	add	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	440b      	add	r3, r1
 8001b44:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d105      	bne.n	8001b5a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	4619      	mov	r1, r3
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 fb0f 	bl	8002178 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d3e5      	bcc.n	8001b36 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f003 f8c0 	bl	8004cf4 <USB_ReadInterrupts>
 8001b74:	4603      	mov	r3, r0
 8001b76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b7e:	d13b      	bne.n	8001bf8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b80:	2301      	movs	r3, #1
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24
 8001b84:	e02b      	b.n	8001bde <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	015a      	lsls	r2, r3, #5
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	4413      	add	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	3340      	adds	r3, #64	; 0x40
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d115      	bne.n	8001bd8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001bac:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	da12      	bge.n	8001bd8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	4413      	add	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	333f      	adds	r3, #63	; 0x3f
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 fad0 	bl	8002178 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	3301      	adds	r3, #1
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d3ce      	bcc.n	8001b86 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	695a      	ldr	r2, [r3, #20]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001bf6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f003 f879 	bl	8004cf4 <USB_ReadInterrupts>
 8001c02:	4603      	mov	r3, r0
 8001c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c0c:	d155      	bne.n	8001cba <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c0e:	2301      	movs	r3, #1
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
 8001c12:	e045      	b.n	8001ca0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	015a      	lsls	r2, r3, #5
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c28:	4613      	mov	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	440b      	add	r3, r1
 8001c32:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d12e      	bne.n	8001c9a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001c3c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	da2b      	bge.n	8001c9a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001c4e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d121      	bne.n	8001c9a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	4413      	add	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	440b      	add	r3, r1
 8001c64:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001c68:	2201      	movs	r2, #1
 8001c6a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001c6c:	6a3b      	ldr	r3, [r7, #32]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001c74:	6a3b      	ldr	r3, [r7, #32]
 8001c76:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001c78:	6a3b      	ldr	r3, [r7, #32]
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d10a      	bne.n	8001c9a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	69fa      	ldr	r2, [r7, #28]
 8001c8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c96:	6053      	str	r3, [r2, #4]
            break;
 8001c98:	e007      	b.n	8001caa <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d3b4      	bcc.n	8001c14 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	695a      	ldr	r2, [r3, #20]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001cb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f003 f818 	bl	8004cf4 <USB_ReadInterrupts>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cce:	d10a      	bne.n	8001ce6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f005 f8eb 	bl	8006eac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	695a      	ldr	r2, [r3, #20]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001ce4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f003 f802 	bl	8004cf4 <USB_ReadInterrupts>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	f003 0304 	and.w	r3, r3, #4
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	d115      	bne.n	8001d26 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d002      	beq.n	8001d12 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f005 f8db 	bl	8006ec8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6859      	ldr	r1, [r3, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	e000      	b.n	8001d26 <HAL_PCD_IRQHandler+0x938>
      return;
 8001d24:	bf00      	nop
    }
  }
}
 8001d26:	3734      	adds	r7, #52	; 0x34
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd90      	pop	{r4, r7, pc}

08001d2c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d101      	bne.n	8001d46 <HAL_PCD_SetAddress+0x1a>
 8001d42:	2302      	movs	r3, #2
 8001d44:	e013      	b.n	8001d6e <HAL_PCD_SetAddress+0x42>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	78fa      	ldrb	r2, [r7, #3]
 8001d52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	78fa      	ldrb	r2, [r7, #3]
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f002 ff60 	bl	8004c24 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b084      	sub	sp, #16
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
 8001d7e:	4608      	mov	r0, r1
 8001d80:	4611      	mov	r1, r2
 8001d82:	461a      	mov	r2, r3
 8001d84:	4603      	mov	r3, r0
 8001d86:	70fb      	strb	r3, [r7, #3]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	803b      	strh	r3, [r7, #0]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d90:	2300      	movs	r3, #0
 8001d92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	da0f      	bge.n	8001dbc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d9c:	78fb      	ldrb	r3, [r7, #3]
 8001d9e:	f003 020f 	and.w	r2, r3, #15
 8001da2:	4613      	mov	r3, r2
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	4413      	add	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	3338      	adds	r3, #56	; 0x38
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	4413      	add	r3, r2
 8001db0:	3304      	adds	r3, #4
 8001db2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2201      	movs	r2, #1
 8001db8:	705a      	strb	r2, [r3, #1]
 8001dba:	e00f      	b.n	8001ddc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dbc:	78fb      	ldrb	r3, [r7, #3]
 8001dbe:	f003 020f 	and.w	r2, r3, #15
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	4413      	add	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	3304      	adds	r3, #4
 8001dd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ddc:	78fb      	ldrb	r3, [r7, #3]
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001de8:	883a      	ldrh	r2, [r7, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	78ba      	ldrb	r2, [r7, #2]
 8001df2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	785b      	ldrb	r3, [r3, #1]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d004      	beq.n	8001e06 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e06:	78bb      	ldrb	r3, [r7, #2]
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d102      	bne.n	8001e12 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d101      	bne.n	8001e20 <HAL_PCD_EP_Open+0xaa>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	e00e      	b.n	8001e3e <HAL_PCD_EP_Open+0xc8>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68f9      	ldr	r1, [r7, #12]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f001 ffe0 	bl	8003df4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001e3c:	7afb      	ldrb	r3, [r7, #11]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b084      	sub	sp, #16
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	da0f      	bge.n	8001e7a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e5a:	78fb      	ldrb	r3, [r7, #3]
 8001e5c:	f003 020f 	and.w	r2, r3, #15
 8001e60:	4613      	mov	r3, r2
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	4413      	add	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	3338      	adds	r3, #56	; 0x38
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	3304      	adds	r3, #4
 8001e70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2201      	movs	r2, #1
 8001e76:	705a      	strb	r2, [r3, #1]
 8001e78:	e00f      	b.n	8001e9a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e7a:	78fb      	ldrb	r3, [r7, #3]
 8001e7c:	f003 020f 	and.w	r2, r3, #15
 8001e80:	4613      	mov	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	4413      	add	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	4413      	add	r3, r2
 8001e90:	3304      	adds	r3, #4
 8001e92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e9a:	78fb      	ldrb	r3, [r7, #3]
 8001e9c:	f003 030f 	and.w	r3, r3, #15
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d101      	bne.n	8001eb4 <HAL_PCD_EP_Close+0x6e>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	e00e      	b.n	8001ed2 <HAL_PCD_EP_Close+0x8c>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68f9      	ldr	r1, [r7, #12]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f002 f81e 	bl	8003f04 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b086      	sub	sp, #24
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	60f8      	str	r0, [r7, #12]
 8001ee2:	607a      	str	r2, [r7, #4]
 8001ee4:	603b      	str	r3, [r7, #0]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eea:	7afb      	ldrb	r3, [r7, #11]
 8001eec:	f003 020f 	and.w	r2, r3, #15
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	4413      	add	r3, r2
 8001f00:	3304      	adds	r3, #4
 8001f02:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	2200      	movs	r2, #0
 8001f14:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f1c:	7afb      	ldrb	r3, [r7, #11]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d102      	bne.n	8001f36 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f36:	7afb      	ldrb	r3, [r7, #11]
 8001f38:	f003 030f 	and.w	r3, r3, #15
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d109      	bne.n	8001f54 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6818      	ldr	r0, [r3, #0]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	6979      	ldr	r1, [r7, #20]
 8001f4e:	f002 fafd 	bl	800454c <USB_EP0StartXfer>
 8001f52:	e008      	b.n	8001f66 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6818      	ldr	r0, [r3, #0]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	461a      	mov	r2, r3
 8001f60:	6979      	ldr	r1, [r7, #20]
 8001f62:	f002 f8ab 	bl	80040bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	607a      	str	r2, [r7, #4]
 8001f7a:	603b      	str	r3, [r7, #0]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f80:	7afb      	ldrb	r3, [r7, #11]
 8001f82:	f003 020f 	and.w	r2, r3, #15
 8001f86:	4613      	mov	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	3338      	adds	r3, #56	; 0x38
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	4413      	add	r3, r2
 8001f94:	3304      	adds	r3, #4
 8001f96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	2201      	movs	r2, #1
 8001fae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fb0:	7afb      	ldrb	r3, [r7, #11]
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d102      	bne.n	8001fca <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fca:	7afb      	ldrb	r3, [r7, #11]
 8001fcc:	f003 030f 	and.w	r3, r3, #15
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d109      	bne.n	8001fe8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6818      	ldr	r0, [r3, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	461a      	mov	r2, r3
 8001fe0:	6979      	ldr	r1, [r7, #20]
 8001fe2:	f002 fab3 	bl	800454c <USB_EP0StartXfer>
 8001fe6:	e008      	b.n	8001ffa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6818      	ldr	r0, [r3, #0]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	6979      	ldr	r1, [r7, #20]
 8001ff6:	f002 f861 	bl	80040bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	f003 020f 	and.w	r2, r3, #15
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	429a      	cmp	r2, r3
 800201c:	d901      	bls.n	8002022 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e050      	b.n	80020c4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002022:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002026:	2b00      	cmp	r3, #0
 8002028:	da0f      	bge.n	800204a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800202a:	78fb      	ldrb	r3, [r7, #3]
 800202c:	f003 020f 	and.w	r2, r3, #15
 8002030:	4613      	mov	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4413      	add	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	3338      	adds	r3, #56	; 0x38
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	4413      	add	r3, r2
 800203e:	3304      	adds	r3, #4
 8002040:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2201      	movs	r2, #1
 8002046:	705a      	strb	r2, [r3, #1]
 8002048:	e00d      	b.n	8002066 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800204a:	78fa      	ldrb	r2, [r7, #3]
 800204c:	4613      	mov	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	4413      	add	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	4413      	add	r3, r2
 800205c:	3304      	adds	r3, #4
 800205e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2201      	movs	r2, #1
 800206a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	b2da      	uxtb	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800207e:	2b01      	cmp	r3, #1
 8002080:	d101      	bne.n	8002086 <HAL_PCD_EP_SetStall+0x82>
 8002082:	2302      	movs	r3, #2
 8002084:	e01e      	b.n	80020c4 <HAL_PCD_EP_SetStall+0xc0>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68f9      	ldr	r1, [r7, #12]
 8002094:	4618      	mov	r0, r3
 8002096:	f002 fcf1 	bl	8004a7c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800209a:	78fb      	ldrb	r3, [r7, #3]
 800209c:	f003 030f 	and.w	r3, r3, #15
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10a      	bne.n	80020ba <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6818      	ldr	r0, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	b2d9      	uxtb	r1, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80020b4:	461a      	mov	r2, r3
 80020b6:	f002 fee1 	bl	8004e7c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020d8:	78fb      	ldrb	r3, [r7, #3]
 80020da:	f003 020f 	and.w	r2, r3, #15
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d901      	bls.n	80020ea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e042      	b.n	8002170 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	da0f      	bge.n	8002112 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	f003 020f 	and.w	r2, r3, #15
 80020f8:	4613      	mov	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	4413      	add	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	3338      	adds	r3, #56	; 0x38
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	3304      	adds	r3, #4
 8002108:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2201      	movs	r2, #1
 800210e:	705a      	strb	r2, [r3, #1]
 8002110:	e00f      	b.n	8002132 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002112:	78fb      	ldrb	r3, [r7, #3]
 8002114:	f003 020f 	and.w	r2, r3, #15
 8002118:	4613      	mov	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4413      	add	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	4413      	add	r3, r2
 8002128:	3304      	adds	r3, #4
 800212a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002138:	78fb      	ldrb	r3, [r7, #3]
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	b2da      	uxtb	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_PCD_EP_ClrStall+0x86>
 800214e:	2302      	movs	r3, #2
 8002150:	e00e      	b.n	8002170 <HAL_PCD_EP_ClrStall+0xa4>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68f9      	ldr	r1, [r7, #12]
 8002160:	4618      	mov	r0, r3
 8002162:	f002 fcf9 	bl	8004b58 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002184:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002188:	2b00      	cmp	r3, #0
 800218a:	da0c      	bge.n	80021a6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	f003 020f 	and.w	r2, r3, #15
 8002192:	4613      	mov	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	4413      	add	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	3338      	adds	r3, #56	; 0x38
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	4413      	add	r3, r2
 80021a0:	3304      	adds	r3, #4
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	e00c      	b.n	80021c0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021a6:	78fb      	ldrb	r3, [r7, #3]
 80021a8:	f003 020f 	and.w	r2, r3, #15
 80021ac:	4613      	mov	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4413      	add	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	4413      	add	r3, r2
 80021bc:	3304      	adds	r3, #4
 80021be:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68f9      	ldr	r1, [r7, #12]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f002 fb18 	bl	80047fc <USB_EPStopXfer>
 80021cc:	4603      	mov	r3, r0
 80021ce:	72fb      	strb	r3, [r7, #11]

  return ret;
 80021d0:	7afb      	ldrb	r3, [r7, #11]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b08a      	sub	sp, #40	; 0x28
 80021de:	af02      	add	r7, sp, #8
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	4613      	mov	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4413      	add	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	3338      	adds	r3, #56	; 0x38
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	4413      	add	r3, r2
 80021fe:	3304      	adds	r3, #4
 8002200:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6a1a      	ldr	r2, [r3, #32]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	429a      	cmp	r2, r3
 800220c:	d901      	bls.n	8002212 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e06c      	b.n	80022ec <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	699a      	ldr	r2, [r3, #24]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6a1b      	ldr	r3, [r3, #32]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	69fa      	ldr	r2, [r7, #28]
 8002224:	429a      	cmp	r2, r3
 8002226:	d902      	bls.n	800222e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	3303      	adds	r3, #3
 8002232:	089b      	lsrs	r3, r3, #2
 8002234:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002236:	e02b      	b.n	8002290 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	699a      	ldr	r2, [r3, #24]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	69fa      	ldr	r2, [r7, #28]
 800224a:	429a      	cmp	r2, r3
 800224c:	d902      	bls.n	8002254 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	3303      	adds	r3, #3
 8002258:	089b      	lsrs	r3, r3, #2
 800225a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6919      	ldr	r1, [r3, #16]
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	b2da      	uxtb	r2, r3
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800226c:	b2db      	uxtb	r3, r3
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	4603      	mov	r3, r0
 8002272:	6978      	ldr	r0, [r7, #20]
 8002274:	f002 fb6c 	bl	8004950 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	691a      	ldr	r2, [r3, #16]
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	441a      	add	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a1a      	ldr	r2, [r3, #32]
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	441a      	add	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	015a      	lsls	r2, r3, #5
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4413      	add	r3, r2
 8002298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	b29b      	uxth	r3, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d809      	bhi.n	80022ba <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a1a      	ldr	r2, [r3, #32]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d203      	bcs.n	80022ba <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1be      	bne.n	8002238 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	699a      	ldr	r2, [r3, #24]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d811      	bhi.n	80022ea <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	f003 030f 	and.w	r3, r3, #15
 80022cc:	2201      	movs	r2, #1
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	43db      	mvns	r3, r3
 80022e0:	6939      	ldr	r1, [r7, #16]
 80022e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022e6:	4013      	ands	r3, r2
 80022e8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3720      	adds	r7, #32
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	333c      	adds	r3, #60	; 0x3c
 800230c:	3304      	adds	r3, #4
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	015a      	lsls	r2, r3, #5
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	4413      	add	r3, r2
 800231a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d17b      	bne.n	8002422 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	2b00      	cmp	r3, #0
 8002332:	d015      	beq.n	8002360 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	4a61      	ldr	r2, [pc, #388]	; (80024bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002338:	4293      	cmp	r3, r2
 800233a:	f240 80b9 	bls.w	80024b0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 80b3 	beq.w	80024b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	015a      	lsls	r2, r3, #5
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	4413      	add	r3, r2
 8002352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002356:	461a      	mov	r2, r3
 8002358:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800235c:	6093      	str	r3, [r2, #8]
 800235e:	e0a7      	b.n	80024b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	f003 0320 	and.w	r3, r3, #32
 8002366:	2b00      	cmp	r3, #0
 8002368:	d009      	beq.n	800237e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	015a      	lsls	r2, r3, #5
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	4413      	add	r3, r2
 8002372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002376:	461a      	mov	r2, r3
 8002378:	2320      	movs	r3, #32
 800237a:	6093      	str	r3, [r2, #8]
 800237c:	e098      	b.n	80024b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002384:	2b00      	cmp	r3, #0
 8002386:	f040 8093 	bne.w	80024b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	4a4b      	ldr	r2, [pc, #300]	; (80024bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d90f      	bls.n	80023b2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00a      	beq.n	80023b2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	015a      	lsls	r2, r3, #5
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	4413      	add	r3, r2
 80023a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023a8:	461a      	mov	r2, r3
 80023aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023ae:	6093      	str	r3, [r2, #8]
 80023b0:	e07e      	b.n	80024b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	4613      	mov	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	4413      	add	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	4413      	add	r3, r2
 80023c4:	3304      	adds	r3, #4
 80023c6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	69da      	ldr	r2, [r3, #28]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	0159      	lsls	r1, r3, #5
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	440b      	add	r3, r1
 80023d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023de:	1ad2      	subs	r2, r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d114      	bne.n	8002414 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d109      	bne.n	8002406 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023fc:	461a      	mov	r2, r3
 80023fe:	2101      	movs	r1, #1
 8002400:	f002 fd3c 	bl	8004e7c <USB_EP0_OutStart>
 8002404:	e006      	b.n	8002414 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	691a      	ldr	r2, [r3, #16]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	441a      	add	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	b2db      	uxtb	r3, r3
 8002418:	4619      	mov	r1, r3
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f004 fc8c 	bl	8006d38 <HAL_PCD_DataOutStageCallback>
 8002420:	e046      	b.n	80024b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	4a26      	ldr	r2, [pc, #152]	; (80024c0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d124      	bne.n	8002474 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00a      	beq.n	800244a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	015a      	lsls	r2, r3, #5
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	4413      	add	r3, r2
 800243c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002440:	461a      	mov	r2, r3
 8002442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002446:	6093      	str	r3, [r2, #8]
 8002448:	e032      	b.n	80024b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	f003 0320 	and.w	r3, r3, #32
 8002450:	2b00      	cmp	r3, #0
 8002452:	d008      	beq.n	8002466 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	015a      	lsls	r2, r3, #5
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	4413      	add	r3, r2
 800245c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002460:	461a      	mov	r2, r3
 8002462:	2320      	movs	r3, #32
 8002464:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	4619      	mov	r1, r3
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f004 fc63 	bl	8006d38 <HAL_PCD_DataOutStageCallback>
 8002472:	e01d      	b.n	80024b0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d114      	bne.n	80024a4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	4613      	mov	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	4413      	add	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	440b      	add	r3, r1
 8002488:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d108      	bne.n	80024a4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6818      	ldr	r0, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800249c:	461a      	mov	r2, r3
 800249e:	2100      	movs	r1, #0
 80024a0:	f002 fcec 	bl	8004e7c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	4619      	mov	r1, r3
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f004 fc44 	bl	8006d38 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3720      	adds	r7, #32
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	4f54300a 	.word	0x4f54300a
 80024c0:	4f54310a 	.word	0x4f54310a

080024c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	333c      	adds	r3, #60	; 0x3c
 80024dc:	3304      	adds	r3, #4
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	015a      	lsls	r2, r3, #5
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	4413      	add	r3, r2
 80024ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	4a15      	ldr	r2, [pc, #84]	; (800254c <PCD_EP_OutSetupPacket_int+0x88>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d90e      	bls.n	8002518 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002500:	2b00      	cmp	r3, #0
 8002502:	d009      	beq.n	8002518 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	015a      	lsls	r2, r3, #5
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	4413      	add	r3, r2
 800250c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002510:	461a      	mov	r2, r3
 8002512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002516:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f004 fbfb 	bl	8006d14 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	4a0a      	ldr	r2, [pc, #40]	; (800254c <PCD_EP_OutSetupPacket_int+0x88>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d90c      	bls.n	8002540 <PCD_EP_OutSetupPacket_int+0x7c>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d108      	bne.n	8002540 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6818      	ldr	r0, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002538:	461a      	mov	r2, r3
 800253a:	2101      	movs	r1, #1
 800253c:	f002 fc9e 	bl	8004e7c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	4f54300a 	.word	0x4f54300a

08002550 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	70fb      	strb	r3, [r7, #3]
 800255c:	4613      	mov	r3, r2
 800255e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002568:	78fb      	ldrb	r3, [r7, #3]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d107      	bne.n	800257e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800256e:	883b      	ldrh	r3, [r7, #0]
 8002570:	0419      	lsls	r1, r3, #16
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	430a      	orrs	r2, r1
 800257a:	629a      	str	r2, [r3, #40]	; 0x28
 800257c:	e028      	b.n	80025d0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002584:	0c1b      	lsrs	r3, r3, #16
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	4413      	add	r3, r2
 800258a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800258c:	2300      	movs	r3, #0
 800258e:	73fb      	strb	r3, [r7, #15]
 8002590:	e00d      	b.n	80025ae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	7bfb      	ldrb	r3, [r7, #15]
 8002598:	3340      	adds	r3, #64	; 0x40
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4413      	add	r3, r2
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	0c1b      	lsrs	r3, r3, #16
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	4413      	add	r3, r2
 80025a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
 80025aa:	3301      	adds	r3, #1
 80025ac:	73fb      	strb	r3, [r7, #15]
 80025ae:	7bfa      	ldrb	r2, [r7, #15]
 80025b0:	78fb      	ldrb	r3, [r7, #3]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d3ec      	bcc.n	8002592 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80025b8:	883b      	ldrh	r3, [r7, #0]
 80025ba:	0418      	lsls	r0, r3, #16
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6819      	ldr	r1, [r3, #0]
 80025c0:	78fb      	ldrb	r3, [r7, #3]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	4302      	orrs	r2, r0
 80025c8:	3340      	adds	r3, #64	; 0x40
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
 80025e6:	460b      	mov	r3, r1
 80025e8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	887a      	ldrh	r2, [r7, #2]
 80025f0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e267      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d075      	beq.n	8002722 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002636:	4b88      	ldr	r3, [pc, #544]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 030c 	and.w	r3, r3, #12
 800263e:	2b04      	cmp	r3, #4
 8002640:	d00c      	beq.n	800265c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002642:	4b85      	ldr	r3, [pc, #532]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800264a:	2b08      	cmp	r3, #8
 800264c:	d112      	bne.n	8002674 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800264e:	4b82      	ldr	r3, [pc, #520]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002656:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800265a:	d10b      	bne.n	8002674 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800265c:	4b7e      	ldr	r3, [pc, #504]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d05b      	beq.n	8002720 <HAL_RCC_OscConfig+0x108>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d157      	bne.n	8002720 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e242      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800267c:	d106      	bne.n	800268c <HAL_RCC_OscConfig+0x74>
 800267e:	4b76      	ldr	r3, [pc, #472]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a75      	ldr	r2, [pc, #468]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 8002684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	e01d      	b.n	80026c8 <HAL_RCC_OscConfig+0xb0>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002694:	d10c      	bne.n	80026b0 <HAL_RCC_OscConfig+0x98>
 8002696:	4b70      	ldr	r3, [pc, #448]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a6f      	ldr	r2, [pc, #444]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 800269c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	4b6d      	ldr	r3, [pc, #436]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a6c      	ldr	r2, [pc, #432]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 80026a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	e00b      	b.n	80026c8 <HAL_RCC_OscConfig+0xb0>
 80026b0:	4b69      	ldr	r3, [pc, #420]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a68      	ldr	r2, [pc, #416]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 80026b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	4b66      	ldr	r3, [pc, #408]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a65      	ldr	r2, [pc, #404]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 80026c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d013      	beq.n	80026f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d0:	f7fe fa5e 	bl	8000b90 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026d8:	f7fe fa5a 	bl	8000b90 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b64      	cmp	r3, #100	; 0x64
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e207      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ea:	4b5b      	ldr	r3, [pc, #364]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f0      	beq.n	80026d8 <HAL_RCC_OscConfig+0xc0>
 80026f6:	e014      	b.n	8002722 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f8:	f7fe fa4a 	bl	8000b90 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002700:	f7fe fa46 	bl	8000b90 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b64      	cmp	r3, #100	; 0x64
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e1f3      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002712:	4b51      	ldr	r3, [pc, #324]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f0      	bne.n	8002700 <HAL_RCC_OscConfig+0xe8>
 800271e:	e000      	b.n	8002722 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d063      	beq.n	80027f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800272e:	4b4a      	ldr	r3, [pc, #296]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 030c 	and.w	r3, r3, #12
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00b      	beq.n	8002752 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800273a:	4b47      	ldr	r3, [pc, #284]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002742:	2b08      	cmp	r3, #8
 8002744:	d11c      	bne.n	8002780 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002746:	4b44      	ldr	r3, [pc, #272]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d116      	bne.n	8002780 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002752:	4b41      	ldr	r3, [pc, #260]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d005      	beq.n	800276a <HAL_RCC_OscConfig+0x152>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d001      	beq.n	800276a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e1c7      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276a:	4b3b      	ldr	r3, [pc, #236]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	4937      	ldr	r1, [pc, #220]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 800277a:	4313      	orrs	r3, r2
 800277c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800277e:	e03a      	b.n	80027f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d020      	beq.n	80027ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002788:	4b34      	ldr	r3, [pc, #208]	; (800285c <HAL_RCC_OscConfig+0x244>)
 800278a:	2201      	movs	r2, #1
 800278c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278e:	f7fe f9ff 	bl	8000b90 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002796:	f7fe f9fb 	bl	8000b90 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e1a8      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a8:	4b2b      	ldr	r3, [pc, #172]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0f0      	beq.n	8002796 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b4:	4b28      	ldr	r3, [pc, #160]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	4925      	ldr	r1, [pc, #148]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	600b      	str	r3, [r1, #0]
 80027c8:	e015      	b.n	80027f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ca:	4b24      	ldr	r3, [pc, #144]	; (800285c <HAL_RCC_OscConfig+0x244>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d0:	f7fe f9de 	bl	8000b90 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027d8:	f7fe f9da 	bl	8000b90 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e187      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ea:	4b1b      	ldr	r3, [pc, #108]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d036      	beq.n	8002870 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d016      	beq.n	8002838 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800280a:	4b15      	ldr	r3, [pc, #84]	; (8002860 <HAL_RCC_OscConfig+0x248>)
 800280c:	2201      	movs	r2, #1
 800280e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002810:	f7fe f9be 	bl	8000b90 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002818:	f7fe f9ba 	bl	8000b90 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e167      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282a:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <HAL_RCC_OscConfig+0x240>)
 800282c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f0      	beq.n	8002818 <HAL_RCC_OscConfig+0x200>
 8002836:	e01b      	b.n	8002870 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002838:	4b09      	ldr	r3, [pc, #36]	; (8002860 <HAL_RCC_OscConfig+0x248>)
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283e:	f7fe f9a7 	bl	8000b90 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002844:	e00e      	b.n	8002864 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002846:	f7fe f9a3 	bl	8000b90 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d907      	bls.n	8002864 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e150      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
 8002858:	40023800 	.word	0x40023800
 800285c:	42470000 	.word	0x42470000
 8002860:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002864:	4b88      	ldr	r3, [pc, #544]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1ea      	bne.n	8002846 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 8097 	beq.w	80029ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800287e:	2300      	movs	r3, #0
 8002880:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002882:	4b81      	ldr	r3, [pc, #516]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10f      	bne.n	80028ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	60bb      	str	r3, [r7, #8]
 8002892:	4b7d      	ldr	r3, [pc, #500]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	4a7c      	ldr	r2, [pc, #496]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800289c:	6413      	str	r3, [r2, #64]	; 0x40
 800289e:	4b7a      	ldr	r3, [pc, #488]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028aa:	2301      	movs	r3, #1
 80028ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ae:	4b77      	ldr	r3, [pc, #476]	; (8002a8c <HAL_RCC_OscConfig+0x474>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d118      	bne.n	80028ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ba:	4b74      	ldr	r3, [pc, #464]	; (8002a8c <HAL_RCC_OscConfig+0x474>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a73      	ldr	r2, [pc, #460]	; (8002a8c <HAL_RCC_OscConfig+0x474>)
 80028c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028c6:	f7fe f963 	bl	8000b90 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ce:	f7fe f95f 	bl	8000b90 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e10c      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e0:	4b6a      	ldr	r3, [pc, #424]	; (8002a8c <HAL_RCC_OscConfig+0x474>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0f0      	beq.n	80028ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d106      	bne.n	8002902 <HAL_RCC_OscConfig+0x2ea>
 80028f4:	4b64      	ldr	r3, [pc, #400]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f8:	4a63      	ldr	r2, [pc, #396]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002900:	e01c      	b.n	800293c <HAL_RCC_OscConfig+0x324>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2b05      	cmp	r3, #5
 8002908:	d10c      	bne.n	8002924 <HAL_RCC_OscConfig+0x30c>
 800290a:	4b5f      	ldr	r3, [pc, #380]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 800290c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290e:	4a5e      	ldr	r2, [pc, #376]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002910:	f043 0304 	orr.w	r3, r3, #4
 8002914:	6713      	str	r3, [r2, #112]	; 0x70
 8002916:	4b5c      	ldr	r3, [pc, #368]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291a:	4a5b      	ldr	r2, [pc, #364]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	6713      	str	r3, [r2, #112]	; 0x70
 8002922:	e00b      	b.n	800293c <HAL_RCC_OscConfig+0x324>
 8002924:	4b58      	ldr	r3, [pc, #352]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002928:	4a57      	ldr	r2, [pc, #348]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 800292a:	f023 0301 	bic.w	r3, r3, #1
 800292e:	6713      	str	r3, [r2, #112]	; 0x70
 8002930:	4b55      	ldr	r3, [pc, #340]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002934:	4a54      	ldr	r2, [pc, #336]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002936:	f023 0304 	bic.w	r3, r3, #4
 800293a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d015      	beq.n	8002970 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002944:	f7fe f924 	bl	8000b90 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294a:	e00a      	b.n	8002962 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800294c:	f7fe f920 	bl	8000b90 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	f241 3288 	movw	r2, #5000	; 0x1388
 800295a:	4293      	cmp	r3, r2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e0cb      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002962:	4b49      	ldr	r3, [pc, #292]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0ee      	beq.n	800294c <HAL_RCC_OscConfig+0x334>
 800296e:	e014      	b.n	800299a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002970:	f7fe f90e 	bl	8000b90 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002976:	e00a      	b.n	800298e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002978:	f7fe f90a 	bl	8000b90 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	f241 3288 	movw	r2, #5000	; 0x1388
 8002986:	4293      	cmp	r3, r2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e0b5      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800298e:	4b3e      	ldr	r3, [pc, #248]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1ee      	bne.n	8002978 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800299a:	7dfb      	ldrb	r3, [r7, #23]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d105      	bne.n	80029ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a0:	4b39      	ldr	r3, [pc, #228]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	4a38      	ldr	r2, [pc, #224]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 80029a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 80a1 	beq.w	8002af8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029b6:	4b34      	ldr	r3, [pc, #208]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 030c 	and.w	r3, r3, #12
 80029be:	2b08      	cmp	r3, #8
 80029c0:	d05c      	beq.n	8002a7c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d141      	bne.n	8002a4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ca:	4b31      	ldr	r3, [pc, #196]	; (8002a90 <HAL_RCC_OscConfig+0x478>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d0:	f7fe f8de 	bl	8000b90 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d8:	f7fe f8da 	bl	8000b90 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e087      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ea:	4b27      	ldr	r3, [pc, #156]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1f0      	bne.n	80029d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69da      	ldr	r2, [r3, #28]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	019b      	lsls	r3, r3, #6
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0c:	085b      	lsrs	r3, r3, #1
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	041b      	lsls	r3, r3, #16
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a18:	061b      	lsls	r3, r3, #24
 8002a1a:	491b      	ldr	r1, [pc, #108]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a20:	4b1b      	ldr	r3, [pc, #108]	; (8002a90 <HAL_RCC_OscConfig+0x478>)
 8002a22:	2201      	movs	r2, #1
 8002a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a26:	f7fe f8b3 	bl	8000b90 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a2e:	f7fe f8af 	bl	8000b90 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e05c      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a40:	4b11      	ldr	r3, [pc, #68]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0f0      	beq.n	8002a2e <HAL_RCC_OscConfig+0x416>
 8002a4c:	e054      	b.n	8002af8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a4e:	4b10      	ldr	r3, [pc, #64]	; (8002a90 <HAL_RCC_OscConfig+0x478>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a54:	f7fe f89c 	bl	8000b90 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a5c:	f7fe f898 	bl	8000b90 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e045      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a6e:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f0      	bne.n	8002a5c <HAL_RCC_OscConfig+0x444>
 8002a7a:	e03d      	b.n	8002af8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d107      	bne.n	8002a94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e038      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40007000 	.word	0x40007000
 8002a90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a94:	4b1b      	ldr	r3, [pc, #108]	; (8002b04 <HAL_RCC_OscConfig+0x4ec>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d028      	beq.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d121      	bne.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d11a      	bne.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002aca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d111      	bne.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ada:	085b      	lsrs	r3, r3, #1
 8002adc:	3b01      	subs	r3, #1
 8002ade:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d107      	bne.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d001      	beq.n	8002af8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e000      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40023800 	.word	0x40023800

08002b08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0cc      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b1c:	4b68      	ldr	r3, [pc, #416]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d90c      	bls.n	8002b44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2a:	4b65      	ldr	r3, [pc, #404]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b32:	4b63      	ldr	r3, [pc, #396]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d001      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e0b8      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d020      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d005      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b5c:	4b59      	ldr	r3, [pc, #356]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	4a58      	ldr	r2, [pc, #352]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0308 	and.w	r3, r3, #8
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d005      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b74:	4b53      	ldr	r3, [pc, #332]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	4a52      	ldr	r2, [pc, #328]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b80:	4b50      	ldr	r3, [pc, #320]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	494d      	ldr	r1, [pc, #308]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d044      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d107      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba6:	4b47      	ldr	r3, [pc, #284]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d119      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e07f      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d003      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bc2:	2b03      	cmp	r3, #3
 8002bc4:	d107      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc6:	4b3f      	ldr	r3, [pc, #252]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d109      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e06f      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd6:	4b3b      	ldr	r3, [pc, #236]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e067      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002be6:	4b37      	ldr	r3, [pc, #220]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f023 0203 	bic.w	r2, r3, #3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	4934      	ldr	r1, [pc, #208]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bf8:	f7fd ffca 	bl	8000b90 <HAL_GetTick>
 8002bfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfe:	e00a      	b.n	8002c16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c00:	f7fd ffc6 	bl	8000b90 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e04f      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c16:	4b2b      	ldr	r3, [pc, #172]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 020c 	and.w	r2, r3, #12
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d1eb      	bne.n	8002c00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c28:	4b25      	ldr	r3, [pc, #148]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d20c      	bcs.n	8002c50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c36:	4b22      	ldr	r3, [pc, #136]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3e:	4b20      	ldr	r3, [pc, #128]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d001      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e032      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d008      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c5c:	4b19      	ldr	r3, [pc, #100]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	4916      	ldr	r1, [pc, #88]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d009      	beq.n	8002c8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c7a:	4b12      	ldr	r3, [pc, #72]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	490e      	ldr	r1, [pc, #56]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c8e:	f000 f821 	bl	8002cd4 <HAL_RCC_GetSysClockFreq>
 8002c92:	4602      	mov	r2, r0
 8002c94:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	091b      	lsrs	r3, r3, #4
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	490a      	ldr	r1, [pc, #40]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca0:	5ccb      	ldrb	r3, [r1, r3]
 8002ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca6:	4a09      	ldr	r2, [pc, #36]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002ca8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002caa:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fd ff2a 	bl	8000b08 <HAL_InitTick>

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40023c00 	.word	0x40023c00
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	0800730c 	.word	0x0800730c
 8002ccc:	20000000 	.word	0x20000000
 8002cd0:	20000004 	.word	0x20000004

08002cd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cd8:	b090      	sub	sp, #64	; 0x40
 8002cda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	637b      	str	r3, [r7, #52]	; 0x34
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cec:	4b59      	ldr	r3, [pc, #356]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 030c 	and.w	r3, r3, #12
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d00d      	beq.n	8002d14 <HAL_RCC_GetSysClockFreq+0x40>
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	f200 80a1 	bhi.w	8002e40 <HAL_RCC_GetSysClockFreq+0x16c>
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <HAL_RCC_GetSysClockFreq+0x34>
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d003      	beq.n	8002d0e <HAL_RCC_GetSysClockFreq+0x3a>
 8002d06:	e09b      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d08:	4b53      	ldr	r3, [pc, #332]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d0a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002d0c:	e09b      	b.n	8002e46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d0e:	4b53      	ldr	r3, [pc, #332]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d10:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d12:	e098      	b.n	8002e46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d14:	4b4f      	ldr	r3, [pc, #316]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d1c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d1e:	4b4d      	ldr	r3, [pc, #308]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d028      	beq.n	8002d7c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d2a:	4b4a      	ldr	r3, [pc, #296]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	099b      	lsrs	r3, r3, #6
 8002d30:	2200      	movs	r2, #0
 8002d32:	623b      	str	r3, [r7, #32]
 8002d34:	627a      	str	r2, [r7, #36]	; 0x24
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	4b47      	ldr	r3, [pc, #284]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d40:	fb03 f201 	mul.w	r2, r3, r1
 8002d44:	2300      	movs	r3, #0
 8002d46:	fb00 f303 	mul.w	r3, r0, r3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	4a43      	ldr	r2, [pc, #268]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d4e:	fba0 1202 	umull	r1, r2, r0, r2
 8002d52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d54:	460a      	mov	r2, r1
 8002d56:	62ba      	str	r2, [r7, #40]	; 0x28
 8002d58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d5a:	4413      	add	r3, r2
 8002d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d60:	2200      	movs	r2, #0
 8002d62:	61bb      	str	r3, [r7, #24]
 8002d64:	61fa      	str	r2, [r7, #28]
 8002d66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d6e:	f7fd fa33 	bl	80001d8 <__aeabi_uldivmod>
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	4613      	mov	r3, r2
 8002d78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d7a:	e053      	b.n	8002e24 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d7c:	4b35      	ldr	r3, [pc, #212]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	099b      	lsrs	r3, r3, #6
 8002d82:	2200      	movs	r2, #0
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	617a      	str	r2, [r7, #20]
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d8e:	f04f 0b00 	mov.w	fp, #0
 8002d92:	4652      	mov	r2, sl
 8002d94:	465b      	mov	r3, fp
 8002d96:	f04f 0000 	mov.w	r0, #0
 8002d9a:	f04f 0100 	mov.w	r1, #0
 8002d9e:	0159      	lsls	r1, r3, #5
 8002da0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002da4:	0150      	lsls	r0, r2, #5
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	ebb2 080a 	subs.w	r8, r2, sl
 8002dae:	eb63 090b 	sbc.w	r9, r3, fp
 8002db2:	f04f 0200 	mov.w	r2, #0
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002dbe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002dc2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002dc6:	ebb2 0408 	subs.w	r4, r2, r8
 8002dca:	eb63 0509 	sbc.w	r5, r3, r9
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	00eb      	lsls	r3, r5, #3
 8002dd8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ddc:	00e2      	lsls	r2, r4, #3
 8002dde:	4614      	mov	r4, r2
 8002de0:	461d      	mov	r5, r3
 8002de2:	eb14 030a 	adds.w	r3, r4, sl
 8002de6:	603b      	str	r3, [r7, #0]
 8002de8:	eb45 030b 	adc.w	r3, r5, fp
 8002dec:	607b      	str	r3, [r7, #4]
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	f04f 0300 	mov.w	r3, #0
 8002df6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dfa:	4629      	mov	r1, r5
 8002dfc:	028b      	lsls	r3, r1, #10
 8002dfe:	4621      	mov	r1, r4
 8002e00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e04:	4621      	mov	r1, r4
 8002e06:	028a      	lsls	r2, r1, #10
 8002e08:	4610      	mov	r0, r2
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e0e:	2200      	movs	r2, #0
 8002e10:	60bb      	str	r3, [r7, #8]
 8002e12:	60fa      	str	r2, [r7, #12]
 8002e14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e18:	f7fd f9de 	bl	80001d8 <__aeabi_uldivmod>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	4613      	mov	r3, r2
 8002e22:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e24:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	0c1b      	lsrs	r3, r3, #16
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	3301      	adds	r3, #1
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002e34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e3e:	e002      	b.n	8002e46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e40:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e42:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3740      	adds	r7, #64	; 0x40
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e52:	bf00      	nop
 8002e54:	40023800 	.word	0x40023800
 8002e58:	00f42400 	.word	0x00f42400
 8002e5c:	016e3600 	.word	0x016e3600

08002e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e64:	4b03      	ldr	r3, [pc, #12]	; (8002e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e66:	681b      	ldr	r3, [r3, #0]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	20000000 	.word	0x20000000

08002e78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e041      	b.n	8002f0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d106      	bne.n	8002ea4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7fd fd48 	bl	8000934 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3304      	adds	r3, #4
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	f000 fa88 	bl	80033cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
	...

08002f18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d001      	beq.n	8002f30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e044      	b.n	8002fba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2202      	movs	r2, #2
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0201 	orr.w	r2, r2, #1
 8002f46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a1e      	ldr	r2, [pc, #120]	; (8002fc8 <HAL_TIM_Base_Start_IT+0xb0>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d018      	beq.n	8002f84 <HAL_TIM_Base_Start_IT+0x6c>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f5a:	d013      	beq.n	8002f84 <HAL_TIM_Base_Start_IT+0x6c>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a1a      	ldr	r2, [pc, #104]	; (8002fcc <HAL_TIM_Base_Start_IT+0xb4>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d00e      	beq.n	8002f84 <HAL_TIM_Base_Start_IT+0x6c>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a19      	ldr	r2, [pc, #100]	; (8002fd0 <HAL_TIM_Base_Start_IT+0xb8>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d009      	beq.n	8002f84 <HAL_TIM_Base_Start_IT+0x6c>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a17      	ldr	r2, [pc, #92]	; (8002fd4 <HAL_TIM_Base_Start_IT+0xbc>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d004      	beq.n	8002f84 <HAL_TIM_Base_Start_IT+0x6c>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a16      	ldr	r2, [pc, #88]	; (8002fd8 <HAL_TIM_Base_Start_IT+0xc0>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d111      	bne.n	8002fa8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2b06      	cmp	r3, #6
 8002f94:	d010      	beq.n	8002fb8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f042 0201 	orr.w	r2, r2, #1
 8002fa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa6:	e007      	b.n	8002fb8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0201 	orr.w	r2, r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3714      	adds	r7, #20
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	40010000 	.word	0x40010000
 8002fcc:	40000400 	.word	0x40000400
 8002fd0:	40000800 	.word	0x40000800
 8002fd4:	40000c00 	.word	0x40000c00
 8002fd8:	40014000 	.word	0x40014000

08002fdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d122      	bne.n	8003038 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d11b      	bne.n	8003038 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f06f 0202 	mvn.w	r2, #2
 8003008:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f9b5 	bl	800338e <HAL_TIM_IC_CaptureCallback>
 8003024:	e005      	b.n	8003032 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f9a7 	bl	800337a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f9b8 	bl	80033a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	2b04      	cmp	r3, #4
 8003044:	d122      	bne.n	800308c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b04      	cmp	r3, #4
 8003052:	d11b      	bne.n	800308c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f06f 0204 	mvn.w	r2, #4
 800305c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2202      	movs	r2, #2
 8003062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f98b 	bl	800338e <HAL_TIM_IC_CaptureCallback>
 8003078:	e005      	b.n	8003086 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f97d 	bl	800337a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 f98e 	bl	80033a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	2b08      	cmp	r3, #8
 8003098:	d122      	bne.n	80030e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	f003 0308 	and.w	r3, r3, #8
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d11b      	bne.n	80030e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f06f 0208 	mvn.w	r2, #8
 80030b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2204      	movs	r2, #4
 80030b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f961 	bl	800338e <HAL_TIM_IC_CaptureCallback>
 80030cc:	e005      	b.n	80030da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f953 	bl	800337a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 f964 	bl	80033a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	f003 0310 	and.w	r3, r3, #16
 80030ea:	2b10      	cmp	r3, #16
 80030ec:	d122      	bne.n	8003134 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f003 0310 	and.w	r3, r3, #16
 80030f8:	2b10      	cmp	r3, #16
 80030fa:	d11b      	bne.n	8003134 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f06f 0210 	mvn.w	r2, #16
 8003104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2208      	movs	r2, #8
 800310a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f937 	bl	800338e <HAL_TIM_IC_CaptureCallback>
 8003120:	e005      	b.n	800312e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f929 	bl	800337a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 f93a 	bl	80033a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b01      	cmp	r3, #1
 8003140:	d10e      	bne.n	8003160 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b01      	cmp	r3, #1
 800314e:	d107      	bne.n	8003160 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f06f 0201 	mvn.w	r2, #1
 8003158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7fd fb5e 	bl	800081c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800316a:	2b80      	cmp	r3, #128	; 0x80
 800316c:	d10e      	bne.n	800318c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003178:	2b80      	cmp	r3, #128	; 0x80
 800317a:	d107      	bne.n	800318c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 fab2 	bl	80036f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003196:	2b40      	cmp	r3, #64	; 0x40
 8003198:	d10e      	bne.n	80031b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a4:	2b40      	cmp	r3, #64	; 0x40
 80031a6:	d107      	bne.n	80031b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f8ff 	bl	80033b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	f003 0320 	and.w	r3, r3, #32
 80031c2:	2b20      	cmp	r3, #32
 80031c4:	d10e      	bne.n	80031e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f003 0320 	and.w	r3, r3, #32
 80031d0:	2b20      	cmp	r3, #32
 80031d2:	d107      	bne.n	80031e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f06f 0220 	mvn.w	r2, #32
 80031dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 fa7c 	bl	80036dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031e4:	bf00      	nop
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031f6:	2300      	movs	r3, #0
 80031f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003200:	2b01      	cmp	r3, #1
 8003202:	d101      	bne.n	8003208 <HAL_TIM_ConfigClockSource+0x1c>
 8003204:	2302      	movs	r3, #2
 8003206:	e0b4      	b.n	8003372 <HAL_TIM_ConfigClockSource+0x186>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800322e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003240:	d03e      	beq.n	80032c0 <HAL_TIM_ConfigClockSource+0xd4>
 8003242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003246:	f200 8087 	bhi.w	8003358 <HAL_TIM_ConfigClockSource+0x16c>
 800324a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800324e:	f000 8086 	beq.w	800335e <HAL_TIM_ConfigClockSource+0x172>
 8003252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003256:	d87f      	bhi.n	8003358 <HAL_TIM_ConfigClockSource+0x16c>
 8003258:	2b70      	cmp	r3, #112	; 0x70
 800325a:	d01a      	beq.n	8003292 <HAL_TIM_ConfigClockSource+0xa6>
 800325c:	2b70      	cmp	r3, #112	; 0x70
 800325e:	d87b      	bhi.n	8003358 <HAL_TIM_ConfigClockSource+0x16c>
 8003260:	2b60      	cmp	r3, #96	; 0x60
 8003262:	d050      	beq.n	8003306 <HAL_TIM_ConfigClockSource+0x11a>
 8003264:	2b60      	cmp	r3, #96	; 0x60
 8003266:	d877      	bhi.n	8003358 <HAL_TIM_ConfigClockSource+0x16c>
 8003268:	2b50      	cmp	r3, #80	; 0x50
 800326a:	d03c      	beq.n	80032e6 <HAL_TIM_ConfigClockSource+0xfa>
 800326c:	2b50      	cmp	r3, #80	; 0x50
 800326e:	d873      	bhi.n	8003358 <HAL_TIM_ConfigClockSource+0x16c>
 8003270:	2b40      	cmp	r3, #64	; 0x40
 8003272:	d058      	beq.n	8003326 <HAL_TIM_ConfigClockSource+0x13a>
 8003274:	2b40      	cmp	r3, #64	; 0x40
 8003276:	d86f      	bhi.n	8003358 <HAL_TIM_ConfigClockSource+0x16c>
 8003278:	2b30      	cmp	r3, #48	; 0x30
 800327a:	d064      	beq.n	8003346 <HAL_TIM_ConfigClockSource+0x15a>
 800327c:	2b30      	cmp	r3, #48	; 0x30
 800327e:	d86b      	bhi.n	8003358 <HAL_TIM_ConfigClockSource+0x16c>
 8003280:	2b20      	cmp	r3, #32
 8003282:	d060      	beq.n	8003346 <HAL_TIM_ConfigClockSource+0x15a>
 8003284:	2b20      	cmp	r3, #32
 8003286:	d867      	bhi.n	8003358 <HAL_TIM_ConfigClockSource+0x16c>
 8003288:	2b00      	cmp	r3, #0
 800328a:	d05c      	beq.n	8003346 <HAL_TIM_ConfigClockSource+0x15a>
 800328c:	2b10      	cmp	r3, #16
 800328e:	d05a      	beq.n	8003346 <HAL_TIM_ConfigClockSource+0x15a>
 8003290:	e062      	b.n	8003358 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6818      	ldr	r0, [r3, #0]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	6899      	ldr	r1, [r3, #8]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	f000 f98d 	bl	80035c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	609a      	str	r2, [r3, #8]
      break;
 80032be:	e04f      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6818      	ldr	r0, [r3, #0]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	6899      	ldr	r1, [r3, #8]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f000 f976 	bl	80035c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032e2:	609a      	str	r2, [r3, #8]
      break;
 80032e4:	e03c      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6818      	ldr	r0, [r3, #0]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	6859      	ldr	r1, [r3, #4]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	461a      	mov	r2, r3
 80032f4:	f000 f8ea 	bl	80034cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2150      	movs	r1, #80	; 0x50
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 f943 	bl	800358a <TIM_ITRx_SetConfig>
      break;
 8003304:	e02c      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6818      	ldr	r0, [r3, #0]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	6859      	ldr	r1, [r3, #4]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	461a      	mov	r2, r3
 8003314:	f000 f909 	bl	800352a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2160      	movs	r1, #96	; 0x60
 800331e:	4618      	mov	r0, r3
 8003320:	f000 f933 	bl	800358a <TIM_ITRx_SetConfig>
      break;
 8003324:	e01c      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6818      	ldr	r0, [r3, #0]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	6859      	ldr	r1, [r3, #4]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	461a      	mov	r2, r3
 8003334:	f000 f8ca 	bl	80034cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2140      	movs	r1, #64	; 0x40
 800333e:	4618      	mov	r0, r3
 8003340:	f000 f923 	bl	800358a <TIM_ITRx_SetConfig>
      break;
 8003344:	e00c      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4619      	mov	r1, r3
 8003350:	4610      	mov	r0, r2
 8003352:	f000 f91a 	bl	800358a <TIM_ITRx_SetConfig>
      break;
 8003356:	e003      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	73fb      	strb	r3, [r7, #15]
      break;
 800335c:	e000      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800335e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003370:	7bfb      	ldrb	r3, [r7, #15]
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800337a:	b480      	push	{r7}
 800337c:	b083      	sub	sp, #12
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800338e:	b480      	push	{r7}
 8003390:	b083      	sub	sp, #12
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033b6:	b480      	push	{r7}
 80033b8:	b083      	sub	sp, #12
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033be:	bf00      	nop
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
	...

080033cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a34      	ldr	r2, [pc, #208]	; (80034b0 <TIM_Base_SetConfig+0xe4>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d00f      	beq.n	8003404 <TIM_Base_SetConfig+0x38>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ea:	d00b      	beq.n	8003404 <TIM_Base_SetConfig+0x38>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a31      	ldr	r2, [pc, #196]	; (80034b4 <TIM_Base_SetConfig+0xe8>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d007      	beq.n	8003404 <TIM_Base_SetConfig+0x38>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a30      	ldr	r2, [pc, #192]	; (80034b8 <TIM_Base_SetConfig+0xec>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d003      	beq.n	8003404 <TIM_Base_SetConfig+0x38>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a2f      	ldr	r2, [pc, #188]	; (80034bc <TIM_Base_SetConfig+0xf0>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d108      	bne.n	8003416 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800340a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	4313      	orrs	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a25      	ldr	r2, [pc, #148]	; (80034b0 <TIM_Base_SetConfig+0xe4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d01b      	beq.n	8003456 <TIM_Base_SetConfig+0x8a>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003424:	d017      	beq.n	8003456 <TIM_Base_SetConfig+0x8a>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a22      	ldr	r2, [pc, #136]	; (80034b4 <TIM_Base_SetConfig+0xe8>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d013      	beq.n	8003456 <TIM_Base_SetConfig+0x8a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a21      	ldr	r2, [pc, #132]	; (80034b8 <TIM_Base_SetConfig+0xec>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d00f      	beq.n	8003456 <TIM_Base_SetConfig+0x8a>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a20      	ldr	r2, [pc, #128]	; (80034bc <TIM_Base_SetConfig+0xf0>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d00b      	beq.n	8003456 <TIM_Base_SetConfig+0x8a>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a1f      	ldr	r2, [pc, #124]	; (80034c0 <TIM_Base_SetConfig+0xf4>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d007      	beq.n	8003456 <TIM_Base_SetConfig+0x8a>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a1e      	ldr	r2, [pc, #120]	; (80034c4 <TIM_Base_SetConfig+0xf8>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d003      	beq.n	8003456 <TIM_Base_SetConfig+0x8a>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a1d      	ldr	r2, [pc, #116]	; (80034c8 <TIM_Base_SetConfig+0xfc>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d108      	bne.n	8003468 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800345c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	4313      	orrs	r3, r2
 8003466:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	4313      	orrs	r3, r2
 8003474:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a08      	ldr	r2, [pc, #32]	; (80034b0 <TIM_Base_SetConfig+0xe4>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d103      	bne.n	800349c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	691a      	ldr	r2, [r3, #16]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	615a      	str	r2, [r3, #20]
}
 80034a2:	bf00      	nop
 80034a4:	3714      	adds	r7, #20
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	40010000 	.word	0x40010000
 80034b4:	40000400 	.word	0x40000400
 80034b8:	40000800 	.word	0x40000800
 80034bc:	40000c00 	.word	0x40000c00
 80034c0:	40014000 	.word	0x40014000
 80034c4:	40014400 	.word	0x40014400
 80034c8:	40014800 	.word	0x40014800

080034cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b087      	sub	sp, #28
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	f023 0201 	bic.w	r2, r3, #1
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4313      	orrs	r3, r2
 8003500:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f023 030a 	bic.w	r3, r3, #10
 8003508:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	4313      	orrs	r3, r2
 8003510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	621a      	str	r2, [r3, #32]
}
 800351e:	bf00      	nop
 8003520:	371c      	adds	r7, #28
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800352a:	b480      	push	{r7}
 800352c:	b087      	sub	sp, #28
 800352e:	af00      	add	r7, sp, #0
 8003530:	60f8      	str	r0, [r7, #12]
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	f023 0210 	bic.w	r2, r3, #16
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003554:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	031b      	lsls	r3, r3, #12
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	4313      	orrs	r3, r2
 800355e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003566:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4313      	orrs	r3, r2
 8003570:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	621a      	str	r2, [r3, #32]
}
 800357e:	bf00      	nop
 8003580:	371c      	adds	r7, #28
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800358a:	b480      	push	{r7}
 800358c:	b085      	sub	sp, #20
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
 8003592:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f043 0307 	orr.w	r3, r3, #7
 80035ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	609a      	str	r2, [r3, #8]
}
 80035b4:	bf00      	nop
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b087      	sub	sp, #28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
 80035cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	021a      	lsls	r2, r3, #8
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	609a      	str	r2, [r3, #8]
}
 80035f4:	bf00      	nop
 80035f6:	371c      	adds	r7, #28
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003610:	2b01      	cmp	r3, #1
 8003612:	d101      	bne.n	8003618 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003614:	2302      	movs	r3, #2
 8003616:	e050      	b.n	80036ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800363e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	4313      	orrs	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a1c      	ldr	r2, [pc, #112]	; (80036c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d018      	beq.n	800368e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003664:	d013      	beq.n	800368e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a18      	ldr	r2, [pc, #96]	; (80036cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d00e      	beq.n	800368e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a16      	ldr	r2, [pc, #88]	; (80036d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d009      	beq.n	800368e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a15      	ldr	r2, [pc, #84]	; (80036d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d004      	beq.n	800368e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a13      	ldr	r2, [pc, #76]	; (80036d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d10c      	bne.n	80036a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003694:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	4313      	orrs	r3, r2
 800369e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	40010000 	.word	0x40010000
 80036cc:	40000400 	.word	0x40000400
 80036d0:	40000800 	.word	0x40000800
 80036d4:	40000c00 	.word	0x40000c00
 80036d8:	40014000 	.word	0x40014000

080036dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003704:	b084      	sub	sp, #16
 8003706:	b580      	push	{r7, lr}
 8003708:	b084      	sub	sp, #16
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	f107 001c 	add.w	r0, r7, #28
 8003712:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003718:	2b01      	cmp	r3, #1
 800371a:	d122      	bne.n	8003762 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003720:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003746:	2b01      	cmp	r3, #1
 8003748:	d105      	bne.n	8003756 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f001 fbee 	bl	8004f38 <USB_CoreReset>
 800375c:	4603      	mov	r3, r0
 800375e:	73fb      	strb	r3, [r7, #15]
 8003760:	e01a      	b.n	8003798 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f001 fbe2 	bl	8004f38 <USB_CoreReset>
 8003774:	4603      	mov	r3, r0
 8003776:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800377a:	2b00      	cmp	r3, #0
 800377c:	d106      	bne.n	800378c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003782:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	639a      	str	r2, [r3, #56]	; 0x38
 800378a:	e005      	b.n	8003798 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003790:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379a:	2b01      	cmp	r3, #1
 800379c:	d10b      	bne.n	80037b6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f043 0206 	orr.w	r2, r3, #6
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f043 0220 	orr.w	r2, r3, #32
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037c2:	b004      	add	sp, #16
 80037c4:	4770      	bx	lr
	...

080037c8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b087      	sub	sp, #28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	4613      	mov	r3, r2
 80037d4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80037d6:	79fb      	ldrb	r3, [r7, #7]
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d165      	bne.n	80038a8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	4a41      	ldr	r2, [pc, #260]	; (80038e4 <USB_SetTurnaroundTime+0x11c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d906      	bls.n	80037f2 <USB_SetTurnaroundTime+0x2a>
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	4a40      	ldr	r2, [pc, #256]	; (80038e8 <USB_SetTurnaroundTime+0x120>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d202      	bcs.n	80037f2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80037ec:	230f      	movs	r3, #15
 80037ee:	617b      	str	r3, [r7, #20]
 80037f0:	e062      	b.n	80038b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	4a3c      	ldr	r2, [pc, #240]	; (80038e8 <USB_SetTurnaroundTime+0x120>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d306      	bcc.n	8003808 <USB_SetTurnaroundTime+0x40>
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	4a3b      	ldr	r2, [pc, #236]	; (80038ec <USB_SetTurnaroundTime+0x124>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d202      	bcs.n	8003808 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003802:	230e      	movs	r3, #14
 8003804:	617b      	str	r3, [r7, #20]
 8003806:	e057      	b.n	80038b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	4a38      	ldr	r2, [pc, #224]	; (80038ec <USB_SetTurnaroundTime+0x124>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d306      	bcc.n	800381e <USB_SetTurnaroundTime+0x56>
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	4a37      	ldr	r2, [pc, #220]	; (80038f0 <USB_SetTurnaroundTime+0x128>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d202      	bcs.n	800381e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003818:	230d      	movs	r3, #13
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	e04c      	b.n	80038b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	4a33      	ldr	r2, [pc, #204]	; (80038f0 <USB_SetTurnaroundTime+0x128>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d306      	bcc.n	8003834 <USB_SetTurnaroundTime+0x6c>
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	4a32      	ldr	r2, [pc, #200]	; (80038f4 <USB_SetTurnaroundTime+0x12c>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d802      	bhi.n	8003834 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800382e:	230c      	movs	r3, #12
 8003830:	617b      	str	r3, [r7, #20]
 8003832:	e041      	b.n	80038b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	4a2f      	ldr	r2, [pc, #188]	; (80038f4 <USB_SetTurnaroundTime+0x12c>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d906      	bls.n	800384a <USB_SetTurnaroundTime+0x82>
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	4a2e      	ldr	r2, [pc, #184]	; (80038f8 <USB_SetTurnaroundTime+0x130>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d802      	bhi.n	800384a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003844:	230b      	movs	r3, #11
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	e036      	b.n	80038b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	4a2a      	ldr	r2, [pc, #168]	; (80038f8 <USB_SetTurnaroundTime+0x130>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d906      	bls.n	8003860 <USB_SetTurnaroundTime+0x98>
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	4a29      	ldr	r2, [pc, #164]	; (80038fc <USB_SetTurnaroundTime+0x134>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d802      	bhi.n	8003860 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800385a:	230a      	movs	r3, #10
 800385c:	617b      	str	r3, [r7, #20]
 800385e:	e02b      	b.n	80038b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	4a26      	ldr	r2, [pc, #152]	; (80038fc <USB_SetTurnaroundTime+0x134>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d906      	bls.n	8003876 <USB_SetTurnaroundTime+0xae>
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4a25      	ldr	r2, [pc, #148]	; (8003900 <USB_SetTurnaroundTime+0x138>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d202      	bcs.n	8003876 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003870:	2309      	movs	r3, #9
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	e020      	b.n	80038b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	4a21      	ldr	r2, [pc, #132]	; (8003900 <USB_SetTurnaroundTime+0x138>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d306      	bcc.n	800388c <USB_SetTurnaroundTime+0xc4>
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	4a20      	ldr	r2, [pc, #128]	; (8003904 <USB_SetTurnaroundTime+0x13c>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d802      	bhi.n	800388c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003886:	2308      	movs	r3, #8
 8003888:	617b      	str	r3, [r7, #20]
 800388a:	e015      	b.n	80038b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	4a1d      	ldr	r2, [pc, #116]	; (8003904 <USB_SetTurnaroundTime+0x13c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d906      	bls.n	80038a2 <USB_SetTurnaroundTime+0xda>
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	4a1c      	ldr	r2, [pc, #112]	; (8003908 <USB_SetTurnaroundTime+0x140>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d202      	bcs.n	80038a2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800389c:	2307      	movs	r3, #7
 800389e:	617b      	str	r3, [r7, #20]
 80038a0:	e00a      	b.n	80038b8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80038a2:	2306      	movs	r3, #6
 80038a4:	617b      	str	r3, [r7, #20]
 80038a6:	e007      	b.n	80038b8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80038a8:	79fb      	ldrb	r3, [r7, #7]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d102      	bne.n	80038b4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80038ae:	2309      	movs	r3, #9
 80038b0:	617b      	str	r3, [r7, #20]
 80038b2:	e001      	b.n	80038b8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80038b4:	2309      	movs	r3, #9
 80038b6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	68da      	ldr	r2, [r3, #12]
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	029b      	lsls	r3, r3, #10
 80038cc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80038d0:	431a      	orrs	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	371c      	adds	r7, #28
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	00d8acbf 	.word	0x00d8acbf
 80038e8:	00e4e1c0 	.word	0x00e4e1c0
 80038ec:	00f42400 	.word	0x00f42400
 80038f0:	01067380 	.word	0x01067380
 80038f4:	011a499f 	.word	0x011a499f
 80038f8:	01312cff 	.word	0x01312cff
 80038fc:	014ca43f 	.word	0x014ca43f
 8003900:	016e3600 	.word	0x016e3600
 8003904:	01a6ab1f 	.word	0x01a6ab1f
 8003908:	01e84800 	.word	0x01e84800

0800390c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f043 0201 	orr.w	r2, r3, #1
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f023 0201 	bic.w	r2, r3, #1
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	460b      	mov	r3, r1
 800395a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800395c:	2300      	movs	r3, #0
 800395e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800396c:	78fb      	ldrb	r3, [r7, #3]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d115      	bne.n	800399e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800397e:	2001      	movs	r0, #1
 8003980:	f7fd f912 	bl	8000ba8 <HAL_Delay>
      ms++;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	3301      	adds	r3, #1
 8003988:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f001 fa45 	bl	8004e1a <USB_GetMode>
 8003990:	4603      	mov	r3, r0
 8003992:	2b01      	cmp	r3, #1
 8003994:	d01e      	beq.n	80039d4 <USB_SetCurrentMode+0x84>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2b31      	cmp	r3, #49	; 0x31
 800399a:	d9f0      	bls.n	800397e <USB_SetCurrentMode+0x2e>
 800399c:	e01a      	b.n	80039d4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800399e:	78fb      	ldrb	r3, [r7, #3]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d115      	bne.n	80039d0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80039b0:	2001      	movs	r0, #1
 80039b2:	f7fd f8f9 	bl	8000ba8 <HAL_Delay>
      ms++;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	3301      	adds	r3, #1
 80039ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f001 fa2c 	bl	8004e1a <USB_GetMode>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d005      	beq.n	80039d4 <USB_SetCurrentMode+0x84>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2b31      	cmp	r3, #49	; 0x31
 80039cc:	d9f0      	bls.n	80039b0 <USB_SetCurrentMode+0x60>
 80039ce:	e001      	b.n	80039d4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e005      	b.n	80039e0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b32      	cmp	r3, #50	; 0x32
 80039d8:	d101      	bne.n	80039de <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80039e8:	b084      	sub	sp, #16
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b086      	sub	sp, #24
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80039f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80039fa:	2300      	movs	r3, #0
 80039fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003a02:	2300      	movs	r3, #0
 8003a04:	613b      	str	r3, [r7, #16]
 8003a06:	e009      	b.n	8003a1c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	3340      	adds	r3, #64	; 0x40
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	2200      	movs	r2, #0
 8003a14:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	613b      	str	r3, [r7, #16]
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	2b0e      	cmp	r3, #14
 8003a20:	d9f2      	bls.n	8003a08 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d11c      	bne.n	8003a62 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a36:	f043 0302 	orr.w	r3, r3, #2
 8003a3a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a40:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a58:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	639a      	str	r2, [r3, #56]	; 0x38
 8003a60:	e00b      	b.n	8003a7a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a66:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a72:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003a80:	461a      	mov	r2, r3
 8003a82:	2300      	movs	r3, #0
 8003a84:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a94:	461a      	mov	r2, r3
 8003a96:	680b      	ldr	r3, [r1, #0]
 8003a98:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d10c      	bne.n	8003aba <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d104      	bne.n	8003ab0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f965 	bl	8003d78 <USB_SetDevSpeed>
 8003aae:	e008      	b.n	8003ac2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f960 	bl	8003d78 <USB_SetDevSpeed>
 8003ab8:	e003      	b.n	8003ac2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003aba:	2103      	movs	r1, #3
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f95b 	bl	8003d78 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003ac2:	2110      	movs	r1, #16
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f8f3 	bl	8003cb0 <USB_FlushTxFifo>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f91f 	bl	8003d18 <USB_FlushRxFifo>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aea:	461a      	mov	r2, r3
 8003aec:	2300      	movs	r3, #0
 8003aee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003af6:	461a      	mov	r2, r3
 8003af8:	2300      	movs	r3, #0
 8003afa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b02:	461a      	mov	r2, r3
 8003b04:	2300      	movs	r3, #0
 8003b06:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b08:	2300      	movs	r3, #0
 8003b0a:	613b      	str	r3, [r7, #16]
 8003b0c:	e043      	b.n	8003b96 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	015a      	lsls	r2, r3, #5
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	4413      	add	r3, r2
 8003b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b24:	d118      	bne.n	8003b58 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10a      	bne.n	8003b42 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	015a      	lsls	r2, r3, #5
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4413      	add	r3, r2
 8003b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b38:	461a      	mov	r2, r3
 8003b3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b3e:	6013      	str	r3, [r2, #0]
 8003b40:	e013      	b.n	8003b6a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	015a      	lsls	r2, r3, #5
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	4413      	add	r3, r2
 8003b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b4e:	461a      	mov	r2, r3
 8003b50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b54:	6013      	str	r3, [r2, #0]
 8003b56:	e008      	b.n	8003b6a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	015a      	lsls	r2, r3, #5
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4413      	add	r3, r2
 8003b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b64:	461a      	mov	r2, r3
 8003b66:	2300      	movs	r3, #0
 8003b68:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	015a      	lsls	r2, r3, #5
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	4413      	add	r3, r2
 8003b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b76:	461a      	mov	r2, r3
 8003b78:	2300      	movs	r3, #0
 8003b7a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b88:	461a      	mov	r2, r3
 8003b8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	3301      	adds	r3, #1
 8003b94:	613b      	str	r3, [r7, #16]
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d3b7      	bcc.n	8003b0e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	613b      	str	r3, [r7, #16]
 8003ba2:	e043      	b.n	8003c2c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	015a      	lsls	r2, r3, #5
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4413      	add	r3, r2
 8003bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bba:	d118      	bne.n	8003bee <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10a      	bne.n	8003bd8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	015a      	lsls	r2, r3, #5
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bce:	461a      	mov	r2, r3
 8003bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	e013      	b.n	8003c00 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be4:	461a      	mov	r2, r3
 8003be6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003bea:	6013      	str	r3, [r2, #0]
 8003bec:	e008      	b.n	8003c00 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	015a      	lsls	r2, r3, #5
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	015a      	lsls	r2, r3, #5
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	2300      	movs	r3, #0
 8003c10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	015a      	lsls	r2, r3, #5
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	4413      	add	r3, r2
 8003c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c1e:	461a      	mov	r2, r3
 8003c20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	613b      	str	r3, [r7, #16]
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d3b7      	bcc.n	8003ba4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c46:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003c54:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d105      	bne.n	8003c68 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	f043 0210 	orr.w	r2, r3, #16
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	699a      	ldr	r2, [r3, #24]
 8003c6c:	4b0f      	ldr	r3, [pc, #60]	; (8003cac <USB_DevInit+0x2c4>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d005      	beq.n	8003c86 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	f043 0208 	orr.w	r2, r3, #8
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d107      	bne.n	8003c9c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c94:	f043 0304 	orr.w	r3, r3, #4
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3718      	adds	r7, #24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ca8:	b004      	add	sp, #16
 8003caa:	4770      	bx	lr
 8003cac:	803c3800 	.word	0x803c3800

08003cb0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	4a13      	ldr	r2, [pc, #76]	; (8003d14 <USB_FlushTxFifo+0x64>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d901      	bls.n	8003cd0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e01b      	b.n	8003d08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	daf2      	bge.n	8003cbe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	019b      	lsls	r3, r3, #6
 8003ce0:	f043 0220 	orr.w	r2, r3, #32
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	3301      	adds	r3, #1
 8003cec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	4a08      	ldr	r2, [pc, #32]	; (8003d14 <USB_FlushTxFifo+0x64>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d901      	bls.n	8003cfa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e006      	b.n	8003d08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	f003 0320 	and.w	r3, r3, #32
 8003d02:	2b20      	cmp	r3, #32
 8003d04:	d0f0      	beq.n	8003ce8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3714      	adds	r7, #20
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	00030d40 	.word	0x00030d40

08003d18 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d20:	2300      	movs	r3, #0
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	3301      	adds	r3, #1
 8003d28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	4a11      	ldr	r2, [pc, #68]	; (8003d74 <USB_FlushRxFifo+0x5c>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d901      	bls.n	8003d36 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e018      	b.n	8003d68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	daf2      	bge.n	8003d24 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2210      	movs	r2, #16
 8003d46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	4a08      	ldr	r2, [pc, #32]	; (8003d74 <USB_FlushRxFifo+0x5c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d901      	bls.n	8003d5a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e006      	b.n	8003d68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	f003 0310 	and.w	r3, r3, #16
 8003d62:	2b10      	cmp	r3, #16
 8003d64:	d0f0      	beq.n	8003d48 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	00030d40 	.word	0x00030d40

08003d78 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	460b      	mov	r3, r1
 8003d82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	78fb      	ldrb	r3, [r7, #3]
 8003d92:	68f9      	ldr	r1, [r7, #12]
 8003d94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b087      	sub	sp, #28
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 0306 	and.w	r3, r3, #6
 8003dc2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d102      	bne.n	8003dd0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	75fb      	strb	r3, [r7, #23]
 8003dce:	e00a      	b.n	8003de6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d002      	beq.n	8003ddc <USB_GetDevSpeed+0x32>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2b06      	cmp	r3, #6
 8003dda:	d102      	bne.n	8003de2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003ddc:	2302      	movs	r3, #2
 8003dde:	75fb      	strb	r3, [r7, #23]
 8003de0:	e001      	b.n	8003de6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003de2:	230f      	movs	r3, #15
 8003de4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	371c      	adds	r7, #28
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	785b      	ldrb	r3, [r3, #1]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d13a      	bne.n	8003e86 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e16:	69da      	ldr	r2, [r3, #28]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	f003 030f 	and.w	r3, r3, #15
 8003e20:	2101      	movs	r1, #1
 8003e22:	fa01 f303 	lsl.w	r3, r1, r3
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	68f9      	ldr	r1, [r7, #12]
 8003e2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	015a      	lsls	r2, r3, #5
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4413      	add	r3, r2
 8003e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d155      	bne.n	8003ef4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	791b      	ldrb	r3, [r3, #4]
 8003e62:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e64:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	059b      	lsls	r3, r3, #22
 8003e6a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	0151      	lsls	r1, r2, #5
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	440a      	add	r2, r1
 8003e76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e82:	6013      	str	r3, [r2, #0]
 8003e84:	e036      	b.n	8003ef4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e8c:	69da      	ldr	r2, [r3, #28]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	f003 030f 	and.w	r3, r3, #15
 8003e96:	2101      	movs	r1, #1
 8003e98:	fa01 f303 	lsl.w	r3, r1, r3
 8003e9c:	041b      	lsls	r3, r3, #16
 8003e9e:	68f9      	ldr	r1, [r7, #12]
 8003ea0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	015a      	lsls	r2, r3, #5
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4413      	add	r3, r2
 8003eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d11a      	bne.n	8003ef4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	015a      	lsls	r2, r3, #5
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	791b      	ldrb	r3, [r3, #4]
 8003ed8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003eda:	430b      	orrs	r3, r1
 8003edc:	4313      	orrs	r3, r2
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	0151      	lsls	r1, r2, #5
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	440a      	add	r2, r1
 8003ee6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003eea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ef2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
	...

08003f04 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	785b      	ldrb	r3, [r3, #1]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d161      	bne.n	8003fe4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	015a      	lsls	r2, r3, #5
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4413      	add	r3, r2
 8003f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f36:	d11f      	bne.n	8003f78 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	0151      	lsls	r1, r2, #5
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	440a      	add	r2, r1
 8003f4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f56:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	015a      	lsls	r2, r3, #5
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	0151      	lsls	r1, r2, #5
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	440a      	add	r2, r1
 8003f6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f76:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	f003 030f 	and.w	r3, r3, #15
 8003f88:	2101      	movs	r1, #1
 8003f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	43db      	mvns	r3, r3
 8003f92:	68f9      	ldr	r1, [r7, #12]
 8003f94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f98:	4013      	ands	r3, r2
 8003f9a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa2:	69da      	ldr	r2, [r3, #28]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	f003 030f 	and.w	r3, r3, #15
 8003fac:	2101      	movs	r1, #1
 8003fae:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	43db      	mvns	r3, r3
 8003fb6:	68f9      	ldr	r1, [r7, #12]
 8003fb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	015a      	lsls	r2, r3, #5
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	0159      	lsls	r1, r3, #5
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	440b      	add	r3, r1
 8003fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fda:	4619      	mov	r1, r3
 8003fdc:	4b35      	ldr	r3, [pc, #212]	; (80040b4 <USB_DeactivateEndpoint+0x1b0>)
 8003fde:	4013      	ands	r3, r2
 8003fe0:	600b      	str	r3, [r1, #0]
 8003fe2:	e060      	b.n	80040a6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	015a      	lsls	r2, r3, #5
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	4413      	add	r3, r2
 8003fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ff6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ffa:	d11f      	bne.n	800403c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4413      	add	r3, r2
 8004004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	0151      	lsls	r1, r2, #5
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	440a      	add	r2, r1
 8004012:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004016:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800401a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	015a      	lsls	r2, r3, #5
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4413      	add	r3, r2
 8004024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	0151      	lsls	r1, r2, #5
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	440a      	add	r2, r1
 8004032:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004036:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800403a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004042:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	f003 030f 	and.w	r3, r3, #15
 800404c:	2101      	movs	r1, #1
 800404e:	fa01 f303 	lsl.w	r3, r1, r3
 8004052:	041b      	lsls	r3, r3, #16
 8004054:	43db      	mvns	r3, r3
 8004056:	68f9      	ldr	r1, [r7, #12]
 8004058:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800405c:	4013      	ands	r3, r2
 800405e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004066:	69da      	ldr	r2, [r3, #28]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	f003 030f 	and.w	r3, r3, #15
 8004070:	2101      	movs	r1, #1
 8004072:	fa01 f303 	lsl.w	r3, r1, r3
 8004076:	041b      	lsls	r3, r3, #16
 8004078:	43db      	mvns	r3, r3
 800407a:	68f9      	ldr	r1, [r7, #12]
 800407c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004080:	4013      	ands	r3, r2
 8004082:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4413      	add	r3, r2
 800408c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	0159      	lsls	r1, r3, #5
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	440b      	add	r3, r1
 800409a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409e:	4619      	mov	r1, r3
 80040a0:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <USB_DeactivateEndpoint+0x1b4>)
 80040a2:	4013      	ands	r3, r2
 80040a4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	ec337800 	.word	0xec337800
 80040b8:	eff37800 	.word	0xeff37800

080040bc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b08a      	sub	sp, #40	; 0x28
 80040c0:	af02      	add	r7, sp, #8
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	4613      	mov	r3, r2
 80040c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	785b      	ldrb	r3, [r3, #1]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	f040 815c 	bne.w	8004396 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d132      	bne.n	800414c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	015a      	lsls	r2, r3, #5
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	0151      	lsls	r1, r2, #5
 80040f8:	69fa      	ldr	r2, [r7, #28]
 80040fa:	440a      	add	r2, r1
 80040fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004100:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004104:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004108:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	015a      	lsls	r2, r3, #5
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	4413      	add	r3, r2
 8004112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	0151      	lsls	r1, r2, #5
 800411c:	69fa      	ldr	r2, [r7, #28]
 800411e:	440a      	add	r2, r1
 8004120:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004124:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004128:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	015a      	lsls	r2, r3, #5
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	4413      	add	r3, r2
 8004132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	0151      	lsls	r1, r2, #5
 800413c:	69fa      	ldr	r2, [r7, #28]
 800413e:	440a      	add	r2, r1
 8004140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004144:	0cdb      	lsrs	r3, r3, #19
 8004146:	04db      	lsls	r3, r3, #19
 8004148:	6113      	str	r3, [r2, #16]
 800414a:	e074      	b.n	8004236 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	015a      	lsls	r2, r3, #5
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	4413      	add	r3, r2
 8004154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	0151      	lsls	r1, r2, #5
 800415e:	69fa      	ldr	r2, [r7, #28]
 8004160:	440a      	add	r2, r1
 8004162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004166:	0cdb      	lsrs	r3, r3, #19
 8004168:	04db      	lsls	r3, r3, #19
 800416a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	4413      	add	r3, r2
 8004174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	0151      	lsls	r1, r2, #5
 800417e:	69fa      	ldr	r2, [r7, #28]
 8004180:	440a      	add	r2, r1
 8004182:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004186:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800418a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800418e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	015a      	lsls	r2, r3, #5
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	4413      	add	r3, r2
 8004198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800419c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	6999      	ldr	r1, [r3, #24]
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	440b      	add	r3, r1
 80041a8:	1e59      	subs	r1, r3, #1
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80041b2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80041b4:	4b9d      	ldr	r3, [pc, #628]	; (800442c <USB_EPStartXfer+0x370>)
 80041b6:	400b      	ands	r3, r1
 80041b8:	69b9      	ldr	r1, [r7, #24]
 80041ba:	0148      	lsls	r0, r1, #5
 80041bc:	69f9      	ldr	r1, [r7, #28]
 80041be:	4401      	add	r1, r0
 80041c0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80041c4:	4313      	orrs	r3, r2
 80041c6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d4:	691a      	ldr	r2, [r3, #16]
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041de:	69b9      	ldr	r1, [r7, #24]
 80041e0:	0148      	lsls	r0, r1, #5
 80041e2:	69f9      	ldr	r1, [r7, #28]
 80041e4:	4401      	add	r1, r0
 80041e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80041ea:	4313      	orrs	r3, r2
 80041ec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	791b      	ldrb	r3, [r3, #4]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d11f      	bne.n	8004236 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	0151      	lsls	r1, r2, #5
 8004208:	69fa      	ldr	r2, [r7, #28]
 800420a:	440a      	add	r2, r1
 800420c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004210:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004214:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	015a      	lsls	r2, r3, #5
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	4413      	add	r3, r2
 800421e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	0151      	lsls	r1, r2, #5
 8004228:	69fa      	ldr	r2, [r7, #28]
 800422a:	440a      	add	r2, r1
 800422c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004230:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004234:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004236:	79fb      	ldrb	r3, [r7, #7]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d14b      	bne.n	80042d4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d009      	beq.n	8004258 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	4413      	add	r3, r2
 800424c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004250:	461a      	mov	r2, r3
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	791b      	ldrb	r3, [r3, #4]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d128      	bne.n	80042b2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426c:	2b00      	cmp	r3, #0
 800426e:	d110      	bne.n	8004292 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	015a      	lsls	r2, r3, #5
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	4413      	add	r3, r2
 8004278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	0151      	lsls	r1, r2, #5
 8004282:	69fa      	ldr	r2, [r7, #28]
 8004284:	440a      	add	r2, r1
 8004286:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800428a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800428e:	6013      	str	r3, [r2, #0]
 8004290:	e00f      	b.n	80042b2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	4413      	add	r3, r2
 800429a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	0151      	lsls	r1, r2, #5
 80042a4:	69fa      	ldr	r2, [r7, #28]
 80042a6:	440a      	add	r2, r1
 80042a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042b0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	0151      	lsls	r1, r2, #5
 80042c4:	69fa      	ldr	r2, [r7, #28]
 80042c6:	440a      	add	r2, r1
 80042c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	e133      	b.n	800453c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	015a      	lsls	r2, r3, #5
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	0151      	lsls	r1, r2, #5
 80042e6:	69fa      	ldr	r2, [r7, #28]
 80042e8:	440a      	add	r2, r1
 80042ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042f2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	791b      	ldrb	r3, [r3, #4]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d015      	beq.n	8004328 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 811b 	beq.w	800453c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800430c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	f003 030f 	and.w	r3, r3, #15
 8004316:	2101      	movs	r1, #1
 8004318:	fa01 f303 	lsl.w	r3, r1, r3
 800431c:	69f9      	ldr	r1, [r7, #28]
 800431e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004322:	4313      	orrs	r3, r2
 8004324:	634b      	str	r3, [r1, #52]	; 0x34
 8004326:	e109      	b.n	800453c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004334:	2b00      	cmp	r3, #0
 8004336:	d110      	bne.n	800435a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	015a      	lsls	r2, r3, #5
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	4413      	add	r3, r2
 8004340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	0151      	lsls	r1, r2, #5
 800434a:	69fa      	ldr	r2, [r7, #28]
 800434c:	440a      	add	r2, r1
 800434e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004352:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004356:	6013      	str	r3, [r2, #0]
 8004358:	e00f      	b.n	800437a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	015a      	lsls	r2, r3, #5
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	4413      	add	r3, r2
 8004362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	0151      	lsls	r1, r2, #5
 800436c:	69fa      	ldr	r2, [r7, #28]
 800436e:	440a      	add	r2, r1
 8004370:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004378:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	6919      	ldr	r1, [r3, #16]
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	781a      	ldrb	r2, [r3, #0]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	b298      	uxth	r0, r3
 8004388:	79fb      	ldrb	r3, [r7, #7]
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	4603      	mov	r3, r0
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f000 fade 	bl	8004950 <USB_WritePacket>
 8004394:	e0d2      	b.n	800453c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	015a      	lsls	r2, r3, #5
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	4413      	add	r3, r2
 800439e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	0151      	lsls	r1, r2, #5
 80043a8:	69fa      	ldr	r2, [r7, #28]
 80043aa:	440a      	add	r2, r1
 80043ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043b0:	0cdb      	lsrs	r3, r3, #19
 80043b2:	04db      	lsls	r3, r3, #19
 80043b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	015a      	lsls	r2, r3, #5
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	4413      	add	r3, r2
 80043be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	0151      	lsls	r1, r2, #5
 80043c8:	69fa      	ldr	r2, [r7, #28]
 80043ca:	440a      	add	r2, r1
 80043cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80043d8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d126      	bne.n	8004430 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ee:	691a      	ldr	r2, [r3, #16]
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043f8:	69b9      	ldr	r1, [r7, #24]
 80043fa:	0148      	lsls	r0, r1, #5
 80043fc:	69f9      	ldr	r1, [r7, #28]
 80043fe:	4401      	add	r1, r0
 8004400:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004404:	4313      	orrs	r3, r2
 8004406:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	015a      	lsls	r2, r3, #5
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	4413      	add	r3, r2
 8004410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	69ba      	ldr	r2, [r7, #24]
 8004418:	0151      	lsls	r1, r2, #5
 800441a:	69fa      	ldr	r2, [r7, #28]
 800441c:	440a      	add	r2, r1
 800441e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004422:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004426:	6113      	str	r3, [r2, #16]
 8004428:	e03a      	b.n	80044a0 <USB_EPStartXfer+0x3e4>
 800442a:	bf00      	nop
 800442c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	699a      	ldr	r2, [r3, #24]
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	4413      	add	r3, r2
 800443a:	1e5a      	subs	r2, r3, #1
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	fbb2 f3f3 	udiv	r3, r2, r3
 8004444:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	8afa      	ldrh	r2, [r7, #22]
 800444c:	fb03 f202 	mul.w	r2, r3, r2
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	015a      	lsls	r2, r3, #5
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	4413      	add	r3, r2
 800445c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004460:	691a      	ldr	r2, [r3, #16]
 8004462:	8afb      	ldrh	r3, [r7, #22]
 8004464:	04d9      	lsls	r1, r3, #19
 8004466:	4b38      	ldr	r3, [pc, #224]	; (8004548 <USB_EPStartXfer+0x48c>)
 8004468:	400b      	ands	r3, r1
 800446a:	69b9      	ldr	r1, [r7, #24]
 800446c:	0148      	lsls	r0, r1, #5
 800446e:	69f9      	ldr	r1, [r7, #28]
 8004470:	4401      	add	r1, r0
 8004472:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004476:	4313      	orrs	r3, r2
 8004478:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	015a      	lsls	r2, r3, #5
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	4413      	add	r3, r2
 8004482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004486:	691a      	ldr	r2, [r3, #16]
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004490:	69b9      	ldr	r1, [r7, #24]
 8004492:	0148      	lsls	r0, r1, #5
 8004494:	69f9      	ldr	r1, [r7, #28]
 8004496:	4401      	add	r1, r0
 8004498:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800449c:	4313      	orrs	r3, r2
 800449e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80044a0:	79fb      	ldrb	r3, [r7, #7]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d10d      	bne.n	80044c2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d009      	beq.n	80044c2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	6919      	ldr	r1, [r3, #16]
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	015a      	lsls	r2, r3, #5
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	4413      	add	r3, r2
 80044ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044be:	460a      	mov	r2, r1
 80044c0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	791b      	ldrb	r3, [r3, #4]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d128      	bne.n	800451c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d110      	bne.n	80044fc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	015a      	lsls	r2, r3, #5
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	0151      	lsls	r1, r2, #5
 80044ec:	69fa      	ldr	r2, [r7, #28]
 80044ee:	440a      	add	r2, r1
 80044f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044f8:	6013      	str	r3, [r2, #0]
 80044fa:	e00f      	b.n	800451c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	015a      	lsls	r2, r3, #5
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	4413      	add	r3, r2
 8004504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	0151      	lsls	r1, r2, #5
 800450e:	69fa      	ldr	r2, [r7, #28]
 8004510:	440a      	add	r2, r1
 8004512:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800451a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	015a      	lsls	r2, r3, #5
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	4413      	add	r3, r2
 8004524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	0151      	lsls	r1, r2, #5
 800452e:	69fa      	ldr	r2, [r7, #28]
 8004530:	440a      	add	r2, r1
 8004532:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004536:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800453a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3720      	adds	r7, #32
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	1ff80000 	.word	0x1ff80000

0800454c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800454c:	b480      	push	{r7}
 800454e:	b087      	sub	sp, #28
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	4613      	mov	r3, r2
 8004558:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	785b      	ldrb	r3, [r3, #1]
 8004568:	2b01      	cmp	r3, #1
 800456a:	f040 80ce 	bne.w	800470a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d132      	bne.n	80045dc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	015a      	lsls	r2, r3, #5
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	4413      	add	r3, r2
 800457e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	0151      	lsls	r1, r2, #5
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	440a      	add	r2, r1
 800458c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004590:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004594:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004598:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	0151      	lsls	r1, r2, #5
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	440a      	add	r2, r1
 80045b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	015a      	lsls	r2, r3, #5
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	4413      	add	r3, r2
 80045c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	0151      	lsls	r1, r2, #5
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	440a      	add	r2, r1
 80045d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045d4:	0cdb      	lsrs	r3, r3, #19
 80045d6:	04db      	lsls	r3, r3, #19
 80045d8:	6113      	str	r3, [r2, #16]
 80045da:	e04e      	b.n	800467a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	015a      	lsls	r2, r3, #5
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	0151      	lsls	r1, r2, #5
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	440a      	add	r2, r1
 80045f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045f6:	0cdb      	lsrs	r3, r3, #19
 80045f8:	04db      	lsls	r3, r3, #19
 80045fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	015a      	lsls	r2, r3, #5
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	4413      	add	r3, r2
 8004604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	0151      	lsls	r1, r2, #5
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	440a      	add	r2, r1
 8004612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004616:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800461a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800461e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	699a      	ldr	r2, [r3, #24]
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	429a      	cmp	r2, r3
 800462a:	d903      	bls.n	8004634 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	68da      	ldr	r2, [r3, #12]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	4413      	add	r3, r2
 800463c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	0151      	lsls	r1, r2, #5
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	440a      	add	r2, r1
 800464a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800464e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004652:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	015a      	lsls	r2, r3, #5
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	4413      	add	r3, r2
 800465c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004660:	691a      	ldr	r2, [r3, #16]
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800466a:	6939      	ldr	r1, [r7, #16]
 800466c:	0148      	lsls	r0, r1, #5
 800466e:	6979      	ldr	r1, [r7, #20]
 8004670:	4401      	add	r1, r0
 8004672:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004676:	4313      	orrs	r3, r2
 8004678:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800467a:	79fb      	ldrb	r3, [r7, #7]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d11e      	bne.n	80046be <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d009      	beq.n	800469c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	015a      	lsls	r2, r3, #5
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	4413      	add	r3, r2
 8004690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004694:	461a      	mov	r2, r3
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	0151      	lsls	r1, r2, #5
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	440a      	add	r2, r1
 80046b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046ba:	6013      	str	r3, [r2, #0]
 80046bc:	e097      	b.n	80047ee <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	0151      	lsls	r1, r2, #5
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	440a      	add	r2, r1
 80046d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046dc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 8083 	beq.w	80047ee <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	f003 030f 	and.w	r3, r3, #15
 80046f8:	2101      	movs	r1, #1
 80046fa:	fa01 f303 	lsl.w	r3, r1, r3
 80046fe:	6979      	ldr	r1, [r7, #20]
 8004700:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004704:	4313      	orrs	r3, r2
 8004706:	634b      	str	r3, [r1, #52]	; 0x34
 8004708:	e071      	b.n	80047ee <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	015a      	lsls	r2, r3, #5
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	4413      	add	r3, r2
 8004712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	0151      	lsls	r1, r2, #5
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	440a      	add	r2, r1
 8004720:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004724:	0cdb      	lsrs	r3, r3, #19
 8004726:	04db      	lsls	r3, r3, #19
 8004728:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	4413      	add	r3, r2
 8004732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	0151      	lsls	r1, r2, #5
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	440a      	add	r2, r1
 8004740:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004744:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004748:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800474c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	015a      	lsls	r2, r3, #5
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	4413      	add	r3, r2
 800476e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	0151      	lsls	r1, r2, #5
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	440a      	add	r2, r1
 800477c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004780:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004784:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	015a      	lsls	r2, r3, #5
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	4413      	add	r3, r2
 800478e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004792:	691a      	ldr	r2, [r3, #16]
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800479c:	6939      	ldr	r1, [r7, #16]
 800479e:	0148      	lsls	r0, r1, #5
 80047a0:	6979      	ldr	r1, [r7, #20]
 80047a2:	4401      	add	r1, r0
 80047a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80047a8:	4313      	orrs	r3, r2
 80047aa:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80047ac:	79fb      	ldrb	r3, [r7, #7]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d10d      	bne.n	80047ce <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d009      	beq.n	80047ce <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	6919      	ldr	r1, [r3, #16]
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	015a      	lsls	r2, r3, #5
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	4413      	add	r3, r2
 80047c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ca:	460a      	mov	r2, r1
 80047cc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	015a      	lsls	r2, r3, #5
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	4413      	add	r3, r2
 80047d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	0151      	lsls	r1, r2, #5
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	440a      	add	r2, r1
 80047e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047ec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	371c      	adds	r7, #28
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b087      	sub	sp, #28
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004806:	2300      	movs	r3, #0
 8004808:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800480a:	2300      	movs	r3, #0
 800480c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	785b      	ldrb	r3, [r3, #1]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d14a      	bne.n	80048b0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	015a      	lsls	r2, r3, #5
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	4413      	add	r3, r2
 8004824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800482e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004832:	f040 8086 	bne.w	8004942 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	015a      	lsls	r2, r3, #5
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	4413      	add	r3, r2
 8004840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	7812      	ldrb	r2, [r2, #0]
 800484a:	0151      	lsls	r1, r2, #5
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	440a      	add	r2, r1
 8004850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004854:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004858:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	015a      	lsls	r2, r3, #5
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	4413      	add	r3, r2
 8004864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	7812      	ldrb	r2, [r2, #0]
 800486e:	0151      	lsls	r1, r2, #5
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	440a      	add	r2, r1
 8004874:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004878:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800487c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	3301      	adds	r3, #1
 8004882:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f242 7210 	movw	r2, #10000	; 0x2710
 800488a:	4293      	cmp	r3, r2
 800488c:	d902      	bls.n	8004894 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	75fb      	strb	r3, [r7, #23]
          break;
 8004892:	e056      	b.n	8004942 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	4413      	add	r3, r2
 800489e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048ac:	d0e7      	beq.n	800487e <USB_EPStopXfer+0x82>
 80048ae:	e048      	b.n	8004942 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	015a      	lsls	r2, r3, #5
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	4413      	add	r3, r2
 80048ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048c8:	d13b      	bne.n	8004942 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	015a      	lsls	r2, r3, #5
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	4413      	add	r3, r2
 80048d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	7812      	ldrb	r2, [r2, #0]
 80048de:	0151      	lsls	r1, r2, #5
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	440a      	add	r2, r1
 80048e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048ec:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	015a      	lsls	r2, r3, #5
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	4413      	add	r3, r2
 80048f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	7812      	ldrb	r2, [r2, #0]
 8004902:	0151      	lsls	r1, r2, #5
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	440a      	add	r2, r1
 8004908:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800490c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004910:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	3301      	adds	r3, #1
 8004916:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f242 7210 	movw	r2, #10000	; 0x2710
 800491e:	4293      	cmp	r3, r2
 8004920:	d902      	bls.n	8004928 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	75fb      	strb	r3, [r7, #23]
          break;
 8004926:	e00c      	b.n	8004942 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	015a      	lsls	r2, r3, #5
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	4413      	add	r3, r2
 8004932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800493c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004940:	d0e7      	beq.n	8004912 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004942:	7dfb      	ldrb	r3, [r7, #23]
}
 8004944:	4618      	mov	r0, r3
 8004946:	371c      	adds	r7, #28
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004950:	b480      	push	{r7}
 8004952:	b089      	sub	sp, #36	; 0x24
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	4611      	mov	r1, r2
 800495c:	461a      	mov	r2, r3
 800495e:	460b      	mov	r3, r1
 8004960:	71fb      	strb	r3, [r7, #7]
 8004962:	4613      	mov	r3, r2
 8004964:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800496e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004972:	2b00      	cmp	r3, #0
 8004974:	d123      	bne.n	80049be <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004976:	88bb      	ldrh	r3, [r7, #4]
 8004978:	3303      	adds	r3, #3
 800497a:	089b      	lsrs	r3, r3, #2
 800497c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800497e:	2300      	movs	r3, #0
 8004980:	61bb      	str	r3, [r7, #24]
 8004982:	e018      	b.n	80049b6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004984:	79fb      	ldrb	r3, [r7, #7]
 8004986:	031a      	lsls	r2, r3, #12
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	4413      	add	r3, r2
 800498c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004990:	461a      	mov	r2, r3
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	3301      	adds	r3, #1
 800499c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	3301      	adds	r3, #1
 80049a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	3301      	adds	r3, #1
 80049a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	3301      	adds	r3, #1
 80049ae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	3301      	adds	r3, #1
 80049b4:	61bb      	str	r3, [r7, #24]
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d3e2      	bcc.n	8004984 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3724      	adds	r7, #36	; 0x24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b08b      	sub	sp, #44	; 0x2c
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	4613      	mov	r3, r2
 80049d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80049e2:	88fb      	ldrh	r3, [r7, #6]
 80049e4:	089b      	lsrs	r3, r3, #2
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80049ea:	88fb      	ldrh	r3, [r7, #6]
 80049ec:	f003 0303 	and.w	r3, r3, #3
 80049f0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80049f2:	2300      	movs	r3, #0
 80049f4:	623b      	str	r3, [r7, #32]
 80049f6:	e014      	b.n	8004a22 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	601a      	str	r2, [r3, #0]
    pDest++;
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	3301      	adds	r3, #1
 8004a08:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	3301      	adds	r3, #1
 8004a14:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a18:	3301      	adds	r3, #1
 8004a1a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	623b      	str	r3, [r7, #32]
 8004a22:	6a3a      	ldr	r2, [r7, #32]
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d3e6      	bcc.n	80049f8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004a2a:	8bfb      	ldrh	r3, [r7, #30]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d01e      	beq.n	8004a6e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	f107 0310 	add.w	r3, r7, #16
 8004a40:	6812      	ldr	r2, [r2, #0]
 8004a42:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	6a3b      	ldr	r3, [r7, #32]
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	00db      	lsls	r3, r3, #3
 8004a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a50:	b2da      	uxtb	r2, r3
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	701a      	strb	r2, [r3, #0]
      i++;
 8004a56:	6a3b      	ldr	r3, [r7, #32]
 8004a58:	3301      	adds	r3, #1
 8004a5a:	623b      	str	r3, [r7, #32]
      pDest++;
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5e:	3301      	adds	r3, #1
 8004a60:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004a62:	8bfb      	ldrh	r3, [r7, #30]
 8004a64:	3b01      	subs	r3, #1
 8004a66:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004a68:	8bfb      	ldrh	r3, [r7, #30]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1ea      	bne.n	8004a44 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	372c      	adds	r7, #44	; 0x2c
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	785b      	ldrb	r3, [r3, #1]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d12c      	bne.n	8004af2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	db12      	blt.n	8004ad0 <USB_EPSetStall+0x54>
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00f      	beq.n	8004ad0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	015a      	lsls	r2, r3, #5
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	0151      	lsls	r1, r2, #5
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	440a      	add	r2, r1
 8004ac6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ace:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	015a      	lsls	r2, r3, #5
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	0151      	lsls	r1, r2, #5
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	440a      	add	r2, r1
 8004ae6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004aee:	6013      	str	r3, [r2, #0]
 8004af0:	e02b      	b.n	8004b4a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	015a      	lsls	r2, r3, #5
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	db12      	blt.n	8004b2a <USB_EPSetStall+0xae>
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00f      	beq.n	8004b2a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	015a      	lsls	r2, r3, #5
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	4413      	add	r3, r2
 8004b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	0151      	lsls	r1, r2, #5
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	440a      	add	r2, r1
 8004b20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b28:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	015a      	lsls	r2, r3, #5
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	4413      	add	r3, r2
 8004b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	0151      	lsls	r1, r2, #5
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	440a      	add	r2, r1
 8004b40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b48:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3714      	adds	r7, #20
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	785b      	ldrb	r3, [r3, #1]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d128      	bne.n	8004bc6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	0151      	lsls	r1, r2, #5
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	440a      	add	r2, r1
 8004b8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b92:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	791b      	ldrb	r3, [r3, #4]
 8004b98:	2b03      	cmp	r3, #3
 8004b9a:	d003      	beq.n	8004ba4 <USB_EPClearStall+0x4c>
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	791b      	ldrb	r3, [r3, #4]
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d138      	bne.n	8004c16 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	0151      	lsls	r1, r2, #5
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	440a      	add	r2, r1
 8004bba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bc2:	6013      	str	r3, [r2, #0]
 8004bc4:	e027      	b.n	8004c16 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	015a      	lsls	r2, r3, #5
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	4413      	add	r3, r2
 8004bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	0151      	lsls	r1, r2, #5
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	440a      	add	r2, r1
 8004bdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004be0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004be4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	791b      	ldrb	r3, [r3, #4]
 8004bea:	2b03      	cmp	r3, #3
 8004bec:	d003      	beq.n	8004bf6 <USB_EPClearStall+0x9e>
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	791b      	ldrb	r3, [r3, #4]
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d10f      	bne.n	8004c16 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	015a      	lsls	r2, r3, #5
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	0151      	lsls	r1, r2, #5
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	440a      	add	r2, r1
 8004c0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c14:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3714      	adds	r7, #20
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c42:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004c46:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	78fb      	ldrb	r3, [r7, #3]
 8004c52:	011b      	lsls	r3, r3, #4
 8004c54:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004c58:	68f9      	ldr	r1, [r7, #12]
 8004c5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c8a:	f023 0303 	bic.w	r3, r3, #3
 8004c8e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c9e:	f023 0302 	bic.w	r3, r3, #2
 8004ca2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b085      	sub	sp, #20
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004ccc:	f023 0303 	bic.w	r3, r3, #3
 8004cd0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ce0:	f043 0302 	orr.w	r3, r3, #2
 8004ce4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3714      	adds	r7, #20
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3714      	adds	r7, #20
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr

08004d1a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b085      	sub	sp, #20
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	0c1b      	lsrs	r3, r3, #16
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr

08004d4e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b085      	sub	sp, #20
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d6a:	69db      	ldr	r3, [r3, #28]
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	b29b      	uxth	r3, r3
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b085      	sub	sp, #20
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004d92:	78fb      	ldrb	r3, [r7, #3]
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	68ba      	ldr	r2, [r7, #8]
 8004dac:	4013      	ands	r3, r2
 8004dae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004db0:	68bb      	ldr	r3, [r7, #8]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b087      	sub	sp, #28
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004de2:	78fb      	ldrb	r3, [r7, #3]
 8004de4:	f003 030f 	and.w	r3, r3, #15
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	fa22 f303 	lsr.w	r3, r2, r3
 8004dee:	01db      	lsls	r3, r3, #7
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004df8:	78fb      	ldrb	r3, [r7, #3]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004e0c:	68bb      	ldr	r3, [r7, #8]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	371c      	adds	r7, #28
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b083      	sub	sp, #12
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	f003 0301 	and.w	r3, r3, #1
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b085      	sub	sp, #20
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e50:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004e54:	f023 0307 	bic.w	r3, r3, #7
 8004e58:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	460b      	mov	r3, r1
 8004e86:	607a      	str	r2, [r7, #4]
 8004e88:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	333c      	adds	r3, #60	; 0x3c
 8004e92:	3304      	adds	r3, #4
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	4a26      	ldr	r2, [pc, #152]	; (8004f34 <USB_EP0_OutStart+0xb8>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d90a      	bls.n	8004eb6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004eac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004eb0:	d101      	bne.n	8004eb6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	e037      	b.n	8004f26 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ed0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ed4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ee4:	f043 0318 	orr.w	r3, r3, #24
 8004ee8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ef8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004efc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004efe:	7afb      	ldrb	r3, [r7, #11]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d10f      	bne.n	8004f24 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f1e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004f22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	371c      	adds	r7, #28
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	4f54300a 	.word	0x4f54300a

08004f38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	3301      	adds	r3, #1
 8004f48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	4a13      	ldr	r2, [pc, #76]	; (8004f9c <USB_CoreReset+0x64>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d901      	bls.n	8004f56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e01b      	b.n	8004f8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	daf2      	bge.n	8004f44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	f043 0201 	orr.w	r2, r3, #1
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	3301      	adds	r3, #1
 8004f72:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	4a09      	ldr	r2, [pc, #36]	; (8004f9c <USB_CoreReset+0x64>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d901      	bls.n	8004f80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e006      	b.n	8004f8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d0f0      	beq.n	8004f6e <USB_CoreReset+0x36>

  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	00030d40 	.word	0x00030d40

08004fa0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	460b      	mov	r3, r1
 8004faa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8004fac:	2010      	movs	r0, #16
 8004fae:	f002 f911 	bl	80071d4 <USBD_static_malloc>
 8004fb2:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d109      	bne.n	8004fce <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	32b0      	adds	r2, #176	; 0xb0
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004fca:	2302      	movs	r3, #2
 8004fcc:	e048      	b.n	8005060 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	32b0      	adds	r2, #176	; 0xb0
 8004fd8:	68f9      	ldr	r1, [r7, #12]
 8004fda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	32b0      	adds	r2, #176	; 0xb0
 8004fe8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	7c1b      	ldrb	r3, [r3, #16]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d10d      	bne.n	8005016 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8004ffa:	4b1b      	ldr	r3, [pc, #108]	; (8005068 <USBD_HID_Init+0xc8>)
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	f003 020f 	and.w	r2, r3, #15
 8005002:	6879      	ldr	r1, [r7, #4]
 8005004:	4613      	mov	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	440b      	add	r3, r1
 800500e:	3326      	adds	r3, #38	; 0x26
 8005010:	2207      	movs	r2, #7
 8005012:	801a      	strh	r2, [r3, #0]
 8005014:	e00c      	b.n	8005030 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005016:	4b14      	ldr	r3, [pc, #80]	; (8005068 <USBD_HID_Init+0xc8>)
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	f003 020f 	and.w	r2, r3, #15
 800501e:	6879      	ldr	r1, [r7, #4]
 8005020:	4613      	mov	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	440b      	add	r3, r1
 800502a:	3326      	adds	r3, #38	; 0x26
 800502c:	220a      	movs	r2, #10
 800502e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005030:	4b0d      	ldr	r3, [pc, #52]	; (8005068 <USBD_HID_Init+0xc8>)
 8005032:	7819      	ldrb	r1, [r3, #0]
 8005034:	2304      	movs	r3, #4
 8005036:	2203      	movs	r2, #3
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f001 ffba 	bl	8006fb2 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 800503e:	4b0a      	ldr	r3, [pc, #40]	; (8005068 <USBD_HID_Init+0xc8>)
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	f003 020f 	and.w	r2, r3, #15
 8005046:	6879      	ldr	r1, [r7, #4]
 8005048:	4613      	mov	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	440b      	add	r3, r1
 8005052:	3324      	adds	r3, #36	; 0x24
 8005054:	2201      	movs	r2, #1
 8005056:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	200000a0 	.word	0x200000a0

0800506c <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	460b      	mov	r3, r1
 8005076:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8005078:	4b1f      	ldr	r3, [pc, #124]	; (80050f8 <USBD_HID_DeInit+0x8c>)
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	4619      	mov	r1, r3
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f001 ffbd 	bl	8006ffe <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8005084:	4b1c      	ldr	r3, [pc, #112]	; (80050f8 <USBD_HID_DeInit+0x8c>)
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	f003 020f 	and.w	r2, r3, #15
 800508c:	6879      	ldr	r1, [r7, #4]
 800508e:	4613      	mov	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	440b      	add	r3, r1
 8005098:	3324      	adds	r3, #36	; 0x24
 800509a:	2200      	movs	r2, #0
 800509c:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 800509e:	4b16      	ldr	r3, [pc, #88]	; (80050f8 <USBD_HID_DeInit+0x8c>)
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	f003 020f 	and.w	r2, r3, #15
 80050a6:	6879      	ldr	r1, [r7, #4]
 80050a8:	4613      	mov	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	440b      	add	r3, r1
 80050b2:	3326      	adds	r3, #38	; 0x26
 80050b4:	2200      	movs	r2, #0
 80050b6:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	32b0      	adds	r2, #176	; 0xb0
 80050c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d011      	beq.n	80050ee <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	32b0      	adds	r2, #176	; 0xb0
 80050d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050d8:	4618      	mov	r0, r3
 80050da:	f002 f889 	bl	80071f0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	32b0      	adds	r2, #176	; 0xb0
 80050e8:	2100      	movs	r1, #0
 80050ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3708      	adds	r7, #8
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	200000a0 	.word	0x200000a0

080050fc <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	32b0      	adds	r2, #176	; 0xb0
 8005110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005114:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005116:	2300      	movs	r3, #0
 8005118:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005124:	2303      	movs	r3, #3
 8005126:	e0e8      	b.n	80052fa <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005130:	2b00      	cmp	r3, #0
 8005132:	d046      	beq.n	80051c2 <USBD_HID_Setup+0xc6>
 8005134:	2b20      	cmp	r3, #32
 8005136:	f040 80d8 	bne.w	80052ea <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	785b      	ldrb	r3, [r3, #1]
 800513e:	3b02      	subs	r3, #2
 8005140:	2b09      	cmp	r3, #9
 8005142:	d836      	bhi.n	80051b2 <USBD_HID_Setup+0xb6>
 8005144:	a201      	add	r2, pc, #4	; (adr r2, 800514c <USBD_HID_Setup+0x50>)
 8005146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514a:	bf00      	nop
 800514c:	080051a3 	.word	0x080051a3
 8005150:	08005183 	.word	0x08005183
 8005154:	080051b3 	.word	0x080051b3
 8005158:	080051b3 	.word	0x080051b3
 800515c:	080051b3 	.word	0x080051b3
 8005160:	080051b3 	.word	0x080051b3
 8005164:	080051b3 	.word	0x080051b3
 8005168:	080051b3 	.word	0x080051b3
 800516c:	08005191 	.word	0x08005191
 8005170:	08005175 	.word	0x08005175
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	885b      	ldrh	r3, [r3, #2]
 8005178:	b2db      	uxtb	r3, r3
 800517a:	461a      	mov	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	601a      	str	r2, [r3, #0]
          break;
 8005180:	e01e      	b.n	80051c0 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2201      	movs	r2, #1
 8005186:	4619      	mov	r1, r3
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f001 fbd5 	bl	8006938 <USBD_CtlSendData>
          break;
 800518e:	e017      	b.n	80051c0 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	885b      	ldrh	r3, [r3, #2]
 8005194:	0a1b      	lsrs	r3, r3, #8
 8005196:	b29b      	uxth	r3, r3
 8005198:	b2db      	uxtb	r3, r3
 800519a:	461a      	mov	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	605a      	str	r2, [r3, #4]
          break;
 80051a0:	e00e      	b.n	80051c0 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	3304      	adds	r3, #4
 80051a6:	2201      	movs	r2, #1
 80051a8:	4619      	mov	r1, r3
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f001 fbc4 	bl	8006938 <USBD_CtlSendData>
          break;
 80051b0:	e006      	b.n	80051c0 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80051b2:	6839      	ldr	r1, [r7, #0]
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f001 fb4e 	bl	8006856 <USBD_CtlError>
          ret = USBD_FAIL;
 80051ba:	2303      	movs	r3, #3
 80051bc:	75fb      	strb	r3, [r7, #23]
          break;
 80051be:	bf00      	nop
      }
      break;
 80051c0:	e09a      	b.n	80052f8 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	785b      	ldrb	r3, [r3, #1]
 80051c6:	2b0b      	cmp	r3, #11
 80051c8:	f200 8086 	bhi.w	80052d8 <USBD_HID_Setup+0x1dc>
 80051cc:	a201      	add	r2, pc, #4	; (adr r2, 80051d4 <USBD_HID_Setup+0xd8>)
 80051ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d2:	bf00      	nop
 80051d4:	08005205 	.word	0x08005205
 80051d8:	080052e7 	.word	0x080052e7
 80051dc:	080052d9 	.word	0x080052d9
 80051e0:	080052d9 	.word	0x080052d9
 80051e4:	080052d9 	.word	0x080052d9
 80051e8:	080052d9 	.word	0x080052d9
 80051ec:	0800522f 	.word	0x0800522f
 80051f0:	080052d9 	.word	0x080052d9
 80051f4:	080052d9 	.word	0x080052d9
 80051f8:	080052d9 	.word	0x080052d9
 80051fc:	08005287 	.word	0x08005287
 8005200:	080052b1 	.word	0x080052b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b03      	cmp	r3, #3
 800520e:	d107      	bne.n	8005220 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005210:	f107 030a 	add.w	r3, r7, #10
 8005214:	2202      	movs	r2, #2
 8005216:	4619      	mov	r1, r3
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f001 fb8d 	bl	8006938 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800521e:	e063      	b.n	80052e8 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005220:	6839      	ldr	r1, [r7, #0]
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f001 fb17 	bl	8006856 <USBD_CtlError>
            ret = USBD_FAIL;
 8005228:	2303      	movs	r3, #3
 800522a:	75fb      	strb	r3, [r7, #23]
          break;
 800522c:	e05c      	b.n	80052e8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	885b      	ldrh	r3, [r3, #2]
 8005232:	0a1b      	lsrs	r3, r3, #8
 8005234:	b29b      	uxth	r3, r3
 8005236:	2b22      	cmp	r3, #34	; 0x22
 8005238:	d108      	bne.n	800524c <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	88db      	ldrh	r3, [r3, #6]
 800523e:	2b20      	cmp	r3, #32
 8005240:	bf28      	it	cs
 8005242:	2320      	movcs	r3, #32
 8005244:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8005246:	4b2f      	ldr	r3, [pc, #188]	; (8005304 <USBD_HID_Setup+0x208>)
 8005248:	613b      	str	r3, [r7, #16]
 800524a:	e015      	b.n	8005278 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	885b      	ldrh	r3, [r3, #2]
 8005250:	0a1b      	lsrs	r3, r3, #8
 8005252:	b29b      	uxth	r3, r3
 8005254:	2b21      	cmp	r3, #33	; 0x21
 8005256:	d108      	bne.n	800526a <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8005258:	4b2b      	ldr	r3, [pc, #172]	; (8005308 <USBD_HID_Setup+0x20c>)
 800525a:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	88db      	ldrh	r3, [r3, #6]
 8005260:	2b09      	cmp	r3, #9
 8005262:	bf28      	it	cs
 8005264:	2309      	movcs	r3, #9
 8005266:	82bb      	strh	r3, [r7, #20]
 8005268:	e006      	b.n	8005278 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800526a:	6839      	ldr	r1, [r7, #0]
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f001 faf2 	bl	8006856 <USBD_CtlError>
            ret = USBD_FAIL;
 8005272:	2303      	movs	r3, #3
 8005274:	75fb      	strb	r3, [r7, #23]
            break;
 8005276:	e037      	b.n	80052e8 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005278:	8abb      	ldrh	r3, [r7, #20]
 800527a:	461a      	mov	r2, r3
 800527c:	6939      	ldr	r1, [r7, #16]
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f001 fb5a 	bl	8006938 <USBD_CtlSendData>
          break;
 8005284:	e030      	b.n	80052e8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b03      	cmp	r3, #3
 8005290:	d107      	bne.n	80052a2 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	3308      	adds	r3, #8
 8005296:	2201      	movs	r2, #1
 8005298:	4619      	mov	r1, r3
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f001 fb4c 	bl	8006938 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80052a0:	e022      	b.n	80052e8 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80052a2:	6839      	ldr	r1, [r7, #0]
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f001 fad6 	bl	8006856 <USBD_CtlError>
            ret = USBD_FAIL;
 80052aa:	2303      	movs	r3, #3
 80052ac:	75fb      	strb	r3, [r7, #23]
          break;
 80052ae:	e01b      	b.n	80052e8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b03      	cmp	r3, #3
 80052ba:	d106      	bne.n	80052ca <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	885b      	ldrh	r3, [r3, #2]
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	461a      	mov	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80052c8:	e00e      	b.n	80052e8 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80052ca:	6839      	ldr	r1, [r7, #0]
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f001 fac2 	bl	8006856 <USBD_CtlError>
            ret = USBD_FAIL;
 80052d2:	2303      	movs	r3, #3
 80052d4:	75fb      	strb	r3, [r7, #23]
          break;
 80052d6:	e007      	b.n	80052e8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80052d8:	6839      	ldr	r1, [r7, #0]
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f001 fabb 	bl	8006856 <USBD_CtlError>
          ret = USBD_FAIL;
 80052e0:	2303      	movs	r3, #3
 80052e2:	75fb      	strb	r3, [r7, #23]
          break;
 80052e4:	e000      	b.n	80052e8 <USBD_HID_Setup+0x1ec>
          break;
 80052e6:	bf00      	nop
      }
      break;
 80052e8:	e006      	b.n	80052f8 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 80052ea:	6839      	ldr	r1, [r7, #0]
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f001 fab2 	bl	8006856 <USBD_CtlError>
      ret = USBD_FAIL;
 80052f2:	2303      	movs	r3, #3
 80052f4:	75fb      	strb	r3, [r7, #23]
      break;
 80052f6:	bf00      	nop
  }

  return (uint8_t)ret;
 80052f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3718      	adds	r7, #24
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	20000080 	.word	0x20000080
 8005308:	20000068 	.word	0x20000068

0800530c <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	4613      	mov	r3, r2
 8005318:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	32b0      	adds	r2, #176	; 0xb0
 8005324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005328:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005330:	2303      	movs	r3, #3
 8005332:	e014      	b.n	800535e <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b03      	cmp	r3, #3
 800533e:	d10d      	bne.n	800535c <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	7b1b      	ldrb	r3, [r3, #12]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d109      	bne.n	800535c <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	2201      	movs	r2, #1
 800534c:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 800534e:	4b06      	ldr	r3, [pc, #24]	; (8005368 <USBD_HID_SendReport+0x5c>)
 8005350:	7819      	ldrb	r1, [r3, #0]
 8005352:	88fb      	ldrh	r3, [r7, #6]
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f001 fef9 	bl	800714e <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3718      	adds	r7, #24
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	200000a0 	.word	0x200000a0

0800536c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005374:	2181      	movs	r1, #129	; 0x81
 8005376:	4809      	ldr	r0, [pc, #36]	; (800539c <USBD_HID_GetFSCfgDesc+0x30>)
 8005378:	f000 fc35 	bl	8005be6 <USBD_GetEpDesc>
 800537c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d002      	beq.n	800538a <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	220a      	movs	r2, #10
 8005388:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2222      	movs	r2, #34	; 0x22
 800538e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005390:	4b02      	ldr	r3, [pc, #8]	; (800539c <USBD_HID_GetFSCfgDesc+0x30>)
}
 8005392:	4618      	mov	r0, r3
 8005394:	3710      	adds	r7, #16
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	20000044 	.word	0x20000044

080053a0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80053a8:	2181      	movs	r1, #129	; 0x81
 80053aa:	4809      	ldr	r0, [pc, #36]	; (80053d0 <USBD_HID_GetHSCfgDesc+0x30>)
 80053ac:	f000 fc1b 	bl	8005be6 <USBD_GetEpDesc>
 80053b0:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d002      	beq.n	80053be <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2207      	movs	r2, #7
 80053bc:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2222      	movs	r2, #34	; 0x22
 80053c2:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80053c4:	4b02      	ldr	r3, [pc, #8]	; (80053d0 <USBD_HID_GetHSCfgDesc+0x30>)
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	20000044 	.word	0x20000044

080053d4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80053dc:	2181      	movs	r1, #129	; 0x81
 80053de:	4809      	ldr	r0, [pc, #36]	; (8005404 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 80053e0:	f000 fc01 	bl	8005be6 <USBD_GetEpDesc>
 80053e4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d002      	beq.n	80053f2 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	220a      	movs	r2, #10
 80053f0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2222      	movs	r2, #34	; 0x22
 80053f6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80053f8:	4b02      	ldr	r3, [pc, #8]	; (8005404 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	20000044 	.word	0x20000044

08005408 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	460b      	mov	r3, r1
 8005412:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	32b0      	adds	r2, #176	; 0xb0
 800541e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005422:	2200      	movs	r2, #0
 8005424:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	220a      	movs	r2, #10
 8005440:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005442:	4b03      	ldr	r3, [pc, #12]	; (8005450 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005444:	4618      	mov	r0, r3
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	20000074 	.word	0x20000074

08005454 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	4613      	mov	r3, r2
 8005460:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d101      	bne.n	800546c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005468:	2303      	movs	r3, #3
 800546a:	e01f      	b.n	80054ac <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d003      	beq.n	8005492 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	79fa      	ldrb	r2, [r7, #7]
 800549e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f001 fd1f 	bl	8006ee4 <USBD_LL_Init>
 80054a6:	4603      	mov	r3, r0
 80054a8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80054aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3718      	adds	r7, #24
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80054be:	2300      	movs	r3, #0
 80054c0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d101      	bne.n	80054cc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e025      	b.n	8005518 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	32ae      	adds	r2, #174	; 0xae
 80054de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00f      	beq.n	8005508 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	32ae      	adds	r2, #174	; 0xae
 80054f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f8:	f107 020e 	add.w	r2, r7, #14
 80054fc:	4610      	mov	r0, r2
 80054fe:	4798      	blx	r3
 8005500:	4602      	mov	r2, r0
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800550e:	1c5a      	adds	r2, r3, #1
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f001 fd27 	bl	8006f7c <USBD_LL_Start>
 800552e:	4603      	mov	r3, r0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005540:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005542:	4618      	mov	r0, r3
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b084      	sub	sp, #16
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
 8005556:	460b      	mov	r3, r1
 8005558:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800555a:	2300      	movs	r3, #0
 800555c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005564:	2b00      	cmp	r3, #0
 8005566:	d009      	beq.n	800557c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	78fa      	ldrb	r2, [r7, #3]
 8005572:	4611      	mov	r1, r2
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	4798      	blx	r3
 8005578:	4603      	mov	r3, r0
 800557a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800557c:	7bfb      	ldrb	r3, [r7, #15]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b084      	sub	sp, #16
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	460b      	mov	r3, r1
 8005590:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005592:	2300      	movs	r3, #0
 8005594:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	78fa      	ldrb	r2, [r7, #3]
 80055a0:	4611      	mov	r1, r2
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	4798      	blx	r3
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80055ac:	2303      	movs	r3, #3
 80055ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80055b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b084      	sub	sp, #16
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
 80055c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80055ca:	6839      	ldr	r1, [r7, #0]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f001 f908 	bl	80067e2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80055e0:	461a      	mov	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80055ee:	f003 031f 	and.w	r3, r3, #31
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d01a      	beq.n	800562c <USBD_LL_SetupStage+0x72>
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d822      	bhi.n	8005640 <USBD_LL_SetupStage+0x86>
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d002      	beq.n	8005604 <USBD_LL_SetupStage+0x4a>
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d00a      	beq.n	8005618 <USBD_LL_SetupStage+0x5e>
 8005602:	e01d      	b.n	8005640 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800560a:	4619      	mov	r1, r3
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 fb5f 	bl	8005cd0 <USBD_StdDevReq>
 8005612:	4603      	mov	r3, r0
 8005614:	73fb      	strb	r3, [r7, #15]
      break;
 8005616:	e020      	b.n	800565a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800561e:	4619      	mov	r1, r3
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 fbc7 	bl	8005db4 <USBD_StdItfReq>
 8005626:	4603      	mov	r3, r0
 8005628:	73fb      	strb	r3, [r7, #15]
      break;
 800562a:	e016      	b.n	800565a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005632:	4619      	mov	r1, r3
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 fc29 	bl	8005e8c <USBD_StdEPReq>
 800563a:	4603      	mov	r3, r0
 800563c:	73fb      	strb	r3, [r7, #15]
      break;
 800563e:	e00c      	b.n	800565a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005646:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800564a:	b2db      	uxtb	r3, r3
 800564c:	4619      	mov	r1, r3
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f001 fcf4 	bl	800703c <USBD_LL_StallEP>
 8005654:	4603      	mov	r3, r0
 8005656:	73fb      	strb	r3, [r7, #15]
      break;
 8005658:	bf00      	nop
  }

  return ret;
 800565a:	7bfb      	ldrb	r3, [r7, #15]
}
 800565c:	4618      	mov	r0, r3
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	460b      	mov	r3, r1
 800566e:	607a      	str	r2, [r7, #4]
 8005670:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005672:	2300      	movs	r3, #0
 8005674:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005676:	7afb      	ldrb	r3, [r7, #11]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d16e      	bne.n	800575a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005682:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800568a:	2b03      	cmp	r3, #3
 800568c:	f040 8098 	bne.w	80057c0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	689a      	ldr	r2, [r3, #8]
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	429a      	cmp	r2, r3
 800569a:	d913      	bls.n	80056c4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	689a      	ldr	r2, [r3, #8]
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	1ad2      	subs	r2, r2, r3
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	68da      	ldr	r2, [r3, #12]
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	4293      	cmp	r3, r2
 80056b4:	bf28      	it	cs
 80056b6:	4613      	movcs	r3, r2
 80056b8:	461a      	mov	r2, r3
 80056ba:	6879      	ldr	r1, [r7, #4]
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f001 f967 	bl	8006990 <USBD_CtlContinueRx>
 80056c2:	e07d      	b.n	80057c0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80056ca:	f003 031f 	and.w	r3, r3, #31
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d014      	beq.n	80056fc <USBD_LL_DataOutStage+0x98>
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d81d      	bhi.n	8005712 <USBD_LL_DataOutStage+0xae>
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d002      	beq.n	80056e0 <USBD_LL_DataOutStage+0x7c>
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d003      	beq.n	80056e6 <USBD_LL_DataOutStage+0x82>
 80056de:	e018      	b.n	8005712 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80056e0:	2300      	movs	r3, #0
 80056e2:	75bb      	strb	r3, [r7, #22]
            break;
 80056e4:	e018      	b.n	8005718 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	4619      	mov	r1, r3
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f000 fa5e 	bl	8005bb2 <USBD_CoreFindIF>
 80056f6:	4603      	mov	r3, r0
 80056f8:	75bb      	strb	r3, [r7, #22]
            break;
 80056fa:	e00d      	b.n	8005718 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005702:	b2db      	uxtb	r3, r3
 8005704:	4619      	mov	r1, r3
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f000 fa60 	bl	8005bcc <USBD_CoreFindEP>
 800570c:	4603      	mov	r3, r0
 800570e:	75bb      	strb	r3, [r7, #22]
            break;
 8005710:	e002      	b.n	8005718 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005712:	2300      	movs	r3, #0
 8005714:	75bb      	strb	r3, [r7, #22]
            break;
 8005716:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005718:	7dbb      	ldrb	r3, [r7, #22]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d119      	bne.n	8005752 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b03      	cmp	r3, #3
 8005728:	d113      	bne.n	8005752 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800572a:	7dba      	ldrb	r2, [r7, #22]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	32ae      	adds	r2, #174	; 0xae
 8005730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00b      	beq.n	8005752 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800573a:	7dba      	ldrb	r2, [r7, #22]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005742:	7dba      	ldrb	r2, [r7, #22]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	32ae      	adds	r2, #174	; 0xae
 8005748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f001 f92d 	bl	80069b2 <USBD_CtlSendStatus>
 8005758:	e032      	b.n	80057c0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800575a:	7afb      	ldrb	r3, [r7, #11]
 800575c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005760:	b2db      	uxtb	r3, r3
 8005762:	4619      	mov	r1, r3
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f000 fa31 	bl	8005bcc <USBD_CoreFindEP>
 800576a:	4603      	mov	r3, r0
 800576c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800576e:	7dbb      	ldrb	r3, [r7, #22]
 8005770:	2bff      	cmp	r3, #255	; 0xff
 8005772:	d025      	beq.n	80057c0 <USBD_LL_DataOutStage+0x15c>
 8005774:	7dbb      	ldrb	r3, [r7, #22]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d122      	bne.n	80057c0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b03      	cmp	r3, #3
 8005784:	d117      	bne.n	80057b6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005786:	7dba      	ldrb	r2, [r7, #22]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	32ae      	adds	r2, #174	; 0xae
 800578c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00f      	beq.n	80057b6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005796:	7dba      	ldrb	r2, [r7, #22]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800579e:	7dba      	ldrb	r2, [r7, #22]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	32ae      	adds	r2, #174	; 0xae
 80057a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	7afa      	ldrb	r2, [r7, #11]
 80057ac:	4611      	mov	r1, r2
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	4798      	blx	r3
 80057b2:	4603      	mov	r3, r0
 80057b4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80057b6:	7dfb      	ldrb	r3, [r7, #23]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d001      	beq.n	80057c0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80057bc:	7dfb      	ldrb	r3, [r7, #23]
 80057be:	e000      	b.n	80057c2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3718      	adds	r7, #24
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b086      	sub	sp, #24
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	60f8      	str	r0, [r7, #12]
 80057d2:	460b      	mov	r3, r1
 80057d4:	607a      	str	r2, [r7, #4]
 80057d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80057d8:	7afb      	ldrb	r3, [r7, #11]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d16f      	bne.n	80058be <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	3314      	adds	r3, #20
 80057e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d15a      	bne.n	80058a4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	689a      	ldr	r2, [r3, #8]
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d914      	bls.n	8005824 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	689a      	ldr	r2, [r3, #8]
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	1ad2      	subs	r2, r2, r3
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	461a      	mov	r2, r3
 800580e:	6879      	ldr	r1, [r7, #4]
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f001 f8ac 	bl	800696e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005816:	2300      	movs	r3, #0
 8005818:	2200      	movs	r2, #0
 800581a:	2100      	movs	r1, #0
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f001 fcb7 	bl	8007190 <USBD_LL_PrepareReceive>
 8005822:	e03f      	b.n	80058a4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	68da      	ldr	r2, [r3, #12]
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	429a      	cmp	r2, r3
 800582e:	d11c      	bne.n	800586a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005838:	429a      	cmp	r2, r3
 800583a:	d316      	bcc.n	800586a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005846:	429a      	cmp	r2, r3
 8005848:	d20f      	bcs.n	800586a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800584a:	2200      	movs	r2, #0
 800584c:	2100      	movs	r1, #0
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f001 f88d 	bl	800696e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800585c:	2300      	movs	r3, #0
 800585e:	2200      	movs	r2, #0
 8005860:	2100      	movs	r1, #0
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f001 fc94 	bl	8007190 <USBD_LL_PrepareReceive>
 8005868:	e01c      	b.n	80058a4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b03      	cmp	r3, #3
 8005874:	d10f      	bne.n	8005896 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d009      	beq.n	8005896 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005896:	2180      	movs	r1, #128	; 0x80
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f001 fbcf 	bl	800703c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f001 f89a 	bl	80069d8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d03a      	beq.n	8005924 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f7ff fe42 	bl	8005538 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80058bc:	e032      	b.n	8005924 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80058be:	7afb      	ldrb	r3, [r7, #11]
 80058c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	4619      	mov	r1, r3
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 f97f 	bl	8005bcc <USBD_CoreFindEP>
 80058ce:	4603      	mov	r3, r0
 80058d0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80058d2:	7dfb      	ldrb	r3, [r7, #23]
 80058d4:	2bff      	cmp	r3, #255	; 0xff
 80058d6:	d025      	beq.n	8005924 <USBD_LL_DataInStage+0x15a>
 80058d8:	7dfb      	ldrb	r3, [r7, #23]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d122      	bne.n	8005924 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b03      	cmp	r3, #3
 80058e8:	d11c      	bne.n	8005924 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80058ea:	7dfa      	ldrb	r2, [r7, #23]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	32ae      	adds	r2, #174	; 0xae
 80058f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d014      	beq.n	8005924 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80058fa:	7dfa      	ldrb	r2, [r7, #23]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005902:	7dfa      	ldrb	r2, [r7, #23]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	32ae      	adds	r2, #174	; 0xae
 8005908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	7afa      	ldrb	r2, [r7, #11]
 8005910:	4611      	mov	r1, r2
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	4798      	blx	r3
 8005916:	4603      	mov	r3, r0
 8005918:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800591a:	7dbb      	ldrb	r3, [r7, #22]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d001      	beq.n	8005924 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005920:	7dbb      	ldrb	r3, [r7, #22]
 8005922:	e000      	b.n	8005926 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3718      	adds	r7, #24
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b084      	sub	sp, #16
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005936:	2300      	movs	r3, #0
 8005938:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005966:	2b00      	cmp	r3, #0
 8005968:	d014      	beq.n	8005994 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00e      	beq.n	8005994 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	6852      	ldr	r2, [r2, #4]
 8005982:	b2d2      	uxtb	r2, r2
 8005984:	4611      	mov	r1, r2
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	4798      	blx	r3
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d001      	beq.n	8005994 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005990:	2303      	movs	r3, #3
 8005992:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005994:	2340      	movs	r3, #64	; 0x40
 8005996:	2200      	movs	r2, #0
 8005998:	2100      	movs	r1, #0
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f001 fb09 	bl	8006fb2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2240      	movs	r2, #64	; 0x40
 80059ac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80059b0:	2340      	movs	r3, #64	; 0x40
 80059b2:	2200      	movs	r2, #0
 80059b4:	2180      	movs	r1, #128	; 0x80
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f001 fafb 	bl	8006fb2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2240      	movs	r2, #64	; 0x40
 80059c6:	621a      	str	r2, [r3, #32]

  return ret;
 80059c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80059d2:	b480      	push	{r7}
 80059d4:	b083      	sub	sp, #12
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
 80059da:	460b      	mov	r3, r1
 80059dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	78fa      	ldrb	r2, [r7, #3]
 80059e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr

080059f2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b083      	sub	sp, #12
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2204      	movs	r2, #4
 8005a0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	370c      	adds	r7, #12
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr

08005a1e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b083      	sub	sp, #12
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	d106      	bne.n	8005a40 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b082      	sub	sp, #8
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b03      	cmp	r3, #3
 8005a60:	d110      	bne.n	8005a84 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00b      	beq.n	8005a84 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a72:	69db      	ldr	r3, [r3, #28]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d005      	beq.n	8005a84 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a7e:	69db      	ldr	r3, [r3, #28]
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3708      	adds	r7, #8
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b082      	sub	sp, #8
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
 8005a96:	460b      	mov	r3, r1
 8005a98:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	32ae      	adds	r2, #174	; 0xae
 8005aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d101      	bne.n	8005ab0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e01c      	b.n	8005aea <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b03      	cmp	r3, #3
 8005aba:	d115      	bne.n	8005ae8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	32ae      	adds	r2, #174	; 0xae
 8005ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00b      	beq.n	8005ae8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	32ae      	adds	r2, #174	; 0xae
 8005ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ade:	6a1b      	ldr	r3, [r3, #32]
 8005ae0:	78fa      	ldrb	r2, [r7, #3]
 8005ae2:	4611      	mov	r1, r2
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3708      	adds	r7, #8
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b082      	sub	sp, #8
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
 8005afa:	460b      	mov	r3, r1
 8005afc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	32ae      	adds	r2, #174	; 0xae
 8005b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d101      	bne.n	8005b14 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e01c      	b.n	8005b4e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b03      	cmp	r3, #3
 8005b1e:	d115      	bne.n	8005b4c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	32ae      	adds	r2, #174	; 0xae
 8005b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00b      	beq.n	8005b4c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	32ae      	adds	r2, #174	; 0xae
 8005b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b44:	78fa      	ldrb	r2, [r7, #3]
 8005b46:	4611      	mov	r1, r2
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3708      	adds	r7, #8
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005b56:	b480      	push	{r7}
 8005b58:	b083      	sub	sp, #12
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005b74:	2300      	movs	r3, #0
 8005b76:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00e      	beq.n	8005ba8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	6852      	ldr	r2, [r2, #4]
 8005b96:	b2d2      	uxtb	r2, r2
 8005b98:	4611      	mov	r1, r2
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	4798      	blx	r3
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d001      	beq.n	8005ba8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b083      	sub	sp, #12
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
 8005bba:	460b      	mov	r3, r1
 8005bbc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005bbe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005bd8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b086      	sub	sp, #24
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
 8005bee:	460b      	mov	r3, r1
 8005bf0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	885b      	ldrh	r3, [r3, #2]
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d920      	bls.n	8005c50 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005c16:	e013      	b.n	8005c40 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005c18:	f107 030a 	add.w	r3, r7, #10
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	6978      	ldr	r0, [r7, #20]
 8005c20:	f000 f81b 	bl	8005c5a <USBD_GetNextDesc>
 8005c24:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	785b      	ldrb	r3, [r3, #1]
 8005c2a:	2b05      	cmp	r3, #5
 8005c2c:	d108      	bne.n	8005c40 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	789b      	ldrb	r3, [r3, #2]
 8005c36:	78fa      	ldrb	r2, [r7, #3]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d008      	beq.n	8005c4e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	885b      	ldrh	r3, [r3, #2]
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	897b      	ldrh	r3, [r7, #10]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d8e5      	bhi.n	8005c18 <USBD_GetEpDesc+0x32>
 8005c4c:	e000      	b.n	8005c50 <USBD_GetEpDesc+0x6a>
          break;
 8005c4e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005c50:	693b      	ldr	r3, [r7, #16]
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3718      	adds	r7, #24
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b085      	sub	sp, #20
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
 8005c62:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	881a      	ldrh	r2, [r3, #0]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	4413      	add	r3, r2
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	461a      	mov	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4413      	add	r3, r2
 8005c84:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005c86:	68fb      	ldr	r3, [r7, #12]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005cb2:	8a3b      	ldrh	r3, [r7, #16]
 8005cb4:	021b      	lsls	r3, r3, #8
 8005cb6:	b21a      	sxth	r2, r3
 8005cb8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	b21b      	sxth	r3, r3
 8005cc0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005cc2:	89fb      	ldrh	r3, [r7, #14]
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	371c      	adds	r7, #28
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ce6:	2b40      	cmp	r3, #64	; 0x40
 8005ce8:	d005      	beq.n	8005cf6 <USBD_StdDevReq+0x26>
 8005cea:	2b40      	cmp	r3, #64	; 0x40
 8005cec:	d857      	bhi.n	8005d9e <USBD_StdDevReq+0xce>
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00f      	beq.n	8005d12 <USBD_StdDevReq+0x42>
 8005cf2:	2b20      	cmp	r3, #32
 8005cf4:	d153      	bne.n	8005d9e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	32ae      	adds	r2, #174	; 0xae
 8005d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	6839      	ldr	r1, [r7, #0]
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	4798      	blx	r3
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d10:	e04a      	b.n	8005da8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	785b      	ldrb	r3, [r3, #1]
 8005d16:	2b09      	cmp	r3, #9
 8005d18:	d83b      	bhi.n	8005d92 <USBD_StdDevReq+0xc2>
 8005d1a:	a201      	add	r2, pc, #4	; (adr r2, 8005d20 <USBD_StdDevReq+0x50>)
 8005d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d20:	08005d75 	.word	0x08005d75
 8005d24:	08005d89 	.word	0x08005d89
 8005d28:	08005d93 	.word	0x08005d93
 8005d2c:	08005d7f 	.word	0x08005d7f
 8005d30:	08005d93 	.word	0x08005d93
 8005d34:	08005d53 	.word	0x08005d53
 8005d38:	08005d49 	.word	0x08005d49
 8005d3c:	08005d93 	.word	0x08005d93
 8005d40:	08005d6b 	.word	0x08005d6b
 8005d44:	08005d5d 	.word	0x08005d5d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005d48:	6839      	ldr	r1, [r7, #0]
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 fa3c 	bl	80061c8 <USBD_GetDescriptor>
          break;
 8005d50:	e024      	b.n	8005d9c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005d52:	6839      	ldr	r1, [r7, #0]
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 fba1 	bl	800649c <USBD_SetAddress>
          break;
 8005d5a:	e01f      	b.n	8005d9c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005d5c:	6839      	ldr	r1, [r7, #0]
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 fbe0 	bl	8006524 <USBD_SetConfig>
 8005d64:	4603      	mov	r3, r0
 8005d66:	73fb      	strb	r3, [r7, #15]
          break;
 8005d68:	e018      	b.n	8005d9c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005d6a:	6839      	ldr	r1, [r7, #0]
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 fc83 	bl	8006678 <USBD_GetConfig>
          break;
 8005d72:	e013      	b.n	8005d9c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005d74:	6839      	ldr	r1, [r7, #0]
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 fcb4 	bl	80066e4 <USBD_GetStatus>
          break;
 8005d7c:	e00e      	b.n	8005d9c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005d7e:	6839      	ldr	r1, [r7, #0]
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 fce3 	bl	800674c <USBD_SetFeature>
          break;
 8005d86:	e009      	b.n	8005d9c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005d88:	6839      	ldr	r1, [r7, #0]
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 fd07 	bl	800679e <USBD_ClrFeature>
          break;
 8005d90:	e004      	b.n	8005d9c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005d92:	6839      	ldr	r1, [r7, #0]
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 fd5e 	bl	8006856 <USBD_CtlError>
          break;
 8005d9a:	bf00      	nop
      }
      break;
 8005d9c:	e004      	b.n	8005da8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005d9e:	6839      	ldr	r1, [r7, #0]
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 fd58 	bl	8006856 <USBD_CtlError>
      break;
 8005da6:	bf00      	nop
  }

  return ret;
 8005da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop

08005db4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005dca:	2b40      	cmp	r3, #64	; 0x40
 8005dcc:	d005      	beq.n	8005dda <USBD_StdItfReq+0x26>
 8005dce:	2b40      	cmp	r3, #64	; 0x40
 8005dd0:	d852      	bhi.n	8005e78 <USBD_StdItfReq+0xc4>
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d001      	beq.n	8005dda <USBD_StdItfReq+0x26>
 8005dd6:	2b20      	cmp	r3, #32
 8005dd8:	d14e      	bne.n	8005e78 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	3b01      	subs	r3, #1
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d840      	bhi.n	8005e6a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	889b      	ldrh	r3, [r3, #4]
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d836      	bhi.n	8005e60 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	889b      	ldrh	r3, [r3, #4]
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	4619      	mov	r1, r3
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f7ff fed9 	bl	8005bb2 <USBD_CoreFindIF>
 8005e00:	4603      	mov	r3, r0
 8005e02:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e04:	7bbb      	ldrb	r3, [r7, #14]
 8005e06:	2bff      	cmp	r3, #255	; 0xff
 8005e08:	d01d      	beq.n	8005e46 <USBD_StdItfReq+0x92>
 8005e0a:	7bbb      	ldrb	r3, [r7, #14]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d11a      	bne.n	8005e46 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005e10:	7bba      	ldrb	r2, [r7, #14]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	32ae      	adds	r2, #174	; 0xae
 8005e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00f      	beq.n	8005e40 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005e20:	7bba      	ldrb	r2, [r7, #14]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005e28:	7bba      	ldrb	r2, [r7, #14]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	32ae      	adds	r2, #174	; 0xae
 8005e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	6839      	ldr	r1, [r7, #0]
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	4798      	blx	r3
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005e3e:	e004      	b.n	8005e4a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005e40:	2303      	movs	r3, #3
 8005e42:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005e44:	e001      	b.n	8005e4a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005e46:	2303      	movs	r3, #3
 8005e48:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	88db      	ldrh	r3, [r3, #6]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d110      	bne.n	8005e74 <USBD_StdItfReq+0xc0>
 8005e52:	7bfb      	ldrb	r3, [r7, #15]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10d      	bne.n	8005e74 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 fdaa 	bl	80069b2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005e5e:	e009      	b.n	8005e74 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005e60:	6839      	ldr	r1, [r7, #0]
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 fcf7 	bl	8006856 <USBD_CtlError>
          break;
 8005e68:	e004      	b.n	8005e74 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005e6a:	6839      	ldr	r1, [r7, #0]
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 fcf2 	bl	8006856 <USBD_CtlError>
          break;
 8005e72:	e000      	b.n	8005e76 <USBD_StdItfReq+0xc2>
          break;
 8005e74:	bf00      	nop
      }
      break;
 8005e76:	e004      	b.n	8005e82 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005e78:	6839      	ldr	r1, [r7, #0]
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 fceb 	bl	8006856 <USBD_CtlError>
      break;
 8005e80:	bf00      	nop
  }

  return ret;
 8005e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005e96:	2300      	movs	r3, #0
 8005e98:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	889b      	ldrh	r3, [r3, #4]
 8005e9e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ea8:	2b40      	cmp	r3, #64	; 0x40
 8005eaa:	d007      	beq.n	8005ebc <USBD_StdEPReq+0x30>
 8005eac:	2b40      	cmp	r3, #64	; 0x40
 8005eae:	f200 817f 	bhi.w	80061b0 <USBD_StdEPReq+0x324>
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d02a      	beq.n	8005f0c <USBD_StdEPReq+0x80>
 8005eb6:	2b20      	cmp	r3, #32
 8005eb8:	f040 817a 	bne.w	80061b0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005ebc:	7bbb      	ldrb	r3, [r7, #14]
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f7ff fe83 	bl	8005bcc <USBD_CoreFindEP>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005eca:	7b7b      	ldrb	r3, [r7, #13]
 8005ecc:	2bff      	cmp	r3, #255	; 0xff
 8005ece:	f000 8174 	beq.w	80061ba <USBD_StdEPReq+0x32e>
 8005ed2:	7b7b      	ldrb	r3, [r7, #13]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f040 8170 	bne.w	80061ba <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005eda:	7b7a      	ldrb	r2, [r7, #13]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005ee2:	7b7a      	ldrb	r2, [r7, #13]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	32ae      	adds	r2, #174	; 0xae
 8005ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 8163 	beq.w	80061ba <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005ef4:	7b7a      	ldrb	r2, [r7, #13]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	32ae      	adds	r2, #174	; 0xae
 8005efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	6839      	ldr	r1, [r7, #0]
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	4798      	blx	r3
 8005f06:	4603      	mov	r3, r0
 8005f08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f0a:	e156      	b.n	80061ba <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	785b      	ldrb	r3, [r3, #1]
 8005f10:	2b03      	cmp	r3, #3
 8005f12:	d008      	beq.n	8005f26 <USBD_StdEPReq+0x9a>
 8005f14:	2b03      	cmp	r3, #3
 8005f16:	f300 8145 	bgt.w	80061a4 <USBD_StdEPReq+0x318>
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f000 809b 	beq.w	8006056 <USBD_StdEPReq+0x1ca>
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d03c      	beq.n	8005f9e <USBD_StdEPReq+0x112>
 8005f24:	e13e      	b.n	80061a4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d002      	beq.n	8005f38 <USBD_StdEPReq+0xac>
 8005f32:	2b03      	cmp	r3, #3
 8005f34:	d016      	beq.n	8005f64 <USBD_StdEPReq+0xd8>
 8005f36:	e02c      	b.n	8005f92 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f38:	7bbb      	ldrb	r3, [r7, #14]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00d      	beq.n	8005f5a <USBD_StdEPReq+0xce>
 8005f3e:	7bbb      	ldrb	r3, [r7, #14]
 8005f40:	2b80      	cmp	r3, #128	; 0x80
 8005f42:	d00a      	beq.n	8005f5a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f44:	7bbb      	ldrb	r3, [r7, #14]
 8005f46:	4619      	mov	r1, r3
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f001 f877 	bl	800703c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f4e:	2180      	movs	r1, #128	; 0x80
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f001 f873 	bl	800703c <USBD_LL_StallEP>
 8005f56:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f58:	e020      	b.n	8005f9c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005f5a:	6839      	ldr	r1, [r7, #0]
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 fc7a 	bl	8006856 <USBD_CtlError>
              break;
 8005f62:	e01b      	b.n	8005f9c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	885b      	ldrh	r3, [r3, #2]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d10e      	bne.n	8005f8a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005f6c:	7bbb      	ldrb	r3, [r7, #14]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00b      	beq.n	8005f8a <USBD_StdEPReq+0xfe>
 8005f72:	7bbb      	ldrb	r3, [r7, #14]
 8005f74:	2b80      	cmp	r3, #128	; 0x80
 8005f76:	d008      	beq.n	8005f8a <USBD_StdEPReq+0xfe>
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	88db      	ldrh	r3, [r3, #6]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d104      	bne.n	8005f8a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f80:	7bbb      	ldrb	r3, [r7, #14]
 8005f82:	4619      	mov	r1, r3
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f001 f859 	bl	800703c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fd11 	bl	80069b2 <USBD_CtlSendStatus>

              break;
 8005f90:	e004      	b.n	8005f9c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005f92:	6839      	ldr	r1, [r7, #0]
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 fc5e 	bl	8006856 <USBD_CtlError>
              break;
 8005f9a:	bf00      	nop
          }
          break;
 8005f9c:	e107      	b.n	80061ae <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d002      	beq.n	8005fb0 <USBD_StdEPReq+0x124>
 8005faa:	2b03      	cmp	r3, #3
 8005fac:	d016      	beq.n	8005fdc <USBD_StdEPReq+0x150>
 8005fae:	e04b      	b.n	8006048 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005fb0:	7bbb      	ldrb	r3, [r7, #14]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00d      	beq.n	8005fd2 <USBD_StdEPReq+0x146>
 8005fb6:	7bbb      	ldrb	r3, [r7, #14]
 8005fb8:	2b80      	cmp	r3, #128	; 0x80
 8005fba:	d00a      	beq.n	8005fd2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005fbc:	7bbb      	ldrb	r3, [r7, #14]
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f001 f83b 	bl	800703c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005fc6:	2180      	movs	r1, #128	; 0x80
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f001 f837 	bl	800703c <USBD_LL_StallEP>
 8005fce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005fd0:	e040      	b.n	8006054 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005fd2:	6839      	ldr	r1, [r7, #0]
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 fc3e 	bl	8006856 <USBD_CtlError>
              break;
 8005fda:	e03b      	b.n	8006054 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	885b      	ldrh	r3, [r3, #2]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d136      	bne.n	8006052 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005fe4:	7bbb      	ldrb	r3, [r7, #14]
 8005fe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d004      	beq.n	8005ff8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005fee:	7bbb      	ldrb	r3, [r7, #14]
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f001 f841 	bl	800707a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 fcda 	bl	80069b2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005ffe:	7bbb      	ldrb	r3, [r7, #14]
 8006000:	4619      	mov	r1, r3
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7ff fde2 	bl	8005bcc <USBD_CoreFindEP>
 8006008:	4603      	mov	r3, r0
 800600a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800600c:	7b7b      	ldrb	r3, [r7, #13]
 800600e:	2bff      	cmp	r3, #255	; 0xff
 8006010:	d01f      	beq.n	8006052 <USBD_StdEPReq+0x1c6>
 8006012:	7b7b      	ldrb	r3, [r7, #13]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d11c      	bne.n	8006052 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006018:	7b7a      	ldrb	r2, [r7, #13]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006020:	7b7a      	ldrb	r2, [r7, #13]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	32ae      	adds	r2, #174	; 0xae
 8006026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d010      	beq.n	8006052 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006030:	7b7a      	ldrb	r2, [r7, #13]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	32ae      	adds	r2, #174	; 0xae
 8006036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	6839      	ldr	r1, [r7, #0]
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	4798      	blx	r3
 8006042:	4603      	mov	r3, r0
 8006044:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006046:	e004      	b.n	8006052 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006048:	6839      	ldr	r1, [r7, #0]
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fc03 	bl	8006856 <USBD_CtlError>
              break;
 8006050:	e000      	b.n	8006054 <USBD_StdEPReq+0x1c8>
              break;
 8006052:	bf00      	nop
          }
          break;
 8006054:	e0ab      	b.n	80061ae <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b02      	cmp	r3, #2
 8006060:	d002      	beq.n	8006068 <USBD_StdEPReq+0x1dc>
 8006062:	2b03      	cmp	r3, #3
 8006064:	d032      	beq.n	80060cc <USBD_StdEPReq+0x240>
 8006066:	e097      	b.n	8006198 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006068:	7bbb      	ldrb	r3, [r7, #14]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d007      	beq.n	800607e <USBD_StdEPReq+0x1f2>
 800606e:	7bbb      	ldrb	r3, [r7, #14]
 8006070:	2b80      	cmp	r3, #128	; 0x80
 8006072:	d004      	beq.n	800607e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006074:	6839      	ldr	r1, [r7, #0]
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 fbed 	bl	8006856 <USBD_CtlError>
                break;
 800607c:	e091      	b.n	80061a2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800607e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006082:	2b00      	cmp	r3, #0
 8006084:	da0b      	bge.n	800609e <USBD_StdEPReq+0x212>
 8006086:	7bbb      	ldrb	r3, [r7, #14]
 8006088:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800608c:	4613      	mov	r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	4413      	add	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	3310      	adds	r3, #16
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	4413      	add	r3, r2
 800609a:	3304      	adds	r3, #4
 800609c:	e00b      	b.n	80060b6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800609e:	7bbb      	ldrb	r3, [r7, #14]
 80060a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060a4:	4613      	mov	r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4413      	add	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	4413      	add	r3, r2
 80060b4:	3304      	adds	r3, #4
 80060b6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	2200      	movs	r2, #0
 80060bc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	2202      	movs	r2, #2
 80060c2:	4619      	mov	r1, r3
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 fc37 	bl	8006938 <USBD_CtlSendData>
              break;
 80060ca:	e06a      	b.n	80061a2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80060cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	da11      	bge.n	80060f8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80060d4:	7bbb      	ldrb	r3, [r7, #14]
 80060d6:	f003 020f 	and.w	r2, r3, #15
 80060da:	6879      	ldr	r1, [r7, #4]
 80060dc:	4613      	mov	r3, r2
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	4413      	add	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	440b      	add	r3, r1
 80060e6:	3324      	adds	r3, #36	; 0x24
 80060e8:	881b      	ldrh	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d117      	bne.n	800611e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80060ee:	6839      	ldr	r1, [r7, #0]
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 fbb0 	bl	8006856 <USBD_CtlError>
                  break;
 80060f6:	e054      	b.n	80061a2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80060f8:	7bbb      	ldrb	r3, [r7, #14]
 80060fa:	f003 020f 	and.w	r2, r3, #15
 80060fe:	6879      	ldr	r1, [r7, #4]
 8006100:	4613      	mov	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	440b      	add	r3, r1
 800610a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800610e:	881b      	ldrh	r3, [r3, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d104      	bne.n	800611e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006114:	6839      	ldr	r1, [r7, #0]
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 fb9d 	bl	8006856 <USBD_CtlError>
                  break;
 800611c:	e041      	b.n	80061a2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800611e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006122:	2b00      	cmp	r3, #0
 8006124:	da0b      	bge.n	800613e <USBD_StdEPReq+0x2b2>
 8006126:	7bbb      	ldrb	r3, [r7, #14]
 8006128:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800612c:	4613      	mov	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	3310      	adds	r3, #16
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	4413      	add	r3, r2
 800613a:	3304      	adds	r3, #4
 800613c:	e00b      	b.n	8006156 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800613e:	7bbb      	ldrb	r3, [r7, #14]
 8006140:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006144:	4613      	mov	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	4413      	add	r3, r2
 8006154:	3304      	adds	r3, #4
 8006156:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006158:	7bbb      	ldrb	r3, [r7, #14]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d002      	beq.n	8006164 <USBD_StdEPReq+0x2d8>
 800615e:	7bbb      	ldrb	r3, [r7, #14]
 8006160:	2b80      	cmp	r3, #128	; 0x80
 8006162:	d103      	bne.n	800616c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	2200      	movs	r2, #0
 8006168:	601a      	str	r2, [r3, #0]
 800616a:	e00e      	b.n	800618a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800616c:	7bbb      	ldrb	r3, [r7, #14]
 800616e:	4619      	mov	r1, r3
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 ffa1 	bl	80070b8 <USBD_LL_IsStallEP>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d003      	beq.n	8006184 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2201      	movs	r2, #1
 8006180:	601a      	str	r2, [r3, #0]
 8006182:	e002      	b.n	800618a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	2200      	movs	r2, #0
 8006188:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	2202      	movs	r2, #2
 800618e:	4619      	mov	r1, r3
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 fbd1 	bl	8006938 <USBD_CtlSendData>
              break;
 8006196:	e004      	b.n	80061a2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006198:	6839      	ldr	r1, [r7, #0]
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 fb5b 	bl	8006856 <USBD_CtlError>
              break;
 80061a0:	bf00      	nop
          }
          break;
 80061a2:	e004      	b.n	80061ae <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80061a4:	6839      	ldr	r1, [r7, #0]
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 fb55 	bl	8006856 <USBD_CtlError>
          break;
 80061ac:	bf00      	nop
      }
      break;
 80061ae:	e005      	b.n	80061bc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80061b0:	6839      	ldr	r1, [r7, #0]
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 fb4f 	bl	8006856 <USBD_CtlError>
      break;
 80061b8:	e000      	b.n	80061bc <USBD_StdEPReq+0x330>
      break;
 80061ba:	bf00      	nop
  }

  return ret;
 80061bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
	...

080061c8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80061d2:	2300      	movs	r3, #0
 80061d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80061d6:	2300      	movs	r3, #0
 80061d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80061da:	2300      	movs	r3, #0
 80061dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	885b      	ldrh	r3, [r3, #2]
 80061e2:	0a1b      	lsrs	r3, r3, #8
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	3b01      	subs	r3, #1
 80061e8:	2b06      	cmp	r3, #6
 80061ea:	f200 8128 	bhi.w	800643e <USBD_GetDescriptor+0x276>
 80061ee:	a201      	add	r2, pc, #4	; (adr r2, 80061f4 <USBD_GetDescriptor+0x2c>)
 80061f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f4:	08006211 	.word	0x08006211
 80061f8:	08006229 	.word	0x08006229
 80061fc:	08006269 	.word	0x08006269
 8006200:	0800643f 	.word	0x0800643f
 8006204:	0800643f 	.word	0x0800643f
 8006208:	080063df 	.word	0x080063df
 800620c:	0800640b 	.word	0x0800640b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	7c12      	ldrb	r2, [r2, #16]
 800621c:	f107 0108 	add.w	r1, r7, #8
 8006220:	4610      	mov	r0, r2
 8006222:	4798      	blx	r3
 8006224:	60f8      	str	r0, [r7, #12]
      break;
 8006226:	e112      	b.n	800644e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	7c1b      	ldrb	r3, [r3, #16]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10d      	bne.n	800624c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006238:	f107 0208 	add.w	r2, r7, #8
 800623c:	4610      	mov	r0, r2
 800623e:	4798      	blx	r3
 8006240:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	3301      	adds	r3, #1
 8006246:	2202      	movs	r2, #2
 8006248:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800624a:	e100      	b.n	800644e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006254:	f107 0208 	add.w	r2, r7, #8
 8006258:	4610      	mov	r0, r2
 800625a:	4798      	blx	r3
 800625c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	3301      	adds	r3, #1
 8006262:	2202      	movs	r2, #2
 8006264:	701a      	strb	r2, [r3, #0]
      break;
 8006266:	e0f2      	b.n	800644e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	885b      	ldrh	r3, [r3, #2]
 800626c:	b2db      	uxtb	r3, r3
 800626e:	2b05      	cmp	r3, #5
 8006270:	f200 80ac 	bhi.w	80063cc <USBD_GetDescriptor+0x204>
 8006274:	a201      	add	r2, pc, #4	; (adr r2, 800627c <USBD_GetDescriptor+0xb4>)
 8006276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627a:	bf00      	nop
 800627c:	08006295 	.word	0x08006295
 8006280:	080062c9 	.word	0x080062c9
 8006284:	080062fd 	.word	0x080062fd
 8006288:	08006331 	.word	0x08006331
 800628c:	08006365 	.word	0x08006365
 8006290:	08006399 	.word	0x08006399
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00b      	beq.n	80062b8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	7c12      	ldrb	r2, [r2, #16]
 80062ac:	f107 0108 	add.w	r1, r7, #8
 80062b0:	4610      	mov	r0, r2
 80062b2:	4798      	blx	r3
 80062b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062b6:	e091      	b.n	80063dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062b8:	6839      	ldr	r1, [r7, #0]
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 facb 	bl	8006856 <USBD_CtlError>
            err++;
 80062c0:	7afb      	ldrb	r3, [r7, #11]
 80062c2:	3301      	adds	r3, #1
 80062c4:	72fb      	strb	r3, [r7, #11]
          break;
 80062c6:	e089      	b.n	80063dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00b      	beq.n	80062ec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	7c12      	ldrb	r2, [r2, #16]
 80062e0:	f107 0108 	add.w	r1, r7, #8
 80062e4:	4610      	mov	r0, r2
 80062e6:	4798      	blx	r3
 80062e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062ea:	e077      	b.n	80063dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062ec:	6839      	ldr	r1, [r7, #0]
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fab1 	bl	8006856 <USBD_CtlError>
            err++;
 80062f4:	7afb      	ldrb	r3, [r7, #11]
 80062f6:	3301      	adds	r3, #1
 80062f8:	72fb      	strb	r3, [r7, #11]
          break;
 80062fa:	e06f      	b.n	80063dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00b      	beq.n	8006320 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	7c12      	ldrb	r2, [r2, #16]
 8006314:	f107 0108 	add.w	r1, r7, #8
 8006318:	4610      	mov	r0, r2
 800631a:	4798      	blx	r3
 800631c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800631e:	e05d      	b.n	80063dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006320:	6839      	ldr	r1, [r7, #0]
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 fa97 	bl	8006856 <USBD_CtlError>
            err++;
 8006328:	7afb      	ldrb	r3, [r7, #11]
 800632a:	3301      	adds	r3, #1
 800632c:	72fb      	strb	r3, [r7, #11]
          break;
 800632e:	e055      	b.n	80063dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00b      	beq.n	8006354 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	7c12      	ldrb	r2, [r2, #16]
 8006348:	f107 0108 	add.w	r1, r7, #8
 800634c:	4610      	mov	r0, r2
 800634e:	4798      	blx	r3
 8006350:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006352:	e043      	b.n	80063dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006354:	6839      	ldr	r1, [r7, #0]
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 fa7d 	bl	8006856 <USBD_CtlError>
            err++;
 800635c:	7afb      	ldrb	r3, [r7, #11]
 800635e:	3301      	adds	r3, #1
 8006360:	72fb      	strb	r3, [r7, #11]
          break;
 8006362:	e03b      	b.n	80063dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00b      	beq.n	8006388 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006376:	695b      	ldr	r3, [r3, #20]
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	7c12      	ldrb	r2, [r2, #16]
 800637c:	f107 0108 	add.w	r1, r7, #8
 8006380:	4610      	mov	r0, r2
 8006382:	4798      	blx	r3
 8006384:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006386:	e029      	b.n	80063dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006388:	6839      	ldr	r1, [r7, #0]
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 fa63 	bl	8006856 <USBD_CtlError>
            err++;
 8006390:	7afb      	ldrb	r3, [r7, #11]
 8006392:	3301      	adds	r3, #1
 8006394:	72fb      	strb	r3, [r7, #11]
          break;
 8006396:	e021      	b.n	80063dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800639e:	699b      	ldr	r3, [r3, #24]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00b      	beq.n	80063bc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	7c12      	ldrb	r2, [r2, #16]
 80063b0:	f107 0108 	add.w	r1, r7, #8
 80063b4:	4610      	mov	r0, r2
 80063b6:	4798      	blx	r3
 80063b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063ba:	e00f      	b.n	80063dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063bc:	6839      	ldr	r1, [r7, #0]
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 fa49 	bl	8006856 <USBD_CtlError>
            err++;
 80063c4:	7afb      	ldrb	r3, [r7, #11]
 80063c6:	3301      	adds	r3, #1
 80063c8:	72fb      	strb	r3, [r7, #11]
          break;
 80063ca:	e007      	b.n	80063dc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80063cc:	6839      	ldr	r1, [r7, #0]
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 fa41 	bl	8006856 <USBD_CtlError>
          err++;
 80063d4:	7afb      	ldrb	r3, [r7, #11]
 80063d6:	3301      	adds	r3, #1
 80063d8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80063da:	bf00      	nop
      }
      break;
 80063dc:	e037      	b.n	800644e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	7c1b      	ldrb	r3, [r3, #16]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d109      	bne.n	80063fa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ee:	f107 0208 	add.w	r2, r7, #8
 80063f2:	4610      	mov	r0, r2
 80063f4:	4798      	blx	r3
 80063f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80063f8:	e029      	b.n	800644e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80063fa:	6839      	ldr	r1, [r7, #0]
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 fa2a 	bl	8006856 <USBD_CtlError>
        err++;
 8006402:	7afb      	ldrb	r3, [r7, #11]
 8006404:	3301      	adds	r3, #1
 8006406:	72fb      	strb	r3, [r7, #11]
      break;
 8006408:	e021      	b.n	800644e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	7c1b      	ldrb	r3, [r3, #16]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10d      	bne.n	800642e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641a:	f107 0208 	add.w	r2, r7, #8
 800641e:	4610      	mov	r0, r2
 8006420:	4798      	blx	r3
 8006422:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	3301      	adds	r3, #1
 8006428:	2207      	movs	r2, #7
 800642a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800642c:	e00f      	b.n	800644e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800642e:	6839      	ldr	r1, [r7, #0]
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 fa10 	bl	8006856 <USBD_CtlError>
        err++;
 8006436:	7afb      	ldrb	r3, [r7, #11]
 8006438:	3301      	adds	r3, #1
 800643a:	72fb      	strb	r3, [r7, #11]
      break;
 800643c:	e007      	b.n	800644e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800643e:	6839      	ldr	r1, [r7, #0]
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 fa08 	bl	8006856 <USBD_CtlError>
      err++;
 8006446:	7afb      	ldrb	r3, [r7, #11]
 8006448:	3301      	adds	r3, #1
 800644a:	72fb      	strb	r3, [r7, #11]
      break;
 800644c:	bf00      	nop
  }

  if (err != 0U)
 800644e:	7afb      	ldrb	r3, [r7, #11]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d11e      	bne.n	8006492 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	88db      	ldrh	r3, [r3, #6]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d016      	beq.n	800648a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800645c:	893b      	ldrh	r3, [r7, #8]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00e      	beq.n	8006480 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	88da      	ldrh	r2, [r3, #6]
 8006466:	893b      	ldrh	r3, [r7, #8]
 8006468:	4293      	cmp	r3, r2
 800646a:	bf28      	it	cs
 800646c:	4613      	movcs	r3, r2
 800646e:	b29b      	uxth	r3, r3
 8006470:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006472:	893b      	ldrh	r3, [r7, #8]
 8006474:	461a      	mov	r2, r3
 8006476:	68f9      	ldr	r1, [r7, #12]
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 fa5d 	bl	8006938 <USBD_CtlSendData>
 800647e:	e009      	b.n	8006494 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006480:	6839      	ldr	r1, [r7, #0]
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f9e7 	bl	8006856 <USBD_CtlError>
 8006488:	e004      	b.n	8006494 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fa91 	bl	80069b2 <USBD_CtlSendStatus>
 8006490:	e000      	b.n	8006494 <USBD_GetDescriptor+0x2cc>
    return;
 8006492:	bf00      	nop
  }
}
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop

0800649c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	889b      	ldrh	r3, [r3, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d131      	bne.n	8006512 <USBD_SetAddress+0x76>
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	88db      	ldrh	r3, [r3, #6]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d12d      	bne.n	8006512 <USBD_SetAddress+0x76>
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	885b      	ldrh	r3, [r3, #2]
 80064ba:	2b7f      	cmp	r3, #127	; 0x7f
 80064bc:	d829      	bhi.n	8006512 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	885b      	ldrh	r3, [r3, #2]
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b03      	cmp	r3, #3
 80064d4:	d104      	bne.n	80064e0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80064d6:	6839      	ldr	r1, [r7, #0]
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 f9bc 	bl	8006856 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064de:	e01d      	b.n	800651c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	7bfa      	ldrb	r2, [r7, #15]
 80064e4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80064e8:	7bfb      	ldrb	r3, [r7, #15]
 80064ea:	4619      	mov	r1, r3
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 fe0f 	bl	8007110 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fa5d 	bl	80069b2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80064f8:	7bfb      	ldrb	r3, [r7, #15]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d004      	beq.n	8006508 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2202      	movs	r2, #2
 8006502:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006506:	e009      	b.n	800651c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006510:	e004      	b.n	800651c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006512:	6839      	ldr	r1, [r7, #0]
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 f99e 	bl	8006856 <USBD_CtlError>
  }
}
 800651a:	bf00      	nop
 800651c:	bf00      	nop
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800652e:	2300      	movs	r3, #0
 8006530:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	885b      	ldrh	r3, [r3, #2]
 8006536:	b2da      	uxtb	r2, r3
 8006538:	4b4e      	ldr	r3, [pc, #312]	; (8006674 <USBD_SetConfig+0x150>)
 800653a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800653c:	4b4d      	ldr	r3, [pc, #308]	; (8006674 <USBD_SetConfig+0x150>)
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d905      	bls.n	8006550 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006544:	6839      	ldr	r1, [r7, #0]
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f985 	bl	8006856 <USBD_CtlError>
    return USBD_FAIL;
 800654c:	2303      	movs	r3, #3
 800654e:	e08c      	b.n	800666a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006556:	b2db      	uxtb	r3, r3
 8006558:	2b02      	cmp	r3, #2
 800655a:	d002      	beq.n	8006562 <USBD_SetConfig+0x3e>
 800655c:	2b03      	cmp	r3, #3
 800655e:	d029      	beq.n	80065b4 <USBD_SetConfig+0x90>
 8006560:	e075      	b.n	800664e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006562:	4b44      	ldr	r3, [pc, #272]	; (8006674 <USBD_SetConfig+0x150>)
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d020      	beq.n	80065ac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800656a:	4b42      	ldr	r3, [pc, #264]	; (8006674 <USBD_SetConfig+0x150>)
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	461a      	mov	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006574:	4b3f      	ldr	r3, [pc, #252]	; (8006674 <USBD_SetConfig+0x150>)
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	4619      	mov	r1, r3
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f7fe ffe7 	bl	800554e <USBD_SetClassConfig>
 8006580:	4603      	mov	r3, r0
 8006582:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006584:	7bfb      	ldrb	r3, [r7, #15]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d008      	beq.n	800659c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800658a:	6839      	ldr	r1, [r7, #0]
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 f962 	bl	8006856 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2202      	movs	r2, #2
 8006596:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800659a:	e065      	b.n	8006668 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 fa08 	bl	80069b2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2203      	movs	r2, #3
 80065a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80065aa:	e05d      	b.n	8006668 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 fa00 	bl	80069b2 <USBD_CtlSendStatus>
      break;
 80065b2:	e059      	b.n	8006668 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80065b4:	4b2f      	ldr	r3, [pc, #188]	; (8006674 <USBD_SetConfig+0x150>)
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d112      	bne.n	80065e2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2202      	movs	r2, #2
 80065c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80065c4:	4b2b      	ldr	r3, [pc, #172]	; (8006674 <USBD_SetConfig+0x150>)
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	461a      	mov	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80065ce:	4b29      	ldr	r3, [pc, #164]	; (8006674 <USBD_SetConfig+0x150>)
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	4619      	mov	r1, r3
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f7fe ffd6 	bl	8005586 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 f9e9 	bl	80069b2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80065e0:	e042      	b.n	8006668 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80065e2:	4b24      	ldr	r3, [pc, #144]	; (8006674 <USBD_SetConfig+0x150>)
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	461a      	mov	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d02a      	beq.n	8006646 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	4619      	mov	r1, r3
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f7fe ffc4 	bl	8005586 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80065fe:	4b1d      	ldr	r3, [pc, #116]	; (8006674 <USBD_SetConfig+0x150>)
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	461a      	mov	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006608:	4b1a      	ldr	r3, [pc, #104]	; (8006674 <USBD_SetConfig+0x150>)
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	4619      	mov	r1, r3
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f7fe ff9d 	bl	800554e <USBD_SetClassConfig>
 8006614:	4603      	mov	r3, r0
 8006616:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006618:	7bfb      	ldrb	r3, [r7, #15]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00f      	beq.n	800663e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800661e:	6839      	ldr	r1, [r7, #0]
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 f918 	bl	8006856 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	b2db      	uxtb	r3, r3
 800662c:	4619      	mov	r1, r3
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f7fe ffa9 	bl	8005586 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2202      	movs	r2, #2
 8006638:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800663c:	e014      	b.n	8006668 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f9b7 	bl	80069b2 <USBD_CtlSendStatus>
      break;
 8006644:	e010      	b.n	8006668 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f9b3 	bl	80069b2 <USBD_CtlSendStatus>
      break;
 800664c:	e00c      	b.n	8006668 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800664e:	6839      	ldr	r1, [r7, #0]
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f900 	bl	8006856 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006656:	4b07      	ldr	r3, [pc, #28]	; (8006674 <USBD_SetConfig+0x150>)
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	4619      	mov	r1, r3
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f7fe ff92 	bl	8005586 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006662:	2303      	movs	r3, #3
 8006664:	73fb      	strb	r3, [r7, #15]
      break;
 8006666:	bf00      	nop
  }

  return ret;
 8006668:	7bfb      	ldrb	r3, [r7, #15]
}
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	200001ac 	.word	0x200001ac

08006678 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	88db      	ldrh	r3, [r3, #6]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d004      	beq.n	8006694 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800668a:	6839      	ldr	r1, [r7, #0]
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f8e2 	bl	8006856 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006692:	e023      	b.n	80066dc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800669a:	b2db      	uxtb	r3, r3
 800669c:	2b02      	cmp	r3, #2
 800669e:	dc02      	bgt.n	80066a6 <USBD_GetConfig+0x2e>
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	dc03      	bgt.n	80066ac <USBD_GetConfig+0x34>
 80066a4:	e015      	b.n	80066d2 <USBD_GetConfig+0x5a>
 80066a6:	2b03      	cmp	r3, #3
 80066a8:	d00b      	beq.n	80066c2 <USBD_GetConfig+0x4a>
 80066aa:	e012      	b.n	80066d2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	3308      	adds	r3, #8
 80066b6:	2201      	movs	r2, #1
 80066b8:	4619      	mov	r1, r3
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 f93c 	bl	8006938 <USBD_CtlSendData>
        break;
 80066c0:	e00c      	b.n	80066dc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	3304      	adds	r3, #4
 80066c6:	2201      	movs	r2, #1
 80066c8:	4619      	mov	r1, r3
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 f934 	bl	8006938 <USBD_CtlSendData>
        break;
 80066d0:	e004      	b.n	80066dc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80066d2:	6839      	ldr	r1, [r7, #0]
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 f8be 	bl	8006856 <USBD_CtlError>
        break;
 80066da:	bf00      	nop
}
 80066dc:	bf00      	nop
 80066de:	3708      	adds	r7, #8
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	3b01      	subs	r3, #1
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d81e      	bhi.n	800673a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	88db      	ldrh	r3, [r3, #6]
 8006700:	2b02      	cmp	r3, #2
 8006702:	d004      	beq.n	800670e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006704:	6839      	ldr	r1, [r7, #0]
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f8a5 	bl	8006856 <USBD_CtlError>
        break;
 800670c:	e01a      	b.n	8006744 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800671a:	2b00      	cmp	r3, #0
 800671c:	d005      	beq.n	800672a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	f043 0202 	orr.w	r2, r3, #2
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	330c      	adds	r3, #12
 800672e:	2202      	movs	r2, #2
 8006730:	4619      	mov	r1, r3
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 f900 	bl	8006938 <USBD_CtlSendData>
      break;
 8006738:	e004      	b.n	8006744 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800673a:	6839      	ldr	r1, [r7, #0]
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 f88a 	bl	8006856 <USBD_CtlError>
      break;
 8006742:	bf00      	nop
  }
}
 8006744:	bf00      	nop
 8006746:	3708      	adds	r7, #8
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	885b      	ldrh	r3, [r3, #2]
 800675a:	2b01      	cmp	r3, #1
 800675c:	d107      	bne.n	800676e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2201      	movs	r2, #1
 8006762:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f923 	bl	80069b2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800676c:	e013      	b.n	8006796 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	885b      	ldrh	r3, [r3, #2]
 8006772:	2b02      	cmp	r3, #2
 8006774:	d10b      	bne.n	800678e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	889b      	ldrh	r3, [r3, #4]
 800677a:	0a1b      	lsrs	r3, r3, #8
 800677c:	b29b      	uxth	r3, r3
 800677e:	b2da      	uxtb	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 f913 	bl	80069b2 <USBD_CtlSendStatus>
}
 800678c:	e003      	b.n	8006796 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800678e:	6839      	ldr	r1, [r7, #0]
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 f860 	bl	8006856 <USBD_CtlError>
}
 8006796:	bf00      	nop
 8006798:	3708      	adds	r7, #8
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b082      	sub	sp, #8
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
 80067a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	3b01      	subs	r3, #1
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d80b      	bhi.n	80067ce <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	885b      	ldrh	r3, [r3, #2]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d10c      	bne.n	80067d8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 f8f3 	bl	80069b2 <USBD_CtlSendStatus>
      }
      break;
 80067cc:	e004      	b.n	80067d8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80067ce:	6839      	ldr	r1, [r7, #0]
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 f840 	bl	8006856 <USBD_CtlError>
      break;
 80067d6:	e000      	b.n	80067da <USBD_ClrFeature+0x3c>
      break;
 80067d8:	bf00      	nop
  }
}
 80067da:	bf00      	nop
 80067dc:	3708      	adds	r7, #8
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b084      	sub	sp, #16
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
 80067ea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	781a      	ldrb	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	3301      	adds	r3, #1
 80067fc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	781a      	ldrb	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	3301      	adds	r3, #1
 800680a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	f7ff fa41 	bl	8005c94 <SWAPBYTE>
 8006812:	4603      	mov	r3, r0
 8006814:	461a      	mov	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	3301      	adds	r3, #1
 800681e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	3301      	adds	r3, #1
 8006824:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f7ff fa34 	bl	8005c94 <SWAPBYTE>
 800682c:	4603      	mov	r3, r0
 800682e:	461a      	mov	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	3301      	adds	r3, #1
 8006838:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	3301      	adds	r3, #1
 800683e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f7ff fa27 	bl	8005c94 <SWAPBYTE>
 8006846:	4603      	mov	r3, r0
 8006848:	461a      	mov	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	80da      	strh	r2, [r3, #6]
}
 800684e:	bf00      	nop
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b082      	sub	sp, #8
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
 800685e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006860:	2180      	movs	r1, #128	; 0x80
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 fbea 	bl	800703c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006868:	2100      	movs	r1, #0
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 fbe6 	bl	800703c <USBD_LL_StallEP>
}
 8006870:	bf00      	nop
 8006872:	3708      	adds	r7, #8
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b086      	sub	sp, #24
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006884:	2300      	movs	r3, #0
 8006886:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d036      	beq.n	80068fc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006892:	6938      	ldr	r0, [r7, #16]
 8006894:	f000 f836 	bl	8006904 <USBD_GetLen>
 8006898:	4603      	mov	r3, r0
 800689a:	3301      	adds	r3, #1
 800689c:	b29b      	uxth	r3, r3
 800689e:	005b      	lsls	r3, r3, #1
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80068a6:	7dfb      	ldrb	r3, [r7, #23]
 80068a8:	68ba      	ldr	r2, [r7, #8]
 80068aa:	4413      	add	r3, r2
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	7812      	ldrb	r2, [r2, #0]
 80068b0:	701a      	strb	r2, [r3, #0]
  idx++;
 80068b2:	7dfb      	ldrb	r3, [r7, #23]
 80068b4:	3301      	adds	r3, #1
 80068b6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80068b8:	7dfb      	ldrb	r3, [r7, #23]
 80068ba:	68ba      	ldr	r2, [r7, #8]
 80068bc:	4413      	add	r3, r2
 80068be:	2203      	movs	r2, #3
 80068c0:	701a      	strb	r2, [r3, #0]
  idx++;
 80068c2:	7dfb      	ldrb	r3, [r7, #23]
 80068c4:	3301      	adds	r3, #1
 80068c6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80068c8:	e013      	b.n	80068f2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80068ca:	7dfb      	ldrb	r3, [r7, #23]
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	4413      	add	r3, r2
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	7812      	ldrb	r2, [r2, #0]
 80068d4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	3301      	adds	r3, #1
 80068da:	613b      	str	r3, [r7, #16]
    idx++;
 80068dc:	7dfb      	ldrb	r3, [r7, #23]
 80068de:	3301      	adds	r3, #1
 80068e0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80068e2:	7dfb      	ldrb	r3, [r7, #23]
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	4413      	add	r3, r2
 80068e8:	2200      	movs	r2, #0
 80068ea:	701a      	strb	r2, [r3, #0]
    idx++;
 80068ec:	7dfb      	ldrb	r3, [r7, #23]
 80068ee:	3301      	adds	r3, #1
 80068f0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1e7      	bne.n	80068ca <USBD_GetString+0x52>
 80068fa:	e000      	b.n	80068fe <USBD_GetString+0x86>
    return;
 80068fc:	bf00      	nop
  }
}
 80068fe:	3718      	adds	r7, #24
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800690c:	2300      	movs	r3, #0
 800690e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006914:	e005      	b.n	8006922 <USBD_GetLen+0x1e>
  {
    len++;
 8006916:	7bfb      	ldrb	r3, [r7, #15]
 8006918:	3301      	adds	r3, #1
 800691a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	3301      	adds	r3, #1
 8006920:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1f5      	bne.n	8006916 <USBD_GetLen+0x12>
  }

  return len;
 800692a:	7bfb      	ldrb	r3, [r7, #15]
}
 800692c:	4618      	mov	r0, r3
 800692e:	3714      	adds	r7, #20
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2202      	movs	r2, #2
 8006948:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	2100      	movs	r1, #0
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f000 fbf5 	bl	800714e <USBD_LL_Transmit>

  return USBD_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b084      	sub	sp, #16
 8006972:	af00      	add	r7, sp, #0
 8006974:	60f8      	str	r0, [r7, #12]
 8006976:	60b9      	str	r1, [r7, #8]
 8006978:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	68ba      	ldr	r2, [r7, #8]
 800697e:	2100      	movs	r1, #0
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f000 fbe4 	bl	800714e <USBD_LL_Transmit>

  return USBD_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	2100      	movs	r1, #0
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f000 fbf4 	bl	8007190 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b082      	sub	sp, #8
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2204      	movs	r2, #4
 80069be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80069c2:	2300      	movs	r3, #0
 80069c4:	2200      	movs	r2, #0
 80069c6:	2100      	movs	r1, #0
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 fbc0 	bl	800714e <USBD_LL_Transmit>

  return USBD_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3708      	adds	r7, #8
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2205      	movs	r2, #5
 80069e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069e8:	2300      	movs	r3, #0
 80069ea:	2200      	movs	r2, #0
 80069ec:	2100      	movs	r1, #0
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fbce 	bl	8007190 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3708      	adds	r7, #8
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
	...

08006a00 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006a04:	2200      	movs	r2, #0
 8006a06:	490e      	ldr	r1, [pc, #56]	; (8006a40 <MX_USB_DEVICE_Init+0x40>)
 8006a08:	480e      	ldr	r0, [pc, #56]	; (8006a44 <MX_USB_DEVICE_Init+0x44>)
 8006a0a:	f7fe fd23 	bl	8005454 <USBD_Init>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d001      	beq.n	8006a18 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006a14:	f7f9 ff60 	bl	80008d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006a18:	490b      	ldr	r1, [pc, #44]	; (8006a48 <MX_USB_DEVICE_Init+0x48>)
 8006a1a:	480a      	ldr	r0, [pc, #40]	; (8006a44 <MX_USB_DEVICE_Init+0x44>)
 8006a1c:	f7fe fd4a 	bl	80054b4 <USBD_RegisterClass>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d001      	beq.n	8006a2a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006a26:	f7f9 ff57 	bl	80008d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006a2a:	4806      	ldr	r0, [pc, #24]	; (8006a44 <MX_USB_DEVICE_Init+0x44>)
 8006a2c:	f7fe fd78 	bl	8005520 <USBD_Start>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d001      	beq.n	8006a3a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006a36:	f7f9 ff4f 	bl	80008d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006a3a:	bf00      	nop
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	200000a4 	.word	0x200000a4
 8006a44:	200001b0 	.word	0x200001b0
 8006a48:	2000000c 	.word	0x2000000c

08006a4c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	4603      	mov	r3, r0
 8006a54:	6039      	str	r1, [r7, #0]
 8006a56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	2212      	movs	r2, #18
 8006a5c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006a5e:	4b03      	ldr	r3, [pc, #12]	; (8006a6c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr
 8006a6c:	200000c0 	.word	0x200000c0

08006a70 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	4603      	mov	r3, r0
 8006a78:	6039      	str	r1, [r7, #0]
 8006a7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	2204      	movs	r2, #4
 8006a80:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006a82:	4b03      	ldr	r3, [pc, #12]	; (8006a90 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr
 8006a90:	200000d4 	.word	0x200000d4

08006a94 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	6039      	str	r1, [r7, #0]
 8006a9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006aa0:	79fb      	ldrb	r3, [r7, #7]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d105      	bne.n	8006ab2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006aa6:	683a      	ldr	r2, [r7, #0]
 8006aa8:	4907      	ldr	r1, [pc, #28]	; (8006ac8 <USBD_FS_ProductStrDescriptor+0x34>)
 8006aaa:	4808      	ldr	r0, [pc, #32]	; (8006acc <USBD_FS_ProductStrDescriptor+0x38>)
 8006aac:	f7ff fee4 	bl	8006878 <USBD_GetString>
 8006ab0:	e004      	b.n	8006abc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006ab2:	683a      	ldr	r2, [r7, #0]
 8006ab4:	4904      	ldr	r1, [pc, #16]	; (8006ac8 <USBD_FS_ProductStrDescriptor+0x34>)
 8006ab6:	4805      	ldr	r0, [pc, #20]	; (8006acc <USBD_FS_ProductStrDescriptor+0x38>)
 8006ab8:	f7ff fede 	bl	8006878 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006abc:	4b02      	ldr	r3, [pc, #8]	; (8006ac8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3708      	adds	r7, #8
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	2000048c 	.word	0x2000048c
 8006acc:	080072cc 	.word	0x080072cc

08006ad0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	6039      	str	r1, [r7, #0]
 8006ada:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006adc:	683a      	ldr	r2, [r7, #0]
 8006ade:	4904      	ldr	r1, [pc, #16]	; (8006af0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006ae0:	4804      	ldr	r0, [pc, #16]	; (8006af4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006ae2:	f7ff fec9 	bl	8006878 <USBD_GetString>
  return USBD_StrDesc;
 8006ae6:	4b02      	ldr	r3, [pc, #8]	; (8006af0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3708      	adds	r7, #8
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	2000048c 	.word	0x2000048c
 8006af4:	080072dc 	.word	0x080072dc

08006af8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	4603      	mov	r3, r0
 8006b00:	6039      	str	r1, [r7, #0]
 8006b02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	221a      	movs	r2, #26
 8006b08:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006b0a:	f000 f843 	bl	8006b94 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006b0e:	4b02      	ldr	r3, [pc, #8]	; (8006b18 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3708      	adds	r7, #8
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	200000d8 	.word	0x200000d8

08006b1c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	4603      	mov	r3, r0
 8006b24:	6039      	str	r1, [r7, #0]
 8006b26:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006b28:	79fb      	ldrb	r3, [r7, #7]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d105      	bne.n	8006b3a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006b2e:	683a      	ldr	r2, [r7, #0]
 8006b30:	4907      	ldr	r1, [pc, #28]	; (8006b50 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006b32:	4808      	ldr	r0, [pc, #32]	; (8006b54 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006b34:	f7ff fea0 	bl	8006878 <USBD_GetString>
 8006b38:	e004      	b.n	8006b44 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006b3a:	683a      	ldr	r2, [r7, #0]
 8006b3c:	4904      	ldr	r1, [pc, #16]	; (8006b50 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006b3e:	4805      	ldr	r0, [pc, #20]	; (8006b54 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006b40:	f7ff fe9a 	bl	8006878 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006b44:	4b02      	ldr	r3, [pc, #8]	; (8006b50 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3708      	adds	r7, #8
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	2000048c 	.word	0x2000048c
 8006b54:	080072f0 	.word	0x080072f0

08006b58 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	4603      	mov	r3, r0
 8006b60:	6039      	str	r1, [r7, #0]
 8006b62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006b64:	79fb      	ldrb	r3, [r7, #7]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d105      	bne.n	8006b76 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006b6a:	683a      	ldr	r2, [r7, #0]
 8006b6c:	4907      	ldr	r1, [pc, #28]	; (8006b8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006b6e:	4808      	ldr	r0, [pc, #32]	; (8006b90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006b70:	f7ff fe82 	bl	8006878 <USBD_GetString>
 8006b74:	e004      	b.n	8006b80 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006b76:	683a      	ldr	r2, [r7, #0]
 8006b78:	4904      	ldr	r1, [pc, #16]	; (8006b8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006b7a:	4805      	ldr	r0, [pc, #20]	; (8006b90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006b7c:	f7ff fe7c 	bl	8006878 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006b80:	4b02      	ldr	r3, [pc, #8]	; (8006b8c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	2000048c 	.word	0x2000048c
 8006b90:	080072fc 	.word	0x080072fc

08006b94 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006b9a:	4b0f      	ldr	r3, [pc, #60]	; (8006bd8 <Get_SerialNum+0x44>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006ba0:	4b0e      	ldr	r3, [pc, #56]	; (8006bdc <Get_SerialNum+0x48>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006ba6:	4b0e      	ldr	r3, [pc, #56]	; (8006be0 <Get_SerialNum+0x4c>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d009      	beq.n	8006bce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006bba:	2208      	movs	r2, #8
 8006bbc:	4909      	ldr	r1, [pc, #36]	; (8006be4 <Get_SerialNum+0x50>)
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f000 f814 	bl	8006bec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006bc4:	2204      	movs	r2, #4
 8006bc6:	4908      	ldr	r1, [pc, #32]	; (8006be8 <Get_SerialNum+0x54>)
 8006bc8:	68b8      	ldr	r0, [r7, #8]
 8006bca:	f000 f80f 	bl	8006bec <IntToUnicode>
  }
}
 8006bce:	bf00      	nop
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	1fff7a10 	.word	0x1fff7a10
 8006bdc:	1fff7a14 	.word	0x1fff7a14
 8006be0:	1fff7a18 	.word	0x1fff7a18
 8006be4:	200000da 	.word	0x200000da
 8006be8:	200000ea 	.word	0x200000ea

08006bec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b087      	sub	sp, #28
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006bfe:	2300      	movs	r3, #0
 8006c00:	75fb      	strb	r3, [r7, #23]
 8006c02:	e027      	b.n	8006c54 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	0f1b      	lsrs	r3, r3, #28
 8006c08:	2b09      	cmp	r3, #9
 8006c0a:	d80b      	bhi.n	8006c24 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	0f1b      	lsrs	r3, r3, #28
 8006c10:	b2da      	uxtb	r2, r3
 8006c12:	7dfb      	ldrb	r3, [r7, #23]
 8006c14:	005b      	lsls	r3, r3, #1
 8006c16:	4619      	mov	r1, r3
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	440b      	add	r3, r1
 8006c1c:	3230      	adds	r2, #48	; 0x30
 8006c1e:	b2d2      	uxtb	r2, r2
 8006c20:	701a      	strb	r2, [r3, #0]
 8006c22:	e00a      	b.n	8006c3a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	0f1b      	lsrs	r3, r3, #28
 8006c28:	b2da      	uxtb	r2, r3
 8006c2a:	7dfb      	ldrb	r3, [r7, #23]
 8006c2c:	005b      	lsls	r3, r3, #1
 8006c2e:	4619      	mov	r1, r3
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	440b      	add	r3, r1
 8006c34:	3237      	adds	r2, #55	; 0x37
 8006c36:	b2d2      	uxtb	r2, r2
 8006c38:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	011b      	lsls	r3, r3, #4
 8006c3e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006c40:	7dfb      	ldrb	r3, [r7, #23]
 8006c42:	005b      	lsls	r3, r3, #1
 8006c44:	3301      	adds	r3, #1
 8006c46:	68ba      	ldr	r2, [r7, #8]
 8006c48:	4413      	add	r3, r2
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006c4e:	7dfb      	ldrb	r3, [r7, #23]
 8006c50:	3301      	adds	r3, #1
 8006c52:	75fb      	strb	r3, [r7, #23]
 8006c54:	7dfa      	ldrb	r2, [r7, #23]
 8006c56:	79fb      	ldrb	r3, [r7, #7]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d3d3      	bcc.n	8006c04 <IntToUnicode+0x18>
  }
}
 8006c5c:	bf00      	nop
 8006c5e:	bf00      	nop
 8006c60:	371c      	adds	r7, #28
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr
	...

08006c6c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b08a      	sub	sp, #40	; 0x28
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c74:	f107 0314 	add.w	r3, r7, #20
 8006c78:	2200      	movs	r2, #0
 8006c7a:	601a      	str	r2, [r3, #0]
 8006c7c:	605a      	str	r2, [r3, #4]
 8006c7e:	609a      	str	r2, [r3, #8]
 8006c80:	60da      	str	r2, [r3, #12]
 8006c82:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c8c:	d13a      	bne.n	8006d04 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c8e:	2300      	movs	r3, #0
 8006c90:	613b      	str	r3, [r7, #16]
 8006c92:	4b1e      	ldr	r3, [pc, #120]	; (8006d0c <HAL_PCD_MspInit+0xa0>)
 8006c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c96:	4a1d      	ldr	r2, [pc, #116]	; (8006d0c <HAL_PCD_MspInit+0xa0>)
 8006c98:	f043 0301 	orr.w	r3, r3, #1
 8006c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8006c9e:	4b1b      	ldr	r3, [pc, #108]	; (8006d0c <HAL_PCD_MspInit+0xa0>)
 8006ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca2:	f003 0301 	and.w	r3, r3, #1
 8006ca6:	613b      	str	r3, [r7, #16]
 8006ca8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006caa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cb0:	2302      	movs	r3, #2
 8006cb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006cbc:	230a      	movs	r3, #10
 8006cbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cc0:	f107 0314 	add.w	r3, r7, #20
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	4812      	ldr	r0, [pc, #72]	; (8006d10 <HAL_PCD_MspInit+0xa4>)
 8006cc8:	f7fa f8a4 	bl	8000e14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006ccc:	4b0f      	ldr	r3, [pc, #60]	; (8006d0c <HAL_PCD_MspInit+0xa0>)
 8006cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cd0:	4a0e      	ldr	r2, [pc, #56]	; (8006d0c <HAL_PCD_MspInit+0xa0>)
 8006cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cd6:	6353      	str	r3, [r2, #52]	; 0x34
 8006cd8:	2300      	movs	r3, #0
 8006cda:	60fb      	str	r3, [r7, #12]
 8006cdc:	4b0b      	ldr	r3, [pc, #44]	; (8006d0c <HAL_PCD_MspInit+0xa0>)
 8006cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ce0:	4a0a      	ldr	r2, [pc, #40]	; (8006d0c <HAL_PCD_MspInit+0xa0>)
 8006ce2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ce6:	6453      	str	r3, [r2, #68]	; 0x44
 8006ce8:	4b08      	ldr	r3, [pc, #32]	; (8006d0c <HAL_PCD_MspInit+0xa0>)
 8006cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cf0:	60fb      	str	r3, [r7, #12]
 8006cf2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	2043      	movs	r0, #67	; 0x43
 8006cfa:	f7fa f854 	bl	8000da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006cfe:	2043      	movs	r0, #67	; 0x43
 8006d00:	f7fa f86d 	bl	8000dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006d04:	bf00      	nop
 8006d06:	3728      	adds	r7, #40	; 0x28
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	40023800 	.word	0x40023800
 8006d10:	40020000 	.word	0x40020000

08006d14 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006d28:	4619      	mov	r1, r3
 8006d2a:	4610      	mov	r0, r2
 8006d2c:	f7fe fc45 	bl	80055ba <USBD_LL_SetupStage>
}
 8006d30:	bf00      	nop
 8006d32:	3708      	adds	r7, #8
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	460b      	mov	r3, r1
 8006d42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006d4a:	78fa      	ldrb	r2, [r7, #3]
 8006d4c:	6879      	ldr	r1, [r7, #4]
 8006d4e:	4613      	mov	r3, r2
 8006d50:	00db      	lsls	r3, r3, #3
 8006d52:	4413      	add	r3, r2
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	440b      	add	r3, r1
 8006d58:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	78fb      	ldrb	r3, [r7, #3]
 8006d60:	4619      	mov	r1, r3
 8006d62:	f7fe fc7f 	bl	8005664 <USBD_LL_DataOutStage>
}
 8006d66:	bf00      	nop
 8006d68:	3708      	adds	r7, #8
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b082      	sub	sp, #8
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
 8006d76:	460b      	mov	r3, r1
 8006d78:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006d80:	78fa      	ldrb	r2, [r7, #3]
 8006d82:	6879      	ldr	r1, [r7, #4]
 8006d84:	4613      	mov	r3, r2
 8006d86:	00db      	lsls	r3, r3, #3
 8006d88:	4413      	add	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	440b      	add	r3, r1
 8006d8e:	334c      	adds	r3, #76	; 0x4c
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	78fb      	ldrb	r3, [r7, #3]
 8006d94:	4619      	mov	r1, r3
 8006d96:	f7fe fd18 	bl	80057ca <USBD_LL_DataInStage>
}
 8006d9a:	bf00      	nop
 8006d9c:	3708      	adds	r7, #8
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b082      	sub	sp, #8
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006db0:	4618      	mov	r0, r3
 8006db2:	f7fe fe4c 	bl	8005a4e <USBD_LL_SOF>
}
 8006db6:	bf00      	nop
 8006db8:	3708      	adds	r7, #8
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b084      	sub	sp, #16
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	d001      	beq.n	8006dd6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006dd2:	f7f9 fd81 	bl	80008d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006ddc:	7bfa      	ldrb	r2, [r7, #15]
 8006dde:	4611      	mov	r1, r2
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7fe fdf6 	bl	80059d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7fe fd9e 	bl	800592e <USBD_LL_Reset>
}
 8006df2:	bf00      	nop
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
	...

08006dfc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7fe fdf1 	bl	80059f2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	6812      	ldr	r2, [r2, #0]
 8006e1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006e22:	f043 0301 	orr.w	r3, r3, #1
 8006e26:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6a1b      	ldr	r3, [r3, #32]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d005      	beq.n	8006e3c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006e30:	4b04      	ldr	r3, [pc, #16]	; (8006e44 <HAL_PCD_SuspendCallback+0x48>)
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	4a03      	ldr	r2, [pc, #12]	; (8006e44 <HAL_PCD_SuspendCallback+0x48>)
 8006e36:	f043 0306 	orr.w	r3, r3, #6
 8006e3a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006e3c:	bf00      	nop
 8006e3e:	3708      	adds	r7, #8
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	e000ed00 	.word	0xe000ed00

08006e48 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006e56:	4618      	mov	r0, r3
 8006e58:	f7fe fde1 	bl	8005a1e <USBD_LL_Resume>
}
 8006e5c:	bf00      	nop
 8006e5e:	3708      	adds	r7, #8
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006e76:	78fa      	ldrb	r2, [r7, #3]
 8006e78:	4611      	mov	r1, r2
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7fe fe39 	bl	8005af2 <USBD_LL_IsoOUTIncomplete>
}
 8006e80:	bf00      	nop
 8006e82:	3708      	adds	r7, #8
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	460b      	mov	r3, r1
 8006e92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006e9a:	78fa      	ldrb	r2, [r7, #3]
 8006e9c:	4611      	mov	r1, r2
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fe fdf5 	bl	8005a8e <USBD_LL_IsoINIncomplete>
}
 8006ea4:	bf00      	nop
 8006ea6:	3708      	adds	r7, #8
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fe fe4b 	bl	8005b56 <USBD_LL_DevConnected>
}
 8006ec0:	bf00      	nop
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7fe fe48 	bl	8005b6c <USBD_LL_DevDisconnected>
}
 8006edc:	bf00      	nop
 8006ede:	3708      	adds	r7, #8
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d13c      	bne.n	8006f6e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006ef4:	4a20      	ldr	r2, [pc, #128]	; (8006f78 <USBD_LL_Init+0x94>)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a1e      	ldr	r2, [pc, #120]	; (8006f78 <USBD_LL_Init+0x94>)
 8006f00:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006f04:	4b1c      	ldr	r3, [pc, #112]	; (8006f78 <USBD_LL_Init+0x94>)
 8006f06:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006f0a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006f0c:	4b1a      	ldr	r3, [pc, #104]	; (8006f78 <USBD_LL_Init+0x94>)
 8006f0e:	2204      	movs	r2, #4
 8006f10:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006f12:	4b19      	ldr	r3, [pc, #100]	; (8006f78 <USBD_LL_Init+0x94>)
 8006f14:	2202      	movs	r2, #2
 8006f16:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006f18:	4b17      	ldr	r3, [pc, #92]	; (8006f78 <USBD_LL_Init+0x94>)
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006f1e:	4b16      	ldr	r3, [pc, #88]	; (8006f78 <USBD_LL_Init+0x94>)
 8006f20:	2202      	movs	r2, #2
 8006f22:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006f24:	4b14      	ldr	r3, [pc, #80]	; (8006f78 <USBD_LL_Init+0x94>)
 8006f26:	2200      	movs	r2, #0
 8006f28:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006f2a:	4b13      	ldr	r3, [pc, #76]	; (8006f78 <USBD_LL_Init+0x94>)
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006f30:	4b11      	ldr	r3, [pc, #68]	; (8006f78 <USBD_LL_Init+0x94>)
 8006f32:	2200      	movs	r2, #0
 8006f34:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006f36:	4b10      	ldr	r3, [pc, #64]	; (8006f78 <USBD_LL_Init+0x94>)
 8006f38:	2200      	movs	r2, #0
 8006f3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006f3c:	4b0e      	ldr	r3, [pc, #56]	; (8006f78 <USBD_LL_Init+0x94>)
 8006f3e:	2200      	movs	r2, #0
 8006f40:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006f42:	480d      	ldr	r0, [pc, #52]	; (8006f78 <USBD_LL_Init+0x94>)
 8006f44:	f7fa f903 	bl	800114e <HAL_PCD_Init>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d001      	beq.n	8006f52 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006f4e:	f7f9 fcc3 	bl	80008d8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006f52:	2180      	movs	r1, #128	; 0x80
 8006f54:	4808      	ldr	r0, [pc, #32]	; (8006f78 <USBD_LL_Init+0x94>)
 8006f56:	f7fb fb42 	bl	80025de <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006f5a:	2240      	movs	r2, #64	; 0x40
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	4806      	ldr	r0, [pc, #24]	; (8006f78 <USBD_LL_Init+0x94>)
 8006f60:	f7fb faf6 	bl	8002550 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006f64:	2280      	movs	r2, #128	; 0x80
 8006f66:	2101      	movs	r1, #1
 8006f68:	4803      	ldr	r0, [pc, #12]	; (8006f78 <USBD_LL_Init+0x94>)
 8006f6a:	f7fb faf1 	bl	8002550 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3708      	adds	r7, #8
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	2000068c 	.word	0x2000068c

08006f7c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f84:	2300      	movs	r3, #0
 8006f86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7fa f9f8 	bl	8001388 <HAL_PCD_Start>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f9c:	7bfb      	ldrb	r3, [r7, #15]
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f000 f930 	bl	8007204 <USBD_Get_USB_Status>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006fa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b084      	sub	sp, #16
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
 8006fba:	4608      	mov	r0, r1
 8006fbc:	4611      	mov	r1, r2
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	70fb      	strb	r3, [r7, #3]
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	70bb      	strb	r3, [r7, #2]
 8006fc8:	4613      	mov	r3, r2
 8006fca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006fda:	78bb      	ldrb	r3, [r7, #2]
 8006fdc:	883a      	ldrh	r2, [r7, #0]
 8006fde:	78f9      	ldrb	r1, [r7, #3]
 8006fe0:	f7fa fec9 	bl	8001d76 <HAL_PCD_EP_Open>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fe8:	7bfb      	ldrb	r3, [r7, #15]
 8006fea:	4618      	mov	r0, r3
 8006fec:	f000 f90a 	bl	8007204 <USBD_Get_USB_Status>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ff4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3710      	adds	r7, #16
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b084      	sub	sp, #16
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
 8007006:	460b      	mov	r3, r1
 8007008:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800700a:	2300      	movs	r3, #0
 800700c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800700e:	2300      	movs	r3, #0
 8007010:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007018:	78fa      	ldrb	r2, [r7, #3]
 800701a:	4611      	mov	r1, r2
 800701c:	4618      	mov	r0, r3
 800701e:	f7fa ff12 	bl	8001e46 <HAL_PCD_EP_Close>
 8007022:	4603      	mov	r3, r0
 8007024:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007026:	7bfb      	ldrb	r3, [r7, #15]
 8007028:	4618      	mov	r0, r3
 800702a:	f000 f8eb 	bl	8007204 <USBD_Get_USB_Status>
 800702e:	4603      	mov	r3, r0
 8007030:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007032:	7bbb      	ldrb	r3, [r7, #14]
}
 8007034:	4618      	mov	r0, r3
 8007036:	3710      	adds	r7, #16
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	460b      	mov	r3, r1
 8007046:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007048:	2300      	movs	r3, #0
 800704a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800704c:	2300      	movs	r3, #0
 800704e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007056:	78fa      	ldrb	r2, [r7, #3]
 8007058:	4611      	mov	r1, r2
 800705a:	4618      	mov	r0, r3
 800705c:	f7fa ffd2 	bl	8002004 <HAL_PCD_EP_SetStall>
 8007060:	4603      	mov	r3, r0
 8007062:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007064:	7bfb      	ldrb	r3, [r7, #15]
 8007066:	4618      	mov	r0, r3
 8007068:	f000 f8cc 	bl	8007204 <USBD_Get_USB_Status>
 800706c:	4603      	mov	r3, r0
 800706e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007070:	7bbb      	ldrb	r3, [r7, #14]
}
 8007072:	4618      	mov	r0, r3
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b084      	sub	sp, #16
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
 8007082:	460b      	mov	r3, r1
 8007084:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007086:	2300      	movs	r3, #0
 8007088:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800708a:	2300      	movs	r3, #0
 800708c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007094:	78fa      	ldrb	r2, [r7, #3]
 8007096:	4611      	mov	r1, r2
 8007098:	4618      	mov	r0, r3
 800709a:	f7fb f817 	bl	80020cc <HAL_PCD_EP_ClrStall>
 800709e:	4603      	mov	r3, r0
 80070a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070a2:	7bfb      	ldrb	r3, [r7, #15]
 80070a4:	4618      	mov	r0, r3
 80070a6:	f000 f8ad 	bl	8007204 <USBD_Get_USB_Status>
 80070aa:	4603      	mov	r3, r0
 80070ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	460b      	mov	r3, r1
 80070c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80070ca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80070cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	da0b      	bge.n	80070ec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80070d4:	78fb      	ldrb	r3, [r7, #3]
 80070d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070da:	68f9      	ldr	r1, [r7, #12]
 80070dc:	4613      	mov	r3, r2
 80070de:	00db      	lsls	r3, r3, #3
 80070e0:	4413      	add	r3, r2
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	440b      	add	r3, r1
 80070e6:	333e      	adds	r3, #62	; 0x3e
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	e00b      	b.n	8007104 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80070ec:	78fb      	ldrb	r3, [r7, #3]
 80070ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070f2:	68f9      	ldr	r1, [r7, #12]
 80070f4:	4613      	mov	r3, r2
 80070f6:	00db      	lsls	r3, r3, #3
 80070f8:	4413      	add	r3, r2
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	440b      	add	r3, r1
 80070fe:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007102:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007104:	4618      	mov	r0, r3
 8007106:	3714      	adds	r7, #20
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	460b      	mov	r3, r1
 800711a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800711c:	2300      	movs	r3, #0
 800711e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007120:	2300      	movs	r3, #0
 8007122:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800712a:	78fa      	ldrb	r2, [r7, #3]
 800712c:	4611      	mov	r1, r2
 800712e:	4618      	mov	r0, r3
 8007130:	f7fa fdfc 	bl	8001d2c <HAL_PCD_SetAddress>
 8007134:	4603      	mov	r3, r0
 8007136:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007138:	7bfb      	ldrb	r3, [r7, #15]
 800713a:	4618      	mov	r0, r3
 800713c:	f000 f862 	bl	8007204 <USBD_Get_USB_Status>
 8007140:	4603      	mov	r3, r0
 8007142:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007144:	7bbb      	ldrb	r3, [r7, #14]
}
 8007146:	4618      	mov	r0, r3
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b086      	sub	sp, #24
 8007152:	af00      	add	r7, sp, #0
 8007154:	60f8      	str	r0, [r7, #12]
 8007156:	607a      	str	r2, [r7, #4]
 8007158:	603b      	str	r3, [r7, #0]
 800715a:	460b      	mov	r3, r1
 800715c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800715e:	2300      	movs	r3, #0
 8007160:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007162:	2300      	movs	r3, #0
 8007164:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800716c:	7af9      	ldrb	r1, [r7, #11]
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	f7fa fefd 	bl	8001f70 <HAL_PCD_EP_Transmit>
 8007176:	4603      	mov	r3, r0
 8007178:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800717a:	7dfb      	ldrb	r3, [r7, #23]
 800717c:	4618      	mov	r0, r3
 800717e:	f000 f841 	bl	8007204 <USBD_Get_USB_Status>
 8007182:	4603      	mov	r3, r0
 8007184:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007186:	7dbb      	ldrb	r3, [r7, #22]
}
 8007188:	4618      	mov	r0, r3
 800718a:	3718      	adds	r7, #24
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	607a      	str	r2, [r7, #4]
 800719a:	603b      	str	r3, [r7, #0]
 800719c:	460b      	mov	r3, r1
 800719e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071a0:	2300      	movs	r3, #0
 80071a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071a4:	2300      	movs	r3, #0
 80071a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80071ae:	7af9      	ldrb	r1, [r7, #11]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	f7fa fe91 	bl	8001eda <HAL_PCD_EP_Receive>
 80071b8:	4603      	mov	r3, r0
 80071ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071bc:	7dfb      	ldrb	r3, [r7, #23]
 80071be:	4618      	mov	r0, r3
 80071c0:	f000 f820 	bl	8007204 <USBD_Get_USB_Status>
 80071c4:	4603      	mov	r3, r0
 80071c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80071c8:	7dbb      	ldrb	r3, [r7, #22]
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3718      	adds	r7, #24
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
	...

080071d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80071dc:	4b03      	ldr	r3, [pc, #12]	; (80071ec <USBD_static_malloc+0x18>)
}
 80071de:	4618      	mov	r0, r3
 80071e0:	370c      	adds	r7, #12
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	20000b98 	.word	0x20000b98

080071f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]

}
 80071f8:	bf00      	nop
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	4603      	mov	r3, r0
 800720c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800720e:	2300      	movs	r3, #0
 8007210:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007212:	79fb      	ldrb	r3, [r7, #7]
 8007214:	2b03      	cmp	r3, #3
 8007216:	d817      	bhi.n	8007248 <USBD_Get_USB_Status+0x44>
 8007218:	a201      	add	r2, pc, #4	; (adr r2, 8007220 <USBD_Get_USB_Status+0x1c>)
 800721a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800721e:	bf00      	nop
 8007220:	08007231 	.word	0x08007231
 8007224:	08007237 	.word	0x08007237
 8007228:	0800723d 	.word	0x0800723d
 800722c:	08007243 	.word	0x08007243
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007230:	2300      	movs	r3, #0
 8007232:	73fb      	strb	r3, [r7, #15]
    break;
 8007234:	e00b      	b.n	800724e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007236:	2303      	movs	r3, #3
 8007238:	73fb      	strb	r3, [r7, #15]
    break;
 800723a:	e008      	b.n	800724e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800723c:	2301      	movs	r3, #1
 800723e:	73fb      	strb	r3, [r7, #15]
    break;
 8007240:	e005      	b.n	800724e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007242:	2303      	movs	r3, #3
 8007244:	73fb      	strb	r3, [r7, #15]
    break;
 8007246:	e002      	b.n	800724e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007248:	2303      	movs	r3, #3
 800724a:	73fb      	strb	r3, [r7, #15]
    break;
 800724c:	bf00      	nop
  }
  return usb_status;
 800724e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007250:	4618      	mov	r0, r3
 8007252:	3714      	adds	r7, #20
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <__libc_init_array>:
 800725c:	b570      	push	{r4, r5, r6, lr}
 800725e:	4d0d      	ldr	r5, [pc, #52]	; (8007294 <__libc_init_array+0x38>)
 8007260:	4c0d      	ldr	r4, [pc, #52]	; (8007298 <__libc_init_array+0x3c>)
 8007262:	1b64      	subs	r4, r4, r5
 8007264:	10a4      	asrs	r4, r4, #2
 8007266:	2600      	movs	r6, #0
 8007268:	42a6      	cmp	r6, r4
 800726a:	d109      	bne.n	8007280 <__libc_init_array+0x24>
 800726c:	4d0b      	ldr	r5, [pc, #44]	; (800729c <__libc_init_array+0x40>)
 800726e:	4c0c      	ldr	r4, [pc, #48]	; (80072a0 <__libc_init_array+0x44>)
 8007270:	f000 f820 	bl	80072b4 <_init>
 8007274:	1b64      	subs	r4, r4, r5
 8007276:	10a4      	asrs	r4, r4, #2
 8007278:	2600      	movs	r6, #0
 800727a:	42a6      	cmp	r6, r4
 800727c:	d105      	bne.n	800728a <__libc_init_array+0x2e>
 800727e:	bd70      	pop	{r4, r5, r6, pc}
 8007280:	f855 3b04 	ldr.w	r3, [r5], #4
 8007284:	4798      	blx	r3
 8007286:	3601      	adds	r6, #1
 8007288:	e7ee      	b.n	8007268 <__libc_init_array+0xc>
 800728a:	f855 3b04 	ldr.w	r3, [r5], #4
 800728e:	4798      	blx	r3
 8007290:	3601      	adds	r6, #1
 8007292:	e7f2      	b.n	800727a <__libc_init_array+0x1e>
 8007294:	08007324 	.word	0x08007324
 8007298:	08007324 	.word	0x08007324
 800729c:	08007324 	.word	0x08007324
 80072a0:	08007328 	.word	0x08007328

080072a4 <memset>:
 80072a4:	4402      	add	r2, r0
 80072a6:	4603      	mov	r3, r0
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d100      	bne.n	80072ae <memset+0xa>
 80072ac:	4770      	bx	lr
 80072ae:	f803 1b01 	strb.w	r1, [r3], #1
 80072b2:	e7f9      	b.n	80072a8 <memset+0x4>

080072b4 <_init>:
 80072b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072b6:	bf00      	nop
 80072b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ba:	bc08      	pop	{r3}
 80072bc:	469e      	mov	lr, r3
 80072be:	4770      	bx	lr

080072c0 <_fini>:
 80072c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c2:	bf00      	nop
 80072c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072c6:	bc08      	pop	{r3}
 80072c8:	469e      	mov	lr, r3
 80072ca:	4770      	bx	lr
