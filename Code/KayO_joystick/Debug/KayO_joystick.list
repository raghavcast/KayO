
KayO_joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f640  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e7c  0800f7e0  0800f7e0  0001f7e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801165c  0801165c  00030190  2**0
                  CONTENTS
  4 .ARM          00000008  0801165c  0801165c  0002165c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011664  08011664  00030190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011664  08011664  00021664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011668  08011668  00021668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0801166c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001154  20000190  080117fc  00030190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200012e4  080117fc  000312e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021242  00000000  00000000  000301c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004767  00000000  00000000  00051402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cb0  00000000  00000000  00055b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001d157  00000000  00000000  00057820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00024b9d  00000000  00000000  00074977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0009ad39  00000000  00000000  00099514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0013424d  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001ad8  00000000  00000000  001342a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000082e8  00000000  00000000  00135d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000190 	.word	0x20000190
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f7c8 	.word	0x0800f7c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000194 	.word	0x20000194
 80001dc:	0800f7c8 	.word	0x0800f7c8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ILI9341_Select>:
/* vim: set ai et ts=4 sw=4: */
#include "stm32f4xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800058e:	4802      	ldr	r0, [pc, #8]	; (8000598 <ILI9341_Select+0x14>)
 8000590:	f002 fa50 	bl	8002a34 <HAL_GPIO_WritePin>
}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40020000 	.word	0x40020000

0800059c <ILI9341_Unselect>:

void ILI9341_Unselect() {
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005a6:	4802      	ldr	r0, [pc, #8]	; (80005b0 <ILI9341_Unselect+0x14>)
 80005a8:	f002 fa44 	bl	8002a34 <HAL_GPIO_WritePin>
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40020000 	.word	0x40020000

080005b4 <ILI9341_Reset>:

static void ILI9341_Reset() {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2104      	movs	r1, #4
 80005bc:	4806      	ldr	r0, [pc, #24]	; (80005d8 <ILI9341_Reset+0x24>)
 80005be:	f002 fa39 	bl	8002a34 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80005c2:	2005      	movs	r0, #5
 80005c4:	f001 ff4a 	bl	800245c <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	2104      	movs	r1, #4
 80005cc:	4802      	ldr	r0, [pc, #8]	; (80005d8 <ILI9341_Reset+0x24>)
 80005ce:	f002 fa31 	bl	8002a34 <HAL_GPIO_WritePin>
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40020c00 	.word	0x40020c00

080005dc <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ec:	4806      	ldr	r0, [pc, #24]	; (8000608 <ILI9341_WriteCommand+0x2c>)
 80005ee:	f002 fa21 	bl	8002a34 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80005f2:	1df9      	adds	r1, r7, #7
 80005f4:	f04f 33ff 	mov.w	r3, #4294967295
 80005f8:	2201      	movs	r2, #1
 80005fa:	4804      	ldr	r0, [pc, #16]	; (800060c <ILI9341_WriteCommand+0x30>)
 80005fc:	f005 fc85 	bl	8005f0a <HAL_SPI_Transmit>
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40020800 	.word	0x40020800
 800060c:	20000258 	.word	0x20000258

08000610 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800061a:	2201      	movs	r2, #1
 800061c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000620:	4810      	ldr	r0, [pc, #64]	; (8000664 <ILI9341_WriteData+0x54>)
 8000622:	f002 fa07 	bl	8002a34 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8000626:	e015      	b.n	8000654 <ILI9341_WriteData+0x44>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800062e:	bf28      	it	cs
 8000630:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8000634:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000636:	89fa      	ldrh	r2, [r7, #14]
 8000638:	f04f 33ff 	mov.w	r3, #4294967295
 800063c:	6879      	ldr	r1, [r7, #4]
 800063e:	480a      	ldr	r0, [pc, #40]	; (8000668 <ILI9341_WriteData+0x58>)
 8000640:	f005 fc63 	bl	8005f0a <HAL_SPI_Transmit>
        buff += chunk_size;
 8000644:	89fb      	ldrh	r3, [r7, #14]
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	4413      	add	r3, r2
 800064a:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 800064c:	89fb      	ldrh	r3, [r7, #14]
 800064e:	683a      	ldr	r2, [r7, #0]
 8000650:	1ad3      	subs	r3, r2, r3
 8000652:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d1e6      	bne.n	8000628 <ILI9341_WriteData+0x18>
    }
}
 800065a:	bf00      	nop
 800065c:	bf00      	nop
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40020800 	.word	0x40020800
 8000668:	20000258 	.word	0x20000258

0800066c <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	4604      	mov	r4, r0
 8000674:	4608      	mov	r0, r1
 8000676:	4611      	mov	r1, r2
 8000678:	461a      	mov	r2, r3
 800067a:	4623      	mov	r3, r4
 800067c:	80fb      	strh	r3, [r7, #6]
 800067e:	4603      	mov	r3, r0
 8000680:	80bb      	strh	r3, [r7, #4]
 8000682:	460b      	mov	r3, r1
 8000684:	807b      	strh	r3, [r7, #2]
 8000686:	4613      	mov	r3, r2
 8000688:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 800068a:	202a      	movs	r0, #42	; 0x2a
 800068c:	f7ff ffa6 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8000690:	88fb      	ldrh	r3, [r7, #6]
 8000692:	0a1b      	lsrs	r3, r3, #8
 8000694:	b29b      	uxth	r3, r3
 8000696:	b2db      	uxtb	r3, r3
 8000698:	733b      	strb	r3, [r7, #12]
 800069a:	88fb      	ldrh	r3, [r7, #6]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	737b      	strb	r3, [r7, #13]
 80006a0:	887b      	ldrh	r3, [r7, #2]
 80006a2:	0a1b      	lsrs	r3, r3, #8
 80006a4:	b29b      	uxth	r3, r3
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	73bb      	strb	r3, [r7, #14]
 80006aa:	887b      	ldrh	r3, [r7, #2]
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2104      	movs	r1, #4
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff ffaa 	bl	8000610 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 80006bc:	202b      	movs	r0, #43	; 0x2b
 80006be:	f7ff ff8d 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 80006c2:	88bb      	ldrh	r3, [r7, #4]
 80006c4:	0a1b      	lsrs	r3, r3, #8
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	723b      	strb	r3, [r7, #8]
 80006cc:	88bb      	ldrh	r3, [r7, #4]
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	727b      	strb	r3, [r7, #9]
 80006d2:	883b      	ldrh	r3, [r7, #0]
 80006d4:	0a1b      	lsrs	r3, r3, #8
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	72bb      	strb	r3, [r7, #10]
 80006dc:	883b      	ldrh	r3, [r7, #0]
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 80006e2:	f107 0308 	add.w	r3, r7, #8
 80006e6:	2104      	movs	r1, #4
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ff91 	bl	8000610 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 80006ee:	202c      	movs	r0, #44	; 0x2c
 80006f0:	f7ff ff74 	bl	80005dc <ILI9341_WriteCommand>
}
 80006f4:	bf00      	nop
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd90      	pop	{r4, r7, pc}

080006fc <ILI9341_Init>:

void ILI9341_Init() {
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b09b      	sub	sp, #108	; 0x6c
 8000700:	af00      	add	r7, sp, #0
    ILI9341_Select();
 8000702:	f7ff ff3f 	bl	8000584 <ILI9341_Select>
    ILI9341_Reset();
 8000706:	f7ff ff55 	bl	80005b4 <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 800070a:	2001      	movs	r0, #1
 800070c:	f7ff ff66 	bl	80005dc <ILI9341_WriteCommand>
    HAL_Delay(1000);
 8000710:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000714:	f001 fea2 	bl	800245c <HAL_Delay>

    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 8000718:	20cb      	movs	r0, #203	; 0xcb
 800071a:	f7ff ff5f 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 800071e:	4a87      	ldr	r2, [pc, #540]	; (800093c <ILI9341_Init+0x240>)
 8000720:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000724:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000728:	6018      	str	r0, [r3, #0]
 800072a:	3304      	adds	r3, #4
 800072c:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800072e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000732:	2105      	movs	r1, #5
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff ff6b 	bl	8000610 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 800073a:	20cf      	movs	r0, #207	; 0xcf
 800073c:	f7ff ff4e 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 8000740:	4a7f      	ldr	r2, [pc, #508]	; (8000940 <ILI9341_Init+0x244>)
 8000742:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000746:	6812      	ldr	r2, [r2, #0]
 8000748:	4611      	mov	r1, r2
 800074a:	8019      	strh	r1, [r3, #0]
 800074c:	3302      	adds	r3, #2
 800074e:	0c12      	lsrs	r2, r2, #16
 8000750:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000752:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000756:	2103      	movs	r1, #3
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ff59 	bl	8000610 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 800075e:	20e8      	movs	r0, #232	; 0xe8
 8000760:	f7ff ff3c 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 8000764:	4a77      	ldr	r2, [pc, #476]	; (8000944 <ILI9341_Init+0x248>)
 8000766:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800076a:	6812      	ldr	r2, [r2, #0]
 800076c:	4611      	mov	r1, r2
 800076e:	8019      	strh	r1, [r3, #0]
 8000770:	3302      	adds	r3, #2
 8000772:	0c12      	lsrs	r2, r2, #16
 8000774:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000776:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800077a:	2103      	movs	r1, #3
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff ff47 	bl	8000610 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 8000782:	20ea      	movs	r0, #234	; 0xea
 8000784:	f7ff ff2a 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 8000788:	2300      	movs	r3, #0
 800078a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        ILI9341_WriteData(data, sizeof(data));
 800078e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000792:	2102      	movs	r1, #2
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ff3b 	bl	8000610 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 800079a:	20ed      	movs	r0, #237	; 0xed
 800079c:	f7ff ff1e 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 80007a0:	4b69      	ldr	r3, [pc, #420]	; (8000948 <ILI9341_Init+0x24c>)
 80007a2:	653b      	str	r3, [r7, #80]	; 0x50
        ILI9341_WriteData(data, sizeof(data));
 80007a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80007a8:	2104      	movs	r1, #4
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ff30 	bl	8000610 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 80007b0:	20f7      	movs	r0, #247	; 0xf7
 80007b2:	f7ff ff13 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 80007b6:	2320      	movs	r3, #32
 80007b8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        ILI9341_WriteData(data, sizeof(data));
 80007bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007c0:	2101      	movs	r1, #1
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff ff24 	bl	8000610 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 80007c8:	20c0      	movs	r0, #192	; 0xc0
 80007ca:	f7ff ff07 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 80007ce:	2323      	movs	r3, #35	; 0x23
 80007d0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        ILI9341_WriteData(data, sizeof(data));
 80007d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007d8:	2101      	movs	r1, #1
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff ff18 	bl	8000610 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 80007e0:	20c1      	movs	r0, #193	; 0xc1
 80007e2:	f7ff fefb 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 80007e6:	2310      	movs	r3, #16
 80007e8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        ILI9341_WriteData(data, sizeof(data));
 80007ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007f0:	2101      	movs	r1, #1
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ff0c 	bl	8000610 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 80007f8:	20c5      	movs	r0, #197	; 0xc5
 80007fa:	f7ff feef 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 80007fe:	f642 033e 	movw	r3, #10302	; 0x283e
 8000802:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        ILI9341_WriteData(data, sizeof(data));
 8000806:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800080a:	2102      	movs	r1, #2
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff feff 	bl	8000610 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 8000812:	20c7      	movs	r0, #199	; 0xc7
 8000814:	f7ff fee2 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 8000818:	2386      	movs	r3, #134	; 0x86
 800081a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        ILI9341_WriteData(data, sizeof(data));
 800081e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000822:	2101      	movs	r1, #1
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff fef3 	bl	8000610 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 800082a:	2036      	movs	r0, #54	; 0x36
 800082c:	f7ff fed6 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 8000830:	2348      	movs	r3, #72	; 0x48
 8000832:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        ILI9341_WriteData(data, sizeof(data));
 8000836:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800083a:	2101      	movs	r1, #1
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff fee7 	bl	8000610 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 8000842:	203a      	movs	r0, #58	; 0x3a
 8000844:	f7ff feca 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 8000848:	2355      	movs	r3, #85	; 0x55
 800084a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        ILI9341_WriteData(data, sizeof(data));
 800084e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000852:	2101      	movs	r1, #1
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff fedb 	bl	8000610 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 800085a:	20b1      	movs	r0, #177	; 0xb1
 800085c:	f7ff febe 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 8000860:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000864:	863b      	strh	r3, [r7, #48]	; 0x30
        ILI9341_WriteData(data, sizeof(data));
 8000866:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800086a:	2102      	movs	r1, #2
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fecf 	bl	8000610 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 8000872:	20b6      	movs	r0, #182	; 0xb6
 8000874:	f7ff feb2 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 8000878:	4a34      	ldr	r2, [pc, #208]	; (800094c <ILI9341_Init+0x250>)
 800087a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800087e:	6812      	ldr	r2, [r2, #0]
 8000880:	4611      	mov	r1, r2
 8000882:	8019      	strh	r1, [r3, #0]
 8000884:	3302      	adds	r3, #2
 8000886:	0c12      	lsrs	r2, r2, #16
 8000888:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800088a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800088e:	2103      	movs	r1, #3
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff febd 	bl	8000610 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 8000896:	20f2      	movs	r0, #242	; 0xf2
 8000898:	f7ff fea0 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 800089c:	2300      	movs	r3, #0
 800089e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        ILI9341_WriteData(data, sizeof(data));
 80008a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008a6:	2101      	movs	r1, #1
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff feb1 	bl	8000610 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 80008ae:	2026      	movs	r0, #38	; 0x26
 80008b0:	f7ff fe94 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 80008b4:	2301      	movs	r3, #1
 80008b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        ILI9341_WriteData(data, sizeof(data));
 80008ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008be:	2101      	movs	r1, #1
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff fea5 	bl	8000610 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 80008c6:	20e0      	movs	r0, #224	; 0xe0
 80008c8:	f7ff fe88 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 80008cc:	4b20      	ldr	r3, [pc, #128]	; (8000950 <ILI9341_Init+0x254>)
 80008ce:	f107 0414 	add.w	r4, r7, #20
 80008d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008d4:	c407      	stmia	r4!, {r0, r1, r2}
 80008d6:	8023      	strh	r3, [r4, #0]
 80008d8:	3402      	adds	r4, #2
 80008da:	0c1b      	lsrs	r3, r3, #16
 80008dc:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	210f      	movs	r1, #15
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fe93 	bl	8000610 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 80008ea:	20e1      	movs	r0, #225	; 0xe1
 80008ec:	f7ff fe76 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 80008f0:	4b18      	ldr	r3, [pc, #96]	; (8000954 <ILI9341_Init+0x258>)
 80008f2:	1d3c      	adds	r4, r7, #4
 80008f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008f6:	c407      	stmia	r4!, {r0, r1, r2}
 80008f8:	8023      	strh	r3, [r4, #0]
 80008fa:	3402      	adds	r4, #2
 80008fc:	0c1b      	lsrs	r3, r3, #16
 80008fe:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	210f      	movs	r1, #15
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff fe83 	bl	8000610 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 800090a:	2011      	movs	r0, #17
 800090c:	f7ff fe66 	bl	80005dc <ILI9341_WriteCommand>
    HAL_Delay(120);
 8000910:	2078      	movs	r0, #120	; 0x78
 8000912:	f001 fda3 	bl	800245c <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 8000916:	2029      	movs	r0, #41	; 0x29
 8000918:	f7ff fe60 	bl	80005dc <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 800091c:	2036      	movs	r0, #54	; 0x36
 800091e:	f7ff fe5d 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 8000922:	2328      	movs	r3, #40	; 0x28
 8000924:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000926:	463b      	mov	r3, r7
 8000928:	2101      	movs	r1, #1
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff fe70 	bl	8000610 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 8000930:	f7ff fe34 	bl	800059c <ILI9341_Unselect>
}
 8000934:	bf00      	nop
 8000936:	376c      	adds	r7, #108	; 0x6c
 8000938:	46bd      	mov	sp, r7
 800093a:	bd90      	pop	{r4, r7, pc}
 800093c:	0800f7e0 	.word	0x0800f7e0
 8000940:	0800f7e8 	.word	0x0800f7e8
 8000944:	0800f7ec 	.word	0x0800f7ec
 8000948:	81120364 	.word	0x81120364
 800094c:	0800f7f0 	.word	0x0800f7f0
 8000950:	0800f7f4 	.word	0x0800f7f4
 8000954:	0800f804 	.word	0x0800f804

08000958 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	80fb      	strh	r3, [r7, #6]
 8000962:	460b      	mov	r3, r1
 8000964:	80bb      	strh	r3, [r7, #4]
 8000966:	4613      	mov	r3, r2
 8000968:	807b      	strh	r3, [r7, #2]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
 800096a:	88fb      	ldrh	r3, [r7, #6]
 800096c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000970:	d21f      	bcs.n	80009b2 <ILI9341_DrawPixel+0x5a>
 8000972:	88bb      	ldrh	r3, [r7, #4]
 8000974:	2bef      	cmp	r3, #239	; 0xef
 8000976:	d81c      	bhi.n	80009b2 <ILI9341_DrawPixel+0x5a>
        return;

    ILI9341_Select();
 8000978:	f7ff fe04 	bl	8000584 <ILI9341_Select>

    ILI9341_SetAddressWindow(x, y, x+1, y+1);
 800097c:	88fb      	ldrh	r3, [r7, #6]
 800097e:	3301      	adds	r3, #1
 8000980:	b29a      	uxth	r2, r3
 8000982:	88bb      	ldrh	r3, [r7, #4]
 8000984:	3301      	adds	r3, #1
 8000986:	b29b      	uxth	r3, r3
 8000988:	88b9      	ldrh	r1, [r7, #4]
 800098a:	88f8      	ldrh	r0, [r7, #6]
 800098c:	f7ff fe6e 	bl	800066c <ILI9341_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8000990:	887b      	ldrh	r3, [r7, #2]
 8000992:	0a1b      	lsrs	r3, r3, #8
 8000994:	b29b      	uxth	r3, r3
 8000996:	b2db      	uxtb	r3, r3
 8000998:	733b      	strb	r3, [r7, #12]
 800099a:	887b      	ldrh	r3, [r7, #2]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	737b      	strb	r3, [r7, #13]
    ILI9341_WriteData(data, sizeof(data));
 80009a0:	f107 030c 	add.w	r3, r7, #12
 80009a4:	2102      	movs	r1, #2
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fe32 	bl	8000610 <ILI9341_WriteData>

    ILI9341_Unselect();
 80009ac:	f7ff fdf6 	bl	800059c <ILI9341_Unselect>
 80009b0:	e000      	b.n	80009b4 <ILI9341_DrawPixel+0x5c>
        return;
 80009b2:	bf00      	nop
}
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <ILI9341_WriteChar>:

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80009ba:	b082      	sub	sp, #8
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b089      	sub	sp, #36	; 0x24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	637b      	str	r3, [r7, #52]	; 0x34
 80009c4:	4603      	mov	r3, r0
 80009c6:	80fb      	strh	r3, [r7, #6]
 80009c8:	460b      	mov	r3, r1
 80009ca:	80bb      	strh	r3, [r7, #4]
 80009cc:	4613      	mov	r3, r2
 80009ce:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80009d0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	88fb      	ldrh	r3, [r7, #6]
 80009d8:	4413      	add	r3, r2
 80009da:	b29b      	uxth	r3, r3
 80009dc:	3b01      	subs	r3, #1
 80009de:	b29c      	uxth	r4, r3
 80009e0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80009e4:	b29a      	uxth	r2, r3
 80009e6:	88bb      	ldrh	r3, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	3b01      	subs	r3, #1
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	88b9      	ldrh	r1, [r7, #4]
 80009f2:	88f8      	ldrh	r0, [r7, #6]
 80009f4:	4622      	mov	r2, r4
 80009f6:	f7ff fe39 	bl	800066c <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
 80009fe:	e043      	b.n	8000a88 <ILI9341_WriteChar+0xce>
        b = font.data[(ch - 32) * font.height + i];
 8000a00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a02:	78fb      	ldrb	r3, [r7, #3]
 8000a04:	3b20      	subs	r3, #32
 8000a06:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000a0a:	fb01 f303 	mul.w	r3, r1, r3
 8000a0e:	4619      	mov	r1, r3
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	440b      	add	r3, r1
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	4413      	add	r3, r2
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61bb      	str	r3, [r7, #24]
 8000a20:	e029      	b.n	8000a76 <ILI9341_WriteChar+0xbc>
            if((b << j) & 0x8000)  {
 8000a22:	697a      	ldr	r2, [r7, #20]
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d00e      	beq.n	8000a50 <ILI9341_WriteChar+0x96>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000a32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000a34:	0a1b      	lsrs	r3, r3, #8
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	743b      	strb	r3, [r7, #16]
 8000a3c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 8000a42:	f107 0310 	add.w	r3, r7, #16
 8000a46:	2102      	movs	r1, #2
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fde1 	bl	8000610 <ILI9341_WriteData>
 8000a4e:	e00f      	b.n	8000a70 <ILI9341_WriteChar+0xb6>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000a50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000a54:	0a1b      	lsrs	r3, r3, #8
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	733b      	strb	r3, [r7, #12]
 8000a5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	2102      	movs	r1, #2
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fdd0 	bl	8000610 <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	3301      	adds	r3, #1
 8000a74:	61bb      	str	r3, [r7, #24]
 8000a76:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d3cf      	bcc.n	8000a22 <ILI9341_WriteChar+0x68>
    for(i = 0; i < font.height; i++) {
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	3301      	adds	r3, #1
 8000a86:	61fb      	str	r3, [r7, #28]
 8000a88:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d3b5      	bcc.n	8000a00 <ILI9341_WriteChar+0x46>
            }
        }
    }
}
 8000a94:	bf00      	nop
 8000a96:	bf00      	nop
 8000a98:	3724      	adds	r7, #36	; 0x24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000aa0:	b002      	add	sp, #8
 8000aa2:	4770      	bx	lr

08000aa4 <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b086      	sub	sp, #24
 8000aaa:	af04      	add	r7, sp, #16
 8000aac:	603a      	str	r2, [r7, #0]
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	80fb      	strh	r3, [r7, #6]
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 8000ab8:	f7ff fd64 	bl	8000584 <ILI9341_Select>

    while(*str) {
 8000abc:	e02e      	b.n	8000b1c <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 8000abe:	88fb      	ldrh	r3, [r7, #6]
 8000ac0:	7d3a      	ldrb	r2, [r7, #20]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000ac8:	db13      	blt.n	8000af2 <ILI9341_WriteString+0x4e>
            x = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000ace:	7d7b      	ldrb	r3, [r7, #21]
 8000ad0:	b29a      	uxth	r2, r3
 8000ad2:	88bb      	ldrh	r3, [r7, #4]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 8000ad8:	88bb      	ldrh	r3, [r7, #4]
 8000ada:	7d7a      	ldrb	r2, [r7, #21]
 8000adc:	4413      	add	r3, r2
 8000ade:	2bef      	cmp	r3, #239	; 0xef
 8000ae0:	dc21      	bgt.n	8000b26 <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b20      	cmp	r3, #32
 8000ae8:	d103      	bne.n	8000af2 <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	3301      	adds	r3, #1
 8000aee:	603b      	str	r3, [r7, #0]
                continue;
 8000af0:	e014      	b.n	8000b1c <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	781a      	ldrb	r2, [r3, #0]
 8000af6:	88b9      	ldrh	r1, [r7, #4]
 8000af8:	88f8      	ldrh	r0, [r7, #6]
 8000afa:	8c3b      	ldrh	r3, [r7, #32]
 8000afc:	9302      	str	r3, [sp, #8]
 8000afe:	8bbb      	ldrh	r3, [r7, #28]
 8000b00:	9301      	str	r3, [sp, #4]
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	f7ff ff57 	bl	80009ba <ILI9341_WriteChar>
        x += font.width;
 8000b0c:	7d3b      	ldrb	r3, [r7, #20]
 8000b0e:	b29a      	uxth	r2, r3
 8000b10:	88fb      	ldrh	r3, [r7, #6]
 8000b12:	4413      	add	r3, r2
 8000b14:	80fb      	strh	r3, [r7, #6]
        str++;
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d1cc      	bne.n	8000abe <ILI9341_WriteString+0x1a>
 8000b24:	e000      	b.n	8000b28 <ILI9341_WriteString+0x84>
                break;
 8000b26:	bf00      	nop
    }

    ILI9341_Unselect();
 8000b28:	f7ff fd38 	bl	800059c <ILI9341_Unselect>
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b36:	b002      	add	sp, #8
 8000b38:	4770      	bx	lr
	...

08000b3c <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000b3c:	b590      	push	{r4, r7, lr}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4604      	mov	r4, r0
 8000b44:	4608      	mov	r0, r1
 8000b46:	4611      	mov	r1, r2
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4623      	mov	r3, r4
 8000b4c:	80fb      	strh	r3, [r7, #6]
 8000b4e:	4603      	mov	r3, r0
 8000b50:	80bb      	strh	r3, [r7, #4]
 8000b52:	460b      	mov	r3, r1
 8000b54:	807b      	strh	r3, [r7, #2]
 8000b56:	4613      	mov	r3, r2
 8000b58:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000b5a:	88fb      	ldrh	r3, [r7, #6]
 8000b5c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000b60:	d253      	bcs.n	8000c0a <ILI9341_FillRectangle+0xce>
 8000b62:	88bb      	ldrh	r3, [r7, #4]
 8000b64:	2bef      	cmp	r3, #239	; 0xef
 8000b66:	d850      	bhi.n	8000c0a <ILI9341_FillRectangle+0xce>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8000b68:	88fa      	ldrh	r2, [r7, #6]
 8000b6a:	887b      	ldrh	r3, [r7, #2]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000b72:	dd03      	ble.n	8000b7c <ILI9341_FillRectangle+0x40>
 8000b74:	88fb      	ldrh	r3, [r7, #6]
 8000b76:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8000b7a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8000b7c:	88ba      	ldrh	r2, [r7, #4]
 8000b7e:	883b      	ldrh	r3, [r7, #0]
 8000b80:	4413      	add	r3, r2
 8000b82:	2bf0      	cmp	r3, #240	; 0xf0
 8000b84:	dd03      	ble.n	8000b8e <ILI9341_FillRectangle+0x52>
 8000b86:	88bb      	ldrh	r3, [r7, #4]
 8000b88:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000b8c:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 8000b8e:	f7ff fcf9 	bl	8000584 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000b92:	88fa      	ldrh	r2, [r7, #6]
 8000b94:	887b      	ldrh	r3, [r7, #2]
 8000b96:	4413      	add	r3, r2
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	b29c      	uxth	r4, r3
 8000b9e:	88ba      	ldrh	r2, [r7, #4]
 8000ba0:	883b      	ldrh	r3, [r7, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	88b9      	ldrh	r1, [r7, #4]
 8000bac:	88f8      	ldrh	r0, [r7, #6]
 8000bae:	4622      	mov	r2, r4
 8000bb0:	f7ff fd5c 	bl	800066c <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000bb4:	8c3b      	ldrh	r3, [r7, #32]
 8000bb6:	0a1b      	lsrs	r3, r3, #8
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	733b      	strb	r3, [r7, #12]
 8000bbe:	8c3b      	ldrh	r3, [r7, #32]
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bca:	4812      	ldr	r0, [pc, #72]	; (8000c14 <ILI9341_FillRectangle+0xd8>)
 8000bcc:	f001 ff32 	bl	8002a34 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000bd0:	883b      	ldrh	r3, [r7, #0]
 8000bd2:	80bb      	strh	r3, [r7, #4]
 8000bd4:	e013      	b.n	8000bfe <ILI9341_FillRectangle+0xc2>
        for(x = w; x > 0; x--) {
 8000bd6:	887b      	ldrh	r3, [r7, #2]
 8000bd8:	80fb      	strh	r3, [r7, #6]
 8000bda:	e00a      	b.n	8000bf2 <ILI9341_FillRectangle+0xb6>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000bdc:	f107 010c 	add.w	r1, r7, #12
 8000be0:	f04f 33ff 	mov.w	r3, #4294967295
 8000be4:	2202      	movs	r2, #2
 8000be6:	480c      	ldr	r0, [pc, #48]	; (8000c18 <ILI9341_FillRectangle+0xdc>)
 8000be8:	f005 f98f 	bl	8005f0a <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000bec:	88fb      	ldrh	r3, [r7, #6]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	80fb      	strh	r3, [r7, #6]
 8000bf2:	88fb      	ldrh	r3, [r7, #6]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d1f1      	bne.n	8000bdc <ILI9341_FillRectangle+0xa0>
    for(y = h; y > 0; y--) {
 8000bf8:	88bb      	ldrh	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	80bb      	strh	r3, [r7, #4]
 8000bfe:	88bb      	ldrh	r3, [r7, #4]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d1e8      	bne.n	8000bd6 <ILI9341_FillRectangle+0x9a>
        }
    }

    ILI9341_Unselect();
 8000c04:	f7ff fcca 	bl	800059c <ILI9341_Unselect>
 8000c08:	e000      	b.n	8000c0c <ILI9341_FillRectangle+0xd0>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000c0a:	bf00      	nop
}
 8000c0c:	3714      	adds	r7, #20
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd90      	pop	{r4, r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40020800 	.word	0x40020800
 8000c18:	20000258 	.word	0x20000258

08000c1c <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af02      	add	r7, sp, #8
 8000c22:	4603      	mov	r3, r0
 8000c24:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 8000c26:	88fb      	ldrh	r3, [r7, #6]
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	23f0      	movs	r3, #240	; 0xf0
 8000c2c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000c30:	2100      	movs	r1, #0
 8000c32:	2000      	movs	r0, #0
 8000c34:	f7ff ff82 	bl	8000b3c <ILI9341_FillRectangle>
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000c48:	1d39      	adds	r1, r7, #4
 8000c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4e:	2201      	movs	r2, #1
 8000c50:	4803      	ldr	r0, [pc, #12]	; (8000c60 <__io_putchar+0x20>)
 8000c52:	f006 f996 	bl	8006f82 <HAL_UART_Transmit>
  return ch;
 8000c56:	687b      	ldr	r3, [r7, #4]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000340 	.word	0x20000340

08000c64 <displayImage>:

// Image display
int displayImage(const char*fname, uint32_t startx, uint32_t starty) {
 8000c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c68:	b0a0      	sub	sp, #128	; 0x80
 8000c6a:	af04      	add	r7, sp, #16
 8000c6c:	60f8      	str	r0, [r7, #12]
 8000c6e:	60b9      	str	r1, [r7, #8]
 8000c70:	607a      	str	r2, [r7, #4]
 8000c72:	466b      	mov	r3, sp
 8000c74:	469a      	mov	sl, r3
	    FRESULT res = f_open(&fil, fname, FA_READ);
 8000c76:	2201      	movs	r2, #1
 8000c78:	68f9      	ldr	r1, [r7, #12]
 8000c7a:	488f      	ldr	r0, [pc, #572]	; (8000eb8 <displayImage+0x254>)
 8000c7c:	f00c f946 	bl	800cf0c <f_open>
 8000c80:	4603      	mov	r3, r0
 8000c82:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	    if(res != FR_OK) {
 8000c86:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d009      	beq.n	8000ca2 <displayImage+0x3e>
	    	printf("f_open() failed, res = %d, %s\r\n", res, fname);
 8000c8e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000c92:	68fa      	ldr	r2, [r7, #12]
 8000c94:	4619      	mov	r1, r3
 8000c96:	4889      	ldr	r0, [pc, #548]	; (8000ebc <displayImage+0x258>)
 8000c98:	f00d fba2 	bl	800e3e0 <iprintf>
	        return -1;
 8000c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca0:	e188      	b.n	8000fb4 <displayImage+0x350>
	    }

	    printf("File opened, reading...\r\n");
 8000ca2:	4887      	ldr	r0, [pc, #540]	; (8000ec0 <displayImage+0x25c>)
 8000ca4:	f00d fc22 	bl	800e4ec <puts>

	    unsigned int bytesRead;
	    uint8_t header[34];
	    res = f_read(&fil, header, sizeof(header), &bytesRead);
 8000ca8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cac:	f107 0114 	add.w	r1, r7, #20
 8000cb0:	2222      	movs	r2, #34	; 0x22
 8000cb2:	4881      	ldr	r0, [pc, #516]	; (8000eb8 <displayImage+0x254>)
 8000cb4:	f00c fae8 	bl	800d288 <f_read>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	    if(res != FR_OK) {
 8000cbe:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d00b      	beq.n	8000cde <displayImage+0x7a>
	    	printf("f_read() failed: %i\r\n", res);
 8000cc6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000cca:	4619      	mov	r1, r3
 8000ccc:	487d      	ldr	r0, [pc, #500]	; (8000ec4 <displayImage+0x260>)
 8000cce:	f00d fb87 	bl	800e3e0 <iprintf>
	        f_close(&fil);
 8000cd2:	4879      	ldr	r0, [pc, #484]	; (8000eb8 <displayImage+0x254>)
 8000cd4:	f00c fc95 	bl	800d602 <f_close>
	        return -2;
 8000cd8:	f06f 0301 	mvn.w	r3, #1
 8000cdc:	e16a      	b.n	8000fb4 <displayImage+0x350>
	    }

	    if((header[0] != 0x42) || (header[1] != 0x4D)) {
 8000cde:	7d3b      	ldrb	r3, [r7, #20]
 8000ce0:	2b42      	cmp	r3, #66	; 0x42
 8000ce2:	d102      	bne.n	8000cea <displayImage+0x86>
 8000ce4:	7d7b      	ldrb	r3, [r7, #21]
 8000ce6:	2b4d      	cmp	r3, #77	; 0x4d
 8000ce8:	d008      	beq.n	8000cfc <displayImage+0x98>
	    	printf("Wrong BMP signature\r\n");
 8000cea:	4877      	ldr	r0, [pc, #476]	; (8000ec8 <displayImage+0x264>)
 8000cec:	f00d fbfe 	bl	800e4ec <puts>
	        f_close(&fil);
 8000cf0:	4871      	ldr	r0, [pc, #452]	; (8000eb8 <displayImage+0x254>)
 8000cf2:	f00c fc86 	bl	800d602 <f_close>
	        return -3;
 8000cf6:	f06f 0302 	mvn.w	r3, #2
 8000cfa:	e15b      	b.n	8000fb4 <displayImage+0x350>
	    }

	    uint32_t imageOffset = header[10] | (header[11] << 8) | (header[12] << 16) | (header[13] << 24);
 8000cfc:	7fbb      	ldrb	r3, [r7, #30]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	7ffb      	ldrb	r3, [r7, #31]
 8000d02:	021b      	lsls	r3, r3, #8
 8000d04:	431a      	orrs	r2, r3
 8000d06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d0a:	041b      	lsls	r3, r3, #16
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000d12:	061b      	lsls	r3, r3, #24
 8000d14:	4313      	orrs	r3, r2
 8000d16:	65fb      	str	r3, [r7, #92]	; 0x5c
	    uint32_t imageWidth = header[18] | (header[19] << 8) | (header[20] << 16) | (header[21] << 24);
 8000d18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d22:	021b      	lsls	r3, r3, #8
 8000d24:	431a      	orrs	r2, r3
 8000d26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d2a:	041b      	lsls	r3, r3, #16
 8000d2c:	431a      	orrs	r2, r3
 8000d2e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000d32:	061b      	lsls	r3, r3, #24
 8000d34:	4313      	orrs	r3, r2
 8000d36:	65bb      	str	r3, [r7, #88]	; 0x58
	    uint32_t imageHeight = header[22] | (header[23] << 8) | (header[24] << 16) | (header[25] << 24);
 8000d38:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000d42:	021b      	lsls	r3, r3, #8
 8000d44:	431a      	orrs	r2, r3
 8000d46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d4a:	041b      	lsls	r3, r3, #16
 8000d4c:	431a      	orrs	r2, r3
 8000d4e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000d52:	061b      	lsls	r3, r3, #24
 8000d54:	4313      	orrs	r3, r2
 8000d56:	657b      	str	r3, [r7, #84]	; 0x54
	    uint16_t imagePlanes = header[26] | (header[27] << 8);
 8000d58:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000d5c:	b21a      	sxth	r2, r3
 8000d5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d62:	021b      	lsls	r3, r3, #8
 8000d64:	b21b      	sxth	r3, r3
 8000d66:	4313      	orrs	r3, r2
 8000d68:	b21b      	sxth	r3, r3
 8000d6a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	    uint16_t imageBitsPerPixel = header[28] | (header[29] << 8);
 8000d6e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000d72:	b21a      	sxth	r2, r3
 8000d74:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000d78:	021b      	lsls	r3, r3, #8
 8000d7a:	b21b      	sxth	r3, r3
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	b21b      	sxth	r3, r3
 8000d80:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	    uint32_t imageCompression = header[30] | (header[31] << 8) | (header[32] << 16) | (header[33] << 24);
 8000d84:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000d88:	461a      	mov	r2, r3
 8000d8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d8e:	021b      	lsls	r3, r3, #8
 8000d90:	431a      	orrs	r2, r3
 8000d92:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000d96:	041b      	lsls	r3, r3, #16
 8000d98:	431a      	orrs	r2, r3
 8000d9a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000d9e:	061b      	lsls	r3, r3, #24
 8000da0:	4313      	orrs	r3, r2
 8000da2:	64fb      	str	r3, [r7, #76]	; 0x4c

	    if((imagePlanes != 1) || (imageBitsPerPixel != 24) || (imageCompression != 0)) {
 8000da4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d106      	bne.n	8000dba <displayImage+0x156>
 8000dac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8000db0:	2b18      	cmp	r3, #24
 8000db2:	d102      	bne.n	8000dba <displayImage+0x156>
 8000db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d005      	beq.n	8000dc6 <displayImage+0x162>
	        f_close(&fil);
 8000dba:	483f      	ldr	r0, [pc, #252]	; (8000eb8 <displayImage+0x254>)
 8000dbc:	f00c fc21 	bl	800d602 <f_close>
	        return -5;
 8000dc0:	f06f 0304 	mvn.w	r3, #4
 8000dc4:	e0f6      	b.n	8000fb4 <displayImage+0x350>
	    }

	    res = f_lseek(&fil, imageOffset);
 8000dc6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8000dc8:	483b      	ldr	r0, [pc, #236]	; (8000eb8 <displayImage+0x254>)
 8000dca:	f00c fc44 	bl	800d656 <f_lseek>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	    if(res != FR_OK) {
 8000dd4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d021      	beq.n	8000e20 <displayImage+0x1bc>
	    	printf("f_lseek() failed, %i", res);
 8000ddc:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000de0:	4619      	mov	r1, r3
 8000de2:	483a      	ldr	r0, [pc, #232]	; (8000ecc <displayImage+0x268>)
 8000de4:	f00d fafc 	bl	800e3e0 <iprintf>
	        snprintf(buff, sizeof(buff), "f_lseek() failed, res = %d\r\n ", res);
 8000de8:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000dec:	4a38      	ldr	r2, [pc, #224]	; (8000ed0 <displayImage+0x26c>)
 8000dee:	2140      	movs	r1, #64	; 0x40
 8000df0:	4838      	ldr	r0, [pc, #224]	; (8000ed4 <displayImage+0x270>)
 8000df2:	f00d fb83 	bl	800e4fc <sniprintf>
	    	ILI9341_WriteString(0, 120, buff, Font_7x10, ILI9341_RED, ILI9341_WHITE);
 8000df6:	4b38      	ldr	r3, [pc, #224]	; (8000ed8 <displayImage+0x274>)
 8000df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dfc:	9202      	str	r2, [sp, #8]
 8000dfe:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000e02:	9201      	str	r2, [sp, #4]
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	9200      	str	r2, [sp, #0]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a32      	ldr	r2, [pc, #200]	; (8000ed4 <displayImage+0x270>)
 8000e0c:	2178      	movs	r1, #120	; 0x78
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f7ff fe48 	bl	8000aa4 <ILI9341_WriteString>
	        f_close(&fil);
 8000e14:	4828      	ldr	r0, [pc, #160]	; (8000eb8 <displayImage+0x254>)
 8000e16:	f00c fbf4 	bl	800d602 <f_close>
	        return -6;
 8000e1a:	f06f 0305 	mvn.w	r3, #5
 8000e1e:	e0c9      	b.n	8000fb4 <displayImage+0x350>
	    }

	    // row size is aligned to 4 bytes
	    uint8_t imageRow[(imageWidth * 3 + 3) & ~3];
 8000e20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e22:	1c5a      	adds	r2, r3, #1
 8000e24:	4613      	mov	r3, r2
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	4413      	add	r3, r2
 8000e2a:	f023 0603 	bic.w	r6, r3, #3
 8000e2e:	4633      	mov	r3, r6
 8000e30:	3b01      	subs	r3, #1
 8000e32:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e34:	2300      	movs	r3, #0
 8000e36:	46b0      	mov	r8, r6
 8000e38:	4699      	mov	r9, r3
 8000e3a:	f04f 0200 	mov.w	r2, #0
 8000e3e:	f04f 0300 	mov.w	r3, #0
 8000e42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e4e:	2300      	movs	r3, #0
 8000e50:	4634      	mov	r4, r6
 8000e52:	461d      	mov	r5, r3
 8000e54:	f04f 0200 	mov.w	r2, #0
 8000e58:	f04f 0300 	mov.w	r3, #0
 8000e5c:	00eb      	lsls	r3, r5, #3
 8000e5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e62:	00e2      	lsls	r2, r4, #3
 8000e64:	1df3      	adds	r3, r6, #7
 8000e66:	08db      	lsrs	r3, r3, #3
 8000e68:	00db      	lsls	r3, r3, #3
 8000e6a:	ebad 0d03 	sub.w	sp, sp, r3
 8000e6e:	ab04      	add	r3, sp, #16
 8000e70:	3300      	adds	r3, #0
 8000e72:	647b      	str	r3, [r7, #68]	; 0x44
	    for(uint32_t y = starty; y < starty + imageHeight; y++) {
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	667b      	str	r3, [r7, #100]	; 0x64
 8000e78:	e081      	b.n	8000f7e <displayImage+0x31a>
	        uint32_t rowIdx = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	66bb      	str	r3, [r7, #104]	; 0x68
	        res = f_read(&fil, imageRow, sizeof(imageRow), &bytesRead);
 8000e7e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e82:	4632      	mov	r2, r6
 8000e84:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000e86:	480c      	ldr	r0, [pc, #48]	; (8000eb8 <displayImage+0x254>)
 8000e88:	f00c f9fe 	bl	800d288 <f_read>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	        if(res != FR_OK) {
 8000e92:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d00b      	beq.n	8000eb2 <displayImage+0x24e>
	        	printf("f_read() failed, %i", res);
 8000e9a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	480e      	ldr	r0, [pc, #56]	; (8000edc <displayImage+0x278>)
 8000ea2:	f00d fa9d 	bl	800e3e0 <iprintf>
	            f_close(&fil);
 8000ea6:	4804      	ldr	r0, [pc, #16]	; (8000eb8 <displayImage+0x254>)
 8000ea8:	f00c fbab 	bl	800d602 <f_close>
	            return -7;
 8000eac:	f06f 0306 	mvn.w	r3, #6
 8000eb0:	e080      	b.n	8000fb4 <displayImage+0x350>
	        }

	        for(uint32_t x = startx; x < startx + imageWidth; x++) {
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000eb6:	e059      	b.n	8000f6c <displayImage+0x308>
 8000eb8:	2000063c 	.word	0x2000063c
 8000ebc:	0800f814 	.word	0x0800f814
 8000ec0:	0800f834 	.word	0x0800f834
 8000ec4:	0800f850 	.word	0x0800f850
 8000ec8:	0800f868 	.word	0x0800f868
 8000ecc:	0800f880 	.word	0x0800f880
 8000ed0:	0800f898 	.word	0x0800f898
 8000ed4:	200003cc 	.word	0x200003cc
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	0800f8b8 	.word	0x0800f8b8
	            uint8_t b = imageRow[rowIdx++];
 8000ee0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ee2:	1c5a      	adds	r2, r3, #1
 8000ee4:	66ba      	str	r2, [r7, #104]	; 0x68
 8000ee6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000ee8:	5cd3      	ldrb	r3, [r2, r3]
 8000eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	            uint8_t g = imageRow[rowIdx++];
 8000eee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ef0:	1c5a      	adds	r2, r3, #1
 8000ef2:	66ba      	str	r2, [r7, #104]	; 0x68
 8000ef4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000ef6:	5cd3      	ldrb	r3, [r2, r3]
 8000ef8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	            uint8_t r = imageRow[rowIdx++];
 8000efc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000efe:	1c5a      	adds	r2, r3, #1
 8000f00:	66ba      	str	r2, [r7, #104]	; 0x68
 8000f02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000f04:	5cd3      	ldrb	r3, [r2, r3]
 8000f06:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	            uint16_t color565 = ILI9341_COLOR565(r, g, b);
 8000f0a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8000f0e:	021b      	lsls	r3, r3, #8
 8000f10:	b21b      	sxth	r3, r3
 8000f12:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000f16:	f023 0307 	bic.w	r3, r3, #7
 8000f1a:	b21a      	sxth	r2, r3
 8000f1c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	b21b      	sxth	r3, r3
 8000f24:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000f28:	b21b      	sxth	r3, r3
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	b21a      	sxth	r2, r3
 8000f2e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000f32:	08db      	lsrs	r3, r3, #3
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	b21b      	sxth	r3, r3
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	87fb      	strh	r3, [r7, #62]	; 0x3e
	            ILI9341_DrawPixel(x, (2*starty) + imageHeight - y - 1, color565);
 8000f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f40:	b298      	uxth	r0, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	4413      	add	r3, r2
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8000f60:	4619      	mov	r1, r3
 8000f62:	f7ff fcf9 	bl	8000958 <ILI9341_DrawPixel>
	        for(uint32_t x = startx; x < startx + imageWidth; x++) {
 8000f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f68:	3301      	adds	r3, #1
 8000f6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f6c:	68ba      	ldr	r2, [r7, #8]
 8000f6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f70:	4413      	add	r3, r2
 8000f72:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d3b3      	bcc.n	8000ee0 <displayImage+0x27c>
	    for(uint32_t y = starty; y < starty + imageHeight; y++) {
 8000f78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	667b      	str	r3, [r7, #100]	; 0x64
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f82:	4413      	add	r3, r2
 8000f84:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000f86:	429a      	cmp	r2, r3
 8000f88:	f4ff af77 	bcc.w	8000e7a <displayImage+0x216>
	        }
	    }

	    res = f_close(&fil);
 8000f8c:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <displayImage+0x35c>)
 8000f8e:	f00c fb38 	bl	800d602 <f_close>
 8000f92:	4603      	mov	r3, r0
 8000f94:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	    if(res != FR_OK) {
 8000f98:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d008      	beq.n	8000fb2 <displayImage+0x34e>
	    	printf("f_close() failed %i", res);
 8000fa0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4807      	ldr	r0, [pc, #28]	; (8000fc4 <displayImage+0x360>)
 8000fa8:	f00d fa1a 	bl	800e3e0 <iprintf>
	        return -8;
 8000fac:	f06f 0307 	mvn.w	r3, #7
 8000fb0:	e000      	b.n	8000fb4 <displayImage+0x350>
	    }

	    return 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	46d5      	mov	sp, sl
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3770      	adds	r7, #112	; 0x70
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc0:	2000063c 	.word	0x2000063c
 8000fc4:	0800f8cc 	.word	0x0800f8cc

08000fc8 <BQ27441_i2cWriteBytes>:


// Battery monitor related
HAL_StatusTypeDef BQ27441_i2cWriteBytes(uint16_t memAddress, uint8_t *pData, uint16_t Size) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af04      	add	r7, sp, #16
 8000fce:	4603      	mov	r3, r0
 8000fd0:	6039      	str	r1, [r7, #0]
 8000fd2:	80fb      	strh	r3, [r7, #6]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Mem_Write(&hi2c3, BQ27441_I2C_ADDRESS << 1, memAddress, I2C_MEMADD_SIZE_8BIT, pData, Size, HAL_MAX_DELAY);
 8000fd8:	88fa      	ldrh	r2, [r7, #6]
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	9302      	str	r3, [sp, #8]
 8000fe0:	88bb      	ldrh	r3, [r7, #4]
 8000fe2:	9301      	str	r3, [sp, #4]
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2301      	movs	r3, #1
 8000fea:	21aa      	movs	r1, #170	; 0xaa
 8000fec:	4803      	ldr	r0, [pc, #12]	; (8000ffc <BQ27441_i2cWriteBytes+0x34>)
 8000fee:	f002 f8bd 	bl	800316c <HAL_I2C_Mem_Write>
 8000ff2:	4603      	mov	r3, r0
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	200001ac 	.word	0x200001ac

08001000 <BQ27441_i2cReadBytes>:

HAL_StatusTypeDef BQ27441_i2cReadBytes(uint16_t memAddress, uint8_t *pData, uint16_t Size) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af04      	add	r7, sp, #16
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	80fb      	strh	r3, [r7, #6]
 800100c:	4613      	mov	r3, r2
 800100e:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Mem_Read(&hi2c3, BQ27441_I2C_ADDRESS << 1, memAddress, I2C_MEMADD_SIZE_8BIT, pData, Size, HAL_MAX_DELAY);
 8001010:	88fa      	ldrh	r2, [r7, #6]
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
 8001016:	9302      	str	r3, [sp, #8]
 8001018:	88bb      	ldrh	r3, [r7, #4]
 800101a:	9301      	str	r3, [sp, #4]
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2301      	movs	r3, #1
 8001022:	21aa      	movs	r1, #170	; 0xaa
 8001024:	4803      	ldr	r0, [pc, #12]	; (8001034 <BQ27441_i2cReadBytes+0x34>)
 8001026:	f002 f99b 	bl	8003360 <HAL_I2C_Mem_Read>
 800102a:	4603      	mov	r3, r0
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200001ac 	.word	0x200001ac

08001038 <BQ27441_readWord>:

uint16_t BQ27441_readWord(uint16_t subAddress) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    BQ27441_i2cReadBytes(subAddress, data, 2);
 8001042:	f107 010c 	add.w	r1, r7, #12
 8001046:	88fb      	ldrh	r3, [r7, #6]
 8001048:	2202      	movs	r2, #2
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff ffd8 	bl	8001000 <BQ27441_i2cReadBytes>
    return ((uint16_t) data[1] << 8) | data[0];
 8001050:	7b7b      	ldrb	r3, [r7, #13]
 8001052:	021b      	lsls	r3, r3, #8
 8001054:	b21a      	sxth	r2, r3
 8001056:	7b3b      	ldrb	r3, [r7, #12]
 8001058:	b21b      	sxth	r3, r3
 800105a:	4313      	orrs	r3, r2
 800105c:	b21b      	sxth	r3, r3
 800105e:	b29b      	uxth	r3, r3
}
 8001060:	4618      	mov	r0, r3
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <BQ27441_soc>:

uint16_t BQ27441_soc(soc_measure type) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
    //type = FILTERED;
    uint16_t socRet = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	81fb      	strh	r3, [r7, #14]
    switch (type) {
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d002      	beq.n	8001082 <BQ27441_soc+0x1a>
 800107c:	2b01      	cmp	r3, #1
 800107e:	d006      	beq.n	800108e <BQ27441_soc+0x26>
 8001080:	e00b      	b.n	800109a <BQ27441_soc+0x32>
        case FILTERED:
            socRet = BQ27441_readWord(BQ27441_COMMAND_SOC);
 8001082:	201c      	movs	r0, #28
 8001084:	f7ff ffd8 	bl	8001038 <BQ27441_readWord>
 8001088:	4603      	mov	r3, r0
 800108a:	81fb      	strh	r3, [r7, #14]
            break;
 800108c:	e005      	b.n	800109a <BQ27441_soc+0x32>
        case UNFILTERED:
            socRet = BQ27441_readWord(BQ27441_COMMAND_SOC_UNFL);
 800108e:	2030      	movs	r0, #48	; 0x30
 8001090:	f7ff ffd2 	bl	8001038 <BQ27441_readWord>
 8001094:	4603      	mov	r3, r0
 8001096:	81fb      	strh	r3, [r7, #14]
            break;
 8001098:	bf00      	nop
    }
    return socRet;
 800109a:	89fb      	ldrh	r3, [r7, #14]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <BQ27441_deviceType>:

int16_t BQ27441_power(void) {
    return (int16_t) BQ27441_readWord(BQ27441_COMMAND_AVG_POWER);
}

uint16_t BQ27441_deviceType(void) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
	// command sent to slave to tell it master wants to know devicetype
	// 0xFF to get right 8 bits of BQ27441_CONTROL_DEVICE_TYPE
	// >>8 to get left 8 bits, discarding right 8 bits of BQ27441_CONTROL_DEVICE_TYPE
    uint8_t command[2] = {BQ27441_CONTROL_DEVICE_TYPE & 0xFF, BQ27441_CONTROL_DEVICE_TYPE >> 8};
 80010aa:	2301      	movs	r3, #1
 80010ac:	80bb      	strh	r3, [r7, #4]
    uint8_t data[2];
    uint16_t deviceType = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	80fb      	strh	r3, [r7, #6]

    BQ27441_i2cWriteBytes(BQ27441_COMMAND_CONTROL, command, sizeof(command)); //write command to slave
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	2202      	movs	r2, #2
 80010b6:	4619      	mov	r1, r3
 80010b8:	2000      	movs	r0, #0
 80010ba:	f7ff ff85 	bl	8000fc8 <BQ27441_i2cWriteBytes>

    HAL_Delay(10); //delay to ensure device is ready
 80010be:	200a      	movs	r0, #10
 80010c0:	f001 f9cc 	bl	800245c <HAL_Delay>

    if (BQ27441_i2cReadBytes(BQ27441_COMMAND_CONTROL, data, sizeof(data)) == HAL_OK) { //read device type from control register
 80010c4:	463b      	mov	r3, r7
 80010c6:	2202      	movs	r2, #2
 80010c8:	4619      	mov	r1, r3
 80010ca:	2000      	movs	r0, #0
 80010cc:	f7ff ff98 	bl	8001000 <BQ27441_i2cReadBytes>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d107      	bne.n	80010e6 <BQ27441_deviceType+0x42>
        deviceType = (data[1] << 8) | data[0];
 80010d6:	787b      	ldrb	r3, [r7, #1]
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	b21a      	sxth	r2, r3
 80010dc:	783b      	ldrb	r3, [r7, #0]
 80010de:	b21b      	sxth	r3, r3
 80010e0:	4313      	orrs	r3, r2
 80010e2:	b21b      	sxth	r3, r3
 80010e4:	80fb      	strh	r3, [r7, #6]
    }
    return deviceType;
 80010e6:	88fb      	ldrh	r3, [r7, #6]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <BQ27441_init>:

bool BQ27441_init(BQ27441_ctx_t *dev) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
    if (dev == NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <BQ27441_init+0x12>
        return false;
 80010fe:	2300      	movs	r3, #0
 8001100:	e00a      	b.n	8001118 <BQ27441_init+0x28>

    if (BQ27441_deviceType() == BQ27441_DEVICE_ID) {
 8001102:	f7ff ffcf 	bl	80010a4 <BQ27441_deviceType>
 8001106:	4603      	mov	r3, r0
 8001108:	461a      	mov	r2, r3
 800110a:	f240 4321 	movw	r3, #1057	; 0x421
 800110e:	429a      	cmp	r2, r3
 8001110:	d101      	bne.n	8001116 <BQ27441_init+0x26>
        return true;
 8001112:	2301      	movs	r3, #1
 8001114:	e000      	b.n	8001118 <BQ27441_init+0x28>
    } else
        return false;
 8001116:	2300      	movs	r3, #0
}
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <Bat_init>:
	else {
		bat_charging = 1;
	}
}

void Bat_init(BQ27441_ctx_t * dev) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	BQ27441_init(dev);
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff ffe1 	bl	80010f0 <BQ27441_init>
	charge = BQ27441_soc(FILTERED);
 800112e:	2000      	movs	r0, #0
 8001130:	f7ff ff9a 	bl	8001068 <BQ27441_soc>
 8001134:	4603      	mov	r3, r0
 8001136:	b21a      	sxth	r2, r3
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <Bat_init+0x4c>)
 800113a:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(BAT_CE_GPIO_Port, BAT_CE_Pin, GPIO_PIN_SET);
 800113c:	2201      	movs	r2, #1
 800113e:	2180      	movs	r1, #128	; 0x80
 8001140:	480b      	ldr	r0, [pc, #44]	; (8001170 <Bat_init+0x50>)
 8001142:	f001 fc77 	bl	8002a34 <HAL_GPIO_WritePin>
	if (bat_charging && charge < 99) {
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <Bat_init+0x54>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d009      	beq.n	8001162 <Bat_init+0x42>
 800114e:	4b07      	ldr	r3, [pc, #28]	; (800116c <Bat_init+0x4c>)
 8001150:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001154:	2b62      	cmp	r3, #98	; 0x62
 8001156:	dc04      	bgt.n	8001162 <Bat_init+0x42>
		HAL_GPIO_WritePin(BAT_CE_GPIO_Port, BAT_CE_Pin, GPIO_PIN_RESET);
 8001158:	2200      	movs	r2, #0
 800115a:	2180      	movs	r1, #128	; 0x80
 800115c:	4804      	ldr	r0, [pc, #16]	; (8001170 <Bat_init+0x50>)
 800115e:	f001 fc69 	bl	8002a34 <HAL_GPIO_WritePin>
	}
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000874 	.word	0x20000874
 8001170:	40020800 	.word	0x40020800
 8001174:	20000870 	.word	0x20000870

08001178 <updateBat>:

void updateBat(void) {
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	charge = BQ27441_soc(FILTERED);
 800117c:	2000      	movs	r0, #0
 800117e:	f7ff ff73 	bl	8001068 <BQ27441_soc>
 8001182:	4603      	mov	r3, r0
 8001184:	b21a      	sxth	r2, r3
 8001186:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <updateBat+0x4c>)
 8001188:	801a      	strh	r2, [r3, #0]
	printf("lcd charge: %d\r\n", charge);
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <updateBat+0x4c>)
 800118c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001190:	4619      	mov	r1, r3
 8001192:	480d      	ldr	r0, [pc, #52]	; (80011c8 <updateBat+0x50>)
 8001194:	f00d f924 	bl	800e3e0 <iprintf>
	if (bat_charging){
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <updateBat+0x54>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d00f      	beq.n	80011c0 <updateBat+0x48>
		if (charge >= 99) {
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <updateBat+0x4c>)
 80011a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a6:	2b62      	cmp	r3, #98	; 0x62
 80011a8:	dd05      	ble.n	80011b6 <updateBat+0x3e>
			HAL_GPIO_WritePin(BAT_CE_GPIO_Port, BAT_CE_Pin, GPIO_PIN_SET);
 80011aa:	2201      	movs	r2, #1
 80011ac:	2180      	movs	r1, #128	; 0x80
 80011ae:	4808      	ldr	r0, [pc, #32]	; (80011d0 <updateBat+0x58>)
 80011b0:	f001 fc40 	bl	8002a34 <HAL_GPIO_WritePin>
		else {
			HAL_GPIO_WritePin(BAT_CE_GPIO_Port, BAT_CE_Pin, GPIO_PIN_RESET);
		}
	}

}
 80011b4:	e004      	b.n	80011c0 <updateBat+0x48>
			HAL_GPIO_WritePin(BAT_CE_GPIO_Port, BAT_CE_Pin, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2180      	movs	r1, #128	; 0x80
 80011ba:	4805      	ldr	r0, [pc, #20]	; (80011d0 <updateBat+0x58>)
 80011bc:	f001 fc3a 	bl	8002a34 <HAL_GPIO_WritePin>
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000874 	.word	0x20000874
 80011c8:	0800f8ec 	.word	0x0800f8ec
 80011cc:	20000870 	.word	0x20000870
 80011d0:	40020800 	.word	0x40020800

080011d4 <startup_init>:

void startup_init(void) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	ILI9341_FillScreen(ILI9341_BLACK);
 80011d8:	2000      	movs	r0, #0
 80011da:	f7ff fd1f 	bl	8000c1c <ILI9341_FillScreen>
	displayImage(LOGO, LOGO_X, LOGO_Y);
 80011de:	2237      	movs	r2, #55	; 0x37
 80011e0:	210f      	movs	r1, #15
 80011e2:	481d      	ldr	r0, [pc, #116]	; (8001258 <startup_init+0x84>)
 80011e4:	f7ff fd3e 	bl	8000c64 <displayImage>
	// Check USB connection
	if (HAL_GPIO_ReadPin(USB_Detect_GPIO_Port, USB_Detect_Pin) == GPIO_PIN_SET) {
 80011e8:	2120      	movs	r1, #32
 80011ea:	481c      	ldr	r0, [pc, #112]	; (800125c <startup_init+0x88>)
 80011ec:	f001 fc0a 	bl	8002a04 <HAL_GPIO_ReadPin>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d117      	bne.n	8001226 <startup_init+0x52>
		// If USB, get battery percentage and status
		bat_charging = 1;
 80011f6:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <startup_init+0x8c>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	601a      	str	r2, [r3, #0]
		updateBat();
 80011fc:	f7ff ffbc 	bl	8001178 <updateBat>

		// show USB symbol, battery percentage
		printf("Connection status: USB\r\n");
 8001200:	4818      	ldr	r0, [pc, #96]	; (8001264 <startup_init+0x90>)
 8001202:	f00d f973 	bl	800e4ec <puts>
		displayImage(USB, STATUS_X, STATUS_Y);
 8001206:	226e      	movs	r2, #110	; 0x6e
 8001208:	21d7      	movs	r1, #215	; 0xd7
 800120a:	4817      	ldr	r0, [pc, #92]	; (8001268 <startup_init+0x94>)
 800120c:	f7ff fd2a 	bl	8000c64 <displayImage>
		dispBat();
 8001210:	f000 f834 	bl	800127c <dispBat>

		// Enable USB timer interrupt
		bluetooth_mode = false;
 8001214:	4b15      	ldr	r3, [pc, #84]	; (800126c <startup_init+0x98>)
 8001216:	2200      	movs	r2, #0
 8001218:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(BT_EN_GPIO_Port, BT_EN_Pin, GPIO_PIN_RESET);
 800121a:	2200      	movs	r2, #0
 800121c:	2140      	movs	r1, #64	; 0x40
 800121e:	4814      	ldr	r0, [pc, #80]	; (8001270 <startup_init+0x9c>)
 8001220:	f001 fc08 	bl	8002a34 <HAL_GPIO_WritePin>

		// Enable Bluetooth
		bluetooth_mode = true;
		HAL_GPIO_WritePin(BT_EN_GPIO_Port, BT_EN_Pin, GPIO_PIN_SET);
	}
}
 8001224:	e016      	b.n	8001254 <startup_init+0x80>
		bat_charging = 0;
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <startup_init+0x8c>)
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
		updateBat();
 800122c:	f7ff ffa4 	bl	8001178 <updateBat>
		printf("Connection status: Bluetooth\r\n");
 8001230:	4810      	ldr	r0, [pc, #64]	; (8001274 <startup_init+0xa0>)
 8001232:	f00d f95b 	bl	800e4ec <puts>
		displayImage(BLUETOOTH, STATUS_X, STATUS_Y);
 8001236:	226e      	movs	r2, #110	; 0x6e
 8001238:	21d7      	movs	r1, #215	; 0xd7
 800123a:	480f      	ldr	r0, [pc, #60]	; (8001278 <startup_init+0xa4>)
 800123c:	f7ff fd12 	bl	8000c64 <displayImage>
		dispBat();
 8001240:	f000 f81c 	bl	800127c <dispBat>
		bluetooth_mode = true;
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <startup_init+0x98>)
 8001246:	2201      	movs	r2, #1
 8001248:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(BT_EN_GPIO_Port, BT_EN_Pin, GPIO_PIN_SET);
 800124a:	2201      	movs	r2, #1
 800124c:	2140      	movs	r1, #64	; 0x40
 800124e:	4808      	ldr	r0, [pc, #32]	; (8001270 <startup_init+0x9c>)
 8001250:	f001 fbf0 	bl	8002a34 <HAL_GPIO_WritePin>
}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	0800f900 	.word	0x0800f900
 800125c:	40020800 	.word	0x40020800
 8001260:	20000870 	.word	0x20000870
 8001264:	0800f90c 	.word	0x0800f90c
 8001268:	0800f924 	.word	0x0800f924
 800126c:	200003c8 	.word	0x200003c8
 8001270:	40020000 	.word	0x40020000
 8001274:	0800f92c 	.word	0x0800f92c
 8001278:	0800f94c 	.word	0x0800f94c

0800127c <dispBat>:

void dispBat(void) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af04      	add	r7, sp, #16
	snprintf(buff, sizeof(buff), "%d", charge);
 8001282:	4b27      	ldr	r3, [pc, #156]	; (8001320 <dispBat+0xa4>)
 8001284:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001288:	4a26      	ldr	r2, [pc, #152]	; (8001324 <dispBat+0xa8>)
 800128a:	2140      	movs	r1, #64	; 0x40
 800128c:	4826      	ldr	r0, [pc, #152]	; (8001328 <dispBat+0xac>)
 800128e:	f00d f935 	bl	800e4fc <sniprintf>
	if (bat_charging){
 8001292:	4b26      	ldr	r3, [pc, #152]	; (800132c <dispBat+0xb0>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d013      	beq.n	80012c2 <dispBat+0x46>
		displayImage(BATTERY_CHARGE, BATTERY_X, BATTERY_Y);
 800129a:	2228      	movs	r2, #40	; 0x28
 800129c:	21d2      	movs	r1, #210	; 0xd2
 800129e:	4824      	ldr	r0, [pc, #144]	; (8001330 <dispBat+0xb4>)
 80012a0:	f7ff fce0 	bl	8000c64 <displayImage>
		ILI9341_WriteString(PERCENT_X, PERCENT_Y, buff, Font_16x26, ILI9341_GREEN, ILI9341_BLACK);
 80012a4:	4b23      	ldr	r3, [pc, #140]	; (8001334 <dispBat+0xb8>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	9202      	str	r2, [sp, #8]
 80012aa:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80012ae:	9201      	str	r2, [sp, #4]
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	9200      	str	r2, [sp, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a1c      	ldr	r2, [pc, #112]	; (8001328 <dispBat+0xac>)
 80012b8:	212f      	movs	r1, #47	; 0x2f
 80012ba:	20e1      	movs	r0, #225	; 0xe1
 80012bc:	f7ff fbf2 	bl	8000aa4 <ILI9341_WriteString>
		else {
			displayImage(BATTERY_LOW, BATTERY_X, BATTERY_Y);
			ILI9341_WriteString(PERCENT_X, PERCENT_Y, buff, Font_16x26, ILI9341_RED, ILI9341_BLACK);
		}
	}
}
 80012c0:	e02b      	b.n	800131a <dispBat+0x9e>
		if (charge >= 25) {
 80012c2:	4b17      	ldr	r3, [pc, #92]	; (8001320 <dispBat+0xa4>)
 80012c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c8:	2b18      	cmp	r3, #24
 80012ca:	dd13      	ble.n	80012f4 <dispBat+0x78>
			displayImage(BATTERY_NORM, BATTERY_X, BATTERY_Y);
 80012cc:	2228      	movs	r2, #40	; 0x28
 80012ce:	21d2      	movs	r1, #210	; 0xd2
 80012d0:	4819      	ldr	r0, [pc, #100]	; (8001338 <dispBat+0xbc>)
 80012d2:	f7ff fcc7 	bl	8000c64 <displayImage>
			ILI9341_WriteString(PERCENT_X, PERCENT_Y, buff, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 80012d6:	4b17      	ldr	r3, [pc, #92]	; (8001334 <dispBat+0xb8>)
 80012d8:	2200      	movs	r2, #0
 80012da:	9202      	str	r2, [sp, #8]
 80012dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012e0:	9201      	str	r2, [sp, #4]
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	9200      	str	r2, [sp, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a0f      	ldr	r2, [pc, #60]	; (8001328 <dispBat+0xac>)
 80012ea:	212f      	movs	r1, #47	; 0x2f
 80012ec:	20e1      	movs	r0, #225	; 0xe1
 80012ee:	f7ff fbd9 	bl	8000aa4 <ILI9341_WriteString>
}
 80012f2:	e012      	b.n	800131a <dispBat+0x9e>
			displayImage(BATTERY_LOW, BATTERY_X, BATTERY_Y);
 80012f4:	2228      	movs	r2, #40	; 0x28
 80012f6:	21d2      	movs	r1, #210	; 0xd2
 80012f8:	4810      	ldr	r0, [pc, #64]	; (800133c <dispBat+0xc0>)
 80012fa:	f7ff fcb3 	bl	8000c64 <displayImage>
			ILI9341_WriteString(PERCENT_X, PERCENT_Y, buff, Font_16x26, ILI9341_RED, ILI9341_BLACK);
 80012fe:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <dispBat+0xb8>)
 8001300:	2200      	movs	r2, #0
 8001302:	9202      	str	r2, [sp, #8]
 8001304:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001308:	9201      	str	r2, [sp, #4]
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	9200      	str	r2, [sp, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a05      	ldr	r2, [pc, #20]	; (8001328 <dispBat+0xac>)
 8001312:	212f      	movs	r1, #47	; 0x2f
 8001314:	20e1      	movs	r0, #225	; 0xe1
 8001316:	f7ff fbc5 	bl	8000aa4 <ILI9341_WriteString>
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000874 	.word	0x20000874
 8001324:	0800f958 	.word	0x0800f958
 8001328:	200003cc 	.word	0x200003cc
 800132c:	20000870 	.word	0x20000870
 8001330:	0800f95c 	.word	0x0800f95c
 8001334:	20000008 	.word	0x20000008
 8001338:	0800f968 	.word	0x0800f968
 800133c:	0800f974 	.word	0x0800f974

08001340 <drive_column>:
void buttons_init(void) {
	  GPIOB->BSRR = 0xf << 16;
	  GPIOB->BSRR = 0x1;
}

void drive_column(void) {
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
	col = (col + 1) & 0x3;
 8001344:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <drive_column+0x30>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	3301      	adds	r3, #1
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	4a08      	ldr	r2, [pc, #32]	; (8001370 <drive_column+0x30>)
 8001350:	6013      	str	r3, [r2, #0]
	GPIOB->BSRR = 0xf << 16;
 8001352:	4b08      	ldr	r3, [pc, #32]	; (8001374 <drive_column+0x34>)
 8001354:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8001358:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR = 0x1 << (col);
 800135a:	4b05      	ldr	r3, [pc, #20]	; (8001370 <drive_column+0x30>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2201      	movs	r2, #1
 8001360:	409a      	lsls	r2, r3
 8001362:	4b04      	ldr	r3, [pc, #16]	; (8001374 <drive_column+0x34>)
 8001364:	619a      	str	r2, [r3, #24]
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	20000878 	.word	0x20000878
 8001374:	40020400 	.word	0x40020400

08001378 <read_rows>:

uint8_t read_rows(void) {
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
	return ((GPIOB->IDR & 0xf0) >> 4) & 0xf;
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <read_rows+0x1c>)
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	091b      	lsrs	r3, r3, #4
 8001382:	b2db      	uxtb	r3, r3
 8001384:	f003 030f 	and.w	r3, r3, #15
 8001388:	b2db      	uxtb	r3, r3
}
 800138a:	4618      	mov	r0, r3
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	40020400 	.word	0x40020400

08001398 <clean_buffer>:

void clean_buffer(void) {
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	if (((buffer[2] & 0x3) == 0x3) && ((buffer[1] & 0x08) == 0x08)) {
 800139c:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <clean_buffer+0x44>)
 800139e:	789b      	ldrb	r3, [r3, #2]
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	2b03      	cmp	r3, #3
 80013a6:	d107      	bne.n	80013b8 <clean_buffer+0x20>
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <clean_buffer+0x44>)
 80013aa:	785b      	ldrb	r3, [r3, #1]
 80013ac:	f003 0308 	and.w	r3, r3, #8
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <clean_buffer+0x20>
		HAL_NVIC_SystemReset();
 80013b4:	f001 f991 	bl	80026da <HAL_NVIC_SystemReset>
	}
	cleaned_buffer[0] = buffer[0];
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <clean_buffer+0x44>)
 80013ba:	781a      	ldrb	r2, [r3, #0]
 80013bc:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <clean_buffer+0x48>)
 80013be:	701a      	strb	r2, [r3, #0]
	cleaned_buffer[1] = buffer[1];
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <clean_buffer+0x44>)
 80013c2:	785a      	ldrb	r2, [r3, #1]
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <clean_buffer+0x48>)
 80013c6:	705a      	strb	r2, [r3, #1]
	cleaned_buffer[2] = buffer[2] & 0x01;
 80013c8:	4b04      	ldr	r3, [pc, #16]	; (80013dc <clean_buffer+0x44>)
 80013ca:	789b      	ldrb	r3, [r3, #2]
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	4b03      	ldr	r3, [pc, #12]	; (80013e0 <clean_buffer+0x48>)
 80013d4:	709a      	strb	r2, [r3, #2]
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	2000087c 	.word	0x2000087c
 80013e0:	20000880 	.word	0x20000880

080013e4 <right_stick_emulate>:

void right_stick_emulate(void) {
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
	if (buffer[2] & 0x02) {
 80013e8:	4b10      	ldr	r3, [pc, #64]	; (800142c <right_stick_emulate+0x48>)
 80013ea:	789b      	ldrb	r3, [r3, #2]
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d015      	beq.n	8001420 <right_stick_emulate+0x3c>
		cleaned_buffer[2] |= ((cleaned_buffer[0] & 0x0f) << 1);
 80013f4:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <right_stick_emulate+0x4c>)
 80013f6:	789b      	ldrb	r3, [r3, #2]
 80013f8:	b25a      	sxtb	r2, r3
 80013fa:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <right_stick_emulate+0x4c>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	b25b      	sxtb	r3, r3
 8001402:	f003 031e 	and.w	r3, r3, #30
 8001406:	b25b      	sxtb	r3, r3
 8001408:	4313      	orrs	r3, r2
 800140a:	b25b      	sxtb	r3, r3
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <right_stick_emulate+0x4c>)
 8001410:	709a      	strb	r2, [r3, #2]
		cleaned_buffer[0] &= ~0x0f;
 8001412:	4b07      	ldr	r3, [pc, #28]	; (8001430 <right_stick_emulate+0x4c>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	f023 030f 	bic.w	r3, r3, #15
 800141a:	b2da      	uxtb	r2, r3
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <right_stick_emulate+0x4c>)
 800141e:	701a      	strb	r2, [r3, #0]
	}
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	2000087c 	.word	0x2000087c
 8001430:	20000880 	.word	0x20000880

08001434 <clean_buffer_bt>:

void clean_buffer_bt(void) {
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
	bluetooth_buffer[1] = cleaned_buffer[0];
 8001438:	4b08      	ldr	r3, [pc, #32]	; (800145c <clean_buffer_bt+0x28>)
 800143a:	781a      	ldrb	r2, [r3, #0]
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <clean_buffer_bt+0x2c>)
 800143e:	705a      	strb	r2, [r3, #1]
	bluetooth_buffer[2] = cleaned_buffer[1];
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <clean_buffer_bt+0x28>)
 8001442:	785a      	ldrb	r2, [r3, #1]
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <clean_buffer_bt+0x2c>)
 8001446:	709a      	strb	r2, [r3, #2]
	bluetooth_buffer[3] = cleaned_buffer[2];
 8001448:	4b04      	ldr	r3, [pc, #16]	; (800145c <clean_buffer_bt+0x28>)
 800144a:	789a      	ldrb	r2, [r3, #2]
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <clean_buffer_bt+0x2c>)
 800144e:	70da      	strb	r2, [r3, #3]
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20000880 	.word	0x20000880
 8001460:	2000001c 	.word	0x2000001c

08001464 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001464:	b590      	push	{r4, r7, lr}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a3a      	ldr	r2, [pc, #232]	; (8001558 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d152      	bne.n	800151a <HAL_TIM_PeriodElapsedCallback+0xb6>
		uint8_t rows = read_rows();
 8001474:	f7ff ff80 	bl	8001378 <read_rows>
 8001478:	4603      	mov	r3, r0
 800147a:	73fb      	strb	r3, [r7, #15]
		int idx = col / 2;
 800147c:	4b37      	ldr	r3, [pc, #220]	; (800155c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	0fda      	lsrs	r2, r3, #31
 8001482:	4413      	add	r3, r2
 8001484:	105b      	asrs	r3, r3, #1
 8001486:	60bb      	str	r3, [r7, #8]
		buffer[idx] &= ~(0xf << ((col % 2) * 4));
 8001488:	4b34      	ldr	r3, [pc, #208]	; (800155c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	bfb8      	it	lt
 8001494:	425b      	neglt	r3, r3
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	220f      	movs	r2, #15
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43d9      	mvns	r1, r3
 80014a0:	4a2f      	ldr	r2, [pc, #188]	; (8001560 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	4413      	add	r3, r2
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	b25a      	sxtb	r2, r3
 80014aa:	b24b      	sxtb	r3, r1
 80014ac:	4013      	ands	r3, r2
 80014ae:	b25b      	sxtb	r3, r3
 80014b0:	b2d9      	uxtb	r1, r3
 80014b2:	4a2b      	ldr	r2, [pc, #172]	; (8001560 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	4413      	add	r3, r2
 80014b8:	460a      	mov	r2, r1
 80014ba:	701a      	strb	r2, [r3, #0]
		buffer[idx] |= rows << ((col % 2) * 4);
 80014bc:	7bfa      	ldrb	r2, [r7, #15]
 80014be:	4b27      	ldr	r3, [pc, #156]	; (800155c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	bfb8      	it	lt
 80014ca:	425b      	neglt	r3, r3
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	fa02 f103 	lsl.w	r1, r2, r3
 80014d2:	4a23      	ldr	r2, [pc, #140]	; (8001560 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	4413      	add	r3, r2
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	b25a      	sxtb	r2, r3
 80014dc:	b24b      	sxtb	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	b25b      	sxtb	r3, r3
 80014e2:	b2d9      	uxtb	r1, r3
 80014e4:	4a1e      	ldr	r2, [pc, #120]	; (8001560 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	4413      	add	r3, r2
 80014ea:	460a      	mov	r2, r1
 80014ec:	701a      	strb	r2, [r3, #0]
		drive_column();
 80014ee:	f7ff ff27 	bl	8001340 <drive_column>
		buffer[2] = HAL_GPIO_ReadPin(Button17_GPIO_Port, Button17_Pin) | HAL_GPIO_ReadPin(Button18_GPIO_Port, Button18_Pin) << 1;
 80014f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014f6:	481b      	ldr	r0, [pc, #108]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80014f8:	f001 fa84 	bl	8002a04 <HAL_GPIO_ReadPin>
 80014fc:	4603      	mov	r3, r0
 80014fe:	b25c      	sxtb	r4, r3
 8001500:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001504:	4817      	ldr	r0, [pc, #92]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001506:	f001 fa7d 	bl	8002a04 <HAL_GPIO_ReadPin>
 800150a:	4603      	mov	r3, r0
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	b25b      	sxtb	r3, r3
 8001510:	4323      	orrs	r3, r4
 8001512:	b25b      	sxtb	r3, r3
 8001514:	b2da      	uxtb	r2, r3
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001518:	709a      	strb	r2, [r3, #2]
	}

	if (htim == &htim3) {
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a12      	ldr	r2, [pc, #72]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d115      	bne.n	800154e <HAL_TIM_PeriodElapsedCallback+0xea>
		clean_buffer();
 8001522:	f7ff ff39 	bl	8001398 <clean_buffer>
		right_stick_emulate();
 8001526:	f7ff ff5d 	bl	80013e4 <right_stick_emulate>
		if (bluetooth_mode) {
 800152a:	4b10      	ldr	r3, [pc, #64]	; (800156c <HAL_TIM_PeriodElapsedCallback+0x108>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d008      	beq.n	8001544 <HAL_TIM_PeriodElapsedCallback+0xe0>
			clean_buffer_bt();
 8001532:	f7ff ff7f 	bl	8001434 <clean_buffer_bt>
			HAL_UART_Transmit(&huart2, bluetooth_buffer, sizeof(bluetooth_buffer), 100);
 8001536:	2364      	movs	r3, #100	; 0x64
 8001538:	2204      	movs	r2, #4
 800153a:	490d      	ldr	r1, [pc, #52]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800153c:	480d      	ldr	r0, [pc, #52]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800153e:	f005 fd20 	bl	8006f82 <HAL_UART_Transmit>
		}
		else {
			USBD_HID_SendReport(&hUsbDeviceFS, cleaned_buffer, sizeof(cleaned_buffer));
		}
	}
}
 8001542:	e004      	b.n	800154e <HAL_TIM_PeriodElapsedCallback+0xea>
			USBD_HID_SendReport(&hUsbDeviceFS, cleaned_buffer, sizeof(cleaned_buffer));
 8001544:	2203      	movs	r2, #3
 8001546:	490c      	ldr	r1, [pc, #48]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001548:	480c      	ldr	r0, [pc, #48]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x118>)
 800154a:	f008 fbe1 	bl	8009d10 <USBD_HID_SendReport>
}
 800154e:	bf00      	nop
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	bd90      	pop	{r4, r7, pc}
 8001556:	bf00      	nop
 8001558:	200002b0 	.word	0x200002b0
 800155c:	20000878 	.word	0x20000878
 8001560:	2000087c 	.word	0x2000087c
 8001564:	40020400 	.word	0x40020400
 8001568:	200002f8 	.word	0x200002f8
 800156c:	200003c8 	.word	0x200003c8
 8001570:	2000001c 	.word	0x2000001c
 8001574:	20000384 	.word	0x20000384
 8001578:	20000880 	.word	0x20000880
 800157c:	200008d8 	.word	0x200008d8

08001580 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	80fb      	strh	r3, [r7, #6]
	 if ((GPIO_Pin == BAT_GPOUT_Pin)) {
 800158a:	88fb      	ldrh	r3, [r7, #6]
 800158c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001590:	d104      	bne.n	800159c <HAL_GPIO_EXTI_Callback+0x1c>
		 updateBat();
 8001592:	f7ff fdf1 	bl	8001178 <updateBat>
		 dispBat();
 8001596:	f7ff fe71 	bl	800127c <dispBat>
		 startup_init();
	 }
	 else {
		 __NOP();
	 }
}
 800159a:	e006      	b.n	80015aa <HAL_GPIO_EXTI_Callback+0x2a>
	 else if ((GPIO_Pin == USB_Detect_Pin)) {
 800159c:	88fb      	ldrh	r3, [r7, #6]
 800159e:	2b20      	cmp	r3, #32
 80015a0:	d102      	bne.n	80015a8 <HAL_GPIO_EXTI_Callback+0x28>
		 startup_init();
 80015a2:	f7ff fe17 	bl	80011d4 <startup_init>
}
 80015a6:	e000      	b.n	80015aa <HAL_GPIO_EXTI_Callback+0x2a>
		 __NOP();
 80015a8:	bf00      	nop
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
	...

080015b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ba:	f000 fedd 	bl	8002378 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015be:	f000 f8d1 	bl	8001764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015c2:	f000 fac1 	bl	8001b48 <MX_GPIO_Init>
  MX_I2C3_Init();
 80015c6:	f000 f935 	bl	8001834 <MX_I2C3_Init>
  MX_SPI2_Init();
 80015ca:	f000 f961 	bl	8001890 <MX_SPI2_Init>
  MX_SPI3_Init();
 80015ce:	f000 f995 	bl	80018fc <MX_SPI3_Init>
  MX_TIM2_Init();
 80015d2:	f000 f9cb 	bl	800196c <MX_TIM2_Init>
  MX_TIM3_Init();
 80015d6:	f000 fa15 	bl	8001a04 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80015da:	f000 fa61 	bl	8001aa0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80015de:	f000 fa89 	bl	8001af4 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80015e2:	f007 fc91 	bl	8008f08 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80015e6:	f00c fa9b 	bl	800db20 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // Initialize LCD and LED
  HAL_GPIO_WritePin(Debug_LED_GPIO_Port, Debug_LED_Pin, GPIO_PIN_SET);
 80015ea:	2201      	movs	r2, #1
 80015ec:	2102      	movs	r1, #2
 80015ee:	484c      	ldr	r0, [pc, #304]	; (8001720 <main+0x16c>)
 80015f0:	f001 fa20 	bl	8002a34 <HAL_GPIO_WritePin>
  ILI9341_Init();
 80015f4:	f7ff f882 	bl	80006fc <ILI9341_Init>
  ILI9341_FillScreen(ILI9341_BLACK);
 80015f8:	2000      	movs	r0, #0
 80015fa:	f7ff fb0f 	bl	8000c1c <ILI9341_FillScreen>

  // Disable charging
    HAL_GPIO_WritePin(BAT_CE_GPIO_Port, BAT_CE_Pin, GPIO_PIN_SET);
 80015fe:	2201      	movs	r2, #1
 8001600:	2180      	movs	r1, #128	; 0x80
 8001602:	4848      	ldr	r0, [pc, #288]	; (8001724 <main+0x170>)
 8001604:	f001 fa16 	bl	8002a34 <HAL_GPIO_WritePin>

  // Connect to battery monitor
  HAL_StatusTypeDef res;
  uint8_t receiveBuffer[1];
  printf("Connecting to battery monitor\r\n");
 8001608:	4847      	ldr	r0, [pc, #284]	; (8001728 <main+0x174>)
 800160a:	f00c ff6f 	bl	800e4ec <puts>
  if (HAL_I2C_Master_Receive(&hi2c3, (uint16_t) BQ27441_I2C_ADDRESS << 1, receiveBuffer, sizeof(receiveBuffer), HAL_MAX_DELAY) != HAL_OK) {
 800160e:	1d3a      	adds	r2, r7, #4
 8001610:	f04f 33ff 	mov.w	r3, #4294967295
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	2301      	movs	r3, #1
 8001618:	21aa      	movs	r1, #170	; 0xaa
 800161a:	4844      	ldr	r0, [pc, #272]	; (800172c <main+0x178>)
 800161c:	f001 fb80 	bl	8002d20 <HAL_I2C_Master_Receive>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d02a      	beq.n	800167c <main+0xc8>
	ILI9341_WriteString(65, 100, "Battery missing", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 8001626:	4b42      	ldr	r3, [pc, #264]	; (8001730 <main+0x17c>)
 8001628:	2200      	movs	r2, #0
 800162a:	9202      	str	r2, [sp, #8]
 800162c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001630:	9201      	str	r2, [sp, #4]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	9200      	str	r2, [sp, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a3e      	ldr	r2, [pc, #248]	; (8001734 <main+0x180>)
 800163a:	2164      	movs	r1, #100	; 0x64
 800163c:	2041      	movs	r0, #65	; 0x41
 800163e:	f7ff fa31 	bl	8000aa4 <ILI9341_WriteString>
	ILI9341_WriteString(100, 130, "or damaged", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 8001642:	4b3b      	ldr	r3, [pc, #236]	; (8001730 <main+0x17c>)
 8001644:	2200      	movs	r2, #0
 8001646:	9202      	str	r2, [sp, #8]
 8001648:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800164c:	9201      	str	r2, [sp, #4]
 800164e:	685a      	ldr	r2, [r3, #4]
 8001650:	9200      	str	r2, [sp, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a38      	ldr	r2, [pc, #224]	; (8001738 <main+0x184>)
 8001656:	2182      	movs	r1, #130	; 0x82
 8001658:	2064      	movs	r0, #100	; 0x64
 800165a:	f7ff fa23 	bl	8000aa4 <ILI9341_WriteString>
	while (1) {
	  if (HAL_I2C_Master_Receive(&hi2c3, (uint16_t) BQ27441_I2C_ADDRESS << 1, receiveBuffer, sizeof(receiveBuffer), HAL_MAX_DELAY) == HAL_OK) {
 800165e:	1d3a      	adds	r2, r7, #4
 8001660:	f04f 33ff 	mov.w	r3, #4294967295
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	2301      	movs	r3, #1
 8001668:	21aa      	movs	r1, #170	; 0xaa
 800166a:	4830      	ldr	r0, [pc, #192]	; (800172c <main+0x178>)
 800166c:	f001 fb58 	bl	8002d20 <HAL_I2C_Master_Receive>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1f3      	bne.n	800165e <main+0xaa>
		printf("Device found\r\n");
 8001676:	4831      	ldr	r0, [pc, #196]	; (800173c <main+0x188>)
 8001678:	f00c ff38 	bl	800e4ec <puts>
	    break;
      }
  	}
  }
  ILI9341_FillScreen(ILI9341_BLACK);
 800167c:	2000      	movs	r0, #0
 800167e:	f7ff facd 	bl	8000c1c <ILI9341_FillScreen>

  // Initialize Battery monitor
    Bat_init(&BQ27441);
 8001682:	482f      	ldr	r0, [pc, #188]	; (8001740 <main+0x18c>)
 8001684:	f7ff fd4c 	bl	8001120 <Bat_init>

    // Let SD card settle
    HAL_Delay(1000);
 8001688:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800168c:	f000 fee6 	bl	800245c <HAL_Delay>
//  	  }
//    }
//    ILI9341_FillScreen(ILI9341_BLACK);

    // Mount SD Card
    fres = f_mount(&fs, "", 1);
 8001690:	2201      	movs	r2, #1
 8001692:	492c      	ldr	r1, [pc, #176]	; (8001744 <main+0x190>)
 8001694:	482c      	ldr	r0, [pc, #176]	; (8001748 <main+0x194>)
 8001696:	f00b fbf3 	bl	800ce80 <f_mount>
 800169a:	4603      	mov	r3, r0
 800169c:	461a      	mov	r2, r3
 800169e:	4b2b      	ldr	r3, [pc, #172]	; (800174c <main+0x198>)
 80016a0:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK) {
 80016a2:	4b2a      	ldr	r3, [pc, #168]	; (800174c <main+0x198>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d030      	beq.n	800170c <main+0x158>
  	printf("f_mount error (%i)\r\n", fres);
 80016aa:	4b28      	ldr	r3, [pc, #160]	; (800174c <main+0x198>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	4619      	mov	r1, r3
 80016b0:	4827      	ldr	r0, [pc, #156]	; (8001750 <main+0x19c>)
 80016b2:	f00c fe95 	bl	800e3e0 <iprintf>
  	ILI9341_WriteString(90, 110, "SD card", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 80016b6:	4b1e      	ldr	r3, [pc, #120]	; (8001730 <main+0x17c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	9202      	str	r2, [sp, #8]
 80016bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016c0:	9201      	str	r2, [sp, #4]
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	9200      	str	r2, [sp, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a22      	ldr	r2, [pc, #136]	; (8001754 <main+0x1a0>)
 80016ca:	216e      	movs	r1, #110	; 0x6e
 80016cc:	205a      	movs	r0, #90	; 0x5a
 80016ce:	f7ff f9e9 	bl	8000aa4 <ILI9341_WriteString>
  	ILI9341_WriteString(75, 130, "mounting error", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 80016d2:	4b17      	ldr	r3, [pc, #92]	; (8001730 <main+0x17c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	9202      	str	r2, [sp, #8]
 80016d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016dc:	9201      	str	r2, [sp, #4]
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	9200      	str	r2, [sp, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a1c      	ldr	r2, [pc, #112]	; (8001758 <main+0x1a4>)
 80016e6:	2182      	movs	r1, #130	; 0x82
 80016e8:	204b      	movs	r0, #75	; 0x4b
 80016ea:	f7ff f9db 	bl	8000aa4 <ILI9341_WriteString>
  	while(1) {
  		fres = f_mount(&fs, "", 1);
 80016ee:	2201      	movs	r2, #1
 80016f0:	4914      	ldr	r1, [pc, #80]	; (8001744 <main+0x190>)
 80016f2:	4815      	ldr	r0, [pc, #84]	; (8001748 <main+0x194>)
 80016f4:	f00b fbc4 	bl	800ce80 <f_mount>
 80016f8:	4603      	mov	r3, r0
 80016fa:	461a      	mov	r2, r3
 80016fc:	4b13      	ldr	r3, [pc, #76]	; (800174c <main+0x198>)
 80016fe:	701a      	strb	r2, [r3, #0]
  		if (fres == FR_OK) {
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <main+0x198>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d000      	beq.n	800170a <main+0x156>
  		fres = f_mount(&fs, "", 1);
 8001708:	e7f1      	b.n	80016ee <main+0x13a>
  			break;
 800170a:	bf00      	nop
  		}
  	}
    }

    // Startup initialization on LCD
    startup_init();
 800170c:	f7ff fd62 	bl	80011d4 <startup_init>

    // Enable timer interrupts
    HAL_TIM_Base_Start_IT(&htim2);
 8001710:	4812      	ldr	r0, [pc, #72]	; (800175c <main+0x1a8>)
 8001712:	f004 fff3 	bl	80066fc <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim3);
 8001716:	4812      	ldr	r0, [pc, #72]	; (8001760 <main+0x1ac>)
 8001718:	f004 fff0 	bl	80066fc <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800171c:	e7fe      	b.n	800171c <main+0x168>
 800171e:	bf00      	nop
 8001720:	40020000 	.word	0x40020000
 8001724:	40020800 	.word	0x40020800
 8001728:	0800f97c 	.word	0x0800f97c
 800172c:	200001ac 	.word	0x200001ac
 8001730:	20000008 	.word	0x20000008
 8001734:	0800f99c 	.word	0x0800f99c
 8001738:	0800f9ac 	.word	0x0800f9ac
 800173c:	0800f9b8 	.word	0x0800f9b8
 8001740:	20000010 	.word	0x20000010
 8001744:	0800f9c8 	.word	0x0800f9c8
 8001748:	2000040c 	.word	0x2000040c
 800174c:	2000086c 	.word	0x2000086c
 8001750:	0800f9cc 	.word	0x0800f9cc
 8001754:	0800f9e4 	.word	0x0800f9e4
 8001758:	0800f9ec 	.word	0x0800f9ec
 800175c:	200002b0 	.word	0x200002b0
 8001760:	200002f8 	.word	0x200002f8

08001764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b094      	sub	sp, #80	; 0x50
 8001768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800176a:	f107 0320 	add.w	r3, r7, #32
 800176e:	2230      	movs	r2, #48	; 0x30
 8001770:	2100      	movs	r1, #0
 8001772:	4618      	mov	r0, r3
 8001774:	f00c fe2c 	bl	800e3d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001778:	f107 030c 	add.w	r3, r7, #12
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001788:	2300      	movs	r3, #0
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	4b27      	ldr	r3, [pc, #156]	; (800182c <SystemClock_Config+0xc8>)
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	4a26      	ldr	r2, [pc, #152]	; (800182c <SystemClock_Config+0xc8>)
 8001792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001796:	6413      	str	r3, [r2, #64]	; 0x40
 8001798:	4b24      	ldr	r3, [pc, #144]	; (800182c <SystemClock_Config+0xc8>)
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017a4:	2300      	movs	r3, #0
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	4b21      	ldr	r3, [pc, #132]	; (8001830 <SystemClock_Config+0xcc>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a20      	ldr	r2, [pc, #128]	; (8001830 <SystemClock_Config+0xcc>)
 80017ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	4b1e      	ldr	r3, [pc, #120]	; (8001830 <SystemClock_Config+0xcc>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017c0:	2301      	movs	r3, #1
 80017c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80017c4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ca:	2302      	movs	r3, #2
 80017cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017d4:	2304      	movs	r3, #4
 80017d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80017d8:	23c0      	movs	r3, #192	; 0xc0
 80017da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80017dc:	2304      	movs	r3, #4
 80017de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80017e0:	2308      	movs	r3, #8
 80017e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e4:	f107 0320 	add.w	r3, r7, #32
 80017e8:	4618      	mov	r0, r3
 80017ea:	f003 fe6d 	bl	80054c8 <HAL_RCC_OscConfig>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017f4:	f000 faa4 	bl	8001d40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f8:	230f      	movs	r3, #15
 80017fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017fc:	2302      	movs	r3, #2
 80017fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001808:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800180e:	f107 030c 	add.w	r3, r7, #12
 8001812:	2103      	movs	r1, #3
 8001814:	4618      	mov	r0, r3
 8001816:	f004 f8cf 	bl	80059b8 <HAL_RCC_ClockConfig>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001820:	f000 fa8e 	bl	8001d40 <Error_Handler>
  }
}
 8001824:	bf00      	nop
 8001826:	3750      	adds	r7, #80	; 0x50
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40023800 	.word	0x40023800
 8001830:	40007000 	.word	0x40007000

08001834 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001838:	4b12      	ldr	r3, [pc, #72]	; (8001884 <MX_I2C3_Init+0x50>)
 800183a:	4a13      	ldr	r2, [pc, #76]	; (8001888 <MX_I2C3_Init+0x54>)
 800183c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800183e:	4b11      	ldr	r3, [pc, #68]	; (8001884 <MX_I2C3_Init+0x50>)
 8001840:	4a12      	ldr	r2, [pc, #72]	; (800188c <MX_I2C3_Init+0x58>)
 8001842:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001844:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <MX_I2C3_Init+0x50>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800184a:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <MX_I2C3_Init+0x50>)
 800184c:	2200      	movs	r2, #0
 800184e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001850:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <MX_I2C3_Init+0x50>)
 8001852:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001856:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001858:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <MX_I2C3_Init+0x50>)
 800185a:	2200      	movs	r2, #0
 800185c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800185e:	4b09      	ldr	r3, [pc, #36]	; (8001884 <MX_I2C3_Init+0x50>)
 8001860:	2200      	movs	r2, #0
 8001862:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001864:	4b07      	ldr	r3, [pc, #28]	; (8001884 <MX_I2C3_Init+0x50>)
 8001866:	2200      	movs	r2, #0
 8001868:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800186a:	4b06      	ldr	r3, [pc, #24]	; (8001884 <MX_I2C3_Init+0x50>)
 800186c:	2200      	movs	r2, #0
 800186e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001870:	4804      	ldr	r0, [pc, #16]	; (8001884 <MX_I2C3_Init+0x50>)
 8001872:	f001 f911 	bl	8002a98 <HAL_I2C_Init>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800187c:	f000 fa60 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}
 8001884:	200001ac 	.word	0x200001ac
 8001888:	40005c00 	.word	0x40005c00
 800188c:	00061a80 	.word	0x00061a80

08001890 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001894:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <MX_SPI2_Init+0x64>)
 8001896:	4a18      	ldr	r2, [pc, #96]	; (80018f8 <MX_SPI2_Init+0x68>)
 8001898:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800189a:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <MX_SPI2_Init+0x64>)
 800189c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80018a2:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <MX_SPI2_Init+0x64>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <MX_SPI2_Init+0x64>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018ae:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <MX_SPI2_Init+0x64>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018b4:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <MX_SPI2_Init+0x64>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80018ba:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <MX_SPI2_Init+0x64>)
 80018bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018c0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80018c2:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <MX_SPI2_Init+0x64>)
 80018c4:	2230      	movs	r2, #48	; 0x30
 80018c6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018c8:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <MX_SPI2_Init+0x64>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <MX_SPI2_Init+0x64>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018d4:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <MX_SPI2_Init+0x64>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <MX_SPI2_Init+0x64>)
 80018dc:	220a      	movs	r2, #10
 80018de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018e0:	4804      	ldr	r0, [pc, #16]	; (80018f4 <MX_SPI2_Init+0x64>)
 80018e2:	f004 fa89 	bl	8005df8 <HAL_SPI_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80018ec:	f000 fa28 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000200 	.word	0x20000200
 80018f8:	40003800 	.word	0x40003800

080018fc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001900:	4b18      	ldr	r3, [pc, #96]	; (8001964 <MX_SPI3_Init+0x68>)
 8001902:	4a19      	ldr	r2, [pc, #100]	; (8001968 <MX_SPI3_Init+0x6c>)
 8001904:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001906:	4b17      	ldr	r3, [pc, #92]	; (8001964 <MX_SPI3_Init+0x68>)
 8001908:	f44f 7282 	mov.w	r2, #260	; 0x104
 800190c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <MX_SPI3_Init+0x68>)
 8001910:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001914:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001916:	4b13      	ldr	r3, [pc, #76]	; (8001964 <MX_SPI3_Init+0x68>)
 8001918:	2200      	movs	r2, #0
 800191a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <MX_SPI3_Init+0x68>)
 800191e:	2200      	movs	r2, #0
 8001920:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001922:	4b10      	ldr	r3, [pc, #64]	; (8001964 <MX_SPI3_Init+0x68>)
 8001924:	2200      	movs	r2, #0
 8001926:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001928:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <MX_SPI3_Init+0x68>)
 800192a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800192e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <MX_SPI3_Init+0x68>)
 8001932:	2200      	movs	r2, #0
 8001934:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001936:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <MX_SPI3_Init+0x68>)
 8001938:	2200      	movs	r2, #0
 800193a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800193c:	4b09      	ldr	r3, [pc, #36]	; (8001964 <MX_SPI3_Init+0x68>)
 800193e:	2200      	movs	r2, #0
 8001940:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001942:	4b08      	ldr	r3, [pc, #32]	; (8001964 <MX_SPI3_Init+0x68>)
 8001944:	2200      	movs	r2, #0
 8001946:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <MX_SPI3_Init+0x68>)
 800194a:	220a      	movs	r2, #10
 800194c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800194e:	4805      	ldr	r0, [pc, #20]	; (8001964 <MX_SPI3_Init+0x68>)
 8001950:	f004 fa52 	bl	8005df8 <HAL_SPI_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 800195a:	f000 f9f1 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000258 	.word	0x20000258
 8001968:	40003c00 	.word	0x40003c00

0800196c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001972:	f107 0308 	add.w	r3, r7, #8
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001980:	463b      	mov	r3, r7
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001988:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <MX_TIM2_Init+0x94>)
 800198a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800198e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 8001990:	4b1b      	ldr	r3, [pc, #108]	; (8001a00 <MX_TIM2_Init+0x94>)
 8001992:	225f      	movs	r2, #95	; 0x5f
 8001994:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001996:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <MX_TIM2_Init+0x94>)
 8001998:	2200      	movs	r2, #0
 800199a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800199c:	4b18      	ldr	r3, [pc, #96]	; (8001a00 <MX_TIM2_Init+0x94>)
 800199e:	2263      	movs	r2, #99	; 0x63
 80019a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a2:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <MX_TIM2_Init+0x94>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a8:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <MX_TIM2_Init+0x94>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019ae:	4814      	ldr	r0, [pc, #80]	; (8001a00 <MX_TIM2_Init+0x94>)
 80019b0:	f004 fe54 	bl	800665c <HAL_TIM_Base_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80019ba:	f000 f9c1 	bl	8001d40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019c4:	f107 0308 	add.w	r3, r7, #8
 80019c8:	4619      	mov	r1, r3
 80019ca:	480d      	ldr	r0, [pc, #52]	; (8001a00 <MX_TIM2_Init+0x94>)
 80019cc:	f005 f800 	bl	80069d0 <HAL_TIM_ConfigClockSource>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80019d6:	f000 f9b3 	bl	8001d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019da:	2300      	movs	r3, #0
 80019dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019e2:	463b      	mov	r3, r7
 80019e4:	4619      	mov	r1, r3
 80019e6:	4806      	ldr	r0, [pc, #24]	; (8001a00 <MX_TIM2_Init+0x94>)
 80019e8:	f005 f9fc 	bl	8006de4 <HAL_TIMEx_MasterConfigSynchronization>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80019f2:	f000 f9a5 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019f6:	bf00      	nop
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	200002b0 	.word	0x200002b0

08001a04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a0a:	f107 0308 	add.w	r3, r7, #8
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	609a      	str	r2, [r3, #8]
 8001a16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a18:	463b      	mov	r3, r7
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a20:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a22:	4a1e      	ldr	r2, [pc, #120]	; (8001a9c <MX_TIM3_Init+0x98>)
 8001a24:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 800-1;
 8001a26:	4b1c      	ldr	r3, [pc, #112]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a28:	f240 321f 	movw	r2, #799	; 0x31f
 8001a2c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2e:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001a34:	4b18      	ldr	r3, [pc, #96]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a36:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a3a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a3c:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a42:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a48:	4813      	ldr	r0, [pc, #76]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a4a:	f004 fe07 	bl	800665c <HAL_TIM_Base_Init>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001a54:	f000 f974 	bl	8001d40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a5e:	f107 0308 	add.w	r3, r7, #8
 8001a62:	4619      	mov	r1, r3
 8001a64:	480c      	ldr	r0, [pc, #48]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a66:	f004 ffb3 	bl	80069d0 <HAL_TIM_ConfigClockSource>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001a70:	f000 f966 	bl	8001d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a74:	2300      	movs	r3, #0
 8001a76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a7c:	463b      	mov	r3, r7
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4805      	ldr	r0, [pc, #20]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a82:	f005 f9af 	bl	8006de4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001a8c:	f000 f958 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a90:	bf00      	nop
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	200002f8 	.word	0x200002f8
 8001a9c:	40000400 	.word	0x40000400

08001aa0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <MX_USART1_UART_Init+0x4c>)
 8001aa6:	4a12      	ldr	r2, [pc, #72]	; (8001af0 <MX_USART1_UART_Init+0x50>)
 8001aa8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <MX_USART1_UART_Init+0x4c>)
 8001aac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ab0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <MX_USART1_UART_Init+0x4c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <MX_USART1_UART_Init+0x4c>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001abe:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <MX_USART1_UART_Init+0x4c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ac4:	4b09      	ldr	r3, [pc, #36]	; (8001aec <MX_USART1_UART_Init+0x4c>)
 8001ac6:	220c      	movs	r2, #12
 8001ac8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aca:	4b08      	ldr	r3, [pc, #32]	; (8001aec <MX_USART1_UART_Init+0x4c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <MX_USART1_UART_Init+0x4c>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ad6:	4805      	ldr	r0, [pc, #20]	; (8001aec <MX_USART1_UART_Init+0x4c>)
 8001ad8:	f005 fa06 	bl	8006ee8 <HAL_UART_Init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ae2:	f000 f92d 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20000340 	.word	0x20000340
 8001af0:	40011000 	.word	0x40011000

08001af4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001af8:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001afa:	4a12      	ldr	r2, [pc, #72]	; (8001b44 <MX_USART2_UART_Init+0x50>)
 8001afc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b1a:	220c      	movs	r2, #12
 8001b1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b2a:	4805      	ldr	r0, [pc, #20]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b2c:	f005 f9dc 	bl	8006ee8 <HAL_UART_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b36:	f000 f903 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000384 	.word	0x20000384
 8001b44:	40004400 	.word	0x40004400

08001b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	; 0x28
 8001b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4e:	f107 0314 	add.w	r3, r7, #20
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	609a      	str	r2, [r3, #8]
 8001b5a:	60da      	str	r2, [r3, #12]
 8001b5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	4b72      	ldr	r3, [pc, #456]	; (8001d2c <MX_GPIO_Init+0x1e4>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	4a71      	ldr	r2, [pc, #452]	; (8001d2c <MX_GPIO_Init+0x1e4>)
 8001b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6e:	4b6f      	ldr	r3, [pc, #444]	; (8001d2c <MX_GPIO_Init+0x1e4>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	4b6b      	ldr	r3, [pc, #428]	; (8001d2c <MX_GPIO_Init+0x1e4>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	4a6a      	ldr	r2, [pc, #424]	; (8001d2c <MX_GPIO_Init+0x1e4>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8a:	4b68      	ldr	r3, [pc, #416]	; (8001d2c <MX_GPIO_Init+0x1e4>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	4b64      	ldr	r3, [pc, #400]	; (8001d2c <MX_GPIO_Init+0x1e4>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	4a63      	ldr	r2, [pc, #396]	; (8001d2c <MX_GPIO_Init+0x1e4>)
 8001ba0:	f043 0304 	orr.w	r3, r3, #4
 8001ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba6:	4b61      	ldr	r3, [pc, #388]	; (8001d2c <MX_GPIO_Init+0x1e4>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	f003 0304 	and.w	r3, r3, #4
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	607b      	str	r3, [r7, #4]
 8001bb6:	4b5d      	ldr	r3, [pc, #372]	; (8001d2c <MX_GPIO_Init+0x1e4>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	4a5c      	ldr	r2, [pc, #368]	; (8001d2c <MX_GPIO_Init+0x1e4>)
 8001bbc:	f043 0302 	orr.w	r3, r3, #2
 8001bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc2:	4b5a      	ldr	r3, [pc, #360]	; (8001d2c <MX_GPIO_Init+0x1e4>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	607b      	str	r3, [r7, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	603b      	str	r3, [r7, #0]
 8001bd2:	4b56      	ldr	r3, [pc, #344]	; (8001d2c <MX_GPIO_Init+0x1e4>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	4a55      	ldr	r2, [pc, #340]	; (8001d2c <MX_GPIO_Init+0x1e4>)
 8001bd8:	f043 0308 	orr.w	r3, r3, #8
 8001bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bde:	4b53      	ldr	r3, [pc, #332]	; (8001d2c <MX_GPIO_Init+0x1e4>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	603b      	str	r3, [r7, #0]
 8001be8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Debug_LED_Pin|BT_EN_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8001bea:	2200      	movs	r2, #0
 8001bec:	f248 0142 	movw	r1, #32834	; 0x8042
 8001bf0:	484f      	ldr	r0, [pc, #316]	; (8001d30 <MX_GPIO_Init+0x1e8>)
 8001bf2:	f000 ff1f 	bl	8002a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Col0_Pin|Col1_Pin|Col2_Pin|SD_CS_Pin
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f241 010f 	movw	r1, #4111	; 0x100f
 8001bfc:	484d      	ldr	r0, [pc, #308]	; (8001d34 <MX_GPIO_Init+0x1ec>)
 8001bfe:	f000 ff19 	bl	8002a34 <HAL_GPIO_WritePin>
                          |Col3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BAT_CE_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8001c02:	2200      	movs	r2, #0
 8001c04:	f44f 6108 	mov.w	r1, #2176	; 0x880
 8001c08:	484b      	ldr	r0, [pc, #300]	; (8001d38 <MX_GPIO_Init+0x1f0>)
 8001c0a:	f000 ff13 	bl	8002a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_Reset_GPIO_Port, LCD_Reset_Pin, GPIO_PIN_RESET);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2104      	movs	r1, #4
 8001c12:	484a      	ldr	r0, [pc, #296]	; (8001d3c <MX_GPIO_Init+0x1f4>)
 8001c14:	f000 ff0e 	bl	8002a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Debug_LED_Pin BT_EN_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = Debug_LED_Pin|BT_EN_Pin|LCD_CS_Pin;
 8001c18:	f248 0342 	movw	r3, #32834	; 0x8042
 8001c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c26:	2300      	movs	r3, #0
 8001c28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2a:	f107 0314 	add.w	r3, r7, #20
 8001c2e:	4619      	mov	r1, r3
 8001c30:	483f      	ldr	r0, [pc, #252]	; (8001d30 <MX_GPIO_Init+0x1e8>)
 8001c32:	f000 fd63 	bl	80026fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_Detect_Pin */
  GPIO_InitStruct.Pin = USB_Detect_Pin;
 8001c36:	2320      	movs	r3, #32
 8001c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001c3a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001c3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_Detect_GPIO_Port, &GPIO_InitStruct);
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	4619      	mov	r1, r3
 8001c4a:	483b      	ldr	r0, [pc, #236]	; (8001d38 <MX_GPIO_Init+0x1f0>)
 8001c4c:	f000 fd56 	bl	80026fc <HAL_GPIO_Init>

  /*Configure GPIO pins : Col0_Pin Col1_Pin Col2_Pin Col3_Pin */
  GPIO_InitStruct.Pin = Col0_Pin|Col1_Pin|Col2_Pin|Col3_Pin;
 8001c50:	230f      	movs	r3, #15
 8001c52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c54:	2301      	movs	r3, #1
 8001c56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	4619      	mov	r1, r3
 8001c66:	4833      	ldr	r0, [pc, #204]	; (8001d34 <MX_GPIO_Init+0x1ec>)
 8001c68:	f000 fd48 	bl	80026fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8001c6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c76:	2301      	movs	r3, #1
 8001c78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001c7a:	f107 0314 	add.w	r3, r7, #20
 8001c7e:	4619      	mov	r1, r3
 8001c80:	482c      	ldr	r0, [pc, #176]	; (8001d34 <MX_GPIO_Init+0x1ec>)
 8001c82:	f000 fd3b 	bl	80026fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001c86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c90:	2301      	movs	r3, #1
 8001c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c94:	2300      	movs	r3, #0
 8001c96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001c98:	f107 0314 	add.w	r3, r7, #20
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4825      	ldr	r0, [pc, #148]	; (8001d34 <MX_GPIO_Init+0x1ec>)
 8001ca0:	f000 fd2c 	bl	80026fc <HAL_GPIO_Init>

  /*Configure GPIO pins : BAT_CE_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = BAT_CE_Pin|LCD_DC_Pin;
 8001ca4:	f44f 6308 	mov.w	r3, #2176	; 0x880
 8001ca8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001caa:	2301      	movs	r3, #1
 8001cac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb6:	f107 0314 	add.w	r3, r7, #20
 8001cba:	4619      	mov	r1, r3
 8001cbc:	481e      	ldr	r0, [pc, #120]	; (8001d38 <MX_GPIO_Init+0x1f0>)
 8001cbe:	f000 fd1d 	bl	80026fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BAT_GPOUT_Pin */
  GPIO_InitStruct.Pin = BAT_GPOUT_Pin;
 8001cc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cc8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BAT_GPOUT_GPIO_Port, &GPIO_InitStruct);
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4817      	ldr	r0, [pc, #92]	; (8001d38 <MX_GPIO_Init+0x1f0>)
 8001cda:	f000 fd0f 	bl	80026fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_Reset_Pin */
  GPIO_InitStruct.Pin = LCD_Reset_Pin;
 8001cde:	2304      	movs	r3, #4
 8001ce0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cea:	2300      	movs	r3, #0
 8001cec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_Reset_GPIO_Port, &GPIO_InitStruct);
 8001cee:	f107 0314 	add.w	r3, r7, #20
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4811      	ldr	r0, [pc, #68]	; (8001d3c <MX_GPIO_Init+0x1f4>)
 8001cf6:	f000 fd01 	bl	80026fc <HAL_GPIO_Init>

  /*Configure GPIO pins : Row0_Pin Row1_Pin Row2_Pin Row3_Pin
                           Button17_Pin Button18_Pin */
  GPIO_InitStruct.Pin = Row0_Pin|Row1_Pin|Row2_Pin|Row3_Pin
 8001cfa:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8001cfe:	617b      	str	r3, [r7, #20]
                          |Button17_Pin|Button18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d04:	2302      	movs	r3, #2
 8001d06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4809      	ldr	r0, [pc, #36]	; (8001d34 <MX_GPIO_Init+0x1ec>)
 8001d10:	f000 fcf4 	bl	80026fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d14:	2200      	movs	r2, #0
 8001d16:	2100      	movs	r1, #0
 8001d18:	2017      	movs	r0, #23
 8001d1a:	f000 fcb4 	bl	8002686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d1e:	2017      	movs	r0, #23
 8001d20:	f000 fccd 	bl	80026be <HAL_NVIC_EnableIRQ>

}
 8001d24:	bf00      	nop
 8001d26:	3728      	adds	r7, #40	; 0x28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40020000 	.word	0x40020000
 8001d34:	40020400 	.word	0x40020400
 8001d38:	40020800 	.word	0x40020800
 8001d3c:	40020c00 	.word	0x40020c00

08001d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d44:	b672      	cpsid	i
}
 8001d46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d48:	e7fe      	b.n	8001d48 <Error_Handler+0x8>
	...

08001d4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	607b      	str	r3, [r7, #4]
 8001d56:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5a:	4a0f      	ldr	r2, [pc, #60]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d60:	6453      	str	r3, [r2, #68]	; 0x44
 8001d62:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d6a:	607b      	str	r3, [r7, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	603b      	str	r3, [r7, #0]
 8001d72:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	4a08      	ldr	r2, [pc, #32]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7e:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800

08001d9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08a      	sub	sp, #40	; 0x28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a29      	ldr	r2, [pc, #164]	; (8001e60 <HAL_I2C_MspInit+0xc4>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d14b      	bne.n	8001e56 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	4b28      	ldr	r3, [pc, #160]	; (8001e64 <HAL_I2C_MspInit+0xc8>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	4a27      	ldr	r2, [pc, #156]	; (8001e64 <HAL_I2C_MspInit+0xc8>)
 8001dc8:	f043 0304 	orr.w	r3, r3, #4
 8001dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dce:	4b25      	ldr	r3, [pc, #148]	; (8001e64 <HAL_I2C_MspInit+0xc8>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	4b21      	ldr	r3, [pc, #132]	; (8001e64 <HAL_I2C_MspInit+0xc8>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	4a20      	ldr	r2, [pc, #128]	; (8001e64 <HAL_I2C_MspInit+0xc8>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dea:	4b1e      	ldr	r3, [pc, #120]	; (8001e64 <HAL_I2C_MspInit+0xc8>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = BAT_SDA_Pin;
 8001df6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dfc:	2312      	movs	r3, #18
 8001dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e04:	2303      	movs	r3, #3
 8001e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e08:	2304      	movs	r3, #4
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BAT_SDA_GPIO_Port, &GPIO_InitStruct);
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	4619      	mov	r1, r3
 8001e12:	4815      	ldr	r0, [pc, #84]	; (8001e68 <HAL_I2C_MspInit+0xcc>)
 8001e14:	f000 fc72 	bl	80026fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BAT_SCL_Pin;
 8001e18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e1e:	2312      	movs	r3, #18
 8001e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e26:	2303      	movs	r3, #3
 8001e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e2a:	2304      	movs	r3, #4
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BAT_SCL_GPIO_Port, &GPIO_InitStruct);
 8001e2e:	f107 0314 	add.w	r3, r7, #20
 8001e32:	4619      	mov	r1, r3
 8001e34:	480d      	ldr	r0, [pc, #52]	; (8001e6c <HAL_I2C_MspInit+0xd0>)
 8001e36:	f000 fc61 	bl	80026fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <HAL_I2C_MspInit+0xc8>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	4a08      	ldr	r2, [pc, #32]	; (8001e64 <HAL_I2C_MspInit+0xc8>)
 8001e44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e48:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4a:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <HAL_I2C_MspInit+0xc8>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001e56:	bf00      	nop
 8001e58:	3728      	adds	r7, #40	; 0x28
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40005c00 	.word	0x40005c00
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40020800 	.word	0x40020800
 8001e6c:	40020000 	.word	0x40020000

08001e70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08c      	sub	sp, #48	; 0x30
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e78:	f107 031c 	add.w	r3, r7, #28
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
 8001e86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a3b      	ldr	r2, [pc, #236]	; (8001f7c <HAL_SPI_MspInit+0x10c>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d13e      	bne.n	8001f10 <HAL_SPI_MspInit+0xa0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	61bb      	str	r3, [r7, #24]
 8001e96:	4b3a      	ldr	r3, [pc, #232]	; (8001f80 <HAL_SPI_MspInit+0x110>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	4a39      	ldr	r2, [pc, #228]	; (8001f80 <HAL_SPI_MspInit+0x110>)
 8001e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea2:	4b37      	ldr	r3, [pc, #220]	; (8001f80 <HAL_SPI_MspInit+0x110>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eaa:	61bb      	str	r3, [r7, #24]
 8001eac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	4b33      	ldr	r3, [pc, #204]	; (8001f80 <HAL_SPI_MspInit+0x110>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	4a32      	ldr	r2, [pc, #200]	; (8001f80 <HAL_SPI_MspInit+0x110>)
 8001eb8:	f043 0302 	orr.w	r3, r3, #2
 8001ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ebe:	4b30      	ldr	r3, [pc, #192]	; (8001f80 <HAL_SPI_MspInit+0x110>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	617b      	str	r3, [r7, #20]
 8001ec8:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin;
 8001eca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001edc:	2305      	movs	r3, #5
 8001ede:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SD_SCK_GPIO_Port, &GPIO_InitStruct);
 8001ee0:	f107 031c 	add.w	r3, r7, #28
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4827      	ldr	r0, [pc, #156]	; (8001f84 <HAL_SPI_MspInit+0x114>)
 8001ee8:	f000 fc08 	bl	80026fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_MISO_Pin|SD_MOSI_Pin;
 8001eec:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efa:	2303      	movs	r3, #3
 8001efc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001efe:	2305      	movs	r3, #5
 8001f00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f02:	f107 031c 	add.w	r3, r7, #28
 8001f06:	4619      	mov	r1, r3
 8001f08:	481e      	ldr	r0, [pc, #120]	; (8001f84 <HAL_SPI_MspInit+0x114>)
 8001f0a:	f000 fbf7 	bl	80026fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001f0e:	e031      	b.n	8001f74 <HAL_SPI_MspInit+0x104>
  else if(hspi->Instance==SPI3)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a1c      	ldr	r2, [pc, #112]	; (8001f88 <HAL_SPI_MspInit+0x118>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d12c      	bne.n	8001f74 <HAL_SPI_MspInit+0x104>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	613b      	str	r3, [r7, #16]
 8001f1e:	4b18      	ldr	r3, [pc, #96]	; (8001f80 <HAL_SPI_MspInit+0x110>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	4a17      	ldr	r2, [pc, #92]	; (8001f80 <HAL_SPI_MspInit+0x110>)
 8001f24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f28:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2a:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <HAL_SPI_MspInit+0x110>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f32:	613b      	str	r3, [r7, #16]
 8001f34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <HAL_SPI_MspInit+0x110>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	4a10      	ldr	r2, [pc, #64]	; (8001f80 <HAL_SPI_MspInit+0x110>)
 8001f40:	f043 0304 	orr.w	r3, r3, #4
 8001f44:	6313      	str	r3, [r2, #48]	; 0x30
 8001f46:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <HAL_SPI_MspInit+0x110>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 8001f52:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f60:	2303      	movs	r3, #3
 8001f62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f64:	2306      	movs	r3, #6
 8001f66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f68:	f107 031c 	add.w	r3, r7, #28
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4807      	ldr	r0, [pc, #28]	; (8001f8c <HAL_SPI_MspInit+0x11c>)
 8001f70:	f000 fbc4 	bl	80026fc <HAL_GPIO_Init>
}
 8001f74:	bf00      	nop
 8001f76:	3730      	adds	r7, #48	; 0x30
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40003800 	.word	0x40003800
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40020400 	.word	0x40020400
 8001f88:	40003c00 	.word	0x40003c00
 8001f8c:	40020800 	.word	0x40020800

08001f90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fa0:	d116      	bne.n	8001fd0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	4b1a      	ldr	r3, [pc, #104]	; (8002010 <HAL_TIM_Base_MspInit+0x80>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	4a19      	ldr	r2, [pc, #100]	; (8002010 <HAL_TIM_Base_MspInit+0x80>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb2:	4b17      	ldr	r3, [pc, #92]	; (8002010 <HAL_TIM_Base_MspInit+0x80>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	201c      	movs	r0, #28
 8001fc4:	f000 fb5f 	bl	8002686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fc8:	201c      	movs	r0, #28
 8001fca:	f000 fb78 	bl	80026be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001fce:	e01a      	b.n	8002006 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a0f      	ldr	r2, [pc, #60]	; (8002014 <HAL_TIM_Base_MspInit+0x84>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d115      	bne.n	8002006 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <HAL_TIM_Base_MspInit+0x80>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	4a0b      	ldr	r2, [pc, #44]	; (8002010 <HAL_TIM_Base_MspInit+0x80>)
 8001fe4:	f043 0302 	orr.w	r3, r3, #2
 8001fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fea:	4b09      	ldr	r3, [pc, #36]	; (8002010 <HAL_TIM_Base_MspInit+0x80>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	60bb      	str	r3, [r7, #8]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	201d      	movs	r0, #29
 8001ffc:	f000 fb43 	bl	8002686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002000:	201d      	movs	r0, #29
 8002002:	f000 fb5c 	bl	80026be <HAL_NVIC_EnableIRQ>
}
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40023800 	.word	0x40023800
 8002014:	40000400 	.word	0x40000400

08002018 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08c      	sub	sp, #48	; 0x30
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002020:	f107 031c 	add.w	r3, r7, #28
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a32      	ldr	r2, [pc, #200]	; (8002100 <HAL_UART_MspInit+0xe8>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d12d      	bne.n	8002096 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	61bb      	str	r3, [r7, #24]
 800203e:	4b31      	ldr	r3, [pc, #196]	; (8002104 <HAL_UART_MspInit+0xec>)
 8002040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002042:	4a30      	ldr	r2, [pc, #192]	; (8002104 <HAL_UART_MspInit+0xec>)
 8002044:	f043 0310 	orr.w	r3, r3, #16
 8002048:	6453      	str	r3, [r2, #68]	; 0x44
 800204a:	4b2e      	ldr	r3, [pc, #184]	; (8002104 <HAL_UART_MspInit+0xec>)
 800204c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204e:	f003 0310 	and.w	r3, r3, #16
 8002052:	61bb      	str	r3, [r7, #24]
 8002054:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	4b2a      	ldr	r3, [pc, #168]	; (8002104 <HAL_UART_MspInit+0xec>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	4a29      	ldr	r2, [pc, #164]	; (8002104 <HAL_UART_MspInit+0xec>)
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	6313      	str	r3, [r2, #48]	; 0x30
 8002066:	4b27      	ldr	r3, [pc, #156]	; (8002104 <HAL_UART_MspInit+0xec>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
 8002072:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002076:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002078:	2302      	movs	r3, #2
 800207a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002080:	2303      	movs	r3, #3
 8002082:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002084:	2307      	movs	r3, #7
 8002086:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002088:	f107 031c 	add.w	r3, r7, #28
 800208c:	4619      	mov	r1, r3
 800208e:	481e      	ldr	r0, [pc, #120]	; (8002108 <HAL_UART_MspInit+0xf0>)
 8002090:	f000 fb34 	bl	80026fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002094:	e030      	b.n	80020f8 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a1c      	ldr	r2, [pc, #112]	; (800210c <HAL_UART_MspInit+0xf4>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d12b      	bne.n	80020f8 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80020a0:	2300      	movs	r3, #0
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	4b17      	ldr	r3, [pc, #92]	; (8002104 <HAL_UART_MspInit+0xec>)
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	4a16      	ldr	r2, [pc, #88]	; (8002104 <HAL_UART_MspInit+0xec>)
 80020aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ae:	6413      	str	r3, [r2, #64]	; 0x40
 80020b0:	4b14      	ldr	r3, [pc, #80]	; (8002104 <HAL_UART_MspInit+0xec>)
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	4b10      	ldr	r3, [pc, #64]	; (8002104 <HAL_UART_MspInit+0xec>)
 80020c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c4:	4a0f      	ldr	r2, [pc, #60]	; (8002104 <HAL_UART_MspInit+0xec>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6313      	str	r3, [r2, #48]	; 0x30
 80020cc:	4b0d      	ldr	r3, [pc, #52]	; (8002104 <HAL_UART_MspInit+0xec>)
 80020ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BT_TX_Pin|BT_RX_Pin;
 80020d8:	230c      	movs	r3, #12
 80020da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020dc:	2302      	movs	r3, #2
 80020de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e4:	2303      	movs	r3, #3
 80020e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020e8:	2307      	movs	r3, #7
 80020ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ec:	f107 031c 	add.w	r3, r7, #28
 80020f0:	4619      	mov	r1, r3
 80020f2:	4805      	ldr	r0, [pc, #20]	; (8002108 <HAL_UART_MspInit+0xf0>)
 80020f4:	f000 fb02 	bl	80026fc <HAL_GPIO_Init>
}
 80020f8:	bf00      	nop
 80020fa:	3730      	adds	r7, #48	; 0x30
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40011000 	.word	0x40011000
 8002104:	40023800 	.word	0x40023800
 8002108:	40020000 	.word	0x40020000
 800210c:	40004400 	.word	0x40004400

08002110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002114:	e7fe      	b.n	8002114 <NMI_Handler+0x4>

08002116 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002116:	b480      	push	{r7}
 8002118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800211a:	e7fe      	b.n	800211a <HardFault_Handler+0x4>

0800211c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002120:	e7fe      	b.n	8002120 <MemManage_Handler+0x4>

08002122 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002122:	b480      	push	{r7}
 8002124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002126:	e7fe      	b.n	8002126 <BusFault_Handler+0x4>

08002128 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800212c:	e7fe      	b.n	800212c <UsageFault_Handler+0x4>

0800212e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800212e:	b480      	push	{r7}
 8002130:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002132:	bf00      	nop
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800215c:	f000 f95e 	bl	800241c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002160:	bf00      	nop
 8002162:	bd80      	pop	{r7, pc}

08002164 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_Detect_Pin);
 8002168:	2020      	movs	r0, #32
 800216a:	f000 fc7d 	bl	8002a68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BAT_GPOUT_Pin);
 800216e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002172:	f000 fc79 	bl	8002a68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
	...

0800217c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002180:	4802      	ldr	r0, [pc, #8]	; (800218c <TIM2_IRQHandler+0x10>)
 8002182:	f004 fb1d 	bl	80067c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	200002b0 	.word	0x200002b0

08002190 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002194:	4802      	ldr	r0, [pc, #8]	; (80021a0 <TIM3_IRQHandler+0x10>)
 8002196:	f004 fb13 	bl	80067c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	200002f8 	.word	0x200002f8

080021a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80021a8:	4802      	ldr	r0, [pc, #8]	; (80021b4 <OTG_FS_IRQHandler+0x10>)
 80021aa:	f002 f878 	bl	800429e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000db4 	.word	0x20000db4

080021b8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	e00a      	b.n	80021e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021ca:	f3af 8000 	nop.w
 80021ce:	4601      	mov	r1, r0
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	60ba      	str	r2, [r7, #8]
 80021d6:	b2ca      	uxtb	r2, r1
 80021d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	3301      	adds	r3, #1
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	dbf0      	blt.n	80021ca <_read+0x12>
  }

  return len;
 80021e8:	687b      	ldr	r3, [r7, #4]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b086      	sub	sp, #24
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	60f8      	str	r0, [r7, #12]
 80021fa:	60b9      	str	r1, [r7, #8]
 80021fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	e009      	b.n	8002218 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	1c5a      	adds	r2, r3, #1
 8002208:	60ba      	str	r2, [r7, #8]
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f7fe fd17 	bl	8000c40 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	3301      	adds	r3, #1
 8002216:	617b      	str	r3, [r7, #20]
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	429a      	cmp	r2, r3
 800221e:	dbf1      	blt.n	8002204 <_write+0x12>
  }
  return len;
 8002220:	687b      	ldr	r3, [r7, #4]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <_close>:

int _close(int file)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002232:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002236:	4618      	mov	r0, r3
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
 800224a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002252:	605a      	str	r2, [r3, #4]
  return 0;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <_isatty>:

int _isatty(int file)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800226a:	2301      	movs	r3, #1
}
 800226c:	4618      	mov	r0, r3
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
	...

08002294 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800229c:	4a14      	ldr	r2, [pc, #80]	; (80022f0 <_sbrk+0x5c>)
 800229e:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <_sbrk+0x60>)
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022a8:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <_sbrk+0x64>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d102      	bne.n	80022b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022b0:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <_sbrk+0x64>)
 80022b2:	4a12      	ldr	r2, [pc, #72]	; (80022fc <_sbrk+0x68>)
 80022b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <_sbrk+0x64>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4413      	add	r3, r2
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d207      	bcs.n	80022d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022c4:	f00c f85a 	bl	800e37c <__errno>
 80022c8:	4603      	mov	r3, r0
 80022ca:	220c      	movs	r2, #12
 80022cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022ce:	f04f 33ff 	mov.w	r3, #4294967295
 80022d2:	e009      	b.n	80022e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022d4:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <_sbrk+0x64>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022da:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <_sbrk+0x64>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4413      	add	r3, r2
 80022e2:	4a05      	ldr	r2, [pc, #20]	; (80022f8 <_sbrk+0x64>)
 80022e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022e6:	68fb      	ldr	r3, [r7, #12]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20020000 	.word	0x20020000
 80022f4:	00000400 	.word	0x00000400
 80022f8:	20000884 	.word	0x20000884
 80022fc:	200012e8 	.word	0x200012e8

08002300 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <SystemInit+0x20>)
 8002306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230a:	4a05      	ldr	r2, [pc, #20]	; (8002320 <SystemInit+0x20>)
 800230c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002310:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002324:	f8df d034 	ldr.w	sp, [pc, #52]	; 800235c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002328:	480d      	ldr	r0, [pc, #52]	; (8002360 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800232a:	490e      	ldr	r1, [pc, #56]	; (8002364 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800232c:	4a0e      	ldr	r2, [pc, #56]	; (8002368 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800232e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002330:	e002      	b.n	8002338 <LoopCopyDataInit>

08002332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002336:	3304      	adds	r3, #4

08002338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800233a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800233c:	d3f9      	bcc.n	8002332 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800233e:	4a0b      	ldr	r2, [pc, #44]	; (800236c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002340:	4c0b      	ldr	r4, [pc, #44]	; (8002370 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002344:	e001      	b.n	800234a <LoopFillZerobss>

08002346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002348:	3204      	adds	r2, #4

0800234a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800234a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800234c:	d3fb      	bcc.n	8002346 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800234e:	f7ff ffd7 	bl	8002300 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002352:	f00c f819 	bl	800e388 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002356:	f7ff f92d 	bl	80015b4 <main>
  bx  lr    
 800235a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800235c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002364:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8002368:	0801166c 	.word	0x0801166c
  ldr r2, =_sbss
 800236c:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8002370:	200012e4 	.word	0x200012e4

08002374 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002374:	e7fe      	b.n	8002374 <ADC_IRQHandler>
	...

08002378 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800237c:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <HAL_Init+0x40>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a0d      	ldr	r2, [pc, #52]	; (80023b8 <HAL_Init+0x40>)
 8002382:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002386:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002388:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <HAL_Init+0x40>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a0a      	ldr	r2, [pc, #40]	; (80023b8 <HAL_Init+0x40>)
 800238e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002392:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002394:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <HAL_Init+0x40>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a07      	ldr	r2, [pc, #28]	; (80023b8 <HAL_Init+0x40>)
 800239a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800239e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023a0:	2003      	movs	r0, #3
 80023a2:	f000 f965 	bl	8002670 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023a6:	200f      	movs	r0, #15
 80023a8:	f000 f808 	bl	80023bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023ac:	f7ff fcce 	bl	8001d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40023c00 	.word	0x40023c00

080023bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023c4:	4b12      	ldr	r3, [pc, #72]	; (8002410 <HAL_InitTick+0x54>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4b12      	ldr	r3, [pc, #72]	; (8002414 <HAL_InitTick+0x58>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	4619      	mov	r1, r3
 80023ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 f981 	bl	80026e2 <HAL_SYSTICK_Config>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e00e      	b.n	8002408 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b0f      	cmp	r3, #15
 80023ee:	d80a      	bhi.n	8002406 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023f0:	2200      	movs	r2, #0
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	f04f 30ff 	mov.w	r0, #4294967295
 80023f8:	f000 f945 	bl	8002686 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023fc:	4a06      	ldr	r2, [pc, #24]	; (8002418 <HAL_InitTick+0x5c>)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002402:	2300      	movs	r3, #0
 8002404:	e000      	b.n	8002408 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
}
 8002408:	4618      	mov	r0, r3
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20000020 	.word	0x20000020
 8002414:	20000028 	.word	0x20000028
 8002418:	20000024 	.word	0x20000024

0800241c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002420:	4b06      	ldr	r3, [pc, #24]	; (800243c <HAL_IncTick+0x20>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	461a      	mov	r2, r3
 8002426:	4b06      	ldr	r3, [pc, #24]	; (8002440 <HAL_IncTick+0x24>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4413      	add	r3, r2
 800242c:	4a04      	ldr	r2, [pc, #16]	; (8002440 <HAL_IncTick+0x24>)
 800242e:	6013      	str	r3, [r2, #0]
}
 8002430:	bf00      	nop
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	20000028 	.word	0x20000028
 8002440:	20000888 	.word	0x20000888

08002444 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return uwTick;
 8002448:	4b03      	ldr	r3, [pc, #12]	; (8002458 <HAL_GetTick+0x14>)
 800244a:	681b      	ldr	r3, [r3, #0]
}
 800244c:	4618      	mov	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	20000888 	.word	0x20000888

0800245c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002464:	f7ff ffee 	bl	8002444 <HAL_GetTick>
 8002468:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002474:	d005      	beq.n	8002482 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002476:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <HAL_Delay+0x44>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4413      	add	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002482:	bf00      	nop
 8002484:	f7ff ffde 	bl	8002444 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	429a      	cmp	r2, r3
 8002492:	d8f7      	bhi.n	8002484 <HAL_Delay+0x28>
  {
  }
}
 8002494:	bf00      	nop
 8002496:	bf00      	nop
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000028 	.word	0x20000028

080024a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024b4:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <__NVIC_SetPriorityGrouping+0x44>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024c0:	4013      	ands	r3, r2
 80024c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024d6:	4a04      	ldr	r2, [pc, #16]	; (80024e8 <__NVIC_SetPriorityGrouping+0x44>)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	60d3      	str	r3, [r2, #12]
}
 80024dc:	bf00      	nop
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024f0:	4b04      	ldr	r3, [pc, #16]	; (8002504 <__NVIC_GetPriorityGrouping+0x18>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	0a1b      	lsrs	r3, r3, #8
 80024f6:	f003 0307 	and.w	r3, r3, #7
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	e000ed00 	.word	0xe000ed00

08002508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	2b00      	cmp	r3, #0
 8002518:	db0b      	blt.n	8002532 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800251a:	79fb      	ldrb	r3, [r7, #7]
 800251c:	f003 021f 	and.w	r2, r3, #31
 8002520:	4907      	ldr	r1, [pc, #28]	; (8002540 <__NVIC_EnableIRQ+0x38>)
 8002522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002526:	095b      	lsrs	r3, r3, #5
 8002528:	2001      	movs	r0, #1
 800252a:	fa00 f202 	lsl.w	r2, r0, r2
 800252e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	e000e100 	.word	0xe000e100

08002544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	6039      	str	r1, [r7, #0]
 800254e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002554:	2b00      	cmp	r3, #0
 8002556:	db0a      	blt.n	800256e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	b2da      	uxtb	r2, r3
 800255c:	490c      	ldr	r1, [pc, #48]	; (8002590 <__NVIC_SetPriority+0x4c>)
 800255e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002562:	0112      	lsls	r2, r2, #4
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	440b      	add	r3, r1
 8002568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800256c:	e00a      	b.n	8002584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	b2da      	uxtb	r2, r3
 8002572:	4908      	ldr	r1, [pc, #32]	; (8002594 <__NVIC_SetPriority+0x50>)
 8002574:	79fb      	ldrb	r3, [r7, #7]
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	3b04      	subs	r3, #4
 800257c:	0112      	lsls	r2, r2, #4
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	440b      	add	r3, r1
 8002582:	761a      	strb	r2, [r3, #24]
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	e000e100 	.word	0xe000e100
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002598:	b480      	push	{r7}
 800259a:	b089      	sub	sp, #36	; 0x24
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f1c3 0307 	rsb	r3, r3, #7
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	bf28      	it	cs
 80025b6:	2304      	movcs	r3, #4
 80025b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	3304      	adds	r3, #4
 80025be:	2b06      	cmp	r3, #6
 80025c0:	d902      	bls.n	80025c8 <NVIC_EncodePriority+0x30>
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3b03      	subs	r3, #3
 80025c6:	e000      	b.n	80025ca <NVIC_EncodePriority+0x32>
 80025c8:	2300      	movs	r3, #0
 80025ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025cc:	f04f 32ff 	mov.w	r2, #4294967295
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43da      	mvns	r2, r3
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	401a      	ands	r2, r3
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025e0:	f04f 31ff 	mov.w	r1, #4294967295
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ea:	43d9      	mvns	r1, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f0:	4313      	orrs	r3, r2
         );
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3724      	adds	r7, #36	; 0x24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
	...

08002600 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002604:	f3bf 8f4f 	dsb	sy
}
 8002608:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800260a:	4b06      	ldr	r3, [pc, #24]	; (8002624 <__NVIC_SystemReset+0x24>)
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002612:	4904      	ldr	r1, [pc, #16]	; (8002624 <__NVIC_SystemReset+0x24>)
 8002614:	4b04      	ldr	r3, [pc, #16]	; (8002628 <__NVIC_SystemReset+0x28>)
 8002616:	4313      	orrs	r3, r2
 8002618:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800261a:	f3bf 8f4f 	dsb	sy
}
 800261e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002620:	bf00      	nop
 8002622:	e7fd      	b.n	8002620 <__NVIC_SystemReset+0x20>
 8002624:	e000ed00 	.word	0xe000ed00
 8002628:	05fa0004 	.word	0x05fa0004

0800262c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3b01      	subs	r3, #1
 8002638:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800263c:	d301      	bcc.n	8002642 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800263e:	2301      	movs	r3, #1
 8002640:	e00f      	b.n	8002662 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002642:	4a0a      	ldr	r2, [pc, #40]	; (800266c <SysTick_Config+0x40>)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3b01      	subs	r3, #1
 8002648:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800264a:	210f      	movs	r1, #15
 800264c:	f04f 30ff 	mov.w	r0, #4294967295
 8002650:	f7ff ff78 	bl	8002544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002654:	4b05      	ldr	r3, [pc, #20]	; (800266c <SysTick_Config+0x40>)
 8002656:	2200      	movs	r2, #0
 8002658:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800265a:	4b04      	ldr	r3, [pc, #16]	; (800266c <SysTick_Config+0x40>)
 800265c:	2207      	movs	r2, #7
 800265e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	e000e010 	.word	0xe000e010

08002670 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7ff ff13 	bl	80024a4 <__NVIC_SetPriorityGrouping>
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002686:	b580      	push	{r7, lr}
 8002688:	b086      	sub	sp, #24
 800268a:	af00      	add	r7, sp, #0
 800268c:	4603      	mov	r3, r0
 800268e:	60b9      	str	r1, [r7, #8]
 8002690:	607a      	str	r2, [r7, #4]
 8002692:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002698:	f7ff ff28 	bl	80024ec <__NVIC_GetPriorityGrouping>
 800269c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	68b9      	ldr	r1, [r7, #8]
 80026a2:	6978      	ldr	r0, [r7, #20]
 80026a4:	f7ff ff78 	bl	8002598 <NVIC_EncodePriority>
 80026a8:	4602      	mov	r2, r0
 80026aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ae:	4611      	mov	r1, r2
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff ff47 	bl	8002544 <__NVIC_SetPriority>
}
 80026b6:	bf00      	nop
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	4603      	mov	r3, r0
 80026c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff ff1b 	bl	8002508 <__NVIC_EnableIRQ>
}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80026de:	f7ff ff8f 	bl	8002600 <__NVIC_SystemReset>

080026e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7ff ff9e 	bl	800262c <SysTick_Config>
 80026f0:	4603      	mov	r3, r0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
	...

080026fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b089      	sub	sp, #36	; 0x24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002706:	2300      	movs	r3, #0
 8002708:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800270a:	2300      	movs	r3, #0
 800270c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800270e:	2300      	movs	r3, #0
 8002710:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002712:	2300      	movs	r3, #0
 8002714:	61fb      	str	r3, [r7, #28]
 8002716:	e159      	b.n	80029cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002718:	2201      	movs	r2, #1
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	4013      	ands	r3, r2
 800272a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	429a      	cmp	r2, r3
 8002732:	f040 8148 	bne.w	80029c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	2b01      	cmp	r3, #1
 8002740:	d005      	beq.n	800274e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800274a:	2b02      	cmp	r3, #2
 800274c:	d130      	bne.n	80027b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	2203      	movs	r2, #3
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	43db      	mvns	r3, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4013      	ands	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4313      	orrs	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002784:	2201      	movs	r2, #1
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43db      	mvns	r3, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4013      	ands	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	091b      	lsrs	r3, r3, #4
 800279a:	f003 0201 	and.w	r2, r3, #1
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 0303 	and.w	r3, r3, #3
 80027b8:	2b03      	cmp	r3, #3
 80027ba:	d017      	beq.n	80027ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	2203      	movs	r2, #3
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 0303 	and.w	r3, r3, #3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d123      	bne.n	8002840 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	08da      	lsrs	r2, r3, #3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3208      	adds	r2, #8
 8002800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002804:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	220f      	movs	r2, #15
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43db      	mvns	r3, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	691a      	ldr	r2, [r3, #16]
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4313      	orrs	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	08da      	lsrs	r2, r3, #3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	3208      	adds	r2, #8
 800283a:	69b9      	ldr	r1, [r7, #24]
 800283c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	2203      	movs	r2, #3
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4013      	ands	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 0203 	and.w	r2, r3, #3
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4313      	orrs	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 80a2 	beq.w	80029c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	4b57      	ldr	r3, [pc, #348]	; (80029e4 <HAL_GPIO_Init+0x2e8>)
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	4a56      	ldr	r2, [pc, #344]	; (80029e4 <HAL_GPIO_Init+0x2e8>)
 800288c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002890:	6453      	str	r3, [r2, #68]	; 0x44
 8002892:	4b54      	ldr	r3, [pc, #336]	; (80029e4 <HAL_GPIO_Init+0x2e8>)
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800289e:	4a52      	ldr	r2, [pc, #328]	; (80029e8 <HAL_GPIO_Init+0x2ec>)
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	089b      	lsrs	r3, r3, #2
 80028a4:	3302      	adds	r3, #2
 80028a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f003 0303 	and.w	r3, r3, #3
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	220f      	movs	r2, #15
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43db      	mvns	r3, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4013      	ands	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a49      	ldr	r2, [pc, #292]	; (80029ec <HAL_GPIO_Init+0x2f0>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d019      	beq.n	80028fe <HAL_GPIO_Init+0x202>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a48      	ldr	r2, [pc, #288]	; (80029f0 <HAL_GPIO_Init+0x2f4>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d013      	beq.n	80028fa <HAL_GPIO_Init+0x1fe>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a47      	ldr	r2, [pc, #284]	; (80029f4 <HAL_GPIO_Init+0x2f8>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d00d      	beq.n	80028f6 <HAL_GPIO_Init+0x1fa>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a46      	ldr	r2, [pc, #280]	; (80029f8 <HAL_GPIO_Init+0x2fc>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d007      	beq.n	80028f2 <HAL_GPIO_Init+0x1f6>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a45      	ldr	r2, [pc, #276]	; (80029fc <HAL_GPIO_Init+0x300>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d101      	bne.n	80028ee <HAL_GPIO_Init+0x1f2>
 80028ea:	2304      	movs	r3, #4
 80028ec:	e008      	b.n	8002900 <HAL_GPIO_Init+0x204>
 80028ee:	2307      	movs	r3, #7
 80028f0:	e006      	b.n	8002900 <HAL_GPIO_Init+0x204>
 80028f2:	2303      	movs	r3, #3
 80028f4:	e004      	b.n	8002900 <HAL_GPIO_Init+0x204>
 80028f6:	2302      	movs	r3, #2
 80028f8:	e002      	b.n	8002900 <HAL_GPIO_Init+0x204>
 80028fa:	2301      	movs	r3, #1
 80028fc:	e000      	b.n	8002900 <HAL_GPIO_Init+0x204>
 80028fe:	2300      	movs	r3, #0
 8002900:	69fa      	ldr	r2, [r7, #28]
 8002902:	f002 0203 	and.w	r2, r2, #3
 8002906:	0092      	lsls	r2, r2, #2
 8002908:	4093      	lsls	r3, r2
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4313      	orrs	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002910:	4935      	ldr	r1, [pc, #212]	; (80029e8 <HAL_GPIO_Init+0x2ec>)
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	089b      	lsrs	r3, r3, #2
 8002916:	3302      	adds	r3, #2
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800291e:	4b38      	ldr	r3, [pc, #224]	; (8002a00 <HAL_GPIO_Init+0x304>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	43db      	mvns	r3, r3
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4013      	ands	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002942:	4a2f      	ldr	r2, [pc, #188]	; (8002a00 <HAL_GPIO_Init+0x304>)
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002948:	4b2d      	ldr	r3, [pc, #180]	; (8002a00 <HAL_GPIO_Init+0x304>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	43db      	mvns	r3, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4013      	ands	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	4313      	orrs	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800296c:	4a24      	ldr	r2, [pc, #144]	; (8002a00 <HAL_GPIO_Init+0x304>)
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002972:	4b23      	ldr	r3, [pc, #140]	; (8002a00 <HAL_GPIO_Init+0x304>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	43db      	mvns	r3, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4013      	ands	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	4313      	orrs	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002996:	4a1a      	ldr	r2, [pc, #104]	; (8002a00 <HAL_GPIO_Init+0x304>)
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800299c:	4b18      	ldr	r3, [pc, #96]	; (8002a00 <HAL_GPIO_Init+0x304>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	43db      	mvns	r3, r3
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4013      	ands	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d003      	beq.n	80029c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	4313      	orrs	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029c0:	4a0f      	ldr	r2, [pc, #60]	; (8002a00 <HAL_GPIO_Init+0x304>)
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	3301      	adds	r3, #1
 80029ca:	61fb      	str	r3, [r7, #28]
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	2b0f      	cmp	r3, #15
 80029d0:	f67f aea2 	bls.w	8002718 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029d4:	bf00      	nop
 80029d6:	bf00      	nop
 80029d8:	3724      	adds	r7, #36	; 0x24
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	40023800 	.word	0x40023800
 80029e8:	40013800 	.word	0x40013800
 80029ec:	40020000 	.word	0x40020000
 80029f0:	40020400 	.word	0x40020400
 80029f4:	40020800 	.word	0x40020800
 80029f8:	40020c00 	.word	0x40020c00
 80029fc:	40021000 	.word	0x40021000
 8002a00:	40013c00 	.word	0x40013c00

08002a04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691a      	ldr	r2, [r3, #16]
 8002a14:	887b      	ldrh	r3, [r7, #2]
 8002a16:	4013      	ands	r3, r2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d002      	beq.n	8002a22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	73fb      	strb	r3, [r7, #15]
 8002a20:	e001      	b.n	8002a26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a22:	2300      	movs	r3, #0
 8002a24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	807b      	strh	r3, [r7, #2]
 8002a40:	4613      	mov	r3, r2
 8002a42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a44:	787b      	ldrb	r3, [r7, #1]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a4a:	887a      	ldrh	r2, [r7, #2]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a50:	e003      	b.n	8002a5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a52:	887b      	ldrh	r3, [r7, #2]
 8002a54:	041a      	lsls	r2, r3, #16
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	619a      	str	r2, [r3, #24]
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
	...

08002a68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a72:	4b08      	ldr	r3, [pc, #32]	; (8002a94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a74:	695a      	ldr	r2, [r3, #20]
 8002a76:	88fb      	ldrh	r3, [r7, #6]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d006      	beq.n	8002a8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a7e:	4a05      	ldr	r2, [pc, #20]	; (8002a94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a80:	88fb      	ldrh	r3, [r7, #6]
 8002a82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a84:	88fb      	ldrh	r3, [r7, #6]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7fe fd7a 	bl	8001580 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a8c:	bf00      	nop
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40013c00 	.word	0x40013c00

08002a98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e12b      	b.n	8002d02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d106      	bne.n	8002ac4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7ff f96c 	bl	8001d9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2224      	movs	r2, #36	; 0x24
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0201 	bic.w	r2, r2, #1
 8002ada:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002afa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002afc:	f003 f954 	bl	8005da8 <HAL_RCC_GetPCLK1Freq>
 8002b00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	4a81      	ldr	r2, [pc, #516]	; (8002d0c <HAL_I2C_Init+0x274>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d807      	bhi.n	8002b1c <HAL_I2C_Init+0x84>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4a80      	ldr	r2, [pc, #512]	; (8002d10 <HAL_I2C_Init+0x278>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	bf94      	ite	ls
 8002b14:	2301      	movls	r3, #1
 8002b16:	2300      	movhi	r3, #0
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	e006      	b.n	8002b2a <HAL_I2C_Init+0x92>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4a7d      	ldr	r2, [pc, #500]	; (8002d14 <HAL_I2C_Init+0x27c>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	bf94      	ite	ls
 8002b24:	2301      	movls	r3, #1
 8002b26:	2300      	movhi	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e0e7      	b.n	8002d02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	4a78      	ldr	r2, [pc, #480]	; (8002d18 <HAL_I2C_Init+0x280>)
 8002b36:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3a:	0c9b      	lsrs	r3, r3, #18
 8002b3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	4a6a      	ldr	r2, [pc, #424]	; (8002d0c <HAL_I2C_Init+0x274>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d802      	bhi.n	8002b6c <HAL_I2C_Init+0xd4>
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	e009      	b.n	8002b80 <HAL_I2C_Init+0xe8>
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b72:	fb02 f303 	mul.w	r3, r2, r3
 8002b76:	4a69      	ldr	r2, [pc, #420]	; (8002d1c <HAL_I2C_Init+0x284>)
 8002b78:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7c:	099b      	lsrs	r3, r3, #6
 8002b7e:	3301      	adds	r3, #1
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6812      	ldr	r2, [r2, #0]
 8002b84:	430b      	orrs	r3, r1
 8002b86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	495c      	ldr	r1, [pc, #368]	; (8002d0c <HAL_I2C_Init+0x274>)
 8002b9c:	428b      	cmp	r3, r1
 8002b9e:	d819      	bhi.n	8002bd4 <HAL_I2C_Init+0x13c>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	1e59      	subs	r1, r3, #1
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bae:	1c59      	adds	r1, r3, #1
 8002bb0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002bb4:	400b      	ands	r3, r1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00a      	beq.n	8002bd0 <HAL_I2C_Init+0x138>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	1e59      	subs	r1, r3, #1
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bc8:	3301      	adds	r3, #1
 8002bca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bce:	e051      	b.n	8002c74 <HAL_I2C_Init+0x1dc>
 8002bd0:	2304      	movs	r3, #4
 8002bd2:	e04f      	b.n	8002c74 <HAL_I2C_Init+0x1dc>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d111      	bne.n	8002c00 <HAL_I2C_Init+0x168>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	1e58      	subs	r0, r3, #1
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6859      	ldr	r1, [r3, #4]
 8002be4:	460b      	mov	r3, r1
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	440b      	add	r3, r1
 8002bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bee:	3301      	adds	r3, #1
 8002bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	bf0c      	ite	eq
 8002bf8:	2301      	moveq	r3, #1
 8002bfa:	2300      	movne	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	e012      	b.n	8002c26 <HAL_I2C_Init+0x18e>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	1e58      	subs	r0, r3, #1
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6859      	ldr	r1, [r3, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	0099      	lsls	r1, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c16:	3301      	adds	r3, #1
 8002c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	bf0c      	ite	eq
 8002c20:	2301      	moveq	r3, #1
 8002c22:	2300      	movne	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_I2C_Init+0x196>
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e022      	b.n	8002c74 <HAL_I2C_Init+0x1dc>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10e      	bne.n	8002c54 <HAL_I2C_Init+0x1bc>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	1e58      	subs	r0, r3, #1
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6859      	ldr	r1, [r3, #4]
 8002c3e:	460b      	mov	r3, r1
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	440b      	add	r3, r1
 8002c44:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c48:	3301      	adds	r3, #1
 8002c4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c52:	e00f      	b.n	8002c74 <HAL_I2C_Init+0x1dc>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	1e58      	subs	r0, r3, #1
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6859      	ldr	r1, [r3, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	0099      	lsls	r1, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	6809      	ldr	r1, [r1, #0]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69da      	ldr	r2, [r3, #28]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ca2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6911      	ldr	r1, [r2, #16]
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	68d2      	ldr	r2, [r2, #12]
 8002cae:	4311      	orrs	r1, r2
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6812      	ldr	r2, [r2, #0]
 8002cb4:	430b      	orrs	r3, r1
 8002cb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695a      	ldr	r2, [r3, #20]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0201 	orr.w	r2, r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2220      	movs	r2, #32
 8002cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	000186a0 	.word	0x000186a0
 8002d10:	001e847f 	.word	0x001e847f
 8002d14:	003d08ff 	.word	0x003d08ff
 8002d18:	431bde83 	.word	0x431bde83
 8002d1c:	10624dd3 	.word	0x10624dd3

08002d20 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08c      	sub	sp, #48	; 0x30
 8002d24:	af02      	add	r7, sp, #8
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	607a      	str	r2, [r7, #4]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	817b      	strh	r3, [r7, #10]
 8002d30:	4613      	mov	r3, r2
 8002d32:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d34:	f7ff fb86 	bl	8002444 <HAL_GetTick>
 8002d38:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b20      	cmp	r3, #32
 8002d44:	f040 820b 	bne.w	800315e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	2319      	movs	r3, #25
 8002d4e:	2201      	movs	r2, #1
 8002d50:	497c      	ldr	r1, [pc, #496]	; (8002f44 <HAL_I2C_Master_Receive+0x224>)
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 ff76 	bl	8003c44 <I2C_WaitOnFlagUntilTimeout>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e1fe      	b.n	8003160 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d101      	bne.n	8002d70 <HAL_I2C_Master_Receive+0x50>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	e1f7      	b.n	8003160 <HAL_I2C_Master_Receive+0x440>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d007      	beq.n	8002d96 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f042 0201 	orr.w	r2, r2, #1
 8002d94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002da4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2222      	movs	r2, #34	; 0x22
 8002daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2210      	movs	r2, #16
 8002db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	893a      	ldrh	r2, [r7, #8]
 8002dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	4a5c      	ldr	r2, [pc, #368]	; (8002f48 <HAL_I2C_Master_Receive+0x228>)
 8002dd6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002dd8:	8979      	ldrh	r1, [r7, #10]
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 fce4 	bl	80037ac <I2C_MasterRequestRead>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e1b8      	b.n	8003160 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d113      	bne.n	8002e1e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002df6:	2300      	movs	r3, #0
 8002df8:	623b      	str	r3, [r7, #32]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	623b      	str	r3, [r7, #32]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	623b      	str	r3, [r7, #32]
 8002e0a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	e18c      	b.n	8003138 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d11b      	bne.n	8002e5e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e36:	2300      	movs	r3, #0
 8002e38:	61fb      	str	r3, [r7, #28]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	61fb      	str	r3, [r7, #28]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	61fb      	str	r3, [r7, #28]
 8002e4a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	e16c      	b.n	8003138 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d11b      	bne.n	8002e9e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e74:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e86:	2300      	movs	r3, #0
 8002e88:	61bb      	str	r3, [r7, #24]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	61bb      	str	r3, [r7, #24]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	61bb      	str	r3, [r7, #24]
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	e14c      	b.n	8003138 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002eac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eae:	2300      	movs	r3, #0
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	617b      	str	r3, [r7, #20]
 8002ec2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ec4:	e138      	b.n	8003138 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eca:	2b03      	cmp	r3, #3
 8002ecc:	f200 80f1 	bhi.w	80030b2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d123      	bne.n	8002f20 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f001 f809 	bl	8003ef4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e139      	b.n	8003160 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	691a      	ldr	r2, [r3, #16]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	1c5a      	adds	r2, r3, #1
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	3b01      	subs	r3, #1
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f1e:	e10b      	b.n	8003138 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d14e      	bne.n	8002fc6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2e:	2200      	movs	r2, #0
 8002f30:	4906      	ldr	r1, [pc, #24]	; (8002f4c <HAL_I2C_Master_Receive+0x22c>)
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 fe86 	bl	8003c44 <I2C_WaitOnFlagUntilTimeout>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d008      	beq.n	8002f50 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e10e      	b.n	8003160 <HAL_I2C_Master_Receive+0x440>
 8002f42:	bf00      	nop
 8002f44:	00100002 	.word	0x00100002
 8002f48:	ffff0000 	.word	0xffff0000
 8002f4c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	691a      	ldr	r2, [r3, #16]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f72:	1c5a      	adds	r2, r3, #1
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fc4:	e0b8      	b.n	8003138 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fcc:	2200      	movs	r2, #0
 8002fce:	4966      	ldr	r1, [pc, #408]	; (8003168 <HAL_I2C_Master_Receive+0x448>)
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 fe37 	bl	8003c44 <I2C_WaitOnFlagUntilTimeout>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e0bf      	b.n	8003160 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	691a      	ldr	r2, [r3, #16]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003002:	1c5a      	adds	r2, r3, #1
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300c:	3b01      	subs	r3, #1
 800300e:	b29a      	uxth	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003018:	b29b      	uxth	r3, r3
 800301a:	3b01      	subs	r3, #1
 800301c:	b29a      	uxth	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003028:	2200      	movs	r2, #0
 800302a:	494f      	ldr	r1, [pc, #316]	; (8003168 <HAL_I2C_Master_Receive+0x448>)
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 fe09 	bl	8003c44 <I2C_WaitOnFlagUntilTimeout>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e091      	b.n	8003160 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800304a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691a      	ldr	r2, [r3, #16]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	1c5a      	adds	r2, r3, #1
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003068:	3b01      	subs	r3, #1
 800306a:	b29a      	uxth	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003074:	b29b      	uxth	r3, r3
 8003076:	3b01      	subs	r3, #1
 8003078:	b29a      	uxth	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309a:	3b01      	subs	r3, #1
 800309c:	b29a      	uxth	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030b0:	e042      	b.n	8003138 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 ff1c 	bl	8003ef4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e04c      	b.n	8003160 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	b2d2      	uxtb	r2, r2
 80030d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	1c5a      	adds	r2, r3, #1
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e2:	3b01      	subs	r3, #1
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	2b04      	cmp	r3, #4
 8003104:	d118      	bne.n	8003138 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	691a      	ldr	r2, [r3, #16]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	b2d2      	uxtb	r2, r2
 8003112:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	1c5a      	adds	r2, r3, #1
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003122:	3b01      	subs	r3, #1
 8003124:	b29a      	uxth	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312e:	b29b      	uxth	r3, r3
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313c:	2b00      	cmp	r3, #0
 800313e:	f47f aec2 	bne.w	8002ec6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2220      	movs	r2, #32
 8003146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	e000      	b.n	8003160 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800315e:	2302      	movs	r3, #2
  }
}
 8003160:	4618      	mov	r0, r3
 8003162:	3728      	adds	r7, #40	; 0x28
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	00010004 	.word	0x00010004

0800316c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b088      	sub	sp, #32
 8003170:	af02      	add	r7, sp, #8
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	4608      	mov	r0, r1
 8003176:	4611      	mov	r1, r2
 8003178:	461a      	mov	r2, r3
 800317a:	4603      	mov	r3, r0
 800317c:	817b      	strh	r3, [r7, #10]
 800317e:	460b      	mov	r3, r1
 8003180:	813b      	strh	r3, [r7, #8]
 8003182:	4613      	mov	r3, r2
 8003184:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003186:	f7ff f95d 	bl	8002444 <HAL_GetTick>
 800318a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b20      	cmp	r3, #32
 8003196:	f040 80d9 	bne.w	800334c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	2319      	movs	r3, #25
 80031a0:	2201      	movs	r2, #1
 80031a2:	496d      	ldr	r1, [pc, #436]	; (8003358 <HAL_I2C_Mem_Write+0x1ec>)
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 fd4d 	bl	8003c44 <I2C_WaitOnFlagUntilTimeout>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80031b0:	2302      	movs	r3, #2
 80031b2:	e0cc      	b.n	800334e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_I2C_Mem_Write+0x56>
 80031be:	2302      	movs	r3, #2
 80031c0:	e0c5      	b.n	800334e <HAL_I2C_Mem_Write+0x1e2>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d007      	beq.n	80031e8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0201 	orr.w	r2, r2, #1
 80031e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2221      	movs	r2, #33	; 0x21
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2240      	movs	r2, #64	; 0x40
 8003204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6a3a      	ldr	r2, [r7, #32]
 8003212:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003218:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321e:	b29a      	uxth	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4a4d      	ldr	r2, [pc, #308]	; (800335c <HAL_I2C_Mem_Write+0x1f0>)
 8003228:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800322a:	88f8      	ldrh	r0, [r7, #6]
 800322c:	893a      	ldrh	r2, [r7, #8]
 800322e:	8979      	ldrh	r1, [r7, #10]
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	9301      	str	r3, [sp, #4]
 8003234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	4603      	mov	r3, r0
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 fb84 	bl	8003948 <I2C_RequestMemoryWrite>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d052      	beq.n	80032ec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e081      	b.n	800334e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 fdce 	bl	8003df0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00d      	beq.n	8003276 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	2b04      	cmp	r3, #4
 8003260:	d107      	bne.n	8003272 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003270:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e06b      	b.n	800334e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	781a      	ldrb	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	1c5a      	adds	r2, r3, #1
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003290:	3b01      	subs	r3, #1
 8003292:	b29a      	uxth	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329c:	b29b      	uxth	r3, r3
 800329e:	3b01      	subs	r3, #1
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d11b      	bne.n	80032ec <HAL_I2C_Mem_Write+0x180>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d017      	beq.n	80032ec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	781a      	ldrb	r2, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	3b01      	subs	r3, #1
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1aa      	bne.n	800324a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 fdba 	bl	8003e72 <I2C_WaitOnBTFFlagUntilTimeout>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00d      	beq.n	8003320 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003308:	2b04      	cmp	r3, #4
 800330a:	d107      	bne.n	800331c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800331a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e016      	b.n	800334e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800332e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2220      	movs	r2, #32
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003348:	2300      	movs	r3, #0
 800334a:	e000      	b.n	800334e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800334c:	2302      	movs	r3, #2
  }
}
 800334e:	4618      	mov	r0, r3
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	00100002 	.word	0x00100002
 800335c:	ffff0000 	.word	0xffff0000

08003360 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b08c      	sub	sp, #48	; 0x30
 8003364:	af02      	add	r7, sp, #8
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	4608      	mov	r0, r1
 800336a:	4611      	mov	r1, r2
 800336c:	461a      	mov	r2, r3
 800336e:	4603      	mov	r3, r0
 8003370:	817b      	strh	r3, [r7, #10]
 8003372:	460b      	mov	r3, r1
 8003374:	813b      	strh	r3, [r7, #8]
 8003376:	4613      	mov	r3, r2
 8003378:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800337a:	f7ff f863 	bl	8002444 <HAL_GetTick>
 800337e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b20      	cmp	r3, #32
 800338a:	f040 8208 	bne.w	800379e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	2319      	movs	r3, #25
 8003394:	2201      	movs	r2, #1
 8003396:	497b      	ldr	r1, [pc, #492]	; (8003584 <HAL_I2C_Mem_Read+0x224>)
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 fc53 	bl	8003c44 <I2C_WaitOnFlagUntilTimeout>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80033a4:	2302      	movs	r3, #2
 80033a6:	e1fb      	b.n	80037a0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d101      	bne.n	80033b6 <HAL_I2C_Mem_Read+0x56>
 80033b2:	2302      	movs	r3, #2
 80033b4:	e1f4      	b.n	80037a0 <HAL_I2C_Mem_Read+0x440>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d007      	beq.n	80033dc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0201 	orr.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2222      	movs	r2, #34	; 0x22
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2240      	movs	r2, #64	; 0x40
 80033f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003406:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800340c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003412:	b29a      	uxth	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4a5b      	ldr	r2, [pc, #364]	; (8003588 <HAL_I2C_Mem_Read+0x228>)
 800341c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800341e:	88f8      	ldrh	r0, [r7, #6]
 8003420:	893a      	ldrh	r2, [r7, #8]
 8003422:	8979      	ldrh	r1, [r7, #10]
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	9301      	str	r3, [sp, #4]
 8003428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	4603      	mov	r3, r0
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 fb20 	bl	8003a74 <I2C_RequestMemoryRead>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e1b0      	b.n	80037a0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003442:	2b00      	cmp	r3, #0
 8003444:	d113      	bne.n	800346e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003446:	2300      	movs	r3, #0
 8003448:	623b      	str	r3, [r7, #32]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	623b      	str	r3, [r7, #32]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	623b      	str	r3, [r7, #32]
 800345a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	e184      	b.n	8003778 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003472:	2b01      	cmp	r3, #1
 8003474:	d11b      	bne.n	80034ae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003484:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003486:	2300      	movs	r3, #0
 8003488:	61fb      	str	r3, [r7, #28]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	61fb      	str	r3, [r7, #28]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	61fb      	str	r3, [r7, #28]
 800349a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	e164      	b.n	8003778 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d11b      	bne.n	80034ee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034d6:	2300      	movs	r3, #0
 80034d8:	61bb      	str	r3, [r7, #24]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	61bb      	str	r3, [r7, #24]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	61bb      	str	r3, [r7, #24]
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	e144      	b.n	8003778 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ee:	2300      	movs	r3, #0
 80034f0:	617b      	str	r3, [r7, #20]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	617b      	str	r3, [r7, #20]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	617b      	str	r3, [r7, #20]
 8003502:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003504:	e138      	b.n	8003778 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800350a:	2b03      	cmp	r3, #3
 800350c:	f200 80f1 	bhi.w	80036f2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003514:	2b01      	cmp	r3, #1
 8003516:	d123      	bne.n	8003560 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800351a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 fce9 	bl	8003ef4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e139      	b.n	80037a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691a      	ldr	r2, [r3, #16]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003548:	3b01      	subs	r3, #1
 800354a:	b29a      	uxth	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003554:	b29b      	uxth	r3, r3
 8003556:	3b01      	subs	r3, #1
 8003558:	b29a      	uxth	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800355e:	e10b      	b.n	8003778 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003564:	2b02      	cmp	r3, #2
 8003566:	d14e      	bne.n	8003606 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800356e:	2200      	movs	r2, #0
 8003570:	4906      	ldr	r1, [pc, #24]	; (800358c <HAL_I2C_Mem_Read+0x22c>)
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 fb66 	bl	8003c44 <I2C_WaitOnFlagUntilTimeout>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d008      	beq.n	8003590 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e10e      	b.n	80037a0 <HAL_I2C_Mem_Read+0x440>
 8003582:	bf00      	nop
 8003584:	00100002 	.word	0x00100002
 8003588:	ffff0000 	.word	0xffff0000
 800358c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800359e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	691a      	ldr	r2, [r3, #16]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035bc:	3b01      	subs	r3, #1
 80035be:	b29a      	uxth	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	3b01      	subs	r3, #1
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	691a      	ldr	r2, [r3, #16]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	b2d2      	uxtb	r2, r2
 80035de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e4:	1c5a      	adds	r2, r3, #1
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ee:	3b01      	subs	r3, #1
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	3b01      	subs	r3, #1
 80035fe:	b29a      	uxth	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003604:	e0b8      	b.n	8003778 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360c:	2200      	movs	r2, #0
 800360e:	4966      	ldr	r1, [pc, #408]	; (80037a8 <HAL_I2C_Mem_Read+0x448>)
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f000 fb17 	bl	8003c44 <I2C_WaitOnFlagUntilTimeout>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e0bf      	b.n	80037a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800362e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691a      	ldr	r2, [r3, #16]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364c:	3b01      	subs	r3, #1
 800364e:	b29a      	uxth	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003658:	b29b      	uxth	r3, r3
 800365a:	3b01      	subs	r3, #1
 800365c:	b29a      	uxth	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003668:	2200      	movs	r2, #0
 800366a:	494f      	ldr	r1, [pc, #316]	; (80037a8 <HAL_I2C_Mem_Read+0x448>)
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f000 fae9 	bl	8003c44 <I2C_WaitOnFlagUntilTimeout>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e091      	b.n	80037a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800368a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	691a      	ldr	r2, [r3, #16]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	1c5a      	adds	r2, r3, #1
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	3b01      	subs	r3, #1
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	691a      	ldr	r2, [r3, #16]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	b2d2      	uxtb	r2, r2
 80036ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	1c5a      	adds	r2, r3, #1
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036da:	3b01      	subs	r3, #1
 80036dc:	b29a      	uxth	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	3b01      	subs	r3, #1
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036f0:	e042      	b.n	8003778 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 fbfc 	bl	8003ef4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e04c      	b.n	80037a0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	691a      	ldr	r2, [r3, #16]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	b2d2      	uxtb	r2, r2
 8003712:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003722:	3b01      	subs	r3, #1
 8003724:	b29a      	uxth	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372e:	b29b      	uxth	r3, r3
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	f003 0304 	and.w	r3, r3, #4
 8003742:	2b04      	cmp	r3, #4
 8003744:	d118      	bne.n	8003778 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	691a      	ldr	r2, [r3, #16]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	b2d2      	uxtb	r2, r2
 8003752:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	1c5a      	adds	r2, r3, #1
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003762:	3b01      	subs	r3, #1
 8003764:	b29a      	uxth	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376e:	b29b      	uxth	r3, r3
 8003770:	3b01      	subs	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800377c:	2b00      	cmp	r3, #0
 800377e:	f47f aec2 	bne.w	8003506 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2220      	movs	r2, #32
 8003786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800379a:	2300      	movs	r3, #0
 800379c:	e000      	b.n	80037a0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800379e:	2302      	movs	r3, #2
  }
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3728      	adds	r7, #40	; 0x28
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	00010004 	.word	0x00010004

080037ac <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b088      	sub	sp, #32
 80037b0:	af02      	add	r7, sp, #8
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	607a      	str	r2, [r7, #4]
 80037b6:	603b      	str	r3, [r7, #0]
 80037b8:	460b      	mov	r3, r1
 80037ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037d0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d006      	beq.n	80037e6 <I2C_MasterRequestRead+0x3a>
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d003      	beq.n	80037e6 <I2C_MasterRequestRead+0x3a>
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037e4:	d108      	bne.n	80037f8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	e00b      	b.n	8003810 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fc:	2b11      	cmp	r3, #17
 80037fe:	d107      	bne.n	8003810 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800380e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 fa11 	bl	8003c44 <I2C_WaitOnFlagUntilTimeout>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00d      	beq.n	8003844 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003832:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003836:	d103      	bne.n	8003840 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800383e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e079      	b.n	8003938 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800384c:	d108      	bne.n	8003860 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800384e:	897b      	ldrh	r3, [r7, #10]
 8003850:	b2db      	uxtb	r3, r3
 8003852:	f043 0301 	orr.w	r3, r3, #1
 8003856:	b2da      	uxtb	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	611a      	str	r2, [r3, #16]
 800385e:	e05f      	b.n	8003920 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003860:	897b      	ldrh	r3, [r7, #10]
 8003862:	11db      	asrs	r3, r3, #7
 8003864:	b2db      	uxtb	r3, r3
 8003866:	f003 0306 	and.w	r3, r3, #6
 800386a:	b2db      	uxtb	r3, r3
 800386c:	f063 030f 	orn	r3, r3, #15
 8003870:	b2da      	uxtb	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	4930      	ldr	r1, [pc, #192]	; (8003940 <I2C_MasterRequestRead+0x194>)
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 fa37 	bl	8003cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e054      	b.n	8003938 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800388e:	897b      	ldrh	r3, [r7, #10]
 8003890:	b2da      	uxtb	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	4929      	ldr	r1, [pc, #164]	; (8003944 <I2C_MasterRequestRead+0x198>)
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 fa27 	bl	8003cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e044      	b.n	8003938 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ae:	2300      	movs	r3, #0
 80038b0:	613b      	str	r3, [r7, #16]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	613b      	str	r3, [r7, #16]
 80038c2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038d2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 f9af 	bl	8003c44 <I2C_WaitOnFlagUntilTimeout>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00d      	beq.n	8003908 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038fa:	d103      	bne.n	8003904 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003902:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e017      	b.n	8003938 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003908:	897b      	ldrh	r3, [r7, #10]
 800390a:	11db      	asrs	r3, r3, #7
 800390c:	b2db      	uxtb	r3, r3
 800390e:	f003 0306 	and.w	r3, r3, #6
 8003912:	b2db      	uxtb	r3, r3
 8003914:	f063 030e 	orn	r3, r3, #14
 8003918:	b2da      	uxtb	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	4907      	ldr	r1, [pc, #28]	; (8003944 <I2C_MasterRequestRead+0x198>)
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 f9e3 	bl	8003cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e000      	b.n	8003938 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3718      	adds	r7, #24
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	00010008 	.word	0x00010008
 8003944:	00010002 	.word	0x00010002

08003948 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b088      	sub	sp, #32
 800394c:	af02      	add	r7, sp, #8
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	4608      	mov	r0, r1
 8003952:	4611      	mov	r1, r2
 8003954:	461a      	mov	r2, r3
 8003956:	4603      	mov	r3, r0
 8003958:	817b      	strh	r3, [r7, #10]
 800395a:	460b      	mov	r3, r1
 800395c:	813b      	strh	r3, [r7, #8]
 800395e:	4613      	mov	r3, r2
 8003960:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003970:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	2200      	movs	r2, #0
 800397a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 f960 	bl	8003c44 <I2C_WaitOnFlagUntilTimeout>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00d      	beq.n	80039a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003998:	d103      	bne.n	80039a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e05f      	b.n	8003a66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039a6:	897b      	ldrh	r3, [r7, #10]
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	461a      	mov	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	6a3a      	ldr	r2, [r7, #32]
 80039ba:	492d      	ldr	r1, [pc, #180]	; (8003a70 <I2C_RequestMemoryWrite+0x128>)
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f000 f998 	bl	8003cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e04c      	b.n	8003a66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039cc:	2300      	movs	r3, #0
 80039ce:	617b      	str	r3, [r7, #20]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	617b      	str	r3, [r7, #20]
 80039e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e4:	6a39      	ldr	r1, [r7, #32]
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 fa02 	bl	8003df0 <I2C_WaitOnTXEFlagUntilTimeout>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00d      	beq.n	8003a0e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	d107      	bne.n	8003a0a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a08:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e02b      	b.n	8003a66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a0e:	88fb      	ldrh	r3, [r7, #6]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d105      	bne.n	8003a20 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a14:	893b      	ldrh	r3, [r7, #8]
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	611a      	str	r2, [r3, #16]
 8003a1e:	e021      	b.n	8003a64 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a20:	893b      	ldrh	r3, [r7, #8]
 8003a22:	0a1b      	lsrs	r3, r3, #8
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a30:	6a39      	ldr	r1, [r7, #32]
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 f9dc 	bl	8003df0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00d      	beq.n	8003a5a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d107      	bne.n	8003a56 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a54:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e005      	b.n	8003a66 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a5a:	893b      	ldrh	r3, [r7, #8]
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3718      	adds	r7, #24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	00010002 	.word	0x00010002

08003a74 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b088      	sub	sp, #32
 8003a78:	af02      	add	r7, sp, #8
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	4608      	mov	r0, r1
 8003a7e:	4611      	mov	r1, r2
 8003a80:	461a      	mov	r2, r3
 8003a82:	4603      	mov	r3, r0
 8003a84:	817b      	strh	r3, [r7, #10]
 8003a86:	460b      	mov	r3, r1
 8003a88:	813b      	strh	r3, [r7, #8]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a9c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003aac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 f8c2 	bl	8003c44 <I2C_WaitOnFlagUntilTimeout>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00d      	beq.n	8003ae2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ad4:	d103      	bne.n	8003ade <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003adc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e0aa      	b.n	8003c38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ae2:	897b      	ldrh	r3, [r7, #10]
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003af0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	6a3a      	ldr	r2, [r7, #32]
 8003af6:	4952      	ldr	r1, [pc, #328]	; (8003c40 <I2C_RequestMemoryRead+0x1cc>)
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 f8fa 	bl	8003cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e097      	b.n	8003c38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b08:	2300      	movs	r3, #0
 8003b0a:	617b      	str	r3, [r7, #20]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	617b      	str	r3, [r7, #20]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	617b      	str	r3, [r7, #20]
 8003b1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b20:	6a39      	ldr	r1, [r7, #32]
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 f964 	bl	8003df0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00d      	beq.n	8003b4a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	2b04      	cmp	r3, #4
 8003b34:	d107      	bne.n	8003b46 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e076      	b.n	8003c38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b4a:	88fb      	ldrh	r3, [r7, #6]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d105      	bne.n	8003b5c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b50:	893b      	ldrh	r3, [r7, #8]
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	611a      	str	r2, [r3, #16]
 8003b5a:	e021      	b.n	8003ba0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b5c:	893b      	ldrh	r3, [r7, #8]
 8003b5e:	0a1b      	lsrs	r3, r3, #8
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b6c:	6a39      	ldr	r1, [r7, #32]
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 f93e 	bl	8003df0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00d      	beq.n	8003b96 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d107      	bne.n	8003b92 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e050      	b.n	8003c38 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b96:	893b      	ldrh	r3, [r7, #8]
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba2:	6a39      	ldr	r1, [r7, #32]
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 f923 	bl	8003df0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00d      	beq.n	8003bcc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb4:	2b04      	cmp	r3, #4
 8003bb6:	d107      	bne.n	8003bc8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bc6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e035      	b.n	8003c38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bda:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f000 f82b 	bl	8003c44 <I2C_WaitOnFlagUntilTimeout>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00d      	beq.n	8003c10 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c02:	d103      	bne.n	8003c0c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e013      	b.n	8003c38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c10:	897b      	ldrh	r3, [r7, #10]
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	f043 0301 	orr.w	r3, r3, #1
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	6a3a      	ldr	r2, [r7, #32]
 8003c24:	4906      	ldr	r1, [pc, #24]	; (8003c40 <I2C_RequestMemoryRead+0x1cc>)
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 f863 	bl	8003cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e000      	b.n	8003c38 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3718      	adds	r7, #24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	00010002 	.word	0x00010002

08003c44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	603b      	str	r3, [r7, #0]
 8003c50:	4613      	mov	r3, r2
 8003c52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c54:	e025      	b.n	8003ca2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5c:	d021      	beq.n	8003ca2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c5e:	f7fe fbf1 	bl	8002444 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d302      	bcc.n	8003c74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d116      	bne.n	8003ca2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	f043 0220 	orr.w	r2, r3, #32
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e023      	b.n	8003cea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	0c1b      	lsrs	r3, r3, #16
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d10d      	bne.n	8003cc8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	43da      	mvns	r2, r3
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	bf0c      	ite	eq
 8003cbe:	2301      	moveq	r3, #1
 8003cc0:	2300      	movne	r3, #0
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	e00c      	b.n	8003ce2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	43da      	mvns	r2, r3
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	bf0c      	ite	eq
 8003cda:	2301      	moveq	r3, #1
 8003cdc:	2300      	movne	r3, #0
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	79fb      	ldrb	r3, [r7, #7]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d0b6      	beq.n	8003c56 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b084      	sub	sp, #16
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	60f8      	str	r0, [r7, #12]
 8003cfa:	60b9      	str	r1, [r7, #8]
 8003cfc:	607a      	str	r2, [r7, #4]
 8003cfe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d00:	e051      	b.n	8003da6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d10:	d123      	bne.n	8003d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d20:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d2a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2220      	movs	r2, #32
 8003d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	f043 0204 	orr.w	r2, r3, #4
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e046      	b.n	8003de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d60:	d021      	beq.n	8003da6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d62:	f7fe fb6f 	bl	8002444 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d302      	bcc.n	8003d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d116      	bne.n	8003da6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2220      	movs	r2, #32
 8003d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	f043 0220 	orr.w	r2, r3, #32
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e020      	b.n	8003de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	0c1b      	lsrs	r3, r3, #16
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d10c      	bne.n	8003dca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	43da      	mvns	r2, r3
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	bf14      	ite	ne
 8003dc2:	2301      	movne	r3, #1
 8003dc4:	2300      	moveq	r3, #0
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	e00b      	b.n	8003de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	43da      	mvns	r2, r3
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	bf14      	ite	ne
 8003ddc:	2301      	movne	r3, #1
 8003dde:	2300      	moveq	r3, #0
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d18d      	bne.n	8003d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dfc:	e02d      	b.n	8003e5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 f8ce 	bl	8003fa0 <I2C_IsAcknowledgeFailed>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e02d      	b.n	8003e6a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e14:	d021      	beq.n	8003e5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e16:	f7fe fb15 	bl	8002444 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d302      	bcc.n	8003e2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d116      	bne.n	8003e5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2220      	movs	r2, #32
 8003e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	f043 0220 	orr.w	r2, r3, #32
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e007      	b.n	8003e6a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e64:	2b80      	cmp	r3, #128	; 0x80
 8003e66:	d1ca      	bne.n	8003dfe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b084      	sub	sp, #16
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	60f8      	str	r0, [r7, #12]
 8003e7a:	60b9      	str	r1, [r7, #8]
 8003e7c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e7e:	e02d      	b.n	8003edc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 f88d 	bl	8003fa0 <I2C_IsAcknowledgeFailed>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e02d      	b.n	8003eec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e96:	d021      	beq.n	8003edc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e98:	f7fe fad4 	bl	8002444 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d302      	bcc.n	8003eae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d116      	bne.n	8003edc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec8:	f043 0220 	orr.w	r2, r3, #32
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e007      	b.n	8003eec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	f003 0304 	and.w	r3, r3, #4
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	d1ca      	bne.n	8003e80 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f00:	e042      	b.n	8003f88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	f003 0310 	and.w	r3, r3, #16
 8003f0c:	2b10      	cmp	r3, #16
 8003f0e:	d119      	bne.n	8003f44 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f06f 0210 	mvn.w	r2, #16
 8003f18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2220      	movs	r2, #32
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e029      	b.n	8003f98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f44:	f7fe fa7e 	bl	8002444 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d302      	bcc.n	8003f5a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d116      	bne.n	8003f88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f74:	f043 0220 	orr.w	r2, r3, #32
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e007      	b.n	8003f98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f92:	2b40      	cmp	r3, #64	; 0x40
 8003f94:	d1b5      	bne.n	8003f02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb6:	d11b      	bne.n	8003ff0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fc0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fdc:	f043 0204 	orr.w	r2, r3, #4
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e000      	b.n	8003ff2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ffe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004000:	b08f      	sub	sp, #60	; 0x3c
 8004002:	af0a      	add	r7, sp, #40	; 0x28
 8004004:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e10f      	b.n	8004230 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d106      	bne.n	8004030 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f009 feae 	bl	800dd8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2203      	movs	r2, #3
 8004034:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004040:	2b00      	cmp	r3, #0
 8004042:	d102      	bne.n	800404a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f003 fc21 	bl	8007896 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	603b      	str	r3, [r7, #0]
 800405a:	687e      	ldr	r6, [r7, #4]
 800405c:	466d      	mov	r5, sp
 800405e:	f106 0410 	add.w	r4, r6, #16
 8004062:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004064:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004066:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004068:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800406a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800406e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004072:	1d33      	adds	r3, r6, #4
 8004074:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004076:	6838      	ldr	r0, [r7, #0]
 8004078:	f003 faf8 	bl	800766c <USB_CoreInit>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d005      	beq.n	800408e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2202      	movs	r2, #2
 8004086:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e0d0      	b.n	8004230 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2100      	movs	r1, #0
 8004094:	4618      	mov	r0, r3
 8004096:	f003 fc0f 	bl	80078b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800409a:	2300      	movs	r3, #0
 800409c:	73fb      	strb	r3, [r7, #15]
 800409e:	e04a      	b.n	8004136 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80040a0:	7bfa      	ldrb	r2, [r7, #15]
 80040a2:	6879      	ldr	r1, [r7, #4]
 80040a4:	4613      	mov	r3, r2
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	4413      	add	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	440b      	add	r3, r1
 80040ae:	333d      	adds	r3, #61	; 0x3d
 80040b0:	2201      	movs	r2, #1
 80040b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80040b4:	7bfa      	ldrb	r2, [r7, #15]
 80040b6:	6879      	ldr	r1, [r7, #4]
 80040b8:	4613      	mov	r3, r2
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	4413      	add	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	440b      	add	r3, r1
 80040c2:	333c      	adds	r3, #60	; 0x3c
 80040c4:	7bfa      	ldrb	r2, [r7, #15]
 80040c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80040c8:	7bfa      	ldrb	r2, [r7, #15]
 80040ca:	7bfb      	ldrb	r3, [r7, #15]
 80040cc:	b298      	uxth	r0, r3
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	4613      	mov	r3, r2
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	4413      	add	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	440b      	add	r3, r1
 80040da:	3344      	adds	r3, #68	; 0x44
 80040dc:	4602      	mov	r2, r0
 80040de:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80040e0:	7bfa      	ldrb	r2, [r7, #15]
 80040e2:	6879      	ldr	r1, [r7, #4]
 80040e4:	4613      	mov	r3, r2
 80040e6:	00db      	lsls	r3, r3, #3
 80040e8:	4413      	add	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	440b      	add	r3, r1
 80040ee:	3340      	adds	r3, #64	; 0x40
 80040f0:	2200      	movs	r2, #0
 80040f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80040f4:	7bfa      	ldrb	r2, [r7, #15]
 80040f6:	6879      	ldr	r1, [r7, #4]
 80040f8:	4613      	mov	r3, r2
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	4413      	add	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	440b      	add	r3, r1
 8004102:	3348      	adds	r3, #72	; 0x48
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004108:	7bfa      	ldrb	r2, [r7, #15]
 800410a:	6879      	ldr	r1, [r7, #4]
 800410c:	4613      	mov	r3, r2
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	4413      	add	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	440b      	add	r3, r1
 8004116:	334c      	adds	r3, #76	; 0x4c
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800411c:	7bfa      	ldrb	r2, [r7, #15]
 800411e:	6879      	ldr	r1, [r7, #4]
 8004120:	4613      	mov	r3, r2
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	4413      	add	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	440b      	add	r3, r1
 800412a:	3354      	adds	r3, #84	; 0x54
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004130:	7bfb      	ldrb	r3, [r7, #15]
 8004132:	3301      	adds	r3, #1
 8004134:	73fb      	strb	r3, [r7, #15]
 8004136:	7bfa      	ldrb	r2, [r7, #15]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	429a      	cmp	r2, r3
 800413e:	d3af      	bcc.n	80040a0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004140:	2300      	movs	r3, #0
 8004142:	73fb      	strb	r3, [r7, #15]
 8004144:	e044      	b.n	80041d0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004146:	7bfa      	ldrb	r2, [r7, #15]
 8004148:	6879      	ldr	r1, [r7, #4]
 800414a:	4613      	mov	r3, r2
 800414c:	00db      	lsls	r3, r3, #3
 800414e:	4413      	add	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	440b      	add	r3, r1
 8004154:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004158:	2200      	movs	r2, #0
 800415a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800415c:	7bfa      	ldrb	r2, [r7, #15]
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	4613      	mov	r3, r2
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	4413      	add	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	440b      	add	r3, r1
 800416a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800416e:	7bfa      	ldrb	r2, [r7, #15]
 8004170:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004172:	7bfa      	ldrb	r2, [r7, #15]
 8004174:	6879      	ldr	r1, [r7, #4]
 8004176:	4613      	mov	r3, r2
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	4413      	add	r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	440b      	add	r3, r1
 8004180:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004184:	2200      	movs	r2, #0
 8004186:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004188:	7bfa      	ldrb	r2, [r7, #15]
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	4613      	mov	r3, r2
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	4413      	add	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800419a:	2200      	movs	r2, #0
 800419c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800419e:	7bfa      	ldrb	r2, [r7, #15]
 80041a0:	6879      	ldr	r1, [r7, #4]
 80041a2:	4613      	mov	r3, r2
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	4413      	add	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	440b      	add	r3, r1
 80041ac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80041b0:	2200      	movs	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80041b4:	7bfa      	ldrb	r2, [r7, #15]
 80041b6:	6879      	ldr	r1, [r7, #4]
 80041b8:	4613      	mov	r3, r2
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	4413      	add	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	440b      	add	r3, r1
 80041c2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80041c6:	2200      	movs	r2, #0
 80041c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041ca:	7bfb      	ldrb	r3, [r7, #15]
 80041cc:	3301      	adds	r3, #1
 80041ce:	73fb      	strb	r3, [r7, #15]
 80041d0:	7bfa      	ldrb	r2, [r7, #15]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d3b5      	bcc.n	8004146 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	603b      	str	r3, [r7, #0]
 80041e0:	687e      	ldr	r6, [r7, #4]
 80041e2:	466d      	mov	r5, sp
 80041e4:	f106 0410 	add.w	r4, r6, #16
 80041e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80041f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80041f8:	1d33      	adds	r3, r6, #4
 80041fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041fc:	6838      	ldr	r0, [r7, #0]
 80041fe:	f003 fba7 	bl	8007950 <USB_DevInit>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d005      	beq.n	8004214 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e00d      	b.n	8004230 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4618      	mov	r0, r3
 800422a:	f004 fcf6 	bl	8008c1a <USB_DevDisconnect>

  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004238 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800424c:	2b01      	cmp	r3, #1
 800424e:	d101      	bne.n	8004254 <HAL_PCD_Start+0x1c>
 8004250:	2302      	movs	r3, #2
 8004252:	e020      	b.n	8004296 <HAL_PCD_Start+0x5e>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004260:	2b01      	cmp	r3, #1
 8004262:	d109      	bne.n	8004278 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004268:	2b01      	cmp	r3, #1
 800426a:	d005      	beq.n	8004278 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004270:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4618      	mov	r0, r3
 800427e:	f003 faf9 	bl	8007874 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4618      	mov	r0, r3
 8004288:	f004 fca6 	bl	8008bd8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800429e:	b590      	push	{r4, r7, lr}
 80042a0:	b08d      	sub	sp, #52	; 0x34
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f004 fd64 	bl	8008d82 <USB_GetMode>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f040 848a 	bne.w	8004bd6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f004 fcc8 	bl	8008c5c <USB_ReadInterrupts>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 8480 	beq.w	8004bd4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	0a1b      	lsrs	r3, r3, #8
 80042de:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f004 fcb5 	bl	8008c5c <USB_ReadInterrupts>
 80042f2:	4603      	mov	r3, r0
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d107      	bne.n	800430c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695a      	ldr	r2, [r3, #20]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f002 0202 	and.w	r2, r2, #2
 800430a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4618      	mov	r0, r3
 8004312:	f004 fca3 	bl	8008c5c <USB_ReadInterrupts>
 8004316:	4603      	mov	r3, r0
 8004318:	f003 0310 	and.w	r3, r3, #16
 800431c:	2b10      	cmp	r3, #16
 800431e:	d161      	bne.n	80043e4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	699a      	ldr	r2, [r3, #24]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 0210 	bic.w	r2, r2, #16
 800432e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004330:	6a3b      	ldr	r3, [r7, #32]
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	f003 020f 	and.w	r2, r3, #15
 800433c:	4613      	mov	r3, r2
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	4413      	add	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	4413      	add	r3, r2
 800434c:	3304      	adds	r3, #4
 800434e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	0c5b      	lsrs	r3, r3, #17
 8004354:	f003 030f 	and.w	r3, r3, #15
 8004358:	2b02      	cmp	r3, #2
 800435a:	d124      	bne.n	80043a6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004362:	4013      	ands	r3, r2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d035      	beq.n	80043d4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	091b      	lsrs	r3, r3, #4
 8004370:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004372:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004376:	b29b      	uxth	r3, r3
 8004378:	461a      	mov	r2, r3
 800437a:	6a38      	ldr	r0, [r7, #32]
 800437c:	f004 fada 	bl	8008934 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	091b      	lsrs	r3, r3, #4
 8004388:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800438c:	441a      	add	r2, r3
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	6a1a      	ldr	r2, [r3, #32]
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	091b      	lsrs	r3, r3, #4
 800439a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800439e:	441a      	add	r2, r3
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	621a      	str	r2, [r3, #32]
 80043a4:	e016      	b.n	80043d4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	0c5b      	lsrs	r3, r3, #17
 80043aa:	f003 030f 	and.w	r3, r3, #15
 80043ae:	2b06      	cmp	r3, #6
 80043b0:	d110      	bne.n	80043d4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043b8:	2208      	movs	r2, #8
 80043ba:	4619      	mov	r1, r3
 80043bc:	6a38      	ldr	r0, [r7, #32]
 80043be:	f004 fab9 	bl	8008934 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	6a1a      	ldr	r2, [r3, #32]
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	091b      	lsrs	r3, r3, #4
 80043ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043ce:	441a      	add	r2, r3
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	699a      	ldr	r2, [r3, #24]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0210 	orr.w	r2, r2, #16
 80043e2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f004 fc37 	bl	8008c5c <USB_ReadInterrupts>
 80043ee:	4603      	mov	r3, r0
 80043f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80043f8:	f040 80a7 	bne.w	800454a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80043fc:	2300      	movs	r3, #0
 80043fe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4618      	mov	r0, r3
 8004406:	f004 fc3c 	bl	8008c82 <USB_ReadDevAllOutEpInterrupt>
 800440a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800440c:	e099      	b.n	8004542 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800440e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 808e 	beq.w	8004536 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004420:	b2d2      	uxtb	r2, r2
 8004422:	4611      	mov	r1, r2
 8004424:	4618      	mov	r0, r3
 8004426:	f004 fc60 	bl	8008cea <USB_ReadDevOutEPInterrupt>
 800442a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00c      	beq.n	8004450 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	4413      	add	r3, r2
 800443e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004442:	461a      	mov	r2, r3
 8004444:	2301      	movs	r3, #1
 8004446:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004448:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 feaa 	bl	80051a4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00c      	beq.n	8004474 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445c:	015a      	lsls	r2, r3, #5
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	4413      	add	r3, r2
 8004462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004466:	461a      	mov	r2, r3
 8004468:	2308      	movs	r3, #8
 800446a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800446c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 ff80 	bl	8005374 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f003 0310 	and.w	r3, r3, #16
 800447a:	2b00      	cmp	r3, #0
 800447c:	d008      	beq.n	8004490 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	4413      	add	r3, r2
 8004486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800448a:	461a      	mov	r2, r3
 800448c:	2310      	movs	r3, #16
 800448e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d030      	beq.n	80044fc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800449a:	6a3b      	ldr	r3, [r7, #32]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a2:	2b80      	cmp	r3, #128	; 0x80
 80044a4:	d109      	bne.n	80044ba <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	69fa      	ldr	r2, [r7, #28]
 80044b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044b8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80044ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044bc:	4613      	mov	r3, r2
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	4413      	add	r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	4413      	add	r3, r2
 80044cc:	3304      	adds	r3, #4
 80044ce:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	78db      	ldrb	r3, [r3, #3]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d108      	bne.n	80044ea <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	2200      	movs	r2, #0
 80044dc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	4619      	mov	r1, r3
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f009 fd4d 	bl	800df84 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	015a      	lsls	r2, r3, #5
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f6:	461a      	mov	r2, r3
 80044f8:	2302      	movs	r3, #2
 80044fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	f003 0320 	and.w	r3, r3, #32
 8004502:	2b00      	cmp	r3, #0
 8004504:	d008      	beq.n	8004518 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	015a      	lsls	r2, r3, #5
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	4413      	add	r3, r2
 800450e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004512:	461a      	mov	r2, r3
 8004514:	2320      	movs	r3, #32
 8004516:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d009      	beq.n	8004536 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004524:	015a      	lsls	r2, r3, #5
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	4413      	add	r3, r2
 800452a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800452e:	461a      	mov	r2, r3
 8004530:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004534:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	3301      	adds	r3, #1
 800453a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800453c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453e:	085b      	lsrs	r3, r3, #1
 8004540:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004544:	2b00      	cmp	r3, #0
 8004546:	f47f af62 	bne.w	800440e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4618      	mov	r0, r3
 8004550:	f004 fb84 	bl	8008c5c <USB_ReadInterrupts>
 8004554:	4603      	mov	r3, r0
 8004556:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800455a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800455e:	f040 80db 	bne.w	8004718 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4618      	mov	r0, r3
 8004568:	f004 fba5 	bl	8008cb6 <USB_ReadDevAllInEpInterrupt>
 800456c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800456e:	2300      	movs	r3, #0
 8004570:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004572:	e0cd      	b.n	8004710 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 80c2 	beq.w	8004704 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	4611      	mov	r1, r2
 800458a:	4618      	mov	r0, r3
 800458c:	f004 fbcb 	bl	8008d26 <USB_ReadDevInEPInterrupt>
 8004590:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	d057      	beq.n	800464c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	f003 030f 	and.w	r3, r3, #15
 80045a2:	2201      	movs	r2, #1
 80045a4:	fa02 f303 	lsl.w	r3, r2, r3
 80045a8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	43db      	mvns	r3, r3
 80045b6:	69f9      	ldr	r1, [r7, #28]
 80045b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045bc:	4013      	ands	r3, r2
 80045be:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	015a      	lsls	r2, r3, #5
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045cc:	461a      	mov	r2, r3
 80045ce:	2301      	movs	r3, #1
 80045d0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d132      	bne.n	8004640 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80045da:	6879      	ldr	r1, [r7, #4]
 80045dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045de:	4613      	mov	r3, r2
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	4413      	add	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	440b      	add	r3, r1
 80045e8:	334c      	adds	r3, #76	; 0x4c
 80045ea:	6819      	ldr	r1, [r3, #0]
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f0:	4613      	mov	r3, r2
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	4413      	add	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4403      	add	r3, r0
 80045fa:	3348      	adds	r3, #72	; 0x48
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4419      	add	r1, r3
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004604:	4613      	mov	r3, r2
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	4413      	add	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	4403      	add	r3, r0
 800460e:	334c      	adds	r3, #76	; 0x4c
 8004610:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	2b00      	cmp	r3, #0
 8004616:	d113      	bne.n	8004640 <HAL_PCD_IRQHandler+0x3a2>
 8004618:	6879      	ldr	r1, [r7, #4]
 800461a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800461c:	4613      	mov	r3, r2
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	4413      	add	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	440b      	add	r3, r1
 8004626:	3354      	adds	r3, #84	; 0x54
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d108      	bne.n	8004640 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6818      	ldr	r0, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004638:	461a      	mov	r2, r3
 800463a:	2101      	movs	r1, #1
 800463c:	f004 fbd2 	bl	8008de4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004642:	b2db      	uxtb	r3, r3
 8004644:	4619      	mov	r1, r3
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f009 fc21 	bl	800de8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	f003 0308 	and.w	r3, r3, #8
 8004652:	2b00      	cmp	r3, #0
 8004654:	d008      	beq.n	8004668 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	015a      	lsls	r2, r3, #5
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	4413      	add	r3, r2
 800465e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004662:	461a      	mov	r2, r3
 8004664:	2308      	movs	r3, #8
 8004666:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	f003 0310 	and.w	r3, r3, #16
 800466e:	2b00      	cmp	r3, #0
 8004670:	d008      	beq.n	8004684 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004674:	015a      	lsls	r2, r3, #5
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	4413      	add	r3, r2
 800467a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800467e:	461a      	mov	r2, r3
 8004680:	2310      	movs	r3, #16
 8004682:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468a:	2b00      	cmp	r3, #0
 800468c:	d008      	beq.n	80046a0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	4413      	add	r3, r2
 8004696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800469a:	461a      	mov	r2, r3
 800469c:	2340      	movs	r3, #64	; 0x40
 800469e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d023      	beq.n	80046f2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80046aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046ac:	6a38      	ldr	r0, [r7, #32]
 80046ae:	f003 fab3 	bl	8007c18 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80046b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b4:	4613      	mov	r3, r2
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	4413      	add	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	3338      	adds	r3, #56	; 0x38
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	4413      	add	r3, r2
 80046c2:	3304      	adds	r3, #4
 80046c4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	78db      	ldrb	r3, [r3, #3]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d108      	bne.n	80046e0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	2200      	movs	r2, #0
 80046d2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	4619      	mov	r1, r3
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f009 fc64 	bl	800dfa8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	015a      	lsls	r2, r3, #5
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ec:	461a      	mov	r2, r3
 80046ee:	2302      	movs	r3, #2
 80046f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d003      	beq.n	8004704 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80046fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 fcc3 	bl	800508a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	3301      	adds	r3, #1
 8004708:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800470a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470c:	085b      	lsrs	r3, r3, #1
 800470e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004712:	2b00      	cmp	r3, #0
 8004714:	f47f af2e 	bne.w	8004574 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4618      	mov	r0, r3
 800471e:	f004 fa9d 	bl	8008c5c <USB_ReadInterrupts>
 8004722:	4603      	mov	r3, r0
 8004724:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004728:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800472c:	d122      	bne.n	8004774 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	69fa      	ldr	r2, [r7, #28]
 8004738:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800473c:	f023 0301 	bic.w	r3, r3, #1
 8004740:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004748:	2b01      	cmp	r3, #1
 800474a:	d108      	bne.n	800475e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004754:	2100      	movs	r1, #0
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 feaa 	bl	80054b0 <HAL_PCDEx_LPM_Callback>
 800475c:	e002      	b.n	8004764 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f009 fc02 	bl	800df68 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	695a      	ldr	r2, [r3, #20]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004772:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4618      	mov	r0, r3
 800477a:	f004 fa6f 	bl	8008c5c <USB_ReadInterrupts>
 800477e:	4603      	mov	r3, r0
 8004780:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004784:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004788:	d112      	bne.n	80047b0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b01      	cmp	r3, #1
 8004798:	d102      	bne.n	80047a0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f009 fbbe 	bl	800df1c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	695a      	ldr	r2, [r3, #20]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80047ae:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f004 fa51 	bl	8008c5c <USB_ReadInterrupts>
 80047ba:	4603      	mov	r3, r0
 80047bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047c4:	f040 80b7 	bne.w	8004936 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	69fa      	ldr	r2, [r7, #28]
 80047d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047d6:	f023 0301 	bic.w	r3, r3, #1
 80047da:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2110      	movs	r1, #16
 80047e2:	4618      	mov	r0, r3
 80047e4:	f003 fa18 	bl	8007c18 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047e8:	2300      	movs	r3, #0
 80047ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047ec:	e046      	b.n	800487c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80047ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f0:	015a      	lsls	r2, r3, #5
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	4413      	add	r3, r2
 80047f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047fa:	461a      	mov	r2, r3
 80047fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004800:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004804:	015a      	lsls	r2, r3, #5
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	4413      	add	r3, r2
 800480a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004812:	0151      	lsls	r1, r2, #5
 8004814:	69fa      	ldr	r2, [r7, #28]
 8004816:	440a      	add	r2, r1
 8004818:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800481c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004820:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004824:	015a      	lsls	r2, r3, #5
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	4413      	add	r3, r2
 800482a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800482e:	461a      	mov	r2, r3
 8004830:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004834:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004838:	015a      	lsls	r2, r3, #5
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	4413      	add	r3, r2
 800483e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004846:	0151      	lsls	r1, r2, #5
 8004848:	69fa      	ldr	r2, [r7, #28]
 800484a:	440a      	add	r2, r1
 800484c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004850:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004854:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004858:	015a      	lsls	r2, r3, #5
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	4413      	add	r3, r2
 800485e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004866:	0151      	lsls	r1, r2, #5
 8004868:	69fa      	ldr	r2, [r7, #28]
 800486a:	440a      	add	r2, r1
 800486c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004870:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004874:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004878:	3301      	adds	r3, #1
 800487a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004882:	429a      	cmp	r2, r3
 8004884:	d3b3      	bcc.n	80047ee <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800488c:	69db      	ldr	r3, [r3, #28]
 800488e:	69fa      	ldr	r2, [r7, #28]
 8004890:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004894:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004898:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d016      	beq.n	80048d0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ac:	69fa      	ldr	r2, [r7, #28]
 80048ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048b2:	f043 030b 	orr.w	r3, r3, #11
 80048b6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c2:	69fa      	ldr	r2, [r7, #28]
 80048c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048c8:	f043 030b 	orr.w	r3, r3, #11
 80048cc:	6453      	str	r3, [r2, #68]	; 0x44
 80048ce:	e015      	b.n	80048fc <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	69fa      	ldr	r2, [r7, #28]
 80048da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80048e2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80048e6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	69fa      	ldr	r2, [r7, #28]
 80048f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048f6:	f043 030b 	orr.w	r3, r3, #11
 80048fa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	69fa      	ldr	r2, [r7, #28]
 8004906:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800490a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800490e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6818      	ldr	r0, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004920:	461a      	mov	r2, r3
 8004922:	f004 fa5f 	bl	8008de4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	695a      	ldr	r2, [r3, #20]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004934:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4618      	mov	r0, r3
 800493c:	f004 f98e 	bl	8008c5c <USB_ReadInterrupts>
 8004940:	4603      	mov	r3, r0
 8004942:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800494a:	d124      	bne.n	8004996 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4618      	mov	r0, r3
 8004952:	f004 fa24 	bl	8008d9e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4618      	mov	r0, r3
 800495c:	f003 f9d9 	bl	8007d12 <USB_GetDevSpeed>
 8004960:	4603      	mov	r3, r0
 8004962:	461a      	mov	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681c      	ldr	r4, [r3, #0]
 800496c:	f001 fa10 	bl	8005d90 <HAL_RCC_GetHCLKFreq>
 8004970:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004976:	b2db      	uxtb	r3, r3
 8004978:	461a      	mov	r2, r3
 800497a:	4620      	mov	r0, r4
 800497c:	f002 fed8 	bl	8007730 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f009 faac 	bl	800dede <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	695a      	ldr	r2, [r3, #20]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004994:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4618      	mov	r0, r3
 800499c:	f004 f95e 	bl	8008c5c <USB_ReadInterrupts>
 80049a0:	4603      	mov	r3, r0
 80049a2:	f003 0308 	and.w	r3, r3, #8
 80049a6:	2b08      	cmp	r3, #8
 80049a8:	d10a      	bne.n	80049c0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f009 fa89 	bl	800dec2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	695a      	ldr	r2, [r3, #20]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f002 0208 	and.w	r2, r2, #8
 80049be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f004 f949 	bl	8008c5c <USB_ReadInterrupts>
 80049ca:	4603      	mov	r3, r0
 80049cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d0:	2b80      	cmp	r3, #128	; 0x80
 80049d2:	d122      	bne.n	8004a1a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80049d4:	6a3b      	ldr	r3, [r7, #32]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049e0:	2301      	movs	r3, #1
 80049e2:	627b      	str	r3, [r7, #36]	; 0x24
 80049e4:	e014      	b.n	8004a10 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80049e6:	6879      	ldr	r1, [r7, #4]
 80049e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ea:	4613      	mov	r3, r2
 80049ec:	00db      	lsls	r3, r3, #3
 80049ee:	4413      	add	r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	440b      	add	r3, r1
 80049f4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d105      	bne.n	8004a0a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	4619      	mov	r1, r3
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 fb0f 	bl	8005028 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d3e5      	bcc.n	80049e6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f004 f91c 	bl	8008c5c <USB_ReadInterrupts>
 8004a24:	4603      	mov	r3, r0
 8004a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a2e:	d13b      	bne.n	8004aa8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a30:	2301      	movs	r3, #1
 8004a32:	627b      	str	r3, [r7, #36]	; 0x24
 8004a34:	e02b      	b.n	8004a8e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	015a      	lsls	r2, r3, #5
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004a46:	6879      	ldr	r1, [r7, #4]
 8004a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	4413      	add	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	440b      	add	r3, r1
 8004a54:	3340      	adds	r3, #64	; 0x40
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d115      	bne.n	8004a88 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004a5c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	da12      	bge.n	8004a88 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004a62:	6879      	ldr	r1, [r7, #4]
 8004a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a66:	4613      	mov	r3, r2
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	4413      	add	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	440b      	add	r3, r1
 8004a70:	333f      	adds	r3, #63	; 0x3f
 8004a72:	2201      	movs	r2, #1
 8004a74:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	4619      	mov	r1, r3
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 fad0 	bl	8005028 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d3ce      	bcc.n	8004a36 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	695a      	ldr	r2, [r3, #20]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004aa6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f004 f8d5 	bl	8008c5c <USB_ReadInterrupts>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ab8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004abc:	d155      	bne.n	8004b6a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004abe:	2301      	movs	r3, #1
 8004ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ac2:	e045      	b.n	8004b50 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ad4:	6879      	ldr	r1, [r7, #4]
 8004ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad8:	4613      	mov	r3, r2
 8004ada:	00db      	lsls	r3, r3, #3
 8004adc:	4413      	add	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	440b      	add	r3, r1
 8004ae2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d12e      	bne.n	8004b4a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004aec:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	da2b      	bge.n	8004b4a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004afe:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d121      	bne.n	8004b4a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004b06:	6879      	ldr	r1, [r7, #4]
 8004b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	4413      	add	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	440b      	add	r3, r1
 8004b14:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004b18:	2201      	movs	r2, #1
 8004b1a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004b24:	6a3b      	ldr	r3, [r7, #32]
 8004b26:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004b28:	6a3b      	ldr	r3, [r7, #32]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10a      	bne.n	8004b4a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	69fa      	ldr	r2, [r7, #28]
 8004b3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b46:	6053      	str	r3, [r2, #4]
            break;
 8004b48:	e007      	b.n	8004b5a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d3b4      	bcc.n	8004ac4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	695a      	ldr	r2, [r3, #20]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004b68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f004 f874 	bl	8008c5c <USB_ReadInterrupts>
 8004b74:	4603      	mov	r3, r0
 8004b76:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b7e:	d10a      	bne.n	8004b96 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f009 fa23 	bl	800dfcc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	695a      	ldr	r2, [r3, #20]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004b94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f004 f85e 	bl	8008c5c <USB_ReadInterrupts>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	f003 0304 	and.w	r3, r3, #4
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	d115      	bne.n	8004bd6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	f003 0304 	and.w	r3, r3, #4
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d002      	beq.n	8004bc2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f009 fa13 	bl	800dfe8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	6859      	ldr	r1, [r3, #4]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	605a      	str	r2, [r3, #4]
 8004bd2:	e000      	b.n	8004bd6 <HAL_PCD_IRQHandler+0x938>
      return;
 8004bd4:	bf00      	nop
    }
  }
}
 8004bd6:	3734      	adds	r7, #52	; 0x34
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd90      	pop	{r4, r7, pc}

08004bdc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	460b      	mov	r3, r1
 8004be6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d101      	bne.n	8004bf6 <HAL_PCD_SetAddress+0x1a>
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	e013      	b.n	8004c1e <HAL_PCD_SetAddress+0x42>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	78fa      	ldrb	r2, [r7, #3]
 8004c02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	78fa      	ldrb	r2, [r7, #3]
 8004c0c:	4611      	mov	r1, r2
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f003 ffbc 	bl	8008b8c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b084      	sub	sp, #16
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
 8004c2e:	4608      	mov	r0, r1
 8004c30:	4611      	mov	r1, r2
 8004c32:	461a      	mov	r2, r3
 8004c34:	4603      	mov	r3, r0
 8004c36:	70fb      	strb	r3, [r7, #3]
 8004c38:	460b      	mov	r3, r1
 8004c3a:	803b      	strh	r3, [r7, #0]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004c40:	2300      	movs	r3, #0
 8004c42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004c44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	da0f      	bge.n	8004c6c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c4c:	78fb      	ldrb	r3, [r7, #3]
 8004c4e:	f003 020f 	and.w	r2, r3, #15
 8004c52:	4613      	mov	r3, r2
 8004c54:	00db      	lsls	r3, r3, #3
 8004c56:	4413      	add	r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	3338      	adds	r3, #56	; 0x38
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	4413      	add	r3, r2
 8004c60:	3304      	adds	r3, #4
 8004c62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2201      	movs	r2, #1
 8004c68:	705a      	strb	r2, [r3, #1]
 8004c6a:	e00f      	b.n	8004c8c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c6c:	78fb      	ldrb	r3, [r7, #3]
 8004c6e:	f003 020f 	and.w	r2, r3, #15
 8004c72:	4613      	mov	r3, r2
 8004c74:	00db      	lsls	r3, r3, #3
 8004c76:	4413      	add	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	4413      	add	r3, r2
 8004c82:	3304      	adds	r3, #4
 8004c84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004c8c:	78fb      	ldrb	r3, [r7, #3]
 8004c8e:	f003 030f 	and.w	r3, r3, #15
 8004c92:	b2da      	uxtb	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004c98:	883a      	ldrh	r2, [r7, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	78ba      	ldrb	r2, [r7, #2]
 8004ca2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	785b      	ldrb	r3, [r3, #1]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d004      	beq.n	8004cb6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004cb6:	78bb      	ldrb	r3, [r7, #2]
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d102      	bne.n	8004cc2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d101      	bne.n	8004cd0 <HAL_PCD_EP_Open+0xaa>
 8004ccc:	2302      	movs	r3, #2
 8004cce:	e00e      	b.n	8004cee <HAL_PCD_EP_Open+0xc8>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68f9      	ldr	r1, [r7, #12]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f003 f83c 	bl	8007d5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004cec:	7afb      	ldrb	r3, [r7, #11]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b084      	sub	sp, #16
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
 8004cfe:	460b      	mov	r3, r1
 8004d00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	da0f      	bge.n	8004d2a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d0a:	78fb      	ldrb	r3, [r7, #3]
 8004d0c:	f003 020f 	and.w	r2, r3, #15
 8004d10:	4613      	mov	r3, r2
 8004d12:	00db      	lsls	r3, r3, #3
 8004d14:	4413      	add	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	3338      	adds	r3, #56	; 0x38
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	3304      	adds	r3, #4
 8004d20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2201      	movs	r2, #1
 8004d26:	705a      	strb	r2, [r3, #1]
 8004d28:	e00f      	b.n	8004d4a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d2a:	78fb      	ldrb	r3, [r7, #3]
 8004d2c:	f003 020f 	and.w	r2, r3, #15
 8004d30:	4613      	mov	r3, r2
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	4413      	add	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	4413      	add	r3, r2
 8004d40:	3304      	adds	r3, #4
 8004d42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004d4a:	78fb      	ldrb	r3, [r7, #3]
 8004d4c:	f003 030f 	and.w	r3, r3, #15
 8004d50:	b2da      	uxtb	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d101      	bne.n	8004d64 <HAL_PCD_EP_Close+0x6e>
 8004d60:	2302      	movs	r3, #2
 8004d62:	e00e      	b.n	8004d82 <HAL_PCD_EP_Close+0x8c>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68f9      	ldr	r1, [r7, #12]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f003 f87a 	bl	8007e6c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b086      	sub	sp, #24
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	60f8      	str	r0, [r7, #12]
 8004d92:	607a      	str	r2, [r7, #4]
 8004d94:	603b      	str	r3, [r7, #0]
 8004d96:	460b      	mov	r3, r1
 8004d98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d9a:	7afb      	ldrb	r3, [r7, #11]
 8004d9c:	f003 020f 	and.w	r2, r3, #15
 8004da0:	4613      	mov	r3, r2
 8004da2:	00db      	lsls	r3, r3, #3
 8004da4:	4413      	add	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	4413      	add	r3, r2
 8004db0:	3304      	adds	r3, #4
 8004db2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004dcc:	7afb      	ldrb	r3, [r7, #11]
 8004dce:	f003 030f 	and.w	r3, r3, #15
 8004dd2:	b2da      	uxtb	r2, r3
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d102      	bne.n	8004de6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004de6:	7afb      	ldrb	r3, [r7, #11]
 8004de8:	f003 030f 	and.w	r3, r3, #15
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d109      	bne.n	8004e04 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6818      	ldr	r0, [r3, #0]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	6979      	ldr	r1, [r7, #20]
 8004dfe:	f003 fb59 	bl	80084b4 <USB_EP0StartXfer>
 8004e02:	e008      	b.n	8004e16 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6818      	ldr	r0, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	461a      	mov	r2, r3
 8004e10:	6979      	ldr	r1, [r7, #20]
 8004e12:	f003 f907 	bl	8008024 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3718      	adds	r7, #24
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	607a      	str	r2, [r7, #4]
 8004e2a:	603b      	str	r3, [r7, #0]
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e30:	7afb      	ldrb	r3, [r7, #11]
 8004e32:	f003 020f 	and.w	r2, r3, #15
 8004e36:	4613      	mov	r3, r2
 8004e38:	00db      	lsls	r3, r3, #3
 8004e3a:	4413      	add	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	3338      	adds	r3, #56	; 0x38
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	4413      	add	r3, r2
 8004e44:	3304      	adds	r3, #4
 8004e46:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	683a      	ldr	r2, [r7, #0]
 8004e52:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	2200      	movs	r2, #0
 8004e58:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e60:	7afb      	ldrb	r3, [r7, #11]
 8004e62:	f003 030f 	and.w	r3, r3, #15
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d102      	bne.n	8004e7a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e7a:	7afb      	ldrb	r3, [r7, #11]
 8004e7c:	f003 030f 	and.w	r3, r3, #15
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d109      	bne.n	8004e98 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6818      	ldr	r0, [r3, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	461a      	mov	r2, r3
 8004e90:	6979      	ldr	r1, [r7, #20]
 8004e92:	f003 fb0f 	bl	80084b4 <USB_EP0StartXfer>
 8004e96:	e008      	b.n	8004eaa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6818      	ldr	r0, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	6979      	ldr	r1, [r7, #20]
 8004ea6:	f003 f8bd 	bl	8008024 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3718      	adds	r7, #24
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004ec0:	78fb      	ldrb	r3, [r7, #3]
 8004ec2:	f003 020f 	and.w	r2, r3, #15
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d901      	bls.n	8004ed2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e050      	b.n	8004f74 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ed2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	da0f      	bge.n	8004efa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004eda:	78fb      	ldrb	r3, [r7, #3]
 8004edc:	f003 020f 	and.w	r2, r3, #15
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	00db      	lsls	r3, r3, #3
 8004ee4:	4413      	add	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	3338      	adds	r3, #56	; 0x38
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	4413      	add	r3, r2
 8004eee:	3304      	adds	r3, #4
 8004ef0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	705a      	strb	r2, [r3, #1]
 8004ef8:	e00d      	b.n	8004f16 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004efa:	78fa      	ldrb	r2, [r7, #3]
 8004efc:	4613      	mov	r3, r2
 8004efe:	00db      	lsls	r3, r3, #3
 8004f00:	4413      	add	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	3304      	adds	r3, #4
 8004f0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f1c:	78fb      	ldrb	r3, [r7, #3]
 8004f1e:	f003 030f 	and.w	r3, r3, #15
 8004f22:	b2da      	uxtb	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d101      	bne.n	8004f36 <HAL_PCD_EP_SetStall+0x82>
 8004f32:	2302      	movs	r3, #2
 8004f34:	e01e      	b.n	8004f74 <HAL_PCD_EP_SetStall+0xc0>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68f9      	ldr	r1, [r7, #12]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f003 fd4d 	bl	80089e4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f4a:	78fb      	ldrb	r3, [r7, #3]
 8004f4c:	f003 030f 	and.w	r3, r3, #15
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10a      	bne.n	8004f6a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6818      	ldr	r0, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	b2d9      	uxtb	r1, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004f64:	461a      	mov	r2, r3
 8004f66:	f003 ff3d 	bl	8008de4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	460b      	mov	r3, r1
 8004f86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004f88:	78fb      	ldrb	r3, [r7, #3]
 8004f8a:	f003 020f 	and.w	r2, r3, #15
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d901      	bls.n	8004f9a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e042      	b.n	8005020 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004f9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	da0f      	bge.n	8004fc2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fa2:	78fb      	ldrb	r3, [r7, #3]
 8004fa4:	f003 020f 	and.w	r2, r3, #15
 8004fa8:	4613      	mov	r3, r2
 8004faa:	00db      	lsls	r3, r3, #3
 8004fac:	4413      	add	r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	3338      	adds	r3, #56	; 0x38
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	3304      	adds	r3, #4
 8004fb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	705a      	strb	r2, [r3, #1]
 8004fc0:	e00f      	b.n	8004fe2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004fc2:	78fb      	ldrb	r3, [r7, #3]
 8004fc4:	f003 020f 	and.w	r2, r3, #15
 8004fc8:	4613      	mov	r3, r2
 8004fca:	00db      	lsls	r3, r3, #3
 8004fcc:	4413      	add	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	3304      	adds	r3, #4
 8004fda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fe8:	78fb      	ldrb	r3, [r7, #3]
 8004fea:	f003 030f 	and.w	r3, r3, #15
 8004fee:	b2da      	uxtb	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d101      	bne.n	8005002 <HAL_PCD_EP_ClrStall+0x86>
 8004ffe:	2302      	movs	r3, #2
 8005000:	e00e      	b.n	8005020 <HAL_PCD_EP_ClrStall+0xa4>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68f9      	ldr	r1, [r7, #12]
 8005010:	4618      	mov	r0, r3
 8005012:	f003 fd55 	bl	8008ac0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3710      	adds	r7, #16
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	460b      	mov	r3, r1
 8005032:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005034:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005038:	2b00      	cmp	r3, #0
 800503a:	da0c      	bge.n	8005056 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800503c:	78fb      	ldrb	r3, [r7, #3]
 800503e:	f003 020f 	and.w	r2, r3, #15
 8005042:	4613      	mov	r3, r2
 8005044:	00db      	lsls	r3, r3, #3
 8005046:	4413      	add	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	3338      	adds	r3, #56	; 0x38
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	4413      	add	r3, r2
 8005050:	3304      	adds	r3, #4
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	e00c      	b.n	8005070 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005056:	78fb      	ldrb	r3, [r7, #3]
 8005058:	f003 020f 	and.w	r2, r3, #15
 800505c:	4613      	mov	r3, r2
 800505e:	00db      	lsls	r3, r3, #3
 8005060:	4413      	add	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	4413      	add	r3, r2
 800506c:	3304      	adds	r3, #4
 800506e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68f9      	ldr	r1, [r7, #12]
 8005076:	4618      	mov	r0, r3
 8005078:	f003 fb74 	bl	8008764 <USB_EPStopXfer>
 800507c:	4603      	mov	r3, r0
 800507e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005080:	7afb      	ldrb	r3, [r7, #11]
}
 8005082:	4618      	mov	r0, r3
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b08a      	sub	sp, #40	; 0x28
 800508e:	af02      	add	r7, sp, #8
 8005090:	6078      	str	r0, [r7, #4]
 8005092:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	4613      	mov	r3, r2
 80050a2:	00db      	lsls	r3, r3, #3
 80050a4:	4413      	add	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	3338      	adds	r3, #56	; 0x38
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	4413      	add	r3, r2
 80050ae:	3304      	adds	r3, #4
 80050b0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6a1a      	ldr	r2, [r3, #32]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d901      	bls.n	80050c2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e06c      	b.n	800519c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	699a      	ldr	r2, [r3, #24]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	69fa      	ldr	r2, [r7, #28]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d902      	bls.n	80050de <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	3303      	adds	r3, #3
 80050e2:	089b      	lsrs	r3, r3, #2
 80050e4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80050e6:	e02b      	b.n	8005140 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	699a      	ldr	r2, [r3, #24]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	69fa      	ldr	r2, [r7, #28]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d902      	bls.n	8005104 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	3303      	adds	r3, #3
 8005108:	089b      	lsrs	r3, r3, #2
 800510a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6919      	ldr	r1, [r3, #16]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	b2da      	uxtb	r2, r3
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800511c:	b2db      	uxtb	r3, r3
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	4603      	mov	r3, r0
 8005122:	6978      	ldr	r0, [r7, #20]
 8005124:	f003 fbc8 	bl	80088b8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	691a      	ldr	r2, [r3, #16]
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	441a      	add	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6a1a      	ldr	r2, [r3, #32]
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	441a      	add	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	015a      	lsls	r2, r3, #5
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	4413      	add	r3, r2
 8005148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	b29b      	uxth	r3, r3
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	429a      	cmp	r2, r3
 8005154:	d809      	bhi.n	800516a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6a1a      	ldr	r2, [r3, #32]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800515e:	429a      	cmp	r2, r3
 8005160:	d203      	bcs.n	800516a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1be      	bne.n	80050e8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	699a      	ldr	r2, [r3, #24]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	429a      	cmp	r2, r3
 8005174:	d811      	bhi.n	800519a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	f003 030f 	and.w	r3, r3, #15
 800517c:	2201      	movs	r2, #1
 800517e:	fa02 f303 	lsl.w	r3, r2, r3
 8005182:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800518a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	43db      	mvns	r3, r3
 8005190:	6939      	ldr	r1, [r7, #16]
 8005192:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005196:	4013      	ands	r3, r2
 8005198:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3720      	adds	r7, #32
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b088      	sub	sp, #32
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	333c      	adds	r3, #60	; 0x3c
 80051bc:	3304      	adds	r3, #4
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d17b      	bne.n	80052d2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	f003 0308 	and.w	r3, r3, #8
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d015      	beq.n	8005210 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	4a61      	ldr	r2, [pc, #388]	; (800536c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	f240 80b9 	bls.w	8005360 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 80b3 	beq.w	8005360 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	4413      	add	r3, r2
 8005202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005206:	461a      	mov	r2, r3
 8005208:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800520c:	6093      	str	r3, [r2, #8]
 800520e:	e0a7      	b.n	8005360 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f003 0320 	and.w	r3, r3, #32
 8005216:	2b00      	cmp	r3, #0
 8005218:	d009      	beq.n	800522e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	015a      	lsls	r2, r3, #5
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	4413      	add	r3, r2
 8005222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005226:	461a      	mov	r2, r3
 8005228:	2320      	movs	r3, #32
 800522a:	6093      	str	r3, [r2, #8]
 800522c:	e098      	b.n	8005360 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005234:	2b00      	cmp	r3, #0
 8005236:	f040 8093 	bne.w	8005360 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	4a4b      	ldr	r2, [pc, #300]	; (800536c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d90f      	bls.n	8005262 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00a      	beq.n	8005262 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	4413      	add	r3, r2
 8005254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005258:	461a      	mov	r2, r3
 800525a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800525e:	6093      	str	r3, [r2, #8]
 8005260:	e07e      	b.n	8005360 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	4613      	mov	r3, r2
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	4413      	add	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	4413      	add	r3, r2
 8005274:	3304      	adds	r3, #4
 8005276:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	69da      	ldr	r2, [r3, #28]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	0159      	lsls	r1, r3, #5
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	440b      	add	r3, r1
 8005284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800528e:	1ad2      	subs	r2, r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d114      	bne.n	80052c4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d109      	bne.n	80052b6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6818      	ldr	r0, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80052ac:	461a      	mov	r2, r3
 80052ae:	2101      	movs	r1, #1
 80052b0:	f003 fd98 	bl	8008de4 <USB_EP0_OutStart>
 80052b4:	e006      	b.n	80052c4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	691a      	ldr	r2, [r3, #16]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	441a      	add	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	4619      	mov	r1, r3
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f008 fdc4 	bl	800de58 <HAL_PCD_DataOutStageCallback>
 80052d0:	e046      	b.n	8005360 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	4a26      	ldr	r2, [pc, #152]	; (8005370 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d124      	bne.n	8005324 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00a      	beq.n	80052fa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	015a      	lsls	r2, r3, #5
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f0:	461a      	mov	r2, r3
 80052f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052f6:	6093      	str	r3, [r2, #8]
 80052f8:	e032      	b.n	8005360 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	f003 0320 	and.w	r3, r3, #32
 8005300:	2b00      	cmp	r3, #0
 8005302:	d008      	beq.n	8005316 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	4413      	add	r3, r2
 800530c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005310:	461a      	mov	r2, r3
 8005312:	2320      	movs	r3, #32
 8005314:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	b2db      	uxtb	r3, r3
 800531a:	4619      	mov	r1, r3
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f008 fd9b 	bl	800de58 <HAL_PCD_DataOutStageCallback>
 8005322:	e01d      	b.n	8005360 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d114      	bne.n	8005354 <PCD_EP_OutXfrComplete_int+0x1b0>
 800532a:	6879      	ldr	r1, [r7, #4]
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	4613      	mov	r3, r2
 8005330:	00db      	lsls	r3, r3, #3
 8005332:	4413      	add	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	440b      	add	r3, r1
 8005338:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d108      	bne.n	8005354 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6818      	ldr	r0, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800534c:	461a      	mov	r2, r3
 800534e:	2100      	movs	r1, #0
 8005350:	f003 fd48 	bl	8008de4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	b2db      	uxtb	r3, r3
 8005358:	4619      	mov	r1, r3
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f008 fd7c 	bl	800de58 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3720      	adds	r7, #32
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	4f54300a 	.word	0x4f54300a
 8005370:	4f54310a 	.word	0x4f54310a

08005374 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	333c      	adds	r3, #60	; 0x3c
 800538c:	3304      	adds	r3, #4
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	015a      	lsls	r2, r3, #5
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	4413      	add	r3, r2
 800539a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	4a15      	ldr	r2, [pc, #84]	; (80053fc <PCD_EP_OutSetupPacket_int+0x88>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d90e      	bls.n	80053c8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d009      	beq.n	80053c8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	015a      	lsls	r2, r3, #5
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	4413      	add	r3, r2
 80053bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c0:	461a      	mov	r2, r3
 80053c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053c6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f008 fd33 	bl	800de34 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	4a0a      	ldr	r2, [pc, #40]	; (80053fc <PCD_EP_OutSetupPacket_int+0x88>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d90c      	bls.n	80053f0 <PCD_EP_OutSetupPacket_int+0x7c>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d108      	bne.n	80053f0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6818      	ldr	r0, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80053e8:	461a      	mov	r2, r3
 80053ea:	2101      	movs	r1, #1
 80053ec:	f003 fcfa 	bl	8008de4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3718      	adds	r7, #24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	4f54300a 	.word	0x4f54300a

08005400 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	460b      	mov	r3, r1
 800540a:	70fb      	strb	r3, [r7, #3]
 800540c:	4613      	mov	r3, r2
 800540e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005416:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005418:	78fb      	ldrb	r3, [r7, #3]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d107      	bne.n	800542e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800541e:	883b      	ldrh	r3, [r7, #0]
 8005420:	0419      	lsls	r1, r3, #16
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	430a      	orrs	r2, r1
 800542a:	629a      	str	r2, [r3, #40]	; 0x28
 800542c:	e028      	b.n	8005480 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005434:	0c1b      	lsrs	r3, r3, #16
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	4413      	add	r3, r2
 800543a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800543c:	2300      	movs	r3, #0
 800543e:	73fb      	strb	r3, [r7, #15]
 8005440:	e00d      	b.n	800545e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	7bfb      	ldrb	r3, [r7, #15]
 8005448:	3340      	adds	r3, #64	; 0x40
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	0c1b      	lsrs	r3, r3, #16
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	4413      	add	r3, r2
 8005456:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005458:	7bfb      	ldrb	r3, [r7, #15]
 800545a:	3301      	adds	r3, #1
 800545c:	73fb      	strb	r3, [r7, #15]
 800545e:	7bfa      	ldrb	r2, [r7, #15]
 8005460:	78fb      	ldrb	r3, [r7, #3]
 8005462:	3b01      	subs	r3, #1
 8005464:	429a      	cmp	r2, r3
 8005466:	d3ec      	bcc.n	8005442 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005468:	883b      	ldrh	r3, [r7, #0]
 800546a:	0418      	lsls	r0, r3, #16
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6819      	ldr	r1, [r3, #0]
 8005470:	78fb      	ldrb	r3, [r7, #3]
 8005472:	3b01      	subs	r3, #1
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	4302      	orrs	r2, r0
 8005478:	3340      	adds	r3, #64	; 0x40
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	440b      	add	r3, r1
 800547e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800548e:	b480      	push	{r7}
 8005490:	b083      	sub	sp, #12
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
 8005496:	460b      	mov	r3, r1
 8005498:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	887a      	ldrh	r2, [r7, #2]
 80054a0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	460b      	mov	r3, r1
 80054ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e267      	b.n	80059aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d075      	beq.n	80055d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054e6:	4b88      	ldr	r3, [pc, #544]	; (8005708 <HAL_RCC_OscConfig+0x240>)
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f003 030c 	and.w	r3, r3, #12
 80054ee:	2b04      	cmp	r3, #4
 80054f0:	d00c      	beq.n	800550c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054f2:	4b85      	ldr	r3, [pc, #532]	; (8005708 <HAL_RCC_OscConfig+0x240>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054fa:	2b08      	cmp	r3, #8
 80054fc:	d112      	bne.n	8005524 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054fe:	4b82      	ldr	r3, [pc, #520]	; (8005708 <HAL_RCC_OscConfig+0x240>)
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005506:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800550a:	d10b      	bne.n	8005524 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800550c:	4b7e      	ldr	r3, [pc, #504]	; (8005708 <HAL_RCC_OscConfig+0x240>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d05b      	beq.n	80055d0 <HAL_RCC_OscConfig+0x108>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d157      	bne.n	80055d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e242      	b.n	80059aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800552c:	d106      	bne.n	800553c <HAL_RCC_OscConfig+0x74>
 800552e:	4b76      	ldr	r3, [pc, #472]	; (8005708 <HAL_RCC_OscConfig+0x240>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a75      	ldr	r2, [pc, #468]	; (8005708 <HAL_RCC_OscConfig+0x240>)
 8005534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005538:	6013      	str	r3, [r2, #0]
 800553a:	e01d      	b.n	8005578 <HAL_RCC_OscConfig+0xb0>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005544:	d10c      	bne.n	8005560 <HAL_RCC_OscConfig+0x98>
 8005546:	4b70      	ldr	r3, [pc, #448]	; (8005708 <HAL_RCC_OscConfig+0x240>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a6f      	ldr	r2, [pc, #444]	; (8005708 <HAL_RCC_OscConfig+0x240>)
 800554c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005550:	6013      	str	r3, [r2, #0]
 8005552:	4b6d      	ldr	r3, [pc, #436]	; (8005708 <HAL_RCC_OscConfig+0x240>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a6c      	ldr	r2, [pc, #432]	; (8005708 <HAL_RCC_OscConfig+0x240>)
 8005558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800555c:	6013      	str	r3, [r2, #0]
 800555e:	e00b      	b.n	8005578 <HAL_RCC_OscConfig+0xb0>
 8005560:	4b69      	ldr	r3, [pc, #420]	; (8005708 <HAL_RCC_OscConfig+0x240>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a68      	ldr	r2, [pc, #416]	; (8005708 <HAL_RCC_OscConfig+0x240>)
 8005566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800556a:	6013      	str	r3, [r2, #0]
 800556c:	4b66      	ldr	r3, [pc, #408]	; (8005708 <HAL_RCC_OscConfig+0x240>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a65      	ldr	r2, [pc, #404]	; (8005708 <HAL_RCC_OscConfig+0x240>)
 8005572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d013      	beq.n	80055a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005580:	f7fc ff60 	bl	8002444 <HAL_GetTick>
 8005584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005586:	e008      	b.n	800559a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005588:	f7fc ff5c 	bl	8002444 <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	2b64      	cmp	r3, #100	; 0x64
 8005594:	d901      	bls.n	800559a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e207      	b.n	80059aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800559a:	4b5b      	ldr	r3, [pc, #364]	; (8005708 <HAL_RCC_OscConfig+0x240>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d0f0      	beq.n	8005588 <HAL_RCC_OscConfig+0xc0>
 80055a6:	e014      	b.n	80055d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055a8:	f7fc ff4c 	bl	8002444 <HAL_GetTick>
 80055ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055ae:	e008      	b.n	80055c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055b0:	f7fc ff48 	bl	8002444 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b64      	cmp	r3, #100	; 0x64
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e1f3      	b.n	80059aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055c2:	4b51      	ldr	r3, [pc, #324]	; (8005708 <HAL_RCC_OscConfig+0x240>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1f0      	bne.n	80055b0 <HAL_RCC_OscConfig+0xe8>
 80055ce:	e000      	b.n	80055d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d063      	beq.n	80056a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055de:	4b4a      	ldr	r3, [pc, #296]	; (8005708 <HAL_RCC_OscConfig+0x240>)
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f003 030c 	and.w	r3, r3, #12
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00b      	beq.n	8005602 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055ea:	4b47      	ldr	r3, [pc, #284]	; (8005708 <HAL_RCC_OscConfig+0x240>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055f2:	2b08      	cmp	r3, #8
 80055f4:	d11c      	bne.n	8005630 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055f6:	4b44      	ldr	r3, [pc, #272]	; (8005708 <HAL_RCC_OscConfig+0x240>)
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d116      	bne.n	8005630 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005602:	4b41      	ldr	r3, [pc, #260]	; (8005708 <HAL_RCC_OscConfig+0x240>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d005      	beq.n	800561a <HAL_RCC_OscConfig+0x152>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d001      	beq.n	800561a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e1c7      	b.n	80059aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800561a:	4b3b      	ldr	r3, [pc, #236]	; (8005708 <HAL_RCC_OscConfig+0x240>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	00db      	lsls	r3, r3, #3
 8005628:	4937      	ldr	r1, [pc, #220]	; (8005708 <HAL_RCC_OscConfig+0x240>)
 800562a:	4313      	orrs	r3, r2
 800562c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800562e:	e03a      	b.n	80056a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d020      	beq.n	800567a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005638:	4b34      	ldr	r3, [pc, #208]	; (800570c <HAL_RCC_OscConfig+0x244>)
 800563a:	2201      	movs	r2, #1
 800563c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800563e:	f7fc ff01 	bl	8002444 <HAL_GetTick>
 8005642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005644:	e008      	b.n	8005658 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005646:	f7fc fefd 	bl	8002444 <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	2b02      	cmp	r3, #2
 8005652:	d901      	bls.n	8005658 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e1a8      	b.n	80059aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005658:	4b2b      	ldr	r3, [pc, #172]	; (8005708 <HAL_RCC_OscConfig+0x240>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0302 	and.w	r3, r3, #2
 8005660:	2b00      	cmp	r3, #0
 8005662:	d0f0      	beq.n	8005646 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005664:	4b28      	ldr	r3, [pc, #160]	; (8005708 <HAL_RCC_OscConfig+0x240>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	00db      	lsls	r3, r3, #3
 8005672:	4925      	ldr	r1, [pc, #148]	; (8005708 <HAL_RCC_OscConfig+0x240>)
 8005674:	4313      	orrs	r3, r2
 8005676:	600b      	str	r3, [r1, #0]
 8005678:	e015      	b.n	80056a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800567a:	4b24      	ldr	r3, [pc, #144]	; (800570c <HAL_RCC_OscConfig+0x244>)
 800567c:	2200      	movs	r2, #0
 800567e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005680:	f7fc fee0 	bl	8002444 <HAL_GetTick>
 8005684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005686:	e008      	b.n	800569a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005688:	f7fc fedc 	bl	8002444 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b02      	cmp	r3, #2
 8005694:	d901      	bls.n	800569a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e187      	b.n	80059aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800569a:	4b1b      	ldr	r3, [pc, #108]	; (8005708 <HAL_RCC_OscConfig+0x240>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1f0      	bne.n	8005688 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0308 	and.w	r3, r3, #8
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d036      	beq.n	8005720 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d016      	beq.n	80056e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056ba:	4b15      	ldr	r3, [pc, #84]	; (8005710 <HAL_RCC_OscConfig+0x248>)
 80056bc:	2201      	movs	r2, #1
 80056be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c0:	f7fc fec0 	bl	8002444 <HAL_GetTick>
 80056c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056c6:	e008      	b.n	80056da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056c8:	f7fc febc 	bl	8002444 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d901      	bls.n	80056da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e167      	b.n	80059aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056da:	4b0b      	ldr	r3, [pc, #44]	; (8005708 <HAL_RCC_OscConfig+0x240>)
 80056dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d0f0      	beq.n	80056c8 <HAL_RCC_OscConfig+0x200>
 80056e6:	e01b      	b.n	8005720 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056e8:	4b09      	ldr	r3, [pc, #36]	; (8005710 <HAL_RCC_OscConfig+0x248>)
 80056ea:	2200      	movs	r2, #0
 80056ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056ee:	f7fc fea9 	bl	8002444 <HAL_GetTick>
 80056f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056f4:	e00e      	b.n	8005714 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056f6:	f7fc fea5 	bl	8002444 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	2b02      	cmp	r3, #2
 8005702:	d907      	bls.n	8005714 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e150      	b.n	80059aa <HAL_RCC_OscConfig+0x4e2>
 8005708:	40023800 	.word	0x40023800
 800570c:	42470000 	.word	0x42470000
 8005710:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005714:	4b88      	ldr	r3, [pc, #544]	; (8005938 <HAL_RCC_OscConfig+0x470>)
 8005716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005718:	f003 0302 	and.w	r3, r3, #2
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1ea      	bne.n	80056f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0304 	and.w	r3, r3, #4
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 8097 	beq.w	800585c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800572e:	2300      	movs	r3, #0
 8005730:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005732:	4b81      	ldr	r3, [pc, #516]	; (8005938 <HAL_RCC_OscConfig+0x470>)
 8005734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10f      	bne.n	800575e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800573e:	2300      	movs	r3, #0
 8005740:	60bb      	str	r3, [r7, #8]
 8005742:	4b7d      	ldr	r3, [pc, #500]	; (8005938 <HAL_RCC_OscConfig+0x470>)
 8005744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005746:	4a7c      	ldr	r2, [pc, #496]	; (8005938 <HAL_RCC_OscConfig+0x470>)
 8005748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800574c:	6413      	str	r3, [r2, #64]	; 0x40
 800574e:	4b7a      	ldr	r3, [pc, #488]	; (8005938 <HAL_RCC_OscConfig+0x470>)
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005756:	60bb      	str	r3, [r7, #8]
 8005758:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800575a:	2301      	movs	r3, #1
 800575c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800575e:	4b77      	ldr	r3, [pc, #476]	; (800593c <HAL_RCC_OscConfig+0x474>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005766:	2b00      	cmp	r3, #0
 8005768:	d118      	bne.n	800579c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800576a:	4b74      	ldr	r3, [pc, #464]	; (800593c <HAL_RCC_OscConfig+0x474>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a73      	ldr	r2, [pc, #460]	; (800593c <HAL_RCC_OscConfig+0x474>)
 8005770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005774:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005776:	f7fc fe65 	bl	8002444 <HAL_GetTick>
 800577a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800577c:	e008      	b.n	8005790 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800577e:	f7fc fe61 	bl	8002444 <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	2b02      	cmp	r3, #2
 800578a:	d901      	bls.n	8005790 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e10c      	b.n	80059aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005790:	4b6a      	ldr	r3, [pc, #424]	; (800593c <HAL_RCC_OscConfig+0x474>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005798:	2b00      	cmp	r3, #0
 800579a:	d0f0      	beq.n	800577e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d106      	bne.n	80057b2 <HAL_RCC_OscConfig+0x2ea>
 80057a4:	4b64      	ldr	r3, [pc, #400]	; (8005938 <HAL_RCC_OscConfig+0x470>)
 80057a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a8:	4a63      	ldr	r2, [pc, #396]	; (8005938 <HAL_RCC_OscConfig+0x470>)
 80057aa:	f043 0301 	orr.w	r3, r3, #1
 80057ae:	6713      	str	r3, [r2, #112]	; 0x70
 80057b0:	e01c      	b.n	80057ec <HAL_RCC_OscConfig+0x324>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	2b05      	cmp	r3, #5
 80057b8:	d10c      	bne.n	80057d4 <HAL_RCC_OscConfig+0x30c>
 80057ba:	4b5f      	ldr	r3, [pc, #380]	; (8005938 <HAL_RCC_OscConfig+0x470>)
 80057bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057be:	4a5e      	ldr	r2, [pc, #376]	; (8005938 <HAL_RCC_OscConfig+0x470>)
 80057c0:	f043 0304 	orr.w	r3, r3, #4
 80057c4:	6713      	str	r3, [r2, #112]	; 0x70
 80057c6:	4b5c      	ldr	r3, [pc, #368]	; (8005938 <HAL_RCC_OscConfig+0x470>)
 80057c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ca:	4a5b      	ldr	r2, [pc, #364]	; (8005938 <HAL_RCC_OscConfig+0x470>)
 80057cc:	f043 0301 	orr.w	r3, r3, #1
 80057d0:	6713      	str	r3, [r2, #112]	; 0x70
 80057d2:	e00b      	b.n	80057ec <HAL_RCC_OscConfig+0x324>
 80057d4:	4b58      	ldr	r3, [pc, #352]	; (8005938 <HAL_RCC_OscConfig+0x470>)
 80057d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d8:	4a57      	ldr	r2, [pc, #348]	; (8005938 <HAL_RCC_OscConfig+0x470>)
 80057da:	f023 0301 	bic.w	r3, r3, #1
 80057de:	6713      	str	r3, [r2, #112]	; 0x70
 80057e0:	4b55      	ldr	r3, [pc, #340]	; (8005938 <HAL_RCC_OscConfig+0x470>)
 80057e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e4:	4a54      	ldr	r2, [pc, #336]	; (8005938 <HAL_RCC_OscConfig+0x470>)
 80057e6:	f023 0304 	bic.w	r3, r3, #4
 80057ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d015      	beq.n	8005820 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057f4:	f7fc fe26 	bl	8002444 <HAL_GetTick>
 80057f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057fa:	e00a      	b.n	8005812 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057fc:	f7fc fe22 	bl	8002444 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	f241 3288 	movw	r2, #5000	; 0x1388
 800580a:	4293      	cmp	r3, r2
 800580c:	d901      	bls.n	8005812 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e0cb      	b.n	80059aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005812:	4b49      	ldr	r3, [pc, #292]	; (8005938 <HAL_RCC_OscConfig+0x470>)
 8005814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005816:	f003 0302 	and.w	r3, r3, #2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d0ee      	beq.n	80057fc <HAL_RCC_OscConfig+0x334>
 800581e:	e014      	b.n	800584a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005820:	f7fc fe10 	bl	8002444 <HAL_GetTick>
 8005824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005826:	e00a      	b.n	800583e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005828:	f7fc fe0c 	bl	8002444 <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	f241 3288 	movw	r2, #5000	; 0x1388
 8005836:	4293      	cmp	r3, r2
 8005838:	d901      	bls.n	800583e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e0b5      	b.n	80059aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800583e:	4b3e      	ldr	r3, [pc, #248]	; (8005938 <HAL_RCC_OscConfig+0x470>)
 8005840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1ee      	bne.n	8005828 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800584a:	7dfb      	ldrb	r3, [r7, #23]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d105      	bne.n	800585c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005850:	4b39      	ldr	r3, [pc, #228]	; (8005938 <HAL_RCC_OscConfig+0x470>)
 8005852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005854:	4a38      	ldr	r2, [pc, #224]	; (8005938 <HAL_RCC_OscConfig+0x470>)
 8005856:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800585a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	2b00      	cmp	r3, #0
 8005862:	f000 80a1 	beq.w	80059a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005866:	4b34      	ldr	r3, [pc, #208]	; (8005938 <HAL_RCC_OscConfig+0x470>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f003 030c 	and.w	r3, r3, #12
 800586e:	2b08      	cmp	r3, #8
 8005870:	d05c      	beq.n	800592c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	2b02      	cmp	r3, #2
 8005878:	d141      	bne.n	80058fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800587a:	4b31      	ldr	r3, [pc, #196]	; (8005940 <HAL_RCC_OscConfig+0x478>)
 800587c:	2200      	movs	r2, #0
 800587e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005880:	f7fc fde0 	bl	8002444 <HAL_GetTick>
 8005884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005886:	e008      	b.n	800589a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005888:	f7fc fddc 	bl	8002444 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b02      	cmp	r3, #2
 8005894:	d901      	bls.n	800589a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e087      	b.n	80059aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800589a:	4b27      	ldr	r3, [pc, #156]	; (8005938 <HAL_RCC_OscConfig+0x470>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1f0      	bne.n	8005888 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	69da      	ldr	r2, [r3, #28]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	431a      	orrs	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	019b      	lsls	r3, r3, #6
 80058b6:	431a      	orrs	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058bc:	085b      	lsrs	r3, r3, #1
 80058be:	3b01      	subs	r3, #1
 80058c0:	041b      	lsls	r3, r3, #16
 80058c2:	431a      	orrs	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c8:	061b      	lsls	r3, r3, #24
 80058ca:	491b      	ldr	r1, [pc, #108]	; (8005938 <HAL_RCC_OscConfig+0x470>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058d0:	4b1b      	ldr	r3, [pc, #108]	; (8005940 <HAL_RCC_OscConfig+0x478>)
 80058d2:	2201      	movs	r2, #1
 80058d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058d6:	f7fc fdb5 	bl	8002444 <HAL_GetTick>
 80058da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058dc:	e008      	b.n	80058f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058de:	f7fc fdb1 	bl	8002444 <HAL_GetTick>
 80058e2:	4602      	mov	r2, r0
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d901      	bls.n	80058f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e05c      	b.n	80059aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058f0:	4b11      	ldr	r3, [pc, #68]	; (8005938 <HAL_RCC_OscConfig+0x470>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d0f0      	beq.n	80058de <HAL_RCC_OscConfig+0x416>
 80058fc:	e054      	b.n	80059a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058fe:	4b10      	ldr	r3, [pc, #64]	; (8005940 <HAL_RCC_OscConfig+0x478>)
 8005900:	2200      	movs	r2, #0
 8005902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005904:	f7fc fd9e 	bl	8002444 <HAL_GetTick>
 8005908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800590a:	e008      	b.n	800591e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800590c:	f7fc fd9a 	bl	8002444 <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	2b02      	cmp	r3, #2
 8005918:	d901      	bls.n	800591e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e045      	b.n	80059aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800591e:	4b06      	ldr	r3, [pc, #24]	; (8005938 <HAL_RCC_OscConfig+0x470>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1f0      	bne.n	800590c <HAL_RCC_OscConfig+0x444>
 800592a:	e03d      	b.n	80059a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d107      	bne.n	8005944 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e038      	b.n	80059aa <HAL_RCC_OscConfig+0x4e2>
 8005938:	40023800 	.word	0x40023800
 800593c:	40007000 	.word	0x40007000
 8005940:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005944:	4b1b      	ldr	r3, [pc, #108]	; (80059b4 <HAL_RCC_OscConfig+0x4ec>)
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d028      	beq.n	80059a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800595c:	429a      	cmp	r2, r3
 800595e:	d121      	bne.n	80059a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800596a:	429a      	cmp	r2, r3
 800596c:	d11a      	bne.n	80059a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005974:	4013      	ands	r3, r2
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800597a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800597c:	4293      	cmp	r3, r2
 800597e:	d111      	bne.n	80059a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598a:	085b      	lsrs	r3, r3, #1
 800598c:	3b01      	subs	r3, #1
 800598e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005990:	429a      	cmp	r2, r3
 8005992:	d107      	bne.n	80059a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d001      	beq.n	80059a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e000      	b.n	80059aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3718      	adds	r7, #24
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	40023800 	.word	0x40023800

080059b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e0cc      	b.n	8005b66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059cc:	4b68      	ldr	r3, [pc, #416]	; (8005b70 <HAL_RCC_ClockConfig+0x1b8>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0307 	and.w	r3, r3, #7
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d90c      	bls.n	80059f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059da:	4b65      	ldr	r3, [pc, #404]	; (8005b70 <HAL_RCC_ClockConfig+0x1b8>)
 80059dc:	683a      	ldr	r2, [r7, #0]
 80059de:	b2d2      	uxtb	r2, r2
 80059e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059e2:	4b63      	ldr	r3, [pc, #396]	; (8005b70 <HAL_RCC_ClockConfig+0x1b8>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0307 	and.w	r3, r3, #7
 80059ea:	683a      	ldr	r2, [r7, #0]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d001      	beq.n	80059f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e0b8      	b.n	8005b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0302 	and.w	r3, r3, #2
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d020      	beq.n	8005a42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0304 	and.w	r3, r3, #4
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d005      	beq.n	8005a18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a0c:	4b59      	ldr	r3, [pc, #356]	; (8005b74 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	4a58      	ldr	r2, [pc, #352]	; (8005b74 <HAL_RCC_ClockConfig+0x1bc>)
 8005a12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0308 	and.w	r3, r3, #8
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d005      	beq.n	8005a30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a24:	4b53      	ldr	r3, [pc, #332]	; (8005b74 <HAL_RCC_ClockConfig+0x1bc>)
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	4a52      	ldr	r2, [pc, #328]	; (8005b74 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a30:	4b50      	ldr	r3, [pc, #320]	; (8005b74 <HAL_RCC_ClockConfig+0x1bc>)
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	494d      	ldr	r1, [pc, #308]	; (8005b74 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d044      	beq.n	8005ad8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d107      	bne.n	8005a66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a56:	4b47      	ldr	r3, [pc, #284]	; (8005b74 <HAL_RCC_ClockConfig+0x1bc>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d119      	bne.n	8005a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e07f      	b.n	8005b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d003      	beq.n	8005a76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a72:	2b03      	cmp	r3, #3
 8005a74:	d107      	bne.n	8005a86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a76:	4b3f      	ldr	r3, [pc, #252]	; (8005b74 <HAL_RCC_ClockConfig+0x1bc>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d109      	bne.n	8005a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e06f      	b.n	8005b66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a86:	4b3b      	ldr	r3, [pc, #236]	; (8005b74 <HAL_RCC_ClockConfig+0x1bc>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e067      	b.n	8005b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a96:	4b37      	ldr	r3, [pc, #220]	; (8005b74 <HAL_RCC_ClockConfig+0x1bc>)
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f023 0203 	bic.w	r2, r3, #3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	4934      	ldr	r1, [pc, #208]	; (8005b74 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005aa8:	f7fc fccc 	bl	8002444 <HAL_GetTick>
 8005aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aae:	e00a      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ab0:	f7fc fcc8 	bl	8002444 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d901      	bls.n	8005ac6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e04f      	b.n	8005b66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ac6:	4b2b      	ldr	r3, [pc, #172]	; (8005b74 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f003 020c 	and.w	r2, r3, #12
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d1eb      	bne.n	8005ab0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ad8:	4b25      	ldr	r3, [pc, #148]	; (8005b70 <HAL_RCC_ClockConfig+0x1b8>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0307 	and.w	r3, r3, #7
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d20c      	bcs.n	8005b00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ae6:	4b22      	ldr	r3, [pc, #136]	; (8005b70 <HAL_RCC_ClockConfig+0x1b8>)
 8005ae8:	683a      	ldr	r2, [r7, #0]
 8005aea:	b2d2      	uxtb	r2, r2
 8005aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aee:	4b20      	ldr	r3, [pc, #128]	; (8005b70 <HAL_RCC_ClockConfig+0x1b8>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0307 	and.w	r3, r3, #7
 8005af6:	683a      	ldr	r2, [r7, #0]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d001      	beq.n	8005b00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e032      	b.n	8005b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0304 	and.w	r3, r3, #4
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d008      	beq.n	8005b1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b0c:	4b19      	ldr	r3, [pc, #100]	; (8005b74 <HAL_RCC_ClockConfig+0x1bc>)
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	4916      	ldr	r1, [pc, #88]	; (8005b74 <HAL_RCC_ClockConfig+0x1bc>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0308 	and.w	r3, r3, #8
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d009      	beq.n	8005b3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b2a:	4b12      	ldr	r3, [pc, #72]	; (8005b74 <HAL_RCC_ClockConfig+0x1bc>)
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	00db      	lsls	r3, r3, #3
 8005b38:	490e      	ldr	r1, [pc, #56]	; (8005b74 <HAL_RCC_ClockConfig+0x1bc>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b3e:	f000 f821 	bl	8005b84 <HAL_RCC_GetSysClockFreq>
 8005b42:	4602      	mov	r2, r0
 8005b44:	4b0b      	ldr	r3, [pc, #44]	; (8005b74 <HAL_RCC_ClockConfig+0x1bc>)
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	091b      	lsrs	r3, r3, #4
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	490a      	ldr	r1, [pc, #40]	; (8005b78 <HAL_RCC_ClockConfig+0x1c0>)
 8005b50:	5ccb      	ldrb	r3, [r1, r3]
 8005b52:	fa22 f303 	lsr.w	r3, r2, r3
 8005b56:	4a09      	ldr	r2, [pc, #36]	; (8005b7c <HAL_RCC_ClockConfig+0x1c4>)
 8005b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b5a:	4b09      	ldr	r3, [pc, #36]	; (8005b80 <HAL_RCC_ClockConfig+0x1c8>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7fc fc2c 	bl	80023bc <HAL_InitTick>

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	40023c00 	.word	0x40023c00
 8005b74:	40023800 	.word	0x40023800
 8005b78:	0801152c 	.word	0x0801152c
 8005b7c:	20000020 	.word	0x20000020
 8005b80:	20000024 	.word	0x20000024

08005b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b88:	b094      	sub	sp, #80	; 0x50
 8005b8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	647b      	str	r3, [r7, #68]	; 0x44
 8005b90:	2300      	movs	r3, #0
 8005b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b94:	2300      	movs	r3, #0
 8005b96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b9c:	4b79      	ldr	r3, [pc, #484]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f003 030c 	and.w	r3, r3, #12
 8005ba4:	2b08      	cmp	r3, #8
 8005ba6:	d00d      	beq.n	8005bc4 <HAL_RCC_GetSysClockFreq+0x40>
 8005ba8:	2b08      	cmp	r3, #8
 8005baa:	f200 80e1 	bhi.w	8005d70 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d002      	beq.n	8005bb8 <HAL_RCC_GetSysClockFreq+0x34>
 8005bb2:	2b04      	cmp	r3, #4
 8005bb4:	d003      	beq.n	8005bbe <HAL_RCC_GetSysClockFreq+0x3a>
 8005bb6:	e0db      	b.n	8005d70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005bb8:	4b73      	ldr	r3, [pc, #460]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x204>)
 8005bba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005bbc:	e0db      	b.n	8005d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005bbe:	4b73      	ldr	r3, [pc, #460]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x208>)
 8005bc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005bc2:	e0d8      	b.n	8005d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005bc4:	4b6f      	ldr	r3, [pc, #444]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bcc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bce:	4b6d      	ldr	r3, [pc, #436]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d063      	beq.n	8005ca2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bda:	4b6a      	ldr	r3, [pc, #424]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	099b      	lsrs	r3, r3, #6
 8005be0:	2200      	movs	r2, #0
 8005be2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005be4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bec:	633b      	str	r3, [r7, #48]	; 0x30
 8005bee:	2300      	movs	r3, #0
 8005bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8005bf2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005bf6:	4622      	mov	r2, r4
 8005bf8:	462b      	mov	r3, r5
 8005bfa:	f04f 0000 	mov.w	r0, #0
 8005bfe:	f04f 0100 	mov.w	r1, #0
 8005c02:	0159      	lsls	r1, r3, #5
 8005c04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c08:	0150      	lsls	r0, r2, #5
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	4621      	mov	r1, r4
 8005c10:	1a51      	subs	r1, r2, r1
 8005c12:	6139      	str	r1, [r7, #16]
 8005c14:	4629      	mov	r1, r5
 8005c16:	eb63 0301 	sbc.w	r3, r3, r1
 8005c1a:	617b      	str	r3, [r7, #20]
 8005c1c:	f04f 0200 	mov.w	r2, #0
 8005c20:	f04f 0300 	mov.w	r3, #0
 8005c24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c28:	4659      	mov	r1, fp
 8005c2a:	018b      	lsls	r3, r1, #6
 8005c2c:	4651      	mov	r1, sl
 8005c2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c32:	4651      	mov	r1, sl
 8005c34:	018a      	lsls	r2, r1, #6
 8005c36:	4651      	mov	r1, sl
 8005c38:	ebb2 0801 	subs.w	r8, r2, r1
 8005c3c:	4659      	mov	r1, fp
 8005c3e:	eb63 0901 	sbc.w	r9, r3, r1
 8005c42:	f04f 0200 	mov.w	r2, #0
 8005c46:	f04f 0300 	mov.w	r3, #0
 8005c4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c56:	4690      	mov	r8, r2
 8005c58:	4699      	mov	r9, r3
 8005c5a:	4623      	mov	r3, r4
 8005c5c:	eb18 0303 	adds.w	r3, r8, r3
 8005c60:	60bb      	str	r3, [r7, #8]
 8005c62:	462b      	mov	r3, r5
 8005c64:	eb49 0303 	adc.w	r3, r9, r3
 8005c68:	60fb      	str	r3, [r7, #12]
 8005c6a:	f04f 0200 	mov.w	r2, #0
 8005c6e:	f04f 0300 	mov.w	r3, #0
 8005c72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005c76:	4629      	mov	r1, r5
 8005c78:	024b      	lsls	r3, r1, #9
 8005c7a:	4621      	mov	r1, r4
 8005c7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c80:	4621      	mov	r1, r4
 8005c82:	024a      	lsls	r2, r1, #9
 8005c84:	4610      	mov	r0, r2
 8005c86:	4619      	mov	r1, r3
 8005c88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c94:	f7fa faf4 	bl	8000280 <__aeabi_uldivmod>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ca0:	e058      	b.n	8005d54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ca2:	4b38      	ldr	r3, [pc, #224]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	099b      	lsrs	r3, r3, #6
 8005ca8:	2200      	movs	r2, #0
 8005caa:	4618      	mov	r0, r3
 8005cac:	4611      	mov	r1, r2
 8005cae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005cb2:	623b      	str	r3, [r7, #32]
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8005cb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005cbc:	4642      	mov	r2, r8
 8005cbe:	464b      	mov	r3, r9
 8005cc0:	f04f 0000 	mov.w	r0, #0
 8005cc4:	f04f 0100 	mov.w	r1, #0
 8005cc8:	0159      	lsls	r1, r3, #5
 8005cca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cce:	0150      	lsls	r0, r2, #5
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	4641      	mov	r1, r8
 8005cd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8005cda:	4649      	mov	r1, r9
 8005cdc:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ce0:	f04f 0200 	mov.w	r2, #0
 8005ce4:	f04f 0300 	mov.w	r3, #0
 8005ce8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005cec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005cf0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005cf4:	ebb2 040a 	subs.w	r4, r2, sl
 8005cf8:	eb63 050b 	sbc.w	r5, r3, fp
 8005cfc:	f04f 0200 	mov.w	r2, #0
 8005d00:	f04f 0300 	mov.w	r3, #0
 8005d04:	00eb      	lsls	r3, r5, #3
 8005d06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d0a:	00e2      	lsls	r2, r4, #3
 8005d0c:	4614      	mov	r4, r2
 8005d0e:	461d      	mov	r5, r3
 8005d10:	4643      	mov	r3, r8
 8005d12:	18e3      	adds	r3, r4, r3
 8005d14:	603b      	str	r3, [r7, #0]
 8005d16:	464b      	mov	r3, r9
 8005d18:	eb45 0303 	adc.w	r3, r5, r3
 8005d1c:	607b      	str	r3, [r7, #4]
 8005d1e:	f04f 0200 	mov.w	r2, #0
 8005d22:	f04f 0300 	mov.w	r3, #0
 8005d26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d2a:	4629      	mov	r1, r5
 8005d2c:	028b      	lsls	r3, r1, #10
 8005d2e:	4621      	mov	r1, r4
 8005d30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d34:	4621      	mov	r1, r4
 8005d36:	028a      	lsls	r2, r1, #10
 8005d38:	4610      	mov	r0, r2
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d3e:	2200      	movs	r2, #0
 8005d40:	61bb      	str	r3, [r7, #24]
 8005d42:	61fa      	str	r2, [r7, #28]
 8005d44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d48:	f7fa fa9a 	bl	8000280 <__aeabi_uldivmod>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	460b      	mov	r3, r1
 8005d50:	4613      	mov	r3, r2
 8005d52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d54:	4b0b      	ldr	r3, [pc, #44]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	0c1b      	lsrs	r3, r3, #16
 8005d5a:	f003 0303 	and.w	r3, r3, #3
 8005d5e:	3301      	adds	r3, #1
 8005d60:	005b      	lsls	r3, r3, #1
 8005d62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005d64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d6e:	e002      	b.n	8005d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d70:	4b05      	ldr	r3, [pc, #20]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3750      	adds	r7, #80	; 0x50
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d82:	bf00      	nop
 8005d84:	40023800 	.word	0x40023800
 8005d88:	00f42400 	.word	0x00f42400
 8005d8c:	007a1200 	.word	0x007a1200

08005d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d90:	b480      	push	{r7}
 8005d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d94:	4b03      	ldr	r3, [pc, #12]	; (8005da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d96:	681b      	ldr	r3, [r3, #0]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	20000020 	.word	0x20000020

08005da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005dac:	f7ff fff0 	bl	8005d90 <HAL_RCC_GetHCLKFreq>
 8005db0:	4602      	mov	r2, r0
 8005db2:	4b05      	ldr	r3, [pc, #20]	; (8005dc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	0a9b      	lsrs	r3, r3, #10
 8005db8:	f003 0307 	and.w	r3, r3, #7
 8005dbc:	4903      	ldr	r1, [pc, #12]	; (8005dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dbe:	5ccb      	ldrb	r3, [r1, r3]
 8005dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	40023800 	.word	0x40023800
 8005dcc:	0801153c 	.word	0x0801153c

08005dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005dd4:	f7ff ffdc 	bl	8005d90 <HAL_RCC_GetHCLKFreq>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	4b05      	ldr	r3, [pc, #20]	; (8005df0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	0b5b      	lsrs	r3, r3, #13
 8005de0:	f003 0307 	and.w	r3, r3, #7
 8005de4:	4903      	ldr	r1, [pc, #12]	; (8005df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005de6:	5ccb      	ldrb	r3, [r1, r3]
 8005de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	40023800 	.word	0x40023800
 8005df4:	0801153c 	.word	0x0801153c

08005df8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e07b      	b.n	8005f02 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d108      	bne.n	8005e24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e1a:	d009      	beq.n	8005e30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	61da      	str	r2, [r3, #28]
 8005e22:	e005      	b.n	8005e30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d106      	bne.n	8005e50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7fc f810 	bl	8001e70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2202      	movs	r2, #2
 8005e54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005e78:	431a      	orrs	r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e82:	431a      	orrs	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	f003 0302 	and.w	r3, r3, #2
 8005e8c:	431a      	orrs	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	431a      	orrs	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ea0:	431a      	orrs	r2, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005eaa:	431a      	orrs	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a1b      	ldr	r3, [r3, #32]
 8005eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb4:	ea42 0103 	orr.w	r1, r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ebc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	0c1b      	lsrs	r3, r3, #16
 8005ece:	f003 0104 	and.w	r1, r3, #4
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed6:	f003 0210 	and.w	r2, r3, #16
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	69da      	ldr	r2, [r3, #28]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ef0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3708      	adds	r7, #8
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b088      	sub	sp, #32
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	60f8      	str	r0, [r7, #12]
 8005f12:	60b9      	str	r1, [r7, #8]
 8005f14:	603b      	str	r3, [r7, #0]
 8005f16:	4613      	mov	r3, r2
 8005f18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d101      	bne.n	8005f2c <HAL_SPI_Transmit+0x22>
 8005f28:	2302      	movs	r3, #2
 8005f2a:	e126      	b.n	800617a <HAL_SPI_Transmit+0x270>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f34:	f7fc fa86 	bl	8002444 <HAL_GetTick>
 8005f38:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005f3a:	88fb      	ldrh	r3, [r7, #6]
 8005f3c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d002      	beq.n	8005f50 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f4e:	e10b      	b.n	8006168 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d002      	beq.n	8005f5c <HAL_SPI_Transmit+0x52>
 8005f56:	88fb      	ldrh	r3, [r7, #6]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d102      	bne.n	8005f62 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f60:	e102      	b.n	8006168 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2203      	movs	r2, #3
 8005f66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	88fa      	ldrh	r2, [r7, #6]
 8005f7a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	88fa      	ldrh	r2, [r7, #6]
 8005f80:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fa8:	d10f      	bne.n	8005fca <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fb8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fc8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd4:	2b40      	cmp	r3, #64	; 0x40
 8005fd6:	d007      	beq.n	8005fe8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fe6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ff0:	d14b      	bne.n	800608a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d002      	beq.n	8006000 <HAL_SPI_Transmit+0xf6>
 8005ffa:	8afb      	ldrh	r3, [r7, #22]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d13e      	bne.n	800607e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006004:	881a      	ldrh	r2, [r3, #0]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006010:	1c9a      	adds	r2, r3, #2
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800601a:	b29b      	uxth	r3, r3
 800601c:	3b01      	subs	r3, #1
 800601e:	b29a      	uxth	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006024:	e02b      	b.n	800607e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f003 0302 	and.w	r3, r3, #2
 8006030:	2b02      	cmp	r3, #2
 8006032:	d112      	bne.n	800605a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006038:	881a      	ldrh	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006044:	1c9a      	adds	r2, r3, #2
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800604e:	b29b      	uxth	r3, r3
 8006050:	3b01      	subs	r3, #1
 8006052:	b29a      	uxth	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	86da      	strh	r2, [r3, #54]	; 0x36
 8006058:	e011      	b.n	800607e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800605a:	f7fc f9f3 	bl	8002444 <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	683a      	ldr	r2, [r7, #0]
 8006066:	429a      	cmp	r2, r3
 8006068:	d803      	bhi.n	8006072 <HAL_SPI_Transmit+0x168>
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006070:	d102      	bne.n	8006078 <HAL_SPI_Transmit+0x16e>
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d102      	bne.n	800607e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800607c:	e074      	b.n	8006168 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006082:	b29b      	uxth	r3, r3
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1ce      	bne.n	8006026 <HAL_SPI_Transmit+0x11c>
 8006088:	e04c      	b.n	8006124 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d002      	beq.n	8006098 <HAL_SPI_Transmit+0x18e>
 8006092:	8afb      	ldrh	r3, [r7, #22]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d140      	bne.n	800611a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	330c      	adds	r3, #12
 80060a2:	7812      	ldrb	r2, [r2, #0]
 80060a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060aa:	1c5a      	adds	r2, r3, #1
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	3b01      	subs	r3, #1
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80060be:	e02c      	b.n	800611a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d113      	bne.n	80060f6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	330c      	adds	r3, #12
 80060d8:	7812      	ldrb	r2, [r2, #0]
 80060da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e0:	1c5a      	adds	r2, r3, #1
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	3b01      	subs	r3, #1
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80060f4:	e011      	b.n	800611a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060f6:	f7fc f9a5 	bl	8002444 <HAL_GetTick>
 80060fa:	4602      	mov	r2, r0
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	683a      	ldr	r2, [r7, #0]
 8006102:	429a      	cmp	r2, r3
 8006104:	d803      	bhi.n	800610e <HAL_SPI_Transmit+0x204>
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800610c:	d102      	bne.n	8006114 <HAL_SPI_Transmit+0x20a>
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d102      	bne.n	800611a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006118:	e026      	b.n	8006168 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800611e:	b29b      	uxth	r3, r3
 8006120:	2b00      	cmp	r3, #0
 8006122:	d1cd      	bne.n	80060c0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	6839      	ldr	r1, [r7, #0]
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f000 fa55 	bl	80065d8 <SPI_EndRxTxTransaction>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d002      	beq.n	800613a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2220      	movs	r2, #32
 8006138:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10a      	bne.n	8006158 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006142:	2300      	movs	r3, #0
 8006144:	613b      	str	r3, [r7, #16]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	613b      	str	r3, [r7, #16]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	613b      	str	r3, [r7, #16]
 8006156:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800615c:	2b00      	cmp	r3, #0
 800615e:	d002      	beq.n	8006166 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	77fb      	strb	r3, [r7, #31]
 8006164:	e000      	b.n	8006168 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006166:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006178:	7ffb      	ldrb	r3, [r7, #31]
}
 800617a:	4618      	mov	r0, r3
 800617c:	3720      	adds	r7, #32
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b08c      	sub	sp, #48	; 0x30
 8006186:	af00      	add	r7, sp, #0
 8006188:	60f8      	str	r0, [r7, #12]
 800618a:	60b9      	str	r1, [r7, #8]
 800618c:	607a      	str	r2, [r7, #4]
 800618e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006190:	2301      	movs	r3, #1
 8006192:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006194:	2300      	movs	r3, #0
 8006196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d101      	bne.n	80061a8 <HAL_SPI_TransmitReceive+0x26>
 80061a4:	2302      	movs	r3, #2
 80061a6:	e18a      	b.n	80064be <HAL_SPI_TransmitReceive+0x33c>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061b0:	f7fc f948 	bl	8002444 <HAL_GetTick>
 80061b4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80061c6:	887b      	ldrh	r3, [r7, #2]
 80061c8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80061ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d00f      	beq.n	80061f2 <HAL_SPI_TransmitReceive+0x70>
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061d8:	d107      	bne.n	80061ea <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d103      	bne.n	80061ea <HAL_SPI_TransmitReceive+0x68>
 80061e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061e6:	2b04      	cmp	r3, #4
 80061e8:	d003      	beq.n	80061f2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80061ea:	2302      	movs	r3, #2
 80061ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80061f0:	e15b      	b.n	80064aa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d005      	beq.n	8006204 <HAL_SPI_TransmitReceive+0x82>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d002      	beq.n	8006204 <HAL_SPI_TransmitReceive+0x82>
 80061fe:	887b      	ldrh	r3, [r7, #2]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d103      	bne.n	800620c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800620a:	e14e      	b.n	80064aa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006212:	b2db      	uxtb	r3, r3
 8006214:	2b04      	cmp	r3, #4
 8006216:	d003      	beq.n	8006220 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2205      	movs	r2, #5
 800621c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	887a      	ldrh	r2, [r7, #2]
 8006230:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	887a      	ldrh	r2, [r7, #2]
 8006236:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	887a      	ldrh	r2, [r7, #2]
 8006242:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	887a      	ldrh	r2, [r7, #2]
 8006248:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006260:	2b40      	cmp	r3, #64	; 0x40
 8006262:	d007      	beq.n	8006274 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006272:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800627c:	d178      	bne.n	8006370 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d002      	beq.n	800628c <HAL_SPI_TransmitReceive+0x10a>
 8006286:	8b7b      	ldrh	r3, [r7, #26]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d166      	bne.n	800635a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006290:	881a      	ldrh	r2, [r3, #0]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629c:	1c9a      	adds	r2, r3, #2
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	3b01      	subs	r3, #1
 80062aa:	b29a      	uxth	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062b0:	e053      	b.n	800635a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f003 0302 	and.w	r3, r3, #2
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d11b      	bne.n	80062f8 <HAL_SPI_TransmitReceive+0x176>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d016      	beq.n	80062f8 <HAL_SPI_TransmitReceive+0x176>
 80062ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d113      	bne.n	80062f8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d4:	881a      	ldrh	r2, [r3, #0]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e0:	1c9a      	adds	r2, r3, #2
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	3b01      	subs	r3, #1
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062f4:	2300      	movs	r3, #0
 80062f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	2b01      	cmp	r3, #1
 8006304:	d119      	bne.n	800633a <HAL_SPI_TransmitReceive+0x1b8>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800630a:	b29b      	uxth	r3, r3
 800630c:	2b00      	cmp	r3, #0
 800630e:	d014      	beq.n	800633a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68da      	ldr	r2, [r3, #12]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631a:	b292      	uxth	r2, r2
 800631c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006322:	1c9a      	adds	r2, r3, #2
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800632c:	b29b      	uxth	r3, r3
 800632e:	3b01      	subs	r3, #1
 8006330:	b29a      	uxth	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006336:	2301      	movs	r3, #1
 8006338:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800633a:	f7fc f883 	bl	8002444 <HAL_GetTick>
 800633e:	4602      	mov	r2, r0
 8006340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006346:	429a      	cmp	r2, r3
 8006348:	d807      	bhi.n	800635a <HAL_SPI_TransmitReceive+0x1d8>
 800634a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006350:	d003      	beq.n	800635a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006358:	e0a7      	b.n	80064aa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800635e:	b29b      	uxth	r3, r3
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1a6      	bne.n	80062b2 <HAL_SPI_TransmitReceive+0x130>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006368:	b29b      	uxth	r3, r3
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1a1      	bne.n	80062b2 <HAL_SPI_TransmitReceive+0x130>
 800636e:	e07c      	b.n	800646a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d002      	beq.n	800637e <HAL_SPI_TransmitReceive+0x1fc>
 8006378:	8b7b      	ldrh	r3, [r7, #26]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d16b      	bne.n	8006456 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	330c      	adds	r3, #12
 8006388:	7812      	ldrb	r2, [r2, #0]
 800638a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006390:	1c5a      	adds	r2, r3, #1
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800639a:	b29b      	uxth	r3, r3
 800639c:	3b01      	subs	r3, #1
 800639e:	b29a      	uxth	r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063a4:	e057      	b.n	8006456 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	f003 0302 	and.w	r3, r3, #2
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d11c      	bne.n	80063ee <HAL_SPI_TransmitReceive+0x26c>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d017      	beq.n	80063ee <HAL_SPI_TransmitReceive+0x26c>
 80063be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d114      	bne.n	80063ee <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	330c      	adds	r3, #12
 80063ce:	7812      	ldrb	r2, [r2, #0]
 80063d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d6:	1c5a      	adds	r2, r3, #1
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	3b01      	subs	r3, #1
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063ea:	2300      	movs	r3, #0
 80063ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f003 0301 	and.w	r3, r3, #1
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d119      	bne.n	8006430 <HAL_SPI_TransmitReceive+0x2ae>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006400:	b29b      	uxth	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	d014      	beq.n	8006430 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68da      	ldr	r2, [r3, #12]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006410:	b2d2      	uxtb	r2, r2
 8006412:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006418:	1c5a      	adds	r2, r3, #1
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006422:	b29b      	uxth	r3, r3
 8006424:	3b01      	subs	r3, #1
 8006426:	b29a      	uxth	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800642c:	2301      	movs	r3, #1
 800642e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006430:	f7fc f808 	bl	8002444 <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800643c:	429a      	cmp	r2, r3
 800643e:	d803      	bhi.n	8006448 <HAL_SPI_TransmitReceive+0x2c6>
 8006440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006446:	d102      	bne.n	800644e <HAL_SPI_TransmitReceive+0x2cc>
 8006448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644a:	2b00      	cmp	r3, #0
 800644c:	d103      	bne.n	8006456 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006454:	e029      	b.n	80064aa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800645a:	b29b      	uxth	r3, r3
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1a2      	bne.n	80063a6 <HAL_SPI_TransmitReceive+0x224>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006464:	b29b      	uxth	r3, r3
 8006466:	2b00      	cmp	r3, #0
 8006468:	d19d      	bne.n	80063a6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800646a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800646c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f000 f8b2 	bl	80065d8 <SPI_EndRxTxTransaction>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d006      	beq.n	8006488 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2220      	movs	r2, #32
 8006484:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006486:	e010      	b.n	80064aa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10b      	bne.n	80064a8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006490:	2300      	movs	r3, #0
 8006492:	617b      	str	r3, [r7, #20]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	617b      	str	r3, [r7, #20]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	617b      	str	r3, [r7, #20]
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	e000      	b.n	80064aa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80064a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80064ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3730      	adds	r7, #48	; 0x30
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
	...

080064c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b088      	sub	sp, #32
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	603b      	str	r3, [r7, #0]
 80064d4:	4613      	mov	r3, r2
 80064d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80064d8:	f7fb ffb4 	bl	8002444 <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e0:	1a9b      	subs	r3, r3, r2
 80064e2:	683a      	ldr	r2, [r7, #0]
 80064e4:	4413      	add	r3, r2
 80064e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80064e8:	f7fb ffac 	bl	8002444 <HAL_GetTick>
 80064ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80064ee:	4b39      	ldr	r3, [pc, #228]	; (80065d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	015b      	lsls	r3, r3, #5
 80064f4:	0d1b      	lsrs	r3, r3, #20
 80064f6:	69fa      	ldr	r2, [r7, #28]
 80064f8:	fb02 f303 	mul.w	r3, r2, r3
 80064fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064fe:	e054      	b.n	80065aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006506:	d050      	beq.n	80065aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006508:	f7fb ff9c 	bl	8002444 <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	69fa      	ldr	r2, [r7, #28]
 8006514:	429a      	cmp	r2, r3
 8006516:	d902      	bls.n	800651e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d13d      	bne.n	800659a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	685a      	ldr	r2, [r3, #4]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800652c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006536:	d111      	bne.n	800655c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006540:	d004      	beq.n	800654c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800654a:	d107      	bne.n	800655c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800655a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006564:	d10f      	bne.n	8006586 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006574:	601a      	str	r2, [r3, #0]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006584:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e017      	b.n	80065ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d101      	bne.n	80065a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80065a0:	2300      	movs	r3, #0
 80065a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	3b01      	subs	r3, #1
 80065a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	689a      	ldr	r2, [r3, #8]
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	4013      	ands	r3, r2
 80065b4:	68ba      	ldr	r2, [r7, #8]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	bf0c      	ite	eq
 80065ba:	2301      	moveq	r3, #1
 80065bc:	2300      	movne	r3, #0
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	461a      	mov	r2, r3
 80065c2:	79fb      	ldrb	r3, [r7, #7]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d19b      	bne.n	8006500 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3720      	adds	r7, #32
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	20000020 	.word	0x20000020

080065d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b088      	sub	sp, #32
 80065dc:	af02      	add	r7, sp, #8
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80065e4:	4b1b      	ldr	r3, [pc, #108]	; (8006654 <SPI_EndRxTxTransaction+0x7c>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a1b      	ldr	r2, [pc, #108]	; (8006658 <SPI_EndRxTxTransaction+0x80>)
 80065ea:	fba2 2303 	umull	r2, r3, r2, r3
 80065ee:	0d5b      	lsrs	r3, r3, #21
 80065f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80065f4:	fb02 f303 	mul.w	r3, r2, r3
 80065f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006602:	d112      	bne.n	800662a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	9300      	str	r3, [sp, #0]
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	2200      	movs	r2, #0
 800660c:	2180      	movs	r1, #128	; 0x80
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f7ff ff5a 	bl	80064c8 <SPI_WaitFlagStateUntilTimeout>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d016      	beq.n	8006648 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800661e:	f043 0220 	orr.w	r2, r3, #32
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e00f      	b.n	800664a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00a      	beq.n	8006646 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	3b01      	subs	r3, #1
 8006634:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006640:	2b80      	cmp	r3, #128	; 0x80
 8006642:	d0f2      	beq.n	800662a <SPI_EndRxTxTransaction+0x52>
 8006644:	e000      	b.n	8006648 <SPI_EndRxTxTransaction+0x70>
        break;
 8006646:	bf00      	nop
  }

  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3718      	adds	r7, #24
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	20000020 	.word	0x20000020
 8006658:	165e9f81 	.word	0x165e9f81

0800665c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d101      	bne.n	800666e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e041      	b.n	80066f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b00      	cmp	r3, #0
 8006678:	d106      	bne.n	8006688 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7fb fc84 	bl	8001f90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2202      	movs	r2, #2
 800668c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	3304      	adds	r3, #4
 8006698:	4619      	mov	r1, r3
 800669a:	4610      	mov	r0, r2
 800669c:	f000 fa88 	bl	8006bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
	...

080066fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800670a:	b2db      	uxtb	r3, r3
 800670c:	2b01      	cmp	r3, #1
 800670e:	d001      	beq.n	8006714 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e044      	b.n	800679e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2202      	movs	r2, #2
 8006718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68da      	ldr	r2, [r3, #12]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f042 0201 	orr.w	r2, r2, #1
 800672a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a1e      	ldr	r2, [pc, #120]	; (80067ac <HAL_TIM_Base_Start_IT+0xb0>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d018      	beq.n	8006768 <HAL_TIM_Base_Start_IT+0x6c>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800673e:	d013      	beq.n	8006768 <HAL_TIM_Base_Start_IT+0x6c>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a1a      	ldr	r2, [pc, #104]	; (80067b0 <HAL_TIM_Base_Start_IT+0xb4>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d00e      	beq.n	8006768 <HAL_TIM_Base_Start_IT+0x6c>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a19      	ldr	r2, [pc, #100]	; (80067b4 <HAL_TIM_Base_Start_IT+0xb8>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d009      	beq.n	8006768 <HAL_TIM_Base_Start_IT+0x6c>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a17      	ldr	r2, [pc, #92]	; (80067b8 <HAL_TIM_Base_Start_IT+0xbc>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d004      	beq.n	8006768 <HAL_TIM_Base_Start_IT+0x6c>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a16      	ldr	r2, [pc, #88]	; (80067bc <HAL_TIM_Base_Start_IT+0xc0>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d111      	bne.n	800678c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f003 0307 	and.w	r3, r3, #7
 8006772:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2b06      	cmp	r3, #6
 8006778:	d010      	beq.n	800679c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f042 0201 	orr.w	r2, r2, #1
 8006788:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800678a:	e007      	b.n	800679c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f042 0201 	orr.w	r2, r2, #1
 800679a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3714      	adds	r7, #20
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	40010000 	.word	0x40010000
 80067b0:	40000400 	.word	0x40000400
 80067b4:	40000800 	.word	0x40000800
 80067b8:	40000c00 	.word	0x40000c00
 80067bc:	40014000 	.word	0x40014000

080067c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	f003 0302 	and.w	r3, r3, #2
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d122      	bne.n	800681c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	f003 0302 	and.w	r3, r3, #2
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d11b      	bne.n	800681c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f06f 0202 	mvn.w	r2, #2
 80067ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	f003 0303 	and.w	r3, r3, #3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f9b5 	bl	8006b72 <HAL_TIM_IC_CaptureCallback>
 8006808:	e005      	b.n	8006816 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f9a7 	bl	8006b5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 f9b8 	bl	8006b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	f003 0304 	and.w	r3, r3, #4
 8006826:	2b04      	cmp	r3, #4
 8006828:	d122      	bne.n	8006870 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	f003 0304 	and.w	r3, r3, #4
 8006834:	2b04      	cmp	r3, #4
 8006836:	d11b      	bne.n	8006870 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f06f 0204 	mvn.w	r2, #4
 8006840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2202      	movs	r2, #2
 8006846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f98b 	bl	8006b72 <HAL_TIM_IC_CaptureCallback>
 800685c:	e005      	b.n	800686a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f97d 	bl	8006b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 f98e 	bl	8006b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	f003 0308 	and.w	r3, r3, #8
 800687a:	2b08      	cmp	r3, #8
 800687c:	d122      	bne.n	80068c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	f003 0308 	and.w	r3, r3, #8
 8006888:	2b08      	cmp	r3, #8
 800688a:	d11b      	bne.n	80068c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f06f 0208 	mvn.w	r2, #8
 8006894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2204      	movs	r2, #4
 800689a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	69db      	ldr	r3, [r3, #28]
 80068a2:	f003 0303 	and.w	r3, r3, #3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d003      	beq.n	80068b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f961 	bl	8006b72 <HAL_TIM_IC_CaptureCallback>
 80068b0:	e005      	b.n	80068be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 f953 	bl	8006b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 f964 	bl	8006b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	f003 0310 	and.w	r3, r3, #16
 80068ce:	2b10      	cmp	r3, #16
 80068d0:	d122      	bne.n	8006918 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	f003 0310 	and.w	r3, r3, #16
 80068dc:	2b10      	cmp	r3, #16
 80068de:	d11b      	bne.n	8006918 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f06f 0210 	mvn.w	r2, #16
 80068e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2208      	movs	r2, #8
 80068ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	69db      	ldr	r3, [r3, #28]
 80068f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d003      	beq.n	8006906 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 f937 	bl	8006b72 <HAL_TIM_IC_CaptureCallback>
 8006904:	e005      	b.n	8006912 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f929 	bl	8006b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 f93a 	bl	8006b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b01      	cmp	r3, #1
 8006924:	d10e      	bne.n	8006944 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	f003 0301 	and.w	r3, r3, #1
 8006930:	2b01      	cmp	r3, #1
 8006932:	d107      	bne.n	8006944 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f06f 0201 	mvn.w	r2, #1
 800693c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f7fa fd90 	bl	8001464 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800694e:	2b80      	cmp	r3, #128	; 0x80
 8006950:	d10e      	bne.n	8006970 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800695c:	2b80      	cmp	r3, #128	; 0x80
 800695e:	d107      	bne.n	8006970 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fab2 	bl	8006ed4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800697a:	2b40      	cmp	r3, #64	; 0x40
 800697c:	d10e      	bne.n	800699c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006988:	2b40      	cmp	r3, #64	; 0x40
 800698a:	d107      	bne.n	800699c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f8ff 	bl	8006b9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	f003 0320 	and.w	r3, r3, #32
 80069a6:	2b20      	cmp	r3, #32
 80069a8:	d10e      	bne.n	80069c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	f003 0320 	and.w	r3, r3, #32
 80069b4:	2b20      	cmp	r3, #32
 80069b6:	d107      	bne.n	80069c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f06f 0220 	mvn.w	r2, #32
 80069c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fa7c 	bl	8006ec0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069c8:	bf00      	nop
 80069ca:	3708      	adds	r7, #8
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069da:	2300      	movs	r3, #0
 80069dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d101      	bne.n	80069ec <HAL_TIM_ConfigClockSource+0x1c>
 80069e8:	2302      	movs	r3, #2
 80069ea:	e0b4      	b.n	8006b56 <HAL_TIM_ConfigClockSource+0x186>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2202      	movs	r2, #2
 80069f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a24:	d03e      	beq.n	8006aa4 <HAL_TIM_ConfigClockSource+0xd4>
 8006a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a2a:	f200 8087 	bhi.w	8006b3c <HAL_TIM_ConfigClockSource+0x16c>
 8006a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a32:	f000 8086 	beq.w	8006b42 <HAL_TIM_ConfigClockSource+0x172>
 8006a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a3a:	d87f      	bhi.n	8006b3c <HAL_TIM_ConfigClockSource+0x16c>
 8006a3c:	2b70      	cmp	r3, #112	; 0x70
 8006a3e:	d01a      	beq.n	8006a76 <HAL_TIM_ConfigClockSource+0xa6>
 8006a40:	2b70      	cmp	r3, #112	; 0x70
 8006a42:	d87b      	bhi.n	8006b3c <HAL_TIM_ConfigClockSource+0x16c>
 8006a44:	2b60      	cmp	r3, #96	; 0x60
 8006a46:	d050      	beq.n	8006aea <HAL_TIM_ConfigClockSource+0x11a>
 8006a48:	2b60      	cmp	r3, #96	; 0x60
 8006a4a:	d877      	bhi.n	8006b3c <HAL_TIM_ConfigClockSource+0x16c>
 8006a4c:	2b50      	cmp	r3, #80	; 0x50
 8006a4e:	d03c      	beq.n	8006aca <HAL_TIM_ConfigClockSource+0xfa>
 8006a50:	2b50      	cmp	r3, #80	; 0x50
 8006a52:	d873      	bhi.n	8006b3c <HAL_TIM_ConfigClockSource+0x16c>
 8006a54:	2b40      	cmp	r3, #64	; 0x40
 8006a56:	d058      	beq.n	8006b0a <HAL_TIM_ConfigClockSource+0x13a>
 8006a58:	2b40      	cmp	r3, #64	; 0x40
 8006a5a:	d86f      	bhi.n	8006b3c <HAL_TIM_ConfigClockSource+0x16c>
 8006a5c:	2b30      	cmp	r3, #48	; 0x30
 8006a5e:	d064      	beq.n	8006b2a <HAL_TIM_ConfigClockSource+0x15a>
 8006a60:	2b30      	cmp	r3, #48	; 0x30
 8006a62:	d86b      	bhi.n	8006b3c <HAL_TIM_ConfigClockSource+0x16c>
 8006a64:	2b20      	cmp	r3, #32
 8006a66:	d060      	beq.n	8006b2a <HAL_TIM_ConfigClockSource+0x15a>
 8006a68:	2b20      	cmp	r3, #32
 8006a6a:	d867      	bhi.n	8006b3c <HAL_TIM_ConfigClockSource+0x16c>
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d05c      	beq.n	8006b2a <HAL_TIM_ConfigClockSource+0x15a>
 8006a70:	2b10      	cmp	r3, #16
 8006a72:	d05a      	beq.n	8006b2a <HAL_TIM_ConfigClockSource+0x15a>
 8006a74:	e062      	b.n	8006b3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6818      	ldr	r0, [r3, #0]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	6899      	ldr	r1, [r3, #8]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	685a      	ldr	r2, [r3, #4]
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	f000 f98d 	bl	8006da4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68ba      	ldr	r2, [r7, #8]
 8006aa0:	609a      	str	r2, [r3, #8]
      break;
 8006aa2:	e04f      	b.n	8006b44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6818      	ldr	r0, [r3, #0]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	6899      	ldr	r1, [r3, #8]
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	685a      	ldr	r2, [r3, #4]
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	f000 f976 	bl	8006da4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	689a      	ldr	r2, [r3, #8]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ac6:	609a      	str	r2, [r3, #8]
      break;
 8006ac8:	e03c      	b.n	8006b44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6818      	ldr	r0, [r3, #0]
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	6859      	ldr	r1, [r3, #4]
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	f000 f8ea 	bl	8006cb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2150      	movs	r1, #80	; 0x50
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 f943 	bl	8006d6e <TIM_ITRx_SetConfig>
      break;
 8006ae8:	e02c      	b.n	8006b44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6818      	ldr	r0, [r3, #0]
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	6859      	ldr	r1, [r3, #4]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	461a      	mov	r2, r3
 8006af8:	f000 f909 	bl	8006d0e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2160      	movs	r1, #96	; 0x60
 8006b02:	4618      	mov	r0, r3
 8006b04:	f000 f933 	bl	8006d6e <TIM_ITRx_SetConfig>
      break;
 8006b08:	e01c      	b.n	8006b44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6818      	ldr	r0, [r3, #0]
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	6859      	ldr	r1, [r3, #4]
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	461a      	mov	r2, r3
 8006b18:	f000 f8ca 	bl	8006cb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2140      	movs	r1, #64	; 0x40
 8006b22:	4618      	mov	r0, r3
 8006b24:	f000 f923 	bl	8006d6e <TIM_ITRx_SetConfig>
      break;
 8006b28:	e00c      	b.n	8006b44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4619      	mov	r1, r3
 8006b34:	4610      	mov	r0, r2
 8006b36:	f000 f91a 	bl	8006d6e <TIM_ITRx_SetConfig>
      break;
 8006b3a:	e003      	b.n	8006b44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b40:	e000      	b.n	8006b44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006b42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b083      	sub	sp, #12
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b66:	bf00      	nop
 8006b68:	370c      	adds	r7, #12
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b72:	b480      	push	{r7}
 8006b74:	b083      	sub	sp, #12
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b7a:	bf00      	nop
 8006b7c:	370c      	adds	r7, #12
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b86:	b480      	push	{r7}
 8006b88:	b083      	sub	sp, #12
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b8e:	bf00      	nop
 8006b90:	370c      	adds	r7, #12
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr

08006b9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b083      	sub	sp, #12
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ba2:	bf00      	nop
 8006ba4:	370c      	adds	r7, #12
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
	...

08006bb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a34      	ldr	r2, [pc, #208]	; (8006c94 <TIM_Base_SetConfig+0xe4>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d00f      	beq.n	8006be8 <TIM_Base_SetConfig+0x38>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bce:	d00b      	beq.n	8006be8 <TIM_Base_SetConfig+0x38>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4a31      	ldr	r2, [pc, #196]	; (8006c98 <TIM_Base_SetConfig+0xe8>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d007      	beq.n	8006be8 <TIM_Base_SetConfig+0x38>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4a30      	ldr	r2, [pc, #192]	; (8006c9c <TIM_Base_SetConfig+0xec>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d003      	beq.n	8006be8 <TIM_Base_SetConfig+0x38>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a2f      	ldr	r2, [pc, #188]	; (8006ca0 <TIM_Base_SetConfig+0xf0>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d108      	bne.n	8006bfa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a25      	ldr	r2, [pc, #148]	; (8006c94 <TIM_Base_SetConfig+0xe4>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d01b      	beq.n	8006c3a <TIM_Base_SetConfig+0x8a>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c08:	d017      	beq.n	8006c3a <TIM_Base_SetConfig+0x8a>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a22      	ldr	r2, [pc, #136]	; (8006c98 <TIM_Base_SetConfig+0xe8>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d013      	beq.n	8006c3a <TIM_Base_SetConfig+0x8a>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a21      	ldr	r2, [pc, #132]	; (8006c9c <TIM_Base_SetConfig+0xec>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d00f      	beq.n	8006c3a <TIM_Base_SetConfig+0x8a>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a20      	ldr	r2, [pc, #128]	; (8006ca0 <TIM_Base_SetConfig+0xf0>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d00b      	beq.n	8006c3a <TIM_Base_SetConfig+0x8a>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a1f      	ldr	r2, [pc, #124]	; (8006ca4 <TIM_Base_SetConfig+0xf4>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d007      	beq.n	8006c3a <TIM_Base_SetConfig+0x8a>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a1e      	ldr	r2, [pc, #120]	; (8006ca8 <TIM_Base_SetConfig+0xf8>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d003      	beq.n	8006c3a <TIM_Base_SetConfig+0x8a>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a1d      	ldr	r2, [pc, #116]	; (8006cac <TIM_Base_SetConfig+0xfc>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d108      	bne.n	8006c4c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	695b      	ldr	r3, [r3, #20]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	689a      	ldr	r2, [r3, #8]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a08      	ldr	r2, [pc, #32]	; (8006c94 <TIM_Base_SetConfig+0xe4>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d103      	bne.n	8006c80 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	691a      	ldr	r2, [r3, #16]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	615a      	str	r2, [r3, #20]
}
 8006c86:	bf00      	nop
 8006c88:	3714      	adds	r7, #20
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	40010000 	.word	0x40010000
 8006c98:	40000400 	.word	0x40000400
 8006c9c:	40000800 	.word	0x40000800
 8006ca0:	40000c00 	.word	0x40000c00
 8006ca4:	40014000 	.word	0x40014000
 8006ca8:	40014400 	.word	0x40014400
 8006cac:	40014800 	.word	0x40014800

08006cb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b087      	sub	sp, #28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6a1b      	ldr	r3, [r3, #32]
 8006cc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	f023 0201 	bic.w	r2, r3, #1
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	011b      	lsls	r3, r3, #4
 8006ce0:	693a      	ldr	r2, [r7, #16]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	f023 030a 	bic.w	r3, r3, #10
 8006cec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	693a      	ldr	r2, [r7, #16]
 8006cfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	621a      	str	r2, [r3, #32]
}
 8006d02:	bf00      	nop
 8006d04:	371c      	adds	r7, #28
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr

08006d0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d0e:	b480      	push	{r7}
 8006d10:	b087      	sub	sp, #28
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	60f8      	str	r0, [r7, #12]
 8006d16:	60b9      	str	r1, [r7, #8]
 8006d18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	f023 0210 	bic.w	r2, r3, #16
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6a1b      	ldr	r3, [r3, #32]
 8006d30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	031b      	lsls	r3, r3, #12
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	011b      	lsls	r3, r3, #4
 8006d50:	693a      	ldr	r2, [r7, #16]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	697a      	ldr	r2, [r7, #20]
 8006d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	621a      	str	r2, [r3, #32]
}
 8006d62:	bf00      	nop
 8006d64:	371c      	adds	r7, #28
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr

08006d6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d6e:	b480      	push	{r7}
 8006d70:	b085      	sub	sp, #20
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
 8006d76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d86:	683a      	ldr	r2, [r7, #0]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	f043 0307 	orr.w	r3, r3, #7
 8006d90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	609a      	str	r2, [r3, #8]
}
 8006d98:	bf00      	nop
 8006d9a:	3714      	adds	r7, #20
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b087      	sub	sp, #28
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
 8006db0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	021a      	lsls	r2, r3, #8
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	431a      	orrs	r2, r3
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	697a      	ldr	r2, [r7, #20]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	697a      	ldr	r2, [r7, #20]
 8006dd6:	609a      	str	r2, [r3, #8]
}
 8006dd8:	bf00      	nop
 8006dda:	371c      	adds	r7, #28
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d101      	bne.n	8006dfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006df8:	2302      	movs	r3, #2
 8006dfa:	e050      	b.n	8006e9e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2202      	movs	r2, #2
 8006e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a1c      	ldr	r2, [pc, #112]	; (8006eac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d018      	beq.n	8006e72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e48:	d013      	beq.n	8006e72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a18      	ldr	r2, [pc, #96]	; (8006eb0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d00e      	beq.n	8006e72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a16      	ldr	r2, [pc, #88]	; (8006eb4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d009      	beq.n	8006e72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a15      	ldr	r2, [pc, #84]	; (8006eb8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d004      	beq.n	8006e72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a13      	ldr	r2, [pc, #76]	; (8006ebc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d10c      	bne.n	8006e8c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	68ba      	ldr	r2, [r7, #8]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68ba      	ldr	r2, [r7, #8]
 8006e8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3714      	adds	r7, #20
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop
 8006eac:	40010000 	.word	0x40010000
 8006eb0:	40000400 	.word	0x40000400
 8006eb4:	40000800 	.word	0x40000800
 8006eb8:	40000c00 	.word	0x40000c00
 8006ebc:	40014000 	.word	0x40014000

08006ec0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006edc:	bf00      	nop
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d101      	bne.n	8006efa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e03f      	b.n	8006f7a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d106      	bne.n	8006f14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f7fb f882 	bl	8002018 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2224      	movs	r2, #36	; 0x24
 8006f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68da      	ldr	r2, [r3, #12]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 f929 	bl	8007184 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	691a      	ldr	r2, [r3, #16]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	695a      	ldr	r2, [r3, #20]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	68da      	ldr	r2, [r3, #12]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2220      	movs	r2, #32
 8006f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2220      	movs	r2, #32
 8006f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3708      	adds	r7, #8
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b08a      	sub	sp, #40	; 0x28
 8006f86:	af02      	add	r7, sp, #8
 8006f88:	60f8      	str	r0, [r7, #12]
 8006f8a:	60b9      	str	r1, [r7, #8]
 8006f8c:	603b      	str	r3, [r7, #0]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006f92:	2300      	movs	r3, #0
 8006f94:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	2b20      	cmp	r3, #32
 8006fa0:	d17c      	bne.n	800709c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d002      	beq.n	8006fae <HAL_UART_Transmit+0x2c>
 8006fa8:	88fb      	ldrh	r3, [r7, #6]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e075      	b.n	800709e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d101      	bne.n	8006fc0 <HAL_UART_Transmit+0x3e>
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	e06e      	b.n	800709e <HAL_UART_Transmit+0x11c>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2221      	movs	r2, #33	; 0x21
 8006fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006fd6:	f7fb fa35 	bl	8002444 <HAL_GetTick>
 8006fda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	88fa      	ldrh	r2, [r7, #6]
 8006fe0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	88fa      	ldrh	r2, [r7, #6]
 8006fe6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ff0:	d108      	bne.n	8007004 <HAL_UART_Transmit+0x82>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d104      	bne.n	8007004 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	61bb      	str	r3, [r7, #24]
 8007002:	e003      	b.n	800700c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007008:	2300      	movs	r3, #0
 800700a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007014:	e02a      	b.n	800706c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	2200      	movs	r2, #0
 800701e:	2180      	movs	r1, #128	; 0x80
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f000 f840 	bl	80070a6 <UART_WaitOnFlagUntilTimeout>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d001      	beq.n	8007030 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	e036      	b.n	800709e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d10b      	bne.n	800704e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	881b      	ldrh	r3, [r3, #0]
 800703a:	461a      	mov	r2, r3
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007044:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	3302      	adds	r3, #2
 800704a:	61bb      	str	r3, [r7, #24]
 800704c:	e007      	b.n	800705e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	781a      	ldrb	r2, [r3, #0]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	3301      	adds	r3, #1
 800705c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007062:	b29b      	uxth	r3, r3
 8007064:	3b01      	subs	r3, #1
 8007066:	b29a      	uxth	r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007070:	b29b      	uxth	r3, r3
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1cf      	bne.n	8007016 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	9300      	str	r3, [sp, #0]
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	2200      	movs	r2, #0
 800707e:	2140      	movs	r1, #64	; 0x40
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f000 f810 	bl	80070a6 <UART_WaitOnFlagUntilTimeout>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d001      	beq.n	8007090 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800708c:	2303      	movs	r3, #3
 800708e:	e006      	b.n	800709e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2220      	movs	r2, #32
 8007094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007098:	2300      	movs	r3, #0
 800709a:	e000      	b.n	800709e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800709c:	2302      	movs	r3, #2
  }
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3720      	adds	r7, #32
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b090      	sub	sp, #64	; 0x40
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	60f8      	str	r0, [r7, #12]
 80070ae:	60b9      	str	r1, [r7, #8]
 80070b0:	603b      	str	r3, [r7, #0]
 80070b2:	4613      	mov	r3, r2
 80070b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070b6:	e050      	b.n	800715a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070be:	d04c      	beq.n	800715a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80070c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d007      	beq.n	80070d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80070c6:	f7fb f9bd 	bl	8002444 <HAL_GetTick>
 80070ca:	4602      	mov	r2, r0
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	1ad3      	subs	r3, r2, r3
 80070d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d241      	bcs.n	800715a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	330c      	adds	r3, #12
 80070dc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e0:	e853 3f00 	ldrex	r3, [r3]
 80070e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	330c      	adds	r3, #12
 80070f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80070f6:	637a      	str	r2, [r7, #52]	; 0x34
 80070f8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070fe:	e841 2300 	strex	r3, r2, [r1]
 8007102:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1e5      	bne.n	80070d6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	3314      	adds	r3, #20
 8007110:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	e853 3f00 	ldrex	r3, [r3]
 8007118:	613b      	str	r3, [r7, #16]
   return(result);
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	f023 0301 	bic.w	r3, r3, #1
 8007120:	63bb      	str	r3, [r7, #56]	; 0x38
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	3314      	adds	r3, #20
 8007128:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800712a:	623a      	str	r2, [r7, #32]
 800712c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712e:	69f9      	ldr	r1, [r7, #28]
 8007130:	6a3a      	ldr	r2, [r7, #32]
 8007132:	e841 2300 	strex	r3, r2, [r1]
 8007136:	61bb      	str	r3, [r7, #24]
   return(result);
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1e5      	bne.n	800710a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2220      	movs	r2, #32
 8007142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2220      	movs	r2, #32
 800714a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e00f      	b.n	800717a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	4013      	ands	r3, r2
 8007164:	68ba      	ldr	r2, [r7, #8]
 8007166:	429a      	cmp	r2, r3
 8007168:	bf0c      	ite	eq
 800716a:	2301      	moveq	r3, #1
 800716c:	2300      	movne	r3, #0
 800716e:	b2db      	uxtb	r3, r3
 8007170:	461a      	mov	r2, r3
 8007172:	79fb      	ldrb	r3, [r7, #7]
 8007174:	429a      	cmp	r2, r3
 8007176:	d09f      	beq.n	80070b8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3740      	adds	r7, #64	; 0x40
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
	...

08007184 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007188:	b0c0      	sub	sp, #256	; 0x100
 800718a:	af00      	add	r7, sp, #0
 800718c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800719c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071a0:	68d9      	ldr	r1, [r3, #12]
 80071a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	ea40 0301 	orr.w	r3, r0, r1
 80071ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80071ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071b2:	689a      	ldr	r2, [r3, #8]
 80071b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	431a      	orrs	r2, r3
 80071bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071c0:	695b      	ldr	r3, [r3, #20]
 80071c2:	431a      	orrs	r2, r3
 80071c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071c8:	69db      	ldr	r3, [r3, #28]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80071d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80071dc:	f021 010c 	bic.w	r1, r1, #12
 80071e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80071ea:	430b      	orrs	r3, r1
 80071ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	695b      	ldr	r3, [r3, #20]
 80071f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80071fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071fe:	6999      	ldr	r1, [r3, #24]
 8007200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	ea40 0301 	orr.w	r3, r0, r1
 800720a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800720c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	4b8f      	ldr	r3, [pc, #572]	; (8007450 <UART_SetConfig+0x2cc>)
 8007214:	429a      	cmp	r2, r3
 8007216:	d005      	beq.n	8007224 <UART_SetConfig+0xa0>
 8007218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	4b8d      	ldr	r3, [pc, #564]	; (8007454 <UART_SetConfig+0x2d0>)
 8007220:	429a      	cmp	r2, r3
 8007222:	d104      	bne.n	800722e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007224:	f7fe fdd4 	bl	8005dd0 <HAL_RCC_GetPCLK2Freq>
 8007228:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800722c:	e003      	b.n	8007236 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800722e:	f7fe fdbb 	bl	8005da8 <HAL_RCC_GetPCLK1Freq>
 8007232:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800723a:	69db      	ldr	r3, [r3, #28]
 800723c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007240:	f040 810c 	bne.w	800745c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007244:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007248:	2200      	movs	r2, #0
 800724a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800724e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007252:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007256:	4622      	mov	r2, r4
 8007258:	462b      	mov	r3, r5
 800725a:	1891      	adds	r1, r2, r2
 800725c:	65b9      	str	r1, [r7, #88]	; 0x58
 800725e:	415b      	adcs	r3, r3
 8007260:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007262:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007266:	4621      	mov	r1, r4
 8007268:	eb12 0801 	adds.w	r8, r2, r1
 800726c:	4629      	mov	r1, r5
 800726e:	eb43 0901 	adc.w	r9, r3, r1
 8007272:	f04f 0200 	mov.w	r2, #0
 8007276:	f04f 0300 	mov.w	r3, #0
 800727a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800727e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007282:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007286:	4690      	mov	r8, r2
 8007288:	4699      	mov	r9, r3
 800728a:	4623      	mov	r3, r4
 800728c:	eb18 0303 	adds.w	r3, r8, r3
 8007290:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007294:	462b      	mov	r3, r5
 8007296:	eb49 0303 	adc.w	r3, r9, r3
 800729a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800729e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80072aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80072ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80072b2:	460b      	mov	r3, r1
 80072b4:	18db      	adds	r3, r3, r3
 80072b6:	653b      	str	r3, [r7, #80]	; 0x50
 80072b8:	4613      	mov	r3, r2
 80072ba:	eb42 0303 	adc.w	r3, r2, r3
 80072be:	657b      	str	r3, [r7, #84]	; 0x54
 80072c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80072c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80072c8:	f7f8 ffda 	bl	8000280 <__aeabi_uldivmod>
 80072cc:	4602      	mov	r2, r0
 80072ce:	460b      	mov	r3, r1
 80072d0:	4b61      	ldr	r3, [pc, #388]	; (8007458 <UART_SetConfig+0x2d4>)
 80072d2:	fba3 2302 	umull	r2, r3, r3, r2
 80072d6:	095b      	lsrs	r3, r3, #5
 80072d8:	011c      	lsls	r4, r3, #4
 80072da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072de:	2200      	movs	r2, #0
 80072e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80072e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80072ec:	4642      	mov	r2, r8
 80072ee:	464b      	mov	r3, r9
 80072f0:	1891      	adds	r1, r2, r2
 80072f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80072f4:	415b      	adcs	r3, r3
 80072f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80072fc:	4641      	mov	r1, r8
 80072fe:	eb12 0a01 	adds.w	sl, r2, r1
 8007302:	4649      	mov	r1, r9
 8007304:	eb43 0b01 	adc.w	fp, r3, r1
 8007308:	f04f 0200 	mov.w	r2, #0
 800730c:	f04f 0300 	mov.w	r3, #0
 8007310:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007314:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007318:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800731c:	4692      	mov	sl, r2
 800731e:	469b      	mov	fp, r3
 8007320:	4643      	mov	r3, r8
 8007322:	eb1a 0303 	adds.w	r3, sl, r3
 8007326:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800732a:	464b      	mov	r3, r9
 800732c:	eb4b 0303 	adc.w	r3, fp, r3
 8007330:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007340:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007344:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007348:	460b      	mov	r3, r1
 800734a:	18db      	adds	r3, r3, r3
 800734c:	643b      	str	r3, [r7, #64]	; 0x40
 800734e:	4613      	mov	r3, r2
 8007350:	eb42 0303 	adc.w	r3, r2, r3
 8007354:	647b      	str	r3, [r7, #68]	; 0x44
 8007356:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800735a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800735e:	f7f8 ff8f 	bl	8000280 <__aeabi_uldivmod>
 8007362:	4602      	mov	r2, r0
 8007364:	460b      	mov	r3, r1
 8007366:	4611      	mov	r1, r2
 8007368:	4b3b      	ldr	r3, [pc, #236]	; (8007458 <UART_SetConfig+0x2d4>)
 800736a:	fba3 2301 	umull	r2, r3, r3, r1
 800736e:	095b      	lsrs	r3, r3, #5
 8007370:	2264      	movs	r2, #100	; 0x64
 8007372:	fb02 f303 	mul.w	r3, r2, r3
 8007376:	1acb      	subs	r3, r1, r3
 8007378:	00db      	lsls	r3, r3, #3
 800737a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800737e:	4b36      	ldr	r3, [pc, #216]	; (8007458 <UART_SetConfig+0x2d4>)
 8007380:	fba3 2302 	umull	r2, r3, r3, r2
 8007384:	095b      	lsrs	r3, r3, #5
 8007386:	005b      	lsls	r3, r3, #1
 8007388:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800738c:	441c      	add	r4, r3
 800738e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007392:	2200      	movs	r2, #0
 8007394:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007398:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800739c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80073a0:	4642      	mov	r2, r8
 80073a2:	464b      	mov	r3, r9
 80073a4:	1891      	adds	r1, r2, r2
 80073a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80073a8:	415b      	adcs	r3, r3
 80073aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80073b0:	4641      	mov	r1, r8
 80073b2:	1851      	adds	r1, r2, r1
 80073b4:	6339      	str	r1, [r7, #48]	; 0x30
 80073b6:	4649      	mov	r1, r9
 80073b8:	414b      	adcs	r3, r1
 80073ba:	637b      	str	r3, [r7, #52]	; 0x34
 80073bc:	f04f 0200 	mov.w	r2, #0
 80073c0:	f04f 0300 	mov.w	r3, #0
 80073c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80073c8:	4659      	mov	r1, fp
 80073ca:	00cb      	lsls	r3, r1, #3
 80073cc:	4651      	mov	r1, sl
 80073ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073d2:	4651      	mov	r1, sl
 80073d4:	00ca      	lsls	r2, r1, #3
 80073d6:	4610      	mov	r0, r2
 80073d8:	4619      	mov	r1, r3
 80073da:	4603      	mov	r3, r0
 80073dc:	4642      	mov	r2, r8
 80073de:	189b      	adds	r3, r3, r2
 80073e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073e4:	464b      	mov	r3, r9
 80073e6:	460a      	mov	r2, r1
 80073e8:	eb42 0303 	adc.w	r3, r2, r3
 80073ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80073fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007400:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007404:	460b      	mov	r3, r1
 8007406:	18db      	adds	r3, r3, r3
 8007408:	62bb      	str	r3, [r7, #40]	; 0x28
 800740a:	4613      	mov	r3, r2
 800740c:	eb42 0303 	adc.w	r3, r2, r3
 8007410:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007412:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007416:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800741a:	f7f8 ff31 	bl	8000280 <__aeabi_uldivmod>
 800741e:	4602      	mov	r2, r0
 8007420:	460b      	mov	r3, r1
 8007422:	4b0d      	ldr	r3, [pc, #52]	; (8007458 <UART_SetConfig+0x2d4>)
 8007424:	fba3 1302 	umull	r1, r3, r3, r2
 8007428:	095b      	lsrs	r3, r3, #5
 800742a:	2164      	movs	r1, #100	; 0x64
 800742c:	fb01 f303 	mul.w	r3, r1, r3
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	00db      	lsls	r3, r3, #3
 8007434:	3332      	adds	r3, #50	; 0x32
 8007436:	4a08      	ldr	r2, [pc, #32]	; (8007458 <UART_SetConfig+0x2d4>)
 8007438:	fba2 2303 	umull	r2, r3, r2, r3
 800743c:	095b      	lsrs	r3, r3, #5
 800743e:	f003 0207 	and.w	r2, r3, #7
 8007442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4422      	add	r2, r4
 800744a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800744c:	e105      	b.n	800765a <UART_SetConfig+0x4d6>
 800744e:	bf00      	nop
 8007450:	40011000 	.word	0x40011000
 8007454:	40011400 	.word	0x40011400
 8007458:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800745c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007460:	2200      	movs	r2, #0
 8007462:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007466:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800746a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800746e:	4642      	mov	r2, r8
 8007470:	464b      	mov	r3, r9
 8007472:	1891      	adds	r1, r2, r2
 8007474:	6239      	str	r1, [r7, #32]
 8007476:	415b      	adcs	r3, r3
 8007478:	627b      	str	r3, [r7, #36]	; 0x24
 800747a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800747e:	4641      	mov	r1, r8
 8007480:	1854      	adds	r4, r2, r1
 8007482:	4649      	mov	r1, r9
 8007484:	eb43 0501 	adc.w	r5, r3, r1
 8007488:	f04f 0200 	mov.w	r2, #0
 800748c:	f04f 0300 	mov.w	r3, #0
 8007490:	00eb      	lsls	r3, r5, #3
 8007492:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007496:	00e2      	lsls	r2, r4, #3
 8007498:	4614      	mov	r4, r2
 800749a:	461d      	mov	r5, r3
 800749c:	4643      	mov	r3, r8
 800749e:	18e3      	adds	r3, r4, r3
 80074a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80074a4:	464b      	mov	r3, r9
 80074a6:	eb45 0303 	adc.w	r3, r5, r3
 80074aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80074ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80074ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80074be:	f04f 0200 	mov.w	r2, #0
 80074c2:	f04f 0300 	mov.w	r3, #0
 80074c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80074ca:	4629      	mov	r1, r5
 80074cc:	008b      	lsls	r3, r1, #2
 80074ce:	4621      	mov	r1, r4
 80074d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074d4:	4621      	mov	r1, r4
 80074d6:	008a      	lsls	r2, r1, #2
 80074d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80074dc:	f7f8 fed0 	bl	8000280 <__aeabi_uldivmod>
 80074e0:	4602      	mov	r2, r0
 80074e2:	460b      	mov	r3, r1
 80074e4:	4b60      	ldr	r3, [pc, #384]	; (8007668 <UART_SetConfig+0x4e4>)
 80074e6:	fba3 2302 	umull	r2, r3, r3, r2
 80074ea:	095b      	lsrs	r3, r3, #5
 80074ec:	011c      	lsls	r4, r3, #4
 80074ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074f2:	2200      	movs	r2, #0
 80074f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80074f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80074fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007500:	4642      	mov	r2, r8
 8007502:	464b      	mov	r3, r9
 8007504:	1891      	adds	r1, r2, r2
 8007506:	61b9      	str	r1, [r7, #24]
 8007508:	415b      	adcs	r3, r3
 800750a:	61fb      	str	r3, [r7, #28]
 800750c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007510:	4641      	mov	r1, r8
 8007512:	1851      	adds	r1, r2, r1
 8007514:	6139      	str	r1, [r7, #16]
 8007516:	4649      	mov	r1, r9
 8007518:	414b      	adcs	r3, r1
 800751a:	617b      	str	r3, [r7, #20]
 800751c:	f04f 0200 	mov.w	r2, #0
 8007520:	f04f 0300 	mov.w	r3, #0
 8007524:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007528:	4659      	mov	r1, fp
 800752a:	00cb      	lsls	r3, r1, #3
 800752c:	4651      	mov	r1, sl
 800752e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007532:	4651      	mov	r1, sl
 8007534:	00ca      	lsls	r2, r1, #3
 8007536:	4610      	mov	r0, r2
 8007538:	4619      	mov	r1, r3
 800753a:	4603      	mov	r3, r0
 800753c:	4642      	mov	r2, r8
 800753e:	189b      	adds	r3, r3, r2
 8007540:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007544:	464b      	mov	r3, r9
 8007546:	460a      	mov	r2, r1
 8007548:	eb42 0303 	adc.w	r3, r2, r3
 800754c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	67bb      	str	r3, [r7, #120]	; 0x78
 800755a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800755c:	f04f 0200 	mov.w	r2, #0
 8007560:	f04f 0300 	mov.w	r3, #0
 8007564:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007568:	4649      	mov	r1, r9
 800756a:	008b      	lsls	r3, r1, #2
 800756c:	4641      	mov	r1, r8
 800756e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007572:	4641      	mov	r1, r8
 8007574:	008a      	lsls	r2, r1, #2
 8007576:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800757a:	f7f8 fe81 	bl	8000280 <__aeabi_uldivmod>
 800757e:	4602      	mov	r2, r0
 8007580:	460b      	mov	r3, r1
 8007582:	4b39      	ldr	r3, [pc, #228]	; (8007668 <UART_SetConfig+0x4e4>)
 8007584:	fba3 1302 	umull	r1, r3, r3, r2
 8007588:	095b      	lsrs	r3, r3, #5
 800758a:	2164      	movs	r1, #100	; 0x64
 800758c:	fb01 f303 	mul.w	r3, r1, r3
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	011b      	lsls	r3, r3, #4
 8007594:	3332      	adds	r3, #50	; 0x32
 8007596:	4a34      	ldr	r2, [pc, #208]	; (8007668 <UART_SetConfig+0x4e4>)
 8007598:	fba2 2303 	umull	r2, r3, r2, r3
 800759c:	095b      	lsrs	r3, r3, #5
 800759e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075a2:	441c      	add	r4, r3
 80075a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075a8:	2200      	movs	r2, #0
 80075aa:	673b      	str	r3, [r7, #112]	; 0x70
 80075ac:	677a      	str	r2, [r7, #116]	; 0x74
 80075ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80075b2:	4642      	mov	r2, r8
 80075b4:	464b      	mov	r3, r9
 80075b6:	1891      	adds	r1, r2, r2
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	415b      	adcs	r3, r3
 80075bc:	60fb      	str	r3, [r7, #12]
 80075be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80075c2:	4641      	mov	r1, r8
 80075c4:	1851      	adds	r1, r2, r1
 80075c6:	6039      	str	r1, [r7, #0]
 80075c8:	4649      	mov	r1, r9
 80075ca:	414b      	adcs	r3, r1
 80075cc:	607b      	str	r3, [r7, #4]
 80075ce:	f04f 0200 	mov.w	r2, #0
 80075d2:	f04f 0300 	mov.w	r3, #0
 80075d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80075da:	4659      	mov	r1, fp
 80075dc:	00cb      	lsls	r3, r1, #3
 80075de:	4651      	mov	r1, sl
 80075e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075e4:	4651      	mov	r1, sl
 80075e6:	00ca      	lsls	r2, r1, #3
 80075e8:	4610      	mov	r0, r2
 80075ea:	4619      	mov	r1, r3
 80075ec:	4603      	mov	r3, r0
 80075ee:	4642      	mov	r2, r8
 80075f0:	189b      	adds	r3, r3, r2
 80075f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80075f4:	464b      	mov	r3, r9
 80075f6:	460a      	mov	r2, r1
 80075f8:	eb42 0303 	adc.w	r3, r2, r3
 80075fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	663b      	str	r3, [r7, #96]	; 0x60
 8007608:	667a      	str	r2, [r7, #100]	; 0x64
 800760a:	f04f 0200 	mov.w	r2, #0
 800760e:	f04f 0300 	mov.w	r3, #0
 8007612:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007616:	4649      	mov	r1, r9
 8007618:	008b      	lsls	r3, r1, #2
 800761a:	4641      	mov	r1, r8
 800761c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007620:	4641      	mov	r1, r8
 8007622:	008a      	lsls	r2, r1, #2
 8007624:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007628:	f7f8 fe2a 	bl	8000280 <__aeabi_uldivmod>
 800762c:	4602      	mov	r2, r0
 800762e:	460b      	mov	r3, r1
 8007630:	4b0d      	ldr	r3, [pc, #52]	; (8007668 <UART_SetConfig+0x4e4>)
 8007632:	fba3 1302 	umull	r1, r3, r3, r2
 8007636:	095b      	lsrs	r3, r3, #5
 8007638:	2164      	movs	r1, #100	; 0x64
 800763a:	fb01 f303 	mul.w	r3, r1, r3
 800763e:	1ad3      	subs	r3, r2, r3
 8007640:	011b      	lsls	r3, r3, #4
 8007642:	3332      	adds	r3, #50	; 0x32
 8007644:	4a08      	ldr	r2, [pc, #32]	; (8007668 <UART_SetConfig+0x4e4>)
 8007646:	fba2 2303 	umull	r2, r3, r2, r3
 800764a:	095b      	lsrs	r3, r3, #5
 800764c:	f003 020f 	and.w	r2, r3, #15
 8007650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4422      	add	r2, r4
 8007658:	609a      	str	r2, [r3, #8]
}
 800765a:	bf00      	nop
 800765c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007660:	46bd      	mov	sp, r7
 8007662:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007666:	bf00      	nop
 8007668:	51eb851f 	.word	0x51eb851f

0800766c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800766c:	b084      	sub	sp, #16
 800766e:	b580      	push	{r7, lr}
 8007670:	b084      	sub	sp, #16
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
 8007676:	f107 001c 	add.w	r0, r7, #28
 800767a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800767e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007680:	2b01      	cmp	r3, #1
 8007682:	d122      	bne.n	80076ca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007688:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007698:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80076ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d105      	bne.n	80076be <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f001 fbee 	bl	8008ea0 <USB_CoreReset>
 80076c4:	4603      	mov	r3, r0
 80076c6:	73fb      	strb	r3, [r7, #15]
 80076c8:	e01a      	b.n	8007700 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f001 fbe2 	bl	8008ea0 <USB_CoreReset>
 80076dc:	4603      	mov	r3, r0
 80076de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80076e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d106      	bne.n	80076f4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	639a      	str	r2, [r3, #56]	; 0x38
 80076f2:	e005      	b.n	8007700 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007702:	2b01      	cmp	r3, #1
 8007704:	d10b      	bne.n	800771e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f043 0206 	orr.w	r2, r3, #6
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	f043 0220 	orr.w	r2, r3, #32
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800771e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007720:	4618      	mov	r0, r3
 8007722:	3710      	adds	r7, #16
 8007724:	46bd      	mov	sp, r7
 8007726:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800772a:	b004      	add	sp, #16
 800772c:	4770      	bx	lr
	...

08007730 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007730:	b480      	push	{r7}
 8007732:	b087      	sub	sp, #28
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	4613      	mov	r3, r2
 800773c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800773e:	79fb      	ldrb	r3, [r7, #7]
 8007740:	2b02      	cmp	r3, #2
 8007742:	d165      	bne.n	8007810 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	4a41      	ldr	r2, [pc, #260]	; (800784c <USB_SetTurnaroundTime+0x11c>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d906      	bls.n	800775a <USB_SetTurnaroundTime+0x2a>
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	4a40      	ldr	r2, [pc, #256]	; (8007850 <USB_SetTurnaroundTime+0x120>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d202      	bcs.n	800775a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007754:	230f      	movs	r3, #15
 8007756:	617b      	str	r3, [r7, #20]
 8007758:	e062      	b.n	8007820 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	4a3c      	ldr	r2, [pc, #240]	; (8007850 <USB_SetTurnaroundTime+0x120>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d306      	bcc.n	8007770 <USB_SetTurnaroundTime+0x40>
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	4a3b      	ldr	r2, [pc, #236]	; (8007854 <USB_SetTurnaroundTime+0x124>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d202      	bcs.n	8007770 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800776a:	230e      	movs	r3, #14
 800776c:	617b      	str	r3, [r7, #20]
 800776e:	e057      	b.n	8007820 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	4a38      	ldr	r2, [pc, #224]	; (8007854 <USB_SetTurnaroundTime+0x124>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d306      	bcc.n	8007786 <USB_SetTurnaroundTime+0x56>
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	4a37      	ldr	r2, [pc, #220]	; (8007858 <USB_SetTurnaroundTime+0x128>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d202      	bcs.n	8007786 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007780:	230d      	movs	r3, #13
 8007782:	617b      	str	r3, [r7, #20]
 8007784:	e04c      	b.n	8007820 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	4a33      	ldr	r2, [pc, #204]	; (8007858 <USB_SetTurnaroundTime+0x128>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d306      	bcc.n	800779c <USB_SetTurnaroundTime+0x6c>
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	4a32      	ldr	r2, [pc, #200]	; (800785c <USB_SetTurnaroundTime+0x12c>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d802      	bhi.n	800779c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007796:	230c      	movs	r3, #12
 8007798:	617b      	str	r3, [r7, #20]
 800779a:	e041      	b.n	8007820 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	4a2f      	ldr	r2, [pc, #188]	; (800785c <USB_SetTurnaroundTime+0x12c>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d906      	bls.n	80077b2 <USB_SetTurnaroundTime+0x82>
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	4a2e      	ldr	r2, [pc, #184]	; (8007860 <USB_SetTurnaroundTime+0x130>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d802      	bhi.n	80077b2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80077ac:	230b      	movs	r3, #11
 80077ae:	617b      	str	r3, [r7, #20]
 80077b0:	e036      	b.n	8007820 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	4a2a      	ldr	r2, [pc, #168]	; (8007860 <USB_SetTurnaroundTime+0x130>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d906      	bls.n	80077c8 <USB_SetTurnaroundTime+0x98>
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	4a29      	ldr	r2, [pc, #164]	; (8007864 <USB_SetTurnaroundTime+0x134>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d802      	bhi.n	80077c8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80077c2:	230a      	movs	r3, #10
 80077c4:	617b      	str	r3, [r7, #20]
 80077c6:	e02b      	b.n	8007820 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	4a26      	ldr	r2, [pc, #152]	; (8007864 <USB_SetTurnaroundTime+0x134>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d906      	bls.n	80077de <USB_SetTurnaroundTime+0xae>
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	4a25      	ldr	r2, [pc, #148]	; (8007868 <USB_SetTurnaroundTime+0x138>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d202      	bcs.n	80077de <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80077d8:	2309      	movs	r3, #9
 80077da:	617b      	str	r3, [r7, #20]
 80077dc:	e020      	b.n	8007820 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	4a21      	ldr	r2, [pc, #132]	; (8007868 <USB_SetTurnaroundTime+0x138>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d306      	bcc.n	80077f4 <USB_SetTurnaroundTime+0xc4>
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	4a20      	ldr	r2, [pc, #128]	; (800786c <USB_SetTurnaroundTime+0x13c>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d802      	bhi.n	80077f4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80077ee:	2308      	movs	r3, #8
 80077f0:	617b      	str	r3, [r7, #20]
 80077f2:	e015      	b.n	8007820 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	4a1d      	ldr	r2, [pc, #116]	; (800786c <USB_SetTurnaroundTime+0x13c>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d906      	bls.n	800780a <USB_SetTurnaroundTime+0xda>
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	4a1c      	ldr	r2, [pc, #112]	; (8007870 <USB_SetTurnaroundTime+0x140>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d202      	bcs.n	800780a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007804:	2307      	movs	r3, #7
 8007806:	617b      	str	r3, [r7, #20]
 8007808:	e00a      	b.n	8007820 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800780a:	2306      	movs	r3, #6
 800780c:	617b      	str	r3, [r7, #20]
 800780e:	e007      	b.n	8007820 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007810:	79fb      	ldrb	r3, [r7, #7]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d102      	bne.n	800781c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007816:	2309      	movs	r3, #9
 8007818:	617b      	str	r3, [r7, #20]
 800781a:	e001      	b.n	8007820 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800781c:	2309      	movs	r3, #9
 800781e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	68da      	ldr	r2, [r3, #12]
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	029b      	lsls	r3, r3, #10
 8007834:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007838:	431a      	orrs	r2, r3
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	371c      	adds	r7, #28
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr
 800784c:	00d8acbf 	.word	0x00d8acbf
 8007850:	00e4e1c0 	.word	0x00e4e1c0
 8007854:	00f42400 	.word	0x00f42400
 8007858:	01067380 	.word	0x01067380
 800785c:	011a499f 	.word	0x011a499f
 8007860:	01312cff 	.word	0x01312cff
 8007864:	014ca43f 	.word	0x014ca43f
 8007868:	016e3600 	.word	0x016e3600
 800786c:	01a6ab1f 	.word	0x01a6ab1f
 8007870:	01e84800 	.word	0x01e84800

08007874 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	f043 0201 	orr.w	r2, r3, #1
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	370c      	adds	r7, #12
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr

08007896 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007896:	b480      	push	{r7}
 8007898:	b083      	sub	sp, #12
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	f023 0201 	bic.w	r2, r3, #1
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	460b      	mov	r3, r1
 80078c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80078c4:	2300      	movs	r3, #0
 80078c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80078d4:	78fb      	ldrb	r3, [r7, #3]
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d115      	bne.n	8007906 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80078e6:	2001      	movs	r0, #1
 80078e8:	f7fa fdb8 	bl	800245c <HAL_Delay>
      ms++;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	3301      	adds	r3, #1
 80078f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f001 fa45 	bl	8008d82 <USB_GetMode>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d01e      	beq.n	800793c <USB_SetCurrentMode+0x84>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2b31      	cmp	r3, #49	; 0x31
 8007902:	d9f0      	bls.n	80078e6 <USB_SetCurrentMode+0x2e>
 8007904:	e01a      	b.n	800793c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007906:	78fb      	ldrb	r3, [r7, #3]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d115      	bne.n	8007938 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007918:	2001      	movs	r0, #1
 800791a:	f7fa fd9f 	bl	800245c <HAL_Delay>
      ms++;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	3301      	adds	r3, #1
 8007922:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f001 fa2c 	bl	8008d82 <USB_GetMode>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d005      	beq.n	800793c <USB_SetCurrentMode+0x84>
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2b31      	cmp	r3, #49	; 0x31
 8007934:	d9f0      	bls.n	8007918 <USB_SetCurrentMode+0x60>
 8007936:	e001      	b.n	800793c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	e005      	b.n	8007948 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2b32      	cmp	r3, #50	; 0x32
 8007940:	d101      	bne.n	8007946 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e000      	b.n	8007948 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007946:	2300      	movs	r3, #0
}
 8007948:	4618      	mov	r0, r3
 800794a:	3710      	adds	r7, #16
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007950:	b084      	sub	sp, #16
 8007952:	b580      	push	{r7, lr}
 8007954:	b086      	sub	sp, #24
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
 800795a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800795e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007962:	2300      	movs	r3, #0
 8007964:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800796a:	2300      	movs	r3, #0
 800796c:	613b      	str	r3, [r7, #16]
 800796e:	e009      	b.n	8007984 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	3340      	adds	r3, #64	; 0x40
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	4413      	add	r3, r2
 800797a:	2200      	movs	r2, #0
 800797c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	3301      	adds	r3, #1
 8007982:	613b      	str	r3, [r7, #16]
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	2b0e      	cmp	r3, #14
 8007988:	d9f2      	bls.n	8007970 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800798a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800798c:	2b00      	cmp	r3, #0
 800798e:	d11c      	bne.n	80079ca <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800799e:	f043 0302 	orr.w	r3, r3, #2
 80079a2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	639a      	str	r2, [r3, #56]	; 0x38
 80079c8:	e00b      	b.n	80079e2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ce:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079da:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80079e8:	461a      	mov	r2, r3
 80079ea:	2300      	movs	r3, #0
 80079ec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079f4:	4619      	mov	r1, r3
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079fc:	461a      	mov	r2, r3
 80079fe:	680b      	ldr	r3, [r1, #0]
 8007a00:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d10c      	bne.n	8007a22 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d104      	bne.n	8007a18 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007a0e:	2100      	movs	r1, #0
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 f965 	bl	8007ce0 <USB_SetDevSpeed>
 8007a16:	e008      	b.n	8007a2a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007a18:	2101      	movs	r1, #1
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 f960 	bl	8007ce0 <USB_SetDevSpeed>
 8007a20:	e003      	b.n	8007a2a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007a22:	2103      	movs	r1, #3
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 f95b 	bl	8007ce0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007a2a:	2110      	movs	r1, #16
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 f8f3 	bl	8007c18 <USB_FlushTxFifo>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d001      	beq.n	8007a3c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 f91f 	bl	8007c80 <USB_FlushRxFifo>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d001      	beq.n	8007a4c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a52:	461a      	mov	r2, r3
 8007a54:	2300      	movs	r3, #0
 8007a56:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a5e:	461a      	mov	r2, r3
 8007a60:	2300      	movs	r3, #0
 8007a62:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a70:	2300      	movs	r3, #0
 8007a72:	613b      	str	r3, [r7, #16]
 8007a74:	e043      	b.n	8007afe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	015a      	lsls	r2, r3, #5
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a8c:	d118      	bne.n	8007ac0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d10a      	bne.n	8007aaa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	015a      	lsls	r2, r3, #5
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007aa6:	6013      	str	r3, [r2, #0]
 8007aa8:	e013      	b.n	8007ad2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	015a      	lsls	r2, r3, #5
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007abc:	6013      	str	r3, [r2, #0]
 8007abe:	e008      	b.n	8007ad2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	015a      	lsls	r2, r3, #5
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007acc:	461a      	mov	r2, r3
 8007ace:	2300      	movs	r3, #0
 8007ad0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	015a      	lsls	r2, r3, #5
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	4413      	add	r3, r2
 8007ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ade:	461a      	mov	r2, r3
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	015a      	lsls	r2, r3, #5
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	4413      	add	r3, r2
 8007aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007af0:	461a      	mov	r2, r3
 8007af2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007af6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	3301      	adds	r3, #1
 8007afc:	613b      	str	r3, [r7, #16]
 8007afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b00:	693a      	ldr	r2, [r7, #16]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d3b7      	bcc.n	8007a76 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b06:	2300      	movs	r3, #0
 8007b08:	613b      	str	r3, [r7, #16]
 8007b0a:	e043      	b.n	8007b94 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	015a      	lsls	r2, r3, #5
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	4413      	add	r3, r2
 8007b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b22:	d118      	bne.n	8007b56 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d10a      	bne.n	8007b40 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	015a      	lsls	r2, r3, #5
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	4413      	add	r3, r2
 8007b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b36:	461a      	mov	r2, r3
 8007b38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b3c:	6013      	str	r3, [r2, #0]
 8007b3e:	e013      	b.n	8007b68 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	015a      	lsls	r2, r3, #5
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	4413      	add	r3, r2
 8007b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007b52:	6013      	str	r3, [r2, #0]
 8007b54:	e008      	b.n	8007b68 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	015a      	lsls	r2, r3, #5
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b62:	461a      	mov	r2, r3
 8007b64:	2300      	movs	r3, #0
 8007b66:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	015a      	lsls	r2, r3, #5
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	4413      	add	r3, r2
 8007b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b74:	461a      	mov	r2, r3
 8007b76:	2300      	movs	r3, #0
 8007b78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	015a      	lsls	r2, r3, #5
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	4413      	add	r3, r2
 8007b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b86:	461a      	mov	r2, r3
 8007b88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	3301      	adds	r3, #1
 8007b92:	613b      	str	r3, [r7, #16]
 8007b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b96:	693a      	ldr	r2, [r7, #16]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d3b7      	bcc.n	8007b0c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007baa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007bbc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d105      	bne.n	8007bd0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	699b      	ldr	r3, [r3, #24]
 8007bc8:	f043 0210 	orr.w	r2, r3, #16
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	699a      	ldr	r2, [r3, #24]
 8007bd4:	4b0f      	ldr	r3, [pc, #60]	; (8007c14 <USB_DevInit+0x2c4>)
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d005      	beq.n	8007bee <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	699b      	ldr	r3, [r3, #24]
 8007be6:	f043 0208 	orr.w	r2, r3, #8
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d107      	bne.n	8007c04 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	699b      	ldr	r3, [r3, #24]
 8007bf8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007bfc:	f043 0304 	orr.w	r3, r3, #4
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3718      	adds	r7, #24
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c10:	b004      	add	sp, #16
 8007c12:	4770      	bx	lr
 8007c14:	803c3800 	.word	0x803c3800

08007c18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b085      	sub	sp, #20
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007c22:	2300      	movs	r3, #0
 8007c24:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	4a13      	ldr	r2, [pc, #76]	; (8007c7c <USB_FlushTxFifo+0x64>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d901      	bls.n	8007c38 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007c34:	2303      	movs	r3, #3
 8007c36:	e01b      	b.n	8007c70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	691b      	ldr	r3, [r3, #16]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	daf2      	bge.n	8007c26 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007c40:	2300      	movs	r3, #0
 8007c42:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	019b      	lsls	r3, r3, #6
 8007c48:	f043 0220 	orr.w	r2, r3, #32
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	3301      	adds	r3, #1
 8007c54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	4a08      	ldr	r2, [pc, #32]	; (8007c7c <USB_FlushTxFifo+0x64>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d901      	bls.n	8007c62 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e006      	b.n	8007c70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	f003 0320 	and.w	r3, r3, #32
 8007c6a:	2b20      	cmp	r3, #32
 8007c6c:	d0f0      	beq.n	8007c50 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3714      	adds	r7, #20
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr
 8007c7c:	00030d40 	.word	0x00030d40

08007c80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	4a11      	ldr	r2, [pc, #68]	; (8007cdc <USB_FlushRxFifo+0x5c>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d901      	bls.n	8007c9e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e018      	b.n	8007cd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	daf2      	bge.n	8007c8c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2210      	movs	r2, #16
 8007cae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	4a08      	ldr	r2, [pc, #32]	; (8007cdc <USB_FlushRxFifo+0x5c>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d901      	bls.n	8007cc2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007cbe:	2303      	movs	r3, #3
 8007cc0:	e006      	b.n	8007cd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	691b      	ldr	r3, [r3, #16]
 8007cc6:	f003 0310 	and.w	r3, r3, #16
 8007cca:	2b10      	cmp	r3, #16
 8007ccc:	d0f0      	beq.n	8007cb0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007cce:	2300      	movs	r3, #0
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3714      	adds	r7, #20
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr
 8007cdc:	00030d40 	.word	0x00030d40

08007ce0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	460b      	mov	r3, r1
 8007cea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	78fb      	ldrb	r3, [r7, #3]
 8007cfa:	68f9      	ldr	r1, [r7, #12]
 8007cfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d00:	4313      	orrs	r3, r2
 8007d02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3714      	adds	r7, #20
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007d12:	b480      	push	{r7}
 8007d14:	b087      	sub	sp, #28
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	f003 0306 	and.w	r3, r3, #6
 8007d2a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d102      	bne.n	8007d38 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007d32:	2300      	movs	r3, #0
 8007d34:	75fb      	strb	r3, [r7, #23]
 8007d36:	e00a      	b.n	8007d4e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	d002      	beq.n	8007d44 <USB_GetDevSpeed+0x32>
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2b06      	cmp	r3, #6
 8007d42:	d102      	bne.n	8007d4a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007d44:	2302      	movs	r3, #2
 8007d46:	75fb      	strb	r3, [r7, #23]
 8007d48:	e001      	b.n	8007d4e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007d4a:	230f      	movs	r3, #15
 8007d4c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	371c      	adds	r7, #28
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	785b      	ldrb	r3, [r3, #1]
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d13a      	bne.n	8007dee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d7e:	69da      	ldr	r2, [r3, #28]
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	f003 030f 	and.w	r3, r3, #15
 8007d88:	2101      	movs	r1, #1
 8007d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	68f9      	ldr	r1, [r7, #12]
 8007d92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d96:	4313      	orrs	r3, r2
 8007d98:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	015a      	lsls	r2, r3, #5
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	4413      	add	r3, r2
 8007da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d155      	bne.n	8007e5c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	015a      	lsls	r2, r3, #5
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	4413      	add	r3, r2
 8007db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	791b      	ldrb	r3, [r3, #4]
 8007dca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007dcc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	059b      	lsls	r3, r3, #22
 8007dd2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	68ba      	ldr	r2, [r7, #8]
 8007dd8:	0151      	lsls	r1, r2, #5
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	440a      	add	r2, r1
 8007dde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dea:	6013      	str	r3, [r2, #0]
 8007dec:	e036      	b.n	8007e5c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007df4:	69da      	ldr	r2, [r3, #28]
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	f003 030f 	and.w	r3, r3, #15
 8007dfe:	2101      	movs	r1, #1
 8007e00:	fa01 f303 	lsl.w	r3, r1, r3
 8007e04:	041b      	lsls	r3, r3, #16
 8007e06:	68f9      	ldr	r1, [r7, #12]
 8007e08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	015a      	lsls	r2, r3, #5
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	4413      	add	r3, r2
 8007e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d11a      	bne.n	8007e5c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	015a      	lsls	r2, r3, #5
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	791b      	ldrb	r3, [r3, #4]
 8007e40:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007e42:	430b      	orrs	r3, r1
 8007e44:	4313      	orrs	r3, r2
 8007e46:	68ba      	ldr	r2, [r7, #8]
 8007e48:	0151      	lsls	r1, r2, #5
 8007e4a:	68fa      	ldr	r2, [r7, #12]
 8007e4c:	440a      	add	r2, r1
 8007e4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e5a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3714      	adds	r7, #20
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr
	...

08007e6c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b085      	sub	sp, #20
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	785b      	ldrb	r3, [r3, #1]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d161      	bne.n	8007f4c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	015a      	lsls	r2, r3, #5
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	4413      	add	r3, r2
 8007e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e9e:	d11f      	bne.n	8007ee0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	015a      	lsls	r2, r3, #5
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68ba      	ldr	r2, [r7, #8]
 8007eb0:	0151      	lsls	r1, r2, #5
 8007eb2:	68fa      	ldr	r2, [r7, #12]
 8007eb4:	440a      	add	r2, r1
 8007eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007ebe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	015a      	lsls	r2, r3, #5
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68ba      	ldr	r2, [r7, #8]
 8007ed0:	0151      	lsls	r1, r2, #5
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	440a      	add	r2, r1
 8007ed6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ede:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ee6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	f003 030f 	and.w	r3, r3, #15
 8007ef0:	2101      	movs	r1, #1
 8007ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	43db      	mvns	r3, r3
 8007efa:	68f9      	ldr	r1, [r7, #12]
 8007efc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f00:	4013      	ands	r3, r2
 8007f02:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f0a:	69da      	ldr	r2, [r3, #28]
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	f003 030f 	and.w	r3, r3, #15
 8007f14:	2101      	movs	r1, #1
 8007f16:	fa01 f303 	lsl.w	r3, r1, r3
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	43db      	mvns	r3, r3
 8007f1e:	68f9      	ldr	r1, [r7, #12]
 8007f20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f24:	4013      	ands	r3, r2
 8007f26:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	015a      	lsls	r2, r3, #5
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	4413      	add	r3, r2
 8007f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	0159      	lsls	r1, r3, #5
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	440b      	add	r3, r1
 8007f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f42:	4619      	mov	r1, r3
 8007f44:	4b35      	ldr	r3, [pc, #212]	; (800801c <USB_DeactivateEndpoint+0x1b0>)
 8007f46:	4013      	ands	r3, r2
 8007f48:	600b      	str	r3, [r1, #0]
 8007f4a:	e060      	b.n	800800e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	015a      	lsls	r2, r3, #5
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	4413      	add	r3, r2
 8007f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f62:	d11f      	bne.n	8007fa4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	015a      	lsls	r2, r3, #5
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	4413      	add	r3, r2
 8007f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68ba      	ldr	r2, [r7, #8]
 8007f74:	0151      	lsls	r1, r2, #5
 8007f76:	68fa      	ldr	r2, [r7, #12]
 8007f78:	440a      	add	r2, r1
 8007f7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f82:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	015a      	lsls	r2, r3, #5
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	68ba      	ldr	r2, [r7, #8]
 8007f94:	0151      	lsls	r1, r2, #5
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	440a      	add	r2, r1
 8007f9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fa2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007faa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	f003 030f 	and.w	r3, r3, #15
 8007fb4:	2101      	movs	r1, #1
 8007fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8007fba:	041b      	lsls	r3, r3, #16
 8007fbc:	43db      	mvns	r3, r3
 8007fbe:	68f9      	ldr	r1, [r7, #12]
 8007fc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fc4:	4013      	ands	r3, r2
 8007fc6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fce:	69da      	ldr	r2, [r3, #28]
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	f003 030f 	and.w	r3, r3, #15
 8007fd8:	2101      	movs	r1, #1
 8007fda:	fa01 f303 	lsl.w	r3, r1, r3
 8007fde:	041b      	lsls	r3, r3, #16
 8007fe0:	43db      	mvns	r3, r3
 8007fe2:	68f9      	ldr	r1, [r7, #12]
 8007fe4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fe8:	4013      	ands	r3, r2
 8007fea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	015a      	lsls	r2, r3, #5
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	0159      	lsls	r1, r3, #5
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	440b      	add	r3, r1
 8008002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008006:	4619      	mov	r1, r3
 8008008:	4b05      	ldr	r3, [pc, #20]	; (8008020 <USB_DeactivateEndpoint+0x1b4>)
 800800a:	4013      	ands	r3, r2
 800800c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	3714      	adds	r7, #20
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr
 800801c:	ec337800 	.word	0xec337800
 8008020:	eff37800 	.word	0xeff37800

08008024 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b08a      	sub	sp, #40	; 0x28
 8008028:	af02      	add	r7, sp, #8
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	4613      	mov	r3, r2
 8008030:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	785b      	ldrb	r3, [r3, #1]
 8008040:	2b01      	cmp	r3, #1
 8008042:	f040 815c 	bne.w	80082fe <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d132      	bne.n	80080b4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800804e:	69bb      	ldr	r3, [r7, #24]
 8008050:	015a      	lsls	r2, r3, #5
 8008052:	69fb      	ldr	r3, [r7, #28]
 8008054:	4413      	add	r3, r2
 8008056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	69ba      	ldr	r2, [r7, #24]
 800805e:	0151      	lsls	r1, r2, #5
 8008060:	69fa      	ldr	r2, [r7, #28]
 8008062:	440a      	add	r2, r1
 8008064:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008068:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800806c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008070:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008072:	69bb      	ldr	r3, [r7, #24]
 8008074:	015a      	lsls	r2, r3, #5
 8008076:	69fb      	ldr	r3, [r7, #28]
 8008078:	4413      	add	r3, r2
 800807a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	69ba      	ldr	r2, [r7, #24]
 8008082:	0151      	lsls	r1, r2, #5
 8008084:	69fa      	ldr	r2, [r7, #28]
 8008086:	440a      	add	r2, r1
 8008088:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800808c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008090:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	015a      	lsls	r2, r3, #5
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	4413      	add	r3, r2
 800809a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	69ba      	ldr	r2, [r7, #24]
 80080a2:	0151      	lsls	r1, r2, #5
 80080a4:	69fa      	ldr	r2, [r7, #28]
 80080a6:	440a      	add	r2, r1
 80080a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080ac:	0cdb      	lsrs	r3, r3, #19
 80080ae:	04db      	lsls	r3, r3, #19
 80080b0:	6113      	str	r3, [r2, #16]
 80080b2:	e074      	b.n	800819e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	015a      	lsls	r2, r3, #5
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	4413      	add	r3, r2
 80080bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080c0:	691b      	ldr	r3, [r3, #16]
 80080c2:	69ba      	ldr	r2, [r7, #24]
 80080c4:	0151      	lsls	r1, r2, #5
 80080c6:	69fa      	ldr	r2, [r7, #28]
 80080c8:	440a      	add	r2, r1
 80080ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080ce:	0cdb      	lsrs	r3, r3, #19
 80080d0:	04db      	lsls	r3, r3, #19
 80080d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	015a      	lsls	r2, r3, #5
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	4413      	add	r3, r2
 80080dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	69ba      	ldr	r2, [r7, #24]
 80080e4:	0151      	lsls	r1, r2, #5
 80080e6:	69fa      	ldr	r2, [r7, #28]
 80080e8:	440a      	add	r2, r1
 80080ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80080f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80080f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	015a      	lsls	r2, r3, #5
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	4413      	add	r3, r2
 8008100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008104:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	6999      	ldr	r1, [r3, #24]
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	440b      	add	r3, r1
 8008110:	1e59      	subs	r1, r3, #1
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	fbb1 f3f3 	udiv	r3, r1, r3
 800811a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800811c:	4b9d      	ldr	r3, [pc, #628]	; (8008394 <USB_EPStartXfer+0x370>)
 800811e:	400b      	ands	r3, r1
 8008120:	69b9      	ldr	r1, [r7, #24]
 8008122:	0148      	lsls	r0, r1, #5
 8008124:	69f9      	ldr	r1, [r7, #28]
 8008126:	4401      	add	r1, r0
 8008128:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800812c:	4313      	orrs	r3, r2
 800812e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008130:	69bb      	ldr	r3, [r7, #24]
 8008132:	015a      	lsls	r2, r3, #5
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	4413      	add	r3, r2
 8008138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800813c:	691a      	ldr	r2, [r3, #16]
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	699b      	ldr	r3, [r3, #24]
 8008142:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008146:	69b9      	ldr	r1, [r7, #24]
 8008148:	0148      	lsls	r0, r1, #5
 800814a:	69f9      	ldr	r1, [r7, #28]
 800814c:	4401      	add	r1, r0
 800814e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008152:	4313      	orrs	r3, r2
 8008154:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	791b      	ldrb	r3, [r3, #4]
 800815a:	2b01      	cmp	r3, #1
 800815c:	d11f      	bne.n	800819e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800815e:	69bb      	ldr	r3, [r7, #24]
 8008160:	015a      	lsls	r2, r3, #5
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	4413      	add	r3, r2
 8008166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800816a:	691b      	ldr	r3, [r3, #16]
 800816c:	69ba      	ldr	r2, [r7, #24]
 800816e:	0151      	lsls	r1, r2, #5
 8008170:	69fa      	ldr	r2, [r7, #28]
 8008172:	440a      	add	r2, r1
 8008174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008178:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800817c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	015a      	lsls	r2, r3, #5
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	4413      	add	r3, r2
 8008186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800818a:	691b      	ldr	r3, [r3, #16]
 800818c:	69ba      	ldr	r2, [r7, #24]
 800818e:	0151      	lsls	r1, r2, #5
 8008190:	69fa      	ldr	r2, [r7, #28]
 8008192:	440a      	add	r2, r1
 8008194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008198:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800819c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800819e:	79fb      	ldrb	r3, [r7, #7]
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d14b      	bne.n	800823c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	695b      	ldr	r3, [r3, #20]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d009      	beq.n	80081c0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	015a      	lsls	r2, r3, #5
 80081b0:	69fb      	ldr	r3, [r7, #28]
 80081b2:	4413      	add	r3, r2
 80081b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081b8:	461a      	mov	r2, r3
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	695b      	ldr	r3, [r3, #20]
 80081be:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	791b      	ldrb	r3, [r3, #4]
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d128      	bne.n	800821a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d110      	bne.n	80081fa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80081d8:	69bb      	ldr	r3, [r7, #24]
 80081da:	015a      	lsls	r2, r3, #5
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	4413      	add	r3, r2
 80081e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	69ba      	ldr	r2, [r7, #24]
 80081e8:	0151      	lsls	r1, r2, #5
 80081ea:	69fa      	ldr	r2, [r7, #28]
 80081ec:	440a      	add	r2, r1
 80081ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80081f6:	6013      	str	r3, [r2, #0]
 80081f8:	e00f      	b.n	800821a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	015a      	lsls	r2, r3, #5
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	4413      	add	r3, r2
 8008202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	69ba      	ldr	r2, [r7, #24]
 800820a:	0151      	lsls	r1, r2, #5
 800820c:	69fa      	ldr	r2, [r7, #28]
 800820e:	440a      	add	r2, r1
 8008210:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008218:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	015a      	lsls	r2, r3, #5
 800821e:	69fb      	ldr	r3, [r7, #28]
 8008220:	4413      	add	r3, r2
 8008222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	69ba      	ldr	r2, [r7, #24]
 800822a:	0151      	lsls	r1, r2, #5
 800822c:	69fa      	ldr	r2, [r7, #28]
 800822e:	440a      	add	r2, r1
 8008230:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008234:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008238:	6013      	str	r3, [r2, #0]
 800823a:	e133      	b.n	80084a4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800823c:	69bb      	ldr	r3, [r7, #24]
 800823e:	015a      	lsls	r2, r3, #5
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	4413      	add	r3, r2
 8008244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	69ba      	ldr	r2, [r7, #24]
 800824c:	0151      	lsls	r1, r2, #5
 800824e:	69fa      	ldr	r2, [r7, #28]
 8008250:	440a      	add	r2, r1
 8008252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008256:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800825a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	791b      	ldrb	r3, [r3, #4]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d015      	beq.n	8008290 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	699b      	ldr	r3, [r3, #24]
 8008268:	2b00      	cmp	r3, #0
 800826a:	f000 811b 	beq.w	80084a4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008274:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	f003 030f 	and.w	r3, r3, #15
 800827e:	2101      	movs	r1, #1
 8008280:	fa01 f303 	lsl.w	r3, r1, r3
 8008284:	69f9      	ldr	r1, [r7, #28]
 8008286:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800828a:	4313      	orrs	r3, r2
 800828c:	634b      	str	r3, [r1, #52]	; 0x34
 800828e:	e109      	b.n	80084a4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800829c:	2b00      	cmp	r3, #0
 800829e:	d110      	bne.n	80082c2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	015a      	lsls	r2, r3, #5
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	4413      	add	r3, r2
 80082a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	69ba      	ldr	r2, [r7, #24]
 80082b0:	0151      	lsls	r1, r2, #5
 80082b2:	69fa      	ldr	r2, [r7, #28]
 80082b4:	440a      	add	r2, r1
 80082b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80082be:	6013      	str	r3, [r2, #0]
 80082c0:	e00f      	b.n	80082e2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	015a      	lsls	r2, r3, #5
 80082c6:	69fb      	ldr	r3, [r7, #28]
 80082c8:	4413      	add	r3, r2
 80082ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	69ba      	ldr	r2, [r7, #24]
 80082d2:	0151      	lsls	r1, r2, #5
 80082d4:	69fa      	ldr	r2, [r7, #28]
 80082d6:	440a      	add	r2, r1
 80082d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082e0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	6919      	ldr	r1, [r3, #16]
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	781a      	ldrb	r2, [r3, #0]
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	699b      	ldr	r3, [r3, #24]
 80082ee:	b298      	uxth	r0, r3
 80082f0:	79fb      	ldrb	r3, [r7, #7]
 80082f2:	9300      	str	r3, [sp, #0]
 80082f4:	4603      	mov	r3, r0
 80082f6:	68f8      	ldr	r0, [r7, #12]
 80082f8:	f000 fade 	bl	80088b8 <USB_WritePacket>
 80082fc:	e0d2      	b.n	80084a4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80082fe:	69bb      	ldr	r3, [r7, #24]
 8008300:	015a      	lsls	r2, r3, #5
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	4413      	add	r3, r2
 8008306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800830a:	691b      	ldr	r3, [r3, #16]
 800830c:	69ba      	ldr	r2, [r7, #24]
 800830e:	0151      	lsls	r1, r2, #5
 8008310:	69fa      	ldr	r2, [r7, #28]
 8008312:	440a      	add	r2, r1
 8008314:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008318:	0cdb      	lsrs	r3, r3, #19
 800831a:	04db      	lsls	r3, r3, #19
 800831c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	015a      	lsls	r2, r3, #5
 8008322:	69fb      	ldr	r3, [r7, #28]
 8008324:	4413      	add	r3, r2
 8008326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800832a:	691b      	ldr	r3, [r3, #16]
 800832c:	69ba      	ldr	r2, [r7, #24]
 800832e:	0151      	lsls	r1, r2, #5
 8008330:	69fa      	ldr	r2, [r7, #28]
 8008332:	440a      	add	r2, r1
 8008334:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008338:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800833c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008340:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	699b      	ldr	r3, [r3, #24]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d126      	bne.n	8008398 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	015a      	lsls	r2, r3, #5
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	4413      	add	r3, r2
 8008352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008356:	691a      	ldr	r2, [r3, #16]
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008360:	69b9      	ldr	r1, [r7, #24]
 8008362:	0148      	lsls	r0, r1, #5
 8008364:	69f9      	ldr	r1, [r7, #28]
 8008366:	4401      	add	r1, r0
 8008368:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800836c:	4313      	orrs	r3, r2
 800836e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	015a      	lsls	r2, r3, #5
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	4413      	add	r3, r2
 8008378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800837c:	691b      	ldr	r3, [r3, #16]
 800837e:	69ba      	ldr	r2, [r7, #24]
 8008380:	0151      	lsls	r1, r2, #5
 8008382:	69fa      	ldr	r2, [r7, #28]
 8008384:	440a      	add	r2, r1
 8008386:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800838a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800838e:	6113      	str	r3, [r2, #16]
 8008390:	e03a      	b.n	8008408 <USB_EPStartXfer+0x3e4>
 8008392:	bf00      	nop
 8008394:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	699a      	ldr	r2, [r3, #24]
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	4413      	add	r3, r2
 80083a2:	1e5a      	subs	r2, r3, #1
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ac:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	8afa      	ldrh	r2, [r7, #22]
 80083b4:	fb03 f202 	mul.w	r2, r3, r2
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80083bc:	69bb      	ldr	r3, [r7, #24]
 80083be:	015a      	lsls	r2, r3, #5
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	4413      	add	r3, r2
 80083c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083c8:	691a      	ldr	r2, [r3, #16]
 80083ca:	8afb      	ldrh	r3, [r7, #22]
 80083cc:	04d9      	lsls	r1, r3, #19
 80083ce:	4b38      	ldr	r3, [pc, #224]	; (80084b0 <USB_EPStartXfer+0x48c>)
 80083d0:	400b      	ands	r3, r1
 80083d2:	69b9      	ldr	r1, [r7, #24]
 80083d4:	0148      	lsls	r0, r1, #5
 80083d6:	69f9      	ldr	r1, [r7, #28]
 80083d8:	4401      	add	r1, r0
 80083da:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80083de:	4313      	orrs	r3, r2
 80083e0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	015a      	lsls	r2, r3, #5
 80083e6:	69fb      	ldr	r3, [r7, #28]
 80083e8:	4413      	add	r3, r2
 80083ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ee:	691a      	ldr	r2, [r3, #16]
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	69db      	ldr	r3, [r3, #28]
 80083f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083f8:	69b9      	ldr	r1, [r7, #24]
 80083fa:	0148      	lsls	r0, r1, #5
 80083fc:	69f9      	ldr	r1, [r7, #28]
 80083fe:	4401      	add	r1, r0
 8008400:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008404:	4313      	orrs	r3, r2
 8008406:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008408:	79fb      	ldrb	r3, [r7, #7]
 800840a:	2b01      	cmp	r3, #1
 800840c:	d10d      	bne.n	800842a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d009      	beq.n	800842a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	6919      	ldr	r1, [r3, #16]
 800841a:	69bb      	ldr	r3, [r7, #24]
 800841c:	015a      	lsls	r2, r3, #5
 800841e:	69fb      	ldr	r3, [r7, #28]
 8008420:	4413      	add	r3, r2
 8008422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008426:	460a      	mov	r2, r1
 8008428:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	791b      	ldrb	r3, [r3, #4]
 800842e:	2b01      	cmp	r3, #1
 8008430:	d128      	bne.n	8008484 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800843e:	2b00      	cmp	r3, #0
 8008440:	d110      	bne.n	8008464 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	015a      	lsls	r2, r3, #5
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	4413      	add	r3, r2
 800844a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	69ba      	ldr	r2, [r7, #24]
 8008452:	0151      	lsls	r1, r2, #5
 8008454:	69fa      	ldr	r2, [r7, #28]
 8008456:	440a      	add	r2, r1
 8008458:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800845c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008460:	6013      	str	r3, [r2, #0]
 8008462:	e00f      	b.n	8008484 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008464:	69bb      	ldr	r3, [r7, #24]
 8008466:	015a      	lsls	r2, r3, #5
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	4413      	add	r3, r2
 800846c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	69ba      	ldr	r2, [r7, #24]
 8008474:	0151      	lsls	r1, r2, #5
 8008476:	69fa      	ldr	r2, [r7, #28]
 8008478:	440a      	add	r2, r1
 800847a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800847e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008482:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	015a      	lsls	r2, r3, #5
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	4413      	add	r3, r2
 800848c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	69ba      	ldr	r2, [r7, #24]
 8008494:	0151      	lsls	r1, r2, #5
 8008496:	69fa      	ldr	r2, [r7, #28]
 8008498:	440a      	add	r2, r1
 800849a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800849e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80084a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3720      	adds	r7, #32
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	1ff80000 	.word	0x1ff80000

080084b4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b087      	sub	sp, #28
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	4613      	mov	r3, r2
 80084c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	785b      	ldrb	r3, [r3, #1]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	f040 80ce 	bne.w	8008672 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	699b      	ldr	r3, [r3, #24]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d132      	bne.n	8008544 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	015a      	lsls	r2, r3, #5
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	4413      	add	r3, r2
 80084e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ea:	691b      	ldr	r3, [r3, #16]
 80084ec:	693a      	ldr	r2, [r7, #16]
 80084ee:	0151      	lsls	r1, r2, #5
 80084f0:	697a      	ldr	r2, [r7, #20]
 80084f2:	440a      	add	r2, r1
 80084f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80084fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008500:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	015a      	lsls	r2, r3, #5
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	4413      	add	r3, r2
 800850a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	693a      	ldr	r2, [r7, #16]
 8008512:	0151      	lsls	r1, r2, #5
 8008514:	697a      	ldr	r2, [r7, #20]
 8008516:	440a      	add	r2, r1
 8008518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800851c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008520:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	015a      	lsls	r2, r3, #5
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	4413      	add	r3, r2
 800852a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800852e:	691b      	ldr	r3, [r3, #16]
 8008530:	693a      	ldr	r2, [r7, #16]
 8008532:	0151      	lsls	r1, r2, #5
 8008534:	697a      	ldr	r2, [r7, #20]
 8008536:	440a      	add	r2, r1
 8008538:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800853c:	0cdb      	lsrs	r3, r3, #19
 800853e:	04db      	lsls	r3, r3, #19
 8008540:	6113      	str	r3, [r2, #16]
 8008542:	e04e      	b.n	80085e2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	015a      	lsls	r2, r3, #5
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	4413      	add	r3, r2
 800854c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	693a      	ldr	r2, [r7, #16]
 8008554:	0151      	lsls	r1, r2, #5
 8008556:	697a      	ldr	r2, [r7, #20]
 8008558:	440a      	add	r2, r1
 800855a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800855e:	0cdb      	lsrs	r3, r3, #19
 8008560:	04db      	lsls	r3, r3, #19
 8008562:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	015a      	lsls	r2, r3, #5
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	4413      	add	r3, r2
 800856c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	693a      	ldr	r2, [r7, #16]
 8008574:	0151      	lsls	r1, r2, #5
 8008576:	697a      	ldr	r2, [r7, #20]
 8008578:	440a      	add	r2, r1
 800857a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800857e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008582:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008586:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	699a      	ldr	r2, [r3, #24]
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	429a      	cmp	r2, r3
 8008592:	d903      	bls.n	800859c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	68da      	ldr	r2, [r3, #12]
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	015a      	lsls	r2, r3, #5
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	4413      	add	r3, r2
 80085a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085a8:	691b      	ldr	r3, [r3, #16]
 80085aa:	693a      	ldr	r2, [r7, #16]
 80085ac:	0151      	lsls	r1, r2, #5
 80085ae:	697a      	ldr	r2, [r7, #20]
 80085b0:	440a      	add	r2, r1
 80085b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80085ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	015a      	lsls	r2, r3, #5
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	4413      	add	r3, r2
 80085c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085c8:	691a      	ldr	r2, [r3, #16]
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	699b      	ldr	r3, [r3, #24]
 80085ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085d2:	6939      	ldr	r1, [r7, #16]
 80085d4:	0148      	lsls	r0, r1, #5
 80085d6:	6979      	ldr	r1, [r7, #20]
 80085d8:	4401      	add	r1, r0
 80085da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80085de:	4313      	orrs	r3, r2
 80085e0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80085e2:	79fb      	ldrb	r3, [r7, #7]
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d11e      	bne.n	8008626 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	695b      	ldr	r3, [r3, #20]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d009      	beq.n	8008604 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	015a      	lsls	r2, r3, #5
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	4413      	add	r3, r2
 80085f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085fc:	461a      	mov	r2, r3
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	695b      	ldr	r3, [r3, #20]
 8008602:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	015a      	lsls	r2, r3, #5
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	4413      	add	r3, r2
 800860c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	693a      	ldr	r2, [r7, #16]
 8008614:	0151      	lsls	r1, r2, #5
 8008616:	697a      	ldr	r2, [r7, #20]
 8008618:	440a      	add	r2, r1
 800861a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800861e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008622:	6013      	str	r3, [r2, #0]
 8008624:	e097      	b.n	8008756 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	015a      	lsls	r2, r3, #5
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	4413      	add	r3, r2
 800862e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	693a      	ldr	r2, [r7, #16]
 8008636:	0151      	lsls	r1, r2, #5
 8008638:	697a      	ldr	r2, [r7, #20]
 800863a:	440a      	add	r2, r1
 800863c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008640:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008644:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	699b      	ldr	r3, [r3, #24]
 800864a:	2b00      	cmp	r3, #0
 800864c:	f000 8083 	beq.w	8008756 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008656:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	f003 030f 	and.w	r3, r3, #15
 8008660:	2101      	movs	r1, #1
 8008662:	fa01 f303 	lsl.w	r3, r1, r3
 8008666:	6979      	ldr	r1, [r7, #20]
 8008668:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800866c:	4313      	orrs	r3, r2
 800866e:	634b      	str	r3, [r1, #52]	; 0x34
 8008670:	e071      	b.n	8008756 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	015a      	lsls	r2, r3, #5
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	4413      	add	r3, r2
 800867a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	693a      	ldr	r2, [r7, #16]
 8008682:	0151      	lsls	r1, r2, #5
 8008684:	697a      	ldr	r2, [r7, #20]
 8008686:	440a      	add	r2, r1
 8008688:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800868c:	0cdb      	lsrs	r3, r3, #19
 800868e:	04db      	lsls	r3, r3, #19
 8008690:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	015a      	lsls	r2, r3, #5
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	4413      	add	r3, r2
 800869a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800869e:	691b      	ldr	r3, [r3, #16]
 80086a0:	693a      	ldr	r2, [r7, #16]
 80086a2:	0151      	lsls	r1, r2, #5
 80086a4:	697a      	ldr	r2, [r7, #20]
 80086a6:	440a      	add	r2, r1
 80086a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80086b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80086b4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	699b      	ldr	r3, [r3, #24]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d003      	beq.n	80086c6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	68da      	ldr	r2, [r3, #12]
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	68da      	ldr	r2, [r3, #12]
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	015a      	lsls	r2, r3, #5
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	4413      	add	r3, r2
 80086d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	693a      	ldr	r2, [r7, #16]
 80086de:	0151      	lsls	r1, r2, #5
 80086e0:	697a      	ldr	r2, [r7, #20]
 80086e2:	440a      	add	r2, r1
 80086e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80086ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	015a      	lsls	r2, r3, #5
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	4413      	add	r3, r2
 80086f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086fa:	691a      	ldr	r2, [r3, #16]
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	69db      	ldr	r3, [r3, #28]
 8008700:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008704:	6939      	ldr	r1, [r7, #16]
 8008706:	0148      	lsls	r0, r1, #5
 8008708:	6979      	ldr	r1, [r7, #20]
 800870a:	4401      	add	r1, r0
 800870c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008710:	4313      	orrs	r3, r2
 8008712:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008714:	79fb      	ldrb	r3, [r7, #7]
 8008716:	2b01      	cmp	r3, #1
 8008718:	d10d      	bne.n	8008736 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d009      	beq.n	8008736 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	6919      	ldr	r1, [r3, #16]
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	015a      	lsls	r2, r3, #5
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	4413      	add	r3, r2
 800872e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008732:	460a      	mov	r2, r1
 8008734:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	015a      	lsls	r2, r3, #5
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	4413      	add	r3, r2
 800873e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	693a      	ldr	r2, [r7, #16]
 8008746:	0151      	lsls	r1, r2, #5
 8008748:	697a      	ldr	r2, [r7, #20]
 800874a:	440a      	add	r2, r1
 800874c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008750:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008754:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	371c      	adds	r7, #28
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008764:	b480      	push	{r7}
 8008766:	b087      	sub	sp, #28
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800876e:	2300      	movs	r3, #0
 8008770:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008772:	2300      	movs	r3, #0
 8008774:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	785b      	ldrb	r3, [r3, #1]
 800877e:	2b01      	cmp	r3, #1
 8008780:	d14a      	bne.n	8008818 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	015a      	lsls	r2, r3, #5
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	4413      	add	r3, r2
 800878c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008796:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800879a:	f040 8086 	bne.w	80088aa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	015a      	lsls	r2, r3, #5
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	4413      	add	r3, r2
 80087a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	683a      	ldr	r2, [r7, #0]
 80087b0:	7812      	ldrb	r2, [r2, #0]
 80087b2:	0151      	lsls	r1, r2, #5
 80087b4:	693a      	ldr	r2, [r7, #16]
 80087b6:	440a      	add	r2, r1
 80087b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80087c0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	015a      	lsls	r2, r3, #5
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	4413      	add	r3, r2
 80087cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	683a      	ldr	r2, [r7, #0]
 80087d4:	7812      	ldrb	r2, [r2, #0]
 80087d6:	0151      	lsls	r1, r2, #5
 80087d8:	693a      	ldr	r2, [r7, #16]
 80087da:	440a      	add	r2, r1
 80087dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	3301      	adds	r3, #1
 80087ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d902      	bls.n	80087fc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	75fb      	strb	r3, [r7, #23]
          break;
 80087fa:	e056      	b.n	80088aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	015a      	lsls	r2, r3, #5
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	4413      	add	r3, r2
 8008806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008810:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008814:	d0e7      	beq.n	80087e6 <USB_EPStopXfer+0x82>
 8008816:	e048      	b.n	80088aa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	015a      	lsls	r2, r3, #5
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	4413      	add	r3, r2
 8008822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800882c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008830:	d13b      	bne.n	80088aa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	015a      	lsls	r2, r3, #5
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	4413      	add	r3, r2
 800883c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	683a      	ldr	r2, [r7, #0]
 8008844:	7812      	ldrb	r2, [r2, #0]
 8008846:	0151      	lsls	r1, r2, #5
 8008848:	693a      	ldr	r2, [r7, #16]
 800884a:	440a      	add	r2, r1
 800884c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008850:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008854:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	015a      	lsls	r2, r3, #5
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	4413      	add	r3, r2
 8008860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	683a      	ldr	r2, [r7, #0]
 8008868:	7812      	ldrb	r2, [r2, #0]
 800886a:	0151      	lsls	r1, r2, #5
 800886c:	693a      	ldr	r2, [r7, #16]
 800886e:	440a      	add	r2, r1
 8008870:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008874:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008878:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	3301      	adds	r3, #1
 800887e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f242 7210 	movw	r2, #10000	; 0x2710
 8008886:	4293      	cmp	r3, r2
 8008888:	d902      	bls.n	8008890 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	75fb      	strb	r3, [r7, #23]
          break;
 800888e:	e00c      	b.n	80088aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	015a      	lsls	r2, r3, #5
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	4413      	add	r3, r2
 800889a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088a8:	d0e7      	beq.n	800887a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80088aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	371c      	adds	r7, #28
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b089      	sub	sp, #36	; 0x24
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	4611      	mov	r1, r2
 80088c4:	461a      	mov	r2, r3
 80088c6:	460b      	mov	r3, r1
 80088c8:	71fb      	strb	r3, [r7, #7]
 80088ca:	4613      	mov	r3, r2
 80088cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80088d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d123      	bne.n	8008926 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80088de:	88bb      	ldrh	r3, [r7, #4]
 80088e0:	3303      	adds	r3, #3
 80088e2:	089b      	lsrs	r3, r3, #2
 80088e4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80088e6:	2300      	movs	r3, #0
 80088e8:	61bb      	str	r3, [r7, #24]
 80088ea:	e018      	b.n	800891e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80088ec:	79fb      	ldrb	r3, [r7, #7]
 80088ee:	031a      	lsls	r2, r3, #12
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	4413      	add	r3, r2
 80088f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088f8:	461a      	mov	r2, r3
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	3301      	adds	r3, #1
 8008904:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008906:	69fb      	ldr	r3, [r7, #28]
 8008908:	3301      	adds	r3, #1
 800890a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	3301      	adds	r3, #1
 8008910:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	3301      	adds	r3, #1
 8008916:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008918:	69bb      	ldr	r3, [r7, #24]
 800891a:	3301      	adds	r3, #1
 800891c:	61bb      	str	r3, [r7, #24]
 800891e:	69ba      	ldr	r2, [r7, #24]
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	429a      	cmp	r2, r3
 8008924:	d3e2      	bcc.n	80088ec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008926:	2300      	movs	r3, #0
}
 8008928:	4618      	mov	r0, r3
 800892a:	3724      	adds	r7, #36	; 0x24
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008934:	b480      	push	{r7}
 8008936:	b08b      	sub	sp, #44	; 0x2c
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	4613      	mov	r3, r2
 8008940:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800894a:	88fb      	ldrh	r3, [r7, #6]
 800894c:	089b      	lsrs	r3, r3, #2
 800894e:	b29b      	uxth	r3, r3
 8008950:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008952:	88fb      	ldrh	r3, [r7, #6]
 8008954:	f003 0303 	and.w	r3, r3, #3
 8008958:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800895a:	2300      	movs	r3, #0
 800895c:	623b      	str	r3, [r7, #32]
 800895e:	e014      	b.n	800898a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008960:	69bb      	ldr	r3, [r7, #24]
 8008962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896a:	601a      	str	r2, [r3, #0]
    pDest++;
 800896c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896e:	3301      	adds	r3, #1
 8008970:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008974:	3301      	adds	r3, #1
 8008976:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897a:	3301      	adds	r3, #1
 800897c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800897e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008980:	3301      	adds	r3, #1
 8008982:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008984:	6a3b      	ldr	r3, [r7, #32]
 8008986:	3301      	adds	r3, #1
 8008988:	623b      	str	r3, [r7, #32]
 800898a:	6a3a      	ldr	r2, [r7, #32]
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	429a      	cmp	r2, r3
 8008990:	d3e6      	bcc.n	8008960 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008992:	8bfb      	ldrh	r3, [r7, #30]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d01e      	beq.n	80089d6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008998:	2300      	movs	r3, #0
 800899a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089a2:	461a      	mov	r2, r3
 80089a4:	f107 0310 	add.w	r3, r7, #16
 80089a8:	6812      	ldr	r2, [r2, #0]
 80089aa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80089ac:	693a      	ldr	r2, [r7, #16]
 80089ae:	6a3b      	ldr	r3, [r7, #32]
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	00db      	lsls	r3, r3, #3
 80089b4:	fa22 f303 	lsr.w	r3, r2, r3
 80089b8:	b2da      	uxtb	r2, r3
 80089ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089bc:	701a      	strb	r2, [r3, #0]
      i++;
 80089be:	6a3b      	ldr	r3, [r7, #32]
 80089c0:	3301      	adds	r3, #1
 80089c2:	623b      	str	r3, [r7, #32]
      pDest++;
 80089c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c6:	3301      	adds	r3, #1
 80089c8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80089ca:	8bfb      	ldrh	r3, [r7, #30]
 80089cc:	3b01      	subs	r3, #1
 80089ce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80089d0:	8bfb      	ldrh	r3, [r7, #30]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d1ea      	bne.n	80089ac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80089d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80089d8:	4618      	mov	r0, r3
 80089da:	372c      	adds	r7, #44	; 0x2c
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b085      	sub	sp, #20
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	785b      	ldrb	r3, [r3, #1]
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d12c      	bne.n	8008a5a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	015a      	lsls	r2, r3, #5
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	4413      	add	r3, r2
 8008a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	db12      	blt.n	8008a38 <USB_EPSetStall+0x54>
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d00f      	beq.n	8008a38 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	015a      	lsls	r2, r3, #5
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	4413      	add	r3, r2
 8008a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	68ba      	ldr	r2, [r7, #8]
 8008a28:	0151      	lsls	r1, r2, #5
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	440a      	add	r2, r1
 8008a2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008a36:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	015a      	lsls	r2, r3, #5
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	4413      	add	r3, r2
 8008a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	68ba      	ldr	r2, [r7, #8]
 8008a48:	0151      	lsls	r1, r2, #5
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	440a      	add	r2, r1
 8008a4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008a56:	6013      	str	r3, [r2, #0]
 8008a58:	e02b      	b.n	8008ab2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	015a      	lsls	r2, r3, #5
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	4413      	add	r3, r2
 8008a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	db12      	blt.n	8008a92 <USB_EPSetStall+0xae>
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d00f      	beq.n	8008a92 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	015a      	lsls	r2, r3, #5
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	4413      	add	r3, r2
 8008a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	68ba      	ldr	r2, [r7, #8]
 8008a82:	0151      	lsls	r1, r2, #5
 8008a84:	68fa      	ldr	r2, [r7, #12]
 8008a86:	440a      	add	r2, r1
 8008a88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008a90:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	015a      	lsls	r2, r3, #5
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	4413      	add	r3, r2
 8008a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	68ba      	ldr	r2, [r7, #8]
 8008aa2:	0151      	lsls	r1, r2, #5
 8008aa4:	68fa      	ldr	r2, [r7, #12]
 8008aa6:	440a      	add	r2, r1
 8008aa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008aac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008ab0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3714      	adds	r7, #20
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr

08008ac0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b085      	sub	sp, #20
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	785b      	ldrb	r3, [r3, #1]
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d128      	bne.n	8008b2e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	015a      	lsls	r2, r3, #5
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	4413      	add	r3, r2
 8008ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	68ba      	ldr	r2, [r7, #8]
 8008aec:	0151      	lsls	r1, r2, #5
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	440a      	add	r2, r1
 8008af2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008af6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008afa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	791b      	ldrb	r3, [r3, #4]
 8008b00:	2b03      	cmp	r3, #3
 8008b02:	d003      	beq.n	8008b0c <USB_EPClearStall+0x4c>
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	791b      	ldrb	r3, [r3, #4]
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d138      	bne.n	8008b7e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	015a      	lsls	r2, r3, #5
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	4413      	add	r3, r2
 8008b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68ba      	ldr	r2, [r7, #8]
 8008b1c:	0151      	lsls	r1, r2, #5
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	440a      	add	r2, r1
 8008b22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b2a:	6013      	str	r3, [r2, #0]
 8008b2c:	e027      	b.n	8008b7e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	015a      	lsls	r2, r3, #5
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	4413      	add	r3, r2
 8008b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	68ba      	ldr	r2, [r7, #8]
 8008b3e:	0151      	lsls	r1, r2, #5
 8008b40:	68fa      	ldr	r2, [r7, #12]
 8008b42:	440a      	add	r2, r1
 8008b44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b4c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	791b      	ldrb	r3, [r3, #4]
 8008b52:	2b03      	cmp	r3, #3
 8008b54:	d003      	beq.n	8008b5e <USB_EPClearStall+0x9e>
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	791b      	ldrb	r3, [r3, #4]
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d10f      	bne.n	8008b7e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	015a      	lsls	r2, r3, #5
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	4413      	add	r3, r2
 8008b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	68ba      	ldr	r2, [r7, #8]
 8008b6e:	0151      	lsls	r1, r2, #5
 8008b70:	68fa      	ldr	r2, [r7, #12]
 8008b72:	440a      	add	r2, r1
 8008b74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b7c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008b7e:	2300      	movs	r3, #0
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3714      	adds	r7, #20
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b085      	sub	sp, #20
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	460b      	mov	r3, r1
 8008b96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008baa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008bae:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	78fb      	ldrb	r3, [r7, #3]
 8008bba:	011b      	lsls	r3, r3, #4
 8008bbc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008bc0:	68f9      	ldr	r1, [r7, #12]
 8008bc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008bca:	2300      	movs	r3, #0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3714      	adds	r7, #20
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b085      	sub	sp, #20
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	68fa      	ldr	r2, [r7, #12]
 8008bee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008bf2:	f023 0303 	bic.w	r3, r3, #3
 8008bf6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	68fa      	ldr	r2, [r7, #12]
 8008c02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c06:	f023 0302 	bic.w	r3, r3, #2
 8008c0a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c0c:	2300      	movs	r3, #0
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3714      	adds	r7, #20
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr

08008c1a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008c1a:	b480      	push	{r7}
 8008c1c:	b085      	sub	sp, #20
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	68fa      	ldr	r2, [r7, #12]
 8008c30:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008c34:	f023 0303 	bic.w	r3, r3, #3
 8008c38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	68fa      	ldr	r2, [r7, #12]
 8008c44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c48:	f043 0302 	orr.w	r3, r3, #2
 8008c4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3714      	adds	r7, #20
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b085      	sub	sp, #20
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	695b      	ldr	r3, [r3, #20]
 8008c68:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	699b      	ldr	r3, [r3, #24]
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	4013      	ands	r3, r2
 8008c72:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008c74:	68fb      	ldr	r3, [r7, #12]
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3714      	adds	r7, #20
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr

08008c82 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c82:	b480      	push	{r7}
 8008c84:	b085      	sub	sp, #20
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c94:	699b      	ldr	r3, [r3, #24]
 8008c96:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c9e:	69db      	ldr	r3, [r3, #28]
 8008ca0:	68ba      	ldr	r2, [r7, #8]
 8008ca2:	4013      	ands	r3, r2
 8008ca4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	0c1b      	lsrs	r3, r3, #16
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3714      	adds	r7, #20
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr

08008cb6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008cb6:	b480      	push	{r7}
 8008cb8:	b085      	sub	sp, #20
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cc8:	699b      	ldr	r3, [r3, #24]
 8008cca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cd2:	69db      	ldr	r3, [r3, #28]
 8008cd4:	68ba      	ldr	r2, [r7, #8]
 8008cd6:	4013      	ands	r3, r2
 8008cd8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	b29b      	uxth	r3, r3
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3714      	adds	r7, #20
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr

08008cea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008cea:	b480      	push	{r7}
 8008cec:	b085      	sub	sp, #20
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008cfa:	78fb      	ldrb	r3, [r7, #3]
 8008cfc:	015a      	lsls	r2, r3, #5
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	4413      	add	r3, r2
 8008d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d10:	695b      	ldr	r3, [r3, #20]
 8008d12:	68ba      	ldr	r2, [r7, #8]
 8008d14:	4013      	ands	r3, r2
 8008d16:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008d18:	68bb      	ldr	r3, [r7, #8]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3714      	adds	r7, #20
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr

08008d26 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008d26:	b480      	push	{r7}
 8008d28:	b087      	sub	sp, #28
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
 8008d2e:	460b      	mov	r3, r1
 8008d30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d3c:	691b      	ldr	r3, [r3, #16]
 8008d3e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d48:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008d4a:	78fb      	ldrb	r3, [r7, #3]
 8008d4c:	f003 030f 	and.w	r3, r3, #15
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	fa22 f303 	lsr.w	r3, r2, r3
 8008d56:	01db      	lsls	r3, r3, #7
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	693a      	ldr	r2, [r7, #16]
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008d60:	78fb      	ldrb	r3, [r7, #3]
 8008d62:	015a      	lsls	r2, r3, #5
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	4413      	add	r3, r2
 8008d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	693a      	ldr	r2, [r7, #16]
 8008d70:	4013      	ands	r3, r2
 8008d72:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008d74:	68bb      	ldr	r3, [r7, #8]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	371c      	adds	r7, #28
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr

08008d82 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008d82:	b480      	push	{r7}
 8008d84:	b083      	sub	sp, #12
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	695b      	ldr	r3, [r3, #20]
 8008d8e:	f003 0301 	and.w	r3, r3, #1
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	370c      	adds	r7, #12
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr

08008d9e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008d9e:	b480      	push	{r7}
 8008da0:	b085      	sub	sp, #20
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008db8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008dbc:	f023 0307 	bic.w	r3, r3, #7
 8008dc0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008dd4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008dd6:	2300      	movs	r3, #0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3714      	adds	r7, #20
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b087      	sub	sp, #28
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	460b      	mov	r3, r1
 8008dee:	607a      	str	r2, [r7, #4]
 8008df0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	333c      	adds	r3, #60	; 0x3c
 8008dfa:	3304      	adds	r3, #4
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	4a26      	ldr	r2, [pc, #152]	; (8008e9c <USB_EP0_OutStart+0xb8>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d90a      	bls.n	8008e1e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e18:	d101      	bne.n	8008e1e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	e037      	b.n	8008e8e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e24:	461a      	mov	r2, r3
 8008e26:	2300      	movs	r3, #0
 8008e28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e30:	691b      	ldr	r3, [r3, #16]
 8008e32:	697a      	ldr	r2, [r7, #20]
 8008e34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e44:	691b      	ldr	r3, [r3, #16]
 8008e46:	697a      	ldr	r2, [r7, #20]
 8008e48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e4c:	f043 0318 	orr.w	r3, r3, #24
 8008e50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e58:	691b      	ldr	r3, [r3, #16]
 8008e5a:	697a      	ldr	r2, [r7, #20]
 8008e5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e60:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008e64:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008e66:	7afb      	ldrb	r3, [r7, #11]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d10f      	bne.n	8008e8c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e72:	461a      	mov	r2, r3
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	697a      	ldr	r2, [r7, #20]
 8008e82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e86:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008e8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	371c      	adds	r7, #28
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr
 8008e9a:	bf00      	nop
 8008e9c:	4f54300a 	.word	0x4f54300a

08008ea0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b085      	sub	sp, #20
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	4a13      	ldr	r2, [pc, #76]	; (8008f04 <USB_CoreReset+0x64>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d901      	bls.n	8008ebe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	e01b      	b.n	8008ef6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	daf2      	bge.n	8008eac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	691b      	ldr	r3, [r3, #16]
 8008ece:	f043 0201 	orr.w	r2, r3, #1
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	4a09      	ldr	r2, [pc, #36]	; (8008f04 <USB_CoreReset+0x64>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d901      	bls.n	8008ee8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008ee4:	2303      	movs	r3, #3
 8008ee6:	e006      	b.n	8008ef6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	691b      	ldr	r3, [r3, #16]
 8008eec:	f003 0301 	and.w	r3, r3, #1
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d0f0      	beq.n	8008ed6 <USB_CoreReset+0x36>

  return HAL_OK;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3714      	adds	r7, #20
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop
 8008f04:	00030d40 	.word	0x00030d40

08008f08 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008f0c:	4904      	ldr	r1, [pc, #16]	; (8008f20 <MX_FATFS_Init+0x18>)
 8008f0e:	4805      	ldr	r0, [pc, #20]	; (8008f24 <MX_FATFS_Init+0x1c>)
 8008f10:	f004 fdf6 	bl	800db00 <FATFS_LinkDriver>
 8008f14:	4603      	mov	r3, r0
 8008f16:	461a      	mov	r2, r3
 8008f18:	4b03      	ldr	r3, [pc, #12]	; (8008f28 <MX_FATFS_Init+0x20>)
 8008f1a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008f1c:	bf00      	nop
 8008f1e:	bd80      	pop	{r7, pc}
 8008f20:	20000890 	.word	0x20000890
 8008f24:	2000002c 	.word	0x2000002c
 8008f28:	2000088c 	.word	0x2000088c

08008f2c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008f30:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	4603      	mov	r3, r0
 8008f44:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 8008f46:	79fb      	ldrb	r3, [r7, #7]
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f000 f9d7 	bl	80092fc <USER_SPI_initialize>
 8008f4e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3708      	adds	r7, #8
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b082      	sub	sp, #8
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	4603      	mov	r3, r0
 8008f60:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 8008f62:	79fb      	ldrb	r3, [r7, #7]
 8008f64:	4618      	mov	r0, r3
 8008f66:	f000 fab5 	bl	80094d4 <USER_SPI_status>
 8008f6a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3708      	adds	r7, #8
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	60b9      	str	r1, [r7, #8]
 8008f7c:	607a      	str	r2, [r7, #4]
 8008f7e:	603b      	str	r3, [r7, #0]
 8008f80:	4603      	mov	r3, r0
 8008f82:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8008f84:	7bf8      	ldrb	r0, [r7, #15]
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	68b9      	ldr	r1, [r7, #8]
 8008f8c:	f000 fab8 	bl	8009500 <USER_SPI_read>
 8008f90:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3710      	adds	r7, #16
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b084      	sub	sp, #16
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	607a      	str	r2, [r7, #4]
 8008fa4:	603b      	str	r3, [r7, #0]
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 8008faa:	7bf8      	ldrb	r0, [r7, #15]
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	68b9      	ldr	r1, [r7, #8]
 8008fb2:	f000 fb0b 	bl	80095cc <USER_SPI_write>
 8008fb6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	603a      	str	r2, [r7, #0]
 8008fca:	71fb      	strb	r3, [r7, #7]
 8008fcc:	460b      	mov	r3, r1
 8008fce:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8008fd0:	79b9      	ldrb	r1, [r7, #6]
 8008fd2:	79fb      	ldrb	r3, [r7, #7]
 8008fd4:	683a      	ldr	r2, [r7, #0]
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f000 fb74 	bl	80096c4 <USER_SPI_ioctl>
 8008fdc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3708      	adds	r7, #8
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
	...

08008fe8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8008ff0:	f7f9 fa28 	bl	8002444 <HAL_GetTick>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	4a04      	ldr	r2, [pc, #16]	; (8009008 <SPI_Timer_On+0x20>)
 8008ff8:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8008ffa:	4a04      	ldr	r2, [pc, #16]	; (800900c <SPI_Timer_On+0x24>)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6013      	str	r3, [r2, #0]
}
 8009000:	bf00      	nop
 8009002:	3708      	adds	r7, #8
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}
 8009008:	20000898 	.word	0x20000898
 800900c:	2000089c 	.word	0x2000089c

08009010 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8009010:	b580      	push	{r7, lr}
 8009012:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8009014:	f7f9 fa16 	bl	8002444 <HAL_GetTick>
 8009018:	4602      	mov	r2, r0
 800901a:	4b06      	ldr	r3, [pc, #24]	; (8009034 <SPI_Timer_Status+0x24>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	1ad2      	subs	r2, r2, r3
 8009020:	4b05      	ldr	r3, [pc, #20]	; (8009038 <SPI_Timer_Status+0x28>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	429a      	cmp	r2, r3
 8009026:	bf34      	ite	cc
 8009028:	2301      	movcc	r3, #1
 800902a:	2300      	movcs	r3, #0
 800902c:	b2db      	uxtb	r3, r3
}
 800902e:	4618      	mov	r0, r3
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	20000898 	.word	0x20000898
 8009038:	2000089c 	.word	0x2000089c

0800903c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b086      	sub	sp, #24
 8009040:	af02      	add	r7, sp, #8
 8009042:	4603      	mov	r3, r0
 8009044:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009046:	f107 020f 	add.w	r2, r7, #15
 800904a:	1df9      	adds	r1, r7, #7
 800904c:	2332      	movs	r3, #50	; 0x32
 800904e:	9300      	str	r3, [sp, #0]
 8009050:	2301      	movs	r3, #1
 8009052:	4804      	ldr	r0, [pc, #16]	; (8009064 <xchg_spi+0x28>)
 8009054:	f7fd f895 	bl	8006182 <HAL_SPI_TransmitReceive>
    return rxDat;
 8009058:	7bfb      	ldrb	r3, [r7, #15]
}
 800905a:	4618      	mov	r0, r3
 800905c:	3710      	adds	r7, #16
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	20000200 	.word	0x20000200

08009068 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8009068:	b590      	push	{r4, r7, lr}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8009072:	2300      	movs	r3, #0
 8009074:	60fb      	str	r3, [r7, #12]
 8009076:	e00a      	b.n	800908e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	18d4      	adds	r4, r2, r3
 800907e:	20ff      	movs	r0, #255	; 0xff
 8009080:	f7ff ffdc 	bl	800903c <xchg_spi>
 8009084:	4603      	mov	r3, r0
 8009086:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	3301      	adds	r3, #1
 800908c:	60fb      	str	r3, [r7, #12]
 800908e:	68fa      	ldr	r2, [r7, #12]
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	429a      	cmp	r2, r3
 8009094:	d3f0      	bcc.n	8009078 <rcvr_spi_multi+0x10>
	}
}
 8009096:	bf00      	nop
 8009098:	bf00      	nop
 800909a:	3714      	adds	r7, #20
 800909c:	46bd      	mov	sp, r7
 800909e:	bd90      	pop	{r4, r7, pc}

080090a0 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	b29a      	uxth	r2, r3
 80090ae:	f04f 33ff 	mov.w	r3, #4294967295
 80090b2:	6879      	ldr	r1, [r7, #4]
 80090b4:	4803      	ldr	r0, [pc, #12]	; (80090c4 <xmit_spi_multi+0x24>)
 80090b6:	f7fc ff28 	bl	8005f0a <HAL_SPI_Transmit>
}
 80090ba:	bf00      	nop
 80090bc:	3708      	adds	r7, #8
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	20000200 	.word	0x20000200

080090c8 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b086      	sub	sp, #24
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80090d0:	f7f9 f9b8 	bl	8002444 <HAL_GetTick>
 80090d4:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80090da:	20ff      	movs	r0, #255	; 0xff
 80090dc:	f7ff ffae 	bl	800903c <xchg_spi>
 80090e0:	4603      	mov	r3, r0
 80090e2:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80090e4:	7bfb      	ldrb	r3, [r7, #15]
 80090e6:	2bff      	cmp	r3, #255	; 0xff
 80090e8:	d007      	beq.n	80090fa <wait_ready+0x32>
 80090ea:	f7f9 f9ab 	bl	8002444 <HAL_GetTick>
 80090ee:	4602      	mov	r2, r0
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	1ad3      	subs	r3, r2, r3
 80090f4:	693a      	ldr	r2, [r7, #16]
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d8ef      	bhi.n	80090da <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80090fa:	7bfb      	ldrb	r3, [r7, #15]
 80090fc:	2bff      	cmp	r3, #255	; 0xff
 80090fe:	bf0c      	ite	eq
 8009100:	2301      	moveq	r3, #1
 8009102:	2300      	movne	r3, #0
 8009104:	b2db      	uxtb	r3, r3
}
 8009106:	4618      	mov	r0, r3
 8009108:	3718      	adds	r7, #24
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
	...

08009110 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8009114:	2201      	movs	r2, #1
 8009116:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800911a:	4804      	ldr	r0, [pc, #16]	; (800912c <despiselect+0x1c>)
 800911c:	f7f9 fc8a 	bl	8002a34 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8009120:	20ff      	movs	r0, #255	; 0xff
 8009122:	f7ff ff8b 	bl	800903c <xchg_spi>

}
 8009126:	bf00      	nop
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	40020400 	.word	0x40020400

08009130 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8009130:	b580      	push	{r7, lr}
 8009132:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8009134:	2200      	movs	r2, #0
 8009136:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800913a:	480a      	ldr	r0, [pc, #40]	; (8009164 <spiselect+0x34>)
 800913c:	f7f9 fc7a 	bl	8002a34 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8009140:	20ff      	movs	r0, #255	; 0xff
 8009142:	f7ff ff7b 	bl	800903c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8009146:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800914a:	f7ff ffbd 	bl	80090c8 <wait_ready>
 800914e:	4603      	mov	r3, r0
 8009150:	2b00      	cmp	r3, #0
 8009152:	d001      	beq.n	8009158 <spiselect+0x28>
 8009154:	2301      	movs	r3, #1
 8009156:	e002      	b.n	800915e <spiselect+0x2e>

	despiselect();
 8009158:	f7ff ffda 	bl	8009110 <despiselect>
	return 0;	/* Timeout */
 800915c:	2300      	movs	r3, #0
}
 800915e:	4618      	mov	r0, r3
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	40020400 	.word	0x40020400

08009168 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8009172:	20c8      	movs	r0, #200	; 0xc8
 8009174:	f7ff ff38 	bl	8008fe8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8009178:	20ff      	movs	r0, #255	; 0xff
 800917a:	f7ff ff5f 	bl	800903c <xchg_spi>
 800917e:	4603      	mov	r3, r0
 8009180:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8009182:	7bfb      	ldrb	r3, [r7, #15]
 8009184:	2bff      	cmp	r3, #255	; 0xff
 8009186:	d104      	bne.n	8009192 <rcvr_datablock+0x2a>
 8009188:	f7ff ff42 	bl	8009010 <SPI_Timer_Status>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d1f2      	bne.n	8009178 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8009192:	7bfb      	ldrb	r3, [r7, #15]
 8009194:	2bfe      	cmp	r3, #254	; 0xfe
 8009196:	d001      	beq.n	800919c <rcvr_datablock+0x34>
 8009198:	2300      	movs	r3, #0
 800919a:	e00a      	b.n	80091b2 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800919c:	6839      	ldr	r1, [r7, #0]
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f7ff ff62 	bl	8009068 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80091a4:	20ff      	movs	r0, #255	; 0xff
 80091a6:	f7ff ff49 	bl	800903c <xchg_spi>
 80091aa:	20ff      	movs	r0, #255	; 0xff
 80091ac:	f7ff ff46 	bl	800903c <xchg_spi>

	return 1;						/* Function succeeded */
 80091b0:	2301      	movs	r3, #1
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b084      	sub	sp, #16
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
 80091c2:	460b      	mov	r3, r1
 80091c4:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80091c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80091ca:	f7ff ff7d 	bl	80090c8 <wait_ready>
 80091ce:	4603      	mov	r3, r0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d101      	bne.n	80091d8 <xmit_datablock+0x1e>
 80091d4:	2300      	movs	r3, #0
 80091d6:	e01e      	b.n	8009216 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80091d8:	78fb      	ldrb	r3, [r7, #3]
 80091da:	4618      	mov	r0, r3
 80091dc:	f7ff ff2e 	bl	800903c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80091e0:	78fb      	ldrb	r3, [r7, #3]
 80091e2:	2bfd      	cmp	r3, #253	; 0xfd
 80091e4:	d016      	beq.n	8009214 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80091e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f7ff ff58 	bl	80090a0 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80091f0:	20ff      	movs	r0, #255	; 0xff
 80091f2:	f7ff ff23 	bl	800903c <xchg_spi>
 80091f6:	20ff      	movs	r0, #255	; 0xff
 80091f8:	f7ff ff20 	bl	800903c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80091fc:	20ff      	movs	r0, #255	; 0xff
 80091fe:	f7ff ff1d 	bl	800903c <xchg_spi>
 8009202:	4603      	mov	r3, r0
 8009204:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8009206:	7bfb      	ldrb	r3, [r7, #15]
 8009208:	f003 031f 	and.w	r3, r3, #31
 800920c:	2b05      	cmp	r3, #5
 800920e:	d001      	beq.n	8009214 <xmit_datablock+0x5a>
 8009210:	2300      	movs	r3, #0
 8009212:	e000      	b.n	8009216 <xmit_datablock+0x5c>
	}
	return 1;
 8009214:	2301      	movs	r3, #1
}
 8009216:	4618      	mov	r0, r3
 8009218:	3710      	adds	r7, #16
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}

0800921e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800921e:	b580      	push	{r7, lr}
 8009220:	b084      	sub	sp, #16
 8009222:	af00      	add	r7, sp, #0
 8009224:	4603      	mov	r3, r0
 8009226:	6039      	str	r1, [r7, #0]
 8009228:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800922a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800922e:	2b00      	cmp	r3, #0
 8009230:	da0e      	bge.n	8009250 <send_cmd+0x32>
		cmd &= 0x7F;
 8009232:	79fb      	ldrb	r3, [r7, #7]
 8009234:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009238:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800923a:	2100      	movs	r1, #0
 800923c:	2037      	movs	r0, #55	; 0x37
 800923e:	f7ff ffee 	bl	800921e <send_cmd>
 8009242:	4603      	mov	r3, r0
 8009244:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8009246:	7bbb      	ldrb	r3, [r7, #14]
 8009248:	2b01      	cmp	r3, #1
 800924a:	d901      	bls.n	8009250 <send_cmd+0x32>
 800924c:	7bbb      	ldrb	r3, [r7, #14]
 800924e:	e051      	b.n	80092f4 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8009250:	79fb      	ldrb	r3, [r7, #7]
 8009252:	2b0c      	cmp	r3, #12
 8009254:	d008      	beq.n	8009268 <send_cmd+0x4a>
		despiselect();
 8009256:	f7ff ff5b 	bl	8009110 <despiselect>
		if (!spiselect()) return 0xFF;
 800925a:	f7ff ff69 	bl	8009130 <spiselect>
 800925e:	4603      	mov	r3, r0
 8009260:	2b00      	cmp	r3, #0
 8009262:	d101      	bne.n	8009268 <send_cmd+0x4a>
 8009264:	23ff      	movs	r3, #255	; 0xff
 8009266:	e045      	b.n	80092f4 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8009268:	79fb      	ldrb	r3, [r7, #7]
 800926a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800926e:	b2db      	uxtb	r3, r3
 8009270:	4618      	mov	r0, r3
 8009272:	f7ff fee3 	bl	800903c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	0e1b      	lsrs	r3, r3, #24
 800927a:	b2db      	uxtb	r3, r3
 800927c:	4618      	mov	r0, r3
 800927e:	f7ff fedd 	bl	800903c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	0c1b      	lsrs	r3, r3, #16
 8009286:	b2db      	uxtb	r3, r3
 8009288:	4618      	mov	r0, r3
 800928a:	f7ff fed7 	bl	800903c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	0a1b      	lsrs	r3, r3, #8
 8009292:	b2db      	uxtb	r3, r3
 8009294:	4618      	mov	r0, r3
 8009296:	f7ff fed1 	bl	800903c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	b2db      	uxtb	r3, r3
 800929e:	4618      	mov	r0, r3
 80092a0:	f7ff fecc 	bl	800903c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80092a4:	2301      	movs	r3, #1
 80092a6:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80092a8:	79fb      	ldrb	r3, [r7, #7]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d101      	bne.n	80092b2 <send_cmd+0x94>
 80092ae:	2395      	movs	r3, #149	; 0x95
 80092b0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80092b2:	79fb      	ldrb	r3, [r7, #7]
 80092b4:	2b08      	cmp	r3, #8
 80092b6:	d101      	bne.n	80092bc <send_cmd+0x9e>
 80092b8:	2387      	movs	r3, #135	; 0x87
 80092ba:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80092bc:	7bfb      	ldrb	r3, [r7, #15]
 80092be:	4618      	mov	r0, r3
 80092c0:	f7ff febc 	bl	800903c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80092c4:	79fb      	ldrb	r3, [r7, #7]
 80092c6:	2b0c      	cmp	r3, #12
 80092c8:	d102      	bne.n	80092d0 <send_cmd+0xb2>
 80092ca:	20ff      	movs	r0, #255	; 0xff
 80092cc:	f7ff feb6 	bl	800903c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80092d0:	230a      	movs	r3, #10
 80092d2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80092d4:	20ff      	movs	r0, #255	; 0xff
 80092d6:	f7ff feb1 	bl	800903c <xchg_spi>
 80092da:	4603      	mov	r3, r0
 80092dc:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80092de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	da05      	bge.n	80092f2 <send_cmd+0xd4>
 80092e6:	7bfb      	ldrb	r3, [r7, #15]
 80092e8:	3b01      	subs	r3, #1
 80092ea:	73fb      	strb	r3, [r7, #15]
 80092ec:	7bfb      	ldrb	r3, [r7, #15]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d1f0      	bne.n	80092d4 <send_cmd+0xb6>

	return res;							/* Return received response */
 80092f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3710      	adds	r7, #16
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80092fc:	b590      	push	{r4, r7, lr}
 80092fe:	b085      	sub	sp, #20
 8009300:	af00      	add	r7, sp, #0
 8009302:	4603      	mov	r3, r0
 8009304:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8009306:	79fb      	ldrb	r3, [r7, #7]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d001      	beq.n	8009310 <USER_SPI_initialize+0x14>
 800930c:	2301      	movs	r3, #1
 800930e:	e0d6      	b.n	80094be <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8009310:	4b6d      	ldr	r3, [pc, #436]	; (80094c8 <USER_SPI_initialize+0x1cc>)
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	b2db      	uxtb	r3, r3
 8009316:	f003 0302 	and.w	r3, r3, #2
 800931a:	2b00      	cmp	r3, #0
 800931c:	d003      	beq.n	8009326 <USER_SPI_initialize+0x2a>
 800931e:	4b6a      	ldr	r3, [pc, #424]	; (80094c8 <USER_SPI_initialize+0x1cc>)
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	b2db      	uxtb	r3, r3
 8009324:	e0cb      	b.n	80094be <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8009326:	4b69      	ldr	r3, [pc, #420]	; (80094cc <USER_SPI_initialize+0x1d0>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009330:	4b66      	ldr	r3, [pc, #408]	; (80094cc <USER_SPI_initialize+0x1d0>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8009338:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800933a:	230a      	movs	r3, #10
 800933c:	73fb      	strb	r3, [r7, #15]
 800933e:	e005      	b.n	800934c <USER_SPI_initialize+0x50>
 8009340:	20ff      	movs	r0, #255	; 0xff
 8009342:	f7ff fe7b 	bl	800903c <xchg_spi>
 8009346:	7bfb      	ldrb	r3, [r7, #15]
 8009348:	3b01      	subs	r3, #1
 800934a:	73fb      	strb	r3, [r7, #15]
 800934c:	7bfb      	ldrb	r3, [r7, #15]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d1f6      	bne.n	8009340 <USER_SPI_initialize+0x44>

	ty = 0;
 8009352:	2300      	movs	r3, #0
 8009354:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8009356:	2100      	movs	r1, #0
 8009358:	2000      	movs	r0, #0
 800935a:	f7ff ff60 	bl	800921e <send_cmd>
 800935e:	4603      	mov	r3, r0
 8009360:	2b01      	cmp	r3, #1
 8009362:	f040 808b 	bne.w	800947c <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8009366:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800936a:	f7ff fe3d 	bl	8008fe8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800936e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009372:	2008      	movs	r0, #8
 8009374:	f7ff ff53 	bl	800921e <send_cmd>
 8009378:	4603      	mov	r3, r0
 800937a:	2b01      	cmp	r3, #1
 800937c:	d151      	bne.n	8009422 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800937e:	2300      	movs	r3, #0
 8009380:	73fb      	strb	r3, [r7, #15]
 8009382:	e00d      	b.n	80093a0 <USER_SPI_initialize+0xa4>
 8009384:	7bfc      	ldrb	r4, [r7, #15]
 8009386:	20ff      	movs	r0, #255	; 0xff
 8009388:	f7ff fe58 	bl	800903c <xchg_spi>
 800938c:	4603      	mov	r3, r0
 800938e:	461a      	mov	r2, r3
 8009390:	f104 0310 	add.w	r3, r4, #16
 8009394:	443b      	add	r3, r7
 8009396:	f803 2c08 	strb.w	r2, [r3, #-8]
 800939a:	7bfb      	ldrb	r3, [r7, #15]
 800939c:	3301      	adds	r3, #1
 800939e:	73fb      	strb	r3, [r7, #15]
 80093a0:	7bfb      	ldrb	r3, [r7, #15]
 80093a2:	2b03      	cmp	r3, #3
 80093a4:	d9ee      	bls.n	8009384 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80093a6:	7abb      	ldrb	r3, [r7, #10]
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d167      	bne.n	800947c <USER_SPI_initialize+0x180>
 80093ac:	7afb      	ldrb	r3, [r7, #11]
 80093ae:	2baa      	cmp	r3, #170	; 0xaa
 80093b0:	d164      	bne.n	800947c <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80093b2:	bf00      	nop
 80093b4:	f7ff fe2c 	bl	8009010 <SPI_Timer_Status>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d007      	beq.n	80093ce <USER_SPI_initialize+0xd2>
 80093be:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80093c2:	20a9      	movs	r0, #169	; 0xa9
 80093c4:	f7ff ff2b 	bl	800921e <send_cmd>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d1f2      	bne.n	80093b4 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80093ce:	f7ff fe1f 	bl	8009010 <SPI_Timer_Status>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d051      	beq.n	800947c <USER_SPI_initialize+0x180>
 80093d8:	2100      	movs	r1, #0
 80093da:	203a      	movs	r0, #58	; 0x3a
 80093dc:	f7ff ff1f 	bl	800921e <send_cmd>
 80093e0:	4603      	mov	r3, r0
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d14a      	bne.n	800947c <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80093e6:	2300      	movs	r3, #0
 80093e8:	73fb      	strb	r3, [r7, #15]
 80093ea:	e00d      	b.n	8009408 <USER_SPI_initialize+0x10c>
 80093ec:	7bfc      	ldrb	r4, [r7, #15]
 80093ee:	20ff      	movs	r0, #255	; 0xff
 80093f0:	f7ff fe24 	bl	800903c <xchg_spi>
 80093f4:	4603      	mov	r3, r0
 80093f6:	461a      	mov	r2, r3
 80093f8:	f104 0310 	add.w	r3, r4, #16
 80093fc:	443b      	add	r3, r7
 80093fe:	f803 2c08 	strb.w	r2, [r3, #-8]
 8009402:	7bfb      	ldrb	r3, [r7, #15]
 8009404:	3301      	adds	r3, #1
 8009406:	73fb      	strb	r3, [r7, #15]
 8009408:	7bfb      	ldrb	r3, [r7, #15]
 800940a:	2b03      	cmp	r3, #3
 800940c:	d9ee      	bls.n	80093ec <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800940e:	7a3b      	ldrb	r3, [r7, #8]
 8009410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009414:	2b00      	cmp	r3, #0
 8009416:	d001      	beq.n	800941c <USER_SPI_initialize+0x120>
 8009418:	230c      	movs	r3, #12
 800941a:	e000      	b.n	800941e <USER_SPI_initialize+0x122>
 800941c:	2304      	movs	r3, #4
 800941e:	737b      	strb	r3, [r7, #13]
 8009420:	e02c      	b.n	800947c <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8009422:	2100      	movs	r1, #0
 8009424:	20a9      	movs	r0, #169	; 0xa9
 8009426:	f7ff fefa 	bl	800921e <send_cmd>
 800942a:	4603      	mov	r3, r0
 800942c:	2b01      	cmp	r3, #1
 800942e:	d804      	bhi.n	800943a <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8009430:	2302      	movs	r3, #2
 8009432:	737b      	strb	r3, [r7, #13]
 8009434:	23a9      	movs	r3, #169	; 0xa9
 8009436:	73bb      	strb	r3, [r7, #14]
 8009438:	e003      	b.n	8009442 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800943a:	2301      	movs	r3, #1
 800943c:	737b      	strb	r3, [r7, #13]
 800943e:	2301      	movs	r3, #1
 8009440:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8009442:	bf00      	nop
 8009444:	f7ff fde4 	bl	8009010 <SPI_Timer_Status>
 8009448:	4603      	mov	r3, r0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d007      	beq.n	800945e <USER_SPI_initialize+0x162>
 800944e:	7bbb      	ldrb	r3, [r7, #14]
 8009450:	2100      	movs	r1, #0
 8009452:	4618      	mov	r0, r3
 8009454:	f7ff fee3 	bl	800921e <send_cmd>
 8009458:	4603      	mov	r3, r0
 800945a:	2b00      	cmp	r3, #0
 800945c:	d1f2      	bne.n	8009444 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800945e:	f7ff fdd7 	bl	8009010 <SPI_Timer_Status>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d007      	beq.n	8009478 <USER_SPI_initialize+0x17c>
 8009468:	f44f 7100 	mov.w	r1, #512	; 0x200
 800946c:	2010      	movs	r0, #16
 800946e:	f7ff fed6 	bl	800921e <send_cmd>
 8009472:	4603      	mov	r3, r0
 8009474:	2b00      	cmp	r3, #0
 8009476:	d001      	beq.n	800947c <USER_SPI_initialize+0x180>
				ty = 0;
 8009478:	2300      	movs	r3, #0
 800947a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800947c:	4a14      	ldr	r2, [pc, #80]	; (80094d0 <USER_SPI_initialize+0x1d4>)
 800947e:	7b7b      	ldrb	r3, [r7, #13]
 8009480:	7013      	strb	r3, [r2, #0]
	despiselect();
 8009482:	f7ff fe45 	bl	8009110 <despiselect>

	if (ty) {			/* OK */
 8009486:	7b7b      	ldrb	r3, [r7, #13]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d012      	beq.n	80094b2 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 800948c:	4b0f      	ldr	r3, [pc, #60]	; (80094cc <USER_SPI_initialize+0x1d0>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009496:	4b0d      	ldr	r3, [pc, #52]	; (80094cc <USER_SPI_initialize+0x1d0>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f042 0210 	orr.w	r2, r2, #16
 800949e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80094a0:	4b09      	ldr	r3, [pc, #36]	; (80094c8 <USER_SPI_initialize+0x1cc>)
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	f023 0301 	bic.w	r3, r3, #1
 80094aa:	b2da      	uxtb	r2, r3
 80094ac:	4b06      	ldr	r3, [pc, #24]	; (80094c8 <USER_SPI_initialize+0x1cc>)
 80094ae:	701a      	strb	r2, [r3, #0]
 80094b0:	e002      	b.n	80094b8 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80094b2:	4b05      	ldr	r3, [pc, #20]	; (80094c8 <USER_SPI_initialize+0x1cc>)
 80094b4:	2201      	movs	r2, #1
 80094b6:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80094b8:	4b03      	ldr	r3, [pc, #12]	; (80094c8 <USER_SPI_initialize+0x1cc>)
 80094ba:	781b      	ldrb	r3, [r3, #0]
 80094bc:	b2db      	uxtb	r3, r3
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3714      	adds	r7, #20
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd90      	pop	{r4, r7, pc}
 80094c6:	bf00      	nop
 80094c8:	20000040 	.word	0x20000040
 80094cc:	20000200 	.word	0x20000200
 80094d0:	20000894 	.word	0x20000894

080094d4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	4603      	mov	r3, r0
 80094dc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80094de:	79fb      	ldrb	r3, [r7, #7]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d001      	beq.n	80094e8 <USER_SPI_status+0x14>
 80094e4:	2301      	movs	r3, #1
 80094e6:	e002      	b.n	80094ee <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80094e8:	4b04      	ldr	r3, [pc, #16]	; (80094fc <USER_SPI_status+0x28>)
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	b2db      	uxtb	r3, r3
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	370c      	adds	r7, #12
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	20000040 	.word	0x20000040

08009500 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	60b9      	str	r1, [r7, #8]
 8009508:	607a      	str	r2, [r7, #4]
 800950a:	603b      	str	r3, [r7, #0]
 800950c:	4603      	mov	r3, r0
 800950e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8009510:	7bfb      	ldrb	r3, [r7, #15]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d102      	bne.n	800951c <USER_SPI_read+0x1c>
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d101      	bne.n	8009520 <USER_SPI_read+0x20>
 800951c:	2304      	movs	r3, #4
 800951e:	e04d      	b.n	80095bc <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8009520:	4b28      	ldr	r3, [pc, #160]	; (80095c4 <USER_SPI_read+0xc4>)
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	b2db      	uxtb	r3, r3
 8009526:	f003 0301 	and.w	r3, r3, #1
 800952a:	2b00      	cmp	r3, #0
 800952c:	d001      	beq.n	8009532 <USER_SPI_read+0x32>
 800952e:	2303      	movs	r3, #3
 8009530:	e044      	b.n	80095bc <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8009532:	4b25      	ldr	r3, [pc, #148]	; (80095c8 <USER_SPI_read+0xc8>)
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	f003 0308 	and.w	r3, r3, #8
 800953a:	2b00      	cmp	r3, #0
 800953c:	d102      	bne.n	8009544 <USER_SPI_read+0x44>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	025b      	lsls	r3, r3, #9
 8009542:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	2b01      	cmp	r3, #1
 8009548:	d111      	bne.n	800956e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800954a:	6879      	ldr	r1, [r7, #4]
 800954c:	2011      	movs	r0, #17
 800954e:	f7ff fe66 	bl	800921e <send_cmd>
 8009552:	4603      	mov	r3, r0
 8009554:	2b00      	cmp	r3, #0
 8009556:	d129      	bne.n	80095ac <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8009558:	f44f 7100 	mov.w	r1, #512	; 0x200
 800955c:	68b8      	ldr	r0, [r7, #8]
 800955e:	f7ff fe03 	bl	8009168 <rcvr_datablock>
 8009562:	4603      	mov	r3, r0
 8009564:	2b00      	cmp	r3, #0
 8009566:	d021      	beq.n	80095ac <USER_SPI_read+0xac>
			count = 0;
 8009568:	2300      	movs	r3, #0
 800956a:	603b      	str	r3, [r7, #0]
 800956c:	e01e      	b.n	80095ac <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800956e:	6879      	ldr	r1, [r7, #4]
 8009570:	2012      	movs	r0, #18
 8009572:	f7ff fe54 	bl	800921e <send_cmd>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d117      	bne.n	80095ac <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800957c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009580:	68b8      	ldr	r0, [r7, #8]
 8009582:	f7ff fdf1 	bl	8009168 <rcvr_datablock>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d00a      	beq.n	80095a2 <USER_SPI_read+0xa2>
				buff += 512;
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009592:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	3b01      	subs	r3, #1
 8009598:	603b      	str	r3, [r7, #0]
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d1ed      	bne.n	800957c <USER_SPI_read+0x7c>
 80095a0:	e000      	b.n	80095a4 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80095a2:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80095a4:	2100      	movs	r1, #0
 80095a6:	200c      	movs	r0, #12
 80095a8:	f7ff fe39 	bl	800921e <send_cmd>
		}
	}
	despiselect();
 80095ac:	f7ff fdb0 	bl	8009110 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	bf14      	ite	ne
 80095b6:	2301      	movne	r3, #1
 80095b8:	2300      	moveq	r3, #0
 80095ba:	b2db      	uxtb	r3, r3
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3710      	adds	r7, #16
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	20000040 	.word	0x20000040
 80095c8:	20000894 	.word	0x20000894

080095cc <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	60b9      	str	r1, [r7, #8]
 80095d4:	607a      	str	r2, [r7, #4]
 80095d6:	603b      	str	r3, [r7, #0]
 80095d8:	4603      	mov	r3, r0
 80095da:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80095dc:	7bfb      	ldrb	r3, [r7, #15]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d102      	bne.n	80095e8 <USER_SPI_write+0x1c>
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d101      	bne.n	80095ec <USER_SPI_write+0x20>
 80095e8:	2304      	movs	r3, #4
 80095ea:	e063      	b.n	80096b4 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80095ec:	4b33      	ldr	r3, [pc, #204]	; (80096bc <USER_SPI_write+0xf0>)
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	f003 0301 	and.w	r3, r3, #1
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d001      	beq.n	80095fe <USER_SPI_write+0x32>
 80095fa:	2303      	movs	r3, #3
 80095fc:	e05a      	b.n	80096b4 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80095fe:	4b2f      	ldr	r3, [pc, #188]	; (80096bc <USER_SPI_write+0xf0>)
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	b2db      	uxtb	r3, r3
 8009604:	f003 0304 	and.w	r3, r3, #4
 8009608:	2b00      	cmp	r3, #0
 800960a:	d001      	beq.n	8009610 <USER_SPI_write+0x44>
 800960c:	2302      	movs	r3, #2
 800960e:	e051      	b.n	80096b4 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8009610:	4b2b      	ldr	r3, [pc, #172]	; (80096c0 <USER_SPI_write+0xf4>)
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	f003 0308 	and.w	r3, r3, #8
 8009618:	2b00      	cmp	r3, #0
 800961a:	d102      	bne.n	8009622 <USER_SPI_write+0x56>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	025b      	lsls	r3, r3, #9
 8009620:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	2b01      	cmp	r3, #1
 8009626:	d110      	bne.n	800964a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8009628:	6879      	ldr	r1, [r7, #4]
 800962a:	2018      	movs	r0, #24
 800962c:	f7ff fdf7 	bl	800921e <send_cmd>
 8009630:	4603      	mov	r3, r0
 8009632:	2b00      	cmp	r3, #0
 8009634:	d136      	bne.n	80096a4 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8009636:	21fe      	movs	r1, #254	; 0xfe
 8009638:	68b8      	ldr	r0, [r7, #8]
 800963a:	f7ff fdbe 	bl	80091ba <xmit_datablock>
 800963e:	4603      	mov	r3, r0
 8009640:	2b00      	cmp	r3, #0
 8009642:	d02f      	beq.n	80096a4 <USER_SPI_write+0xd8>
			count = 0;
 8009644:	2300      	movs	r3, #0
 8009646:	603b      	str	r3, [r7, #0]
 8009648:	e02c      	b.n	80096a4 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800964a:	4b1d      	ldr	r3, [pc, #116]	; (80096c0 <USER_SPI_write+0xf4>)
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	f003 0306 	and.w	r3, r3, #6
 8009652:	2b00      	cmp	r3, #0
 8009654:	d003      	beq.n	800965e <USER_SPI_write+0x92>
 8009656:	6839      	ldr	r1, [r7, #0]
 8009658:	2097      	movs	r0, #151	; 0x97
 800965a:	f7ff fde0 	bl	800921e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800965e:	6879      	ldr	r1, [r7, #4]
 8009660:	2019      	movs	r0, #25
 8009662:	f7ff fddc 	bl	800921e <send_cmd>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d11b      	bne.n	80096a4 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800966c:	21fc      	movs	r1, #252	; 0xfc
 800966e:	68b8      	ldr	r0, [r7, #8]
 8009670:	f7ff fda3 	bl	80091ba <xmit_datablock>
 8009674:	4603      	mov	r3, r0
 8009676:	2b00      	cmp	r3, #0
 8009678:	d00a      	beq.n	8009690 <USER_SPI_write+0xc4>
				buff += 512;
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009680:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	3b01      	subs	r3, #1
 8009686:	603b      	str	r3, [r7, #0]
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d1ee      	bne.n	800966c <USER_SPI_write+0xa0>
 800968e:	e000      	b.n	8009692 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8009690:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8009692:	21fd      	movs	r1, #253	; 0xfd
 8009694:	2000      	movs	r0, #0
 8009696:	f7ff fd90 	bl	80091ba <xmit_datablock>
 800969a:	4603      	mov	r3, r0
 800969c:	2b00      	cmp	r3, #0
 800969e:	d101      	bne.n	80096a4 <USER_SPI_write+0xd8>
 80096a0:	2301      	movs	r3, #1
 80096a2:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80096a4:	f7ff fd34 	bl	8009110 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	bf14      	ite	ne
 80096ae:	2301      	movne	r3, #1
 80096b0:	2300      	moveq	r3, #0
 80096b2:	b2db      	uxtb	r3, r3
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3710      	adds	r7, #16
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}
 80096bc:	20000040 	.word	0x20000040
 80096c0:	20000894 	.word	0x20000894

080096c4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b08c      	sub	sp, #48	; 0x30
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	4603      	mov	r3, r0
 80096cc:	603a      	str	r2, [r7, #0]
 80096ce:	71fb      	strb	r3, [r7, #7]
 80096d0:	460b      	mov	r3, r1
 80096d2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80096d4:	79fb      	ldrb	r3, [r7, #7]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d001      	beq.n	80096de <USER_SPI_ioctl+0x1a>
 80096da:	2304      	movs	r3, #4
 80096dc:	e15a      	b.n	8009994 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80096de:	4baf      	ldr	r3, [pc, #700]	; (800999c <USER_SPI_ioctl+0x2d8>)
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	b2db      	uxtb	r3, r3
 80096e4:	f003 0301 	and.w	r3, r3, #1
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d001      	beq.n	80096f0 <USER_SPI_ioctl+0x2c>
 80096ec:	2303      	movs	r3, #3
 80096ee:	e151      	b.n	8009994 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80096f0:	2301      	movs	r3, #1
 80096f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80096f6:	79bb      	ldrb	r3, [r7, #6]
 80096f8:	2b04      	cmp	r3, #4
 80096fa:	f200 8136 	bhi.w	800996a <USER_SPI_ioctl+0x2a6>
 80096fe:	a201      	add	r2, pc, #4	; (adr r2, 8009704 <USER_SPI_ioctl+0x40>)
 8009700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009704:	08009719 	.word	0x08009719
 8009708:	0800972d 	.word	0x0800972d
 800970c:	0800996b 	.word	0x0800996b
 8009710:	080097d9 	.word	0x080097d9
 8009714:	080098cf 	.word	0x080098cf
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8009718:	f7ff fd0a 	bl	8009130 <spiselect>
 800971c:	4603      	mov	r3, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	f000 8127 	beq.w	8009972 <USER_SPI_ioctl+0x2ae>
 8009724:	2300      	movs	r3, #0
 8009726:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800972a:	e122      	b.n	8009972 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800972c:	2100      	movs	r1, #0
 800972e:	2009      	movs	r0, #9
 8009730:	f7ff fd75 	bl	800921e <send_cmd>
 8009734:	4603      	mov	r3, r0
 8009736:	2b00      	cmp	r3, #0
 8009738:	f040 811d 	bne.w	8009976 <USER_SPI_ioctl+0x2b2>
 800973c:	f107 030c 	add.w	r3, r7, #12
 8009740:	2110      	movs	r1, #16
 8009742:	4618      	mov	r0, r3
 8009744:	f7ff fd10 	bl	8009168 <rcvr_datablock>
 8009748:	4603      	mov	r3, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	f000 8113 	beq.w	8009976 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8009750:	7b3b      	ldrb	r3, [r7, #12]
 8009752:	099b      	lsrs	r3, r3, #6
 8009754:	b2db      	uxtb	r3, r3
 8009756:	2b01      	cmp	r3, #1
 8009758:	d111      	bne.n	800977e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800975a:	7d7b      	ldrb	r3, [r7, #21]
 800975c:	461a      	mov	r2, r3
 800975e:	7d3b      	ldrb	r3, [r7, #20]
 8009760:	021b      	lsls	r3, r3, #8
 8009762:	4413      	add	r3, r2
 8009764:	461a      	mov	r2, r3
 8009766:	7cfb      	ldrb	r3, [r7, #19]
 8009768:	041b      	lsls	r3, r3, #16
 800976a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800976e:	4413      	add	r3, r2
 8009770:	3301      	adds	r3, #1
 8009772:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8009774:	69fb      	ldr	r3, [r7, #28]
 8009776:	029a      	lsls	r2, r3, #10
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	601a      	str	r2, [r3, #0]
 800977c:	e028      	b.n	80097d0 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800977e:	7c7b      	ldrb	r3, [r7, #17]
 8009780:	f003 030f 	and.w	r3, r3, #15
 8009784:	b2da      	uxtb	r2, r3
 8009786:	7dbb      	ldrb	r3, [r7, #22]
 8009788:	09db      	lsrs	r3, r3, #7
 800978a:	b2db      	uxtb	r3, r3
 800978c:	4413      	add	r3, r2
 800978e:	b2da      	uxtb	r2, r3
 8009790:	7d7b      	ldrb	r3, [r7, #21]
 8009792:	005b      	lsls	r3, r3, #1
 8009794:	b2db      	uxtb	r3, r3
 8009796:	f003 0306 	and.w	r3, r3, #6
 800979a:	b2db      	uxtb	r3, r3
 800979c:	4413      	add	r3, r2
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	3302      	adds	r3, #2
 80097a2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80097a6:	7d3b      	ldrb	r3, [r7, #20]
 80097a8:	099b      	lsrs	r3, r3, #6
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	461a      	mov	r2, r3
 80097ae:	7cfb      	ldrb	r3, [r7, #19]
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	441a      	add	r2, r3
 80097b4:	7cbb      	ldrb	r3, [r7, #18]
 80097b6:	029b      	lsls	r3, r3, #10
 80097b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80097bc:	4413      	add	r3, r2
 80097be:	3301      	adds	r3, #1
 80097c0:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80097c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80097c6:	3b09      	subs	r3, #9
 80097c8:	69fa      	ldr	r2, [r7, #28]
 80097ca:	409a      	lsls	r2, r3
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80097d0:	2300      	movs	r3, #0
 80097d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80097d6:	e0ce      	b.n	8009976 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80097d8:	4b71      	ldr	r3, [pc, #452]	; (80099a0 <USER_SPI_ioctl+0x2dc>)
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	f003 0304 	and.w	r3, r3, #4
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d031      	beq.n	8009848 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80097e4:	2100      	movs	r1, #0
 80097e6:	208d      	movs	r0, #141	; 0x8d
 80097e8:	f7ff fd19 	bl	800921e <send_cmd>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	f040 80c3 	bne.w	800997a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80097f4:	20ff      	movs	r0, #255	; 0xff
 80097f6:	f7ff fc21 	bl	800903c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80097fa:	f107 030c 	add.w	r3, r7, #12
 80097fe:	2110      	movs	r1, #16
 8009800:	4618      	mov	r0, r3
 8009802:	f7ff fcb1 	bl	8009168 <rcvr_datablock>
 8009806:	4603      	mov	r3, r0
 8009808:	2b00      	cmp	r3, #0
 800980a:	f000 80b6 	beq.w	800997a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800980e:	2330      	movs	r3, #48	; 0x30
 8009810:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009814:	e007      	b.n	8009826 <USER_SPI_ioctl+0x162>
 8009816:	20ff      	movs	r0, #255	; 0xff
 8009818:	f7ff fc10 	bl	800903c <xchg_spi>
 800981c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009820:	3b01      	subs	r3, #1
 8009822:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009826:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800982a:	2b00      	cmp	r3, #0
 800982c:	d1f3      	bne.n	8009816 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800982e:	7dbb      	ldrb	r3, [r7, #22]
 8009830:	091b      	lsrs	r3, r3, #4
 8009832:	b2db      	uxtb	r3, r3
 8009834:	461a      	mov	r2, r3
 8009836:	2310      	movs	r3, #16
 8009838:	fa03 f202 	lsl.w	r2, r3, r2
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8009840:	2300      	movs	r3, #0
 8009842:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8009846:	e098      	b.n	800997a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8009848:	2100      	movs	r1, #0
 800984a:	2009      	movs	r0, #9
 800984c:	f7ff fce7 	bl	800921e <send_cmd>
 8009850:	4603      	mov	r3, r0
 8009852:	2b00      	cmp	r3, #0
 8009854:	f040 8091 	bne.w	800997a <USER_SPI_ioctl+0x2b6>
 8009858:	f107 030c 	add.w	r3, r7, #12
 800985c:	2110      	movs	r1, #16
 800985e:	4618      	mov	r0, r3
 8009860:	f7ff fc82 	bl	8009168 <rcvr_datablock>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	f000 8087 	beq.w	800997a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800986c:	4b4c      	ldr	r3, [pc, #304]	; (80099a0 <USER_SPI_ioctl+0x2dc>)
 800986e:	781b      	ldrb	r3, [r3, #0]
 8009870:	f003 0302 	and.w	r3, r3, #2
 8009874:	2b00      	cmp	r3, #0
 8009876:	d012      	beq.n	800989e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8009878:	7dbb      	ldrb	r3, [r7, #22]
 800987a:	005b      	lsls	r3, r3, #1
 800987c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8009880:	7dfa      	ldrb	r2, [r7, #23]
 8009882:	09d2      	lsrs	r2, r2, #7
 8009884:	b2d2      	uxtb	r2, r2
 8009886:	4413      	add	r3, r2
 8009888:	1c5a      	adds	r2, r3, #1
 800988a:	7e7b      	ldrb	r3, [r7, #25]
 800988c:	099b      	lsrs	r3, r3, #6
 800988e:	b2db      	uxtb	r3, r3
 8009890:	3b01      	subs	r3, #1
 8009892:	fa02 f303 	lsl.w	r3, r2, r3
 8009896:	461a      	mov	r2, r3
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	601a      	str	r2, [r3, #0]
 800989c:	e013      	b.n	80098c6 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800989e:	7dbb      	ldrb	r3, [r7, #22]
 80098a0:	109b      	asrs	r3, r3, #2
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	f003 031f 	and.w	r3, r3, #31
 80098a8:	3301      	adds	r3, #1
 80098aa:	7dfa      	ldrb	r2, [r7, #23]
 80098ac:	00d2      	lsls	r2, r2, #3
 80098ae:	f002 0218 	and.w	r2, r2, #24
 80098b2:	7df9      	ldrb	r1, [r7, #23]
 80098b4:	0949      	lsrs	r1, r1, #5
 80098b6:	b2c9      	uxtb	r1, r1
 80098b8:	440a      	add	r2, r1
 80098ba:	3201      	adds	r2, #1
 80098bc:	fb02 f303 	mul.w	r3, r2, r3
 80098c0:	461a      	mov	r2, r3
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80098c6:	2300      	movs	r3, #0
 80098c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80098cc:	e055      	b.n	800997a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80098ce:	4b34      	ldr	r3, [pc, #208]	; (80099a0 <USER_SPI_ioctl+0x2dc>)
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	f003 0306 	and.w	r3, r3, #6
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d051      	beq.n	800997e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80098da:	f107 020c 	add.w	r2, r7, #12
 80098de:	79fb      	ldrb	r3, [r7, #7]
 80098e0:	210b      	movs	r1, #11
 80098e2:	4618      	mov	r0, r3
 80098e4:	f7ff feee 	bl	80096c4 <USER_SPI_ioctl>
 80098e8:	4603      	mov	r3, r0
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d149      	bne.n	8009982 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80098ee:	7b3b      	ldrb	r3, [r7, #12]
 80098f0:	099b      	lsrs	r3, r3, #6
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d104      	bne.n	8009902 <USER_SPI_ioctl+0x23e>
 80098f8:	7dbb      	ldrb	r3, [r7, #22]
 80098fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d041      	beq.n	8009986 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	623b      	str	r3, [r7, #32]
 8009906:	6a3b      	ldr	r3, [r7, #32]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	62bb      	str	r3, [r7, #40]	; 0x28
 800990c:	6a3b      	ldr	r3, [r7, #32]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8009912:	4b23      	ldr	r3, [pc, #140]	; (80099a0 <USER_SPI_ioctl+0x2dc>)
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	f003 0308 	and.w	r3, r3, #8
 800991a:	2b00      	cmp	r3, #0
 800991c:	d105      	bne.n	800992a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800991e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009920:	025b      	lsls	r3, r3, #9
 8009922:	62bb      	str	r3, [r7, #40]	; 0x28
 8009924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009926:	025b      	lsls	r3, r3, #9
 8009928:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800992a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800992c:	2020      	movs	r0, #32
 800992e:	f7ff fc76 	bl	800921e <send_cmd>
 8009932:	4603      	mov	r3, r0
 8009934:	2b00      	cmp	r3, #0
 8009936:	d128      	bne.n	800998a <USER_SPI_ioctl+0x2c6>
 8009938:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800993a:	2021      	movs	r0, #33	; 0x21
 800993c:	f7ff fc6f 	bl	800921e <send_cmd>
 8009940:	4603      	mov	r3, r0
 8009942:	2b00      	cmp	r3, #0
 8009944:	d121      	bne.n	800998a <USER_SPI_ioctl+0x2c6>
 8009946:	2100      	movs	r1, #0
 8009948:	2026      	movs	r0, #38	; 0x26
 800994a:	f7ff fc68 	bl	800921e <send_cmd>
 800994e:	4603      	mov	r3, r0
 8009950:	2b00      	cmp	r3, #0
 8009952:	d11a      	bne.n	800998a <USER_SPI_ioctl+0x2c6>
 8009954:	f247 5030 	movw	r0, #30000	; 0x7530
 8009958:	f7ff fbb6 	bl	80090c8 <wait_ready>
 800995c:	4603      	mov	r3, r0
 800995e:	2b00      	cmp	r3, #0
 8009960:	d013      	beq.n	800998a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8009962:	2300      	movs	r3, #0
 8009964:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8009968:	e00f      	b.n	800998a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800996a:	2304      	movs	r3, #4
 800996c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009970:	e00c      	b.n	800998c <USER_SPI_ioctl+0x2c8>
		break;
 8009972:	bf00      	nop
 8009974:	e00a      	b.n	800998c <USER_SPI_ioctl+0x2c8>
		break;
 8009976:	bf00      	nop
 8009978:	e008      	b.n	800998c <USER_SPI_ioctl+0x2c8>
		break;
 800997a:	bf00      	nop
 800997c:	e006      	b.n	800998c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800997e:	bf00      	nop
 8009980:	e004      	b.n	800998c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009982:	bf00      	nop
 8009984:	e002      	b.n	800998c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009986:	bf00      	nop
 8009988:	e000      	b.n	800998c <USER_SPI_ioctl+0x2c8>
		break;
 800998a:	bf00      	nop
	}

	despiselect();
 800998c:	f7ff fbc0 	bl	8009110 <despiselect>

	return res;
 8009990:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009994:	4618      	mov	r0, r3
 8009996:	3730      	adds	r7, #48	; 0x30
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}
 800999c:	20000040 	.word	0x20000040
 80099a0:	20000894 	.word	0x20000894

080099a4 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	460b      	mov	r3, r1
 80099ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80099b0:	2010      	movs	r0, #16
 80099b2:	f004 fc9f 	bl	800e2f4 <USBD_static_malloc>
 80099b6:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d109      	bne.n	80099d2 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	32b0      	adds	r2, #176	; 0xb0
 80099c8:	2100      	movs	r1, #0
 80099ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80099ce:	2302      	movs	r3, #2
 80099d0:	e048      	b.n	8009a64 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	32b0      	adds	r2, #176	; 0xb0
 80099dc:	68f9      	ldr	r1, [r7, #12]
 80099de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	32b0      	adds	r2, #176	; 0xb0
 80099ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	7c1b      	ldrb	r3, [r3, #16]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d10d      	bne.n	8009a1a <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 80099fe:	4b1b      	ldr	r3, [pc, #108]	; (8009a6c <USBD_HID_Init+0xc8>)
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	f003 020f 	and.w	r2, r3, #15
 8009a06:	6879      	ldr	r1, [r7, #4]
 8009a08:	4613      	mov	r3, r2
 8009a0a:	009b      	lsls	r3, r3, #2
 8009a0c:	4413      	add	r3, r2
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	440b      	add	r3, r1
 8009a12:	3326      	adds	r3, #38	; 0x26
 8009a14:	2207      	movs	r2, #7
 8009a16:	801a      	strh	r2, [r3, #0]
 8009a18:	e00c      	b.n	8009a34 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8009a1a:	4b14      	ldr	r3, [pc, #80]	; (8009a6c <USBD_HID_Init+0xc8>)
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	f003 020f 	and.w	r2, r3, #15
 8009a22:	6879      	ldr	r1, [r7, #4]
 8009a24:	4613      	mov	r3, r2
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	4413      	add	r3, r2
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	440b      	add	r3, r1
 8009a2e:	3326      	adds	r3, #38	; 0x26
 8009a30:	220a      	movs	r2, #10
 8009a32:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8009a34:	4b0d      	ldr	r3, [pc, #52]	; (8009a6c <USBD_HID_Init+0xc8>)
 8009a36:	7819      	ldrb	r1, [r3, #0]
 8009a38:	2304      	movs	r3, #4
 8009a3a:	2203      	movs	r2, #3
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f004 fb48 	bl	800e0d2 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8009a42:	4b0a      	ldr	r3, [pc, #40]	; (8009a6c <USBD_HID_Init+0xc8>)
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	f003 020f 	and.w	r2, r3, #15
 8009a4a:	6879      	ldr	r1, [r7, #4]
 8009a4c:	4613      	mov	r3, r2
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	4413      	add	r3, r2
 8009a52:	009b      	lsls	r3, r3, #2
 8009a54:	440b      	add	r3, r1
 8009a56:	3324      	adds	r3, #36	; 0x24
 8009a58:	2201      	movs	r2, #1
 8009a5a:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8009a62:	2300      	movs	r3, #0
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3710      	adds	r7, #16
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}
 8009a6c:	200000d8 	.word	0x200000d8

08009a70 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	460b      	mov	r3, r1
 8009a7a:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8009a7c:	4b1f      	ldr	r3, [pc, #124]	; (8009afc <USBD_HID_DeInit+0x8c>)
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	4619      	mov	r1, r3
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f004 fb4b 	bl	800e11e <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8009a88:	4b1c      	ldr	r3, [pc, #112]	; (8009afc <USBD_HID_DeInit+0x8c>)
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	f003 020f 	and.w	r2, r3, #15
 8009a90:	6879      	ldr	r1, [r7, #4]
 8009a92:	4613      	mov	r3, r2
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	4413      	add	r3, r2
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	440b      	add	r3, r1
 8009a9c:	3324      	adds	r3, #36	; 0x24
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8009aa2:	4b16      	ldr	r3, [pc, #88]	; (8009afc <USBD_HID_DeInit+0x8c>)
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	f003 020f 	and.w	r2, r3, #15
 8009aaa:	6879      	ldr	r1, [r7, #4]
 8009aac:	4613      	mov	r3, r2
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	4413      	add	r3, r2
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	440b      	add	r3, r1
 8009ab6:	3326      	adds	r3, #38	; 0x26
 8009ab8:	2200      	movs	r2, #0
 8009aba:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	32b0      	adds	r2, #176	; 0xb0
 8009ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d011      	beq.n	8009af2 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	32b0      	adds	r2, #176	; 0xb0
 8009ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009adc:	4618      	mov	r0, r3
 8009ade:	f004 fc17 	bl	800e310 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	32b0      	adds	r2, #176	; 0xb0
 8009aec:	2100      	movs	r1, #0
 8009aee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8009af2:	2300      	movs	r3, #0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3708      	adds	r7, #8
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	200000d8 	.word	0x200000d8

08009b00 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b086      	sub	sp, #24
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	32b0      	adds	r2, #176	; 0xb0
 8009b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b18:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d101      	bne.n	8009b2c <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8009b28:	2303      	movs	r3, #3
 8009b2a:	e0e8      	b.n	8009cfe <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d046      	beq.n	8009bc6 <USBD_HID_Setup+0xc6>
 8009b38:	2b20      	cmp	r3, #32
 8009b3a:	f040 80d8 	bne.w	8009cee <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	785b      	ldrb	r3, [r3, #1]
 8009b42:	3b02      	subs	r3, #2
 8009b44:	2b09      	cmp	r3, #9
 8009b46:	d836      	bhi.n	8009bb6 <USBD_HID_Setup+0xb6>
 8009b48:	a201      	add	r2, pc, #4	; (adr r2, 8009b50 <USBD_HID_Setup+0x50>)
 8009b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4e:	bf00      	nop
 8009b50:	08009ba7 	.word	0x08009ba7
 8009b54:	08009b87 	.word	0x08009b87
 8009b58:	08009bb7 	.word	0x08009bb7
 8009b5c:	08009bb7 	.word	0x08009bb7
 8009b60:	08009bb7 	.word	0x08009bb7
 8009b64:	08009bb7 	.word	0x08009bb7
 8009b68:	08009bb7 	.word	0x08009bb7
 8009b6c:	08009bb7 	.word	0x08009bb7
 8009b70:	08009b95 	.word	0x08009b95
 8009b74:	08009b79 	.word	0x08009b79
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	885b      	ldrh	r3, [r3, #2]
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	461a      	mov	r2, r3
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	601a      	str	r2, [r3, #0]
          break;
 8009b84:	e01e      	b.n	8009bc4 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2201      	movs	r2, #1
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f001 fbd5 	bl	800b33c <USBD_CtlSendData>
          break;
 8009b92:	e017      	b.n	8009bc4 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	885b      	ldrh	r3, [r3, #2]
 8009b98:	0a1b      	lsrs	r3, r3, #8
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	605a      	str	r2, [r3, #4]
          break;
 8009ba4:	e00e      	b.n	8009bc4 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	3304      	adds	r3, #4
 8009baa:	2201      	movs	r2, #1
 8009bac:	4619      	mov	r1, r3
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f001 fbc4 	bl	800b33c <USBD_CtlSendData>
          break;
 8009bb4:	e006      	b.n	8009bc4 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009bb6:	6839      	ldr	r1, [r7, #0]
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f001 fb4e 	bl	800b25a <USBD_CtlError>
          ret = USBD_FAIL;
 8009bbe:	2303      	movs	r3, #3
 8009bc0:	75fb      	strb	r3, [r7, #23]
          break;
 8009bc2:	bf00      	nop
      }
      break;
 8009bc4:	e09a      	b.n	8009cfc <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	785b      	ldrb	r3, [r3, #1]
 8009bca:	2b0b      	cmp	r3, #11
 8009bcc:	f200 8086 	bhi.w	8009cdc <USBD_HID_Setup+0x1dc>
 8009bd0:	a201      	add	r2, pc, #4	; (adr r2, 8009bd8 <USBD_HID_Setup+0xd8>)
 8009bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bd6:	bf00      	nop
 8009bd8:	08009c09 	.word	0x08009c09
 8009bdc:	08009ceb 	.word	0x08009ceb
 8009be0:	08009cdd 	.word	0x08009cdd
 8009be4:	08009cdd 	.word	0x08009cdd
 8009be8:	08009cdd 	.word	0x08009cdd
 8009bec:	08009cdd 	.word	0x08009cdd
 8009bf0:	08009c33 	.word	0x08009c33
 8009bf4:	08009cdd 	.word	0x08009cdd
 8009bf8:	08009cdd 	.word	0x08009cdd
 8009bfc:	08009cdd 	.word	0x08009cdd
 8009c00:	08009c8b 	.word	0x08009c8b
 8009c04:	08009cb5 	.word	0x08009cb5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	2b03      	cmp	r3, #3
 8009c12:	d107      	bne.n	8009c24 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009c14:	f107 030a 	add.w	r3, r7, #10
 8009c18:	2202      	movs	r2, #2
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f001 fb8d 	bl	800b33c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009c22:	e063      	b.n	8009cec <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8009c24:	6839      	ldr	r1, [r7, #0]
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f001 fb17 	bl	800b25a <USBD_CtlError>
            ret = USBD_FAIL;
 8009c2c:	2303      	movs	r3, #3
 8009c2e:	75fb      	strb	r3, [r7, #23]
          break;
 8009c30:	e05c      	b.n	8009cec <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	885b      	ldrh	r3, [r3, #2]
 8009c36:	0a1b      	lsrs	r3, r3, #8
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	2b22      	cmp	r3, #34	; 0x22
 8009c3c:	d108      	bne.n	8009c50 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	88db      	ldrh	r3, [r3, #6]
 8009c42:	2b20      	cmp	r3, #32
 8009c44:	bf28      	it	cs
 8009c46:	2320      	movcs	r3, #32
 8009c48:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8009c4a:	4b2f      	ldr	r3, [pc, #188]	; (8009d08 <USBD_HID_Setup+0x208>)
 8009c4c:	613b      	str	r3, [r7, #16]
 8009c4e:	e015      	b.n	8009c7c <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	885b      	ldrh	r3, [r3, #2]
 8009c54:	0a1b      	lsrs	r3, r3, #8
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	2b21      	cmp	r3, #33	; 0x21
 8009c5a:	d108      	bne.n	8009c6e <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8009c5c:	4b2b      	ldr	r3, [pc, #172]	; (8009d0c <USBD_HID_Setup+0x20c>)
 8009c5e:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	88db      	ldrh	r3, [r3, #6]
 8009c64:	2b09      	cmp	r3, #9
 8009c66:	bf28      	it	cs
 8009c68:	2309      	movcs	r3, #9
 8009c6a:	82bb      	strh	r3, [r7, #20]
 8009c6c:	e006      	b.n	8009c7c <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8009c6e:	6839      	ldr	r1, [r7, #0]
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f001 faf2 	bl	800b25a <USBD_CtlError>
            ret = USBD_FAIL;
 8009c76:	2303      	movs	r3, #3
 8009c78:	75fb      	strb	r3, [r7, #23]
            break;
 8009c7a:	e037      	b.n	8009cec <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8009c7c:	8abb      	ldrh	r3, [r7, #20]
 8009c7e:	461a      	mov	r2, r3
 8009c80:	6939      	ldr	r1, [r7, #16]
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f001 fb5a 	bl	800b33c <USBD_CtlSendData>
          break;
 8009c88:	e030      	b.n	8009cec <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	2b03      	cmp	r3, #3
 8009c94:	d107      	bne.n	8009ca6 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	3308      	adds	r3, #8
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f001 fb4c 	bl	800b33c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009ca4:	e022      	b.n	8009cec <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8009ca6:	6839      	ldr	r1, [r7, #0]
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f001 fad6 	bl	800b25a <USBD_CtlError>
            ret = USBD_FAIL;
 8009cae:	2303      	movs	r3, #3
 8009cb0:	75fb      	strb	r3, [r7, #23]
          break;
 8009cb2:	e01b      	b.n	8009cec <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cba:	b2db      	uxtb	r3, r3
 8009cbc:	2b03      	cmp	r3, #3
 8009cbe:	d106      	bne.n	8009cce <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	885b      	ldrh	r3, [r3, #2]
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009ccc:	e00e      	b.n	8009cec <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8009cce:	6839      	ldr	r1, [r7, #0]
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f001 fac2 	bl	800b25a <USBD_CtlError>
            ret = USBD_FAIL;
 8009cd6:	2303      	movs	r3, #3
 8009cd8:	75fb      	strb	r3, [r7, #23]
          break;
 8009cda:	e007      	b.n	8009cec <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009cdc:	6839      	ldr	r1, [r7, #0]
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f001 fabb 	bl	800b25a <USBD_CtlError>
          ret = USBD_FAIL;
 8009ce4:	2303      	movs	r3, #3
 8009ce6:	75fb      	strb	r3, [r7, #23]
          break;
 8009ce8:	e000      	b.n	8009cec <USBD_HID_Setup+0x1ec>
          break;
 8009cea:	bf00      	nop
      }
      break;
 8009cec:	e006      	b.n	8009cfc <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8009cee:	6839      	ldr	r1, [r7, #0]
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f001 fab2 	bl	800b25a <USBD_CtlError>
      ret = USBD_FAIL;
 8009cf6:	2303      	movs	r3, #3
 8009cf8:	75fb      	strb	r3, [r7, #23]
      break;
 8009cfa:	bf00      	nop
  }

  return (uint8_t)ret;
 8009cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3718      	adds	r7, #24
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	200000b8 	.word	0x200000b8
 8009d0c:	200000a0 	.word	0x200000a0

08009d10 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b086      	sub	sp, #24
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	60f8      	str	r0, [r7, #12]
 8009d18:	60b9      	str	r1, [r7, #8]
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	32b0      	adds	r2, #176	; 0xb0
 8009d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d2c:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d101      	bne.n	8009d38 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009d34:	2303      	movs	r3, #3
 8009d36:	e014      	b.n	8009d62 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	2b03      	cmp	r3, #3
 8009d42:	d10d      	bne.n	8009d60 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	7b1b      	ldrb	r3, [r3, #12]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d109      	bne.n	8009d60 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	2201      	movs	r2, #1
 8009d50:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8009d52:	4b06      	ldr	r3, [pc, #24]	; (8009d6c <USBD_HID_SendReport+0x5c>)
 8009d54:	7819      	ldrb	r1, [r3, #0]
 8009d56:	88fb      	ldrh	r3, [r7, #6]
 8009d58:	68ba      	ldr	r2, [r7, #8]
 8009d5a:	68f8      	ldr	r0, [r7, #12]
 8009d5c:	f004 fa87 	bl	800e26e <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8009d60:	2300      	movs	r3, #0
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3718      	adds	r7, #24
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	200000d8 	.word	0x200000d8

08009d70 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8009d78:	2181      	movs	r1, #129	; 0x81
 8009d7a:	4809      	ldr	r0, [pc, #36]	; (8009da0 <USBD_HID_GetFSCfgDesc+0x30>)
 8009d7c:	f000 fc35 	bl	800a5ea <USBD_GetEpDesc>
 8009d80:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d002      	beq.n	8009d8e <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	220a      	movs	r2, #10
 8009d8c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2222      	movs	r2, #34	; 0x22
 8009d92:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8009d94:	4b02      	ldr	r3, [pc, #8]	; (8009da0 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	2000007c 	.word	0x2000007c

08009da4 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8009dac:	2181      	movs	r1, #129	; 0x81
 8009dae:	4809      	ldr	r0, [pc, #36]	; (8009dd4 <USBD_HID_GetHSCfgDesc+0x30>)
 8009db0:	f000 fc1b 	bl	800a5ea <USBD_GetEpDesc>
 8009db4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d002      	beq.n	8009dc2 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2207      	movs	r2, #7
 8009dc0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2222      	movs	r2, #34	; 0x22
 8009dc6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8009dc8:	4b02      	ldr	r3, [pc, #8]	; (8009dd4 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3710      	adds	r7, #16
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	2000007c 	.word	0x2000007c

08009dd8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8009de0:	2181      	movs	r1, #129	; 0x81
 8009de2:	4809      	ldr	r0, [pc, #36]	; (8009e08 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8009de4:	f000 fc01 	bl	800a5ea <USBD_GetEpDesc>
 8009de8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d002      	beq.n	8009df6 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	220a      	movs	r2, #10
 8009df4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2222      	movs	r2, #34	; 0x22
 8009dfa:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8009dfc:	4b02      	ldr	r3, [pc, #8]	; (8009e08 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3710      	adds	r7, #16
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	2000007c 	.word	0x2000007c

08009e0c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b083      	sub	sp, #12
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	460b      	mov	r3, r1
 8009e16:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	32b0      	adds	r2, #176	; 0xb0
 8009e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e26:	2200      	movs	r2, #0
 8009e28:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8009e2a:	2300      	movs	r3, #0
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	370c      	adds	r7, #12
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr

08009e38 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b083      	sub	sp, #12
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	220a      	movs	r2, #10
 8009e44:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8009e46:	4b03      	ldr	r3, [pc, #12]	; (8009e54 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	370c      	adds	r7, #12
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr
 8009e54:	200000ac 	.word	0x200000ac

08009e58 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b086      	sub	sp, #24
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	60f8      	str	r0, [r7, #12]
 8009e60:	60b9      	str	r1, [r7, #8]
 8009e62:	4613      	mov	r3, r2
 8009e64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d101      	bne.n	8009e70 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009e6c:	2303      	movs	r3, #3
 8009e6e:	e01f      	b.n	8009eb0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2200      	movs	r2, #0
 8009e74:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2200      	movs	r2, #0
 8009e84:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d003      	beq.n	8009e96 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	68ba      	ldr	r2, [r7, #8]
 8009e92:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2201      	movs	r2, #1
 8009e9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	79fa      	ldrb	r2, [r7, #7]
 8009ea2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009ea4:	68f8      	ldr	r0, [r7, #12]
 8009ea6:	f004 f8ad 	bl	800e004 <USBD_LL_Init>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3718      	adds	r7, #24
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b084      	sub	sp, #16
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d101      	bne.n	8009ed0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009ecc:	2303      	movs	r3, #3
 8009ece:	e025      	b.n	8009f1c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	683a      	ldr	r2, [r7, #0]
 8009ed4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	32ae      	adds	r2, #174	; 0xae
 8009ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d00f      	beq.n	8009f0c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	32ae      	adds	r2, #174	; 0xae
 8009ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009efc:	f107 020e 	add.w	r2, r7, #14
 8009f00:	4610      	mov	r0, r2
 8009f02:	4798      	blx	r3
 8009f04:	4602      	mov	r2, r0
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009f12:	1c5a      	adds	r2, r3, #1
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009f1a:	2300      	movs	r3, #0
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3710      	adds	r7, #16
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f004 f8b5 	bl	800e09c <USBD_LL_Start>
 8009f32:	4603      	mov	r3, r0
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3708      	adds	r7, #8
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009f44:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	370c      	adds	r7, #12
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr

08009f52 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f52:	b580      	push	{r7, lr}
 8009f54:	b084      	sub	sp, #16
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d009      	beq.n	8009f80 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	78fa      	ldrb	r2, [r7, #3]
 8009f76:	4611      	mov	r1, r2
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	4798      	blx	r3
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3710      	adds	r7, #16
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	b084      	sub	sp, #16
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
 8009f92:	460b      	mov	r3, r1
 8009f94:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f96:	2300      	movs	r3, #0
 8009f98:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	78fa      	ldrb	r2, [r7, #3]
 8009fa4:	4611      	mov	r1, r2
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	4798      	blx	r3
 8009faa:	4603      	mov	r3, r0
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d001      	beq.n	8009fb4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009fb0:	2303      	movs	r3, #3
 8009fb2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b084      	sub	sp, #16
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6078      	str	r0, [r7, #4]
 8009fc6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009fce:	6839      	ldr	r1, [r7, #0]
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f001 f908 	bl	800b1e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2201      	movs	r2, #1
 8009fda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009fe4:	461a      	mov	r2, r3
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009ff2:	f003 031f 	and.w	r3, r3, #31
 8009ff6:	2b02      	cmp	r3, #2
 8009ff8:	d01a      	beq.n	800a030 <USBD_LL_SetupStage+0x72>
 8009ffa:	2b02      	cmp	r3, #2
 8009ffc:	d822      	bhi.n	800a044 <USBD_LL_SetupStage+0x86>
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d002      	beq.n	800a008 <USBD_LL_SetupStage+0x4a>
 800a002:	2b01      	cmp	r3, #1
 800a004:	d00a      	beq.n	800a01c <USBD_LL_SetupStage+0x5e>
 800a006:	e01d      	b.n	800a044 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a00e:	4619      	mov	r1, r3
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f000 fb5f 	bl	800a6d4 <USBD_StdDevReq>
 800a016:	4603      	mov	r3, r0
 800a018:	73fb      	strb	r3, [r7, #15]
      break;
 800a01a:	e020      	b.n	800a05e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a022:	4619      	mov	r1, r3
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f000 fbc7 	bl	800a7b8 <USBD_StdItfReq>
 800a02a:	4603      	mov	r3, r0
 800a02c:	73fb      	strb	r3, [r7, #15]
      break;
 800a02e:	e016      	b.n	800a05e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a036:	4619      	mov	r1, r3
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f000 fc29 	bl	800a890 <USBD_StdEPReq>
 800a03e:	4603      	mov	r3, r0
 800a040:	73fb      	strb	r3, [r7, #15]
      break;
 800a042:	e00c      	b.n	800a05e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a04a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a04e:	b2db      	uxtb	r3, r3
 800a050:	4619      	mov	r1, r3
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f004 f882 	bl	800e15c <USBD_LL_StallEP>
 800a058:	4603      	mov	r3, r0
 800a05a:	73fb      	strb	r3, [r7, #15]
      break;
 800a05c:	bf00      	nop
  }

  return ret;
 800a05e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a060:	4618      	mov	r0, r3
 800a062:	3710      	adds	r7, #16
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b086      	sub	sp, #24
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	60f8      	str	r0, [r7, #12]
 800a070:	460b      	mov	r3, r1
 800a072:	607a      	str	r2, [r7, #4]
 800a074:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a076:	2300      	movs	r3, #0
 800a078:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a07a:	7afb      	ldrb	r3, [r7, #11]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d16e      	bne.n	800a15e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a086:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a08e:	2b03      	cmp	r3, #3
 800a090:	f040 8098 	bne.w	800a1c4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	689a      	ldr	r2, [r3, #8]
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	68db      	ldr	r3, [r3, #12]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d913      	bls.n	800a0c8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	689a      	ldr	r2, [r3, #8]
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	68db      	ldr	r3, [r3, #12]
 800a0a8:	1ad2      	subs	r2, r2, r3
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	68da      	ldr	r2, [r3, #12]
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	689b      	ldr	r3, [r3, #8]
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	bf28      	it	cs
 800a0ba:	4613      	movcs	r3, r2
 800a0bc:	461a      	mov	r2, r3
 800a0be:	6879      	ldr	r1, [r7, #4]
 800a0c0:	68f8      	ldr	r0, [r7, #12]
 800a0c2:	f001 f967 	bl	800b394 <USBD_CtlContinueRx>
 800a0c6:	e07d      	b.n	800a1c4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a0ce:	f003 031f 	and.w	r3, r3, #31
 800a0d2:	2b02      	cmp	r3, #2
 800a0d4:	d014      	beq.n	800a100 <USBD_LL_DataOutStage+0x98>
 800a0d6:	2b02      	cmp	r3, #2
 800a0d8:	d81d      	bhi.n	800a116 <USBD_LL_DataOutStage+0xae>
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d002      	beq.n	800a0e4 <USBD_LL_DataOutStage+0x7c>
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d003      	beq.n	800a0ea <USBD_LL_DataOutStage+0x82>
 800a0e2:	e018      	b.n	800a116 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	75bb      	strb	r3, [r7, #22]
            break;
 800a0e8:	e018      	b.n	800a11c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a0f0:	b2db      	uxtb	r3, r3
 800a0f2:	4619      	mov	r1, r3
 800a0f4:	68f8      	ldr	r0, [r7, #12]
 800a0f6:	f000 fa5e 	bl	800a5b6 <USBD_CoreFindIF>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	75bb      	strb	r3, [r7, #22]
            break;
 800a0fe:	e00d      	b.n	800a11c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a106:	b2db      	uxtb	r3, r3
 800a108:	4619      	mov	r1, r3
 800a10a:	68f8      	ldr	r0, [r7, #12]
 800a10c:	f000 fa60 	bl	800a5d0 <USBD_CoreFindEP>
 800a110:	4603      	mov	r3, r0
 800a112:	75bb      	strb	r3, [r7, #22]
            break;
 800a114:	e002      	b.n	800a11c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a116:	2300      	movs	r3, #0
 800a118:	75bb      	strb	r3, [r7, #22]
            break;
 800a11a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a11c:	7dbb      	ldrb	r3, [r7, #22]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d119      	bne.n	800a156 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	2b03      	cmp	r3, #3
 800a12c:	d113      	bne.n	800a156 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a12e:	7dba      	ldrb	r2, [r7, #22]
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	32ae      	adds	r2, #174	; 0xae
 800a134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a138:	691b      	ldr	r3, [r3, #16]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d00b      	beq.n	800a156 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a13e:	7dba      	ldrb	r2, [r7, #22]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a146:	7dba      	ldrb	r2, [r7, #22]
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	32ae      	adds	r2, #174	; 0xae
 800a14c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a150:	691b      	ldr	r3, [r3, #16]
 800a152:	68f8      	ldr	r0, [r7, #12]
 800a154:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a156:	68f8      	ldr	r0, [r7, #12]
 800a158:	f001 f92d 	bl	800b3b6 <USBD_CtlSendStatus>
 800a15c:	e032      	b.n	800a1c4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a15e:	7afb      	ldrb	r3, [r7, #11]
 800a160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a164:	b2db      	uxtb	r3, r3
 800a166:	4619      	mov	r1, r3
 800a168:	68f8      	ldr	r0, [r7, #12]
 800a16a:	f000 fa31 	bl	800a5d0 <USBD_CoreFindEP>
 800a16e:	4603      	mov	r3, r0
 800a170:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a172:	7dbb      	ldrb	r3, [r7, #22]
 800a174:	2bff      	cmp	r3, #255	; 0xff
 800a176:	d025      	beq.n	800a1c4 <USBD_LL_DataOutStage+0x15c>
 800a178:	7dbb      	ldrb	r3, [r7, #22]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d122      	bne.n	800a1c4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a184:	b2db      	uxtb	r3, r3
 800a186:	2b03      	cmp	r3, #3
 800a188:	d117      	bne.n	800a1ba <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a18a:	7dba      	ldrb	r2, [r7, #22]
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	32ae      	adds	r2, #174	; 0xae
 800a190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a194:	699b      	ldr	r3, [r3, #24]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d00f      	beq.n	800a1ba <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a19a:	7dba      	ldrb	r2, [r7, #22]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a1a2:	7dba      	ldrb	r2, [r7, #22]
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	32ae      	adds	r2, #174	; 0xae
 800a1a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1ac:	699b      	ldr	r3, [r3, #24]
 800a1ae:	7afa      	ldrb	r2, [r7, #11]
 800a1b0:	4611      	mov	r1, r2
 800a1b2:	68f8      	ldr	r0, [r7, #12]
 800a1b4:	4798      	blx	r3
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a1ba:	7dfb      	ldrb	r3, [r7, #23]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d001      	beq.n	800a1c4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a1c0:	7dfb      	ldrb	r3, [r7, #23]
 800a1c2:	e000      	b.n	800a1c6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a1c4:	2300      	movs	r3, #0
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3718      	adds	r7, #24
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}

0800a1ce <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a1ce:	b580      	push	{r7, lr}
 800a1d0:	b086      	sub	sp, #24
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	60f8      	str	r0, [r7, #12]
 800a1d6:	460b      	mov	r3, r1
 800a1d8:	607a      	str	r2, [r7, #4]
 800a1da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a1dc:	7afb      	ldrb	r3, [r7, #11]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d16f      	bne.n	800a2c2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	3314      	adds	r3, #20
 800a1e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a1ee:	2b02      	cmp	r3, #2
 800a1f0:	d15a      	bne.n	800a2a8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	689a      	ldr	r2, [r3, #8]
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	68db      	ldr	r3, [r3, #12]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d914      	bls.n	800a228 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	689a      	ldr	r2, [r3, #8]
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	1ad2      	subs	r2, r2, r3
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	689b      	ldr	r3, [r3, #8]
 800a210:	461a      	mov	r2, r3
 800a212:	6879      	ldr	r1, [r7, #4]
 800a214:	68f8      	ldr	r0, [r7, #12]
 800a216:	f001 f8ac 	bl	800b372 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a21a:	2300      	movs	r3, #0
 800a21c:	2200      	movs	r2, #0
 800a21e:	2100      	movs	r1, #0
 800a220:	68f8      	ldr	r0, [r7, #12]
 800a222:	f004 f845 	bl	800e2b0 <USBD_LL_PrepareReceive>
 800a226:	e03f      	b.n	800a2a8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	68da      	ldr	r2, [r3, #12]
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	429a      	cmp	r2, r3
 800a232:	d11c      	bne.n	800a26e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	685a      	ldr	r2, [r3, #4]
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d316      	bcc.n	800a26e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	685a      	ldr	r2, [r3, #4]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d20f      	bcs.n	800a26e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a24e:	2200      	movs	r2, #0
 800a250:	2100      	movs	r1, #0
 800a252:	68f8      	ldr	r0, [r7, #12]
 800a254:	f001 f88d 	bl	800b372 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2200      	movs	r2, #0
 800a25c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a260:	2300      	movs	r3, #0
 800a262:	2200      	movs	r2, #0
 800a264:	2100      	movs	r1, #0
 800a266:	68f8      	ldr	r0, [r7, #12]
 800a268:	f004 f822 	bl	800e2b0 <USBD_LL_PrepareReceive>
 800a26c:	e01c      	b.n	800a2a8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a274:	b2db      	uxtb	r3, r3
 800a276:	2b03      	cmp	r3, #3
 800a278:	d10f      	bne.n	800a29a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a280:	68db      	ldr	r3, [r3, #12]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d009      	beq.n	800a29a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2200      	movs	r2, #0
 800a28a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a294:	68db      	ldr	r3, [r3, #12]
 800a296:	68f8      	ldr	r0, [r7, #12]
 800a298:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a29a:	2180      	movs	r1, #128	; 0x80
 800a29c:	68f8      	ldr	r0, [r7, #12]
 800a29e:	f003 ff5d 	bl	800e15c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a2a2:	68f8      	ldr	r0, [r7, #12]
 800a2a4:	f001 f89a 	bl	800b3dc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d03a      	beq.n	800a328 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a2b2:	68f8      	ldr	r0, [r7, #12]
 800a2b4:	f7ff fe42 	bl	8009f3c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a2c0:	e032      	b.n	800a328 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a2c2:	7afb      	ldrb	r3, [r7, #11]
 800a2c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a2c8:	b2db      	uxtb	r3, r3
 800a2ca:	4619      	mov	r1, r3
 800a2cc:	68f8      	ldr	r0, [r7, #12]
 800a2ce:	f000 f97f 	bl	800a5d0 <USBD_CoreFindEP>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a2d6:	7dfb      	ldrb	r3, [r7, #23]
 800a2d8:	2bff      	cmp	r3, #255	; 0xff
 800a2da:	d025      	beq.n	800a328 <USBD_LL_DataInStage+0x15a>
 800a2dc:	7dfb      	ldrb	r3, [r7, #23]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d122      	bne.n	800a328 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2e8:	b2db      	uxtb	r3, r3
 800a2ea:	2b03      	cmp	r3, #3
 800a2ec:	d11c      	bne.n	800a328 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a2ee:	7dfa      	ldrb	r2, [r7, #23]
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	32ae      	adds	r2, #174	; 0xae
 800a2f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2f8:	695b      	ldr	r3, [r3, #20]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d014      	beq.n	800a328 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a2fe:	7dfa      	ldrb	r2, [r7, #23]
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a306:	7dfa      	ldrb	r2, [r7, #23]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	32ae      	adds	r2, #174	; 0xae
 800a30c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a310:	695b      	ldr	r3, [r3, #20]
 800a312:	7afa      	ldrb	r2, [r7, #11]
 800a314:	4611      	mov	r1, r2
 800a316:	68f8      	ldr	r0, [r7, #12]
 800a318:	4798      	blx	r3
 800a31a:	4603      	mov	r3, r0
 800a31c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a31e:	7dbb      	ldrb	r3, [r7, #22]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d001      	beq.n	800a328 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a324:	7dbb      	ldrb	r3, [r7, #22]
 800a326:	e000      	b.n	800a32a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a328:	2300      	movs	r3, #0
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3718      	adds	r7, #24
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}

0800a332 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a332:	b580      	push	{r7, lr}
 800a334:	b084      	sub	sp, #16
 800a336:	af00      	add	r7, sp, #0
 800a338:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a33a:	2300      	movs	r3, #0
 800a33c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2201      	movs	r2, #1
 800a342:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2200      	movs	r2, #0
 800a34a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2200      	movs	r2, #0
 800a352:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2200      	movs	r2, #0
 800a358:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2200      	movs	r2, #0
 800a360:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d014      	beq.n	800a398 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d00e      	beq.n	800a398 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	687a      	ldr	r2, [r7, #4]
 800a384:	6852      	ldr	r2, [r2, #4]
 800a386:	b2d2      	uxtb	r2, r2
 800a388:	4611      	mov	r1, r2
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	4798      	blx	r3
 800a38e:	4603      	mov	r3, r0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d001      	beq.n	800a398 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a394:	2303      	movs	r3, #3
 800a396:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a398:	2340      	movs	r3, #64	; 0x40
 800a39a:	2200      	movs	r2, #0
 800a39c:	2100      	movs	r1, #0
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f003 fe97 	bl	800e0d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2240      	movs	r2, #64	; 0x40
 800a3b0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a3b4:	2340      	movs	r3, #64	; 0x40
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	2180      	movs	r1, #128	; 0x80
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f003 fe89 	bl	800e0d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2240      	movs	r2, #64	; 0x40
 800a3ca:	621a      	str	r2, [r3, #32]

  return ret;
 800a3cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3710      	adds	r7, #16
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}

0800a3d6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a3d6:	b480      	push	{r7}
 800a3d8:	b083      	sub	sp, #12
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	6078      	str	r0, [r7, #4]
 800a3de:	460b      	mov	r3, r1
 800a3e0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	78fa      	ldrb	r2, [r7, #3]
 800a3e6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a3e8:	2300      	movs	r3, #0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	370c      	adds	r7, #12
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f4:	4770      	bx	lr

0800a3f6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a3f6:	b480      	push	{r7}
 800a3f8:	b083      	sub	sp, #12
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a404:	b2da      	uxtb	r2, r3
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2204      	movs	r2, #4
 800a410:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a414:	2300      	movs	r3, #0
}
 800a416:	4618      	mov	r0, r3
 800a418:	370c      	adds	r7, #12
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr

0800a422 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a422:	b480      	push	{r7}
 800a424:	b083      	sub	sp, #12
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a430:	b2db      	uxtb	r3, r3
 800a432:	2b04      	cmp	r3, #4
 800a434:	d106      	bne.n	800a444 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a43c:	b2da      	uxtb	r2, r3
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a444:	2300      	movs	r3, #0
}
 800a446:	4618      	mov	r0, r3
 800a448:	370c      	adds	r7, #12
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr

0800a452 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a452:	b580      	push	{r7, lr}
 800a454:	b082      	sub	sp, #8
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a460:	b2db      	uxtb	r3, r3
 800a462:	2b03      	cmp	r3, #3
 800a464:	d110      	bne.n	800a488 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d00b      	beq.n	800a488 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a476:	69db      	ldr	r3, [r3, #28]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d005      	beq.n	800a488 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a482:	69db      	ldr	r3, [r3, #28]
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a488:	2300      	movs	r3, #0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3708      	adds	r7, #8
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}

0800a492 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a492:	b580      	push	{r7, lr}
 800a494:	b082      	sub	sp, #8
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
 800a49a:	460b      	mov	r3, r1
 800a49c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	32ae      	adds	r2, #174	; 0xae
 800a4a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d101      	bne.n	800a4b4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a4b0:	2303      	movs	r3, #3
 800a4b2:	e01c      	b.n	800a4ee <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	2b03      	cmp	r3, #3
 800a4be:	d115      	bne.n	800a4ec <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	32ae      	adds	r2, #174	; 0xae
 800a4ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ce:	6a1b      	ldr	r3, [r3, #32]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d00b      	beq.n	800a4ec <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	32ae      	adds	r2, #174	; 0xae
 800a4de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4e2:	6a1b      	ldr	r3, [r3, #32]
 800a4e4:	78fa      	ldrb	r2, [r7, #3]
 800a4e6:	4611      	mov	r1, r2
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a4ec:	2300      	movs	r3, #0
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3708      	adds	r7, #8
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}

0800a4f6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b082      	sub	sp, #8
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
 800a4fe:	460b      	mov	r3, r1
 800a500:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	32ae      	adds	r2, #174	; 0xae
 800a50c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d101      	bne.n	800a518 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a514:	2303      	movs	r3, #3
 800a516:	e01c      	b.n	800a552 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a51e:	b2db      	uxtb	r3, r3
 800a520:	2b03      	cmp	r3, #3
 800a522:	d115      	bne.n	800a550 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	32ae      	adds	r2, #174	; 0xae
 800a52e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a534:	2b00      	cmp	r3, #0
 800a536:	d00b      	beq.n	800a550 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	32ae      	adds	r2, #174	; 0xae
 800a542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a548:	78fa      	ldrb	r2, [r7, #3]
 800a54a:	4611      	mov	r1, r2
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a550:	2300      	movs	r3, #0
}
 800a552:	4618      	mov	r0, r3
 800a554:	3708      	adds	r7, #8
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}

0800a55a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a55a:	b480      	push	{r7}
 800a55c:	b083      	sub	sp, #12
 800a55e:	af00      	add	r7, sp, #0
 800a560:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a562:	2300      	movs	r3, #0
}
 800a564:	4618      	mov	r0, r3
 800a566:	370c      	adds	r7, #12
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b084      	sub	sp, #16
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a578:	2300      	movs	r3, #0
 800a57a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2201      	movs	r2, #1
 800a580:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d00e      	beq.n	800a5ac <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	687a      	ldr	r2, [r7, #4]
 800a598:	6852      	ldr	r2, [r2, #4]
 800a59a:	b2d2      	uxtb	r2, r2
 800a59c:	4611      	mov	r1, r2
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	4798      	blx	r3
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d001      	beq.n	800a5ac <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a5a8:	2303      	movs	r3, #3
 800a5aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a5ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3710      	adds	r7, #16
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}

0800a5b6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a5b6:	b480      	push	{r7}
 800a5b8:	b083      	sub	sp, #12
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	6078      	str	r0, [r7, #4]
 800a5be:	460b      	mov	r3, r1
 800a5c0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a5c2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	370c      	adds	r7, #12
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr

0800a5d0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b083      	sub	sp, #12
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	460b      	mov	r3, r1
 800a5da:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a5dc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	370c      	adds	r7, #12
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr

0800a5ea <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b086      	sub	sp, #24
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a5fe:	2300      	movs	r3, #0
 800a600:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	885b      	ldrh	r3, [r3, #2]
 800a606:	b29a      	uxth	r2, r3
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	429a      	cmp	r2, r3
 800a610:	d920      	bls.n	800a654 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	b29b      	uxth	r3, r3
 800a618:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a61a:	e013      	b.n	800a644 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a61c:	f107 030a 	add.w	r3, r7, #10
 800a620:	4619      	mov	r1, r3
 800a622:	6978      	ldr	r0, [r7, #20]
 800a624:	f000 f81b 	bl	800a65e <USBD_GetNextDesc>
 800a628:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	785b      	ldrb	r3, [r3, #1]
 800a62e:	2b05      	cmp	r3, #5
 800a630:	d108      	bne.n	800a644 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	789b      	ldrb	r3, [r3, #2]
 800a63a:	78fa      	ldrb	r2, [r7, #3]
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d008      	beq.n	800a652 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a640:	2300      	movs	r3, #0
 800a642:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	885b      	ldrh	r3, [r3, #2]
 800a648:	b29a      	uxth	r2, r3
 800a64a:	897b      	ldrh	r3, [r7, #10]
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d8e5      	bhi.n	800a61c <USBD_GetEpDesc+0x32>
 800a650:	e000      	b.n	800a654 <USBD_GetEpDesc+0x6a>
          break;
 800a652:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a654:	693b      	ldr	r3, [r7, #16]
}
 800a656:	4618      	mov	r0, r3
 800a658:	3718      	adds	r7, #24
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}

0800a65e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a65e:	b480      	push	{r7}
 800a660:	b085      	sub	sp, #20
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
 800a666:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	881a      	ldrh	r2, [r3, #0]
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	781b      	ldrb	r3, [r3, #0]
 800a674:	b29b      	uxth	r3, r3
 800a676:	4413      	add	r3, r2
 800a678:	b29a      	uxth	r2, r3
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	781b      	ldrb	r3, [r3, #0]
 800a682:	461a      	mov	r2, r3
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	4413      	add	r3, r2
 800a688:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a68a:	68fb      	ldr	r3, [r7, #12]
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3714      	adds	r7, #20
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a698:	b480      	push	{r7}
 800a69a:	b087      	sub	sp, #28
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	781b      	ldrb	r3, [r3, #0]
 800a6a8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a6b6:	8a3b      	ldrh	r3, [r7, #16]
 800a6b8:	021b      	lsls	r3, r3, #8
 800a6ba:	b21a      	sxth	r2, r3
 800a6bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	b21b      	sxth	r3, r3
 800a6c4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a6c6:	89fb      	ldrh	r3, [r7, #14]
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	371c      	adds	r7, #28
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr

0800a6d4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b084      	sub	sp, #16
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	781b      	ldrb	r3, [r3, #0]
 800a6e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a6ea:	2b40      	cmp	r3, #64	; 0x40
 800a6ec:	d005      	beq.n	800a6fa <USBD_StdDevReq+0x26>
 800a6ee:	2b40      	cmp	r3, #64	; 0x40
 800a6f0:	d857      	bhi.n	800a7a2 <USBD_StdDevReq+0xce>
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d00f      	beq.n	800a716 <USBD_StdDevReq+0x42>
 800a6f6:	2b20      	cmp	r3, #32
 800a6f8:	d153      	bne.n	800a7a2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	32ae      	adds	r2, #174	; 0xae
 800a704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a708:	689b      	ldr	r3, [r3, #8]
 800a70a:	6839      	ldr	r1, [r7, #0]
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	4798      	blx	r3
 800a710:	4603      	mov	r3, r0
 800a712:	73fb      	strb	r3, [r7, #15]
      break;
 800a714:	e04a      	b.n	800a7ac <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	785b      	ldrb	r3, [r3, #1]
 800a71a:	2b09      	cmp	r3, #9
 800a71c:	d83b      	bhi.n	800a796 <USBD_StdDevReq+0xc2>
 800a71e:	a201      	add	r2, pc, #4	; (adr r2, 800a724 <USBD_StdDevReq+0x50>)
 800a720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a724:	0800a779 	.word	0x0800a779
 800a728:	0800a78d 	.word	0x0800a78d
 800a72c:	0800a797 	.word	0x0800a797
 800a730:	0800a783 	.word	0x0800a783
 800a734:	0800a797 	.word	0x0800a797
 800a738:	0800a757 	.word	0x0800a757
 800a73c:	0800a74d 	.word	0x0800a74d
 800a740:	0800a797 	.word	0x0800a797
 800a744:	0800a76f 	.word	0x0800a76f
 800a748:	0800a761 	.word	0x0800a761
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a74c:	6839      	ldr	r1, [r7, #0]
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 fa3c 	bl	800abcc <USBD_GetDescriptor>
          break;
 800a754:	e024      	b.n	800a7a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a756:	6839      	ldr	r1, [r7, #0]
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f000 fba1 	bl	800aea0 <USBD_SetAddress>
          break;
 800a75e:	e01f      	b.n	800a7a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a760:	6839      	ldr	r1, [r7, #0]
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 fbe0 	bl	800af28 <USBD_SetConfig>
 800a768:	4603      	mov	r3, r0
 800a76a:	73fb      	strb	r3, [r7, #15]
          break;
 800a76c:	e018      	b.n	800a7a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a76e:	6839      	ldr	r1, [r7, #0]
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f000 fc83 	bl	800b07c <USBD_GetConfig>
          break;
 800a776:	e013      	b.n	800a7a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a778:	6839      	ldr	r1, [r7, #0]
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f000 fcb4 	bl	800b0e8 <USBD_GetStatus>
          break;
 800a780:	e00e      	b.n	800a7a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a782:	6839      	ldr	r1, [r7, #0]
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 fce3 	bl	800b150 <USBD_SetFeature>
          break;
 800a78a:	e009      	b.n	800a7a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a78c:	6839      	ldr	r1, [r7, #0]
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f000 fd07 	bl	800b1a2 <USBD_ClrFeature>
          break;
 800a794:	e004      	b.n	800a7a0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a796:	6839      	ldr	r1, [r7, #0]
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f000 fd5e 	bl	800b25a <USBD_CtlError>
          break;
 800a79e:	bf00      	nop
      }
      break;
 800a7a0:	e004      	b.n	800a7ac <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a7a2:	6839      	ldr	r1, [r7, #0]
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f000 fd58 	bl	800b25a <USBD_CtlError>
      break;
 800a7aa:	bf00      	nop
  }

  return ret;
 800a7ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3710      	adds	r7, #16
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}
 800a7b6:	bf00      	nop

0800a7b8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b084      	sub	sp, #16
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	781b      	ldrb	r3, [r3, #0]
 800a7ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a7ce:	2b40      	cmp	r3, #64	; 0x40
 800a7d0:	d005      	beq.n	800a7de <USBD_StdItfReq+0x26>
 800a7d2:	2b40      	cmp	r3, #64	; 0x40
 800a7d4:	d852      	bhi.n	800a87c <USBD_StdItfReq+0xc4>
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d001      	beq.n	800a7de <USBD_StdItfReq+0x26>
 800a7da:	2b20      	cmp	r3, #32
 800a7dc:	d14e      	bne.n	800a87c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7e4:	b2db      	uxtb	r3, r3
 800a7e6:	3b01      	subs	r3, #1
 800a7e8:	2b02      	cmp	r3, #2
 800a7ea:	d840      	bhi.n	800a86e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	889b      	ldrh	r3, [r3, #4]
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	2b01      	cmp	r3, #1
 800a7f4:	d836      	bhi.n	800a864 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	889b      	ldrh	r3, [r3, #4]
 800a7fa:	b2db      	uxtb	r3, r3
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f7ff fed9 	bl	800a5b6 <USBD_CoreFindIF>
 800a804:	4603      	mov	r3, r0
 800a806:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a808:	7bbb      	ldrb	r3, [r7, #14]
 800a80a:	2bff      	cmp	r3, #255	; 0xff
 800a80c:	d01d      	beq.n	800a84a <USBD_StdItfReq+0x92>
 800a80e:	7bbb      	ldrb	r3, [r7, #14]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d11a      	bne.n	800a84a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a814:	7bba      	ldrb	r2, [r7, #14]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	32ae      	adds	r2, #174	; 0xae
 800a81a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a81e:	689b      	ldr	r3, [r3, #8]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d00f      	beq.n	800a844 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a824:	7bba      	ldrb	r2, [r7, #14]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a82c:	7bba      	ldrb	r2, [r7, #14]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	32ae      	adds	r2, #174	; 0xae
 800a832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a836:	689b      	ldr	r3, [r3, #8]
 800a838:	6839      	ldr	r1, [r7, #0]
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	4798      	blx	r3
 800a83e:	4603      	mov	r3, r0
 800a840:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a842:	e004      	b.n	800a84e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a844:	2303      	movs	r3, #3
 800a846:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a848:	e001      	b.n	800a84e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a84a:	2303      	movs	r3, #3
 800a84c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	88db      	ldrh	r3, [r3, #6]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d110      	bne.n	800a878 <USBD_StdItfReq+0xc0>
 800a856:	7bfb      	ldrb	r3, [r7, #15]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d10d      	bne.n	800a878 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f000 fdaa 	bl	800b3b6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a862:	e009      	b.n	800a878 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a864:	6839      	ldr	r1, [r7, #0]
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f000 fcf7 	bl	800b25a <USBD_CtlError>
          break;
 800a86c:	e004      	b.n	800a878 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a86e:	6839      	ldr	r1, [r7, #0]
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 fcf2 	bl	800b25a <USBD_CtlError>
          break;
 800a876:	e000      	b.n	800a87a <USBD_StdItfReq+0xc2>
          break;
 800a878:	bf00      	nop
      }
      break;
 800a87a:	e004      	b.n	800a886 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a87c:	6839      	ldr	r1, [r7, #0]
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 fceb 	bl	800b25a <USBD_CtlError>
      break;
 800a884:	bf00      	nop
  }

  return ret;
 800a886:	7bfb      	ldrb	r3, [r7, #15]
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3710      	adds	r7, #16
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b084      	sub	sp, #16
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a89a:	2300      	movs	r3, #0
 800a89c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	889b      	ldrh	r3, [r3, #4]
 800a8a2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8ac:	2b40      	cmp	r3, #64	; 0x40
 800a8ae:	d007      	beq.n	800a8c0 <USBD_StdEPReq+0x30>
 800a8b0:	2b40      	cmp	r3, #64	; 0x40
 800a8b2:	f200 817f 	bhi.w	800abb4 <USBD_StdEPReq+0x324>
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d02a      	beq.n	800a910 <USBD_StdEPReq+0x80>
 800a8ba:	2b20      	cmp	r3, #32
 800a8bc:	f040 817a 	bne.w	800abb4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a8c0:	7bbb      	ldrb	r3, [r7, #14]
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f7ff fe83 	bl	800a5d0 <USBD_CoreFindEP>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a8ce:	7b7b      	ldrb	r3, [r7, #13]
 800a8d0:	2bff      	cmp	r3, #255	; 0xff
 800a8d2:	f000 8174 	beq.w	800abbe <USBD_StdEPReq+0x32e>
 800a8d6:	7b7b      	ldrb	r3, [r7, #13]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	f040 8170 	bne.w	800abbe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a8de:	7b7a      	ldrb	r2, [r7, #13]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a8e6:	7b7a      	ldrb	r2, [r7, #13]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	32ae      	adds	r2, #174	; 0xae
 800a8ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	f000 8163 	beq.w	800abbe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a8f8:	7b7a      	ldrb	r2, [r7, #13]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	32ae      	adds	r2, #174	; 0xae
 800a8fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a902:	689b      	ldr	r3, [r3, #8]
 800a904:	6839      	ldr	r1, [r7, #0]
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	4798      	blx	r3
 800a90a:	4603      	mov	r3, r0
 800a90c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a90e:	e156      	b.n	800abbe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	785b      	ldrb	r3, [r3, #1]
 800a914:	2b03      	cmp	r3, #3
 800a916:	d008      	beq.n	800a92a <USBD_StdEPReq+0x9a>
 800a918:	2b03      	cmp	r3, #3
 800a91a:	f300 8145 	bgt.w	800aba8 <USBD_StdEPReq+0x318>
 800a91e:	2b00      	cmp	r3, #0
 800a920:	f000 809b 	beq.w	800aa5a <USBD_StdEPReq+0x1ca>
 800a924:	2b01      	cmp	r3, #1
 800a926:	d03c      	beq.n	800a9a2 <USBD_StdEPReq+0x112>
 800a928:	e13e      	b.n	800aba8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a930:	b2db      	uxtb	r3, r3
 800a932:	2b02      	cmp	r3, #2
 800a934:	d002      	beq.n	800a93c <USBD_StdEPReq+0xac>
 800a936:	2b03      	cmp	r3, #3
 800a938:	d016      	beq.n	800a968 <USBD_StdEPReq+0xd8>
 800a93a:	e02c      	b.n	800a996 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a93c:	7bbb      	ldrb	r3, [r7, #14]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d00d      	beq.n	800a95e <USBD_StdEPReq+0xce>
 800a942:	7bbb      	ldrb	r3, [r7, #14]
 800a944:	2b80      	cmp	r3, #128	; 0x80
 800a946:	d00a      	beq.n	800a95e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a948:	7bbb      	ldrb	r3, [r7, #14]
 800a94a:	4619      	mov	r1, r3
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f003 fc05 	bl	800e15c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a952:	2180      	movs	r1, #128	; 0x80
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f003 fc01 	bl	800e15c <USBD_LL_StallEP>
 800a95a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a95c:	e020      	b.n	800a9a0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a95e:	6839      	ldr	r1, [r7, #0]
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f000 fc7a 	bl	800b25a <USBD_CtlError>
              break;
 800a966:	e01b      	b.n	800a9a0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	885b      	ldrh	r3, [r3, #2]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d10e      	bne.n	800a98e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a970:	7bbb      	ldrb	r3, [r7, #14]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d00b      	beq.n	800a98e <USBD_StdEPReq+0xfe>
 800a976:	7bbb      	ldrb	r3, [r7, #14]
 800a978:	2b80      	cmp	r3, #128	; 0x80
 800a97a:	d008      	beq.n	800a98e <USBD_StdEPReq+0xfe>
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	88db      	ldrh	r3, [r3, #6]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d104      	bne.n	800a98e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a984:	7bbb      	ldrb	r3, [r7, #14]
 800a986:	4619      	mov	r1, r3
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f003 fbe7 	bl	800e15c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f000 fd11 	bl	800b3b6 <USBD_CtlSendStatus>

              break;
 800a994:	e004      	b.n	800a9a0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a996:	6839      	ldr	r1, [r7, #0]
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f000 fc5e 	bl	800b25a <USBD_CtlError>
              break;
 800a99e:	bf00      	nop
          }
          break;
 800a9a0:	e107      	b.n	800abb2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9a8:	b2db      	uxtb	r3, r3
 800a9aa:	2b02      	cmp	r3, #2
 800a9ac:	d002      	beq.n	800a9b4 <USBD_StdEPReq+0x124>
 800a9ae:	2b03      	cmp	r3, #3
 800a9b0:	d016      	beq.n	800a9e0 <USBD_StdEPReq+0x150>
 800a9b2:	e04b      	b.n	800aa4c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9b4:	7bbb      	ldrb	r3, [r7, #14]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d00d      	beq.n	800a9d6 <USBD_StdEPReq+0x146>
 800a9ba:	7bbb      	ldrb	r3, [r7, #14]
 800a9bc:	2b80      	cmp	r3, #128	; 0x80
 800a9be:	d00a      	beq.n	800a9d6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a9c0:	7bbb      	ldrb	r3, [r7, #14]
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f003 fbc9 	bl	800e15c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a9ca:	2180      	movs	r1, #128	; 0x80
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f003 fbc5 	bl	800e15c <USBD_LL_StallEP>
 800a9d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a9d4:	e040      	b.n	800aa58 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a9d6:	6839      	ldr	r1, [r7, #0]
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f000 fc3e 	bl	800b25a <USBD_CtlError>
              break;
 800a9de:	e03b      	b.n	800aa58 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	885b      	ldrh	r3, [r3, #2]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d136      	bne.n	800aa56 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a9e8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d004      	beq.n	800a9fc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a9f2:	7bbb      	ldrb	r3, [r7, #14]
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f003 fbcf 	bl	800e19a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 fcda 	bl	800b3b6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800aa02:	7bbb      	ldrb	r3, [r7, #14]
 800aa04:	4619      	mov	r1, r3
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f7ff fde2 	bl	800a5d0 <USBD_CoreFindEP>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aa10:	7b7b      	ldrb	r3, [r7, #13]
 800aa12:	2bff      	cmp	r3, #255	; 0xff
 800aa14:	d01f      	beq.n	800aa56 <USBD_StdEPReq+0x1c6>
 800aa16:	7b7b      	ldrb	r3, [r7, #13]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d11c      	bne.n	800aa56 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800aa1c:	7b7a      	ldrb	r2, [r7, #13]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800aa24:	7b7a      	ldrb	r2, [r7, #13]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	32ae      	adds	r2, #174	; 0xae
 800aa2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa2e:	689b      	ldr	r3, [r3, #8]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d010      	beq.n	800aa56 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aa34:	7b7a      	ldrb	r2, [r7, #13]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	32ae      	adds	r2, #174	; 0xae
 800aa3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa3e:	689b      	ldr	r3, [r3, #8]
 800aa40:	6839      	ldr	r1, [r7, #0]
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	4798      	blx	r3
 800aa46:	4603      	mov	r3, r0
 800aa48:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800aa4a:	e004      	b.n	800aa56 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800aa4c:	6839      	ldr	r1, [r7, #0]
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f000 fc03 	bl	800b25a <USBD_CtlError>
              break;
 800aa54:	e000      	b.n	800aa58 <USBD_StdEPReq+0x1c8>
              break;
 800aa56:	bf00      	nop
          }
          break;
 800aa58:	e0ab      	b.n	800abb2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa60:	b2db      	uxtb	r3, r3
 800aa62:	2b02      	cmp	r3, #2
 800aa64:	d002      	beq.n	800aa6c <USBD_StdEPReq+0x1dc>
 800aa66:	2b03      	cmp	r3, #3
 800aa68:	d032      	beq.n	800aad0 <USBD_StdEPReq+0x240>
 800aa6a:	e097      	b.n	800ab9c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa6c:	7bbb      	ldrb	r3, [r7, #14]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d007      	beq.n	800aa82 <USBD_StdEPReq+0x1f2>
 800aa72:	7bbb      	ldrb	r3, [r7, #14]
 800aa74:	2b80      	cmp	r3, #128	; 0x80
 800aa76:	d004      	beq.n	800aa82 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800aa78:	6839      	ldr	r1, [r7, #0]
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f000 fbed 	bl	800b25a <USBD_CtlError>
                break;
 800aa80:	e091      	b.n	800aba6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	da0b      	bge.n	800aaa2 <USBD_StdEPReq+0x212>
 800aa8a:	7bbb      	ldrb	r3, [r7, #14]
 800aa8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa90:	4613      	mov	r3, r2
 800aa92:	009b      	lsls	r3, r3, #2
 800aa94:	4413      	add	r3, r2
 800aa96:	009b      	lsls	r3, r3, #2
 800aa98:	3310      	adds	r3, #16
 800aa9a:	687a      	ldr	r2, [r7, #4]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	3304      	adds	r3, #4
 800aaa0:	e00b      	b.n	800aaba <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aaa2:	7bbb      	ldrb	r3, [r7, #14]
 800aaa4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aaa8:	4613      	mov	r3, r2
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	4413      	add	r3, r2
 800aaae:	009b      	lsls	r3, r3, #2
 800aab0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	4413      	add	r3, r2
 800aab8:	3304      	adds	r3, #4
 800aaba:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	2200      	movs	r2, #0
 800aac0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	2202      	movs	r2, #2
 800aac6:	4619      	mov	r1, r3
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f000 fc37 	bl	800b33c <USBD_CtlSendData>
              break;
 800aace:	e06a      	b.n	800aba6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aad0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	da11      	bge.n	800aafc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aad8:	7bbb      	ldrb	r3, [r7, #14]
 800aada:	f003 020f 	and.w	r2, r3, #15
 800aade:	6879      	ldr	r1, [r7, #4]
 800aae0:	4613      	mov	r3, r2
 800aae2:	009b      	lsls	r3, r3, #2
 800aae4:	4413      	add	r3, r2
 800aae6:	009b      	lsls	r3, r3, #2
 800aae8:	440b      	add	r3, r1
 800aaea:	3324      	adds	r3, #36	; 0x24
 800aaec:	881b      	ldrh	r3, [r3, #0]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d117      	bne.n	800ab22 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aaf2:	6839      	ldr	r1, [r7, #0]
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f000 fbb0 	bl	800b25a <USBD_CtlError>
                  break;
 800aafa:	e054      	b.n	800aba6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aafc:	7bbb      	ldrb	r3, [r7, #14]
 800aafe:	f003 020f 	and.w	r2, r3, #15
 800ab02:	6879      	ldr	r1, [r7, #4]
 800ab04:	4613      	mov	r3, r2
 800ab06:	009b      	lsls	r3, r3, #2
 800ab08:	4413      	add	r3, r2
 800ab0a:	009b      	lsls	r3, r3, #2
 800ab0c:	440b      	add	r3, r1
 800ab0e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ab12:	881b      	ldrh	r3, [r3, #0]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d104      	bne.n	800ab22 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ab18:	6839      	ldr	r1, [r7, #0]
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f000 fb9d 	bl	800b25a <USBD_CtlError>
                  break;
 800ab20:	e041      	b.n	800aba6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	da0b      	bge.n	800ab42 <USBD_StdEPReq+0x2b2>
 800ab2a:	7bbb      	ldrb	r3, [r7, #14]
 800ab2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab30:	4613      	mov	r3, r2
 800ab32:	009b      	lsls	r3, r3, #2
 800ab34:	4413      	add	r3, r2
 800ab36:	009b      	lsls	r3, r3, #2
 800ab38:	3310      	adds	r3, #16
 800ab3a:	687a      	ldr	r2, [r7, #4]
 800ab3c:	4413      	add	r3, r2
 800ab3e:	3304      	adds	r3, #4
 800ab40:	e00b      	b.n	800ab5a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab42:	7bbb      	ldrb	r3, [r7, #14]
 800ab44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab48:	4613      	mov	r3, r2
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	4413      	add	r3, r2
 800ab4e:	009b      	lsls	r3, r3, #2
 800ab50:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ab54:	687a      	ldr	r2, [r7, #4]
 800ab56:	4413      	add	r3, r2
 800ab58:	3304      	adds	r3, #4
 800ab5a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ab5c:	7bbb      	ldrb	r3, [r7, #14]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d002      	beq.n	800ab68 <USBD_StdEPReq+0x2d8>
 800ab62:	7bbb      	ldrb	r3, [r7, #14]
 800ab64:	2b80      	cmp	r3, #128	; 0x80
 800ab66:	d103      	bne.n	800ab70 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	601a      	str	r2, [r3, #0]
 800ab6e:	e00e      	b.n	800ab8e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ab70:	7bbb      	ldrb	r3, [r7, #14]
 800ab72:	4619      	mov	r1, r3
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f003 fb2f 	bl	800e1d8 <USBD_LL_IsStallEP>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d003      	beq.n	800ab88 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	2201      	movs	r2, #1
 800ab84:	601a      	str	r2, [r3, #0]
 800ab86:	e002      	b.n	800ab8e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	2202      	movs	r2, #2
 800ab92:	4619      	mov	r1, r3
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f000 fbd1 	bl	800b33c <USBD_CtlSendData>
              break;
 800ab9a:	e004      	b.n	800aba6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ab9c:	6839      	ldr	r1, [r7, #0]
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f000 fb5b 	bl	800b25a <USBD_CtlError>
              break;
 800aba4:	bf00      	nop
          }
          break;
 800aba6:	e004      	b.n	800abb2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800aba8:	6839      	ldr	r1, [r7, #0]
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 fb55 	bl	800b25a <USBD_CtlError>
          break;
 800abb0:	bf00      	nop
      }
      break;
 800abb2:	e005      	b.n	800abc0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800abb4:	6839      	ldr	r1, [r7, #0]
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f000 fb4f 	bl	800b25a <USBD_CtlError>
      break;
 800abbc:	e000      	b.n	800abc0 <USBD_StdEPReq+0x330>
      break;
 800abbe:	bf00      	nop
  }

  return ret;
 800abc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3710      	adds	r7, #16
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
	...

0800abcc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b084      	sub	sp, #16
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800abd6:	2300      	movs	r3, #0
 800abd8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800abda:	2300      	movs	r3, #0
 800abdc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800abde:	2300      	movs	r3, #0
 800abe0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	885b      	ldrh	r3, [r3, #2]
 800abe6:	0a1b      	lsrs	r3, r3, #8
 800abe8:	b29b      	uxth	r3, r3
 800abea:	3b01      	subs	r3, #1
 800abec:	2b06      	cmp	r3, #6
 800abee:	f200 8128 	bhi.w	800ae42 <USBD_GetDescriptor+0x276>
 800abf2:	a201      	add	r2, pc, #4	; (adr r2, 800abf8 <USBD_GetDescriptor+0x2c>)
 800abf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf8:	0800ac15 	.word	0x0800ac15
 800abfc:	0800ac2d 	.word	0x0800ac2d
 800ac00:	0800ac6d 	.word	0x0800ac6d
 800ac04:	0800ae43 	.word	0x0800ae43
 800ac08:	0800ae43 	.word	0x0800ae43
 800ac0c:	0800ade3 	.word	0x0800ade3
 800ac10:	0800ae0f 	.word	0x0800ae0f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	687a      	ldr	r2, [r7, #4]
 800ac1e:	7c12      	ldrb	r2, [r2, #16]
 800ac20:	f107 0108 	add.w	r1, r7, #8
 800ac24:	4610      	mov	r0, r2
 800ac26:	4798      	blx	r3
 800ac28:	60f8      	str	r0, [r7, #12]
      break;
 800ac2a:	e112      	b.n	800ae52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	7c1b      	ldrb	r3, [r3, #16]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d10d      	bne.n	800ac50 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac3c:	f107 0208 	add.w	r2, r7, #8
 800ac40:	4610      	mov	r0, r2
 800ac42:	4798      	blx	r3
 800ac44:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	3301      	adds	r3, #1
 800ac4a:	2202      	movs	r2, #2
 800ac4c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ac4e:	e100      	b.n	800ae52 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac58:	f107 0208 	add.w	r2, r7, #8
 800ac5c:	4610      	mov	r0, r2
 800ac5e:	4798      	blx	r3
 800ac60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	3301      	adds	r3, #1
 800ac66:	2202      	movs	r2, #2
 800ac68:	701a      	strb	r2, [r3, #0]
      break;
 800ac6a:	e0f2      	b.n	800ae52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	885b      	ldrh	r3, [r3, #2]
 800ac70:	b2db      	uxtb	r3, r3
 800ac72:	2b05      	cmp	r3, #5
 800ac74:	f200 80ac 	bhi.w	800add0 <USBD_GetDescriptor+0x204>
 800ac78:	a201      	add	r2, pc, #4	; (adr r2, 800ac80 <USBD_GetDescriptor+0xb4>)
 800ac7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac7e:	bf00      	nop
 800ac80:	0800ac99 	.word	0x0800ac99
 800ac84:	0800accd 	.word	0x0800accd
 800ac88:	0800ad01 	.word	0x0800ad01
 800ac8c:	0800ad35 	.word	0x0800ad35
 800ac90:	0800ad69 	.word	0x0800ad69
 800ac94:	0800ad9d 	.word	0x0800ad9d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d00b      	beq.n	800acbc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	7c12      	ldrb	r2, [r2, #16]
 800acb0:	f107 0108 	add.w	r1, r7, #8
 800acb4:	4610      	mov	r0, r2
 800acb6:	4798      	blx	r3
 800acb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acba:	e091      	b.n	800ade0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800acbc:	6839      	ldr	r1, [r7, #0]
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f000 facb 	bl	800b25a <USBD_CtlError>
            err++;
 800acc4:	7afb      	ldrb	r3, [r7, #11]
 800acc6:	3301      	adds	r3, #1
 800acc8:	72fb      	strb	r3, [r7, #11]
          break;
 800acca:	e089      	b.n	800ade0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acd2:	689b      	ldr	r3, [r3, #8]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d00b      	beq.n	800acf0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acde:	689b      	ldr	r3, [r3, #8]
 800ace0:	687a      	ldr	r2, [r7, #4]
 800ace2:	7c12      	ldrb	r2, [r2, #16]
 800ace4:	f107 0108 	add.w	r1, r7, #8
 800ace8:	4610      	mov	r0, r2
 800acea:	4798      	blx	r3
 800acec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acee:	e077      	b.n	800ade0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800acf0:	6839      	ldr	r1, [r7, #0]
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 fab1 	bl	800b25a <USBD_CtlError>
            err++;
 800acf8:	7afb      	ldrb	r3, [r7, #11]
 800acfa:	3301      	adds	r3, #1
 800acfc:	72fb      	strb	r3, [r7, #11]
          break;
 800acfe:	e06f      	b.n	800ade0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad06:	68db      	ldr	r3, [r3, #12]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d00b      	beq.n	800ad24 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	687a      	ldr	r2, [r7, #4]
 800ad16:	7c12      	ldrb	r2, [r2, #16]
 800ad18:	f107 0108 	add.w	r1, r7, #8
 800ad1c:	4610      	mov	r0, r2
 800ad1e:	4798      	blx	r3
 800ad20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad22:	e05d      	b.n	800ade0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad24:	6839      	ldr	r1, [r7, #0]
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f000 fa97 	bl	800b25a <USBD_CtlError>
            err++;
 800ad2c:	7afb      	ldrb	r3, [r7, #11]
 800ad2e:	3301      	adds	r3, #1
 800ad30:	72fb      	strb	r3, [r7, #11]
          break;
 800ad32:	e055      	b.n	800ade0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad3a:	691b      	ldr	r3, [r3, #16]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d00b      	beq.n	800ad58 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad46:	691b      	ldr	r3, [r3, #16]
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	7c12      	ldrb	r2, [r2, #16]
 800ad4c:	f107 0108 	add.w	r1, r7, #8
 800ad50:	4610      	mov	r0, r2
 800ad52:	4798      	blx	r3
 800ad54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad56:	e043      	b.n	800ade0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad58:	6839      	ldr	r1, [r7, #0]
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f000 fa7d 	bl	800b25a <USBD_CtlError>
            err++;
 800ad60:	7afb      	ldrb	r3, [r7, #11]
 800ad62:	3301      	adds	r3, #1
 800ad64:	72fb      	strb	r3, [r7, #11]
          break;
 800ad66:	e03b      	b.n	800ade0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad6e:	695b      	ldr	r3, [r3, #20]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d00b      	beq.n	800ad8c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad7a:	695b      	ldr	r3, [r3, #20]
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	7c12      	ldrb	r2, [r2, #16]
 800ad80:	f107 0108 	add.w	r1, r7, #8
 800ad84:	4610      	mov	r0, r2
 800ad86:	4798      	blx	r3
 800ad88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad8a:	e029      	b.n	800ade0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad8c:	6839      	ldr	r1, [r7, #0]
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f000 fa63 	bl	800b25a <USBD_CtlError>
            err++;
 800ad94:	7afb      	ldrb	r3, [r7, #11]
 800ad96:	3301      	adds	r3, #1
 800ad98:	72fb      	strb	r3, [r7, #11]
          break;
 800ad9a:	e021      	b.n	800ade0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ada2:	699b      	ldr	r3, [r3, #24]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d00b      	beq.n	800adc0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adae:	699b      	ldr	r3, [r3, #24]
 800adb0:	687a      	ldr	r2, [r7, #4]
 800adb2:	7c12      	ldrb	r2, [r2, #16]
 800adb4:	f107 0108 	add.w	r1, r7, #8
 800adb8:	4610      	mov	r0, r2
 800adba:	4798      	blx	r3
 800adbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adbe:	e00f      	b.n	800ade0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800adc0:	6839      	ldr	r1, [r7, #0]
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 fa49 	bl	800b25a <USBD_CtlError>
            err++;
 800adc8:	7afb      	ldrb	r3, [r7, #11]
 800adca:	3301      	adds	r3, #1
 800adcc:	72fb      	strb	r3, [r7, #11]
          break;
 800adce:	e007      	b.n	800ade0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800add0:	6839      	ldr	r1, [r7, #0]
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 fa41 	bl	800b25a <USBD_CtlError>
          err++;
 800add8:	7afb      	ldrb	r3, [r7, #11]
 800adda:	3301      	adds	r3, #1
 800addc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800adde:	bf00      	nop
      }
      break;
 800ade0:	e037      	b.n	800ae52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	7c1b      	ldrb	r3, [r3, #16]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d109      	bne.n	800adfe <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adf2:	f107 0208 	add.w	r2, r7, #8
 800adf6:	4610      	mov	r0, r2
 800adf8:	4798      	blx	r3
 800adfa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800adfc:	e029      	b.n	800ae52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800adfe:	6839      	ldr	r1, [r7, #0]
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f000 fa2a 	bl	800b25a <USBD_CtlError>
        err++;
 800ae06:	7afb      	ldrb	r3, [r7, #11]
 800ae08:	3301      	adds	r3, #1
 800ae0a:	72fb      	strb	r3, [r7, #11]
      break;
 800ae0c:	e021      	b.n	800ae52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	7c1b      	ldrb	r3, [r3, #16]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d10d      	bne.n	800ae32 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae1e:	f107 0208 	add.w	r2, r7, #8
 800ae22:	4610      	mov	r0, r2
 800ae24:	4798      	blx	r3
 800ae26:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	2207      	movs	r2, #7
 800ae2e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae30:	e00f      	b.n	800ae52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ae32:	6839      	ldr	r1, [r7, #0]
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f000 fa10 	bl	800b25a <USBD_CtlError>
        err++;
 800ae3a:	7afb      	ldrb	r3, [r7, #11]
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	72fb      	strb	r3, [r7, #11]
      break;
 800ae40:	e007      	b.n	800ae52 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ae42:	6839      	ldr	r1, [r7, #0]
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 fa08 	bl	800b25a <USBD_CtlError>
      err++;
 800ae4a:	7afb      	ldrb	r3, [r7, #11]
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	72fb      	strb	r3, [r7, #11]
      break;
 800ae50:	bf00      	nop
  }

  if (err != 0U)
 800ae52:	7afb      	ldrb	r3, [r7, #11]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d11e      	bne.n	800ae96 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	88db      	ldrh	r3, [r3, #6]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d016      	beq.n	800ae8e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ae60:	893b      	ldrh	r3, [r7, #8]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d00e      	beq.n	800ae84 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	88da      	ldrh	r2, [r3, #6]
 800ae6a:	893b      	ldrh	r3, [r7, #8]
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	bf28      	it	cs
 800ae70:	4613      	movcs	r3, r2
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ae76:	893b      	ldrh	r3, [r7, #8]
 800ae78:	461a      	mov	r2, r3
 800ae7a:	68f9      	ldr	r1, [r7, #12]
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f000 fa5d 	bl	800b33c <USBD_CtlSendData>
 800ae82:	e009      	b.n	800ae98 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ae84:	6839      	ldr	r1, [r7, #0]
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 f9e7 	bl	800b25a <USBD_CtlError>
 800ae8c:	e004      	b.n	800ae98 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 fa91 	bl	800b3b6 <USBD_CtlSendStatus>
 800ae94:	e000      	b.n	800ae98 <USBD_GetDescriptor+0x2cc>
    return;
 800ae96:	bf00      	nop
  }
}
 800ae98:	3710      	adds	r7, #16
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}
 800ae9e:	bf00      	nop

0800aea0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b084      	sub	sp, #16
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	889b      	ldrh	r3, [r3, #4]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d131      	bne.n	800af16 <USBD_SetAddress+0x76>
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	88db      	ldrh	r3, [r3, #6]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d12d      	bne.n	800af16 <USBD_SetAddress+0x76>
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	885b      	ldrh	r3, [r3, #2]
 800aebe:	2b7f      	cmp	r3, #127	; 0x7f
 800aec0:	d829      	bhi.n	800af16 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	885b      	ldrh	r3, [r3, #2]
 800aec6:	b2db      	uxtb	r3, r3
 800aec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aecc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aed4:	b2db      	uxtb	r3, r3
 800aed6:	2b03      	cmp	r3, #3
 800aed8:	d104      	bne.n	800aee4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800aeda:	6839      	ldr	r1, [r7, #0]
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f000 f9bc 	bl	800b25a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aee2:	e01d      	b.n	800af20 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	7bfa      	ldrb	r2, [r7, #15]
 800aee8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aeec:	7bfb      	ldrb	r3, [r7, #15]
 800aeee:	4619      	mov	r1, r3
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f003 f99d 	bl	800e230 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f000 fa5d 	bl	800b3b6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aefc:	7bfb      	ldrb	r3, [r7, #15]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d004      	beq.n	800af0c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2202      	movs	r2, #2
 800af06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af0a:	e009      	b.n	800af20 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2201      	movs	r2, #1
 800af10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af14:	e004      	b.n	800af20 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800af16:	6839      	ldr	r1, [r7, #0]
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 f99e 	bl	800b25a <USBD_CtlError>
  }
}
 800af1e:	bf00      	nop
 800af20:	bf00      	nop
 800af22:	3710      	adds	r7, #16
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af32:	2300      	movs	r3, #0
 800af34:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	885b      	ldrh	r3, [r3, #2]
 800af3a:	b2da      	uxtb	r2, r3
 800af3c:	4b4e      	ldr	r3, [pc, #312]	; (800b078 <USBD_SetConfig+0x150>)
 800af3e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800af40:	4b4d      	ldr	r3, [pc, #308]	; (800b078 <USBD_SetConfig+0x150>)
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	2b01      	cmp	r3, #1
 800af46:	d905      	bls.n	800af54 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800af48:	6839      	ldr	r1, [r7, #0]
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f000 f985 	bl	800b25a <USBD_CtlError>
    return USBD_FAIL;
 800af50:	2303      	movs	r3, #3
 800af52:	e08c      	b.n	800b06e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af5a:	b2db      	uxtb	r3, r3
 800af5c:	2b02      	cmp	r3, #2
 800af5e:	d002      	beq.n	800af66 <USBD_SetConfig+0x3e>
 800af60:	2b03      	cmp	r3, #3
 800af62:	d029      	beq.n	800afb8 <USBD_SetConfig+0x90>
 800af64:	e075      	b.n	800b052 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800af66:	4b44      	ldr	r3, [pc, #272]	; (800b078 <USBD_SetConfig+0x150>)
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d020      	beq.n	800afb0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800af6e:	4b42      	ldr	r3, [pc, #264]	; (800b078 <USBD_SetConfig+0x150>)
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	461a      	mov	r2, r3
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800af78:	4b3f      	ldr	r3, [pc, #252]	; (800b078 <USBD_SetConfig+0x150>)
 800af7a:	781b      	ldrb	r3, [r3, #0]
 800af7c:	4619      	mov	r1, r3
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f7fe ffe7 	bl	8009f52 <USBD_SetClassConfig>
 800af84:	4603      	mov	r3, r0
 800af86:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800af88:	7bfb      	ldrb	r3, [r7, #15]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d008      	beq.n	800afa0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800af8e:	6839      	ldr	r1, [r7, #0]
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f000 f962 	bl	800b25a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2202      	movs	r2, #2
 800af9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800af9e:	e065      	b.n	800b06c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 fa08 	bl	800b3b6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2203      	movs	r2, #3
 800afaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800afae:	e05d      	b.n	800b06c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 fa00 	bl	800b3b6 <USBD_CtlSendStatus>
      break;
 800afb6:	e059      	b.n	800b06c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800afb8:	4b2f      	ldr	r3, [pc, #188]	; (800b078 <USBD_SetConfig+0x150>)
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d112      	bne.n	800afe6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2202      	movs	r2, #2
 800afc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800afc8:	4b2b      	ldr	r3, [pc, #172]	; (800b078 <USBD_SetConfig+0x150>)
 800afca:	781b      	ldrb	r3, [r3, #0]
 800afcc:	461a      	mov	r2, r3
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800afd2:	4b29      	ldr	r3, [pc, #164]	; (800b078 <USBD_SetConfig+0x150>)
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	4619      	mov	r1, r3
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f7fe ffd6 	bl	8009f8a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f000 f9e9 	bl	800b3b6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800afe4:	e042      	b.n	800b06c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800afe6:	4b24      	ldr	r3, [pc, #144]	; (800b078 <USBD_SetConfig+0x150>)
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	461a      	mov	r2, r3
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d02a      	beq.n	800b04a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	b2db      	uxtb	r3, r3
 800affa:	4619      	mov	r1, r3
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f7fe ffc4 	bl	8009f8a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b002:	4b1d      	ldr	r3, [pc, #116]	; (800b078 <USBD_SetConfig+0x150>)
 800b004:	781b      	ldrb	r3, [r3, #0]
 800b006:	461a      	mov	r2, r3
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b00c:	4b1a      	ldr	r3, [pc, #104]	; (800b078 <USBD_SetConfig+0x150>)
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	4619      	mov	r1, r3
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f7fe ff9d 	bl	8009f52 <USBD_SetClassConfig>
 800b018:	4603      	mov	r3, r0
 800b01a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b01c:	7bfb      	ldrb	r3, [r7, #15]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d00f      	beq.n	800b042 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b022:	6839      	ldr	r1, [r7, #0]
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f000 f918 	bl	800b25a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	4619      	mov	r1, r3
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f7fe ffa9 	bl	8009f8a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2202      	movs	r2, #2
 800b03c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b040:	e014      	b.n	800b06c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f000 f9b7 	bl	800b3b6 <USBD_CtlSendStatus>
      break;
 800b048:	e010      	b.n	800b06c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f000 f9b3 	bl	800b3b6 <USBD_CtlSendStatus>
      break;
 800b050:	e00c      	b.n	800b06c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b052:	6839      	ldr	r1, [r7, #0]
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f000 f900 	bl	800b25a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b05a:	4b07      	ldr	r3, [pc, #28]	; (800b078 <USBD_SetConfig+0x150>)
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	4619      	mov	r1, r3
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f7fe ff92 	bl	8009f8a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b066:	2303      	movs	r3, #3
 800b068:	73fb      	strb	r3, [r7, #15]
      break;
 800b06a:	bf00      	nop
  }

  return ret;
 800b06c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3710      	adds	r7, #16
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
 800b076:	bf00      	nop
 800b078:	200008a0 	.word	0x200008a0

0800b07c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b082      	sub	sp, #8
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	88db      	ldrh	r3, [r3, #6]
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d004      	beq.n	800b098 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b08e:	6839      	ldr	r1, [r7, #0]
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f000 f8e2 	bl	800b25a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b096:	e023      	b.n	800b0e0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	2b02      	cmp	r3, #2
 800b0a2:	dc02      	bgt.n	800b0aa <USBD_GetConfig+0x2e>
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	dc03      	bgt.n	800b0b0 <USBD_GetConfig+0x34>
 800b0a8:	e015      	b.n	800b0d6 <USBD_GetConfig+0x5a>
 800b0aa:	2b03      	cmp	r3, #3
 800b0ac:	d00b      	beq.n	800b0c6 <USBD_GetConfig+0x4a>
 800b0ae:	e012      	b.n	800b0d6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	3308      	adds	r3, #8
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	4619      	mov	r1, r3
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f000 f93c 	bl	800b33c <USBD_CtlSendData>
        break;
 800b0c4:	e00c      	b.n	800b0e0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	3304      	adds	r3, #4
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 f934 	bl	800b33c <USBD_CtlSendData>
        break;
 800b0d4:	e004      	b.n	800b0e0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b0d6:	6839      	ldr	r1, [r7, #0]
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 f8be 	bl	800b25a <USBD_CtlError>
        break;
 800b0de:	bf00      	nop
}
 800b0e0:	bf00      	nop
 800b0e2:	3708      	adds	r7, #8
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}

0800b0e8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b082      	sub	sp, #8
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0f8:	b2db      	uxtb	r3, r3
 800b0fa:	3b01      	subs	r3, #1
 800b0fc:	2b02      	cmp	r3, #2
 800b0fe:	d81e      	bhi.n	800b13e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	88db      	ldrh	r3, [r3, #6]
 800b104:	2b02      	cmp	r3, #2
 800b106:	d004      	beq.n	800b112 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b108:	6839      	ldr	r1, [r7, #0]
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 f8a5 	bl	800b25a <USBD_CtlError>
        break;
 800b110:	e01a      	b.n	800b148 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2201      	movs	r2, #1
 800b116:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d005      	beq.n	800b12e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	68db      	ldr	r3, [r3, #12]
 800b126:	f043 0202 	orr.w	r2, r3, #2
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	330c      	adds	r3, #12
 800b132:	2202      	movs	r2, #2
 800b134:	4619      	mov	r1, r3
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f000 f900 	bl	800b33c <USBD_CtlSendData>
      break;
 800b13c:	e004      	b.n	800b148 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b13e:	6839      	ldr	r1, [r7, #0]
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f000 f88a 	bl	800b25a <USBD_CtlError>
      break;
 800b146:	bf00      	nop
  }
}
 800b148:	bf00      	nop
 800b14a:	3708      	adds	r7, #8
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b082      	sub	sp, #8
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	885b      	ldrh	r3, [r3, #2]
 800b15e:	2b01      	cmp	r3, #1
 800b160:	d107      	bne.n	800b172 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2201      	movs	r2, #1
 800b166:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f000 f923 	bl	800b3b6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b170:	e013      	b.n	800b19a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	885b      	ldrh	r3, [r3, #2]
 800b176:	2b02      	cmp	r3, #2
 800b178:	d10b      	bne.n	800b192 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	889b      	ldrh	r3, [r3, #4]
 800b17e:	0a1b      	lsrs	r3, r3, #8
 800b180:	b29b      	uxth	r3, r3
 800b182:	b2da      	uxtb	r2, r3
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 f913 	bl	800b3b6 <USBD_CtlSendStatus>
}
 800b190:	e003      	b.n	800b19a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b192:	6839      	ldr	r1, [r7, #0]
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f000 f860 	bl	800b25a <USBD_CtlError>
}
 800b19a:	bf00      	nop
 800b19c:	3708      	adds	r7, #8
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}

0800b1a2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1a2:	b580      	push	{r7, lr}
 800b1a4:	b082      	sub	sp, #8
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	6078      	str	r0, [r7, #4]
 800b1aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1b2:	b2db      	uxtb	r3, r3
 800b1b4:	3b01      	subs	r3, #1
 800b1b6:	2b02      	cmp	r3, #2
 800b1b8:	d80b      	bhi.n	800b1d2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	885b      	ldrh	r3, [r3, #2]
 800b1be:	2b01      	cmp	r3, #1
 800b1c0:	d10c      	bne.n	800b1dc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f000 f8f3 	bl	800b3b6 <USBD_CtlSendStatus>
      }
      break;
 800b1d0:	e004      	b.n	800b1dc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b1d2:	6839      	ldr	r1, [r7, #0]
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f000 f840 	bl	800b25a <USBD_CtlError>
      break;
 800b1da:	e000      	b.n	800b1de <USBD_ClrFeature+0x3c>
      break;
 800b1dc:	bf00      	nop
  }
}
 800b1de:	bf00      	nop
 800b1e0:	3708      	adds	r7, #8
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}

0800b1e6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b1e6:	b580      	push	{r7, lr}
 800b1e8:	b084      	sub	sp, #16
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
 800b1ee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	781a      	ldrb	r2, [r3, #0]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	3301      	adds	r3, #1
 800b200:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	781a      	ldrb	r2, [r3, #0]
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	3301      	adds	r3, #1
 800b20e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b210:	68f8      	ldr	r0, [r7, #12]
 800b212:	f7ff fa41 	bl	800a698 <SWAPBYTE>
 800b216:	4603      	mov	r3, r0
 800b218:	461a      	mov	r2, r3
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	3301      	adds	r3, #1
 800b222:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	3301      	adds	r3, #1
 800b228:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b22a:	68f8      	ldr	r0, [r7, #12]
 800b22c:	f7ff fa34 	bl	800a698 <SWAPBYTE>
 800b230:	4603      	mov	r3, r0
 800b232:	461a      	mov	r2, r3
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	3301      	adds	r3, #1
 800b23c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	3301      	adds	r3, #1
 800b242:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b244:	68f8      	ldr	r0, [r7, #12]
 800b246:	f7ff fa27 	bl	800a698 <SWAPBYTE>
 800b24a:	4603      	mov	r3, r0
 800b24c:	461a      	mov	r2, r3
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	80da      	strh	r2, [r3, #6]
}
 800b252:	bf00      	nop
 800b254:	3710      	adds	r7, #16
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}

0800b25a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b25a:	b580      	push	{r7, lr}
 800b25c:	b082      	sub	sp, #8
 800b25e:	af00      	add	r7, sp, #0
 800b260:	6078      	str	r0, [r7, #4]
 800b262:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b264:	2180      	movs	r1, #128	; 0x80
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f002 ff78 	bl	800e15c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b26c:	2100      	movs	r1, #0
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f002 ff74 	bl	800e15c <USBD_LL_StallEP>
}
 800b274:	bf00      	nop
 800b276:	3708      	adds	r7, #8
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b086      	sub	sp, #24
 800b280:	af00      	add	r7, sp, #0
 800b282:	60f8      	str	r0, [r7, #12]
 800b284:	60b9      	str	r1, [r7, #8]
 800b286:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b288:	2300      	movs	r3, #0
 800b28a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d036      	beq.n	800b300 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b296:	6938      	ldr	r0, [r7, #16]
 800b298:	f000 f836 	bl	800b308 <USBD_GetLen>
 800b29c:	4603      	mov	r3, r0
 800b29e:	3301      	adds	r3, #1
 800b2a0:	b29b      	uxth	r3, r3
 800b2a2:	005b      	lsls	r3, r3, #1
 800b2a4:	b29a      	uxth	r2, r3
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b2aa:	7dfb      	ldrb	r3, [r7, #23]
 800b2ac:	68ba      	ldr	r2, [r7, #8]
 800b2ae:	4413      	add	r3, r2
 800b2b0:	687a      	ldr	r2, [r7, #4]
 800b2b2:	7812      	ldrb	r2, [r2, #0]
 800b2b4:	701a      	strb	r2, [r3, #0]
  idx++;
 800b2b6:	7dfb      	ldrb	r3, [r7, #23]
 800b2b8:	3301      	adds	r3, #1
 800b2ba:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b2bc:	7dfb      	ldrb	r3, [r7, #23]
 800b2be:	68ba      	ldr	r2, [r7, #8]
 800b2c0:	4413      	add	r3, r2
 800b2c2:	2203      	movs	r2, #3
 800b2c4:	701a      	strb	r2, [r3, #0]
  idx++;
 800b2c6:	7dfb      	ldrb	r3, [r7, #23]
 800b2c8:	3301      	adds	r3, #1
 800b2ca:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b2cc:	e013      	b.n	800b2f6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b2ce:	7dfb      	ldrb	r3, [r7, #23]
 800b2d0:	68ba      	ldr	r2, [r7, #8]
 800b2d2:	4413      	add	r3, r2
 800b2d4:	693a      	ldr	r2, [r7, #16]
 800b2d6:	7812      	ldrb	r2, [r2, #0]
 800b2d8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	3301      	adds	r3, #1
 800b2de:	613b      	str	r3, [r7, #16]
    idx++;
 800b2e0:	7dfb      	ldrb	r3, [r7, #23]
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b2e6:	7dfb      	ldrb	r3, [r7, #23]
 800b2e8:	68ba      	ldr	r2, [r7, #8]
 800b2ea:	4413      	add	r3, r2
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	701a      	strb	r2, [r3, #0]
    idx++;
 800b2f0:	7dfb      	ldrb	r3, [r7, #23]
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	781b      	ldrb	r3, [r3, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d1e7      	bne.n	800b2ce <USBD_GetString+0x52>
 800b2fe:	e000      	b.n	800b302 <USBD_GetString+0x86>
    return;
 800b300:	bf00      	nop
  }
}
 800b302:	3718      	adds	r7, #24
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}

0800b308 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b308:	b480      	push	{r7}
 800b30a:	b085      	sub	sp, #20
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b310:	2300      	movs	r3, #0
 800b312:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b318:	e005      	b.n	800b326 <USBD_GetLen+0x1e>
  {
    len++;
 800b31a:	7bfb      	ldrb	r3, [r7, #15]
 800b31c:	3301      	adds	r3, #1
 800b31e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	3301      	adds	r3, #1
 800b324:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	781b      	ldrb	r3, [r3, #0]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d1f5      	bne.n	800b31a <USBD_GetLen+0x12>
  }

  return len;
 800b32e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b330:	4618      	mov	r0, r3
 800b332:	3714      	adds	r7, #20
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr

0800b33c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b084      	sub	sp, #16
 800b340:	af00      	add	r7, sp, #0
 800b342:	60f8      	str	r0, [r7, #12]
 800b344:	60b9      	str	r1, [r7, #8]
 800b346:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2202      	movs	r2, #2
 800b34c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	687a      	ldr	r2, [r7, #4]
 800b354:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	687a      	ldr	r2, [r7, #4]
 800b35a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	68ba      	ldr	r2, [r7, #8]
 800b360:	2100      	movs	r1, #0
 800b362:	68f8      	ldr	r0, [r7, #12]
 800b364:	f002 ff83 	bl	800e26e <USBD_LL_Transmit>

  return USBD_OK;
 800b368:	2300      	movs	r3, #0
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3710      	adds	r7, #16
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}

0800b372 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b372:	b580      	push	{r7, lr}
 800b374:	b084      	sub	sp, #16
 800b376:	af00      	add	r7, sp, #0
 800b378:	60f8      	str	r0, [r7, #12]
 800b37a:	60b9      	str	r1, [r7, #8]
 800b37c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	68ba      	ldr	r2, [r7, #8]
 800b382:	2100      	movs	r1, #0
 800b384:	68f8      	ldr	r0, [r7, #12]
 800b386:	f002 ff72 	bl	800e26e <USBD_LL_Transmit>

  return USBD_OK;
 800b38a:	2300      	movs	r3, #0
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3710      	adds	r7, #16
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	60f8      	str	r0, [r7, #12]
 800b39c:	60b9      	str	r1, [r7, #8]
 800b39e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	68ba      	ldr	r2, [r7, #8]
 800b3a4:	2100      	movs	r1, #0
 800b3a6:	68f8      	ldr	r0, [r7, #12]
 800b3a8:	f002 ff82 	bl	800e2b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3ac:	2300      	movs	r3, #0
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3710      	adds	r7, #16
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}

0800b3b6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b3b6:	b580      	push	{r7, lr}
 800b3b8:	b082      	sub	sp, #8
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2204      	movs	r2, #4
 800b3c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	2100      	movs	r1, #0
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f002 ff4e 	bl	800e26e <USBD_LL_Transmit>

  return USBD_OK;
 800b3d2:	2300      	movs	r3, #0
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3708      	adds	r7, #8
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b082      	sub	sp, #8
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2205      	movs	r2, #5
 800b3e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	2100      	movs	r1, #0
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f002 ff5c 	bl	800e2b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3f8:	2300      	movs	r3, #0
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3708      	adds	r7, #8
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
	...

0800b404 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af00      	add	r7, sp, #0
 800b40a:	4603      	mov	r3, r0
 800b40c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b40e:	79fb      	ldrb	r3, [r7, #7]
 800b410:	4a08      	ldr	r2, [pc, #32]	; (800b434 <disk_status+0x30>)
 800b412:	009b      	lsls	r3, r3, #2
 800b414:	4413      	add	r3, r2
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	685b      	ldr	r3, [r3, #4]
 800b41a:	79fa      	ldrb	r2, [r7, #7]
 800b41c:	4905      	ldr	r1, [pc, #20]	; (800b434 <disk_status+0x30>)
 800b41e:	440a      	add	r2, r1
 800b420:	7a12      	ldrb	r2, [r2, #8]
 800b422:	4610      	mov	r0, r2
 800b424:	4798      	blx	r3
 800b426:	4603      	mov	r3, r0
 800b428:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b42a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3710      	adds	r7, #16
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}
 800b434:	200008cc 	.word	0x200008cc

0800b438 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b084      	sub	sp, #16
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	4603      	mov	r3, r0
 800b440:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b442:	2300      	movs	r3, #0
 800b444:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b446:	79fb      	ldrb	r3, [r7, #7]
 800b448:	4a0d      	ldr	r2, [pc, #52]	; (800b480 <disk_initialize+0x48>)
 800b44a:	5cd3      	ldrb	r3, [r2, r3]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d111      	bne.n	800b474 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b450:	79fb      	ldrb	r3, [r7, #7]
 800b452:	4a0b      	ldr	r2, [pc, #44]	; (800b480 <disk_initialize+0x48>)
 800b454:	2101      	movs	r1, #1
 800b456:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b458:	79fb      	ldrb	r3, [r7, #7]
 800b45a:	4a09      	ldr	r2, [pc, #36]	; (800b480 <disk_initialize+0x48>)
 800b45c:	009b      	lsls	r3, r3, #2
 800b45e:	4413      	add	r3, r2
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	79fa      	ldrb	r2, [r7, #7]
 800b466:	4906      	ldr	r1, [pc, #24]	; (800b480 <disk_initialize+0x48>)
 800b468:	440a      	add	r2, r1
 800b46a:	7a12      	ldrb	r2, [r2, #8]
 800b46c:	4610      	mov	r0, r2
 800b46e:	4798      	blx	r3
 800b470:	4603      	mov	r3, r0
 800b472:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b474:	7bfb      	ldrb	r3, [r7, #15]
}
 800b476:	4618      	mov	r0, r3
 800b478:	3710      	adds	r7, #16
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	200008cc 	.word	0x200008cc

0800b484 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b484:	b590      	push	{r4, r7, lr}
 800b486:	b087      	sub	sp, #28
 800b488:	af00      	add	r7, sp, #0
 800b48a:	60b9      	str	r1, [r7, #8]
 800b48c:	607a      	str	r2, [r7, #4]
 800b48e:	603b      	str	r3, [r7, #0]
 800b490:	4603      	mov	r3, r0
 800b492:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b494:	7bfb      	ldrb	r3, [r7, #15]
 800b496:	4a0a      	ldr	r2, [pc, #40]	; (800b4c0 <disk_read+0x3c>)
 800b498:	009b      	lsls	r3, r3, #2
 800b49a:	4413      	add	r3, r2
 800b49c:	685b      	ldr	r3, [r3, #4]
 800b49e:	689c      	ldr	r4, [r3, #8]
 800b4a0:	7bfb      	ldrb	r3, [r7, #15]
 800b4a2:	4a07      	ldr	r2, [pc, #28]	; (800b4c0 <disk_read+0x3c>)
 800b4a4:	4413      	add	r3, r2
 800b4a6:	7a18      	ldrb	r0, [r3, #8]
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	687a      	ldr	r2, [r7, #4]
 800b4ac:	68b9      	ldr	r1, [r7, #8]
 800b4ae:	47a0      	blx	r4
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	75fb      	strb	r3, [r7, #23]
  return res;
 800b4b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	371c      	adds	r7, #28
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd90      	pop	{r4, r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	200008cc 	.word	0x200008cc

0800b4c4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b4c4:	b590      	push	{r4, r7, lr}
 800b4c6:	b087      	sub	sp, #28
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	60b9      	str	r1, [r7, #8]
 800b4cc:	607a      	str	r2, [r7, #4]
 800b4ce:	603b      	str	r3, [r7, #0]
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b4d4:	7bfb      	ldrb	r3, [r7, #15]
 800b4d6:	4a0a      	ldr	r2, [pc, #40]	; (800b500 <disk_write+0x3c>)
 800b4d8:	009b      	lsls	r3, r3, #2
 800b4da:	4413      	add	r3, r2
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	68dc      	ldr	r4, [r3, #12]
 800b4e0:	7bfb      	ldrb	r3, [r7, #15]
 800b4e2:	4a07      	ldr	r2, [pc, #28]	; (800b500 <disk_write+0x3c>)
 800b4e4:	4413      	add	r3, r2
 800b4e6:	7a18      	ldrb	r0, [r3, #8]
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	687a      	ldr	r2, [r7, #4]
 800b4ec:	68b9      	ldr	r1, [r7, #8]
 800b4ee:	47a0      	blx	r4
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	75fb      	strb	r3, [r7, #23]
  return res;
 800b4f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	371c      	adds	r7, #28
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd90      	pop	{r4, r7, pc}
 800b4fe:	bf00      	nop
 800b500:	200008cc 	.word	0x200008cc

0800b504 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b084      	sub	sp, #16
 800b508:	af00      	add	r7, sp, #0
 800b50a:	4603      	mov	r3, r0
 800b50c:	603a      	str	r2, [r7, #0]
 800b50e:	71fb      	strb	r3, [r7, #7]
 800b510:	460b      	mov	r3, r1
 800b512:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b514:	79fb      	ldrb	r3, [r7, #7]
 800b516:	4a09      	ldr	r2, [pc, #36]	; (800b53c <disk_ioctl+0x38>)
 800b518:	009b      	lsls	r3, r3, #2
 800b51a:	4413      	add	r3, r2
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	691b      	ldr	r3, [r3, #16]
 800b520:	79fa      	ldrb	r2, [r7, #7]
 800b522:	4906      	ldr	r1, [pc, #24]	; (800b53c <disk_ioctl+0x38>)
 800b524:	440a      	add	r2, r1
 800b526:	7a10      	ldrb	r0, [r2, #8]
 800b528:	79b9      	ldrb	r1, [r7, #6]
 800b52a:	683a      	ldr	r2, [r7, #0]
 800b52c:	4798      	blx	r3
 800b52e:	4603      	mov	r3, r0
 800b530:	73fb      	strb	r3, [r7, #15]
  return res;
 800b532:	7bfb      	ldrb	r3, [r7, #15]
}
 800b534:	4618      	mov	r0, r3
 800b536:	3710      	adds	r7, #16
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}
 800b53c:	200008cc 	.word	0x200008cc

0800b540 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b540:	b480      	push	{r7}
 800b542:	b085      	sub	sp, #20
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	3301      	adds	r3, #1
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b550:	89fb      	ldrh	r3, [r7, #14]
 800b552:	021b      	lsls	r3, r3, #8
 800b554:	b21a      	sxth	r2, r3
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	b21b      	sxth	r3, r3
 800b55c:	4313      	orrs	r3, r2
 800b55e:	b21b      	sxth	r3, r3
 800b560:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b562:	89fb      	ldrh	r3, [r7, #14]
}
 800b564:	4618      	mov	r0, r3
 800b566:	3714      	adds	r7, #20
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr

0800b570 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b570:	b480      	push	{r7}
 800b572:	b085      	sub	sp, #20
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	3303      	adds	r3, #3
 800b57c:	781b      	ldrb	r3, [r3, #0]
 800b57e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	021b      	lsls	r3, r3, #8
 800b584:	687a      	ldr	r2, [r7, #4]
 800b586:	3202      	adds	r2, #2
 800b588:	7812      	ldrb	r2, [r2, #0]
 800b58a:	4313      	orrs	r3, r2
 800b58c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	021b      	lsls	r3, r3, #8
 800b592:	687a      	ldr	r2, [r7, #4]
 800b594:	3201      	adds	r2, #1
 800b596:	7812      	ldrb	r2, [r2, #0]
 800b598:	4313      	orrs	r3, r2
 800b59a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	021b      	lsls	r3, r3, #8
 800b5a0:	687a      	ldr	r2, [r7, #4]
 800b5a2:	7812      	ldrb	r2, [r2, #0]
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	60fb      	str	r3, [r7, #12]
	return rv;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3714      	adds	r7, #20
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b4:	4770      	bx	lr

0800b5b6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b5b6:	b480      	push	{r7}
 800b5b8:	b083      	sub	sp, #12
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	6078      	str	r0, [r7, #4]
 800b5be:	460b      	mov	r3, r1
 800b5c0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	1c5a      	adds	r2, r3, #1
 800b5c6:	607a      	str	r2, [r7, #4]
 800b5c8:	887a      	ldrh	r2, [r7, #2]
 800b5ca:	b2d2      	uxtb	r2, r2
 800b5cc:	701a      	strb	r2, [r3, #0]
 800b5ce:	887b      	ldrh	r3, [r7, #2]
 800b5d0:	0a1b      	lsrs	r3, r3, #8
 800b5d2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	1c5a      	adds	r2, r3, #1
 800b5d8:	607a      	str	r2, [r7, #4]
 800b5da:	887a      	ldrh	r2, [r7, #2]
 800b5dc:	b2d2      	uxtb	r2, r2
 800b5de:	701a      	strb	r2, [r3, #0]
}
 800b5e0:	bf00      	nop
 800b5e2:	370c      	adds	r7, #12
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr

0800b5ec <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	1c5a      	adds	r2, r3, #1
 800b5fa:	607a      	str	r2, [r7, #4]
 800b5fc:	683a      	ldr	r2, [r7, #0]
 800b5fe:	b2d2      	uxtb	r2, r2
 800b600:	701a      	strb	r2, [r3, #0]
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	0a1b      	lsrs	r3, r3, #8
 800b606:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	1c5a      	adds	r2, r3, #1
 800b60c:	607a      	str	r2, [r7, #4]
 800b60e:	683a      	ldr	r2, [r7, #0]
 800b610:	b2d2      	uxtb	r2, r2
 800b612:	701a      	strb	r2, [r3, #0]
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	0a1b      	lsrs	r3, r3, #8
 800b618:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	1c5a      	adds	r2, r3, #1
 800b61e:	607a      	str	r2, [r7, #4]
 800b620:	683a      	ldr	r2, [r7, #0]
 800b622:	b2d2      	uxtb	r2, r2
 800b624:	701a      	strb	r2, [r3, #0]
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	0a1b      	lsrs	r3, r3, #8
 800b62a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	1c5a      	adds	r2, r3, #1
 800b630:	607a      	str	r2, [r7, #4]
 800b632:	683a      	ldr	r2, [r7, #0]
 800b634:	b2d2      	uxtb	r2, r2
 800b636:	701a      	strb	r2, [r3, #0]
}
 800b638:	bf00      	nop
 800b63a:	370c      	adds	r7, #12
 800b63c:	46bd      	mov	sp, r7
 800b63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b642:	4770      	bx	lr

0800b644 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b644:	b480      	push	{r7}
 800b646:	b087      	sub	sp, #28
 800b648:	af00      	add	r7, sp, #0
 800b64a:	60f8      	str	r0, [r7, #12]
 800b64c:	60b9      	str	r1, [r7, #8]
 800b64e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d00d      	beq.n	800b67a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b65e:	693a      	ldr	r2, [r7, #16]
 800b660:	1c53      	adds	r3, r2, #1
 800b662:	613b      	str	r3, [r7, #16]
 800b664:	697b      	ldr	r3, [r7, #20]
 800b666:	1c59      	adds	r1, r3, #1
 800b668:	6179      	str	r1, [r7, #20]
 800b66a:	7812      	ldrb	r2, [r2, #0]
 800b66c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	3b01      	subs	r3, #1
 800b672:	607b      	str	r3, [r7, #4]
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d1f1      	bne.n	800b65e <mem_cpy+0x1a>
	}
}
 800b67a:	bf00      	nop
 800b67c:	371c      	adds	r7, #28
 800b67e:	46bd      	mov	sp, r7
 800b680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b684:	4770      	bx	lr

0800b686 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b686:	b480      	push	{r7}
 800b688:	b087      	sub	sp, #28
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	60f8      	str	r0, [r7, #12]
 800b68e:	60b9      	str	r1, [r7, #8]
 800b690:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	1c5a      	adds	r2, r3, #1
 800b69a:	617a      	str	r2, [r7, #20]
 800b69c:	68ba      	ldr	r2, [r7, #8]
 800b69e:	b2d2      	uxtb	r2, r2
 800b6a0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	3b01      	subs	r3, #1
 800b6a6:	607b      	str	r3, [r7, #4]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d1f3      	bne.n	800b696 <mem_set+0x10>
}
 800b6ae:	bf00      	nop
 800b6b0:	bf00      	nop
 800b6b2:	371c      	adds	r7, #28
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr

0800b6bc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b6bc:	b480      	push	{r7}
 800b6be:	b089      	sub	sp, #36	; 0x24
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	60b9      	str	r1, [r7, #8]
 800b6c6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	61fb      	str	r3, [r7, #28]
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b6d4:	69fb      	ldr	r3, [r7, #28]
 800b6d6:	1c5a      	adds	r2, r3, #1
 800b6d8:	61fa      	str	r2, [r7, #28]
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	4619      	mov	r1, r3
 800b6de:	69bb      	ldr	r3, [r7, #24]
 800b6e0:	1c5a      	adds	r2, r3, #1
 800b6e2:	61ba      	str	r2, [r7, #24]
 800b6e4:	781b      	ldrb	r3, [r3, #0]
 800b6e6:	1acb      	subs	r3, r1, r3
 800b6e8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	3b01      	subs	r3, #1
 800b6ee:	607b      	str	r3, [r7, #4]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d002      	beq.n	800b6fc <mem_cmp+0x40>
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d0eb      	beq.n	800b6d4 <mem_cmp+0x18>

	return r;
 800b6fc:	697b      	ldr	r3, [r7, #20]
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3724      	adds	r7, #36	; 0x24
 800b702:	46bd      	mov	sp, r7
 800b704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b708:	4770      	bx	lr

0800b70a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b70a:	b480      	push	{r7}
 800b70c:	b083      	sub	sp, #12
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
 800b712:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b714:	e002      	b.n	800b71c <chk_chr+0x12>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	3301      	adds	r3, #1
 800b71a:	607b      	str	r3, [r7, #4]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	781b      	ldrb	r3, [r3, #0]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d005      	beq.n	800b730 <chk_chr+0x26>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	461a      	mov	r2, r3
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d1f2      	bne.n	800b716 <chk_chr+0xc>
	return *str;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	781b      	ldrb	r3, [r3, #0]
}
 800b734:	4618      	mov	r0, r3
 800b736:	370c      	adds	r7, #12
 800b738:	46bd      	mov	sp, r7
 800b73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73e:	4770      	bx	lr

0800b740 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b740:	b480      	push	{r7}
 800b742:	b085      	sub	sp, #20
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b74a:	2300      	movs	r3, #0
 800b74c:	60bb      	str	r3, [r7, #8]
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	60fb      	str	r3, [r7, #12]
 800b752:	e029      	b.n	800b7a8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b754:	4a27      	ldr	r2, [pc, #156]	; (800b7f4 <chk_lock+0xb4>)
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	011b      	lsls	r3, r3, #4
 800b75a:	4413      	add	r3, r2
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d01d      	beq.n	800b79e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b762:	4a24      	ldr	r2, [pc, #144]	; (800b7f4 <chk_lock+0xb4>)
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	011b      	lsls	r3, r3, #4
 800b768:	4413      	add	r3, r2
 800b76a:	681a      	ldr	r2, [r3, #0]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	429a      	cmp	r2, r3
 800b772:	d116      	bne.n	800b7a2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b774:	4a1f      	ldr	r2, [pc, #124]	; (800b7f4 <chk_lock+0xb4>)
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	011b      	lsls	r3, r3, #4
 800b77a:	4413      	add	r3, r2
 800b77c:	3304      	adds	r3, #4
 800b77e:	681a      	ldr	r2, [r3, #0]
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b784:	429a      	cmp	r2, r3
 800b786:	d10c      	bne.n	800b7a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b788:	4a1a      	ldr	r2, [pc, #104]	; (800b7f4 <chk_lock+0xb4>)
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	011b      	lsls	r3, r3, #4
 800b78e:	4413      	add	r3, r2
 800b790:	3308      	adds	r3, #8
 800b792:	681a      	ldr	r2, [r3, #0]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b798:	429a      	cmp	r2, r3
 800b79a:	d102      	bne.n	800b7a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b79c:	e007      	b.n	800b7ae <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b79e:	2301      	movs	r3, #1
 800b7a0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	60fb      	str	r3, [r7, #12]
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	d9d2      	bls.n	800b754 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	2b02      	cmp	r3, #2
 800b7b2:	d109      	bne.n	800b7c8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d102      	bne.n	800b7c0 <chk_lock+0x80>
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	2b02      	cmp	r3, #2
 800b7be:	d101      	bne.n	800b7c4 <chk_lock+0x84>
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	e010      	b.n	800b7e6 <chk_lock+0xa6>
 800b7c4:	2312      	movs	r3, #18
 800b7c6:	e00e      	b.n	800b7e6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d108      	bne.n	800b7e0 <chk_lock+0xa0>
 800b7ce:	4a09      	ldr	r2, [pc, #36]	; (800b7f4 <chk_lock+0xb4>)
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	011b      	lsls	r3, r3, #4
 800b7d4:	4413      	add	r3, r2
 800b7d6:	330c      	adds	r3, #12
 800b7d8:	881b      	ldrh	r3, [r3, #0]
 800b7da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7de:	d101      	bne.n	800b7e4 <chk_lock+0xa4>
 800b7e0:	2310      	movs	r3, #16
 800b7e2:	e000      	b.n	800b7e6 <chk_lock+0xa6>
 800b7e4:	2300      	movs	r3, #0
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3714      	adds	r7, #20
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr
 800b7f2:	bf00      	nop
 800b7f4:	200008ac 	.word	0x200008ac

0800b7f8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b083      	sub	sp, #12
 800b7fc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b7fe:	2300      	movs	r3, #0
 800b800:	607b      	str	r3, [r7, #4]
 800b802:	e002      	b.n	800b80a <enq_lock+0x12>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	3301      	adds	r3, #1
 800b808:	607b      	str	r3, [r7, #4]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2b01      	cmp	r3, #1
 800b80e:	d806      	bhi.n	800b81e <enq_lock+0x26>
 800b810:	4a09      	ldr	r2, [pc, #36]	; (800b838 <enq_lock+0x40>)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	011b      	lsls	r3, r3, #4
 800b816:	4413      	add	r3, r2
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d1f2      	bne.n	800b804 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2b02      	cmp	r3, #2
 800b822:	bf14      	ite	ne
 800b824:	2301      	movne	r3, #1
 800b826:	2300      	moveq	r3, #0
 800b828:	b2db      	uxtb	r3, r3
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	370c      	adds	r7, #12
 800b82e:	46bd      	mov	sp, r7
 800b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b834:	4770      	bx	lr
 800b836:	bf00      	nop
 800b838:	200008ac 	.word	0x200008ac

0800b83c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b085      	sub	sp, #20
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b846:	2300      	movs	r3, #0
 800b848:	60fb      	str	r3, [r7, #12]
 800b84a:	e01f      	b.n	800b88c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b84c:	4a41      	ldr	r2, [pc, #260]	; (800b954 <inc_lock+0x118>)
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	011b      	lsls	r3, r3, #4
 800b852:	4413      	add	r3, r2
 800b854:	681a      	ldr	r2, [r3, #0]
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d113      	bne.n	800b886 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b85e:	4a3d      	ldr	r2, [pc, #244]	; (800b954 <inc_lock+0x118>)
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	011b      	lsls	r3, r3, #4
 800b864:	4413      	add	r3, r2
 800b866:	3304      	adds	r3, #4
 800b868:	681a      	ldr	r2, [r3, #0]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b86e:	429a      	cmp	r2, r3
 800b870:	d109      	bne.n	800b886 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b872:	4a38      	ldr	r2, [pc, #224]	; (800b954 <inc_lock+0x118>)
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	011b      	lsls	r3, r3, #4
 800b878:	4413      	add	r3, r2
 800b87a:	3308      	adds	r3, #8
 800b87c:	681a      	ldr	r2, [r3, #0]
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b882:	429a      	cmp	r2, r3
 800b884:	d006      	beq.n	800b894 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	3301      	adds	r3, #1
 800b88a:	60fb      	str	r3, [r7, #12]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2b01      	cmp	r3, #1
 800b890:	d9dc      	bls.n	800b84c <inc_lock+0x10>
 800b892:	e000      	b.n	800b896 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b894:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	2b02      	cmp	r3, #2
 800b89a:	d132      	bne.n	800b902 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b89c:	2300      	movs	r3, #0
 800b89e:	60fb      	str	r3, [r7, #12]
 800b8a0:	e002      	b.n	800b8a8 <inc_lock+0x6c>
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	3301      	adds	r3, #1
 800b8a6:	60fb      	str	r3, [r7, #12]
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	2b01      	cmp	r3, #1
 800b8ac:	d806      	bhi.n	800b8bc <inc_lock+0x80>
 800b8ae:	4a29      	ldr	r2, [pc, #164]	; (800b954 <inc_lock+0x118>)
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	011b      	lsls	r3, r3, #4
 800b8b4:	4413      	add	r3, r2
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d1f2      	bne.n	800b8a2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	2b02      	cmp	r3, #2
 800b8c0:	d101      	bne.n	800b8c6 <inc_lock+0x8a>
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	e040      	b.n	800b948 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681a      	ldr	r2, [r3, #0]
 800b8ca:	4922      	ldr	r1, [pc, #136]	; (800b954 <inc_lock+0x118>)
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	011b      	lsls	r3, r3, #4
 800b8d0:	440b      	add	r3, r1
 800b8d2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	689a      	ldr	r2, [r3, #8]
 800b8d8:	491e      	ldr	r1, [pc, #120]	; (800b954 <inc_lock+0x118>)
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	011b      	lsls	r3, r3, #4
 800b8de:	440b      	add	r3, r1
 800b8e0:	3304      	adds	r3, #4
 800b8e2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	695a      	ldr	r2, [r3, #20]
 800b8e8:	491a      	ldr	r1, [pc, #104]	; (800b954 <inc_lock+0x118>)
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	011b      	lsls	r3, r3, #4
 800b8ee:	440b      	add	r3, r1
 800b8f0:	3308      	adds	r3, #8
 800b8f2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b8f4:	4a17      	ldr	r2, [pc, #92]	; (800b954 <inc_lock+0x118>)
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	011b      	lsls	r3, r3, #4
 800b8fa:	4413      	add	r3, r2
 800b8fc:	330c      	adds	r3, #12
 800b8fe:	2200      	movs	r2, #0
 800b900:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d009      	beq.n	800b91c <inc_lock+0xe0>
 800b908:	4a12      	ldr	r2, [pc, #72]	; (800b954 <inc_lock+0x118>)
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	011b      	lsls	r3, r3, #4
 800b90e:	4413      	add	r3, r2
 800b910:	330c      	adds	r3, #12
 800b912:	881b      	ldrh	r3, [r3, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d001      	beq.n	800b91c <inc_lock+0xe0>
 800b918:	2300      	movs	r3, #0
 800b91a:	e015      	b.n	800b948 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d108      	bne.n	800b934 <inc_lock+0xf8>
 800b922:	4a0c      	ldr	r2, [pc, #48]	; (800b954 <inc_lock+0x118>)
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	011b      	lsls	r3, r3, #4
 800b928:	4413      	add	r3, r2
 800b92a:	330c      	adds	r3, #12
 800b92c:	881b      	ldrh	r3, [r3, #0]
 800b92e:	3301      	adds	r3, #1
 800b930:	b29a      	uxth	r2, r3
 800b932:	e001      	b.n	800b938 <inc_lock+0xfc>
 800b934:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b938:	4906      	ldr	r1, [pc, #24]	; (800b954 <inc_lock+0x118>)
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	011b      	lsls	r3, r3, #4
 800b93e:	440b      	add	r3, r1
 800b940:	330c      	adds	r3, #12
 800b942:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	3301      	adds	r3, #1
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3714      	adds	r7, #20
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr
 800b954:	200008ac 	.word	0x200008ac

0800b958 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b958:	b480      	push	{r7}
 800b95a:	b085      	sub	sp, #20
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	3b01      	subs	r3, #1
 800b964:	607b      	str	r3, [r7, #4]
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2b01      	cmp	r3, #1
 800b96a:	d825      	bhi.n	800b9b8 <dec_lock+0x60>
		n = Files[i].ctr;
 800b96c:	4a17      	ldr	r2, [pc, #92]	; (800b9cc <dec_lock+0x74>)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	011b      	lsls	r3, r3, #4
 800b972:	4413      	add	r3, r2
 800b974:	330c      	adds	r3, #12
 800b976:	881b      	ldrh	r3, [r3, #0]
 800b978:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b97a:	89fb      	ldrh	r3, [r7, #14]
 800b97c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b980:	d101      	bne.n	800b986 <dec_lock+0x2e>
 800b982:	2300      	movs	r3, #0
 800b984:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b986:	89fb      	ldrh	r3, [r7, #14]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d002      	beq.n	800b992 <dec_lock+0x3a>
 800b98c:	89fb      	ldrh	r3, [r7, #14]
 800b98e:	3b01      	subs	r3, #1
 800b990:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b992:	4a0e      	ldr	r2, [pc, #56]	; (800b9cc <dec_lock+0x74>)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	011b      	lsls	r3, r3, #4
 800b998:	4413      	add	r3, r2
 800b99a:	330c      	adds	r3, #12
 800b99c:	89fa      	ldrh	r2, [r7, #14]
 800b99e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b9a0:	89fb      	ldrh	r3, [r7, #14]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d105      	bne.n	800b9b2 <dec_lock+0x5a>
 800b9a6:	4a09      	ldr	r2, [pc, #36]	; (800b9cc <dec_lock+0x74>)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	011b      	lsls	r3, r3, #4
 800b9ac:	4413      	add	r3, r2
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	737b      	strb	r3, [r7, #13]
 800b9b6:	e001      	b.n	800b9bc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b9b8:	2302      	movs	r3, #2
 800b9ba:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b9bc:	7b7b      	ldrb	r3, [r7, #13]
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3714      	adds	r7, #20
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c8:	4770      	bx	lr
 800b9ca:	bf00      	nop
 800b9cc:	200008ac 	.word	0x200008ac

0800b9d0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b085      	sub	sp, #20
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b9d8:	2300      	movs	r3, #0
 800b9da:	60fb      	str	r3, [r7, #12]
 800b9dc:	e010      	b.n	800ba00 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b9de:	4a0d      	ldr	r2, [pc, #52]	; (800ba14 <clear_lock+0x44>)
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	011b      	lsls	r3, r3, #4
 800b9e4:	4413      	add	r3, r2
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	687a      	ldr	r2, [r7, #4]
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d105      	bne.n	800b9fa <clear_lock+0x2a>
 800b9ee:	4a09      	ldr	r2, [pc, #36]	; (800ba14 <clear_lock+0x44>)
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	011b      	lsls	r3, r3, #4
 800b9f4:	4413      	add	r3, r2
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	3301      	adds	r3, #1
 800b9fe:	60fb      	str	r3, [r7, #12]
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2b01      	cmp	r3, #1
 800ba04:	d9eb      	bls.n	800b9de <clear_lock+0xe>
	}
}
 800ba06:	bf00      	nop
 800ba08:	bf00      	nop
 800ba0a:	3714      	adds	r7, #20
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr
 800ba14:	200008ac 	.word	0x200008ac

0800ba18 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b086      	sub	sp, #24
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ba20:	2300      	movs	r3, #0
 800ba22:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	78db      	ldrb	r3, [r3, #3]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d034      	beq.n	800ba96 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba30:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	7858      	ldrb	r0, [r3, #1]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	697a      	ldr	r2, [r7, #20]
 800ba40:	f7ff fd40 	bl	800b4c4 <disk_write>
 800ba44:	4603      	mov	r3, r0
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d002      	beq.n	800ba50 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	73fb      	strb	r3, [r7, #15]
 800ba4e:	e022      	b.n	800ba96 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2200      	movs	r2, #0
 800ba54:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6a1b      	ldr	r3, [r3, #32]
 800ba5a:	697a      	ldr	r2, [r7, #20]
 800ba5c:	1ad2      	subs	r2, r2, r3
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	699b      	ldr	r3, [r3, #24]
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d217      	bcs.n	800ba96 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	789b      	ldrb	r3, [r3, #2]
 800ba6a:	613b      	str	r3, [r7, #16]
 800ba6c:	e010      	b.n	800ba90 <sync_window+0x78>
					wsect += fs->fsize;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	699b      	ldr	r3, [r3, #24]
 800ba72:	697a      	ldr	r2, [r7, #20]
 800ba74:	4413      	add	r3, r2
 800ba76:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	7858      	ldrb	r0, [r3, #1]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ba82:	2301      	movs	r3, #1
 800ba84:	697a      	ldr	r2, [r7, #20]
 800ba86:	f7ff fd1d 	bl	800b4c4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	3b01      	subs	r3, #1
 800ba8e:	613b      	str	r3, [r7, #16]
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d8eb      	bhi.n	800ba6e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ba96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3718      	adds	r7, #24
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b084      	sub	sp, #16
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
 800baa8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800baaa:	2300      	movs	r3, #0
 800baac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bab2:	683a      	ldr	r2, [r7, #0]
 800bab4:	429a      	cmp	r2, r3
 800bab6:	d01b      	beq.n	800baf0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f7ff ffad 	bl	800ba18 <sync_window>
 800babe:	4603      	mov	r3, r0
 800bac0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bac2:	7bfb      	ldrb	r3, [r7, #15]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d113      	bne.n	800baf0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	7858      	ldrb	r0, [r3, #1]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bad2:	2301      	movs	r3, #1
 800bad4:	683a      	ldr	r2, [r7, #0]
 800bad6:	f7ff fcd5 	bl	800b484 <disk_read>
 800bada:	4603      	mov	r3, r0
 800badc:	2b00      	cmp	r3, #0
 800bade:	d004      	beq.n	800baea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bae0:	f04f 33ff 	mov.w	r3, #4294967295
 800bae4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bae6:	2301      	movs	r3, #1
 800bae8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	683a      	ldr	r2, [r7, #0]
 800baee:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800baf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3710      	adds	r7, #16
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
	...

0800bafc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b084      	sub	sp, #16
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f7ff ff87 	bl	800ba18 <sync_window>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bb0e:	7bfb      	ldrb	r3, [r7, #15]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d158      	bne.n	800bbc6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	781b      	ldrb	r3, [r3, #0]
 800bb18:	2b03      	cmp	r3, #3
 800bb1a:	d148      	bne.n	800bbae <sync_fs+0xb2>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	791b      	ldrb	r3, [r3, #4]
 800bb20:	2b01      	cmp	r3, #1
 800bb22:	d144      	bne.n	800bbae <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	3330      	adds	r3, #48	; 0x30
 800bb28:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb2c:	2100      	movs	r1, #0
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f7ff fda9 	bl	800b686 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	3330      	adds	r3, #48	; 0x30
 800bb38:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bb3c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bb40:	4618      	mov	r0, r3
 800bb42:	f7ff fd38 	bl	800b5b6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	3330      	adds	r3, #48	; 0x30
 800bb4a:	4921      	ldr	r1, [pc, #132]	; (800bbd0 <sync_fs+0xd4>)
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f7ff fd4d 	bl	800b5ec <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	3330      	adds	r3, #48	; 0x30
 800bb56:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bb5a:	491e      	ldr	r1, [pc, #120]	; (800bbd4 <sync_fs+0xd8>)
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f7ff fd45 	bl	800b5ec <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	3330      	adds	r3, #48	; 0x30
 800bb66:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	691b      	ldr	r3, [r3, #16]
 800bb6e:	4619      	mov	r1, r3
 800bb70:	4610      	mov	r0, r2
 800bb72:	f7ff fd3b 	bl	800b5ec <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	3330      	adds	r3, #48	; 0x30
 800bb7a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	68db      	ldr	r3, [r3, #12]
 800bb82:	4619      	mov	r1, r3
 800bb84:	4610      	mov	r0, r2
 800bb86:	f7ff fd31 	bl	800b5ec <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	69db      	ldr	r3, [r3, #28]
 800bb8e:	1c5a      	adds	r2, r3, #1
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	7858      	ldrb	r0, [r3, #1]
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bba2:	2301      	movs	r3, #1
 800bba4:	f7ff fc8e 	bl	800b4c4 <disk_write>
			fs->fsi_flag = 0;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	785b      	ldrb	r3, [r3, #1]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	2100      	movs	r1, #0
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7ff fca4 	bl	800b504 <disk_ioctl>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d001      	beq.n	800bbc6 <sync_fs+0xca>
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bbc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3710      	adds	r7, #16
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}
 800bbd0:	41615252 	.word	0x41615252
 800bbd4:	61417272 	.word	0x61417272

0800bbd8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bbd8:	b480      	push	{r7}
 800bbda:	b083      	sub	sp, #12
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	3b02      	subs	r3, #2
 800bbe6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	695b      	ldr	r3, [r3, #20]
 800bbec:	3b02      	subs	r3, #2
 800bbee:	683a      	ldr	r2, [r7, #0]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d301      	bcc.n	800bbf8 <clust2sect+0x20>
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	e008      	b.n	800bc0a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	895b      	ldrh	r3, [r3, #10]
 800bbfc:	461a      	mov	r2, r3
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	fb03 f202 	mul.w	r2, r3, r2
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc08:	4413      	add	r3, r2
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	370c      	adds	r7, #12
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc14:	4770      	bx	lr

0800bc16 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bc16:	b580      	push	{r7, lr}
 800bc18:	b086      	sub	sp, #24
 800bc1a:	af00      	add	r7, sp, #0
 800bc1c:	6078      	str	r0, [r7, #4]
 800bc1e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	d904      	bls.n	800bc36 <get_fat+0x20>
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	695b      	ldr	r3, [r3, #20]
 800bc30:	683a      	ldr	r2, [r7, #0]
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d302      	bcc.n	800bc3c <get_fat+0x26>
		val = 1;	/* Internal error */
 800bc36:	2301      	movs	r3, #1
 800bc38:	617b      	str	r3, [r7, #20]
 800bc3a:	e08f      	b.n	800bd5c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bc3c:	f04f 33ff 	mov.w	r3, #4294967295
 800bc40:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	781b      	ldrb	r3, [r3, #0]
 800bc46:	2b03      	cmp	r3, #3
 800bc48:	d062      	beq.n	800bd10 <get_fat+0xfa>
 800bc4a:	2b03      	cmp	r3, #3
 800bc4c:	dc7c      	bgt.n	800bd48 <get_fat+0x132>
 800bc4e:	2b01      	cmp	r3, #1
 800bc50:	d002      	beq.n	800bc58 <get_fat+0x42>
 800bc52:	2b02      	cmp	r3, #2
 800bc54:	d042      	beq.n	800bcdc <get_fat+0xc6>
 800bc56:	e077      	b.n	800bd48 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	60fb      	str	r3, [r7, #12]
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	085b      	lsrs	r3, r3, #1
 800bc60:	68fa      	ldr	r2, [r7, #12]
 800bc62:	4413      	add	r3, r2
 800bc64:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	6a1a      	ldr	r2, [r3, #32]
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	0a5b      	lsrs	r3, r3, #9
 800bc6e:	4413      	add	r3, r2
 800bc70:	4619      	mov	r1, r3
 800bc72:	6938      	ldr	r0, [r7, #16]
 800bc74:	f7ff ff14 	bl	800baa0 <move_window>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d167      	bne.n	800bd4e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	1c5a      	adds	r2, r3, #1
 800bc82:	60fa      	str	r2, [r7, #12]
 800bc84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc88:	693a      	ldr	r2, [r7, #16]
 800bc8a:	4413      	add	r3, r2
 800bc8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bc90:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	6a1a      	ldr	r2, [r3, #32]
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	0a5b      	lsrs	r3, r3, #9
 800bc9a:	4413      	add	r3, r2
 800bc9c:	4619      	mov	r1, r3
 800bc9e:	6938      	ldr	r0, [r7, #16]
 800bca0:	f7ff fefe 	bl	800baa0 <move_window>
 800bca4:	4603      	mov	r3, r0
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d153      	bne.n	800bd52 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcb0:	693a      	ldr	r2, [r7, #16]
 800bcb2:	4413      	add	r3, r2
 800bcb4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bcb8:	021b      	lsls	r3, r3, #8
 800bcba:	461a      	mov	r2, r3
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	f003 0301 	and.w	r3, r3, #1
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d002      	beq.n	800bcd2 <get_fat+0xbc>
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	091b      	lsrs	r3, r3, #4
 800bcd0:	e002      	b.n	800bcd8 <get_fat+0xc2>
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bcd8:	617b      	str	r3, [r7, #20]
			break;
 800bcda:	e03f      	b.n	800bd5c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	6a1a      	ldr	r2, [r3, #32]
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	0a1b      	lsrs	r3, r3, #8
 800bce4:	4413      	add	r3, r2
 800bce6:	4619      	mov	r1, r3
 800bce8:	6938      	ldr	r0, [r7, #16]
 800bcea:	f7ff fed9 	bl	800baa0 <move_window>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d130      	bne.n	800bd56 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	005b      	lsls	r3, r3, #1
 800bcfe:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800bd02:	4413      	add	r3, r2
 800bd04:	4618      	mov	r0, r3
 800bd06:	f7ff fc1b 	bl	800b540 <ld_word>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	617b      	str	r3, [r7, #20]
			break;
 800bd0e:	e025      	b.n	800bd5c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	6a1a      	ldr	r2, [r3, #32]
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	09db      	lsrs	r3, r3, #7
 800bd18:	4413      	add	r3, r2
 800bd1a:	4619      	mov	r1, r3
 800bd1c:	6938      	ldr	r0, [r7, #16]
 800bd1e:	f7ff febf 	bl	800baa0 <move_window>
 800bd22:	4603      	mov	r3, r0
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d118      	bne.n	800bd5a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	009b      	lsls	r3, r3, #2
 800bd32:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bd36:	4413      	add	r3, r2
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f7ff fc19 	bl	800b570 <ld_dword>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bd44:	617b      	str	r3, [r7, #20]
			break;
 800bd46:	e009      	b.n	800bd5c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bd48:	2301      	movs	r3, #1
 800bd4a:	617b      	str	r3, [r7, #20]
 800bd4c:	e006      	b.n	800bd5c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd4e:	bf00      	nop
 800bd50:	e004      	b.n	800bd5c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd52:	bf00      	nop
 800bd54:	e002      	b.n	800bd5c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bd56:	bf00      	nop
 800bd58:	e000      	b.n	800bd5c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bd5a:	bf00      	nop
		}
	}

	return val;
 800bd5c:	697b      	ldr	r3, [r7, #20]
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3718      	adds	r7, #24
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}

0800bd66 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bd66:	b590      	push	{r4, r7, lr}
 800bd68:	b089      	sub	sp, #36	; 0x24
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	60f8      	str	r0, [r7, #12]
 800bd6e:	60b9      	str	r1, [r7, #8]
 800bd70:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bd72:	2302      	movs	r3, #2
 800bd74:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	f240 80d2 	bls.w	800bf22 <put_fat+0x1bc>
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	695b      	ldr	r3, [r3, #20]
 800bd82:	68ba      	ldr	r2, [r7, #8]
 800bd84:	429a      	cmp	r2, r3
 800bd86:	f080 80cc 	bcs.w	800bf22 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	781b      	ldrb	r3, [r3, #0]
 800bd8e:	2b03      	cmp	r3, #3
 800bd90:	f000 8096 	beq.w	800bec0 <put_fat+0x15a>
 800bd94:	2b03      	cmp	r3, #3
 800bd96:	f300 80cd 	bgt.w	800bf34 <put_fat+0x1ce>
 800bd9a:	2b01      	cmp	r3, #1
 800bd9c:	d002      	beq.n	800bda4 <put_fat+0x3e>
 800bd9e:	2b02      	cmp	r3, #2
 800bda0:	d06e      	beq.n	800be80 <put_fat+0x11a>
 800bda2:	e0c7      	b.n	800bf34 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	61bb      	str	r3, [r7, #24]
 800bda8:	69bb      	ldr	r3, [r7, #24]
 800bdaa:	085b      	lsrs	r3, r3, #1
 800bdac:	69ba      	ldr	r2, [r7, #24]
 800bdae:	4413      	add	r3, r2
 800bdb0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	6a1a      	ldr	r2, [r3, #32]
 800bdb6:	69bb      	ldr	r3, [r7, #24]
 800bdb8:	0a5b      	lsrs	r3, r3, #9
 800bdba:	4413      	add	r3, r2
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	68f8      	ldr	r0, [r7, #12]
 800bdc0:	f7ff fe6e 	bl	800baa0 <move_window>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bdc8:	7ffb      	ldrb	r3, [r7, #31]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	f040 80ab 	bne.w	800bf26 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bdd6:	69bb      	ldr	r3, [r7, #24]
 800bdd8:	1c59      	adds	r1, r3, #1
 800bdda:	61b9      	str	r1, [r7, #24]
 800bddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bde0:	4413      	add	r3, r2
 800bde2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	f003 0301 	and.w	r3, r3, #1
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d00d      	beq.n	800be0a <put_fat+0xa4>
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	781b      	ldrb	r3, [r3, #0]
 800bdf2:	b25b      	sxtb	r3, r3
 800bdf4:	f003 030f 	and.w	r3, r3, #15
 800bdf8:	b25a      	sxtb	r2, r3
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	b2db      	uxtb	r3, r3
 800bdfe:	011b      	lsls	r3, r3, #4
 800be00:	b25b      	sxtb	r3, r3
 800be02:	4313      	orrs	r3, r2
 800be04:	b25b      	sxtb	r3, r3
 800be06:	b2db      	uxtb	r3, r3
 800be08:	e001      	b.n	800be0e <put_fat+0xa8>
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	b2db      	uxtb	r3, r3
 800be0e:	697a      	ldr	r2, [r7, #20]
 800be10:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	2201      	movs	r2, #1
 800be16:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	6a1a      	ldr	r2, [r3, #32]
 800be1c:	69bb      	ldr	r3, [r7, #24]
 800be1e:	0a5b      	lsrs	r3, r3, #9
 800be20:	4413      	add	r3, r2
 800be22:	4619      	mov	r1, r3
 800be24:	68f8      	ldr	r0, [r7, #12]
 800be26:	f7ff fe3b 	bl	800baa0 <move_window>
 800be2a:	4603      	mov	r3, r0
 800be2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800be2e:	7ffb      	ldrb	r3, [r7, #31]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d17a      	bne.n	800bf2a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800be3a:	69bb      	ldr	r3, [r7, #24]
 800be3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be40:	4413      	add	r3, r2
 800be42:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	f003 0301 	and.w	r3, r3, #1
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d003      	beq.n	800be56 <put_fat+0xf0>
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	091b      	lsrs	r3, r3, #4
 800be52:	b2db      	uxtb	r3, r3
 800be54:	e00e      	b.n	800be74 <put_fat+0x10e>
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	781b      	ldrb	r3, [r3, #0]
 800be5a:	b25b      	sxtb	r3, r3
 800be5c:	f023 030f 	bic.w	r3, r3, #15
 800be60:	b25a      	sxtb	r2, r3
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	0a1b      	lsrs	r3, r3, #8
 800be66:	b25b      	sxtb	r3, r3
 800be68:	f003 030f 	and.w	r3, r3, #15
 800be6c:	b25b      	sxtb	r3, r3
 800be6e:	4313      	orrs	r3, r2
 800be70:	b25b      	sxtb	r3, r3
 800be72:	b2db      	uxtb	r3, r3
 800be74:	697a      	ldr	r2, [r7, #20]
 800be76:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	2201      	movs	r2, #1
 800be7c:	70da      	strb	r2, [r3, #3]
			break;
 800be7e:	e059      	b.n	800bf34 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	6a1a      	ldr	r2, [r3, #32]
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	0a1b      	lsrs	r3, r3, #8
 800be88:	4413      	add	r3, r2
 800be8a:	4619      	mov	r1, r3
 800be8c:	68f8      	ldr	r0, [r7, #12]
 800be8e:	f7ff fe07 	bl	800baa0 <move_window>
 800be92:	4603      	mov	r3, r0
 800be94:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800be96:	7ffb      	ldrb	r3, [r7, #31]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d148      	bne.n	800bf2e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	005b      	lsls	r3, r3, #1
 800bea6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800beaa:	4413      	add	r3, r2
 800beac:	687a      	ldr	r2, [r7, #4]
 800beae:	b292      	uxth	r2, r2
 800beb0:	4611      	mov	r1, r2
 800beb2:	4618      	mov	r0, r3
 800beb4:	f7ff fb7f 	bl	800b5b6 <st_word>
			fs->wflag = 1;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	2201      	movs	r2, #1
 800bebc:	70da      	strb	r2, [r3, #3]
			break;
 800bebe:	e039      	b.n	800bf34 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	6a1a      	ldr	r2, [r3, #32]
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	09db      	lsrs	r3, r3, #7
 800bec8:	4413      	add	r3, r2
 800beca:	4619      	mov	r1, r3
 800becc:	68f8      	ldr	r0, [r7, #12]
 800bece:	f7ff fde7 	bl	800baa0 <move_window>
 800bed2:	4603      	mov	r3, r0
 800bed4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bed6:	7ffb      	ldrb	r3, [r7, #31]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d12a      	bne.n	800bf32 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	009b      	lsls	r3, r3, #2
 800beec:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bef0:	4413      	add	r3, r2
 800bef2:	4618      	mov	r0, r3
 800bef4:	f7ff fb3c 	bl	800b570 <ld_dword>
 800bef8:	4603      	mov	r3, r0
 800befa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800befe:	4323      	orrs	r3, r4
 800bf00:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	009b      	lsls	r3, r3, #2
 800bf0c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bf10:	4413      	add	r3, r2
 800bf12:	6879      	ldr	r1, [r7, #4]
 800bf14:	4618      	mov	r0, r3
 800bf16:	f7ff fb69 	bl	800b5ec <st_dword>
			fs->wflag = 1;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	2201      	movs	r2, #1
 800bf1e:	70da      	strb	r2, [r3, #3]
			break;
 800bf20:	e008      	b.n	800bf34 <put_fat+0x1ce>
		}
	}
 800bf22:	bf00      	nop
 800bf24:	e006      	b.n	800bf34 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800bf26:	bf00      	nop
 800bf28:	e004      	b.n	800bf34 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800bf2a:	bf00      	nop
 800bf2c:	e002      	b.n	800bf34 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800bf2e:	bf00      	nop
 800bf30:	e000      	b.n	800bf34 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800bf32:	bf00      	nop
	return res;
 800bf34:	7ffb      	ldrb	r3, [r7, #31]
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3724      	adds	r7, #36	; 0x24
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd90      	pop	{r4, r7, pc}

0800bf3e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800bf3e:	b580      	push	{r7, lr}
 800bf40:	b088      	sub	sp, #32
 800bf42:	af00      	add	r7, sp, #0
 800bf44:	60f8      	str	r0, [r7, #12]
 800bf46:	60b9      	str	r1, [r7, #8]
 800bf48:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	2b01      	cmp	r3, #1
 800bf58:	d904      	bls.n	800bf64 <remove_chain+0x26>
 800bf5a:	69bb      	ldr	r3, [r7, #24]
 800bf5c:	695b      	ldr	r3, [r3, #20]
 800bf5e:	68ba      	ldr	r2, [r7, #8]
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d301      	bcc.n	800bf68 <remove_chain+0x2a>
 800bf64:	2302      	movs	r3, #2
 800bf66:	e04b      	b.n	800c000 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d00c      	beq.n	800bf88 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800bf6e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf72:	6879      	ldr	r1, [r7, #4]
 800bf74:	69b8      	ldr	r0, [r7, #24]
 800bf76:	f7ff fef6 	bl	800bd66 <put_fat>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800bf7e:	7ffb      	ldrb	r3, [r7, #31]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d001      	beq.n	800bf88 <remove_chain+0x4a>
 800bf84:	7ffb      	ldrb	r3, [r7, #31]
 800bf86:	e03b      	b.n	800c000 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800bf88:	68b9      	ldr	r1, [r7, #8]
 800bf8a:	68f8      	ldr	r0, [r7, #12]
 800bf8c:	f7ff fe43 	bl	800bc16 <get_fat>
 800bf90:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d031      	beq.n	800bffc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	2b01      	cmp	r3, #1
 800bf9c:	d101      	bne.n	800bfa2 <remove_chain+0x64>
 800bf9e:	2302      	movs	r3, #2
 800bfa0:	e02e      	b.n	800c000 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfa8:	d101      	bne.n	800bfae <remove_chain+0x70>
 800bfaa:	2301      	movs	r3, #1
 800bfac:	e028      	b.n	800c000 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800bfae:	2200      	movs	r2, #0
 800bfb0:	68b9      	ldr	r1, [r7, #8]
 800bfb2:	69b8      	ldr	r0, [r7, #24]
 800bfb4:	f7ff fed7 	bl	800bd66 <put_fat>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800bfbc:	7ffb      	ldrb	r3, [r7, #31]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d001      	beq.n	800bfc6 <remove_chain+0x88>
 800bfc2:	7ffb      	ldrb	r3, [r7, #31]
 800bfc4:	e01c      	b.n	800c000 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bfc6:	69bb      	ldr	r3, [r7, #24]
 800bfc8:	691a      	ldr	r2, [r3, #16]
 800bfca:	69bb      	ldr	r3, [r7, #24]
 800bfcc:	695b      	ldr	r3, [r3, #20]
 800bfce:	3b02      	subs	r3, #2
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d20b      	bcs.n	800bfec <remove_chain+0xae>
			fs->free_clst++;
 800bfd4:	69bb      	ldr	r3, [r7, #24]
 800bfd6:	691b      	ldr	r3, [r3, #16]
 800bfd8:	1c5a      	adds	r2, r3, #1
 800bfda:	69bb      	ldr	r3, [r7, #24]
 800bfdc:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800bfde:	69bb      	ldr	r3, [r7, #24]
 800bfe0:	791b      	ldrb	r3, [r3, #4]
 800bfe2:	f043 0301 	orr.w	r3, r3, #1
 800bfe6:	b2da      	uxtb	r2, r3
 800bfe8:	69bb      	ldr	r3, [r7, #24]
 800bfea:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bff0:	69bb      	ldr	r3, [r7, #24]
 800bff2:	695b      	ldr	r3, [r3, #20]
 800bff4:	68ba      	ldr	r2, [r7, #8]
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d3c6      	bcc.n	800bf88 <remove_chain+0x4a>
 800bffa:	e000      	b.n	800bffe <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800bffc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800bffe:	2300      	movs	r3, #0
}
 800c000:	4618      	mov	r0, r3
 800c002:	3720      	adds	r7, #32
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}

0800c008 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b088      	sub	sp, #32
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d10d      	bne.n	800c03a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	68db      	ldr	r3, [r3, #12]
 800c022:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c024:	69bb      	ldr	r3, [r7, #24]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d004      	beq.n	800c034 <create_chain+0x2c>
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	695b      	ldr	r3, [r3, #20]
 800c02e:	69ba      	ldr	r2, [r7, #24]
 800c030:	429a      	cmp	r2, r3
 800c032:	d31b      	bcc.n	800c06c <create_chain+0x64>
 800c034:	2301      	movs	r3, #1
 800c036:	61bb      	str	r3, [r7, #24]
 800c038:	e018      	b.n	800c06c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c03a:	6839      	ldr	r1, [r7, #0]
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f7ff fdea 	bl	800bc16 <get_fat>
 800c042:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2b01      	cmp	r3, #1
 800c048:	d801      	bhi.n	800c04e <create_chain+0x46>
 800c04a:	2301      	movs	r3, #1
 800c04c:	e070      	b.n	800c130 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c054:	d101      	bne.n	800c05a <create_chain+0x52>
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	e06a      	b.n	800c130 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	695b      	ldr	r3, [r3, #20]
 800c05e:	68fa      	ldr	r2, [r7, #12]
 800c060:	429a      	cmp	r2, r3
 800c062:	d201      	bcs.n	800c068 <create_chain+0x60>
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	e063      	b.n	800c130 <create_chain+0x128>
		scl = clst;
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c06c:	69bb      	ldr	r3, [r7, #24]
 800c06e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c070:	69fb      	ldr	r3, [r7, #28]
 800c072:	3301      	adds	r3, #1
 800c074:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	695b      	ldr	r3, [r3, #20]
 800c07a:	69fa      	ldr	r2, [r7, #28]
 800c07c:	429a      	cmp	r2, r3
 800c07e:	d307      	bcc.n	800c090 <create_chain+0x88>
				ncl = 2;
 800c080:	2302      	movs	r3, #2
 800c082:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c084:	69fa      	ldr	r2, [r7, #28]
 800c086:	69bb      	ldr	r3, [r7, #24]
 800c088:	429a      	cmp	r2, r3
 800c08a:	d901      	bls.n	800c090 <create_chain+0x88>
 800c08c:	2300      	movs	r3, #0
 800c08e:	e04f      	b.n	800c130 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c090:	69f9      	ldr	r1, [r7, #28]
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f7ff fdbf 	bl	800bc16 <get_fat>
 800c098:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d00e      	beq.n	800c0be <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	2b01      	cmp	r3, #1
 800c0a4:	d003      	beq.n	800c0ae <create_chain+0xa6>
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ac:	d101      	bne.n	800c0b2 <create_chain+0xaa>
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	e03e      	b.n	800c130 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c0b2:	69fa      	ldr	r2, [r7, #28]
 800c0b4:	69bb      	ldr	r3, [r7, #24]
 800c0b6:	429a      	cmp	r2, r3
 800c0b8:	d1da      	bne.n	800c070 <create_chain+0x68>
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	e038      	b.n	800c130 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c0be:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c0c0:	f04f 32ff 	mov.w	r2, #4294967295
 800c0c4:	69f9      	ldr	r1, [r7, #28]
 800c0c6:	6938      	ldr	r0, [r7, #16]
 800c0c8:	f7ff fe4d 	bl	800bd66 <put_fat>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c0d0:	7dfb      	ldrb	r3, [r7, #23]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d109      	bne.n	800c0ea <create_chain+0xe2>
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d006      	beq.n	800c0ea <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c0dc:	69fa      	ldr	r2, [r7, #28]
 800c0de:	6839      	ldr	r1, [r7, #0]
 800c0e0:	6938      	ldr	r0, [r7, #16]
 800c0e2:	f7ff fe40 	bl	800bd66 <put_fat>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c0ea:	7dfb      	ldrb	r3, [r7, #23]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d116      	bne.n	800c11e <create_chain+0x116>
		fs->last_clst = ncl;
 800c0f0:	693b      	ldr	r3, [r7, #16]
 800c0f2:	69fa      	ldr	r2, [r7, #28]
 800c0f4:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	691a      	ldr	r2, [r3, #16]
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	695b      	ldr	r3, [r3, #20]
 800c0fe:	3b02      	subs	r3, #2
 800c100:	429a      	cmp	r2, r3
 800c102:	d804      	bhi.n	800c10e <create_chain+0x106>
 800c104:	693b      	ldr	r3, [r7, #16]
 800c106:	691b      	ldr	r3, [r3, #16]
 800c108:	1e5a      	subs	r2, r3, #1
 800c10a:	693b      	ldr	r3, [r7, #16]
 800c10c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	791b      	ldrb	r3, [r3, #4]
 800c112:	f043 0301 	orr.w	r3, r3, #1
 800c116:	b2da      	uxtb	r2, r3
 800c118:	693b      	ldr	r3, [r7, #16]
 800c11a:	711a      	strb	r2, [r3, #4]
 800c11c:	e007      	b.n	800c12e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c11e:	7dfb      	ldrb	r3, [r7, #23]
 800c120:	2b01      	cmp	r3, #1
 800c122:	d102      	bne.n	800c12a <create_chain+0x122>
 800c124:	f04f 33ff 	mov.w	r3, #4294967295
 800c128:	e000      	b.n	800c12c <create_chain+0x124>
 800c12a:	2301      	movs	r3, #1
 800c12c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c12e:	69fb      	ldr	r3, [r7, #28]
}
 800c130:	4618      	mov	r0, r3
 800c132:	3720      	adds	r7, #32
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}

0800c138 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c138:	b480      	push	{r7}
 800c13a:	b087      	sub	sp, #28
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
 800c140:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c14c:	3304      	adds	r3, #4
 800c14e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	0a5b      	lsrs	r3, r3, #9
 800c154:	68fa      	ldr	r2, [r7, #12]
 800c156:	8952      	ldrh	r2, [r2, #10]
 800c158:	fbb3 f3f2 	udiv	r3, r3, r2
 800c15c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	1d1a      	adds	r2, r3, #4
 800c162:	613a      	str	r2, [r7, #16]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d101      	bne.n	800c172 <clmt_clust+0x3a>
 800c16e:	2300      	movs	r3, #0
 800c170:	e010      	b.n	800c194 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c172:	697a      	ldr	r2, [r7, #20]
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	429a      	cmp	r2, r3
 800c178:	d307      	bcc.n	800c18a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c17a:	697a      	ldr	r2, [r7, #20]
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	1ad3      	subs	r3, r2, r3
 800c180:	617b      	str	r3, [r7, #20]
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	3304      	adds	r3, #4
 800c186:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c188:	e7e9      	b.n	800c15e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c18a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	681a      	ldr	r2, [r3, #0]
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	4413      	add	r3, r2
}
 800c194:	4618      	mov	r0, r3
 800c196:	371c      	adds	r7, #28
 800c198:	46bd      	mov	sp, r7
 800c19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19e:	4770      	bx	lr

0800c1a0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b086      	sub	sp, #24
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
 800c1a8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c1b6:	d204      	bcs.n	800c1c2 <dir_sdi+0x22>
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	f003 031f 	and.w	r3, r3, #31
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d001      	beq.n	800c1c6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c1c2:	2302      	movs	r3, #2
 800c1c4:	e063      	b.n	800c28e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	683a      	ldr	r2, [r7, #0]
 800c1ca:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	689b      	ldr	r3, [r3, #8]
 800c1d0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c1d2:	697b      	ldr	r3, [r7, #20]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d106      	bne.n	800c1e6 <dir_sdi+0x46>
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	2b02      	cmp	r3, #2
 800c1de:	d902      	bls.n	800c1e6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1e4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d10c      	bne.n	800c206 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	095b      	lsrs	r3, r3, #5
 800c1f0:	693a      	ldr	r2, [r7, #16]
 800c1f2:	8912      	ldrh	r2, [r2, #8]
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	d301      	bcc.n	800c1fc <dir_sdi+0x5c>
 800c1f8:	2302      	movs	r3, #2
 800c1fa:	e048      	b.n	800c28e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c1fc:	693b      	ldr	r3, [r7, #16]
 800c1fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	61da      	str	r2, [r3, #28]
 800c204:	e029      	b.n	800c25a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	895b      	ldrh	r3, [r3, #10]
 800c20a:	025b      	lsls	r3, r3, #9
 800c20c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c20e:	e019      	b.n	800c244 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6979      	ldr	r1, [r7, #20]
 800c214:	4618      	mov	r0, r3
 800c216:	f7ff fcfe 	bl	800bc16 <get_fat>
 800c21a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c222:	d101      	bne.n	800c228 <dir_sdi+0x88>
 800c224:	2301      	movs	r3, #1
 800c226:	e032      	b.n	800c28e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	2b01      	cmp	r3, #1
 800c22c:	d904      	bls.n	800c238 <dir_sdi+0x98>
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	695b      	ldr	r3, [r3, #20]
 800c232:	697a      	ldr	r2, [r7, #20]
 800c234:	429a      	cmp	r2, r3
 800c236:	d301      	bcc.n	800c23c <dir_sdi+0x9c>
 800c238:	2302      	movs	r3, #2
 800c23a:	e028      	b.n	800c28e <dir_sdi+0xee>
			ofs -= csz;
 800c23c:	683a      	ldr	r2, [r7, #0]
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	1ad3      	subs	r3, r2, r3
 800c242:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c244:	683a      	ldr	r2, [r7, #0]
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	429a      	cmp	r2, r3
 800c24a:	d2e1      	bcs.n	800c210 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c24c:	6979      	ldr	r1, [r7, #20]
 800c24e:	6938      	ldr	r0, [r7, #16]
 800c250:	f7ff fcc2 	bl	800bbd8 <clust2sect>
 800c254:	4602      	mov	r2, r0
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	697a      	ldr	r2, [r7, #20]
 800c25e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	69db      	ldr	r3, [r3, #28]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d101      	bne.n	800c26c <dir_sdi+0xcc>
 800c268:	2302      	movs	r3, #2
 800c26a:	e010      	b.n	800c28e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	69da      	ldr	r2, [r3, #28]
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	0a5b      	lsrs	r3, r3, #9
 800c274:	441a      	add	r2, r3
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c286:	441a      	add	r2, r3
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c28c:	2300      	movs	r3, #0
}
 800c28e:	4618      	mov	r0, r3
 800c290:	3718      	adds	r7, #24
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}

0800c296 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c296:	b580      	push	{r7, lr}
 800c298:	b086      	sub	sp, #24
 800c29a:	af00      	add	r7, sp, #0
 800c29c:	6078      	str	r0, [r7, #4]
 800c29e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	695b      	ldr	r3, [r3, #20]
 800c2aa:	3320      	adds	r3, #32
 800c2ac:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	69db      	ldr	r3, [r3, #28]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d003      	beq.n	800c2be <dir_next+0x28>
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c2bc:	d301      	bcc.n	800c2c2 <dir_next+0x2c>
 800c2be:	2304      	movs	r3, #4
 800c2c0:	e0aa      	b.n	800c418 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	f040 8098 	bne.w	800c3fe <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	69db      	ldr	r3, [r3, #28]
 800c2d2:	1c5a      	adds	r2, r3, #1
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	699b      	ldr	r3, [r3, #24]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d10b      	bne.n	800c2f8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	095b      	lsrs	r3, r3, #5
 800c2e4:	68fa      	ldr	r2, [r7, #12]
 800c2e6:	8912      	ldrh	r2, [r2, #8]
 800c2e8:	4293      	cmp	r3, r2
 800c2ea:	f0c0 8088 	bcc.w	800c3fe <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	61da      	str	r2, [r3, #28]
 800c2f4:	2304      	movs	r3, #4
 800c2f6:	e08f      	b.n	800c418 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	0a5b      	lsrs	r3, r3, #9
 800c2fc:	68fa      	ldr	r2, [r7, #12]
 800c2fe:	8952      	ldrh	r2, [r2, #10]
 800c300:	3a01      	subs	r2, #1
 800c302:	4013      	ands	r3, r2
 800c304:	2b00      	cmp	r3, #0
 800c306:	d17a      	bne.n	800c3fe <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c308:	687a      	ldr	r2, [r7, #4]
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	699b      	ldr	r3, [r3, #24]
 800c30e:	4619      	mov	r1, r3
 800c310:	4610      	mov	r0, r2
 800c312:	f7ff fc80 	bl	800bc16 <get_fat>
 800c316:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	2b01      	cmp	r3, #1
 800c31c:	d801      	bhi.n	800c322 <dir_next+0x8c>
 800c31e:	2302      	movs	r3, #2
 800c320:	e07a      	b.n	800c418 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c328:	d101      	bne.n	800c32e <dir_next+0x98>
 800c32a:	2301      	movs	r3, #1
 800c32c:	e074      	b.n	800c418 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	695b      	ldr	r3, [r3, #20]
 800c332:	697a      	ldr	r2, [r7, #20]
 800c334:	429a      	cmp	r2, r3
 800c336:	d358      	bcc.n	800c3ea <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d104      	bne.n	800c348 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2200      	movs	r2, #0
 800c342:	61da      	str	r2, [r3, #28]
 800c344:	2304      	movs	r3, #4
 800c346:	e067      	b.n	800c418 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c348:	687a      	ldr	r2, [r7, #4]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	699b      	ldr	r3, [r3, #24]
 800c34e:	4619      	mov	r1, r3
 800c350:	4610      	mov	r0, r2
 800c352:	f7ff fe59 	bl	800c008 <create_chain>
 800c356:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d101      	bne.n	800c362 <dir_next+0xcc>
 800c35e:	2307      	movs	r3, #7
 800c360:	e05a      	b.n	800c418 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c362:	697b      	ldr	r3, [r7, #20]
 800c364:	2b01      	cmp	r3, #1
 800c366:	d101      	bne.n	800c36c <dir_next+0xd6>
 800c368:	2302      	movs	r3, #2
 800c36a:	e055      	b.n	800c418 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c372:	d101      	bne.n	800c378 <dir_next+0xe2>
 800c374:	2301      	movs	r3, #1
 800c376:	e04f      	b.n	800c418 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c378:	68f8      	ldr	r0, [r7, #12]
 800c37a:	f7ff fb4d 	bl	800ba18 <sync_window>
 800c37e:	4603      	mov	r3, r0
 800c380:	2b00      	cmp	r3, #0
 800c382:	d001      	beq.n	800c388 <dir_next+0xf2>
 800c384:	2301      	movs	r3, #1
 800c386:	e047      	b.n	800c418 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	3330      	adds	r3, #48	; 0x30
 800c38c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c390:	2100      	movs	r1, #0
 800c392:	4618      	mov	r0, r3
 800c394:	f7ff f977 	bl	800b686 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c398:	2300      	movs	r3, #0
 800c39a:	613b      	str	r3, [r7, #16]
 800c39c:	6979      	ldr	r1, [r7, #20]
 800c39e:	68f8      	ldr	r0, [r7, #12]
 800c3a0:	f7ff fc1a 	bl	800bbd8 <clust2sect>
 800c3a4:	4602      	mov	r2, r0
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	62da      	str	r2, [r3, #44]	; 0x2c
 800c3aa:	e012      	b.n	800c3d2 <dir_next+0x13c>
						fs->wflag = 1;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	2201      	movs	r2, #1
 800c3b0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c3b2:	68f8      	ldr	r0, [r7, #12]
 800c3b4:	f7ff fb30 	bl	800ba18 <sync_window>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d001      	beq.n	800c3c2 <dir_next+0x12c>
 800c3be:	2301      	movs	r3, #1
 800c3c0:	e02a      	b.n	800c418 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c3c2:	693b      	ldr	r3, [r7, #16]
 800c3c4:	3301      	adds	r3, #1
 800c3c6:	613b      	str	r3, [r7, #16]
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3cc:	1c5a      	adds	r2, r3, #1
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	62da      	str	r2, [r3, #44]	; 0x2c
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	895b      	ldrh	r3, [r3, #10]
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	4293      	cmp	r3, r2
 800c3dc:	d3e6      	bcc.n	800c3ac <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	1ad2      	subs	r2, r2, r3
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	697a      	ldr	r2, [r7, #20]
 800c3ee:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c3f0:	6979      	ldr	r1, [r7, #20]
 800c3f2:	68f8      	ldr	r0, [r7, #12]
 800c3f4:	f7ff fbf0 	bl	800bbd8 <clust2sect>
 800c3f8:	4602      	mov	r2, r0
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	68ba      	ldr	r2, [r7, #8]
 800c402:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c410:	441a      	add	r2, r3
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c416:	2300      	movs	r3, #0
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3718      	adds	r7, #24
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b086      	sub	sp, #24
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c430:	2100      	movs	r1, #0
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f7ff feb4 	bl	800c1a0 <dir_sdi>
 800c438:	4603      	mov	r3, r0
 800c43a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c43c:	7dfb      	ldrb	r3, [r7, #23]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d12b      	bne.n	800c49a <dir_alloc+0x7a>
		n = 0;
 800c442:	2300      	movs	r3, #0
 800c444:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	69db      	ldr	r3, [r3, #28]
 800c44a:	4619      	mov	r1, r3
 800c44c:	68f8      	ldr	r0, [r7, #12]
 800c44e:	f7ff fb27 	bl	800baa0 <move_window>
 800c452:	4603      	mov	r3, r0
 800c454:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c456:	7dfb      	ldrb	r3, [r7, #23]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d11d      	bne.n	800c498 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6a1b      	ldr	r3, [r3, #32]
 800c460:	781b      	ldrb	r3, [r3, #0]
 800c462:	2be5      	cmp	r3, #229	; 0xe5
 800c464:	d004      	beq.n	800c470 <dir_alloc+0x50>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6a1b      	ldr	r3, [r3, #32]
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d107      	bne.n	800c480 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	3301      	adds	r3, #1
 800c474:	613b      	str	r3, [r7, #16]
 800c476:	693a      	ldr	r2, [r7, #16]
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d102      	bne.n	800c484 <dir_alloc+0x64>
 800c47e:	e00c      	b.n	800c49a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c480:	2300      	movs	r3, #0
 800c482:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c484:	2101      	movs	r1, #1
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f7ff ff05 	bl	800c296 <dir_next>
 800c48c:	4603      	mov	r3, r0
 800c48e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c490:	7dfb      	ldrb	r3, [r7, #23]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d0d7      	beq.n	800c446 <dir_alloc+0x26>
 800c496:	e000      	b.n	800c49a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c498:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c49a:	7dfb      	ldrb	r3, [r7, #23]
 800c49c:	2b04      	cmp	r3, #4
 800c49e:	d101      	bne.n	800c4a4 <dir_alloc+0x84>
 800c4a0:	2307      	movs	r3, #7
 800c4a2:	75fb      	strb	r3, [r7, #23]
	return res;
 800c4a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3718      	adds	r7, #24
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}

0800c4ae <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c4ae:	b580      	push	{r7, lr}
 800c4b0:	b084      	sub	sp, #16
 800c4b2:	af00      	add	r7, sp, #0
 800c4b4:	6078      	str	r0, [r7, #4]
 800c4b6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	331a      	adds	r3, #26
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f7ff f83f 	bl	800b540 <ld_word>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	781b      	ldrb	r3, [r3, #0]
 800c4ca:	2b03      	cmp	r3, #3
 800c4cc:	d109      	bne.n	800c4e2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	3314      	adds	r3, #20
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f7ff f834 	bl	800b540 <ld_word>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	041b      	lsls	r3, r3, #16
 800c4dc:	68fa      	ldr	r2, [r7, #12]
 800c4de:	4313      	orrs	r3, r2
 800c4e0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3710      	adds	r7, #16
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}

0800c4ec <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b084      	sub	sp, #16
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	60f8      	str	r0, [r7, #12]
 800c4f4:	60b9      	str	r1, [r7, #8]
 800c4f6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	331a      	adds	r3, #26
 800c4fc:	687a      	ldr	r2, [r7, #4]
 800c4fe:	b292      	uxth	r2, r2
 800c500:	4611      	mov	r1, r2
 800c502:	4618      	mov	r0, r3
 800c504:	f7ff f857 	bl	800b5b6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	781b      	ldrb	r3, [r3, #0]
 800c50c:	2b03      	cmp	r3, #3
 800c50e:	d109      	bne.n	800c524 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	f103 0214 	add.w	r2, r3, #20
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	0c1b      	lsrs	r3, r3, #16
 800c51a:	b29b      	uxth	r3, r3
 800c51c:	4619      	mov	r1, r3
 800c51e:	4610      	mov	r0, r2
 800c520:	f7ff f849 	bl	800b5b6 <st_word>
	}
}
 800c524:	bf00      	nop
 800c526:	3710      	adds	r7, #16
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}

0800c52c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b086      	sub	sp, #24
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c53a:	2100      	movs	r1, #0
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f7ff fe2f 	bl	800c1a0 <dir_sdi>
 800c542:	4603      	mov	r3, r0
 800c544:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c546:	7dfb      	ldrb	r3, [r7, #23]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d001      	beq.n	800c550 <dir_find+0x24>
 800c54c:	7dfb      	ldrb	r3, [r7, #23]
 800c54e:	e03e      	b.n	800c5ce <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	69db      	ldr	r3, [r3, #28]
 800c554:	4619      	mov	r1, r3
 800c556:	6938      	ldr	r0, [r7, #16]
 800c558:	f7ff faa2 	bl	800baa0 <move_window>
 800c55c:	4603      	mov	r3, r0
 800c55e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c560:	7dfb      	ldrb	r3, [r7, #23]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d12f      	bne.n	800c5c6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6a1b      	ldr	r3, [r3, #32]
 800c56a:	781b      	ldrb	r3, [r3, #0]
 800c56c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c56e:	7bfb      	ldrb	r3, [r7, #15]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d102      	bne.n	800c57a <dir_find+0x4e>
 800c574:	2304      	movs	r3, #4
 800c576:	75fb      	strb	r3, [r7, #23]
 800c578:	e028      	b.n	800c5cc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6a1b      	ldr	r3, [r3, #32]
 800c57e:	330b      	adds	r3, #11
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c586:	b2da      	uxtb	r2, r3
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	6a1b      	ldr	r3, [r3, #32]
 800c590:	330b      	adds	r3, #11
 800c592:	781b      	ldrb	r3, [r3, #0]
 800c594:	f003 0308 	and.w	r3, r3, #8
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d10a      	bne.n	800c5b2 <dir_find+0x86>
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	6a18      	ldr	r0, [r3, #32]
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	3324      	adds	r3, #36	; 0x24
 800c5a4:	220b      	movs	r2, #11
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	f7ff f888 	bl	800b6bc <mem_cmp>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d00b      	beq.n	800c5ca <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c5b2:	2100      	movs	r1, #0
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f7ff fe6e 	bl	800c296 <dir_next>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c5be:	7dfb      	ldrb	r3, [r7, #23]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d0c5      	beq.n	800c550 <dir_find+0x24>
 800c5c4:	e002      	b.n	800c5cc <dir_find+0xa0>
		if (res != FR_OK) break;
 800c5c6:	bf00      	nop
 800c5c8:	e000      	b.n	800c5cc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c5ca:	bf00      	nop

	return res;
 800c5cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	3718      	adds	r7, #24
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}

0800c5d6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c5d6:	b580      	push	{r7, lr}
 800c5d8:	b084      	sub	sp, #16
 800c5da:	af00      	add	r7, sp, #0
 800c5dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c5e4:	2101      	movs	r1, #1
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f7ff ff1a 	bl	800c420 <dir_alloc>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c5f0:	7bfb      	ldrb	r3, [r7, #15]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d11c      	bne.n	800c630 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	69db      	ldr	r3, [r3, #28]
 800c5fa:	4619      	mov	r1, r3
 800c5fc:	68b8      	ldr	r0, [r7, #8]
 800c5fe:	f7ff fa4f 	bl	800baa0 <move_window>
 800c602:	4603      	mov	r3, r0
 800c604:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c606:	7bfb      	ldrb	r3, [r7, #15]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d111      	bne.n	800c630 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6a1b      	ldr	r3, [r3, #32]
 800c610:	2220      	movs	r2, #32
 800c612:	2100      	movs	r1, #0
 800c614:	4618      	mov	r0, r3
 800c616:	f7ff f836 	bl	800b686 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6a18      	ldr	r0, [r3, #32]
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	3324      	adds	r3, #36	; 0x24
 800c622:	220b      	movs	r2, #11
 800c624:	4619      	mov	r1, r3
 800c626:	f7ff f80d 	bl	800b644 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	2201      	movs	r2, #1
 800c62e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c630:	7bfb      	ldrb	r3, [r7, #15]
}
 800c632:	4618      	mov	r0, r3
 800c634:	3710      	adds	r7, #16
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
	...

0800c63c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b088      	sub	sp, #32
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	60fb      	str	r3, [r7, #12]
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	3324      	adds	r3, #36	; 0x24
 800c650:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c652:	220b      	movs	r2, #11
 800c654:	2120      	movs	r1, #32
 800c656:	68b8      	ldr	r0, [r7, #8]
 800c658:	f7ff f815 	bl	800b686 <mem_set>
	si = i = 0; ni = 8;
 800c65c:	2300      	movs	r3, #0
 800c65e:	613b      	str	r3, [r7, #16]
 800c660:	693b      	ldr	r3, [r7, #16]
 800c662:	61fb      	str	r3, [r7, #28]
 800c664:	2308      	movs	r3, #8
 800c666:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c668:	69fb      	ldr	r3, [r7, #28]
 800c66a:	1c5a      	adds	r2, r3, #1
 800c66c:	61fa      	str	r2, [r7, #28]
 800c66e:	68fa      	ldr	r2, [r7, #12]
 800c670:	4413      	add	r3, r2
 800c672:	781b      	ldrb	r3, [r3, #0]
 800c674:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c676:	7efb      	ldrb	r3, [r7, #27]
 800c678:	2b20      	cmp	r3, #32
 800c67a:	d94e      	bls.n	800c71a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c67c:	7efb      	ldrb	r3, [r7, #27]
 800c67e:	2b2f      	cmp	r3, #47	; 0x2f
 800c680:	d006      	beq.n	800c690 <create_name+0x54>
 800c682:	7efb      	ldrb	r3, [r7, #27]
 800c684:	2b5c      	cmp	r3, #92	; 0x5c
 800c686:	d110      	bne.n	800c6aa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c688:	e002      	b.n	800c690 <create_name+0x54>
 800c68a:	69fb      	ldr	r3, [r7, #28]
 800c68c:	3301      	adds	r3, #1
 800c68e:	61fb      	str	r3, [r7, #28]
 800c690:	68fa      	ldr	r2, [r7, #12]
 800c692:	69fb      	ldr	r3, [r7, #28]
 800c694:	4413      	add	r3, r2
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	2b2f      	cmp	r3, #47	; 0x2f
 800c69a:	d0f6      	beq.n	800c68a <create_name+0x4e>
 800c69c:	68fa      	ldr	r2, [r7, #12]
 800c69e:	69fb      	ldr	r3, [r7, #28]
 800c6a0:	4413      	add	r3, r2
 800c6a2:	781b      	ldrb	r3, [r3, #0]
 800c6a4:	2b5c      	cmp	r3, #92	; 0x5c
 800c6a6:	d0f0      	beq.n	800c68a <create_name+0x4e>
			break;
 800c6a8:	e038      	b.n	800c71c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c6aa:	7efb      	ldrb	r3, [r7, #27]
 800c6ac:	2b2e      	cmp	r3, #46	; 0x2e
 800c6ae:	d003      	beq.n	800c6b8 <create_name+0x7c>
 800c6b0:	693a      	ldr	r2, [r7, #16]
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d30c      	bcc.n	800c6d2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	2b0b      	cmp	r3, #11
 800c6bc:	d002      	beq.n	800c6c4 <create_name+0x88>
 800c6be:	7efb      	ldrb	r3, [r7, #27]
 800c6c0:	2b2e      	cmp	r3, #46	; 0x2e
 800c6c2:	d001      	beq.n	800c6c8 <create_name+0x8c>
 800c6c4:	2306      	movs	r3, #6
 800c6c6:	e044      	b.n	800c752 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c6c8:	2308      	movs	r3, #8
 800c6ca:	613b      	str	r3, [r7, #16]
 800c6cc:	230b      	movs	r3, #11
 800c6ce:	617b      	str	r3, [r7, #20]
			continue;
 800c6d0:	e022      	b.n	800c718 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c6d2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	da04      	bge.n	800c6e4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c6da:	7efb      	ldrb	r3, [r7, #27]
 800c6dc:	3b80      	subs	r3, #128	; 0x80
 800c6de:	4a1f      	ldr	r2, [pc, #124]	; (800c75c <create_name+0x120>)
 800c6e0:	5cd3      	ldrb	r3, [r2, r3]
 800c6e2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c6e4:	7efb      	ldrb	r3, [r7, #27]
 800c6e6:	4619      	mov	r1, r3
 800c6e8:	481d      	ldr	r0, [pc, #116]	; (800c760 <create_name+0x124>)
 800c6ea:	f7ff f80e 	bl	800b70a <chk_chr>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d001      	beq.n	800c6f8 <create_name+0xbc>
 800c6f4:	2306      	movs	r3, #6
 800c6f6:	e02c      	b.n	800c752 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c6f8:	7efb      	ldrb	r3, [r7, #27]
 800c6fa:	2b60      	cmp	r3, #96	; 0x60
 800c6fc:	d905      	bls.n	800c70a <create_name+0xce>
 800c6fe:	7efb      	ldrb	r3, [r7, #27]
 800c700:	2b7a      	cmp	r3, #122	; 0x7a
 800c702:	d802      	bhi.n	800c70a <create_name+0xce>
 800c704:	7efb      	ldrb	r3, [r7, #27]
 800c706:	3b20      	subs	r3, #32
 800c708:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	1c5a      	adds	r2, r3, #1
 800c70e:	613a      	str	r2, [r7, #16]
 800c710:	68ba      	ldr	r2, [r7, #8]
 800c712:	4413      	add	r3, r2
 800c714:	7efa      	ldrb	r2, [r7, #27]
 800c716:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c718:	e7a6      	b.n	800c668 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c71a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c71c:	68fa      	ldr	r2, [r7, #12]
 800c71e:	69fb      	ldr	r3, [r7, #28]
 800c720:	441a      	add	r2, r3
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c726:	693b      	ldr	r3, [r7, #16]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d101      	bne.n	800c730 <create_name+0xf4>
 800c72c:	2306      	movs	r3, #6
 800c72e:	e010      	b.n	800c752 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	781b      	ldrb	r3, [r3, #0]
 800c734:	2be5      	cmp	r3, #229	; 0xe5
 800c736:	d102      	bne.n	800c73e <create_name+0x102>
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	2205      	movs	r2, #5
 800c73c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c73e:	7efb      	ldrb	r3, [r7, #27]
 800c740:	2b20      	cmp	r3, #32
 800c742:	d801      	bhi.n	800c748 <create_name+0x10c>
 800c744:	2204      	movs	r2, #4
 800c746:	e000      	b.n	800c74a <create_name+0x10e>
 800c748:	2200      	movs	r2, #0
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	330b      	adds	r3, #11
 800c74e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c750:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c752:	4618      	mov	r0, r3
 800c754:	3720      	adds	r7, #32
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}
 800c75a:	bf00      	nop
 800c75c:	08011544 	.word	0x08011544
 800c760:	0800f9fc 	.word	0x0800f9fc

0800c764 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b086      	sub	sp, #24
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
 800c76c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c778:	e002      	b.n	800c780 <follow_path+0x1c>
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	3301      	adds	r3, #1
 800c77e:	603b      	str	r3, [r7, #0]
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	781b      	ldrb	r3, [r3, #0]
 800c784:	2b2f      	cmp	r3, #47	; 0x2f
 800c786:	d0f8      	beq.n	800c77a <follow_path+0x16>
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	781b      	ldrb	r3, [r3, #0]
 800c78c:	2b5c      	cmp	r3, #92	; 0x5c
 800c78e:	d0f4      	beq.n	800c77a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c790:	693b      	ldr	r3, [r7, #16]
 800c792:	2200      	movs	r2, #0
 800c794:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	781b      	ldrb	r3, [r3, #0]
 800c79a:	2b1f      	cmp	r3, #31
 800c79c:	d80a      	bhi.n	800c7b4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2280      	movs	r2, #128	; 0x80
 800c7a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c7a6:	2100      	movs	r1, #0
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f7ff fcf9 	bl	800c1a0 <dir_sdi>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	75fb      	strb	r3, [r7, #23]
 800c7b2:	e043      	b.n	800c83c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c7b4:	463b      	mov	r3, r7
 800c7b6:	4619      	mov	r1, r3
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f7ff ff3f 	bl	800c63c <create_name>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c7c2:	7dfb      	ldrb	r3, [r7, #23]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d134      	bne.n	800c832 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f7ff feaf 	bl	800c52c <dir_find>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c7d8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c7da:	7dfb      	ldrb	r3, [r7, #23]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d00a      	beq.n	800c7f6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c7e0:	7dfb      	ldrb	r3, [r7, #23]
 800c7e2:	2b04      	cmp	r3, #4
 800c7e4:	d127      	bne.n	800c836 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c7e6:	7afb      	ldrb	r3, [r7, #11]
 800c7e8:	f003 0304 	and.w	r3, r3, #4
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d122      	bne.n	800c836 <follow_path+0xd2>
 800c7f0:	2305      	movs	r3, #5
 800c7f2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c7f4:	e01f      	b.n	800c836 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c7f6:	7afb      	ldrb	r3, [r7, #11]
 800c7f8:	f003 0304 	and.w	r3, r3, #4
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d11c      	bne.n	800c83a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c800:	693b      	ldr	r3, [r7, #16]
 800c802:	799b      	ldrb	r3, [r3, #6]
 800c804:	f003 0310 	and.w	r3, r3, #16
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d102      	bne.n	800c812 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c80c:	2305      	movs	r3, #5
 800c80e:	75fb      	strb	r3, [r7, #23]
 800c810:	e014      	b.n	800c83c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	695b      	ldr	r3, [r3, #20]
 800c81c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c820:	4413      	add	r3, r2
 800c822:	4619      	mov	r1, r3
 800c824:	68f8      	ldr	r0, [r7, #12]
 800c826:	f7ff fe42 	bl	800c4ae <ld_clust>
 800c82a:	4602      	mov	r2, r0
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c830:	e7c0      	b.n	800c7b4 <follow_path+0x50>
			if (res != FR_OK) break;
 800c832:	bf00      	nop
 800c834:	e002      	b.n	800c83c <follow_path+0xd8>
				break;
 800c836:	bf00      	nop
 800c838:	e000      	b.n	800c83c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c83a:	bf00      	nop
			}
		}
	}

	return res;
 800c83c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3718      	adds	r7, #24
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}

0800c846 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c846:	b480      	push	{r7}
 800c848:	b087      	sub	sp, #28
 800c84a:	af00      	add	r7, sp, #0
 800c84c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c84e:	f04f 33ff 	mov.w	r3, #4294967295
 800c852:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d031      	beq.n	800c8c0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	617b      	str	r3, [r7, #20]
 800c862:	e002      	b.n	800c86a <get_ldnumber+0x24>
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	3301      	adds	r3, #1
 800c868:	617b      	str	r3, [r7, #20]
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	781b      	ldrb	r3, [r3, #0]
 800c86e:	2b20      	cmp	r3, #32
 800c870:	d903      	bls.n	800c87a <get_ldnumber+0x34>
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	781b      	ldrb	r3, [r3, #0]
 800c876:	2b3a      	cmp	r3, #58	; 0x3a
 800c878:	d1f4      	bne.n	800c864 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	781b      	ldrb	r3, [r3, #0]
 800c87e:	2b3a      	cmp	r3, #58	; 0x3a
 800c880:	d11c      	bne.n	800c8bc <get_ldnumber+0x76>
			tp = *path;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	1c5a      	adds	r2, r3, #1
 800c88c:	60fa      	str	r2, [r7, #12]
 800c88e:	781b      	ldrb	r3, [r3, #0]
 800c890:	3b30      	subs	r3, #48	; 0x30
 800c892:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	2b09      	cmp	r3, #9
 800c898:	d80e      	bhi.n	800c8b8 <get_ldnumber+0x72>
 800c89a:	68fa      	ldr	r2, [r7, #12]
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	d10a      	bne.n	800c8b8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d107      	bne.n	800c8b8 <get_ldnumber+0x72>
					vol = (int)i;
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	617b      	str	r3, [r7, #20]
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	697a      	ldr	r2, [r7, #20]
 800c8b6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	e002      	b.n	800c8c2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c8bc:	2300      	movs	r3, #0
 800c8be:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c8c0:	693b      	ldr	r3, [r7, #16]
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	371c      	adds	r7, #28
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8cc:	4770      	bx	lr
	...

0800c8d0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b082      	sub	sp, #8
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
 800c8d8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2200      	movs	r2, #0
 800c8de:	70da      	strb	r2, [r3, #3]
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f04f 32ff 	mov.w	r2, #4294967295
 800c8e6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c8e8:	6839      	ldr	r1, [r7, #0]
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f7ff f8d8 	bl	800baa0 <move_window>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d001      	beq.n	800c8fa <check_fs+0x2a>
 800c8f6:	2304      	movs	r3, #4
 800c8f8:	e038      	b.n	800c96c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	3330      	adds	r3, #48	; 0x30
 800c8fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c902:	4618      	mov	r0, r3
 800c904:	f7fe fe1c 	bl	800b540 <ld_word>
 800c908:	4603      	mov	r3, r0
 800c90a:	461a      	mov	r2, r3
 800c90c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c910:	429a      	cmp	r2, r3
 800c912:	d001      	beq.n	800c918 <check_fs+0x48>
 800c914:	2303      	movs	r3, #3
 800c916:	e029      	b.n	800c96c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c91e:	2be9      	cmp	r3, #233	; 0xe9
 800c920:	d009      	beq.n	800c936 <check_fs+0x66>
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c928:	2beb      	cmp	r3, #235	; 0xeb
 800c92a:	d11e      	bne.n	800c96a <check_fs+0x9a>
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c932:	2b90      	cmp	r3, #144	; 0x90
 800c934:	d119      	bne.n	800c96a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	3330      	adds	r3, #48	; 0x30
 800c93a:	3336      	adds	r3, #54	; 0x36
 800c93c:	4618      	mov	r0, r3
 800c93e:	f7fe fe17 	bl	800b570 <ld_dword>
 800c942:	4603      	mov	r3, r0
 800c944:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c948:	4a0a      	ldr	r2, [pc, #40]	; (800c974 <check_fs+0xa4>)
 800c94a:	4293      	cmp	r3, r2
 800c94c:	d101      	bne.n	800c952 <check_fs+0x82>
 800c94e:	2300      	movs	r3, #0
 800c950:	e00c      	b.n	800c96c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	3330      	adds	r3, #48	; 0x30
 800c956:	3352      	adds	r3, #82	; 0x52
 800c958:	4618      	mov	r0, r3
 800c95a:	f7fe fe09 	bl	800b570 <ld_dword>
 800c95e:	4603      	mov	r3, r0
 800c960:	4a05      	ldr	r2, [pc, #20]	; (800c978 <check_fs+0xa8>)
 800c962:	4293      	cmp	r3, r2
 800c964:	d101      	bne.n	800c96a <check_fs+0x9a>
 800c966:	2300      	movs	r3, #0
 800c968:	e000      	b.n	800c96c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c96a:	2302      	movs	r3, #2
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	3708      	adds	r7, #8
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}
 800c974:	00544146 	.word	0x00544146
 800c978:	33544146 	.word	0x33544146

0800c97c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b096      	sub	sp, #88	; 0x58
 800c980:	af00      	add	r7, sp, #0
 800c982:	60f8      	str	r0, [r7, #12]
 800c984:	60b9      	str	r1, [r7, #8]
 800c986:	4613      	mov	r3, r2
 800c988:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	2200      	movs	r2, #0
 800c98e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c990:	68f8      	ldr	r0, [r7, #12]
 800c992:	f7ff ff58 	bl	800c846 <get_ldnumber>
 800c996:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	da01      	bge.n	800c9a2 <find_volume+0x26>
 800c99e:	230b      	movs	r3, #11
 800c9a0:	e22d      	b.n	800cdfe <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c9a2:	4aa1      	ldr	r2, [pc, #644]	; (800cc28 <find_volume+0x2ac>)
 800c9a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9aa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d101      	bne.n	800c9b6 <find_volume+0x3a>
 800c9b2:	230c      	movs	r3, #12
 800c9b4:	e223      	b.n	800cdfe <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c9ba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c9bc:	79fb      	ldrb	r3, [r7, #7]
 800c9be:	f023 0301 	bic.w	r3, r3, #1
 800c9c2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c6:	781b      	ldrb	r3, [r3, #0]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d01a      	beq.n	800ca02 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ce:	785b      	ldrb	r3, [r3, #1]
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f7fe fd17 	bl	800b404 <disk_status>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c9dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c9e0:	f003 0301 	and.w	r3, r3, #1
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d10c      	bne.n	800ca02 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c9e8:	79fb      	ldrb	r3, [r7, #7]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d007      	beq.n	800c9fe <find_volume+0x82>
 800c9ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c9f2:	f003 0304 	and.w	r3, r3, #4
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d001      	beq.n	800c9fe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c9fa:	230a      	movs	r3, #10
 800c9fc:	e1ff      	b.n	800cdfe <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800c9fe:	2300      	movs	r3, #0
 800ca00:	e1fd      	b.n	800cdfe <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ca02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca04:	2200      	movs	r2, #0
 800ca06:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ca08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca0a:	b2da      	uxtb	r2, r3
 800ca0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca0e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ca10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca12:	785b      	ldrb	r3, [r3, #1]
 800ca14:	4618      	mov	r0, r3
 800ca16:	f7fe fd0f 	bl	800b438 <disk_initialize>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ca20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ca24:	f003 0301 	and.w	r3, r3, #1
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d001      	beq.n	800ca30 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ca2c:	2303      	movs	r3, #3
 800ca2e:	e1e6      	b.n	800cdfe <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ca30:	79fb      	ldrb	r3, [r7, #7]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d007      	beq.n	800ca46 <find_volume+0xca>
 800ca36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ca3a:	f003 0304 	and.w	r3, r3, #4
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d001      	beq.n	800ca46 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ca42:	230a      	movs	r3, #10
 800ca44:	e1db      	b.n	800cdfe <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ca46:	2300      	movs	r3, #0
 800ca48:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ca4a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ca4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ca4e:	f7ff ff3f 	bl	800c8d0 <check_fs>
 800ca52:	4603      	mov	r3, r0
 800ca54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ca58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ca5c:	2b02      	cmp	r3, #2
 800ca5e:	d149      	bne.n	800caf4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ca60:	2300      	movs	r3, #0
 800ca62:	643b      	str	r3, [r7, #64]	; 0x40
 800ca64:	e01e      	b.n	800caa4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ca66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca68:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ca6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca6e:	011b      	lsls	r3, r3, #4
 800ca70:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ca74:	4413      	add	r3, r2
 800ca76:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ca78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca7a:	3304      	adds	r3, #4
 800ca7c:	781b      	ldrb	r3, [r3, #0]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d006      	beq.n	800ca90 <find_volume+0x114>
 800ca82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca84:	3308      	adds	r3, #8
 800ca86:	4618      	mov	r0, r3
 800ca88:	f7fe fd72 	bl	800b570 <ld_dword>
 800ca8c:	4602      	mov	r2, r0
 800ca8e:	e000      	b.n	800ca92 <find_volume+0x116>
 800ca90:	2200      	movs	r2, #0
 800ca92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca94:	009b      	lsls	r3, r3, #2
 800ca96:	3358      	adds	r3, #88	; 0x58
 800ca98:	443b      	add	r3, r7
 800ca9a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ca9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800caa0:	3301      	adds	r3, #1
 800caa2:	643b      	str	r3, [r7, #64]	; 0x40
 800caa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800caa6:	2b03      	cmp	r3, #3
 800caa8:	d9dd      	bls.n	800ca66 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800caaa:	2300      	movs	r3, #0
 800caac:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800caae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d002      	beq.n	800caba <find_volume+0x13e>
 800cab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cab6:	3b01      	subs	r3, #1
 800cab8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800caba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cabc:	009b      	lsls	r3, r3, #2
 800cabe:	3358      	adds	r3, #88	; 0x58
 800cac0:	443b      	add	r3, r7
 800cac2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cac6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d005      	beq.n	800cada <find_volume+0x15e>
 800cace:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cad0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cad2:	f7ff fefd 	bl	800c8d0 <check_fs>
 800cad6:	4603      	mov	r3, r0
 800cad8:	e000      	b.n	800cadc <find_volume+0x160>
 800cada:	2303      	movs	r3, #3
 800cadc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cae0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cae4:	2b01      	cmp	r3, #1
 800cae6:	d905      	bls.n	800caf4 <find_volume+0x178>
 800cae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800caea:	3301      	adds	r3, #1
 800caec:	643b      	str	r3, [r7, #64]	; 0x40
 800caee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800caf0:	2b03      	cmp	r3, #3
 800caf2:	d9e2      	bls.n	800caba <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800caf4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800caf8:	2b04      	cmp	r3, #4
 800cafa:	d101      	bne.n	800cb00 <find_volume+0x184>
 800cafc:	2301      	movs	r3, #1
 800cafe:	e17e      	b.n	800cdfe <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cb00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb04:	2b01      	cmp	r3, #1
 800cb06:	d901      	bls.n	800cb0c <find_volume+0x190>
 800cb08:	230d      	movs	r3, #13
 800cb0a:	e178      	b.n	800cdfe <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cb0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb0e:	3330      	adds	r3, #48	; 0x30
 800cb10:	330b      	adds	r3, #11
 800cb12:	4618      	mov	r0, r3
 800cb14:	f7fe fd14 	bl	800b540 <ld_word>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb1e:	d001      	beq.n	800cb24 <find_volume+0x1a8>
 800cb20:	230d      	movs	r3, #13
 800cb22:	e16c      	b.n	800cdfe <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cb24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb26:	3330      	adds	r3, #48	; 0x30
 800cb28:	3316      	adds	r3, #22
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f7fe fd08 	bl	800b540 <ld_word>
 800cb30:	4603      	mov	r3, r0
 800cb32:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cb34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d106      	bne.n	800cb48 <find_volume+0x1cc>
 800cb3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb3c:	3330      	adds	r3, #48	; 0x30
 800cb3e:	3324      	adds	r3, #36	; 0x24
 800cb40:	4618      	mov	r0, r3
 800cb42:	f7fe fd15 	bl	800b570 <ld_dword>
 800cb46:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800cb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb4c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cb4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb50:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800cb54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb56:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cb58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb5a:	789b      	ldrb	r3, [r3, #2]
 800cb5c:	2b01      	cmp	r3, #1
 800cb5e:	d005      	beq.n	800cb6c <find_volume+0x1f0>
 800cb60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb62:	789b      	ldrb	r3, [r3, #2]
 800cb64:	2b02      	cmp	r3, #2
 800cb66:	d001      	beq.n	800cb6c <find_volume+0x1f0>
 800cb68:	230d      	movs	r3, #13
 800cb6a:	e148      	b.n	800cdfe <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cb6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb6e:	789b      	ldrb	r3, [r3, #2]
 800cb70:	461a      	mov	r2, r3
 800cb72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb74:	fb02 f303 	mul.w	r3, r2, r3
 800cb78:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cb7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb80:	b29a      	uxth	r2, r3
 800cb82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb84:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cb86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb88:	895b      	ldrh	r3, [r3, #10]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d008      	beq.n	800cba0 <find_volume+0x224>
 800cb8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb90:	895b      	ldrh	r3, [r3, #10]
 800cb92:	461a      	mov	r2, r3
 800cb94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb96:	895b      	ldrh	r3, [r3, #10]
 800cb98:	3b01      	subs	r3, #1
 800cb9a:	4013      	ands	r3, r2
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d001      	beq.n	800cba4 <find_volume+0x228>
 800cba0:	230d      	movs	r3, #13
 800cba2:	e12c      	b.n	800cdfe <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba6:	3330      	adds	r3, #48	; 0x30
 800cba8:	3311      	adds	r3, #17
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f7fe fcc8 	bl	800b540 <ld_word>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	461a      	mov	r2, r3
 800cbb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cbb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbba:	891b      	ldrh	r3, [r3, #8]
 800cbbc:	f003 030f 	and.w	r3, r3, #15
 800cbc0:	b29b      	uxth	r3, r3
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d001      	beq.n	800cbca <find_volume+0x24e>
 800cbc6:	230d      	movs	r3, #13
 800cbc8:	e119      	b.n	800cdfe <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cbca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbcc:	3330      	adds	r3, #48	; 0x30
 800cbce:	3313      	adds	r3, #19
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f7fe fcb5 	bl	800b540 <ld_word>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cbda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d106      	bne.n	800cbee <find_volume+0x272>
 800cbe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe2:	3330      	adds	r3, #48	; 0x30
 800cbe4:	3320      	adds	r3, #32
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f7fe fcc2 	bl	800b570 <ld_dword>
 800cbec:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf0:	3330      	adds	r3, #48	; 0x30
 800cbf2:	330e      	adds	r3, #14
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f7fe fca3 	bl	800b540 <ld_word>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cbfe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d101      	bne.n	800cc08 <find_volume+0x28c>
 800cc04:	230d      	movs	r3, #13
 800cc06:	e0fa      	b.n	800cdfe <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cc08:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cc0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc0c:	4413      	add	r3, r2
 800cc0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc10:	8912      	ldrh	r2, [r2, #8]
 800cc12:	0912      	lsrs	r2, r2, #4
 800cc14:	b292      	uxth	r2, r2
 800cc16:	4413      	add	r3, r2
 800cc18:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cc1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	d204      	bcs.n	800cc2c <find_volume+0x2b0>
 800cc22:	230d      	movs	r3, #13
 800cc24:	e0eb      	b.n	800cdfe <find_volume+0x482>
 800cc26:	bf00      	nop
 800cc28:	200008a4 	.word	0x200008a4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cc2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc30:	1ad3      	subs	r3, r2, r3
 800cc32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc34:	8952      	ldrh	r2, [r2, #10]
 800cc36:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc3a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d101      	bne.n	800cc46 <find_volume+0x2ca>
 800cc42:	230d      	movs	r3, #13
 800cc44:	e0db      	b.n	800cdfe <find_volume+0x482>
		fmt = FS_FAT32;
 800cc46:	2303      	movs	r3, #3
 800cc48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc4e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800cc52:	4293      	cmp	r3, r2
 800cc54:	d802      	bhi.n	800cc5c <find_volume+0x2e0>
 800cc56:	2302      	movs	r3, #2
 800cc58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc5e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d802      	bhi.n	800cc6c <find_volume+0x2f0>
 800cc66:	2301      	movs	r3, #1
 800cc68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc6e:	1c9a      	adds	r2, r3, #2
 800cc70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc72:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800cc74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cc78:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cc7a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cc7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc7e:	441a      	add	r2, r3
 800cc80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc82:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800cc84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cc86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc88:	441a      	add	r2, r3
 800cc8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc8c:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800cc8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cc92:	2b03      	cmp	r3, #3
 800cc94:	d11e      	bne.n	800ccd4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cc96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc98:	3330      	adds	r3, #48	; 0x30
 800cc9a:	332a      	adds	r3, #42	; 0x2a
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f7fe fc4f 	bl	800b540 <ld_word>
 800cca2:	4603      	mov	r3, r0
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d001      	beq.n	800ccac <find_volume+0x330>
 800cca8:	230d      	movs	r3, #13
 800ccaa:	e0a8      	b.n	800cdfe <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ccac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccae:	891b      	ldrh	r3, [r3, #8]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d001      	beq.n	800ccb8 <find_volume+0x33c>
 800ccb4:	230d      	movs	r3, #13
 800ccb6:	e0a2      	b.n	800cdfe <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ccb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccba:	3330      	adds	r3, #48	; 0x30
 800ccbc:	332c      	adds	r3, #44	; 0x2c
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	f7fe fc56 	bl	800b570 <ld_dword>
 800ccc4:	4602      	mov	r2, r0
 800ccc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccc8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ccca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cccc:	695b      	ldr	r3, [r3, #20]
 800ccce:	009b      	lsls	r3, r3, #2
 800ccd0:	647b      	str	r3, [r7, #68]	; 0x44
 800ccd2:	e01f      	b.n	800cd14 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ccd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccd6:	891b      	ldrh	r3, [r3, #8]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d101      	bne.n	800cce0 <find_volume+0x364>
 800ccdc:	230d      	movs	r3, #13
 800ccde:	e08e      	b.n	800cdfe <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cce2:	6a1a      	ldr	r2, [r3, #32]
 800cce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cce6:	441a      	add	r2, r3
 800cce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccea:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ccec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ccf0:	2b02      	cmp	r3, #2
 800ccf2:	d103      	bne.n	800ccfc <find_volume+0x380>
 800ccf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf6:	695b      	ldr	r3, [r3, #20]
 800ccf8:	005b      	lsls	r3, r3, #1
 800ccfa:	e00a      	b.n	800cd12 <find_volume+0x396>
 800ccfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccfe:	695a      	ldr	r2, [r3, #20]
 800cd00:	4613      	mov	r3, r2
 800cd02:	005b      	lsls	r3, r3, #1
 800cd04:	4413      	add	r3, r2
 800cd06:	085a      	lsrs	r2, r3, #1
 800cd08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd0a:	695b      	ldr	r3, [r3, #20]
 800cd0c:	f003 0301 	and.w	r3, r3, #1
 800cd10:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cd12:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cd14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd16:	699a      	ldr	r2, [r3, #24]
 800cd18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd1a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cd1e:	0a5b      	lsrs	r3, r3, #9
 800cd20:	429a      	cmp	r2, r3
 800cd22:	d201      	bcs.n	800cd28 <find_volume+0x3ac>
 800cd24:	230d      	movs	r3, #13
 800cd26:	e06a      	b.n	800cdfe <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cd28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd2a:	f04f 32ff 	mov.w	r2, #4294967295
 800cd2e:	611a      	str	r2, [r3, #16]
 800cd30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd32:	691a      	ldr	r2, [r3, #16]
 800cd34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd36:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800cd38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd3a:	2280      	movs	r2, #128	; 0x80
 800cd3c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cd3e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cd42:	2b03      	cmp	r3, #3
 800cd44:	d149      	bne.n	800cdda <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cd46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd48:	3330      	adds	r3, #48	; 0x30
 800cd4a:	3330      	adds	r3, #48	; 0x30
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f7fe fbf7 	bl	800b540 <ld_word>
 800cd52:	4603      	mov	r3, r0
 800cd54:	2b01      	cmp	r3, #1
 800cd56:	d140      	bne.n	800cdda <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cd58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd5a:	3301      	adds	r3, #1
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cd60:	f7fe fe9e 	bl	800baa0 <move_window>
 800cd64:	4603      	mov	r3, r0
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d137      	bne.n	800cdda <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800cd6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cd70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd72:	3330      	adds	r3, #48	; 0x30
 800cd74:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f7fe fbe1 	bl	800b540 <ld_word>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	461a      	mov	r2, r3
 800cd82:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cd86:	429a      	cmp	r2, r3
 800cd88:	d127      	bne.n	800cdda <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cd8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd8c:	3330      	adds	r3, #48	; 0x30
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f7fe fbee 	bl	800b570 <ld_dword>
 800cd94:	4603      	mov	r3, r0
 800cd96:	4a1c      	ldr	r2, [pc, #112]	; (800ce08 <find_volume+0x48c>)
 800cd98:	4293      	cmp	r3, r2
 800cd9a:	d11e      	bne.n	800cdda <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cd9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd9e:	3330      	adds	r3, #48	; 0x30
 800cda0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cda4:	4618      	mov	r0, r3
 800cda6:	f7fe fbe3 	bl	800b570 <ld_dword>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	4a17      	ldr	r2, [pc, #92]	; (800ce0c <find_volume+0x490>)
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	d113      	bne.n	800cdda <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cdb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb4:	3330      	adds	r3, #48	; 0x30
 800cdb6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f7fe fbd8 	bl	800b570 <ld_dword>
 800cdc0:	4602      	mov	r2, r0
 800cdc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cdc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc8:	3330      	adds	r3, #48	; 0x30
 800cdca:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f7fe fbce 	bl	800b570 <ld_dword>
 800cdd4:	4602      	mov	r2, r0
 800cdd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdd8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cdda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cddc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800cde0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cde2:	4b0b      	ldr	r3, [pc, #44]	; (800ce10 <find_volume+0x494>)
 800cde4:	881b      	ldrh	r3, [r3, #0]
 800cde6:	3301      	adds	r3, #1
 800cde8:	b29a      	uxth	r2, r3
 800cdea:	4b09      	ldr	r3, [pc, #36]	; (800ce10 <find_volume+0x494>)
 800cdec:	801a      	strh	r2, [r3, #0]
 800cdee:	4b08      	ldr	r3, [pc, #32]	; (800ce10 <find_volume+0x494>)
 800cdf0:	881a      	ldrh	r2, [r3, #0]
 800cdf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cdf6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cdf8:	f7fe fdea 	bl	800b9d0 <clear_lock>
#endif
	return FR_OK;
 800cdfc:	2300      	movs	r3, #0
}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	3758      	adds	r7, #88	; 0x58
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}
 800ce06:	bf00      	nop
 800ce08:	41615252 	.word	0x41615252
 800ce0c:	61417272 	.word	0x61417272
 800ce10:	200008a8 	.word	0x200008a8

0800ce14 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b084      	sub	sp, #16
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ce1e:	2309      	movs	r3, #9
 800ce20:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d01c      	beq.n	800ce62 <validate+0x4e>
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d018      	beq.n	800ce62 <validate+0x4e>
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	781b      	ldrb	r3, [r3, #0]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d013      	beq.n	800ce62 <validate+0x4e>
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	889a      	ldrh	r2, [r3, #4]
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	88db      	ldrh	r3, [r3, #6]
 800ce44:	429a      	cmp	r2, r3
 800ce46:	d10c      	bne.n	800ce62 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	785b      	ldrb	r3, [r3, #1]
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f7fe fad8 	bl	800b404 <disk_status>
 800ce54:	4603      	mov	r3, r0
 800ce56:	f003 0301 	and.w	r3, r3, #1
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d101      	bne.n	800ce62 <validate+0x4e>
			res = FR_OK;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ce62:	7bfb      	ldrb	r3, [r7, #15]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d102      	bne.n	800ce6e <validate+0x5a>
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	e000      	b.n	800ce70 <validate+0x5c>
 800ce6e:	2300      	movs	r3, #0
 800ce70:	683a      	ldr	r2, [r7, #0]
 800ce72:	6013      	str	r3, [r2, #0]
	return res;
 800ce74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3710      	adds	r7, #16
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}
	...

0800ce80 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b088      	sub	sp, #32
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	60f8      	str	r0, [r7, #12]
 800ce88:	60b9      	str	r1, [r7, #8]
 800ce8a:	4613      	mov	r3, r2
 800ce8c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ce8e:	68bb      	ldr	r3, [r7, #8]
 800ce90:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ce92:	f107 0310 	add.w	r3, r7, #16
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7ff fcd5 	bl	800c846 <get_ldnumber>
 800ce9c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ce9e:	69fb      	ldr	r3, [r7, #28]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	da01      	bge.n	800cea8 <f_mount+0x28>
 800cea4:	230b      	movs	r3, #11
 800cea6:	e02b      	b.n	800cf00 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cea8:	4a17      	ldr	r2, [pc, #92]	; (800cf08 <f_mount+0x88>)
 800ceaa:	69fb      	ldr	r3, [r7, #28]
 800ceac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ceb0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ceb2:	69bb      	ldr	r3, [r7, #24]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d005      	beq.n	800cec4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ceb8:	69b8      	ldr	r0, [r7, #24]
 800ceba:	f7fe fd89 	bl	800b9d0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cebe:	69bb      	ldr	r3, [r7, #24]
 800cec0:	2200      	movs	r2, #0
 800cec2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d002      	beq.n	800ced0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	2200      	movs	r2, #0
 800cece:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ced0:	68fa      	ldr	r2, [r7, #12]
 800ced2:	490d      	ldr	r1, [pc, #52]	; (800cf08 <f_mount+0x88>)
 800ced4:	69fb      	ldr	r3, [r7, #28]
 800ced6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d002      	beq.n	800cee6 <f_mount+0x66>
 800cee0:	79fb      	ldrb	r3, [r7, #7]
 800cee2:	2b01      	cmp	r3, #1
 800cee4:	d001      	beq.n	800ceea <f_mount+0x6a>
 800cee6:	2300      	movs	r3, #0
 800cee8:	e00a      	b.n	800cf00 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ceea:	f107 010c 	add.w	r1, r7, #12
 800ceee:	f107 0308 	add.w	r3, r7, #8
 800cef2:	2200      	movs	r2, #0
 800cef4:	4618      	mov	r0, r3
 800cef6:	f7ff fd41 	bl	800c97c <find_volume>
 800cefa:	4603      	mov	r3, r0
 800cefc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cefe:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf00:	4618      	mov	r0, r3
 800cf02:	3720      	adds	r7, #32
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}
 800cf08:	200008a4 	.word	0x200008a4

0800cf0c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b098      	sub	sp, #96	; 0x60
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	60f8      	str	r0, [r7, #12]
 800cf14:	60b9      	str	r1, [r7, #8]
 800cf16:	4613      	mov	r3, r2
 800cf18:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d101      	bne.n	800cf24 <f_open+0x18>
 800cf20:	2309      	movs	r3, #9
 800cf22:	e1ad      	b.n	800d280 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cf24:	79fb      	ldrb	r3, [r7, #7]
 800cf26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf2a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cf2c:	79fa      	ldrb	r2, [r7, #7]
 800cf2e:	f107 0110 	add.w	r1, r7, #16
 800cf32:	f107 0308 	add.w	r3, r7, #8
 800cf36:	4618      	mov	r0, r3
 800cf38:	f7ff fd20 	bl	800c97c <find_volume>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800cf42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	f040 8191 	bne.w	800d26e <f_open+0x362>
		dj.obj.fs = fs;
 800cf4c:	693b      	ldr	r3, [r7, #16]
 800cf4e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cf50:	68ba      	ldr	r2, [r7, #8]
 800cf52:	f107 0314 	add.w	r3, r7, #20
 800cf56:	4611      	mov	r1, r2
 800cf58:	4618      	mov	r0, r3
 800cf5a:	f7ff fc03 	bl	800c764 <follow_path>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cf64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d11a      	bne.n	800cfa2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cf6c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cf70:	b25b      	sxtb	r3, r3
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	da03      	bge.n	800cf7e <f_open+0x72>
				res = FR_INVALID_NAME;
 800cf76:	2306      	movs	r3, #6
 800cf78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800cf7c:	e011      	b.n	800cfa2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cf7e:	79fb      	ldrb	r3, [r7, #7]
 800cf80:	f023 0301 	bic.w	r3, r3, #1
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	bf14      	ite	ne
 800cf88:	2301      	movne	r3, #1
 800cf8a:	2300      	moveq	r3, #0
 800cf8c:	b2db      	uxtb	r3, r3
 800cf8e:	461a      	mov	r2, r3
 800cf90:	f107 0314 	add.w	r3, r7, #20
 800cf94:	4611      	mov	r1, r2
 800cf96:	4618      	mov	r0, r3
 800cf98:	f7fe fbd2 	bl	800b740 <chk_lock>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cfa2:	79fb      	ldrb	r3, [r7, #7]
 800cfa4:	f003 031c 	and.w	r3, r3, #28
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d07f      	beq.n	800d0ac <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800cfac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d017      	beq.n	800cfe4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cfb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cfb8:	2b04      	cmp	r3, #4
 800cfba:	d10e      	bne.n	800cfda <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cfbc:	f7fe fc1c 	bl	800b7f8 <enq_lock>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d006      	beq.n	800cfd4 <f_open+0xc8>
 800cfc6:	f107 0314 	add.w	r3, r7, #20
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f7ff fb03 	bl	800c5d6 <dir_register>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	e000      	b.n	800cfd6 <f_open+0xca>
 800cfd4:	2312      	movs	r3, #18
 800cfd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cfda:	79fb      	ldrb	r3, [r7, #7]
 800cfdc:	f043 0308 	orr.w	r3, r3, #8
 800cfe0:	71fb      	strb	r3, [r7, #7]
 800cfe2:	e010      	b.n	800d006 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cfe4:	7ebb      	ldrb	r3, [r7, #26]
 800cfe6:	f003 0311 	and.w	r3, r3, #17
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d003      	beq.n	800cff6 <f_open+0xea>
					res = FR_DENIED;
 800cfee:	2307      	movs	r3, #7
 800cff0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800cff4:	e007      	b.n	800d006 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800cff6:	79fb      	ldrb	r3, [r7, #7]
 800cff8:	f003 0304 	and.w	r3, r3, #4
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d002      	beq.n	800d006 <f_open+0xfa>
 800d000:	2308      	movs	r3, #8
 800d002:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d006:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d168      	bne.n	800d0e0 <f_open+0x1d4>
 800d00e:	79fb      	ldrb	r3, [r7, #7]
 800d010:	f003 0308 	and.w	r3, r3, #8
 800d014:	2b00      	cmp	r3, #0
 800d016:	d063      	beq.n	800d0e0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800d018:	f7fb ff88 	bl	8008f2c <get_fattime>
 800d01c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d01e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d020:	330e      	adds	r3, #14
 800d022:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d024:	4618      	mov	r0, r3
 800d026:	f7fe fae1 	bl	800b5ec <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d02a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d02c:	3316      	adds	r3, #22
 800d02e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d030:	4618      	mov	r0, r3
 800d032:	f7fe fadb 	bl	800b5ec <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d038:	330b      	adds	r3, #11
 800d03a:	2220      	movs	r2, #32
 800d03c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d03e:	693b      	ldr	r3, [r7, #16]
 800d040:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d042:	4611      	mov	r1, r2
 800d044:	4618      	mov	r0, r3
 800d046:	f7ff fa32 	bl	800c4ae <ld_clust>
 800d04a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d04c:	693b      	ldr	r3, [r7, #16]
 800d04e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d050:	2200      	movs	r2, #0
 800d052:	4618      	mov	r0, r3
 800d054:	f7ff fa4a 	bl	800c4ec <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d05a:	331c      	adds	r3, #28
 800d05c:	2100      	movs	r1, #0
 800d05e:	4618      	mov	r0, r3
 800d060:	f7fe fac4 	bl	800b5ec <st_dword>
					fs->wflag = 1;
 800d064:	693b      	ldr	r3, [r7, #16]
 800d066:	2201      	movs	r2, #1
 800d068:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d06a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d037      	beq.n	800d0e0 <f_open+0x1d4>
						dw = fs->winsect;
 800d070:	693b      	ldr	r3, [r7, #16]
 800d072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d074:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d076:	f107 0314 	add.w	r3, r7, #20
 800d07a:	2200      	movs	r2, #0
 800d07c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d07e:	4618      	mov	r0, r3
 800d080:	f7fe ff5d 	bl	800bf3e <remove_chain>
 800d084:	4603      	mov	r3, r0
 800d086:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800d08a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d126      	bne.n	800d0e0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800d092:	693b      	ldr	r3, [r7, #16]
 800d094:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d096:	4618      	mov	r0, r3
 800d098:	f7fe fd02 	bl	800baa0 <move_window>
 800d09c:	4603      	mov	r3, r0
 800d09e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d0a2:	693b      	ldr	r3, [r7, #16]
 800d0a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d0a6:	3a01      	subs	r2, #1
 800d0a8:	60da      	str	r2, [r3, #12]
 800d0aa:	e019      	b.n	800d0e0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d0ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d115      	bne.n	800d0e0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d0b4:	7ebb      	ldrb	r3, [r7, #26]
 800d0b6:	f003 0310 	and.w	r3, r3, #16
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d003      	beq.n	800d0c6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800d0be:	2304      	movs	r3, #4
 800d0c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d0c4:	e00c      	b.n	800d0e0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d0c6:	79fb      	ldrb	r3, [r7, #7]
 800d0c8:	f003 0302 	and.w	r3, r3, #2
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d007      	beq.n	800d0e0 <f_open+0x1d4>
 800d0d0:	7ebb      	ldrb	r3, [r7, #26]
 800d0d2:	f003 0301 	and.w	r3, r3, #1
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d002      	beq.n	800d0e0 <f_open+0x1d4>
						res = FR_DENIED;
 800d0da:	2307      	movs	r3, #7
 800d0dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d0e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d128      	bne.n	800d13a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d0e8:	79fb      	ldrb	r3, [r7, #7]
 800d0ea:	f003 0308 	and.w	r3, r3, #8
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d003      	beq.n	800d0fa <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d0f2:	79fb      	ldrb	r3, [r7, #7]
 800d0f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0f8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d0fa:	693b      	ldr	r3, [r7, #16]
 800d0fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d102:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d108:	79fb      	ldrb	r3, [r7, #7]
 800d10a:	f023 0301 	bic.w	r3, r3, #1
 800d10e:	2b00      	cmp	r3, #0
 800d110:	bf14      	ite	ne
 800d112:	2301      	movne	r3, #1
 800d114:	2300      	moveq	r3, #0
 800d116:	b2db      	uxtb	r3, r3
 800d118:	461a      	mov	r2, r3
 800d11a:	f107 0314 	add.w	r3, r7, #20
 800d11e:	4611      	mov	r1, r2
 800d120:	4618      	mov	r0, r3
 800d122:	f7fe fb8b 	bl	800b83c <inc_lock>
 800d126:	4602      	mov	r2, r0
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	691b      	ldr	r3, [r3, #16]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d102      	bne.n	800d13a <f_open+0x22e>
 800d134:	2302      	movs	r3, #2
 800d136:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d13a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d13e:	2b00      	cmp	r3, #0
 800d140:	f040 8095 	bne.w	800d26e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d148:	4611      	mov	r1, r2
 800d14a:	4618      	mov	r0, r3
 800d14c:	f7ff f9af 	bl	800c4ae <ld_clust>
 800d150:	4602      	mov	r2, r0
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d158:	331c      	adds	r3, #28
 800d15a:	4618      	mov	r0, r3
 800d15c:	f7fe fa08 	bl	800b570 <ld_dword>
 800d160:	4602      	mov	r2, r0
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	2200      	movs	r2, #0
 800d16a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d16c:	693a      	ldr	r2, [r7, #16]
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d172:	693b      	ldr	r3, [r7, #16]
 800d174:	88da      	ldrh	r2, [r3, #6]
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	79fa      	ldrb	r2, [r7, #7]
 800d17e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	2200      	movs	r2, #0
 800d184:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	2200      	movs	r2, #0
 800d18a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	2200      	movs	r2, #0
 800d190:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	3330      	adds	r3, #48	; 0x30
 800d196:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d19a:	2100      	movs	r1, #0
 800d19c:	4618      	mov	r0, r3
 800d19e:	f7fe fa72 	bl	800b686 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d1a2:	79fb      	ldrb	r3, [r7, #7]
 800d1a4:	f003 0320 	and.w	r3, r3, #32
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d060      	beq.n	800d26e <f_open+0x362>
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	68db      	ldr	r3, [r3, #12]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d05c      	beq.n	800d26e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	68da      	ldr	r2, [r3, #12]
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	895b      	ldrh	r3, [r3, #10]
 800d1c0:	025b      	lsls	r3, r3, #9
 800d1c2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	689b      	ldr	r3, [r3, #8]
 800d1c8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	68db      	ldr	r3, [r3, #12]
 800d1ce:	657b      	str	r3, [r7, #84]	; 0x54
 800d1d0:	e016      	b.n	800d200 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f7fe fd1d 	bl	800bc16 <get_fat>
 800d1dc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d1de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d1e0:	2b01      	cmp	r3, #1
 800d1e2:	d802      	bhi.n	800d1ea <f_open+0x2de>
 800d1e4:	2302      	movs	r3, #2
 800d1e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d1ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d1ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1f0:	d102      	bne.n	800d1f8 <f_open+0x2ec>
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d1f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d1fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1fc:	1ad3      	subs	r3, r2, r3
 800d1fe:	657b      	str	r3, [r7, #84]	; 0x54
 800d200:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d204:	2b00      	cmp	r3, #0
 800d206:	d103      	bne.n	800d210 <f_open+0x304>
 800d208:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d20a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d20c:	429a      	cmp	r2, r3
 800d20e:	d8e0      	bhi.n	800d1d2 <f_open+0x2c6>
				}
				fp->clust = clst;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d214:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d216:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d127      	bne.n	800d26e <f_open+0x362>
 800d21e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d224:	2b00      	cmp	r3, #0
 800d226:	d022      	beq.n	800d26e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d228:	693b      	ldr	r3, [r7, #16]
 800d22a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d22c:	4618      	mov	r0, r3
 800d22e:	f7fe fcd3 	bl	800bbd8 <clust2sect>
 800d232:	6478      	str	r0, [r7, #68]	; 0x44
 800d234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d236:	2b00      	cmp	r3, #0
 800d238:	d103      	bne.n	800d242 <f_open+0x336>
						res = FR_INT_ERR;
 800d23a:	2302      	movs	r3, #2
 800d23c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d240:	e015      	b.n	800d26e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d244:	0a5a      	lsrs	r2, r3, #9
 800d246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d248:	441a      	add	r2, r3
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	7858      	ldrb	r0, [r3, #1]
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	6a1a      	ldr	r2, [r3, #32]
 800d25c:	2301      	movs	r3, #1
 800d25e:	f7fe f911 	bl	800b484 <disk_read>
 800d262:	4603      	mov	r3, r0
 800d264:	2b00      	cmp	r3, #0
 800d266:	d002      	beq.n	800d26e <f_open+0x362>
 800d268:	2301      	movs	r3, #1
 800d26a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d26e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d272:	2b00      	cmp	r3, #0
 800d274:	d002      	beq.n	800d27c <f_open+0x370>
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	2200      	movs	r2, #0
 800d27a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d27c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d280:	4618      	mov	r0, r3
 800d282:	3760      	adds	r7, #96	; 0x60
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}

0800d288 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b08e      	sub	sp, #56	; 0x38
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	60f8      	str	r0, [r7, #12]
 800d290:	60b9      	str	r1, [r7, #8]
 800d292:	607a      	str	r2, [r7, #4]
 800d294:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	2200      	movs	r2, #0
 800d29e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	f107 0214 	add.w	r2, r7, #20
 800d2a6:	4611      	mov	r1, r2
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f7ff fdb3 	bl	800ce14 <validate>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d2b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d107      	bne.n	800d2cc <f_read+0x44>
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	7d5b      	ldrb	r3, [r3, #21]
 800d2c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d2c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d002      	beq.n	800d2d2 <f_read+0x4a>
 800d2cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d2d0:	e115      	b.n	800d4fe <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	7d1b      	ldrb	r3, [r3, #20]
 800d2d6:	f003 0301 	and.w	r3, r3, #1
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d101      	bne.n	800d2e2 <f_read+0x5a>
 800d2de:	2307      	movs	r3, #7
 800d2e0:	e10d      	b.n	800d4fe <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	68da      	ldr	r2, [r3, #12]
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	699b      	ldr	r3, [r3, #24]
 800d2ea:	1ad3      	subs	r3, r2, r3
 800d2ec:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d2ee:	687a      	ldr	r2, [r7, #4]
 800d2f0:	6a3b      	ldr	r3, [r7, #32]
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	f240 80fe 	bls.w	800d4f4 <f_read+0x26c>
 800d2f8:	6a3b      	ldr	r3, [r7, #32]
 800d2fa:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d2fc:	e0fa      	b.n	800d4f4 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	699b      	ldr	r3, [r3, #24]
 800d302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d306:	2b00      	cmp	r3, #0
 800d308:	f040 80c6 	bne.w	800d498 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	699b      	ldr	r3, [r3, #24]
 800d310:	0a5b      	lsrs	r3, r3, #9
 800d312:	697a      	ldr	r2, [r7, #20]
 800d314:	8952      	ldrh	r2, [r2, #10]
 800d316:	3a01      	subs	r2, #1
 800d318:	4013      	ands	r3, r2
 800d31a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d31c:	69fb      	ldr	r3, [r7, #28]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d12f      	bne.n	800d382 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	699b      	ldr	r3, [r3, #24]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d103      	bne.n	800d332 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	689b      	ldr	r3, [r3, #8]
 800d32e:	633b      	str	r3, [r7, #48]	; 0x30
 800d330:	e013      	b.n	800d35a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d336:	2b00      	cmp	r3, #0
 800d338:	d007      	beq.n	800d34a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	699b      	ldr	r3, [r3, #24]
 800d33e:	4619      	mov	r1, r3
 800d340:	68f8      	ldr	r0, [r7, #12]
 800d342:	f7fe fef9 	bl	800c138 <clmt_clust>
 800d346:	6338      	str	r0, [r7, #48]	; 0x30
 800d348:	e007      	b.n	800d35a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d34a:	68fa      	ldr	r2, [r7, #12]
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	69db      	ldr	r3, [r3, #28]
 800d350:	4619      	mov	r1, r3
 800d352:	4610      	mov	r0, r2
 800d354:	f7fe fc5f 	bl	800bc16 <get_fat>
 800d358:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d35c:	2b01      	cmp	r3, #1
 800d35e:	d804      	bhi.n	800d36a <f_read+0xe2>
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	2202      	movs	r2, #2
 800d364:	755a      	strb	r2, [r3, #21]
 800d366:	2302      	movs	r3, #2
 800d368:	e0c9      	b.n	800d4fe <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d36c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d370:	d104      	bne.n	800d37c <f_read+0xf4>
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	2201      	movs	r2, #1
 800d376:	755a      	strb	r2, [r3, #21]
 800d378:	2301      	movs	r3, #1
 800d37a:	e0c0      	b.n	800d4fe <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d380:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d382:	697a      	ldr	r2, [r7, #20]
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	69db      	ldr	r3, [r3, #28]
 800d388:	4619      	mov	r1, r3
 800d38a:	4610      	mov	r0, r2
 800d38c:	f7fe fc24 	bl	800bbd8 <clust2sect>
 800d390:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d392:	69bb      	ldr	r3, [r7, #24]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d104      	bne.n	800d3a2 <f_read+0x11a>
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	2202      	movs	r2, #2
 800d39c:	755a      	strb	r2, [r3, #21]
 800d39e:	2302      	movs	r3, #2
 800d3a0:	e0ad      	b.n	800d4fe <f_read+0x276>
			sect += csect;
 800d3a2:	69ba      	ldr	r2, [r7, #24]
 800d3a4:	69fb      	ldr	r3, [r7, #28]
 800d3a6:	4413      	add	r3, r2
 800d3a8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	0a5b      	lsrs	r3, r3, #9
 800d3ae:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d039      	beq.n	800d42a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d3b6:	69fa      	ldr	r2, [r7, #28]
 800d3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ba:	4413      	add	r3, r2
 800d3bc:	697a      	ldr	r2, [r7, #20]
 800d3be:	8952      	ldrh	r2, [r2, #10]
 800d3c0:	4293      	cmp	r3, r2
 800d3c2:	d905      	bls.n	800d3d0 <f_read+0x148>
					cc = fs->csize - csect;
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	895b      	ldrh	r3, [r3, #10]
 800d3c8:	461a      	mov	r2, r3
 800d3ca:	69fb      	ldr	r3, [r7, #28]
 800d3cc:	1ad3      	subs	r3, r2, r3
 800d3ce:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d3d0:	697b      	ldr	r3, [r7, #20]
 800d3d2:	7858      	ldrb	r0, [r3, #1]
 800d3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d6:	69ba      	ldr	r2, [r7, #24]
 800d3d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d3da:	f7fe f853 	bl	800b484 <disk_read>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d004      	beq.n	800d3ee <f_read+0x166>
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	2201      	movs	r2, #1
 800d3e8:	755a      	strb	r2, [r3, #21]
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	e087      	b.n	800d4fe <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	7d1b      	ldrb	r3, [r3, #20]
 800d3f2:	b25b      	sxtb	r3, r3
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	da14      	bge.n	800d422 <f_read+0x19a>
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	6a1a      	ldr	r2, [r3, #32]
 800d3fc:	69bb      	ldr	r3, [r7, #24]
 800d3fe:	1ad3      	subs	r3, r2, r3
 800d400:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d402:	429a      	cmp	r2, r3
 800d404:	d90d      	bls.n	800d422 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	6a1a      	ldr	r2, [r3, #32]
 800d40a:	69bb      	ldr	r3, [r7, #24]
 800d40c:	1ad3      	subs	r3, r2, r3
 800d40e:	025b      	lsls	r3, r3, #9
 800d410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d412:	18d0      	adds	r0, r2, r3
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	3330      	adds	r3, #48	; 0x30
 800d418:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d41c:	4619      	mov	r1, r3
 800d41e:	f7fe f911 	bl	800b644 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d424:	025b      	lsls	r3, r3, #9
 800d426:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800d428:	e050      	b.n	800d4cc <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	6a1b      	ldr	r3, [r3, #32]
 800d42e:	69ba      	ldr	r2, [r7, #24]
 800d430:	429a      	cmp	r2, r3
 800d432:	d02e      	beq.n	800d492 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	7d1b      	ldrb	r3, [r3, #20]
 800d438:	b25b      	sxtb	r3, r3
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	da18      	bge.n	800d470 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d43e:	697b      	ldr	r3, [r7, #20]
 800d440:	7858      	ldrb	r0, [r3, #1]
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	6a1a      	ldr	r2, [r3, #32]
 800d44c:	2301      	movs	r3, #1
 800d44e:	f7fe f839 	bl	800b4c4 <disk_write>
 800d452:	4603      	mov	r3, r0
 800d454:	2b00      	cmp	r3, #0
 800d456:	d004      	beq.n	800d462 <f_read+0x1da>
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	2201      	movs	r2, #1
 800d45c:	755a      	strb	r2, [r3, #21]
 800d45e:	2301      	movs	r3, #1
 800d460:	e04d      	b.n	800d4fe <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	7d1b      	ldrb	r3, [r3, #20]
 800d466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d46a:	b2da      	uxtb	r2, r3
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	7858      	ldrb	r0, [r3, #1]
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d47a:	2301      	movs	r3, #1
 800d47c:	69ba      	ldr	r2, [r7, #24]
 800d47e:	f7fe f801 	bl	800b484 <disk_read>
 800d482:	4603      	mov	r3, r0
 800d484:	2b00      	cmp	r3, #0
 800d486:	d004      	beq.n	800d492 <f_read+0x20a>
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	2201      	movs	r2, #1
 800d48c:	755a      	strb	r2, [r3, #21]
 800d48e:	2301      	movs	r3, #1
 800d490:	e035      	b.n	800d4fe <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	69ba      	ldr	r2, [r7, #24]
 800d496:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	699b      	ldr	r3, [r3, #24]
 800d49c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4a0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d4a4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d4a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d901      	bls.n	800d4b2 <f_read+0x22a>
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	699b      	ldr	r3, [r3, #24]
 800d4bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4c0:	4413      	add	r3, r2
 800d4c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d4c4:	4619      	mov	r1, r3
 800d4c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d4c8:	f7fe f8bc 	bl	800b644 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d4cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d0:	4413      	add	r3, r2
 800d4d2:	627b      	str	r3, [r7, #36]	; 0x24
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	699a      	ldr	r2, [r3, #24]
 800d4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4da:	441a      	add	r2, r3
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	619a      	str	r2, [r3, #24]
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	681a      	ldr	r2, [r3, #0]
 800d4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4e6:	441a      	add	r2, r3
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	601a      	str	r2, [r3, #0]
 800d4ec:	687a      	ldr	r2, [r7, #4]
 800d4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4f0:	1ad3      	subs	r3, r2, r3
 800d4f2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	f47f af01 	bne.w	800d2fe <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d4fc:	2300      	movs	r3, #0
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	3738      	adds	r7, #56	; 0x38
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}

0800d506 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d506:	b580      	push	{r7, lr}
 800d508:	b086      	sub	sp, #24
 800d50a:	af00      	add	r7, sp, #0
 800d50c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	f107 0208 	add.w	r2, r7, #8
 800d514:	4611      	mov	r1, r2
 800d516:	4618      	mov	r0, r3
 800d518:	f7ff fc7c 	bl	800ce14 <validate>
 800d51c:	4603      	mov	r3, r0
 800d51e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d520:	7dfb      	ldrb	r3, [r7, #23]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d168      	bne.n	800d5f8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	7d1b      	ldrb	r3, [r3, #20]
 800d52a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d062      	beq.n	800d5f8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	7d1b      	ldrb	r3, [r3, #20]
 800d536:	b25b      	sxtb	r3, r3
 800d538:	2b00      	cmp	r3, #0
 800d53a:	da15      	bge.n	800d568 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	7858      	ldrb	r0, [r3, #1]
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6a1a      	ldr	r2, [r3, #32]
 800d54a:	2301      	movs	r3, #1
 800d54c:	f7fd ffba 	bl	800b4c4 <disk_write>
 800d550:	4603      	mov	r3, r0
 800d552:	2b00      	cmp	r3, #0
 800d554:	d001      	beq.n	800d55a <f_sync+0x54>
 800d556:	2301      	movs	r3, #1
 800d558:	e04f      	b.n	800d5fa <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	7d1b      	ldrb	r3, [r3, #20]
 800d55e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d562:	b2da      	uxtb	r2, r3
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d568:	f7fb fce0 	bl	8008f2c <get_fattime>
 800d56c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d56e:	68ba      	ldr	r2, [r7, #8]
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d574:	4619      	mov	r1, r3
 800d576:	4610      	mov	r0, r2
 800d578:	f7fe fa92 	bl	800baa0 <move_window>
 800d57c:	4603      	mov	r3, r0
 800d57e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d580:	7dfb      	ldrb	r3, [r7, #23]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d138      	bne.n	800d5f8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d58a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	330b      	adds	r3, #11
 800d590:	781a      	ldrb	r2, [r3, #0]
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	330b      	adds	r3, #11
 800d596:	f042 0220 	orr.w	r2, r2, #32
 800d59a:	b2d2      	uxtb	r2, r2
 800d59c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	6818      	ldr	r0, [r3, #0]
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	689b      	ldr	r3, [r3, #8]
 800d5a6:	461a      	mov	r2, r3
 800d5a8:	68f9      	ldr	r1, [r7, #12]
 800d5aa:	f7fe ff9f 	bl	800c4ec <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	f103 021c 	add.w	r2, r3, #28
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	68db      	ldr	r3, [r3, #12]
 800d5b8:	4619      	mov	r1, r3
 800d5ba:	4610      	mov	r0, r2
 800d5bc:	f7fe f816 	bl	800b5ec <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	3316      	adds	r3, #22
 800d5c4:	6939      	ldr	r1, [r7, #16]
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f7fe f810 	bl	800b5ec <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	3312      	adds	r3, #18
 800d5d0:	2100      	movs	r1, #0
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f7fd ffef 	bl	800b5b6 <st_word>
					fs->wflag = 1;
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	2201      	movs	r2, #1
 800d5dc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f7fe fa8b 	bl	800bafc <sync_fs>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	7d1b      	ldrb	r3, [r3, #20]
 800d5ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d5f2:	b2da      	uxtb	r2, r3
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d5f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3718      	adds	r7, #24
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}

0800d602 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d602:	b580      	push	{r7, lr}
 800d604:	b084      	sub	sp, #16
 800d606:	af00      	add	r7, sp, #0
 800d608:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	f7ff ff7b 	bl	800d506 <f_sync>
 800d610:	4603      	mov	r3, r0
 800d612:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d614:	7bfb      	ldrb	r3, [r7, #15]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d118      	bne.n	800d64c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f107 0208 	add.w	r2, r7, #8
 800d620:	4611      	mov	r1, r2
 800d622:	4618      	mov	r0, r3
 800d624:	f7ff fbf6 	bl	800ce14 <validate>
 800d628:	4603      	mov	r3, r0
 800d62a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d62c:	7bfb      	ldrb	r3, [r7, #15]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d10c      	bne.n	800d64c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	691b      	ldr	r3, [r3, #16]
 800d636:	4618      	mov	r0, r3
 800d638:	f7fe f98e 	bl	800b958 <dec_lock>
 800d63c:	4603      	mov	r3, r0
 800d63e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d640:	7bfb      	ldrb	r3, [r7, #15]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d102      	bne.n	800d64c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2200      	movs	r2, #0
 800d64a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d64c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d64e:	4618      	mov	r0, r3
 800d650:	3710      	adds	r7, #16
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}

0800d656 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800d656:	b580      	push	{r7, lr}
 800d658:	b090      	sub	sp, #64	; 0x40
 800d65a:	af00      	add	r7, sp, #0
 800d65c:	6078      	str	r0, [r7, #4]
 800d65e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f107 0208 	add.w	r2, r7, #8
 800d666:	4611      	mov	r1, r2
 800d668:	4618      	mov	r0, r3
 800d66a:	f7ff fbd3 	bl	800ce14 <validate>
 800d66e:	4603      	mov	r3, r0
 800d670:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800d674:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d103      	bne.n	800d684 <f_lseek+0x2e>
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	7d5b      	ldrb	r3, [r3, #21]
 800d680:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800d684:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d002      	beq.n	800d692 <f_lseek+0x3c>
 800d68c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d690:	e1e6      	b.n	800da60 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d696:	2b00      	cmp	r3, #0
 800d698:	f000 80d1 	beq.w	800d83e <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6a2:	d15a      	bne.n	800d75a <f_lseek+0x104>
			tbl = fp->cltbl;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6a8:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ac:	1d1a      	adds	r2, r3, #4
 800d6ae:	627a      	str	r2, [r7, #36]	; 0x24
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	617b      	str	r3, [r7, #20]
 800d6b4:	2302      	movs	r3, #2
 800d6b6:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	689b      	ldr	r3, [r3, #8]
 800d6bc:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800d6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d03a      	beq.n	800d73a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6c6:	613b      	str	r3, [r7, #16]
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ce:	3302      	adds	r3, #2
 800d6d0:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800d6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6d4:	60fb      	str	r3, [r7, #12]
 800d6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6d8:	3301      	adds	r3, #1
 800d6da:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f7fe fa98 	bl	800bc16 <get_fat>
 800d6e6:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800d6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ea:	2b01      	cmp	r3, #1
 800d6ec:	d804      	bhi.n	800d6f8 <f_lseek+0xa2>
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2202      	movs	r2, #2
 800d6f2:	755a      	strb	r2, [r3, #21]
 800d6f4:	2302      	movs	r3, #2
 800d6f6:	e1b3      	b.n	800da60 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6fe:	d104      	bne.n	800d70a <f_lseek+0xb4>
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2201      	movs	r2, #1
 800d704:	755a      	strb	r2, [r3, #21]
 800d706:	2301      	movs	r3, #1
 800d708:	e1aa      	b.n	800da60 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	3301      	adds	r3, #1
 800d70e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d710:	429a      	cmp	r2, r3
 800d712:	d0de      	beq.n	800d6d2 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d714:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d716:	697b      	ldr	r3, [r7, #20]
 800d718:	429a      	cmp	r2, r3
 800d71a:	d809      	bhi.n	800d730 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800d71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d71e:	1d1a      	adds	r2, r3, #4
 800d720:	627a      	str	r2, [r7, #36]	; 0x24
 800d722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d724:	601a      	str	r2, [r3, #0]
 800d726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d728:	1d1a      	adds	r2, r3, #4
 800d72a:	627a      	str	r2, [r7, #36]	; 0x24
 800d72c:	693a      	ldr	r2, [r7, #16]
 800d72e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	695b      	ldr	r3, [r3, #20]
 800d734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d736:	429a      	cmp	r2, r3
 800d738:	d3c4      	bcc.n	800d6c4 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d73e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d740:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800d742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d744:	697b      	ldr	r3, [r7, #20]
 800d746:	429a      	cmp	r2, r3
 800d748:	d803      	bhi.n	800d752 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800d74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d74c:	2200      	movs	r2, #0
 800d74e:	601a      	str	r2, [r3, #0]
 800d750:	e184      	b.n	800da5c <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800d752:	2311      	movs	r3, #17
 800d754:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d758:	e180      	b.n	800da5c <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	68db      	ldr	r3, [r3, #12]
 800d75e:	683a      	ldr	r2, [r7, #0]
 800d760:	429a      	cmp	r2, r3
 800d762:	d902      	bls.n	800d76a <f_lseek+0x114>
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	68db      	ldr	r3, [r3, #12]
 800d768:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	683a      	ldr	r2, [r7, #0]
 800d76e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	2b00      	cmp	r3, #0
 800d774:	f000 8172 	beq.w	800da5c <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	3b01      	subs	r3, #1
 800d77c:	4619      	mov	r1, r3
 800d77e:	6878      	ldr	r0, [r7, #4]
 800d780:	f7fe fcda 	bl	800c138 <clmt_clust>
 800d784:	4602      	mov	r2, r0
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800d78a:	68ba      	ldr	r2, [r7, #8]
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	69db      	ldr	r3, [r3, #28]
 800d790:	4619      	mov	r1, r3
 800d792:	4610      	mov	r0, r2
 800d794:	f7fe fa20 	bl	800bbd8 <clust2sect>
 800d798:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800d79a:	69bb      	ldr	r3, [r7, #24]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d104      	bne.n	800d7aa <f_lseek+0x154>
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2202      	movs	r2, #2
 800d7a4:	755a      	strb	r2, [r3, #21]
 800d7a6:	2302      	movs	r3, #2
 800d7a8:	e15a      	b.n	800da60 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	3b01      	subs	r3, #1
 800d7ae:	0a5b      	lsrs	r3, r3, #9
 800d7b0:	68ba      	ldr	r2, [r7, #8]
 800d7b2:	8952      	ldrh	r2, [r2, #10]
 800d7b4:	3a01      	subs	r2, #1
 800d7b6:	4013      	ands	r3, r2
 800d7b8:	69ba      	ldr	r2, [r7, #24]
 800d7ba:	4413      	add	r3, r2
 800d7bc:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	699b      	ldr	r3, [r3, #24]
 800d7c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	f000 8148 	beq.w	800da5c <f_lseek+0x406>
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6a1b      	ldr	r3, [r3, #32]
 800d7d0:	69ba      	ldr	r2, [r7, #24]
 800d7d2:	429a      	cmp	r2, r3
 800d7d4:	f000 8142 	beq.w	800da5c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	7d1b      	ldrb	r3, [r3, #20]
 800d7dc:	b25b      	sxtb	r3, r3
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	da18      	bge.n	800d814 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d7e2:	68bb      	ldr	r3, [r7, #8]
 800d7e4:	7858      	ldrb	r0, [r3, #1]
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6a1a      	ldr	r2, [r3, #32]
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	f7fd fe67 	bl	800b4c4 <disk_write>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d004      	beq.n	800d806 <f_lseek+0x1b0>
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2201      	movs	r2, #1
 800d800:	755a      	strb	r2, [r3, #21]
 800d802:	2301      	movs	r3, #1
 800d804:	e12c      	b.n	800da60 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	7d1b      	ldrb	r3, [r3, #20]
 800d80a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d80e:	b2da      	uxtb	r2, r3
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	7858      	ldrb	r0, [r3, #1]
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d81e:	2301      	movs	r3, #1
 800d820:	69ba      	ldr	r2, [r7, #24]
 800d822:	f7fd fe2f 	bl	800b484 <disk_read>
 800d826:	4603      	mov	r3, r0
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d004      	beq.n	800d836 <f_lseek+0x1e0>
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2201      	movs	r2, #1
 800d830:	755a      	strb	r2, [r3, #21]
 800d832:	2301      	movs	r3, #1
 800d834:	e114      	b.n	800da60 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	69ba      	ldr	r2, [r7, #24]
 800d83a:	621a      	str	r2, [r3, #32]
 800d83c:	e10e      	b.n	800da5c <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	68db      	ldr	r3, [r3, #12]
 800d842:	683a      	ldr	r2, [r7, #0]
 800d844:	429a      	cmp	r2, r3
 800d846:	d908      	bls.n	800d85a <f_lseek+0x204>
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	7d1b      	ldrb	r3, [r3, #20]
 800d84c:	f003 0302 	and.w	r3, r3, #2
 800d850:	2b00      	cmp	r3, #0
 800d852:	d102      	bne.n	800d85a <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	68db      	ldr	r3, [r3, #12]
 800d858:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	699b      	ldr	r3, [r3, #24]
 800d85e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800d860:	2300      	movs	r3, #0
 800d862:	637b      	str	r3, [r7, #52]	; 0x34
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d868:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	f000 80a7 	beq.w	800d9c0 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	895b      	ldrh	r3, [r3, #10]
 800d876:	025b      	lsls	r3, r3, #9
 800d878:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800d87a:	6a3b      	ldr	r3, [r7, #32]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d01b      	beq.n	800d8b8 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	1e5a      	subs	r2, r3, #1
 800d884:	69fb      	ldr	r3, [r7, #28]
 800d886:	fbb2 f2f3 	udiv	r2, r2, r3
 800d88a:	6a3b      	ldr	r3, [r7, #32]
 800d88c:	1e59      	subs	r1, r3, #1
 800d88e:	69fb      	ldr	r3, [r7, #28]
 800d890:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800d894:	429a      	cmp	r2, r3
 800d896:	d30f      	bcc.n	800d8b8 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800d898:	6a3b      	ldr	r3, [r7, #32]
 800d89a:	1e5a      	subs	r2, r3, #1
 800d89c:	69fb      	ldr	r3, [r7, #28]
 800d89e:	425b      	negs	r3, r3
 800d8a0:	401a      	ands	r2, r3
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	699b      	ldr	r3, [r3, #24]
 800d8aa:	683a      	ldr	r2, [r7, #0]
 800d8ac:	1ad3      	subs	r3, r2, r3
 800d8ae:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	69db      	ldr	r3, [r3, #28]
 800d8b4:	63bb      	str	r3, [r7, #56]	; 0x38
 800d8b6:	e022      	b.n	800d8fe <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	689b      	ldr	r3, [r3, #8]
 800d8bc:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800d8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d119      	bne.n	800d8f8 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2100      	movs	r1, #0
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f7fe fb9d 	bl	800c008 <create_chain>
 800d8ce:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8d2:	2b01      	cmp	r3, #1
 800d8d4:	d104      	bne.n	800d8e0 <f_lseek+0x28a>
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	2202      	movs	r2, #2
 800d8da:	755a      	strb	r2, [r3, #21]
 800d8dc:	2302      	movs	r3, #2
 800d8de:	e0bf      	b.n	800da60 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8e6:	d104      	bne.n	800d8f2 <f_lseek+0x29c>
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2201      	movs	r2, #1
 800d8ec:	755a      	strb	r2, [r3, #21]
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	e0b6      	b.n	800da60 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d8f6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d8fc:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800d8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d900:	2b00      	cmp	r3, #0
 800d902:	d05d      	beq.n	800d9c0 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800d904:	e03a      	b.n	800d97c <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800d906:	683a      	ldr	r2, [r7, #0]
 800d908:	69fb      	ldr	r3, [r7, #28]
 800d90a:	1ad3      	subs	r3, r2, r3
 800d90c:	603b      	str	r3, [r7, #0]
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	699a      	ldr	r2, [r3, #24]
 800d912:	69fb      	ldr	r3, [r7, #28]
 800d914:	441a      	add	r2, r3
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	7d1b      	ldrb	r3, [r3, #20]
 800d91e:	f003 0302 	and.w	r3, r3, #2
 800d922:	2b00      	cmp	r3, #0
 800d924:	d00b      	beq.n	800d93e <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d92a:	4618      	mov	r0, r3
 800d92c:	f7fe fb6c 	bl	800c008 <create_chain>
 800d930:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800d932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d934:	2b00      	cmp	r3, #0
 800d936:	d108      	bne.n	800d94a <f_lseek+0x2f4>
							ofs = 0; break;
 800d938:	2300      	movs	r3, #0
 800d93a:	603b      	str	r3, [r7, #0]
 800d93c:	e022      	b.n	800d984 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d942:	4618      	mov	r0, r3
 800d944:	f7fe f967 	bl	800bc16 <get_fat>
 800d948:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d94c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d950:	d104      	bne.n	800d95c <f_lseek+0x306>
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	2201      	movs	r2, #1
 800d956:	755a      	strb	r2, [r3, #21]
 800d958:	2301      	movs	r3, #1
 800d95a:	e081      	b.n	800da60 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800d95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d95e:	2b01      	cmp	r3, #1
 800d960:	d904      	bls.n	800d96c <f_lseek+0x316>
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	695b      	ldr	r3, [r3, #20]
 800d966:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d968:	429a      	cmp	r2, r3
 800d96a:	d304      	bcc.n	800d976 <f_lseek+0x320>
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2202      	movs	r2, #2
 800d970:	755a      	strb	r2, [r3, #21]
 800d972:	2302      	movs	r3, #2
 800d974:	e074      	b.n	800da60 <f_lseek+0x40a>
					fp->clust = clst;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d97a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800d97c:	683a      	ldr	r2, [r7, #0]
 800d97e:	69fb      	ldr	r3, [r7, #28]
 800d980:	429a      	cmp	r2, r3
 800d982:	d8c0      	bhi.n	800d906 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	699a      	ldr	r2, [r3, #24]
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	441a      	add	r2, r3
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d996:	2b00      	cmp	r3, #0
 800d998:	d012      	beq.n	800d9c0 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7fe f91a 	bl	800bbd8 <clust2sect>
 800d9a4:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800d9a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d104      	bne.n	800d9b6 <f_lseek+0x360>
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2202      	movs	r2, #2
 800d9b0:	755a      	strb	r2, [r3, #21]
 800d9b2:	2302      	movs	r3, #2
 800d9b4:	e054      	b.n	800da60 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800d9b6:	683b      	ldr	r3, [r7, #0]
 800d9b8:	0a5b      	lsrs	r3, r3, #9
 800d9ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9bc:	4413      	add	r3, r2
 800d9be:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	699a      	ldr	r2, [r3, #24]
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	68db      	ldr	r3, [r3, #12]
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	d90a      	bls.n	800d9e2 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	699a      	ldr	r2, [r3, #24]
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	7d1b      	ldrb	r3, [r3, #20]
 800d9d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9dc:	b2da      	uxtb	r2, r3
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	699b      	ldr	r3, [r3, #24]
 800d9e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d036      	beq.n	800da5c <f_lseek+0x406>
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6a1b      	ldr	r3, [r3, #32]
 800d9f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9f4:	429a      	cmp	r2, r3
 800d9f6:	d031      	beq.n	800da5c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	7d1b      	ldrb	r3, [r3, #20]
 800d9fc:	b25b      	sxtb	r3, r3
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	da18      	bge.n	800da34 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800da02:	68bb      	ldr	r3, [r7, #8]
 800da04:	7858      	ldrb	r0, [r3, #1]
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	6a1a      	ldr	r2, [r3, #32]
 800da10:	2301      	movs	r3, #1
 800da12:	f7fd fd57 	bl	800b4c4 <disk_write>
 800da16:	4603      	mov	r3, r0
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d004      	beq.n	800da26 <f_lseek+0x3d0>
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2201      	movs	r2, #1
 800da20:	755a      	strb	r2, [r3, #21]
 800da22:	2301      	movs	r3, #1
 800da24:	e01c      	b.n	800da60 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	7d1b      	ldrb	r3, [r3, #20]
 800da2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da2e:	b2da      	uxtb	r2, r3
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	7858      	ldrb	r0, [r3, #1]
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800da3e:	2301      	movs	r3, #1
 800da40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da42:	f7fd fd1f 	bl	800b484 <disk_read>
 800da46:	4603      	mov	r3, r0
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d004      	beq.n	800da56 <f_lseek+0x400>
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2201      	movs	r2, #1
 800da50:	755a      	strb	r2, [r3, #21]
 800da52:	2301      	movs	r3, #1
 800da54:	e004      	b.n	800da60 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da5a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800da5c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800da60:	4618      	mov	r0, r3
 800da62:	3740      	adds	r7, #64	; 0x40
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}

0800da68 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800da68:	b480      	push	{r7}
 800da6a:	b087      	sub	sp, #28
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	60f8      	str	r0, [r7, #12]
 800da70:	60b9      	str	r1, [r7, #8]
 800da72:	4613      	mov	r3, r2
 800da74:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800da76:	2301      	movs	r3, #1
 800da78:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800da7a:	2300      	movs	r3, #0
 800da7c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800da7e:	4b1f      	ldr	r3, [pc, #124]	; (800dafc <FATFS_LinkDriverEx+0x94>)
 800da80:	7a5b      	ldrb	r3, [r3, #9]
 800da82:	b2db      	uxtb	r3, r3
 800da84:	2b00      	cmp	r3, #0
 800da86:	d131      	bne.n	800daec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800da88:	4b1c      	ldr	r3, [pc, #112]	; (800dafc <FATFS_LinkDriverEx+0x94>)
 800da8a:	7a5b      	ldrb	r3, [r3, #9]
 800da8c:	b2db      	uxtb	r3, r3
 800da8e:	461a      	mov	r2, r3
 800da90:	4b1a      	ldr	r3, [pc, #104]	; (800dafc <FATFS_LinkDriverEx+0x94>)
 800da92:	2100      	movs	r1, #0
 800da94:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800da96:	4b19      	ldr	r3, [pc, #100]	; (800dafc <FATFS_LinkDriverEx+0x94>)
 800da98:	7a5b      	ldrb	r3, [r3, #9]
 800da9a:	b2db      	uxtb	r3, r3
 800da9c:	4a17      	ldr	r2, [pc, #92]	; (800dafc <FATFS_LinkDriverEx+0x94>)
 800da9e:	009b      	lsls	r3, r3, #2
 800daa0:	4413      	add	r3, r2
 800daa2:	68fa      	ldr	r2, [r7, #12]
 800daa4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800daa6:	4b15      	ldr	r3, [pc, #84]	; (800dafc <FATFS_LinkDriverEx+0x94>)
 800daa8:	7a5b      	ldrb	r3, [r3, #9]
 800daaa:	b2db      	uxtb	r3, r3
 800daac:	461a      	mov	r2, r3
 800daae:	4b13      	ldr	r3, [pc, #76]	; (800dafc <FATFS_LinkDriverEx+0x94>)
 800dab0:	4413      	add	r3, r2
 800dab2:	79fa      	ldrb	r2, [r7, #7]
 800dab4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800dab6:	4b11      	ldr	r3, [pc, #68]	; (800dafc <FATFS_LinkDriverEx+0x94>)
 800dab8:	7a5b      	ldrb	r3, [r3, #9]
 800daba:	b2db      	uxtb	r3, r3
 800dabc:	1c5a      	adds	r2, r3, #1
 800dabe:	b2d1      	uxtb	r1, r2
 800dac0:	4a0e      	ldr	r2, [pc, #56]	; (800dafc <FATFS_LinkDriverEx+0x94>)
 800dac2:	7251      	strb	r1, [r2, #9]
 800dac4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800dac6:	7dbb      	ldrb	r3, [r7, #22]
 800dac8:	3330      	adds	r3, #48	; 0x30
 800daca:	b2da      	uxtb	r2, r3
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800dad0:	68bb      	ldr	r3, [r7, #8]
 800dad2:	3301      	adds	r3, #1
 800dad4:	223a      	movs	r2, #58	; 0x3a
 800dad6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800dad8:	68bb      	ldr	r3, [r7, #8]
 800dada:	3302      	adds	r3, #2
 800dadc:	222f      	movs	r2, #47	; 0x2f
 800dade:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dae0:	68bb      	ldr	r3, [r7, #8]
 800dae2:	3303      	adds	r3, #3
 800dae4:	2200      	movs	r2, #0
 800dae6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dae8:	2300      	movs	r3, #0
 800daea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800daec:	7dfb      	ldrb	r3, [r7, #23]
}
 800daee:	4618      	mov	r0, r3
 800daf0:	371c      	adds	r7, #28
 800daf2:	46bd      	mov	sp, r7
 800daf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf8:	4770      	bx	lr
 800dafa:	bf00      	nop
 800dafc:	200008cc 	.word	0x200008cc

0800db00 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b082      	sub	sp, #8
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
 800db08:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800db0a:	2200      	movs	r2, #0
 800db0c:	6839      	ldr	r1, [r7, #0]
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f7ff ffaa 	bl	800da68 <FATFS_LinkDriverEx>
 800db14:	4603      	mov	r3, r0
}
 800db16:	4618      	mov	r0, r3
 800db18:	3708      	adds	r7, #8
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}
	...

0800db20 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800db24:	2200      	movs	r2, #0
 800db26:	490e      	ldr	r1, [pc, #56]	; (800db60 <MX_USB_DEVICE_Init+0x40>)
 800db28:	480e      	ldr	r0, [pc, #56]	; (800db64 <MX_USB_DEVICE_Init+0x44>)
 800db2a:	f7fc f995 	bl	8009e58 <USBD_Init>
 800db2e:	4603      	mov	r3, r0
 800db30:	2b00      	cmp	r3, #0
 800db32:	d001      	beq.n	800db38 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800db34:	f7f4 f904 	bl	8001d40 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800db38:	490b      	ldr	r1, [pc, #44]	; (800db68 <MX_USB_DEVICE_Init+0x48>)
 800db3a:	480a      	ldr	r0, [pc, #40]	; (800db64 <MX_USB_DEVICE_Init+0x44>)
 800db3c:	f7fc f9bc 	bl	8009eb8 <USBD_RegisterClass>
 800db40:	4603      	mov	r3, r0
 800db42:	2b00      	cmp	r3, #0
 800db44:	d001      	beq.n	800db4a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800db46:	f7f4 f8fb 	bl	8001d40 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800db4a:	4806      	ldr	r0, [pc, #24]	; (800db64 <MX_USB_DEVICE_Init+0x44>)
 800db4c:	f7fc f9ea 	bl	8009f24 <USBD_Start>
 800db50:	4603      	mov	r3, r0
 800db52:	2b00      	cmp	r3, #0
 800db54:	d001      	beq.n	800db5a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800db56:	f7f4 f8f3 	bl	8001d40 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800db5a:	bf00      	nop
 800db5c:	bd80      	pop	{r7, pc}
 800db5e:	bf00      	nop
 800db60:	200000dc 	.word	0x200000dc
 800db64:	200008d8 	.word	0x200008d8
 800db68:	20000044 	.word	0x20000044

0800db6c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db6c:	b480      	push	{r7}
 800db6e:	b083      	sub	sp, #12
 800db70:	af00      	add	r7, sp, #0
 800db72:	4603      	mov	r3, r0
 800db74:	6039      	str	r1, [r7, #0]
 800db76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	2212      	movs	r2, #18
 800db7c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800db7e:	4b03      	ldr	r3, [pc, #12]	; (800db8c <USBD_FS_DeviceDescriptor+0x20>)
}
 800db80:	4618      	mov	r0, r3
 800db82:	370c      	adds	r7, #12
 800db84:	46bd      	mov	sp, r7
 800db86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8a:	4770      	bx	lr
 800db8c:	200000f8 	.word	0x200000f8

0800db90 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db90:	b480      	push	{r7}
 800db92:	b083      	sub	sp, #12
 800db94:	af00      	add	r7, sp, #0
 800db96:	4603      	mov	r3, r0
 800db98:	6039      	str	r1, [r7, #0]
 800db9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	2204      	movs	r2, #4
 800dba0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dba2:	4b03      	ldr	r3, [pc, #12]	; (800dbb0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	370c      	adds	r7, #12
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbae:	4770      	bx	lr
 800dbb0:	2000010c 	.word	0x2000010c

0800dbb4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b082      	sub	sp, #8
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	4603      	mov	r3, r0
 800dbbc:	6039      	str	r1, [r7, #0]
 800dbbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dbc0:	79fb      	ldrb	r3, [r7, #7]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d105      	bne.n	800dbd2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dbc6:	683a      	ldr	r2, [r7, #0]
 800dbc8:	4907      	ldr	r1, [pc, #28]	; (800dbe8 <USBD_FS_ProductStrDescriptor+0x34>)
 800dbca:	4808      	ldr	r0, [pc, #32]	; (800dbec <USBD_FS_ProductStrDescriptor+0x38>)
 800dbcc:	f7fd fb56 	bl	800b27c <USBD_GetString>
 800dbd0:	e004      	b.n	800dbdc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dbd2:	683a      	ldr	r2, [r7, #0]
 800dbd4:	4904      	ldr	r1, [pc, #16]	; (800dbe8 <USBD_FS_ProductStrDescriptor+0x34>)
 800dbd6:	4805      	ldr	r0, [pc, #20]	; (800dbec <USBD_FS_ProductStrDescriptor+0x38>)
 800dbd8:	f7fd fb50 	bl	800b27c <USBD_GetString>
  }
  return USBD_StrDesc;
 800dbdc:	4b02      	ldr	r3, [pc, #8]	; (800dbe8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	3708      	adds	r7, #8
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}
 800dbe6:	bf00      	nop
 800dbe8:	20000bb4 	.word	0x20000bb4
 800dbec:	0800fa40 	.word	0x0800fa40

0800dbf0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b082      	sub	sp, #8
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	6039      	str	r1, [r7, #0]
 800dbfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dbfc:	683a      	ldr	r2, [r7, #0]
 800dbfe:	4904      	ldr	r1, [pc, #16]	; (800dc10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dc00:	4804      	ldr	r0, [pc, #16]	; (800dc14 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dc02:	f7fd fb3b 	bl	800b27c <USBD_GetString>
  return USBD_StrDesc;
 800dc06:	4b02      	ldr	r3, [pc, #8]	; (800dc10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3708      	adds	r7, #8
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}
 800dc10:	20000bb4 	.word	0x20000bb4
 800dc14:	0800fa50 	.word	0x0800fa50

0800dc18 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b082      	sub	sp, #8
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	4603      	mov	r3, r0
 800dc20:	6039      	str	r1, [r7, #0]
 800dc22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	221a      	movs	r2, #26
 800dc28:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dc2a:	f000 f843 	bl	800dcb4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800dc2e:	4b02      	ldr	r3, [pc, #8]	; (800dc38 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dc30:	4618      	mov	r0, r3
 800dc32:	3708      	adds	r7, #8
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bd80      	pop	{r7, pc}
 800dc38:	20000110 	.word	0x20000110

0800dc3c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b082      	sub	sp, #8
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	4603      	mov	r3, r0
 800dc44:	6039      	str	r1, [r7, #0]
 800dc46:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dc48:	79fb      	ldrb	r3, [r7, #7]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d105      	bne.n	800dc5a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dc4e:	683a      	ldr	r2, [r7, #0]
 800dc50:	4907      	ldr	r1, [pc, #28]	; (800dc70 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dc52:	4808      	ldr	r0, [pc, #32]	; (800dc74 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dc54:	f7fd fb12 	bl	800b27c <USBD_GetString>
 800dc58:	e004      	b.n	800dc64 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dc5a:	683a      	ldr	r2, [r7, #0]
 800dc5c:	4904      	ldr	r1, [pc, #16]	; (800dc70 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dc5e:	4805      	ldr	r0, [pc, #20]	; (800dc74 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dc60:	f7fd fb0c 	bl	800b27c <USBD_GetString>
  }
  return USBD_StrDesc;
 800dc64:	4b02      	ldr	r3, [pc, #8]	; (800dc70 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3708      	adds	r7, #8
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}
 800dc6e:	bf00      	nop
 800dc70:	20000bb4 	.word	0x20000bb4
 800dc74:	0800fa58 	.word	0x0800fa58

0800dc78 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b082      	sub	sp, #8
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	4603      	mov	r3, r0
 800dc80:	6039      	str	r1, [r7, #0]
 800dc82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dc84:	79fb      	ldrb	r3, [r7, #7]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d105      	bne.n	800dc96 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dc8a:	683a      	ldr	r2, [r7, #0]
 800dc8c:	4907      	ldr	r1, [pc, #28]	; (800dcac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dc8e:	4808      	ldr	r0, [pc, #32]	; (800dcb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dc90:	f7fd faf4 	bl	800b27c <USBD_GetString>
 800dc94:	e004      	b.n	800dca0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dc96:	683a      	ldr	r2, [r7, #0]
 800dc98:	4904      	ldr	r1, [pc, #16]	; (800dcac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dc9a:	4805      	ldr	r0, [pc, #20]	; (800dcb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dc9c:	f7fd faee 	bl	800b27c <USBD_GetString>
  }
  return USBD_StrDesc;
 800dca0:	4b02      	ldr	r3, [pc, #8]	; (800dcac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	3708      	adds	r7, #8
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}
 800dcaa:	bf00      	nop
 800dcac:	20000bb4 	.word	0x20000bb4
 800dcb0:	0800fa64 	.word	0x0800fa64

0800dcb4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b084      	sub	sp, #16
 800dcb8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800dcba:	4b0f      	ldr	r3, [pc, #60]	; (800dcf8 <Get_SerialNum+0x44>)
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dcc0:	4b0e      	ldr	r3, [pc, #56]	; (800dcfc <Get_SerialNum+0x48>)
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800dcc6:	4b0e      	ldr	r3, [pc, #56]	; (800dd00 <Get_SerialNum+0x4c>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dccc:	68fa      	ldr	r2, [r7, #12]
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	4413      	add	r3, r2
 800dcd2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d009      	beq.n	800dcee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800dcda:	2208      	movs	r2, #8
 800dcdc:	4909      	ldr	r1, [pc, #36]	; (800dd04 <Get_SerialNum+0x50>)
 800dcde:	68f8      	ldr	r0, [r7, #12]
 800dce0:	f000 f814 	bl	800dd0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800dce4:	2204      	movs	r2, #4
 800dce6:	4908      	ldr	r1, [pc, #32]	; (800dd08 <Get_SerialNum+0x54>)
 800dce8:	68b8      	ldr	r0, [r7, #8]
 800dcea:	f000 f80f 	bl	800dd0c <IntToUnicode>
  }
}
 800dcee:	bf00      	nop
 800dcf0:	3710      	adds	r7, #16
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}
 800dcf6:	bf00      	nop
 800dcf8:	1fff7a10 	.word	0x1fff7a10
 800dcfc:	1fff7a14 	.word	0x1fff7a14
 800dd00:	1fff7a18 	.word	0x1fff7a18
 800dd04:	20000112 	.word	0x20000112
 800dd08:	20000122 	.word	0x20000122

0800dd0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dd0c:	b480      	push	{r7}
 800dd0e:	b087      	sub	sp, #28
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	60f8      	str	r0, [r7, #12]
 800dd14:	60b9      	str	r1, [r7, #8]
 800dd16:	4613      	mov	r3, r2
 800dd18:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dd1e:	2300      	movs	r3, #0
 800dd20:	75fb      	strb	r3, [r7, #23]
 800dd22:	e027      	b.n	800dd74 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	0f1b      	lsrs	r3, r3, #28
 800dd28:	2b09      	cmp	r3, #9
 800dd2a:	d80b      	bhi.n	800dd44 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	0f1b      	lsrs	r3, r3, #28
 800dd30:	b2da      	uxtb	r2, r3
 800dd32:	7dfb      	ldrb	r3, [r7, #23]
 800dd34:	005b      	lsls	r3, r3, #1
 800dd36:	4619      	mov	r1, r3
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	440b      	add	r3, r1
 800dd3c:	3230      	adds	r2, #48	; 0x30
 800dd3e:	b2d2      	uxtb	r2, r2
 800dd40:	701a      	strb	r2, [r3, #0]
 800dd42:	e00a      	b.n	800dd5a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	0f1b      	lsrs	r3, r3, #28
 800dd48:	b2da      	uxtb	r2, r3
 800dd4a:	7dfb      	ldrb	r3, [r7, #23]
 800dd4c:	005b      	lsls	r3, r3, #1
 800dd4e:	4619      	mov	r1, r3
 800dd50:	68bb      	ldr	r3, [r7, #8]
 800dd52:	440b      	add	r3, r1
 800dd54:	3237      	adds	r2, #55	; 0x37
 800dd56:	b2d2      	uxtb	r2, r2
 800dd58:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	011b      	lsls	r3, r3, #4
 800dd5e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dd60:	7dfb      	ldrb	r3, [r7, #23]
 800dd62:	005b      	lsls	r3, r3, #1
 800dd64:	3301      	adds	r3, #1
 800dd66:	68ba      	ldr	r2, [r7, #8]
 800dd68:	4413      	add	r3, r2
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dd6e:	7dfb      	ldrb	r3, [r7, #23]
 800dd70:	3301      	adds	r3, #1
 800dd72:	75fb      	strb	r3, [r7, #23]
 800dd74:	7dfa      	ldrb	r2, [r7, #23]
 800dd76:	79fb      	ldrb	r3, [r7, #7]
 800dd78:	429a      	cmp	r2, r3
 800dd7a:	d3d3      	bcc.n	800dd24 <IntToUnicode+0x18>
  }
}
 800dd7c:	bf00      	nop
 800dd7e:	bf00      	nop
 800dd80:	371c      	adds	r7, #28
 800dd82:	46bd      	mov	sp, r7
 800dd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd88:	4770      	bx	lr
	...

0800dd8c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b08a      	sub	sp, #40	; 0x28
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dd94:	f107 0314 	add.w	r3, r7, #20
 800dd98:	2200      	movs	r2, #0
 800dd9a:	601a      	str	r2, [r3, #0]
 800dd9c:	605a      	str	r2, [r3, #4]
 800dd9e:	609a      	str	r2, [r3, #8]
 800dda0:	60da      	str	r2, [r3, #12]
 800dda2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ddac:	d13a      	bne.n	800de24 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ddae:	2300      	movs	r3, #0
 800ddb0:	613b      	str	r3, [r7, #16]
 800ddb2:	4b1e      	ldr	r3, [pc, #120]	; (800de2c <HAL_PCD_MspInit+0xa0>)
 800ddb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddb6:	4a1d      	ldr	r2, [pc, #116]	; (800de2c <HAL_PCD_MspInit+0xa0>)
 800ddb8:	f043 0301 	orr.w	r3, r3, #1
 800ddbc:	6313      	str	r3, [r2, #48]	; 0x30
 800ddbe:	4b1b      	ldr	r3, [pc, #108]	; (800de2c <HAL_PCD_MspInit+0xa0>)
 800ddc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddc2:	f003 0301 	and.w	r3, r3, #1
 800ddc6:	613b      	str	r3, [r7, #16]
 800ddc8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 800ddca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ddce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ddd0:	2302      	movs	r3, #2
 800ddd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ddd8:	2303      	movs	r3, #3
 800ddda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dddc:	230a      	movs	r3, #10
 800ddde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dde0:	f107 0314 	add.w	r3, r7, #20
 800dde4:	4619      	mov	r1, r3
 800dde6:	4812      	ldr	r0, [pc, #72]	; (800de30 <HAL_PCD_MspInit+0xa4>)
 800dde8:	f7f4 fc88 	bl	80026fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ddec:	4b0f      	ldr	r3, [pc, #60]	; (800de2c <HAL_PCD_MspInit+0xa0>)
 800ddee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddf0:	4a0e      	ldr	r2, [pc, #56]	; (800de2c <HAL_PCD_MspInit+0xa0>)
 800ddf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddf6:	6353      	str	r3, [r2, #52]	; 0x34
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	60fb      	str	r3, [r7, #12]
 800ddfc:	4b0b      	ldr	r3, [pc, #44]	; (800de2c <HAL_PCD_MspInit+0xa0>)
 800ddfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de00:	4a0a      	ldr	r2, [pc, #40]	; (800de2c <HAL_PCD_MspInit+0xa0>)
 800de02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800de06:	6453      	str	r3, [r2, #68]	; 0x44
 800de08:	4b08      	ldr	r3, [pc, #32]	; (800de2c <HAL_PCD_MspInit+0xa0>)
 800de0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800de10:	60fb      	str	r3, [r7, #12]
 800de12:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800de14:	2200      	movs	r2, #0
 800de16:	2100      	movs	r1, #0
 800de18:	2043      	movs	r0, #67	; 0x43
 800de1a:	f7f4 fc34 	bl	8002686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800de1e:	2043      	movs	r0, #67	; 0x43
 800de20:	f7f4 fc4d 	bl	80026be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800de24:	bf00      	nop
 800de26:	3728      	adds	r7, #40	; 0x28
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}
 800de2c:	40023800 	.word	0x40023800
 800de30:	40020000 	.word	0x40020000

0800de34 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b082      	sub	sp, #8
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800de48:	4619      	mov	r1, r3
 800de4a:	4610      	mov	r0, r2
 800de4c:	f7fc f8b7 	bl	8009fbe <USBD_LL_SetupStage>
}
 800de50:	bf00      	nop
 800de52:	3708      	adds	r7, #8
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}

0800de58 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b082      	sub	sp, #8
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
 800de60:	460b      	mov	r3, r1
 800de62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800de6a:	78fa      	ldrb	r2, [r7, #3]
 800de6c:	6879      	ldr	r1, [r7, #4]
 800de6e:	4613      	mov	r3, r2
 800de70:	00db      	lsls	r3, r3, #3
 800de72:	4413      	add	r3, r2
 800de74:	009b      	lsls	r3, r3, #2
 800de76:	440b      	add	r3, r1
 800de78:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800de7c:	681a      	ldr	r2, [r3, #0]
 800de7e:	78fb      	ldrb	r3, [r7, #3]
 800de80:	4619      	mov	r1, r3
 800de82:	f7fc f8f1 	bl	800a068 <USBD_LL_DataOutStage>
}
 800de86:	bf00      	nop
 800de88:	3708      	adds	r7, #8
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bd80      	pop	{r7, pc}

0800de8e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de8e:	b580      	push	{r7, lr}
 800de90:	b082      	sub	sp, #8
 800de92:	af00      	add	r7, sp, #0
 800de94:	6078      	str	r0, [r7, #4]
 800de96:	460b      	mov	r3, r1
 800de98:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800dea0:	78fa      	ldrb	r2, [r7, #3]
 800dea2:	6879      	ldr	r1, [r7, #4]
 800dea4:	4613      	mov	r3, r2
 800dea6:	00db      	lsls	r3, r3, #3
 800dea8:	4413      	add	r3, r2
 800deaa:	009b      	lsls	r3, r3, #2
 800deac:	440b      	add	r3, r1
 800deae:	334c      	adds	r3, #76	; 0x4c
 800deb0:	681a      	ldr	r2, [r3, #0]
 800deb2:	78fb      	ldrb	r3, [r7, #3]
 800deb4:	4619      	mov	r1, r3
 800deb6:	f7fc f98a 	bl	800a1ce <USBD_LL_DataInStage>
}
 800deba:	bf00      	nop
 800debc:	3708      	adds	r7, #8
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}

0800dec2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dec2:	b580      	push	{r7, lr}
 800dec4:	b082      	sub	sp, #8
 800dec6:	af00      	add	r7, sp, #0
 800dec8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ded0:	4618      	mov	r0, r3
 800ded2:	f7fc fabe 	bl	800a452 <USBD_LL_SOF>
}
 800ded6:	bf00      	nop
 800ded8:	3708      	adds	r7, #8
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}

0800dede <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dede:	b580      	push	{r7, lr}
 800dee0:	b084      	sub	sp, #16
 800dee2:	af00      	add	r7, sp, #0
 800dee4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dee6:	2301      	movs	r3, #1
 800dee8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	68db      	ldr	r3, [r3, #12]
 800deee:	2b02      	cmp	r3, #2
 800def0:	d001      	beq.n	800def6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800def2:	f7f3 ff25 	bl	8001d40 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800defc:	7bfa      	ldrb	r2, [r7, #15]
 800defe:	4611      	mov	r1, r2
 800df00:	4618      	mov	r0, r3
 800df02:	f7fc fa68 	bl	800a3d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800df0c:	4618      	mov	r0, r3
 800df0e:	f7fc fa10 	bl	800a332 <USBD_LL_Reset>
}
 800df12:	bf00      	nop
 800df14:	3710      	adds	r7, #16
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}
	...

0800df1c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b082      	sub	sp, #8
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800df2a:	4618      	mov	r0, r3
 800df2c:	f7fc fa63 	bl	800a3f6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	687a      	ldr	r2, [r7, #4]
 800df3c:	6812      	ldr	r2, [r2, #0]
 800df3e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800df42:	f043 0301 	orr.w	r3, r3, #1
 800df46:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	6a1b      	ldr	r3, [r3, #32]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d005      	beq.n	800df5c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800df50:	4b04      	ldr	r3, [pc, #16]	; (800df64 <HAL_PCD_SuspendCallback+0x48>)
 800df52:	691b      	ldr	r3, [r3, #16]
 800df54:	4a03      	ldr	r2, [pc, #12]	; (800df64 <HAL_PCD_SuspendCallback+0x48>)
 800df56:	f043 0306 	orr.w	r3, r3, #6
 800df5a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800df5c:	bf00      	nop
 800df5e:	3708      	adds	r7, #8
 800df60:	46bd      	mov	sp, r7
 800df62:	bd80      	pop	{r7, pc}
 800df64:	e000ed00 	.word	0xe000ed00

0800df68 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b082      	sub	sp, #8
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800df76:	4618      	mov	r0, r3
 800df78:	f7fc fa53 	bl	800a422 <USBD_LL_Resume>
}
 800df7c:	bf00      	nop
 800df7e:	3708      	adds	r7, #8
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}

0800df84 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b082      	sub	sp, #8
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
 800df8c:	460b      	mov	r3, r1
 800df8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800df96:	78fa      	ldrb	r2, [r7, #3]
 800df98:	4611      	mov	r1, r2
 800df9a:	4618      	mov	r0, r3
 800df9c:	f7fc faab 	bl	800a4f6 <USBD_LL_IsoOUTIncomplete>
}
 800dfa0:	bf00      	nop
 800dfa2:	3708      	adds	r7, #8
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd80      	pop	{r7, pc}

0800dfa8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b082      	sub	sp, #8
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
 800dfb0:	460b      	mov	r3, r1
 800dfb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dfba:	78fa      	ldrb	r2, [r7, #3]
 800dfbc:	4611      	mov	r1, r2
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f7fc fa67 	bl	800a492 <USBD_LL_IsoINIncomplete>
}
 800dfc4:	bf00      	nop
 800dfc6:	3708      	adds	r7, #8
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}

0800dfcc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b082      	sub	sp, #8
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dfda:	4618      	mov	r0, r3
 800dfdc:	f7fc fabd 	bl	800a55a <USBD_LL_DevConnected>
}
 800dfe0:	bf00      	nop
 800dfe2:	3708      	adds	r7, #8
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bd80      	pop	{r7, pc}

0800dfe8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b082      	sub	sp, #8
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dff6:	4618      	mov	r0, r3
 800dff8:	f7fc faba 	bl	800a570 <USBD_LL_DevDisconnected>
}
 800dffc:	bf00      	nop
 800dffe:	3708      	adds	r7, #8
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}

0800e004 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b082      	sub	sp, #8
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	781b      	ldrb	r3, [r3, #0]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d13c      	bne.n	800e08e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e014:	4a20      	ldr	r2, [pc, #128]	; (800e098 <USBD_LL_Init+0x94>)
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	4a1e      	ldr	r2, [pc, #120]	; (800e098 <USBD_LL_Init+0x94>)
 800e020:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e024:	4b1c      	ldr	r3, [pc, #112]	; (800e098 <USBD_LL_Init+0x94>)
 800e026:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e02a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e02c:	4b1a      	ldr	r3, [pc, #104]	; (800e098 <USBD_LL_Init+0x94>)
 800e02e:	2204      	movs	r2, #4
 800e030:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e032:	4b19      	ldr	r3, [pc, #100]	; (800e098 <USBD_LL_Init+0x94>)
 800e034:	2202      	movs	r2, #2
 800e036:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e038:	4b17      	ldr	r3, [pc, #92]	; (800e098 <USBD_LL_Init+0x94>)
 800e03a:	2200      	movs	r2, #0
 800e03c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e03e:	4b16      	ldr	r3, [pc, #88]	; (800e098 <USBD_LL_Init+0x94>)
 800e040:	2202      	movs	r2, #2
 800e042:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e044:	4b14      	ldr	r3, [pc, #80]	; (800e098 <USBD_LL_Init+0x94>)
 800e046:	2200      	movs	r2, #0
 800e048:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e04a:	4b13      	ldr	r3, [pc, #76]	; (800e098 <USBD_LL_Init+0x94>)
 800e04c:	2200      	movs	r2, #0
 800e04e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e050:	4b11      	ldr	r3, [pc, #68]	; (800e098 <USBD_LL_Init+0x94>)
 800e052:	2200      	movs	r2, #0
 800e054:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e056:	4b10      	ldr	r3, [pc, #64]	; (800e098 <USBD_LL_Init+0x94>)
 800e058:	2200      	movs	r2, #0
 800e05a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e05c:	4b0e      	ldr	r3, [pc, #56]	; (800e098 <USBD_LL_Init+0x94>)
 800e05e:	2200      	movs	r2, #0
 800e060:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e062:	480d      	ldr	r0, [pc, #52]	; (800e098 <USBD_LL_Init+0x94>)
 800e064:	f7f5 ffcb 	bl	8003ffe <HAL_PCD_Init>
 800e068:	4603      	mov	r3, r0
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d001      	beq.n	800e072 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e06e:	f7f3 fe67 	bl	8001d40 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e072:	2180      	movs	r1, #128	; 0x80
 800e074:	4808      	ldr	r0, [pc, #32]	; (800e098 <USBD_LL_Init+0x94>)
 800e076:	f7f7 fa0a 	bl	800548e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e07a:	2240      	movs	r2, #64	; 0x40
 800e07c:	2100      	movs	r1, #0
 800e07e:	4806      	ldr	r0, [pc, #24]	; (800e098 <USBD_LL_Init+0x94>)
 800e080:	f7f7 f9be 	bl	8005400 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e084:	2280      	movs	r2, #128	; 0x80
 800e086:	2101      	movs	r1, #1
 800e088:	4803      	ldr	r0, [pc, #12]	; (800e098 <USBD_LL_Init+0x94>)
 800e08a:	f7f7 f9b9 	bl	8005400 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e08e:	2300      	movs	r3, #0
}
 800e090:	4618      	mov	r0, r3
 800e092:	3708      	adds	r7, #8
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}
 800e098:	20000db4 	.word	0x20000db4

0800e09c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b084      	sub	sp, #16
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	f7f6 f8c0 	bl	8004238 <HAL_PCD_Start>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0bc:	7bfb      	ldrb	r3, [r7, #15]
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f000 f930 	bl	800e324 <USBD_Get_USB_Status>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	3710      	adds	r7, #16
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd80      	pop	{r7, pc}

0800e0d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e0d2:	b580      	push	{r7, lr}
 800e0d4:	b084      	sub	sp, #16
 800e0d6:	af00      	add	r7, sp, #0
 800e0d8:	6078      	str	r0, [r7, #4]
 800e0da:	4608      	mov	r0, r1
 800e0dc:	4611      	mov	r1, r2
 800e0de:	461a      	mov	r2, r3
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	70fb      	strb	r3, [r7, #3]
 800e0e4:	460b      	mov	r3, r1
 800e0e6:	70bb      	strb	r3, [r7, #2]
 800e0e8:	4613      	mov	r3, r2
 800e0ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e0fa:	78bb      	ldrb	r3, [r7, #2]
 800e0fc:	883a      	ldrh	r2, [r7, #0]
 800e0fe:	78f9      	ldrb	r1, [r7, #3]
 800e100:	f7f6 fd91 	bl	8004c26 <HAL_PCD_EP_Open>
 800e104:	4603      	mov	r3, r0
 800e106:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e108:	7bfb      	ldrb	r3, [r7, #15]
 800e10a:	4618      	mov	r0, r3
 800e10c:	f000 f90a 	bl	800e324 <USBD_Get_USB_Status>
 800e110:	4603      	mov	r3, r0
 800e112:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e114:	7bbb      	ldrb	r3, [r7, #14]
}
 800e116:	4618      	mov	r0, r3
 800e118:	3710      	adds	r7, #16
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}

0800e11e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e11e:	b580      	push	{r7, lr}
 800e120:	b084      	sub	sp, #16
 800e122:	af00      	add	r7, sp, #0
 800e124:	6078      	str	r0, [r7, #4]
 800e126:	460b      	mov	r3, r1
 800e128:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e12a:	2300      	movs	r3, #0
 800e12c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e12e:	2300      	movs	r3, #0
 800e130:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e138:	78fa      	ldrb	r2, [r7, #3]
 800e13a:	4611      	mov	r1, r2
 800e13c:	4618      	mov	r0, r3
 800e13e:	f7f6 fdda 	bl	8004cf6 <HAL_PCD_EP_Close>
 800e142:	4603      	mov	r3, r0
 800e144:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e146:	7bfb      	ldrb	r3, [r7, #15]
 800e148:	4618      	mov	r0, r3
 800e14a:	f000 f8eb 	bl	800e324 <USBD_Get_USB_Status>
 800e14e:	4603      	mov	r3, r0
 800e150:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e152:	7bbb      	ldrb	r3, [r7, #14]
}
 800e154:	4618      	mov	r0, r3
 800e156:	3710      	adds	r7, #16
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}

0800e15c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b084      	sub	sp, #16
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
 800e164:	460b      	mov	r3, r1
 800e166:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e168:	2300      	movs	r3, #0
 800e16a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e16c:	2300      	movs	r3, #0
 800e16e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e176:	78fa      	ldrb	r2, [r7, #3]
 800e178:	4611      	mov	r1, r2
 800e17a:	4618      	mov	r0, r3
 800e17c:	f7f6 fe9a 	bl	8004eb4 <HAL_PCD_EP_SetStall>
 800e180:	4603      	mov	r3, r0
 800e182:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e184:	7bfb      	ldrb	r3, [r7, #15]
 800e186:	4618      	mov	r0, r3
 800e188:	f000 f8cc 	bl	800e324 <USBD_Get_USB_Status>
 800e18c:	4603      	mov	r3, r0
 800e18e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e190:	7bbb      	ldrb	r3, [r7, #14]
}
 800e192:	4618      	mov	r0, r3
 800e194:	3710      	adds	r7, #16
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}

0800e19a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e19a:	b580      	push	{r7, lr}
 800e19c:	b084      	sub	sp, #16
 800e19e:	af00      	add	r7, sp, #0
 800e1a0:	6078      	str	r0, [r7, #4]
 800e1a2:	460b      	mov	r3, r1
 800e1a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e1b4:	78fa      	ldrb	r2, [r7, #3]
 800e1b6:	4611      	mov	r1, r2
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f7f6 fedf 	bl	8004f7c <HAL_PCD_EP_ClrStall>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1c2:	7bfb      	ldrb	r3, [r7, #15]
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	f000 f8ad 	bl	800e324 <USBD_Get_USB_Status>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	3710      	adds	r7, #16
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	bd80      	pop	{r7, pc}

0800e1d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1d8:	b480      	push	{r7}
 800e1da:	b085      	sub	sp, #20
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
 800e1e0:	460b      	mov	r3, r1
 800e1e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e1ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e1ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	da0b      	bge.n	800e20c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e1f4:	78fb      	ldrb	r3, [r7, #3]
 800e1f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e1fa:	68f9      	ldr	r1, [r7, #12]
 800e1fc:	4613      	mov	r3, r2
 800e1fe:	00db      	lsls	r3, r3, #3
 800e200:	4413      	add	r3, r2
 800e202:	009b      	lsls	r3, r3, #2
 800e204:	440b      	add	r3, r1
 800e206:	333e      	adds	r3, #62	; 0x3e
 800e208:	781b      	ldrb	r3, [r3, #0]
 800e20a:	e00b      	b.n	800e224 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e20c:	78fb      	ldrb	r3, [r7, #3]
 800e20e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e212:	68f9      	ldr	r1, [r7, #12]
 800e214:	4613      	mov	r3, r2
 800e216:	00db      	lsls	r3, r3, #3
 800e218:	4413      	add	r3, r2
 800e21a:	009b      	lsls	r3, r3, #2
 800e21c:	440b      	add	r3, r1
 800e21e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e222:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e224:	4618      	mov	r0, r3
 800e226:	3714      	adds	r7, #20
 800e228:	46bd      	mov	sp, r7
 800e22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22e:	4770      	bx	lr

0800e230 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b084      	sub	sp, #16
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
 800e238:	460b      	mov	r3, r1
 800e23a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e23c:	2300      	movs	r3, #0
 800e23e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e240:	2300      	movs	r3, #0
 800e242:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e24a:	78fa      	ldrb	r2, [r7, #3]
 800e24c:	4611      	mov	r1, r2
 800e24e:	4618      	mov	r0, r3
 800e250:	f7f6 fcc4 	bl	8004bdc <HAL_PCD_SetAddress>
 800e254:	4603      	mov	r3, r0
 800e256:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e258:	7bfb      	ldrb	r3, [r7, #15]
 800e25a:	4618      	mov	r0, r3
 800e25c:	f000 f862 	bl	800e324 <USBD_Get_USB_Status>
 800e260:	4603      	mov	r3, r0
 800e262:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e264:	7bbb      	ldrb	r3, [r7, #14]
}
 800e266:	4618      	mov	r0, r3
 800e268:	3710      	adds	r7, #16
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd80      	pop	{r7, pc}

0800e26e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e26e:	b580      	push	{r7, lr}
 800e270:	b086      	sub	sp, #24
 800e272:	af00      	add	r7, sp, #0
 800e274:	60f8      	str	r0, [r7, #12]
 800e276:	607a      	str	r2, [r7, #4]
 800e278:	603b      	str	r3, [r7, #0]
 800e27a:	460b      	mov	r3, r1
 800e27c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e27e:	2300      	movs	r3, #0
 800e280:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e282:	2300      	movs	r3, #0
 800e284:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e28c:	7af9      	ldrb	r1, [r7, #11]
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	687a      	ldr	r2, [r7, #4]
 800e292:	f7f6 fdc5 	bl	8004e20 <HAL_PCD_EP_Transmit>
 800e296:	4603      	mov	r3, r0
 800e298:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e29a:	7dfb      	ldrb	r3, [r7, #23]
 800e29c:	4618      	mov	r0, r3
 800e29e:	f000 f841 	bl	800e324 <USBD_Get_USB_Status>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e2a6:	7dbb      	ldrb	r3, [r7, #22]
}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	3718      	adds	r7, #24
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}

0800e2b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b086      	sub	sp, #24
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	60f8      	str	r0, [r7, #12]
 800e2b8:	607a      	str	r2, [r7, #4]
 800e2ba:	603b      	str	r3, [r7, #0]
 800e2bc:	460b      	mov	r3, r1
 800e2be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e2ce:	7af9      	ldrb	r1, [r7, #11]
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	687a      	ldr	r2, [r7, #4]
 800e2d4:	f7f6 fd59 	bl	8004d8a <HAL_PCD_EP_Receive>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2dc:	7dfb      	ldrb	r3, [r7, #23]
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f000 f820 	bl	800e324 <USBD_Get_USB_Status>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e2e8:	7dbb      	ldrb	r3, [r7, #22]
}
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	3718      	adds	r7, #24
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	bd80      	pop	{r7, pc}
	...

0800e2f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	b083      	sub	sp, #12
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e2fc:	4b03      	ldr	r3, [pc, #12]	; (800e30c <USBD_static_malloc+0x18>)
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	370c      	adds	r7, #12
 800e302:	46bd      	mov	sp, r7
 800e304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e308:	4770      	bx	lr
 800e30a:	bf00      	nop
 800e30c:	200012c0 	.word	0x200012c0

0800e310 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e310:	b480      	push	{r7}
 800e312:	b083      	sub	sp, #12
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]

}
 800e318:	bf00      	nop
 800e31a:	370c      	adds	r7, #12
 800e31c:	46bd      	mov	sp, r7
 800e31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e322:	4770      	bx	lr

0800e324 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e324:	b480      	push	{r7}
 800e326:	b085      	sub	sp, #20
 800e328:	af00      	add	r7, sp, #0
 800e32a:	4603      	mov	r3, r0
 800e32c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e32e:	2300      	movs	r3, #0
 800e330:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e332:	79fb      	ldrb	r3, [r7, #7]
 800e334:	2b03      	cmp	r3, #3
 800e336:	d817      	bhi.n	800e368 <USBD_Get_USB_Status+0x44>
 800e338:	a201      	add	r2, pc, #4	; (adr r2, 800e340 <USBD_Get_USB_Status+0x1c>)
 800e33a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e33e:	bf00      	nop
 800e340:	0800e351 	.word	0x0800e351
 800e344:	0800e357 	.word	0x0800e357
 800e348:	0800e35d 	.word	0x0800e35d
 800e34c:	0800e363 	.word	0x0800e363
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e350:	2300      	movs	r3, #0
 800e352:	73fb      	strb	r3, [r7, #15]
    break;
 800e354:	e00b      	b.n	800e36e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e356:	2303      	movs	r3, #3
 800e358:	73fb      	strb	r3, [r7, #15]
    break;
 800e35a:	e008      	b.n	800e36e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e35c:	2301      	movs	r3, #1
 800e35e:	73fb      	strb	r3, [r7, #15]
    break;
 800e360:	e005      	b.n	800e36e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e362:	2303      	movs	r3, #3
 800e364:	73fb      	strb	r3, [r7, #15]
    break;
 800e366:	e002      	b.n	800e36e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e368:	2303      	movs	r3, #3
 800e36a:	73fb      	strb	r3, [r7, #15]
    break;
 800e36c:	bf00      	nop
  }
  return usb_status;
 800e36e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e370:	4618      	mov	r0, r3
 800e372:	3714      	adds	r7, #20
 800e374:	46bd      	mov	sp, r7
 800e376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37a:	4770      	bx	lr

0800e37c <__errno>:
 800e37c:	4b01      	ldr	r3, [pc, #4]	; (800e384 <__errno+0x8>)
 800e37e:	6818      	ldr	r0, [r3, #0]
 800e380:	4770      	bx	lr
 800e382:	bf00      	nop
 800e384:	2000012c 	.word	0x2000012c

0800e388 <__libc_init_array>:
 800e388:	b570      	push	{r4, r5, r6, lr}
 800e38a:	4d0d      	ldr	r5, [pc, #52]	; (800e3c0 <__libc_init_array+0x38>)
 800e38c:	4c0d      	ldr	r4, [pc, #52]	; (800e3c4 <__libc_init_array+0x3c>)
 800e38e:	1b64      	subs	r4, r4, r5
 800e390:	10a4      	asrs	r4, r4, #2
 800e392:	2600      	movs	r6, #0
 800e394:	42a6      	cmp	r6, r4
 800e396:	d109      	bne.n	800e3ac <__libc_init_array+0x24>
 800e398:	4d0b      	ldr	r5, [pc, #44]	; (800e3c8 <__libc_init_array+0x40>)
 800e39a:	4c0c      	ldr	r4, [pc, #48]	; (800e3cc <__libc_init_array+0x44>)
 800e39c:	f001 fa14 	bl	800f7c8 <_init>
 800e3a0:	1b64      	subs	r4, r4, r5
 800e3a2:	10a4      	asrs	r4, r4, #2
 800e3a4:	2600      	movs	r6, #0
 800e3a6:	42a6      	cmp	r6, r4
 800e3a8:	d105      	bne.n	800e3b6 <__libc_init_array+0x2e>
 800e3aa:	bd70      	pop	{r4, r5, r6, pc}
 800e3ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3b0:	4798      	blx	r3
 800e3b2:	3601      	adds	r6, #1
 800e3b4:	e7ee      	b.n	800e394 <__libc_init_array+0xc>
 800e3b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3ba:	4798      	blx	r3
 800e3bc:	3601      	adds	r6, #1
 800e3be:	e7f2      	b.n	800e3a6 <__libc_init_array+0x1e>
 800e3c0:	08011664 	.word	0x08011664
 800e3c4:	08011664 	.word	0x08011664
 800e3c8:	08011664 	.word	0x08011664
 800e3cc:	08011668 	.word	0x08011668

0800e3d0 <memset>:
 800e3d0:	4402      	add	r2, r0
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	4293      	cmp	r3, r2
 800e3d6:	d100      	bne.n	800e3da <memset+0xa>
 800e3d8:	4770      	bx	lr
 800e3da:	f803 1b01 	strb.w	r1, [r3], #1
 800e3de:	e7f9      	b.n	800e3d4 <memset+0x4>

0800e3e0 <iprintf>:
 800e3e0:	b40f      	push	{r0, r1, r2, r3}
 800e3e2:	4b0a      	ldr	r3, [pc, #40]	; (800e40c <iprintf+0x2c>)
 800e3e4:	b513      	push	{r0, r1, r4, lr}
 800e3e6:	681c      	ldr	r4, [r3, #0]
 800e3e8:	b124      	cbz	r4, 800e3f4 <iprintf+0x14>
 800e3ea:	69a3      	ldr	r3, [r4, #24]
 800e3ec:	b913      	cbnz	r3, 800e3f4 <iprintf+0x14>
 800e3ee:	4620      	mov	r0, r4
 800e3f0:	f000 fa92 	bl	800e918 <__sinit>
 800e3f4:	ab05      	add	r3, sp, #20
 800e3f6:	9a04      	ldr	r2, [sp, #16]
 800e3f8:	68a1      	ldr	r1, [r4, #8]
 800e3fa:	9301      	str	r3, [sp, #4]
 800e3fc:	4620      	mov	r0, r4
 800e3fe:	f000 fdf7 	bl	800eff0 <_vfiprintf_r>
 800e402:	b002      	add	sp, #8
 800e404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e408:	b004      	add	sp, #16
 800e40a:	4770      	bx	lr
 800e40c:	2000012c 	.word	0x2000012c

0800e410 <_puts_r>:
 800e410:	b570      	push	{r4, r5, r6, lr}
 800e412:	460e      	mov	r6, r1
 800e414:	4605      	mov	r5, r0
 800e416:	b118      	cbz	r0, 800e420 <_puts_r+0x10>
 800e418:	6983      	ldr	r3, [r0, #24]
 800e41a:	b90b      	cbnz	r3, 800e420 <_puts_r+0x10>
 800e41c:	f000 fa7c 	bl	800e918 <__sinit>
 800e420:	69ab      	ldr	r3, [r5, #24]
 800e422:	68ac      	ldr	r4, [r5, #8]
 800e424:	b913      	cbnz	r3, 800e42c <_puts_r+0x1c>
 800e426:	4628      	mov	r0, r5
 800e428:	f000 fa76 	bl	800e918 <__sinit>
 800e42c:	4b2c      	ldr	r3, [pc, #176]	; (800e4e0 <_puts_r+0xd0>)
 800e42e:	429c      	cmp	r4, r3
 800e430:	d120      	bne.n	800e474 <_puts_r+0x64>
 800e432:	686c      	ldr	r4, [r5, #4]
 800e434:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e436:	07db      	lsls	r3, r3, #31
 800e438:	d405      	bmi.n	800e446 <_puts_r+0x36>
 800e43a:	89a3      	ldrh	r3, [r4, #12]
 800e43c:	0598      	lsls	r0, r3, #22
 800e43e:	d402      	bmi.n	800e446 <_puts_r+0x36>
 800e440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e442:	f000 fb07 	bl	800ea54 <__retarget_lock_acquire_recursive>
 800e446:	89a3      	ldrh	r3, [r4, #12]
 800e448:	0719      	lsls	r1, r3, #28
 800e44a:	d51d      	bpl.n	800e488 <_puts_r+0x78>
 800e44c:	6923      	ldr	r3, [r4, #16]
 800e44e:	b1db      	cbz	r3, 800e488 <_puts_r+0x78>
 800e450:	3e01      	subs	r6, #1
 800e452:	68a3      	ldr	r3, [r4, #8]
 800e454:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e458:	3b01      	subs	r3, #1
 800e45a:	60a3      	str	r3, [r4, #8]
 800e45c:	bb39      	cbnz	r1, 800e4ae <_puts_r+0x9e>
 800e45e:	2b00      	cmp	r3, #0
 800e460:	da38      	bge.n	800e4d4 <_puts_r+0xc4>
 800e462:	4622      	mov	r2, r4
 800e464:	210a      	movs	r1, #10
 800e466:	4628      	mov	r0, r5
 800e468:	f000 f87c 	bl	800e564 <__swbuf_r>
 800e46c:	3001      	adds	r0, #1
 800e46e:	d011      	beq.n	800e494 <_puts_r+0x84>
 800e470:	250a      	movs	r5, #10
 800e472:	e011      	b.n	800e498 <_puts_r+0x88>
 800e474:	4b1b      	ldr	r3, [pc, #108]	; (800e4e4 <_puts_r+0xd4>)
 800e476:	429c      	cmp	r4, r3
 800e478:	d101      	bne.n	800e47e <_puts_r+0x6e>
 800e47a:	68ac      	ldr	r4, [r5, #8]
 800e47c:	e7da      	b.n	800e434 <_puts_r+0x24>
 800e47e:	4b1a      	ldr	r3, [pc, #104]	; (800e4e8 <_puts_r+0xd8>)
 800e480:	429c      	cmp	r4, r3
 800e482:	bf08      	it	eq
 800e484:	68ec      	ldreq	r4, [r5, #12]
 800e486:	e7d5      	b.n	800e434 <_puts_r+0x24>
 800e488:	4621      	mov	r1, r4
 800e48a:	4628      	mov	r0, r5
 800e48c:	f000 f8bc 	bl	800e608 <__swsetup_r>
 800e490:	2800      	cmp	r0, #0
 800e492:	d0dd      	beq.n	800e450 <_puts_r+0x40>
 800e494:	f04f 35ff 	mov.w	r5, #4294967295
 800e498:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e49a:	07da      	lsls	r2, r3, #31
 800e49c:	d405      	bmi.n	800e4aa <_puts_r+0x9a>
 800e49e:	89a3      	ldrh	r3, [r4, #12]
 800e4a0:	059b      	lsls	r3, r3, #22
 800e4a2:	d402      	bmi.n	800e4aa <_puts_r+0x9a>
 800e4a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e4a6:	f000 fad6 	bl	800ea56 <__retarget_lock_release_recursive>
 800e4aa:	4628      	mov	r0, r5
 800e4ac:	bd70      	pop	{r4, r5, r6, pc}
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	da04      	bge.n	800e4bc <_puts_r+0xac>
 800e4b2:	69a2      	ldr	r2, [r4, #24]
 800e4b4:	429a      	cmp	r2, r3
 800e4b6:	dc06      	bgt.n	800e4c6 <_puts_r+0xb6>
 800e4b8:	290a      	cmp	r1, #10
 800e4ba:	d004      	beq.n	800e4c6 <_puts_r+0xb6>
 800e4bc:	6823      	ldr	r3, [r4, #0]
 800e4be:	1c5a      	adds	r2, r3, #1
 800e4c0:	6022      	str	r2, [r4, #0]
 800e4c2:	7019      	strb	r1, [r3, #0]
 800e4c4:	e7c5      	b.n	800e452 <_puts_r+0x42>
 800e4c6:	4622      	mov	r2, r4
 800e4c8:	4628      	mov	r0, r5
 800e4ca:	f000 f84b 	bl	800e564 <__swbuf_r>
 800e4ce:	3001      	adds	r0, #1
 800e4d0:	d1bf      	bne.n	800e452 <_puts_r+0x42>
 800e4d2:	e7df      	b.n	800e494 <_puts_r+0x84>
 800e4d4:	6823      	ldr	r3, [r4, #0]
 800e4d6:	250a      	movs	r5, #10
 800e4d8:	1c5a      	adds	r2, r3, #1
 800e4da:	6022      	str	r2, [r4, #0]
 800e4dc:	701d      	strb	r5, [r3, #0]
 800e4de:	e7db      	b.n	800e498 <_puts_r+0x88>
 800e4e0:	080115e8 	.word	0x080115e8
 800e4e4:	08011608 	.word	0x08011608
 800e4e8:	080115c8 	.word	0x080115c8

0800e4ec <puts>:
 800e4ec:	4b02      	ldr	r3, [pc, #8]	; (800e4f8 <puts+0xc>)
 800e4ee:	4601      	mov	r1, r0
 800e4f0:	6818      	ldr	r0, [r3, #0]
 800e4f2:	f7ff bf8d 	b.w	800e410 <_puts_r>
 800e4f6:	bf00      	nop
 800e4f8:	2000012c 	.word	0x2000012c

0800e4fc <sniprintf>:
 800e4fc:	b40c      	push	{r2, r3}
 800e4fe:	b530      	push	{r4, r5, lr}
 800e500:	4b17      	ldr	r3, [pc, #92]	; (800e560 <sniprintf+0x64>)
 800e502:	1e0c      	subs	r4, r1, #0
 800e504:	681d      	ldr	r5, [r3, #0]
 800e506:	b09d      	sub	sp, #116	; 0x74
 800e508:	da08      	bge.n	800e51c <sniprintf+0x20>
 800e50a:	238b      	movs	r3, #139	; 0x8b
 800e50c:	602b      	str	r3, [r5, #0]
 800e50e:	f04f 30ff 	mov.w	r0, #4294967295
 800e512:	b01d      	add	sp, #116	; 0x74
 800e514:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e518:	b002      	add	sp, #8
 800e51a:	4770      	bx	lr
 800e51c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e520:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e524:	bf14      	ite	ne
 800e526:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e52a:	4623      	moveq	r3, r4
 800e52c:	9304      	str	r3, [sp, #16]
 800e52e:	9307      	str	r3, [sp, #28]
 800e530:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e534:	9002      	str	r0, [sp, #8]
 800e536:	9006      	str	r0, [sp, #24]
 800e538:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e53c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e53e:	ab21      	add	r3, sp, #132	; 0x84
 800e540:	a902      	add	r1, sp, #8
 800e542:	4628      	mov	r0, r5
 800e544:	9301      	str	r3, [sp, #4]
 800e546:	f000 fc29 	bl	800ed9c <_svfiprintf_r>
 800e54a:	1c43      	adds	r3, r0, #1
 800e54c:	bfbc      	itt	lt
 800e54e:	238b      	movlt	r3, #139	; 0x8b
 800e550:	602b      	strlt	r3, [r5, #0]
 800e552:	2c00      	cmp	r4, #0
 800e554:	d0dd      	beq.n	800e512 <sniprintf+0x16>
 800e556:	9b02      	ldr	r3, [sp, #8]
 800e558:	2200      	movs	r2, #0
 800e55a:	701a      	strb	r2, [r3, #0]
 800e55c:	e7d9      	b.n	800e512 <sniprintf+0x16>
 800e55e:	bf00      	nop
 800e560:	2000012c 	.word	0x2000012c

0800e564 <__swbuf_r>:
 800e564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e566:	460e      	mov	r6, r1
 800e568:	4614      	mov	r4, r2
 800e56a:	4605      	mov	r5, r0
 800e56c:	b118      	cbz	r0, 800e576 <__swbuf_r+0x12>
 800e56e:	6983      	ldr	r3, [r0, #24]
 800e570:	b90b      	cbnz	r3, 800e576 <__swbuf_r+0x12>
 800e572:	f000 f9d1 	bl	800e918 <__sinit>
 800e576:	4b21      	ldr	r3, [pc, #132]	; (800e5fc <__swbuf_r+0x98>)
 800e578:	429c      	cmp	r4, r3
 800e57a:	d12b      	bne.n	800e5d4 <__swbuf_r+0x70>
 800e57c:	686c      	ldr	r4, [r5, #4]
 800e57e:	69a3      	ldr	r3, [r4, #24]
 800e580:	60a3      	str	r3, [r4, #8]
 800e582:	89a3      	ldrh	r3, [r4, #12]
 800e584:	071a      	lsls	r2, r3, #28
 800e586:	d52f      	bpl.n	800e5e8 <__swbuf_r+0x84>
 800e588:	6923      	ldr	r3, [r4, #16]
 800e58a:	b36b      	cbz	r3, 800e5e8 <__swbuf_r+0x84>
 800e58c:	6923      	ldr	r3, [r4, #16]
 800e58e:	6820      	ldr	r0, [r4, #0]
 800e590:	1ac0      	subs	r0, r0, r3
 800e592:	6963      	ldr	r3, [r4, #20]
 800e594:	b2f6      	uxtb	r6, r6
 800e596:	4283      	cmp	r3, r0
 800e598:	4637      	mov	r7, r6
 800e59a:	dc04      	bgt.n	800e5a6 <__swbuf_r+0x42>
 800e59c:	4621      	mov	r1, r4
 800e59e:	4628      	mov	r0, r5
 800e5a0:	f000 f926 	bl	800e7f0 <_fflush_r>
 800e5a4:	bb30      	cbnz	r0, 800e5f4 <__swbuf_r+0x90>
 800e5a6:	68a3      	ldr	r3, [r4, #8]
 800e5a8:	3b01      	subs	r3, #1
 800e5aa:	60a3      	str	r3, [r4, #8]
 800e5ac:	6823      	ldr	r3, [r4, #0]
 800e5ae:	1c5a      	adds	r2, r3, #1
 800e5b0:	6022      	str	r2, [r4, #0]
 800e5b2:	701e      	strb	r6, [r3, #0]
 800e5b4:	6963      	ldr	r3, [r4, #20]
 800e5b6:	3001      	adds	r0, #1
 800e5b8:	4283      	cmp	r3, r0
 800e5ba:	d004      	beq.n	800e5c6 <__swbuf_r+0x62>
 800e5bc:	89a3      	ldrh	r3, [r4, #12]
 800e5be:	07db      	lsls	r3, r3, #31
 800e5c0:	d506      	bpl.n	800e5d0 <__swbuf_r+0x6c>
 800e5c2:	2e0a      	cmp	r6, #10
 800e5c4:	d104      	bne.n	800e5d0 <__swbuf_r+0x6c>
 800e5c6:	4621      	mov	r1, r4
 800e5c8:	4628      	mov	r0, r5
 800e5ca:	f000 f911 	bl	800e7f0 <_fflush_r>
 800e5ce:	b988      	cbnz	r0, 800e5f4 <__swbuf_r+0x90>
 800e5d0:	4638      	mov	r0, r7
 800e5d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5d4:	4b0a      	ldr	r3, [pc, #40]	; (800e600 <__swbuf_r+0x9c>)
 800e5d6:	429c      	cmp	r4, r3
 800e5d8:	d101      	bne.n	800e5de <__swbuf_r+0x7a>
 800e5da:	68ac      	ldr	r4, [r5, #8]
 800e5dc:	e7cf      	b.n	800e57e <__swbuf_r+0x1a>
 800e5de:	4b09      	ldr	r3, [pc, #36]	; (800e604 <__swbuf_r+0xa0>)
 800e5e0:	429c      	cmp	r4, r3
 800e5e2:	bf08      	it	eq
 800e5e4:	68ec      	ldreq	r4, [r5, #12]
 800e5e6:	e7ca      	b.n	800e57e <__swbuf_r+0x1a>
 800e5e8:	4621      	mov	r1, r4
 800e5ea:	4628      	mov	r0, r5
 800e5ec:	f000 f80c 	bl	800e608 <__swsetup_r>
 800e5f0:	2800      	cmp	r0, #0
 800e5f2:	d0cb      	beq.n	800e58c <__swbuf_r+0x28>
 800e5f4:	f04f 37ff 	mov.w	r7, #4294967295
 800e5f8:	e7ea      	b.n	800e5d0 <__swbuf_r+0x6c>
 800e5fa:	bf00      	nop
 800e5fc:	080115e8 	.word	0x080115e8
 800e600:	08011608 	.word	0x08011608
 800e604:	080115c8 	.word	0x080115c8

0800e608 <__swsetup_r>:
 800e608:	4b32      	ldr	r3, [pc, #200]	; (800e6d4 <__swsetup_r+0xcc>)
 800e60a:	b570      	push	{r4, r5, r6, lr}
 800e60c:	681d      	ldr	r5, [r3, #0]
 800e60e:	4606      	mov	r6, r0
 800e610:	460c      	mov	r4, r1
 800e612:	b125      	cbz	r5, 800e61e <__swsetup_r+0x16>
 800e614:	69ab      	ldr	r3, [r5, #24]
 800e616:	b913      	cbnz	r3, 800e61e <__swsetup_r+0x16>
 800e618:	4628      	mov	r0, r5
 800e61a:	f000 f97d 	bl	800e918 <__sinit>
 800e61e:	4b2e      	ldr	r3, [pc, #184]	; (800e6d8 <__swsetup_r+0xd0>)
 800e620:	429c      	cmp	r4, r3
 800e622:	d10f      	bne.n	800e644 <__swsetup_r+0x3c>
 800e624:	686c      	ldr	r4, [r5, #4]
 800e626:	89a3      	ldrh	r3, [r4, #12]
 800e628:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e62c:	0719      	lsls	r1, r3, #28
 800e62e:	d42c      	bmi.n	800e68a <__swsetup_r+0x82>
 800e630:	06dd      	lsls	r5, r3, #27
 800e632:	d411      	bmi.n	800e658 <__swsetup_r+0x50>
 800e634:	2309      	movs	r3, #9
 800e636:	6033      	str	r3, [r6, #0]
 800e638:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e63c:	81a3      	strh	r3, [r4, #12]
 800e63e:	f04f 30ff 	mov.w	r0, #4294967295
 800e642:	e03e      	b.n	800e6c2 <__swsetup_r+0xba>
 800e644:	4b25      	ldr	r3, [pc, #148]	; (800e6dc <__swsetup_r+0xd4>)
 800e646:	429c      	cmp	r4, r3
 800e648:	d101      	bne.n	800e64e <__swsetup_r+0x46>
 800e64a:	68ac      	ldr	r4, [r5, #8]
 800e64c:	e7eb      	b.n	800e626 <__swsetup_r+0x1e>
 800e64e:	4b24      	ldr	r3, [pc, #144]	; (800e6e0 <__swsetup_r+0xd8>)
 800e650:	429c      	cmp	r4, r3
 800e652:	bf08      	it	eq
 800e654:	68ec      	ldreq	r4, [r5, #12]
 800e656:	e7e6      	b.n	800e626 <__swsetup_r+0x1e>
 800e658:	0758      	lsls	r0, r3, #29
 800e65a:	d512      	bpl.n	800e682 <__swsetup_r+0x7a>
 800e65c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e65e:	b141      	cbz	r1, 800e672 <__swsetup_r+0x6a>
 800e660:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e664:	4299      	cmp	r1, r3
 800e666:	d002      	beq.n	800e66e <__swsetup_r+0x66>
 800e668:	4630      	mov	r0, r6
 800e66a:	f000 fa5b 	bl	800eb24 <_free_r>
 800e66e:	2300      	movs	r3, #0
 800e670:	6363      	str	r3, [r4, #52]	; 0x34
 800e672:	89a3      	ldrh	r3, [r4, #12]
 800e674:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e678:	81a3      	strh	r3, [r4, #12]
 800e67a:	2300      	movs	r3, #0
 800e67c:	6063      	str	r3, [r4, #4]
 800e67e:	6923      	ldr	r3, [r4, #16]
 800e680:	6023      	str	r3, [r4, #0]
 800e682:	89a3      	ldrh	r3, [r4, #12]
 800e684:	f043 0308 	orr.w	r3, r3, #8
 800e688:	81a3      	strh	r3, [r4, #12]
 800e68a:	6923      	ldr	r3, [r4, #16]
 800e68c:	b94b      	cbnz	r3, 800e6a2 <__swsetup_r+0x9a>
 800e68e:	89a3      	ldrh	r3, [r4, #12]
 800e690:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e698:	d003      	beq.n	800e6a2 <__swsetup_r+0x9a>
 800e69a:	4621      	mov	r1, r4
 800e69c:	4630      	mov	r0, r6
 800e69e:	f000 fa01 	bl	800eaa4 <__smakebuf_r>
 800e6a2:	89a0      	ldrh	r0, [r4, #12]
 800e6a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e6a8:	f010 0301 	ands.w	r3, r0, #1
 800e6ac:	d00a      	beq.n	800e6c4 <__swsetup_r+0xbc>
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	60a3      	str	r3, [r4, #8]
 800e6b2:	6963      	ldr	r3, [r4, #20]
 800e6b4:	425b      	negs	r3, r3
 800e6b6:	61a3      	str	r3, [r4, #24]
 800e6b8:	6923      	ldr	r3, [r4, #16]
 800e6ba:	b943      	cbnz	r3, 800e6ce <__swsetup_r+0xc6>
 800e6bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e6c0:	d1ba      	bne.n	800e638 <__swsetup_r+0x30>
 800e6c2:	bd70      	pop	{r4, r5, r6, pc}
 800e6c4:	0781      	lsls	r1, r0, #30
 800e6c6:	bf58      	it	pl
 800e6c8:	6963      	ldrpl	r3, [r4, #20]
 800e6ca:	60a3      	str	r3, [r4, #8]
 800e6cc:	e7f4      	b.n	800e6b8 <__swsetup_r+0xb0>
 800e6ce:	2000      	movs	r0, #0
 800e6d0:	e7f7      	b.n	800e6c2 <__swsetup_r+0xba>
 800e6d2:	bf00      	nop
 800e6d4:	2000012c 	.word	0x2000012c
 800e6d8:	080115e8 	.word	0x080115e8
 800e6dc:	08011608 	.word	0x08011608
 800e6e0:	080115c8 	.word	0x080115c8

0800e6e4 <__sflush_r>:
 800e6e4:	898a      	ldrh	r2, [r1, #12]
 800e6e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6ea:	4605      	mov	r5, r0
 800e6ec:	0710      	lsls	r0, r2, #28
 800e6ee:	460c      	mov	r4, r1
 800e6f0:	d458      	bmi.n	800e7a4 <__sflush_r+0xc0>
 800e6f2:	684b      	ldr	r3, [r1, #4]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	dc05      	bgt.n	800e704 <__sflush_r+0x20>
 800e6f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	dc02      	bgt.n	800e704 <__sflush_r+0x20>
 800e6fe:	2000      	movs	r0, #0
 800e700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e704:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e706:	2e00      	cmp	r6, #0
 800e708:	d0f9      	beq.n	800e6fe <__sflush_r+0x1a>
 800e70a:	2300      	movs	r3, #0
 800e70c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e710:	682f      	ldr	r7, [r5, #0]
 800e712:	602b      	str	r3, [r5, #0]
 800e714:	d032      	beq.n	800e77c <__sflush_r+0x98>
 800e716:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e718:	89a3      	ldrh	r3, [r4, #12]
 800e71a:	075a      	lsls	r2, r3, #29
 800e71c:	d505      	bpl.n	800e72a <__sflush_r+0x46>
 800e71e:	6863      	ldr	r3, [r4, #4]
 800e720:	1ac0      	subs	r0, r0, r3
 800e722:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e724:	b10b      	cbz	r3, 800e72a <__sflush_r+0x46>
 800e726:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e728:	1ac0      	subs	r0, r0, r3
 800e72a:	2300      	movs	r3, #0
 800e72c:	4602      	mov	r2, r0
 800e72e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e730:	6a21      	ldr	r1, [r4, #32]
 800e732:	4628      	mov	r0, r5
 800e734:	47b0      	blx	r6
 800e736:	1c43      	adds	r3, r0, #1
 800e738:	89a3      	ldrh	r3, [r4, #12]
 800e73a:	d106      	bne.n	800e74a <__sflush_r+0x66>
 800e73c:	6829      	ldr	r1, [r5, #0]
 800e73e:	291d      	cmp	r1, #29
 800e740:	d82c      	bhi.n	800e79c <__sflush_r+0xb8>
 800e742:	4a2a      	ldr	r2, [pc, #168]	; (800e7ec <__sflush_r+0x108>)
 800e744:	40ca      	lsrs	r2, r1
 800e746:	07d6      	lsls	r6, r2, #31
 800e748:	d528      	bpl.n	800e79c <__sflush_r+0xb8>
 800e74a:	2200      	movs	r2, #0
 800e74c:	6062      	str	r2, [r4, #4]
 800e74e:	04d9      	lsls	r1, r3, #19
 800e750:	6922      	ldr	r2, [r4, #16]
 800e752:	6022      	str	r2, [r4, #0]
 800e754:	d504      	bpl.n	800e760 <__sflush_r+0x7c>
 800e756:	1c42      	adds	r2, r0, #1
 800e758:	d101      	bne.n	800e75e <__sflush_r+0x7a>
 800e75a:	682b      	ldr	r3, [r5, #0]
 800e75c:	b903      	cbnz	r3, 800e760 <__sflush_r+0x7c>
 800e75e:	6560      	str	r0, [r4, #84]	; 0x54
 800e760:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e762:	602f      	str	r7, [r5, #0]
 800e764:	2900      	cmp	r1, #0
 800e766:	d0ca      	beq.n	800e6fe <__sflush_r+0x1a>
 800e768:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e76c:	4299      	cmp	r1, r3
 800e76e:	d002      	beq.n	800e776 <__sflush_r+0x92>
 800e770:	4628      	mov	r0, r5
 800e772:	f000 f9d7 	bl	800eb24 <_free_r>
 800e776:	2000      	movs	r0, #0
 800e778:	6360      	str	r0, [r4, #52]	; 0x34
 800e77a:	e7c1      	b.n	800e700 <__sflush_r+0x1c>
 800e77c:	6a21      	ldr	r1, [r4, #32]
 800e77e:	2301      	movs	r3, #1
 800e780:	4628      	mov	r0, r5
 800e782:	47b0      	blx	r6
 800e784:	1c41      	adds	r1, r0, #1
 800e786:	d1c7      	bne.n	800e718 <__sflush_r+0x34>
 800e788:	682b      	ldr	r3, [r5, #0]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d0c4      	beq.n	800e718 <__sflush_r+0x34>
 800e78e:	2b1d      	cmp	r3, #29
 800e790:	d001      	beq.n	800e796 <__sflush_r+0xb2>
 800e792:	2b16      	cmp	r3, #22
 800e794:	d101      	bne.n	800e79a <__sflush_r+0xb6>
 800e796:	602f      	str	r7, [r5, #0]
 800e798:	e7b1      	b.n	800e6fe <__sflush_r+0x1a>
 800e79a:	89a3      	ldrh	r3, [r4, #12]
 800e79c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7a0:	81a3      	strh	r3, [r4, #12]
 800e7a2:	e7ad      	b.n	800e700 <__sflush_r+0x1c>
 800e7a4:	690f      	ldr	r7, [r1, #16]
 800e7a6:	2f00      	cmp	r7, #0
 800e7a8:	d0a9      	beq.n	800e6fe <__sflush_r+0x1a>
 800e7aa:	0793      	lsls	r3, r2, #30
 800e7ac:	680e      	ldr	r6, [r1, #0]
 800e7ae:	bf08      	it	eq
 800e7b0:	694b      	ldreq	r3, [r1, #20]
 800e7b2:	600f      	str	r7, [r1, #0]
 800e7b4:	bf18      	it	ne
 800e7b6:	2300      	movne	r3, #0
 800e7b8:	eba6 0807 	sub.w	r8, r6, r7
 800e7bc:	608b      	str	r3, [r1, #8]
 800e7be:	f1b8 0f00 	cmp.w	r8, #0
 800e7c2:	dd9c      	ble.n	800e6fe <__sflush_r+0x1a>
 800e7c4:	6a21      	ldr	r1, [r4, #32]
 800e7c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e7c8:	4643      	mov	r3, r8
 800e7ca:	463a      	mov	r2, r7
 800e7cc:	4628      	mov	r0, r5
 800e7ce:	47b0      	blx	r6
 800e7d0:	2800      	cmp	r0, #0
 800e7d2:	dc06      	bgt.n	800e7e2 <__sflush_r+0xfe>
 800e7d4:	89a3      	ldrh	r3, [r4, #12]
 800e7d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7da:	81a3      	strh	r3, [r4, #12]
 800e7dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e7e0:	e78e      	b.n	800e700 <__sflush_r+0x1c>
 800e7e2:	4407      	add	r7, r0
 800e7e4:	eba8 0800 	sub.w	r8, r8, r0
 800e7e8:	e7e9      	b.n	800e7be <__sflush_r+0xda>
 800e7ea:	bf00      	nop
 800e7ec:	20400001 	.word	0x20400001

0800e7f0 <_fflush_r>:
 800e7f0:	b538      	push	{r3, r4, r5, lr}
 800e7f2:	690b      	ldr	r3, [r1, #16]
 800e7f4:	4605      	mov	r5, r0
 800e7f6:	460c      	mov	r4, r1
 800e7f8:	b913      	cbnz	r3, 800e800 <_fflush_r+0x10>
 800e7fa:	2500      	movs	r5, #0
 800e7fc:	4628      	mov	r0, r5
 800e7fe:	bd38      	pop	{r3, r4, r5, pc}
 800e800:	b118      	cbz	r0, 800e80a <_fflush_r+0x1a>
 800e802:	6983      	ldr	r3, [r0, #24]
 800e804:	b90b      	cbnz	r3, 800e80a <_fflush_r+0x1a>
 800e806:	f000 f887 	bl	800e918 <__sinit>
 800e80a:	4b14      	ldr	r3, [pc, #80]	; (800e85c <_fflush_r+0x6c>)
 800e80c:	429c      	cmp	r4, r3
 800e80e:	d11b      	bne.n	800e848 <_fflush_r+0x58>
 800e810:	686c      	ldr	r4, [r5, #4]
 800e812:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d0ef      	beq.n	800e7fa <_fflush_r+0xa>
 800e81a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e81c:	07d0      	lsls	r0, r2, #31
 800e81e:	d404      	bmi.n	800e82a <_fflush_r+0x3a>
 800e820:	0599      	lsls	r1, r3, #22
 800e822:	d402      	bmi.n	800e82a <_fflush_r+0x3a>
 800e824:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e826:	f000 f915 	bl	800ea54 <__retarget_lock_acquire_recursive>
 800e82a:	4628      	mov	r0, r5
 800e82c:	4621      	mov	r1, r4
 800e82e:	f7ff ff59 	bl	800e6e4 <__sflush_r>
 800e832:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e834:	07da      	lsls	r2, r3, #31
 800e836:	4605      	mov	r5, r0
 800e838:	d4e0      	bmi.n	800e7fc <_fflush_r+0xc>
 800e83a:	89a3      	ldrh	r3, [r4, #12]
 800e83c:	059b      	lsls	r3, r3, #22
 800e83e:	d4dd      	bmi.n	800e7fc <_fflush_r+0xc>
 800e840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e842:	f000 f908 	bl	800ea56 <__retarget_lock_release_recursive>
 800e846:	e7d9      	b.n	800e7fc <_fflush_r+0xc>
 800e848:	4b05      	ldr	r3, [pc, #20]	; (800e860 <_fflush_r+0x70>)
 800e84a:	429c      	cmp	r4, r3
 800e84c:	d101      	bne.n	800e852 <_fflush_r+0x62>
 800e84e:	68ac      	ldr	r4, [r5, #8]
 800e850:	e7df      	b.n	800e812 <_fflush_r+0x22>
 800e852:	4b04      	ldr	r3, [pc, #16]	; (800e864 <_fflush_r+0x74>)
 800e854:	429c      	cmp	r4, r3
 800e856:	bf08      	it	eq
 800e858:	68ec      	ldreq	r4, [r5, #12]
 800e85a:	e7da      	b.n	800e812 <_fflush_r+0x22>
 800e85c:	080115e8 	.word	0x080115e8
 800e860:	08011608 	.word	0x08011608
 800e864:	080115c8 	.word	0x080115c8

0800e868 <std>:
 800e868:	2300      	movs	r3, #0
 800e86a:	b510      	push	{r4, lr}
 800e86c:	4604      	mov	r4, r0
 800e86e:	e9c0 3300 	strd	r3, r3, [r0]
 800e872:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e876:	6083      	str	r3, [r0, #8]
 800e878:	8181      	strh	r1, [r0, #12]
 800e87a:	6643      	str	r3, [r0, #100]	; 0x64
 800e87c:	81c2      	strh	r2, [r0, #14]
 800e87e:	6183      	str	r3, [r0, #24]
 800e880:	4619      	mov	r1, r3
 800e882:	2208      	movs	r2, #8
 800e884:	305c      	adds	r0, #92	; 0x5c
 800e886:	f7ff fda3 	bl	800e3d0 <memset>
 800e88a:	4b05      	ldr	r3, [pc, #20]	; (800e8a0 <std+0x38>)
 800e88c:	6263      	str	r3, [r4, #36]	; 0x24
 800e88e:	4b05      	ldr	r3, [pc, #20]	; (800e8a4 <std+0x3c>)
 800e890:	62a3      	str	r3, [r4, #40]	; 0x28
 800e892:	4b05      	ldr	r3, [pc, #20]	; (800e8a8 <std+0x40>)
 800e894:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e896:	4b05      	ldr	r3, [pc, #20]	; (800e8ac <std+0x44>)
 800e898:	6224      	str	r4, [r4, #32]
 800e89a:	6323      	str	r3, [r4, #48]	; 0x30
 800e89c:	bd10      	pop	{r4, pc}
 800e89e:	bf00      	nop
 800e8a0:	0800f599 	.word	0x0800f599
 800e8a4:	0800f5bb 	.word	0x0800f5bb
 800e8a8:	0800f5f3 	.word	0x0800f5f3
 800e8ac:	0800f617 	.word	0x0800f617

0800e8b0 <_cleanup_r>:
 800e8b0:	4901      	ldr	r1, [pc, #4]	; (800e8b8 <_cleanup_r+0x8>)
 800e8b2:	f000 b8af 	b.w	800ea14 <_fwalk_reent>
 800e8b6:	bf00      	nop
 800e8b8:	0800e7f1 	.word	0x0800e7f1

0800e8bc <__sfmoreglue>:
 800e8bc:	b570      	push	{r4, r5, r6, lr}
 800e8be:	2268      	movs	r2, #104	; 0x68
 800e8c0:	1e4d      	subs	r5, r1, #1
 800e8c2:	4355      	muls	r5, r2
 800e8c4:	460e      	mov	r6, r1
 800e8c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e8ca:	f000 f997 	bl	800ebfc <_malloc_r>
 800e8ce:	4604      	mov	r4, r0
 800e8d0:	b140      	cbz	r0, 800e8e4 <__sfmoreglue+0x28>
 800e8d2:	2100      	movs	r1, #0
 800e8d4:	e9c0 1600 	strd	r1, r6, [r0]
 800e8d8:	300c      	adds	r0, #12
 800e8da:	60a0      	str	r0, [r4, #8]
 800e8dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e8e0:	f7ff fd76 	bl	800e3d0 <memset>
 800e8e4:	4620      	mov	r0, r4
 800e8e6:	bd70      	pop	{r4, r5, r6, pc}

0800e8e8 <__sfp_lock_acquire>:
 800e8e8:	4801      	ldr	r0, [pc, #4]	; (800e8f0 <__sfp_lock_acquire+0x8>)
 800e8ea:	f000 b8b3 	b.w	800ea54 <__retarget_lock_acquire_recursive>
 800e8ee:	bf00      	nop
 800e8f0:	200012d5 	.word	0x200012d5

0800e8f4 <__sfp_lock_release>:
 800e8f4:	4801      	ldr	r0, [pc, #4]	; (800e8fc <__sfp_lock_release+0x8>)
 800e8f6:	f000 b8ae 	b.w	800ea56 <__retarget_lock_release_recursive>
 800e8fa:	bf00      	nop
 800e8fc:	200012d5 	.word	0x200012d5

0800e900 <__sinit_lock_acquire>:
 800e900:	4801      	ldr	r0, [pc, #4]	; (800e908 <__sinit_lock_acquire+0x8>)
 800e902:	f000 b8a7 	b.w	800ea54 <__retarget_lock_acquire_recursive>
 800e906:	bf00      	nop
 800e908:	200012d6 	.word	0x200012d6

0800e90c <__sinit_lock_release>:
 800e90c:	4801      	ldr	r0, [pc, #4]	; (800e914 <__sinit_lock_release+0x8>)
 800e90e:	f000 b8a2 	b.w	800ea56 <__retarget_lock_release_recursive>
 800e912:	bf00      	nop
 800e914:	200012d6 	.word	0x200012d6

0800e918 <__sinit>:
 800e918:	b510      	push	{r4, lr}
 800e91a:	4604      	mov	r4, r0
 800e91c:	f7ff fff0 	bl	800e900 <__sinit_lock_acquire>
 800e920:	69a3      	ldr	r3, [r4, #24]
 800e922:	b11b      	cbz	r3, 800e92c <__sinit+0x14>
 800e924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e928:	f7ff bff0 	b.w	800e90c <__sinit_lock_release>
 800e92c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e930:	6523      	str	r3, [r4, #80]	; 0x50
 800e932:	4b13      	ldr	r3, [pc, #76]	; (800e980 <__sinit+0x68>)
 800e934:	4a13      	ldr	r2, [pc, #76]	; (800e984 <__sinit+0x6c>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	62a2      	str	r2, [r4, #40]	; 0x28
 800e93a:	42a3      	cmp	r3, r4
 800e93c:	bf04      	itt	eq
 800e93e:	2301      	moveq	r3, #1
 800e940:	61a3      	streq	r3, [r4, #24]
 800e942:	4620      	mov	r0, r4
 800e944:	f000 f820 	bl	800e988 <__sfp>
 800e948:	6060      	str	r0, [r4, #4]
 800e94a:	4620      	mov	r0, r4
 800e94c:	f000 f81c 	bl	800e988 <__sfp>
 800e950:	60a0      	str	r0, [r4, #8]
 800e952:	4620      	mov	r0, r4
 800e954:	f000 f818 	bl	800e988 <__sfp>
 800e958:	2200      	movs	r2, #0
 800e95a:	60e0      	str	r0, [r4, #12]
 800e95c:	2104      	movs	r1, #4
 800e95e:	6860      	ldr	r0, [r4, #4]
 800e960:	f7ff ff82 	bl	800e868 <std>
 800e964:	68a0      	ldr	r0, [r4, #8]
 800e966:	2201      	movs	r2, #1
 800e968:	2109      	movs	r1, #9
 800e96a:	f7ff ff7d 	bl	800e868 <std>
 800e96e:	68e0      	ldr	r0, [r4, #12]
 800e970:	2202      	movs	r2, #2
 800e972:	2112      	movs	r1, #18
 800e974:	f7ff ff78 	bl	800e868 <std>
 800e978:	2301      	movs	r3, #1
 800e97a:	61a3      	str	r3, [r4, #24]
 800e97c:	e7d2      	b.n	800e924 <__sinit+0xc>
 800e97e:	bf00      	nop
 800e980:	080115c4 	.word	0x080115c4
 800e984:	0800e8b1 	.word	0x0800e8b1

0800e988 <__sfp>:
 800e988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e98a:	4607      	mov	r7, r0
 800e98c:	f7ff ffac 	bl	800e8e8 <__sfp_lock_acquire>
 800e990:	4b1e      	ldr	r3, [pc, #120]	; (800ea0c <__sfp+0x84>)
 800e992:	681e      	ldr	r6, [r3, #0]
 800e994:	69b3      	ldr	r3, [r6, #24]
 800e996:	b913      	cbnz	r3, 800e99e <__sfp+0x16>
 800e998:	4630      	mov	r0, r6
 800e99a:	f7ff ffbd 	bl	800e918 <__sinit>
 800e99e:	3648      	adds	r6, #72	; 0x48
 800e9a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e9a4:	3b01      	subs	r3, #1
 800e9a6:	d503      	bpl.n	800e9b0 <__sfp+0x28>
 800e9a8:	6833      	ldr	r3, [r6, #0]
 800e9aa:	b30b      	cbz	r3, 800e9f0 <__sfp+0x68>
 800e9ac:	6836      	ldr	r6, [r6, #0]
 800e9ae:	e7f7      	b.n	800e9a0 <__sfp+0x18>
 800e9b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e9b4:	b9d5      	cbnz	r5, 800e9ec <__sfp+0x64>
 800e9b6:	4b16      	ldr	r3, [pc, #88]	; (800ea10 <__sfp+0x88>)
 800e9b8:	60e3      	str	r3, [r4, #12]
 800e9ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e9be:	6665      	str	r5, [r4, #100]	; 0x64
 800e9c0:	f000 f847 	bl	800ea52 <__retarget_lock_init_recursive>
 800e9c4:	f7ff ff96 	bl	800e8f4 <__sfp_lock_release>
 800e9c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e9cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e9d0:	6025      	str	r5, [r4, #0]
 800e9d2:	61a5      	str	r5, [r4, #24]
 800e9d4:	2208      	movs	r2, #8
 800e9d6:	4629      	mov	r1, r5
 800e9d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e9dc:	f7ff fcf8 	bl	800e3d0 <memset>
 800e9e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e9e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e9e8:	4620      	mov	r0, r4
 800e9ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9ec:	3468      	adds	r4, #104	; 0x68
 800e9ee:	e7d9      	b.n	800e9a4 <__sfp+0x1c>
 800e9f0:	2104      	movs	r1, #4
 800e9f2:	4638      	mov	r0, r7
 800e9f4:	f7ff ff62 	bl	800e8bc <__sfmoreglue>
 800e9f8:	4604      	mov	r4, r0
 800e9fa:	6030      	str	r0, [r6, #0]
 800e9fc:	2800      	cmp	r0, #0
 800e9fe:	d1d5      	bne.n	800e9ac <__sfp+0x24>
 800ea00:	f7ff ff78 	bl	800e8f4 <__sfp_lock_release>
 800ea04:	230c      	movs	r3, #12
 800ea06:	603b      	str	r3, [r7, #0]
 800ea08:	e7ee      	b.n	800e9e8 <__sfp+0x60>
 800ea0a:	bf00      	nop
 800ea0c:	080115c4 	.word	0x080115c4
 800ea10:	ffff0001 	.word	0xffff0001

0800ea14 <_fwalk_reent>:
 800ea14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea18:	4606      	mov	r6, r0
 800ea1a:	4688      	mov	r8, r1
 800ea1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ea20:	2700      	movs	r7, #0
 800ea22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ea26:	f1b9 0901 	subs.w	r9, r9, #1
 800ea2a:	d505      	bpl.n	800ea38 <_fwalk_reent+0x24>
 800ea2c:	6824      	ldr	r4, [r4, #0]
 800ea2e:	2c00      	cmp	r4, #0
 800ea30:	d1f7      	bne.n	800ea22 <_fwalk_reent+0xe>
 800ea32:	4638      	mov	r0, r7
 800ea34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea38:	89ab      	ldrh	r3, [r5, #12]
 800ea3a:	2b01      	cmp	r3, #1
 800ea3c:	d907      	bls.n	800ea4e <_fwalk_reent+0x3a>
 800ea3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ea42:	3301      	adds	r3, #1
 800ea44:	d003      	beq.n	800ea4e <_fwalk_reent+0x3a>
 800ea46:	4629      	mov	r1, r5
 800ea48:	4630      	mov	r0, r6
 800ea4a:	47c0      	blx	r8
 800ea4c:	4307      	orrs	r7, r0
 800ea4e:	3568      	adds	r5, #104	; 0x68
 800ea50:	e7e9      	b.n	800ea26 <_fwalk_reent+0x12>

0800ea52 <__retarget_lock_init_recursive>:
 800ea52:	4770      	bx	lr

0800ea54 <__retarget_lock_acquire_recursive>:
 800ea54:	4770      	bx	lr

0800ea56 <__retarget_lock_release_recursive>:
 800ea56:	4770      	bx	lr

0800ea58 <__swhatbuf_r>:
 800ea58:	b570      	push	{r4, r5, r6, lr}
 800ea5a:	460e      	mov	r6, r1
 800ea5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea60:	2900      	cmp	r1, #0
 800ea62:	b096      	sub	sp, #88	; 0x58
 800ea64:	4614      	mov	r4, r2
 800ea66:	461d      	mov	r5, r3
 800ea68:	da08      	bge.n	800ea7c <__swhatbuf_r+0x24>
 800ea6a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ea6e:	2200      	movs	r2, #0
 800ea70:	602a      	str	r2, [r5, #0]
 800ea72:	061a      	lsls	r2, r3, #24
 800ea74:	d410      	bmi.n	800ea98 <__swhatbuf_r+0x40>
 800ea76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea7a:	e00e      	b.n	800ea9a <__swhatbuf_r+0x42>
 800ea7c:	466a      	mov	r2, sp
 800ea7e:	f000 fdf1 	bl	800f664 <_fstat_r>
 800ea82:	2800      	cmp	r0, #0
 800ea84:	dbf1      	blt.n	800ea6a <__swhatbuf_r+0x12>
 800ea86:	9a01      	ldr	r2, [sp, #4]
 800ea88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ea8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ea90:	425a      	negs	r2, r3
 800ea92:	415a      	adcs	r2, r3
 800ea94:	602a      	str	r2, [r5, #0]
 800ea96:	e7ee      	b.n	800ea76 <__swhatbuf_r+0x1e>
 800ea98:	2340      	movs	r3, #64	; 0x40
 800ea9a:	2000      	movs	r0, #0
 800ea9c:	6023      	str	r3, [r4, #0]
 800ea9e:	b016      	add	sp, #88	; 0x58
 800eaa0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800eaa4 <__smakebuf_r>:
 800eaa4:	898b      	ldrh	r3, [r1, #12]
 800eaa6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eaa8:	079d      	lsls	r5, r3, #30
 800eaaa:	4606      	mov	r6, r0
 800eaac:	460c      	mov	r4, r1
 800eaae:	d507      	bpl.n	800eac0 <__smakebuf_r+0x1c>
 800eab0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eab4:	6023      	str	r3, [r4, #0]
 800eab6:	6123      	str	r3, [r4, #16]
 800eab8:	2301      	movs	r3, #1
 800eaba:	6163      	str	r3, [r4, #20]
 800eabc:	b002      	add	sp, #8
 800eabe:	bd70      	pop	{r4, r5, r6, pc}
 800eac0:	ab01      	add	r3, sp, #4
 800eac2:	466a      	mov	r2, sp
 800eac4:	f7ff ffc8 	bl	800ea58 <__swhatbuf_r>
 800eac8:	9900      	ldr	r1, [sp, #0]
 800eaca:	4605      	mov	r5, r0
 800eacc:	4630      	mov	r0, r6
 800eace:	f000 f895 	bl	800ebfc <_malloc_r>
 800ead2:	b948      	cbnz	r0, 800eae8 <__smakebuf_r+0x44>
 800ead4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ead8:	059a      	lsls	r2, r3, #22
 800eada:	d4ef      	bmi.n	800eabc <__smakebuf_r+0x18>
 800eadc:	f023 0303 	bic.w	r3, r3, #3
 800eae0:	f043 0302 	orr.w	r3, r3, #2
 800eae4:	81a3      	strh	r3, [r4, #12]
 800eae6:	e7e3      	b.n	800eab0 <__smakebuf_r+0xc>
 800eae8:	4b0d      	ldr	r3, [pc, #52]	; (800eb20 <__smakebuf_r+0x7c>)
 800eaea:	62b3      	str	r3, [r6, #40]	; 0x28
 800eaec:	89a3      	ldrh	r3, [r4, #12]
 800eaee:	6020      	str	r0, [r4, #0]
 800eaf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eaf4:	81a3      	strh	r3, [r4, #12]
 800eaf6:	9b00      	ldr	r3, [sp, #0]
 800eaf8:	6163      	str	r3, [r4, #20]
 800eafa:	9b01      	ldr	r3, [sp, #4]
 800eafc:	6120      	str	r0, [r4, #16]
 800eafe:	b15b      	cbz	r3, 800eb18 <__smakebuf_r+0x74>
 800eb00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb04:	4630      	mov	r0, r6
 800eb06:	f000 fdbf 	bl	800f688 <_isatty_r>
 800eb0a:	b128      	cbz	r0, 800eb18 <__smakebuf_r+0x74>
 800eb0c:	89a3      	ldrh	r3, [r4, #12]
 800eb0e:	f023 0303 	bic.w	r3, r3, #3
 800eb12:	f043 0301 	orr.w	r3, r3, #1
 800eb16:	81a3      	strh	r3, [r4, #12]
 800eb18:	89a0      	ldrh	r0, [r4, #12]
 800eb1a:	4305      	orrs	r5, r0
 800eb1c:	81a5      	strh	r5, [r4, #12]
 800eb1e:	e7cd      	b.n	800eabc <__smakebuf_r+0x18>
 800eb20:	0800e8b1 	.word	0x0800e8b1

0800eb24 <_free_r>:
 800eb24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eb26:	2900      	cmp	r1, #0
 800eb28:	d044      	beq.n	800ebb4 <_free_r+0x90>
 800eb2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb2e:	9001      	str	r0, [sp, #4]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	f1a1 0404 	sub.w	r4, r1, #4
 800eb36:	bfb8      	it	lt
 800eb38:	18e4      	addlt	r4, r4, r3
 800eb3a:	f000 fdef 	bl	800f71c <__malloc_lock>
 800eb3e:	4a1e      	ldr	r2, [pc, #120]	; (800ebb8 <_free_r+0x94>)
 800eb40:	9801      	ldr	r0, [sp, #4]
 800eb42:	6813      	ldr	r3, [r2, #0]
 800eb44:	b933      	cbnz	r3, 800eb54 <_free_r+0x30>
 800eb46:	6063      	str	r3, [r4, #4]
 800eb48:	6014      	str	r4, [r2, #0]
 800eb4a:	b003      	add	sp, #12
 800eb4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eb50:	f000 bdea 	b.w	800f728 <__malloc_unlock>
 800eb54:	42a3      	cmp	r3, r4
 800eb56:	d908      	bls.n	800eb6a <_free_r+0x46>
 800eb58:	6825      	ldr	r5, [r4, #0]
 800eb5a:	1961      	adds	r1, r4, r5
 800eb5c:	428b      	cmp	r3, r1
 800eb5e:	bf01      	itttt	eq
 800eb60:	6819      	ldreq	r1, [r3, #0]
 800eb62:	685b      	ldreq	r3, [r3, #4]
 800eb64:	1949      	addeq	r1, r1, r5
 800eb66:	6021      	streq	r1, [r4, #0]
 800eb68:	e7ed      	b.n	800eb46 <_free_r+0x22>
 800eb6a:	461a      	mov	r2, r3
 800eb6c:	685b      	ldr	r3, [r3, #4]
 800eb6e:	b10b      	cbz	r3, 800eb74 <_free_r+0x50>
 800eb70:	42a3      	cmp	r3, r4
 800eb72:	d9fa      	bls.n	800eb6a <_free_r+0x46>
 800eb74:	6811      	ldr	r1, [r2, #0]
 800eb76:	1855      	adds	r5, r2, r1
 800eb78:	42a5      	cmp	r5, r4
 800eb7a:	d10b      	bne.n	800eb94 <_free_r+0x70>
 800eb7c:	6824      	ldr	r4, [r4, #0]
 800eb7e:	4421      	add	r1, r4
 800eb80:	1854      	adds	r4, r2, r1
 800eb82:	42a3      	cmp	r3, r4
 800eb84:	6011      	str	r1, [r2, #0]
 800eb86:	d1e0      	bne.n	800eb4a <_free_r+0x26>
 800eb88:	681c      	ldr	r4, [r3, #0]
 800eb8a:	685b      	ldr	r3, [r3, #4]
 800eb8c:	6053      	str	r3, [r2, #4]
 800eb8e:	4421      	add	r1, r4
 800eb90:	6011      	str	r1, [r2, #0]
 800eb92:	e7da      	b.n	800eb4a <_free_r+0x26>
 800eb94:	d902      	bls.n	800eb9c <_free_r+0x78>
 800eb96:	230c      	movs	r3, #12
 800eb98:	6003      	str	r3, [r0, #0]
 800eb9a:	e7d6      	b.n	800eb4a <_free_r+0x26>
 800eb9c:	6825      	ldr	r5, [r4, #0]
 800eb9e:	1961      	adds	r1, r4, r5
 800eba0:	428b      	cmp	r3, r1
 800eba2:	bf04      	itt	eq
 800eba4:	6819      	ldreq	r1, [r3, #0]
 800eba6:	685b      	ldreq	r3, [r3, #4]
 800eba8:	6063      	str	r3, [r4, #4]
 800ebaa:	bf04      	itt	eq
 800ebac:	1949      	addeq	r1, r1, r5
 800ebae:	6021      	streq	r1, [r4, #0]
 800ebb0:	6054      	str	r4, [r2, #4]
 800ebb2:	e7ca      	b.n	800eb4a <_free_r+0x26>
 800ebb4:	b003      	add	sp, #12
 800ebb6:	bd30      	pop	{r4, r5, pc}
 800ebb8:	200012d8 	.word	0x200012d8

0800ebbc <sbrk_aligned>:
 800ebbc:	b570      	push	{r4, r5, r6, lr}
 800ebbe:	4e0e      	ldr	r6, [pc, #56]	; (800ebf8 <sbrk_aligned+0x3c>)
 800ebc0:	460c      	mov	r4, r1
 800ebc2:	6831      	ldr	r1, [r6, #0]
 800ebc4:	4605      	mov	r5, r0
 800ebc6:	b911      	cbnz	r1, 800ebce <sbrk_aligned+0x12>
 800ebc8:	f000 fcd6 	bl	800f578 <_sbrk_r>
 800ebcc:	6030      	str	r0, [r6, #0]
 800ebce:	4621      	mov	r1, r4
 800ebd0:	4628      	mov	r0, r5
 800ebd2:	f000 fcd1 	bl	800f578 <_sbrk_r>
 800ebd6:	1c43      	adds	r3, r0, #1
 800ebd8:	d00a      	beq.n	800ebf0 <sbrk_aligned+0x34>
 800ebda:	1cc4      	adds	r4, r0, #3
 800ebdc:	f024 0403 	bic.w	r4, r4, #3
 800ebe0:	42a0      	cmp	r0, r4
 800ebe2:	d007      	beq.n	800ebf4 <sbrk_aligned+0x38>
 800ebe4:	1a21      	subs	r1, r4, r0
 800ebe6:	4628      	mov	r0, r5
 800ebe8:	f000 fcc6 	bl	800f578 <_sbrk_r>
 800ebec:	3001      	adds	r0, #1
 800ebee:	d101      	bne.n	800ebf4 <sbrk_aligned+0x38>
 800ebf0:	f04f 34ff 	mov.w	r4, #4294967295
 800ebf4:	4620      	mov	r0, r4
 800ebf6:	bd70      	pop	{r4, r5, r6, pc}
 800ebf8:	200012dc 	.word	0x200012dc

0800ebfc <_malloc_r>:
 800ebfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec00:	1ccd      	adds	r5, r1, #3
 800ec02:	f025 0503 	bic.w	r5, r5, #3
 800ec06:	3508      	adds	r5, #8
 800ec08:	2d0c      	cmp	r5, #12
 800ec0a:	bf38      	it	cc
 800ec0c:	250c      	movcc	r5, #12
 800ec0e:	2d00      	cmp	r5, #0
 800ec10:	4607      	mov	r7, r0
 800ec12:	db01      	blt.n	800ec18 <_malloc_r+0x1c>
 800ec14:	42a9      	cmp	r1, r5
 800ec16:	d905      	bls.n	800ec24 <_malloc_r+0x28>
 800ec18:	230c      	movs	r3, #12
 800ec1a:	603b      	str	r3, [r7, #0]
 800ec1c:	2600      	movs	r6, #0
 800ec1e:	4630      	mov	r0, r6
 800ec20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec24:	4e2e      	ldr	r6, [pc, #184]	; (800ece0 <_malloc_r+0xe4>)
 800ec26:	f000 fd79 	bl	800f71c <__malloc_lock>
 800ec2a:	6833      	ldr	r3, [r6, #0]
 800ec2c:	461c      	mov	r4, r3
 800ec2e:	bb34      	cbnz	r4, 800ec7e <_malloc_r+0x82>
 800ec30:	4629      	mov	r1, r5
 800ec32:	4638      	mov	r0, r7
 800ec34:	f7ff ffc2 	bl	800ebbc <sbrk_aligned>
 800ec38:	1c43      	adds	r3, r0, #1
 800ec3a:	4604      	mov	r4, r0
 800ec3c:	d14d      	bne.n	800ecda <_malloc_r+0xde>
 800ec3e:	6834      	ldr	r4, [r6, #0]
 800ec40:	4626      	mov	r6, r4
 800ec42:	2e00      	cmp	r6, #0
 800ec44:	d140      	bne.n	800ecc8 <_malloc_r+0xcc>
 800ec46:	6823      	ldr	r3, [r4, #0]
 800ec48:	4631      	mov	r1, r6
 800ec4a:	4638      	mov	r0, r7
 800ec4c:	eb04 0803 	add.w	r8, r4, r3
 800ec50:	f000 fc92 	bl	800f578 <_sbrk_r>
 800ec54:	4580      	cmp	r8, r0
 800ec56:	d13a      	bne.n	800ecce <_malloc_r+0xd2>
 800ec58:	6821      	ldr	r1, [r4, #0]
 800ec5a:	3503      	adds	r5, #3
 800ec5c:	1a6d      	subs	r5, r5, r1
 800ec5e:	f025 0503 	bic.w	r5, r5, #3
 800ec62:	3508      	adds	r5, #8
 800ec64:	2d0c      	cmp	r5, #12
 800ec66:	bf38      	it	cc
 800ec68:	250c      	movcc	r5, #12
 800ec6a:	4629      	mov	r1, r5
 800ec6c:	4638      	mov	r0, r7
 800ec6e:	f7ff ffa5 	bl	800ebbc <sbrk_aligned>
 800ec72:	3001      	adds	r0, #1
 800ec74:	d02b      	beq.n	800ecce <_malloc_r+0xd2>
 800ec76:	6823      	ldr	r3, [r4, #0]
 800ec78:	442b      	add	r3, r5
 800ec7a:	6023      	str	r3, [r4, #0]
 800ec7c:	e00e      	b.n	800ec9c <_malloc_r+0xa0>
 800ec7e:	6822      	ldr	r2, [r4, #0]
 800ec80:	1b52      	subs	r2, r2, r5
 800ec82:	d41e      	bmi.n	800ecc2 <_malloc_r+0xc6>
 800ec84:	2a0b      	cmp	r2, #11
 800ec86:	d916      	bls.n	800ecb6 <_malloc_r+0xba>
 800ec88:	1961      	adds	r1, r4, r5
 800ec8a:	42a3      	cmp	r3, r4
 800ec8c:	6025      	str	r5, [r4, #0]
 800ec8e:	bf18      	it	ne
 800ec90:	6059      	strne	r1, [r3, #4]
 800ec92:	6863      	ldr	r3, [r4, #4]
 800ec94:	bf08      	it	eq
 800ec96:	6031      	streq	r1, [r6, #0]
 800ec98:	5162      	str	r2, [r4, r5]
 800ec9a:	604b      	str	r3, [r1, #4]
 800ec9c:	4638      	mov	r0, r7
 800ec9e:	f104 060b 	add.w	r6, r4, #11
 800eca2:	f000 fd41 	bl	800f728 <__malloc_unlock>
 800eca6:	f026 0607 	bic.w	r6, r6, #7
 800ecaa:	1d23      	adds	r3, r4, #4
 800ecac:	1af2      	subs	r2, r6, r3
 800ecae:	d0b6      	beq.n	800ec1e <_malloc_r+0x22>
 800ecb0:	1b9b      	subs	r3, r3, r6
 800ecb2:	50a3      	str	r3, [r4, r2]
 800ecb4:	e7b3      	b.n	800ec1e <_malloc_r+0x22>
 800ecb6:	6862      	ldr	r2, [r4, #4]
 800ecb8:	42a3      	cmp	r3, r4
 800ecba:	bf0c      	ite	eq
 800ecbc:	6032      	streq	r2, [r6, #0]
 800ecbe:	605a      	strne	r2, [r3, #4]
 800ecc0:	e7ec      	b.n	800ec9c <_malloc_r+0xa0>
 800ecc2:	4623      	mov	r3, r4
 800ecc4:	6864      	ldr	r4, [r4, #4]
 800ecc6:	e7b2      	b.n	800ec2e <_malloc_r+0x32>
 800ecc8:	4634      	mov	r4, r6
 800ecca:	6876      	ldr	r6, [r6, #4]
 800eccc:	e7b9      	b.n	800ec42 <_malloc_r+0x46>
 800ecce:	230c      	movs	r3, #12
 800ecd0:	603b      	str	r3, [r7, #0]
 800ecd2:	4638      	mov	r0, r7
 800ecd4:	f000 fd28 	bl	800f728 <__malloc_unlock>
 800ecd8:	e7a1      	b.n	800ec1e <_malloc_r+0x22>
 800ecda:	6025      	str	r5, [r4, #0]
 800ecdc:	e7de      	b.n	800ec9c <_malloc_r+0xa0>
 800ecde:	bf00      	nop
 800ece0:	200012d8 	.word	0x200012d8

0800ece4 <__ssputs_r>:
 800ece4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ece8:	688e      	ldr	r6, [r1, #8]
 800ecea:	429e      	cmp	r6, r3
 800ecec:	4682      	mov	sl, r0
 800ecee:	460c      	mov	r4, r1
 800ecf0:	4690      	mov	r8, r2
 800ecf2:	461f      	mov	r7, r3
 800ecf4:	d838      	bhi.n	800ed68 <__ssputs_r+0x84>
 800ecf6:	898a      	ldrh	r2, [r1, #12]
 800ecf8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ecfc:	d032      	beq.n	800ed64 <__ssputs_r+0x80>
 800ecfe:	6825      	ldr	r5, [r4, #0]
 800ed00:	6909      	ldr	r1, [r1, #16]
 800ed02:	eba5 0901 	sub.w	r9, r5, r1
 800ed06:	6965      	ldr	r5, [r4, #20]
 800ed08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ed0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ed10:	3301      	adds	r3, #1
 800ed12:	444b      	add	r3, r9
 800ed14:	106d      	asrs	r5, r5, #1
 800ed16:	429d      	cmp	r5, r3
 800ed18:	bf38      	it	cc
 800ed1a:	461d      	movcc	r5, r3
 800ed1c:	0553      	lsls	r3, r2, #21
 800ed1e:	d531      	bpl.n	800ed84 <__ssputs_r+0xa0>
 800ed20:	4629      	mov	r1, r5
 800ed22:	f7ff ff6b 	bl	800ebfc <_malloc_r>
 800ed26:	4606      	mov	r6, r0
 800ed28:	b950      	cbnz	r0, 800ed40 <__ssputs_r+0x5c>
 800ed2a:	230c      	movs	r3, #12
 800ed2c:	f8ca 3000 	str.w	r3, [sl]
 800ed30:	89a3      	ldrh	r3, [r4, #12]
 800ed32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed36:	81a3      	strh	r3, [r4, #12]
 800ed38:	f04f 30ff 	mov.w	r0, #4294967295
 800ed3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed40:	6921      	ldr	r1, [r4, #16]
 800ed42:	464a      	mov	r2, r9
 800ed44:	f000 fcc2 	bl	800f6cc <memcpy>
 800ed48:	89a3      	ldrh	r3, [r4, #12]
 800ed4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ed4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed52:	81a3      	strh	r3, [r4, #12]
 800ed54:	6126      	str	r6, [r4, #16]
 800ed56:	6165      	str	r5, [r4, #20]
 800ed58:	444e      	add	r6, r9
 800ed5a:	eba5 0509 	sub.w	r5, r5, r9
 800ed5e:	6026      	str	r6, [r4, #0]
 800ed60:	60a5      	str	r5, [r4, #8]
 800ed62:	463e      	mov	r6, r7
 800ed64:	42be      	cmp	r6, r7
 800ed66:	d900      	bls.n	800ed6a <__ssputs_r+0x86>
 800ed68:	463e      	mov	r6, r7
 800ed6a:	6820      	ldr	r0, [r4, #0]
 800ed6c:	4632      	mov	r2, r6
 800ed6e:	4641      	mov	r1, r8
 800ed70:	f000 fcba 	bl	800f6e8 <memmove>
 800ed74:	68a3      	ldr	r3, [r4, #8]
 800ed76:	1b9b      	subs	r3, r3, r6
 800ed78:	60a3      	str	r3, [r4, #8]
 800ed7a:	6823      	ldr	r3, [r4, #0]
 800ed7c:	4433      	add	r3, r6
 800ed7e:	6023      	str	r3, [r4, #0]
 800ed80:	2000      	movs	r0, #0
 800ed82:	e7db      	b.n	800ed3c <__ssputs_r+0x58>
 800ed84:	462a      	mov	r2, r5
 800ed86:	f000 fcd5 	bl	800f734 <_realloc_r>
 800ed8a:	4606      	mov	r6, r0
 800ed8c:	2800      	cmp	r0, #0
 800ed8e:	d1e1      	bne.n	800ed54 <__ssputs_r+0x70>
 800ed90:	6921      	ldr	r1, [r4, #16]
 800ed92:	4650      	mov	r0, sl
 800ed94:	f7ff fec6 	bl	800eb24 <_free_r>
 800ed98:	e7c7      	b.n	800ed2a <__ssputs_r+0x46>
	...

0800ed9c <_svfiprintf_r>:
 800ed9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eda0:	4698      	mov	r8, r3
 800eda2:	898b      	ldrh	r3, [r1, #12]
 800eda4:	061b      	lsls	r3, r3, #24
 800eda6:	b09d      	sub	sp, #116	; 0x74
 800eda8:	4607      	mov	r7, r0
 800edaa:	460d      	mov	r5, r1
 800edac:	4614      	mov	r4, r2
 800edae:	d50e      	bpl.n	800edce <_svfiprintf_r+0x32>
 800edb0:	690b      	ldr	r3, [r1, #16]
 800edb2:	b963      	cbnz	r3, 800edce <_svfiprintf_r+0x32>
 800edb4:	2140      	movs	r1, #64	; 0x40
 800edb6:	f7ff ff21 	bl	800ebfc <_malloc_r>
 800edba:	6028      	str	r0, [r5, #0]
 800edbc:	6128      	str	r0, [r5, #16]
 800edbe:	b920      	cbnz	r0, 800edca <_svfiprintf_r+0x2e>
 800edc0:	230c      	movs	r3, #12
 800edc2:	603b      	str	r3, [r7, #0]
 800edc4:	f04f 30ff 	mov.w	r0, #4294967295
 800edc8:	e0d1      	b.n	800ef6e <_svfiprintf_r+0x1d2>
 800edca:	2340      	movs	r3, #64	; 0x40
 800edcc:	616b      	str	r3, [r5, #20]
 800edce:	2300      	movs	r3, #0
 800edd0:	9309      	str	r3, [sp, #36]	; 0x24
 800edd2:	2320      	movs	r3, #32
 800edd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800edd8:	f8cd 800c 	str.w	r8, [sp, #12]
 800eddc:	2330      	movs	r3, #48	; 0x30
 800edde:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ef88 <_svfiprintf_r+0x1ec>
 800ede2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ede6:	f04f 0901 	mov.w	r9, #1
 800edea:	4623      	mov	r3, r4
 800edec:	469a      	mov	sl, r3
 800edee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800edf2:	b10a      	cbz	r2, 800edf8 <_svfiprintf_r+0x5c>
 800edf4:	2a25      	cmp	r2, #37	; 0x25
 800edf6:	d1f9      	bne.n	800edec <_svfiprintf_r+0x50>
 800edf8:	ebba 0b04 	subs.w	fp, sl, r4
 800edfc:	d00b      	beq.n	800ee16 <_svfiprintf_r+0x7a>
 800edfe:	465b      	mov	r3, fp
 800ee00:	4622      	mov	r2, r4
 800ee02:	4629      	mov	r1, r5
 800ee04:	4638      	mov	r0, r7
 800ee06:	f7ff ff6d 	bl	800ece4 <__ssputs_r>
 800ee0a:	3001      	adds	r0, #1
 800ee0c:	f000 80aa 	beq.w	800ef64 <_svfiprintf_r+0x1c8>
 800ee10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee12:	445a      	add	r2, fp
 800ee14:	9209      	str	r2, [sp, #36]	; 0x24
 800ee16:	f89a 3000 	ldrb.w	r3, [sl]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	f000 80a2 	beq.w	800ef64 <_svfiprintf_r+0x1c8>
 800ee20:	2300      	movs	r3, #0
 800ee22:	f04f 32ff 	mov.w	r2, #4294967295
 800ee26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee2a:	f10a 0a01 	add.w	sl, sl, #1
 800ee2e:	9304      	str	r3, [sp, #16]
 800ee30:	9307      	str	r3, [sp, #28]
 800ee32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ee36:	931a      	str	r3, [sp, #104]	; 0x68
 800ee38:	4654      	mov	r4, sl
 800ee3a:	2205      	movs	r2, #5
 800ee3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee40:	4851      	ldr	r0, [pc, #324]	; (800ef88 <_svfiprintf_r+0x1ec>)
 800ee42:	f7f1 f9cd 	bl	80001e0 <memchr>
 800ee46:	9a04      	ldr	r2, [sp, #16]
 800ee48:	b9d8      	cbnz	r0, 800ee82 <_svfiprintf_r+0xe6>
 800ee4a:	06d0      	lsls	r0, r2, #27
 800ee4c:	bf44      	itt	mi
 800ee4e:	2320      	movmi	r3, #32
 800ee50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee54:	0711      	lsls	r1, r2, #28
 800ee56:	bf44      	itt	mi
 800ee58:	232b      	movmi	r3, #43	; 0x2b
 800ee5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee5e:	f89a 3000 	ldrb.w	r3, [sl]
 800ee62:	2b2a      	cmp	r3, #42	; 0x2a
 800ee64:	d015      	beq.n	800ee92 <_svfiprintf_r+0xf6>
 800ee66:	9a07      	ldr	r2, [sp, #28]
 800ee68:	4654      	mov	r4, sl
 800ee6a:	2000      	movs	r0, #0
 800ee6c:	f04f 0c0a 	mov.w	ip, #10
 800ee70:	4621      	mov	r1, r4
 800ee72:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee76:	3b30      	subs	r3, #48	; 0x30
 800ee78:	2b09      	cmp	r3, #9
 800ee7a:	d94e      	bls.n	800ef1a <_svfiprintf_r+0x17e>
 800ee7c:	b1b0      	cbz	r0, 800eeac <_svfiprintf_r+0x110>
 800ee7e:	9207      	str	r2, [sp, #28]
 800ee80:	e014      	b.n	800eeac <_svfiprintf_r+0x110>
 800ee82:	eba0 0308 	sub.w	r3, r0, r8
 800ee86:	fa09 f303 	lsl.w	r3, r9, r3
 800ee8a:	4313      	orrs	r3, r2
 800ee8c:	9304      	str	r3, [sp, #16]
 800ee8e:	46a2      	mov	sl, r4
 800ee90:	e7d2      	b.n	800ee38 <_svfiprintf_r+0x9c>
 800ee92:	9b03      	ldr	r3, [sp, #12]
 800ee94:	1d19      	adds	r1, r3, #4
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	9103      	str	r1, [sp, #12]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	bfbb      	ittet	lt
 800ee9e:	425b      	neglt	r3, r3
 800eea0:	f042 0202 	orrlt.w	r2, r2, #2
 800eea4:	9307      	strge	r3, [sp, #28]
 800eea6:	9307      	strlt	r3, [sp, #28]
 800eea8:	bfb8      	it	lt
 800eeaa:	9204      	strlt	r2, [sp, #16]
 800eeac:	7823      	ldrb	r3, [r4, #0]
 800eeae:	2b2e      	cmp	r3, #46	; 0x2e
 800eeb0:	d10c      	bne.n	800eecc <_svfiprintf_r+0x130>
 800eeb2:	7863      	ldrb	r3, [r4, #1]
 800eeb4:	2b2a      	cmp	r3, #42	; 0x2a
 800eeb6:	d135      	bne.n	800ef24 <_svfiprintf_r+0x188>
 800eeb8:	9b03      	ldr	r3, [sp, #12]
 800eeba:	1d1a      	adds	r2, r3, #4
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	9203      	str	r2, [sp, #12]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	bfb8      	it	lt
 800eec4:	f04f 33ff 	movlt.w	r3, #4294967295
 800eec8:	3402      	adds	r4, #2
 800eeca:	9305      	str	r3, [sp, #20]
 800eecc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ef98 <_svfiprintf_r+0x1fc>
 800eed0:	7821      	ldrb	r1, [r4, #0]
 800eed2:	2203      	movs	r2, #3
 800eed4:	4650      	mov	r0, sl
 800eed6:	f7f1 f983 	bl	80001e0 <memchr>
 800eeda:	b140      	cbz	r0, 800eeee <_svfiprintf_r+0x152>
 800eedc:	2340      	movs	r3, #64	; 0x40
 800eede:	eba0 000a 	sub.w	r0, r0, sl
 800eee2:	fa03 f000 	lsl.w	r0, r3, r0
 800eee6:	9b04      	ldr	r3, [sp, #16]
 800eee8:	4303      	orrs	r3, r0
 800eeea:	3401      	adds	r4, #1
 800eeec:	9304      	str	r3, [sp, #16]
 800eeee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eef2:	4826      	ldr	r0, [pc, #152]	; (800ef8c <_svfiprintf_r+0x1f0>)
 800eef4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eef8:	2206      	movs	r2, #6
 800eefa:	f7f1 f971 	bl	80001e0 <memchr>
 800eefe:	2800      	cmp	r0, #0
 800ef00:	d038      	beq.n	800ef74 <_svfiprintf_r+0x1d8>
 800ef02:	4b23      	ldr	r3, [pc, #140]	; (800ef90 <_svfiprintf_r+0x1f4>)
 800ef04:	bb1b      	cbnz	r3, 800ef4e <_svfiprintf_r+0x1b2>
 800ef06:	9b03      	ldr	r3, [sp, #12]
 800ef08:	3307      	adds	r3, #7
 800ef0a:	f023 0307 	bic.w	r3, r3, #7
 800ef0e:	3308      	adds	r3, #8
 800ef10:	9303      	str	r3, [sp, #12]
 800ef12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef14:	4433      	add	r3, r6
 800ef16:	9309      	str	r3, [sp, #36]	; 0x24
 800ef18:	e767      	b.n	800edea <_svfiprintf_r+0x4e>
 800ef1a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef1e:	460c      	mov	r4, r1
 800ef20:	2001      	movs	r0, #1
 800ef22:	e7a5      	b.n	800ee70 <_svfiprintf_r+0xd4>
 800ef24:	2300      	movs	r3, #0
 800ef26:	3401      	adds	r4, #1
 800ef28:	9305      	str	r3, [sp, #20]
 800ef2a:	4619      	mov	r1, r3
 800ef2c:	f04f 0c0a 	mov.w	ip, #10
 800ef30:	4620      	mov	r0, r4
 800ef32:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef36:	3a30      	subs	r2, #48	; 0x30
 800ef38:	2a09      	cmp	r2, #9
 800ef3a:	d903      	bls.n	800ef44 <_svfiprintf_r+0x1a8>
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d0c5      	beq.n	800eecc <_svfiprintf_r+0x130>
 800ef40:	9105      	str	r1, [sp, #20]
 800ef42:	e7c3      	b.n	800eecc <_svfiprintf_r+0x130>
 800ef44:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef48:	4604      	mov	r4, r0
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	e7f0      	b.n	800ef30 <_svfiprintf_r+0x194>
 800ef4e:	ab03      	add	r3, sp, #12
 800ef50:	9300      	str	r3, [sp, #0]
 800ef52:	462a      	mov	r2, r5
 800ef54:	4b0f      	ldr	r3, [pc, #60]	; (800ef94 <_svfiprintf_r+0x1f8>)
 800ef56:	a904      	add	r1, sp, #16
 800ef58:	4638      	mov	r0, r7
 800ef5a:	f3af 8000 	nop.w
 800ef5e:	1c42      	adds	r2, r0, #1
 800ef60:	4606      	mov	r6, r0
 800ef62:	d1d6      	bne.n	800ef12 <_svfiprintf_r+0x176>
 800ef64:	89ab      	ldrh	r3, [r5, #12]
 800ef66:	065b      	lsls	r3, r3, #25
 800ef68:	f53f af2c 	bmi.w	800edc4 <_svfiprintf_r+0x28>
 800ef6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef6e:	b01d      	add	sp, #116	; 0x74
 800ef70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef74:	ab03      	add	r3, sp, #12
 800ef76:	9300      	str	r3, [sp, #0]
 800ef78:	462a      	mov	r2, r5
 800ef7a:	4b06      	ldr	r3, [pc, #24]	; (800ef94 <_svfiprintf_r+0x1f8>)
 800ef7c:	a904      	add	r1, sp, #16
 800ef7e:	4638      	mov	r0, r7
 800ef80:	f000 f9d4 	bl	800f32c <_printf_i>
 800ef84:	e7eb      	b.n	800ef5e <_svfiprintf_r+0x1c2>
 800ef86:	bf00      	nop
 800ef88:	08011628 	.word	0x08011628
 800ef8c:	08011632 	.word	0x08011632
 800ef90:	00000000 	.word	0x00000000
 800ef94:	0800ece5 	.word	0x0800ece5
 800ef98:	0801162e 	.word	0x0801162e

0800ef9c <__sfputc_r>:
 800ef9c:	6893      	ldr	r3, [r2, #8]
 800ef9e:	3b01      	subs	r3, #1
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	b410      	push	{r4}
 800efa4:	6093      	str	r3, [r2, #8]
 800efa6:	da08      	bge.n	800efba <__sfputc_r+0x1e>
 800efa8:	6994      	ldr	r4, [r2, #24]
 800efaa:	42a3      	cmp	r3, r4
 800efac:	db01      	blt.n	800efb2 <__sfputc_r+0x16>
 800efae:	290a      	cmp	r1, #10
 800efb0:	d103      	bne.n	800efba <__sfputc_r+0x1e>
 800efb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800efb6:	f7ff bad5 	b.w	800e564 <__swbuf_r>
 800efba:	6813      	ldr	r3, [r2, #0]
 800efbc:	1c58      	adds	r0, r3, #1
 800efbe:	6010      	str	r0, [r2, #0]
 800efc0:	7019      	strb	r1, [r3, #0]
 800efc2:	4608      	mov	r0, r1
 800efc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800efc8:	4770      	bx	lr

0800efca <__sfputs_r>:
 800efca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efcc:	4606      	mov	r6, r0
 800efce:	460f      	mov	r7, r1
 800efd0:	4614      	mov	r4, r2
 800efd2:	18d5      	adds	r5, r2, r3
 800efd4:	42ac      	cmp	r4, r5
 800efd6:	d101      	bne.n	800efdc <__sfputs_r+0x12>
 800efd8:	2000      	movs	r0, #0
 800efda:	e007      	b.n	800efec <__sfputs_r+0x22>
 800efdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efe0:	463a      	mov	r2, r7
 800efe2:	4630      	mov	r0, r6
 800efe4:	f7ff ffda 	bl	800ef9c <__sfputc_r>
 800efe8:	1c43      	adds	r3, r0, #1
 800efea:	d1f3      	bne.n	800efd4 <__sfputs_r+0xa>
 800efec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eff0 <_vfiprintf_r>:
 800eff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eff4:	460d      	mov	r5, r1
 800eff6:	b09d      	sub	sp, #116	; 0x74
 800eff8:	4614      	mov	r4, r2
 800effa:	4698      	mov	r8, r3
 800effc:	4606      	mov	r6, r0
 800effe:	b118      	cbz	r0, 800f008 <_vfiprintf_r+0x18>
 800f000:	6983      	ldr	r3, [r0, #24]
 800f002:	b90b      	cbnz	r3, 800f008 <_vfiprintf_r+0x18>
 800f004:	f7ff fc88 	bl	800e918 <__sinit>
 800f008:	4b89      	ldr	r3, [pc, #548]	; (800f230 <_vfiprintf_r+0x240>)
 800f00a:	429d      	cmp	r5, r3
 800f00c:	d11b      	bne.n	800f046 <_vfiprintf_r+0x56>
 800f00e:	6875      	ldr	r5, [r6, #4]
 800f010:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f012:	07d9      	lsls	r1, r3, #31
 800f014:	d405      	bmi.n	800f022 <_vfiprintf_r+0x32>
 800f016:	89ab      	ldrh	r3, [r5, #12]
 800f018:	059a      	lsls	r2, r3, #22
 800f01a:	d402      	bmi.n	800f022 <_vfiprintf_r+0x32>
 800f01c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f01e:	f7ff fd19 	bl	800ea54 <__retarget_lock_acquire_recursive>
 800f022:	89ab      	ldrh	r3, [r5, #12]
 800f024:	071b      	lsls	r3, r3, #28
 800f026:	d501      	bpl.n	800f02c <_vfiprintf_r+0x3c>
 800f028:	692b      	ldr	r3, [r5, #16]
 800f02a:	b9eb      	cbnz	r3, 800f068 <_vfiprintf_r+0x78>
 800f02c:	4629      	mov	r1, r5
 800f02e:	4630      	mov	r0, r6
 800f030:	f7ff faea 	bl	800e608 <__swsetup_r>
 800f034:	b1c0      	cbz	r0, 800f068 <_vfiprintf_r+0x78>
 800f036:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f038:	07dc      	lsls	r4, r3, #31
 800f03a:	d50e      	bpl.n	800f05a <_vfiprintf_r+0x6a>
 800f03c:	f04f 30ff 	mov.w	r0, #4294967295
 800f040:	b01d      	add	sp, #116	; 0x74
 800f042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f046:	4b7b      	ldr	r3, [pc, #492]	; (800f234 <_vfiprintf_r+0x244>)
 800f048:	429d      	cmp	r5, r3
 800f04a:	d101      	bne.n	800f050 <_vfiprintf_r+0x60>
 800f04c:	68b5      	ldr	r5, [r6, #8]
 800f04e:	e7df      	b.n	800f010 <_vfiprintf_r+0x20>
 800f050:	4b79      	ldr	r3, [pc, #484]	; (800f238 <_vfiprintf_r+0x248>)
 800f052:	429d      	cmp	r5, r3
 800f054:	bf08      	it	eq
 800f056:	68f5      	ldreq	r5, [r6, #12]
 800f058:	e7da      	b.n	800f010 <_vfiprintf_r+0x20>
 800f05a:	89ab      	ldrh	r3, [r5, #12]
 800f05c:	0598      	lsls	r0, r3, #22
 800f05e:	d4ed      	bmi.n	800f03c <_vfiprintf_r+0x4c>
 800f060:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f062:	f7ff fcf8 	bl	800ea56 <__retarget_lock_release_recursive>
 800f066:	e7e9      	b.n	800f03c <_vfiprintf_r+0x4c>
 800f068:	2300      	movs	r3, #0
 800f06a:	9309      	str	r3, [sp, #36]	; 0x24
 800f06c:	2320      	movs	r3, #32
 800f06e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f072:	f8cd 800c 	str.w	r8, [sp, #12]
 800f076:	2330      	movs	r3, #48	; 0x30
 800f078:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f23c <_vfiprintf_r+0x24c>
 800f07c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f080:	f04f 0901 	mov.w	r9, #1
 800f084:	4623      	mov	r3, r4
 800f086:	469a      	mov	sl, r3
 800f088:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f08c:	b10a      	cbz	r2, 800f092 <_vfiprintf_r+0xa2>
 800f08e:	2a25      	cmp	r2, #37	; 0x25
 800f090:	d1f9      	bne.n	800f086 <_vfiprintf_r+0x96>
 800f092:	ebba 0b04 	subs.w	fp, sl, r4
 800f096:	d00b      	beq.n	800f0b0 <_vfiprintf_r+0xc0>
 800f098:	465b      	mov	r3, fp
 800f09a:	4622      	mov	r2, r4
 800f09c:	4629      	mov	r1, r5
 800f09e:	4630      	mov	r0, r6
 800f0a0:	f7ff ff93 	bl	800efca <__sfputs_r>
 800f0a4:	3001      	adds	r0, #1
 800f0a6:	f000 80aa 	beq.w	800f1fe <_vfiprintf_r+0x20e>
 800f0aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f0ac:	445a      	add	r2, fp
 800f0ae:	9209      	str	r2, [sp, #36]	; 0x24
 800f0b0:	f89a 3000 	ldrb.w	r3, [sl]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	f000 80a2 	beq.w	800f1fe <_vfiprintf_r+0x20e>
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	f04f 32ff 	mov.w	r2, #4294967295
 800f0c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f0c4:	f10a 0a01 	add.w	sl, sl, #1
 800f0c8:	9304      	str	r3, [sp, #16]
 800f0ca:	9307      	str	r3, [sp, #28]
 800f0cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f0d0:	931a      	str	r3, [sp, #104]	; 0x68
 800f0d2:	4654      	mov	r4, sl
 800f0d4:	2205      	movs	r2, #5
 800f0d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0da:	4858      	ldr	r0, [pc, #352]	; (800f23c <_vfiprintf_r+0x24c>)
 800f0dc:	f7f1 f880 	bl	80001e0 <memchr>
 800f0e0:	9a04      	ldr	r2, [sp, #16]
 800f0e2:	b9d8      	cbnz	r0, 800f11c <_vfiprintf_r+0x12c>
 800f0e4:	06d1      	lsls	r1, r2, #27
 800f0e6:	bf44      	itt	mi
 800f0e8:	2320      	movmi	r3, #32
 800f0ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f0ee:	0713      	lsls	r3, r2, #28
 800f0f0:	bf44      	itt	mi
 800f0f2:	232b      	movmi	r3, #43	; 0x2b
 800f0f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f0f8:	f89a 3000 	ldrb.w	r3, [sl]
 800f0fc:	2b2a      	cmp	r3, #42	; 0x2a
 800f0fe:	d015      	beq.n	800f12c <_vfiprintf_r+0x13c>
 800f100:	9a07      	ldr	r2, [sp, #28]
 800f102:	4654      	mov	r4, sl
 800f104:	2000      	movs	r0, #0
 800f106:	f04f 0c0a 	mov.w	ip, #10
 800f10a:	4621      	mov	r1, r4
 800f10c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f110:	3b30      	subs	r3, #48	; 0x30
 800f112:	2b09      	cmp	r3, #9
 800f114:	d94e      	bls.n	800f1b4 <_vfiprintf_r+0x1c4>
 800f116:	b1b0      	cbz	r0, 800f146 <_vfiprintf_r+0x156>
 800f118:	9207      	str	r2, [sp, #28]
 800f11a:	e014      	b.n	800f146 <_vfiprintf_r+0x156>
 800f11c:	eba0 0308 	sub.w	r3, r0, r8
 800f120:	fa09 f303 	lsl.w	r3, r9, r3
 800f124:	4313      	orrs	r3, r2
 800f126:	9304      	str	r3, [sp, #16]
 800f128:	46a2      	mov	sl, r4
 800f12a:	e7d2      	b.n	800f0d2 <_vfiprintf_r+0xe2>
 800f12c:	9b03      	ldr	r3, [sp, #12]
 800f12e:	1d19      	adds	r1, r3, #4
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	9103      	str	r1, [sp, #12]
 800f134:	2b00      	cmp	r3, #0
 800f136:	bfbb      	ittet	lt
 800f138:	425b      	neglt	r3, r3
 800f13a:	f042 0202 	orrlt.w	r2, r2, #2
 800f13e:	9307      	strge	r3, [sp, #28]
 800f140:	9307      	strlt	r3, [sp, #28]
 800f142:	bfb8      	it	lt
 800f144:	9204      	strlt	r2, [sp, #16]
 800f146:	7823      	ldrb	r3, [r4, #0]
 800f148:	2b2e      	cmp	r3, #46	; 0x2e
 800f14a:	d10c      	bne.n	800f166 <_vfiprintf_r+0x176>
 800f14c:	7863      	ldrb	r3, [r4, #1]
 800f14e:	2b2a      	cmp	r3, #42	; 0x2a
 800f150:	d135      	bne.n	800f1be <_vfiprintf_r+0x1ce>
 800f152:	9b03      	ldr	r3, [sp, #12]
 800f154:	1d1a      	adds	r2, r3, #4
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	9203      	str	r2, [sp, #12]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	bfb8      	it	lt
 800f15e:	f04f 33ff 	movlt.w	r3, #4294967295
 800f162:	3402      	adds	r4, #2
 800f164:	9305      	str	r3, [sp, #20]
 800f166:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f24c <_vfiprintf_r+0x25c>
 800f16a:	7821      	ldrb	r1, [r4, #0]
 800f16c:	2203      	movs	r2, #3
 800f16e:	4650      	mov	r0, sl
 800f170:	f7f1 f836 	bl	80001e0 <memchr>
 800f174:	b140      	cbz	r0, 800f188 <_vfiprintf_r+0x198>
 800f176:	2340      	movs	r3, #64	; 0x40
 800f178:	eba0 000a 	sub.w	r0, r0, sl
 800f17c:	fa03 f000 	lsl.w	r0, r3, r0
 800f180:	9b04      	ldr	r3, [sp, #16]
 800f182:	4303      	orrs	r3, r0
 800f184:	3401      	adds	r4, #1
 800f186:	9304      	str	r3, [sp, #16]
 800f188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f18c:	482c      	ldr	r0, [pc, #176]	; (800f240 <_vfiprintf_r+0x250>)
 800f18e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f192:	2206      	movs	r2, #6
 800f194:	f7f1 f824 	bl	80001e0 <memchr>
 800f198:	2800      	cmp	r0, #0
 800f19a:	d03f      	beq.n	800f21c <_vfiprintf_r+0x22c>
 800f19c:	4b29      	ldr	r3, [pc, #164]	; (800f244 <_vfiprintf_r+0x254>)
 800f19e:	bb1b      	cbnz	r3, 800f1e8 <_vfiprintf_r+0x1f8>
 800f1a0:	9b03      	ldr	r3, [sp, #12]
 800f1a2:	3307      	adds	r3, #7
 800f1a4:	f023 0307 	bic.w	r3, r3, #7
 800f1a8:	3308      	adds	r3, #8
 800f1aa:	9303      	str	r3, [sp, #12]
 800f1ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1ae:	443b      	add	r3, r7
 800f1b0:	9309      	str	r3, [sp, #36]	; 0x24
 800f1b2:	e767      	b.n	800f084 <_vfiprintf_r+0x94>
 800f1b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800f1b8:	460c      	mov	r4, r1
 800f1ba:	2001      	movs	r0, #1
 800f1bc:	e7a5      	b.n	800f10a <_vfiprintf_r+0x11a>
 800f1be:	2300      	movs	r3, #0
 800f1c0:	3401      	adds	r4, #1
 800f1c2:	9305      	str	r3, [sp, #20]
 800f1c4:	4619      	mov	r1, r3
 800f1c6:	f04f 0c0a 	mov.w	ip, #10
 800f1ca:	4620      	mov	r0, r4
 800f1cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f1d0:	3a30      	subs	r2, #48	; 0x30
 800f1d2:	2a09      	cmp	r2, #9
 800f1d4:	d903      	bls.n	800f1de <_vfiprintf_r+0x1ee>
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d0c5      	beq.n	800f166 <_vfiprintf_r+0x176>
 800f1da:	9105      	str	r1, [sp, #20]
 800f1dc:	e7c3      	b.n	800f166 <_vfiprintf_r+0x176>
 800f1de:	fb0c 2101 	mla	r1, ip, r1, r2
 800f1e2:	4604      	mov	r4, r0
 800f1e4:	2301      	movs	r3, #1
 800f1e6:	e7f0      	b.n	800f1ca <_vfiprintf_r+0x1da>
 800f1e8:	ab03      	add	r3, sp, #12
 800f1ea:	9300      	str	r3, [sp, #0]
 800f1ec:	462a      	mov	r2, r5
 800f1ee:	4b16      	ldr	r3, [pc, #88]	; (800f248 <_vfiprintf_r+0x258>)
 800f1f0:	a904      	add	r1, sp, #16
 800f1f2:	4630      	mov	r0, r6
 800f1f4:	f3af 8000 	nop.w
 800f1f8:	4607      	mov	r7, r0
 800f1fa:	1c78      	adds	r0, r7, #1
 800f1fc:	d1d6      	bne.n	800f1ac <_vfiprintf_r+0x1bc>
 800f1fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f200:	07d9      	lsls	r1, r3, #31
 800f202:	d405      	bmi.n	800f210 <_vfiprintf_r+0x220>
 800f204:	89ab      	ldrh	r3, [r5, #12]
 800f206:	059a      	lsls	r2, r3, #22
 800f208:	d402      	bmi.n	800f210 <_vfiprintf_r+0x220>
 800f20a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f20c:	f7ff fc23 	bl	800ea56 <__retarget_lock_release_recursive>
 800f210:	89ab      	ldrh	r3, [r5, #12]
 800f212:	065b      	lsls	r3, r3, #25
 800f214:	f53f af12 	bmi.w	800f03c <_vfiprintf_r+0x4c>
 800f218:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f21a:	e711      	b.n	800f040 <_vfiprintf_r+0x50>
 800f21c:	ab03      	add	r3, sp, #12
 800f21e:	9300      	str	r3, [sp, #0]
 800f220:	462a      	mov	r2, r5
 800f222:	4b09      	ldr	r3, [pc, #36]	; (800f248 <_vfiprintf_r+0x258>)
 800f224:	a904      	add	r1, sp, #16
 800f226:	4630      	mov	r0, r6
 800f228:	f000 f880 	bl	800f32c <_printf_i>
 800f22c:	e7e4      	b.n	800f1f8 <_vfiprintf_r+0x208>
 800f22e:	bf00      	nop
 800f230:	080115e8 	.word	0x080115e8
 800f234:	08011608 	.word	0x08011608
 800f238:	080115c8 	.word	0x080115c8
 800f23c:	08011628 	.word	0x08011628
 800f240:	08011632 	.word	0x08011632
 800f244:	00000000 	.word	0x00000000
 800f248:	0800efcb 	.word	0x0800efcb
 800f24c:	0801162e 	.word	0x0801162e

0800f250 <_printf_common>:
 800f250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f254:	4616      	mov	r6, r2
 800f256:	4699      	mov	r9, r3
 800f258:	688a      	ldr	r2, [r1, #8]
 800f25a:	690b      	ldr	r3, [r1, #16]
 800f25c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f260:	4293      	cmp	r3, r2
 800f262:	bfb8      	it	lt
 800f264:	4613      	movlt	r3, r2
 800f266:	6033      	str	r3, [r6, #0]
 800f268:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f26c:	4607      	mov	r7, r0
 800f26e:	460c      	mov	r4, r1
 800f270:	b10a      	cbz	r2, 800f276 <_printf_common+0x26>
 800f272:	3301      	adds	r3, #1
 800f274:	6033      	str	r3, [r6, #0]
 800f276:	6823      	ldr	r3, [r4, #0]
 800f278:	0699      	lsls	r1, r3, #26
 800f27a:	bf42      	ittt	mi
 800f27c:	6833      	ldrmi	r3, [r6, #0]
 800f27e:	3302      	addmi	r3, #2
 800f280:	6033      	strmi	r3, [r6, #0]
 800f282:	6825      	ldr	r5, [r4, #0]
 800f284:	f015 0506 	ands.w	r5, r5, #6
 800f288:	d106      	bne.n	800f298 <_printf_common+0x48>
 800f28a:	f104 0a19 	add.w	sl, r4, #25
 800f28e:	68e3      	ldr	r3, [r4, #12]
 800f290:	6832      	ldr	r2, [r6, #0]
 800f292:	1a9b      	subs	r3, r3, r2
 800f294:	42ab      	cmp	r3, r5
 800f296:	dc26      	bgt.n	800f2e6 <_printf_common+0x96>
 800f298:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f29c:	1e13      	subs	r3, r2, #0
 800f29e:	6822      	ldr	r2, [r4, #0]
 800f2a0:	bf18      	it	ne
 800f2a2:	2301      	movne	r3, #1
 800f2a4:	0692      	lsls	r2, r2, #26
 800f2a6:	d42b      	bmi.n	800f300 <_printf_common+0xb0>
 800f2a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f2ac:	4649      	mov	r1, r9
 800f2ae:	4638      	mov	r0, r7
 800f2b0:	47c0      	blx	r8
 800f2b2:	3001      	adds	r0, #1
 800f2b4:	d01e      	beq.n	800f2f4 <_printf_common+0xa4>
 800f2b6:	6823      	ldr	r3, [r4, #0]
 800f2b8:	68e5      	ldr	r5, [r4, #12]
 800f2ba:	6832      	ldr	r2, [r6, #0]
 800f2bc:	f003 0306 	and.w	r3, r3, #6
 800f2c0:	2b04      	cmp	r3, #4
 800f2c2:	bf08      	it	eq
 800f2c4:	1aad      	subeq	r5, r5, r2
 800f2c6:	68a3      	ldr	r3, [r4, #8]
 800f2c8:	6922      	ldr	r2, [r4, #16]
 800f2ca:	bf0c      	ite	eq
 800f2cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f2d0:	2500      	movne	r5, #0
 800f2d2:	4293      	cmp	r3, r2
 800f2d4:	bfc4      	itt	gt
 800f2d6:	1a9b      	subgt	r3, r3, r2
 800f2d8:	18ed      	addgt	r5, r5, r3
 800f2da:	2600      	movs	r6, #0
 800f2dc:	341a      	adds	r4, #26
 800f2de:	42b5      	cmp	r5, r6
 800f2e0:	d11a      	bne.n	800f318 <_printf_common+0xc8>
 800f2e2:	2000      	movs	r0, #0
 800f2e4:	e008      	b.n	800f2f8 <_printf_common+0xa8>
 800f2e6:	2301      	movs	r3, #1
 800f2e8:	4652      	mov	r2, sl
 800f2ea:	4649      	mov	r1, r9
 800f2ec:	4638      	mov	r0, r7
 800f2ee:	47c0      	blx	r8
 800f2f0:	3001      	adds	r0, #1
 800f2f2:	d103      	bne.n	800f2fc <_printf_common+0xac>
 800f2f4:	f04f 30ff 	mov.w	r0, #4294967295
 800f2f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2fc:	3501      	adds	r5, #1
 800f2fe:	e7c6      	b.n	800f28e <_printf_common+0x3e>
 800f300:	18e1      	adds	r1, r4, r3
 800f302:	1c5a      	adds	r2, r3, #1
 800f304:	2030      	movs	r0, #48	; 0x30
 800f306:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f30a:	4422      	add	r2, r4
 800f30c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f310:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f314:	3302      	adds	r3, #2
 800f316:	e7c7      	b.n	800f2a8 <_printf_common+0x58>
 800f318:	2301      	movs	r3, #1
 800f31a:	4622      	mov	r2, r4
 800f31c:	4649      	mov	r1, r9
 800f31e:	4638      	mov	r0, r7
 800f320:	47c0      	blx	r8
 800f322:	3001      	adds	r0, #1
 800f324:	d0e6      	beq.n	800f2f4 <_printf_common+0xa4>
 800f326:	3601      	adds	r6, #1
 800f328:	e7d9      	b.n	800f2de <_printf_common+0x8e>
	...

0800f32c <_printf_i>:
 800f32c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f330:	7e0f      	ldrb	r7, [r1, #24]
 800f332:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f334:	2f78      	cmp	r7, #120	; 0x78
 800f336:	4691      	mov	r9, r2
 800f338:	4680      	mov	r8, r0
 800f33a:	460c      	mov	r4, r1
 800f33c:	469a      	mov	sl, r3
 800f33e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f342:	d807      	bhi.n	800f354 <_printf_i+0x28>
 800f344:	2f62      	cmp	r7, #98	; 0x62
 800f346:	d80a      	bhi.n	800f35e <_printf_i+0x32>
 800f348:	2f00      	cmp	r7, #0
 800f34a:	f000 80d8 	beq.w	800f4fe <_printf_i+0x1d2>
 800f34e:	2f58      	cmp	r7, #88	; 0x58
 800f350:	f000 80a3 	beq.w	800f49a <_printf_i+0x16e>
 800f354:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f358:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f35c:	e03a      	b.n	800f3d4 <_printf_i+0xa8>
 800f35e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f362:	2b15      	cmp	r3, #21
 800f364:	d8f6      	bhi.n	800f354 <_printf_i+0x28>
 800f366:	a101      	add	r1, pc, #4	; (adr r1, 800f36c <_printf_i+0x40>)
 800f368:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f36c:	0800f3c5 	.word	0x0800f3c5
 800f370:	0800f3d9 	.word	0x0800f3d9
 800f374:	0800f355 	.word	0x0800f355
 800f378:	0800f355 	.word	0x0800f355
 800f37c:	0800f355 	.word	0x0800f355
 800f380:	0800f355 	.word	0x0800f355
 800f384:	0800f3d9 	.word	0x0800f3d9
 800f388:	0800f355 	.word	0x0800f355
 800f38c:	0800f355 	.word	0x0800f355
 800f390:	0800f355 	.word	0x0800f355
 800f394:	0800f355 	.word	0x0800f355
 800f398:	0800f4e5 	.word	0x0800f4e5
 800f39c:	0800f409 	.word	0x0800f409
 800f3a0:	0800f4c7 	.word	0x0800f4c7
 800f3a4:	0800f355 	.word	0x0800f355
 800f3a8:	0800f355 	.word	0x0800f355
 800f3ac:	0800f507 	.word	0x0800f507
 800f3b0:	0800f355 	.word	0x0800f355
 800f3b4:	0800f409 	.word	0x0800f409
 800f3b8:	0800f355 	.word	0x0800f355
 800f3bc:	0800f355 	.word	0x0800f355
 800f3c0:	0800f4cf 	.word	0x0800f4cf
 800f3c4:	682b      	ldr	r3, [r5, #0]
 800f3c6:	1d1a      	adds	r2, r3, #4
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	602a      	str	r2, [r5, #0]
 800f3cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f3d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f3d4:	2301      	movs	r3, #1
 800f3d6:	e0a3      	b.n	800f520 <_printf_i+0x1f4>
 800f3d8:	6820      	ldr	r0, [r4, #0]
 800f3da:	6829      	ldr	r1, [r5, #0]
 800f3dc:	0606      	lsls	r6, r0, #24
 800f3de:	f101 0304 	add.w	r3, r1, #4
 800f3e2:	d50a      	bpl.n	800f3fa <_printf_i+0xce>
 800f3e4:	680e      	ldr	r6, [r1, #0]
 800f3e6:	602b      	str	r3, [r5, #0]
 800f3e8:	2e00      	cmp	r6, #0
 800f3ea:	da03      	bge.n	800f3f4 <_printf_i+0xc8>
 800f3ec:	232d      	movs	r3, #45	; 0x2d
 800f3ee:	4276      	negs	r6, r6
 800f3f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f3f4:	485e      	ldr	r0, [pc, #376]	; (800f570 <_printf_i+0x244>)
 800f3f6:	230a      	movs	r3, #10
 800f3f8:	e019      	b.n	800f42e <_printf_i+0x102>
 800f3fa:	680e      	ldr	r6, [r1, #0]
 800f3fc:	602b      	str	r3, [r5, #0]
 800f3fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f402:	bf18      	it	ne
 800f404:	b236      	sxthne	r6, r6
 800f406:	e7ef      	b.n	800f3e8 <_printf_i+0xbc>
 800f408:	682b      	ldr	r3, [r5, #0]
 800f40a:	6820      	ldr	r0, [r4, #0]
 800f40c:	1d19      	adds	r1, r3, #4
 800f40e:	6029      	str	r1, [r5, #0]
 800f410:	0601      	lsls	r1, r0, #24
 800f412:	d501      	bpl.n	800f418 <_printf_i+0xec>
 800f414:	681e      	ldr	r6, [r3, #0]
 800f416:	e002      	b.n	800f41e <_printf_i+0xf2>
 800f418:	0646      	lsls	r6, r0, #25
 800f41a:	d5fb      	bpl.n	800f414 <_printf_i+0xe8>
 800f41c:	881e      	ldrh	r6, [r3, #0]
 800f41e:	4854      	ldr	r0, [pc, #336]	; (800f570 <_printf_i+0x244>)
 800f420:	2f6f      	cmp	r7, #111	; 0x6f
 800f422:	bf0c      	ite	eq
 800f424:	2308      	moveq	r3, #8
 800f426:	230a      	movne	r3, #10
 800f428:	2100      	movs	r1, #0
 800f42a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f42e:	6865      	ldr	r5, [r4, #4]
 800f430:	60a5      	str	r5, [r4, #8]
 800f432:	2d00      	cmp	r5, #0
 800f434:	bfa2      	ittt	ge
 800f436:	6821      	ldrge	r1, [r4, #0]
 800f438:	f021 0104 	bicge.w	r1, r1, #4
 800f43c:	6021      	strge	r1, [r4, #0]
 800f43e:	b90e      	cbnz	r6, 800f444 <_printf_i+0x118>
 800f440:	2d00      	cmp	r5, #0
 800f442:	d04d      	beq.n	800f4e0 <_printf_i+0x1b4>
 800f444:	4615      	mov	r5, r2
 800f446:	fbb6 f1f3 	udiv	r1, r6, r3
 800f44a:	fb03 6711 	mls	r7, r3, r1, r6
 800f44e:	5dc7      	ldrb	r7, [r0, r7]
 800f450:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f454:	4637      	mov	r7, r6
 800f456:	42bb      	cmp	r3, r7
 800f458:	460e      	mov	r6, r1
 800f45a:	d9f4      	bls.n	800f446 <_printf_i+0x11a>
 800f45c:	2b08      	cmp	r3, #8
 800f45e:	d10b      	bne.n	800f478 <_printf_i+0x14c>
 800f460:	6823      	ldr	r3, [r4, #0]
 800f462:	07de      	lsls	r6, r3, #31
 800f464:	d508      	bpl.n	800f478 <_printf_i+0x14c>
 800f466:	6923      	ldr	r3, [r4, #16]
 800f468:	6861      	ldr	r1, [r4, #4]
 800f46a:	4299      	cmp	r1, r3
 800f46c:	bfde      	ittt	le
 800f46e:	2330      	movle	r3, #48	; 0x30
 800f470:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f474:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f478:	1b52      	subs	r2, r2, r5
 800f47a:	6122      	str	r2, [r4, #16]
 800f47c:	f8cd a000 	str.w	sl, [sp]
 800f480:	464b      	mov	r3, r9
 800f482:	aa03      	add	r2, sp, #12
 800f484:	4621      	mov	r1, r4
 800f486:	4640      	mov	r0, r8
 800f488:	f7ff fee2 	bl	800f250 <_printf_common>
 800f48c:	3001      	adds	r0, #1
 800f48e:	d14c      	bne.n	800f52a <_printf_i+0x1fe>
 800f490:	f04f 30ff 	mov.w	r0, #4294967295
 800f494:	b004      	add	sp, #16
 800f496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f49a:	4835      	ldr	r0, [pc, #212]	; (800f570 <_printf_i+0x244>)
 800f49c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f4a0:	6829      	ldr	r1, [r5, #0]
 800f4a2:	6823      	ldr	r3, [r4, #0]
 800f4a4:	f851 6b04 	ldr.w	r6, [r1], #4
 800f4a8:	6029      	str	r1, [r5, #0]
 800f4aa:	061d      	lsls	r5, r3, #24
 800f4ac:	d514      	bpl.n	800f4d8 <_printf_i+0x1ac>
 800f4ae:	07df      	lsls	r7, r3, #31
 800f4b0:	bf44      	itt	mi
 800f4b2:	f043 0320 	orrmi.w	r3, r3, #32
 800f4b6:	6023      	strmi	r3, [r4, #0]
 800f4b8:	b91e      	cbnz	r6, 800f4c2 <_printf_i+0x196>
 800f4ba:	6823      	ldr	r3, [r4, #0]
 800f4bc:	f023 0320 	bic.w	r3, r3, #32
 800f4c0:	6023      	str	r3, [r4, #0]
 800f4c2:	2310      	movs	r3, #16
 800f4c4:	e7b0      	b.n	800f428 <_printf_i+0xfc>
 800f4c6:	6823      	ldr	r3, [r4, #0]
 800f4c8:	f043 0320 	orr.w	r3, r3, #32
 800f4cc:	6023      	str	r3, [r4, #0]
 800f4ce:	2378      	movs	r3, #120	; 0x78
 800f4d0:	4828      	ldr	r0, [pc, #160]	; (800f574 <_printf_i+0x248>)
 800f4d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f4d6:	e7e3      	b.n	800f4a0 <_printf_i+0x174>
 800f4d8:	0659      	lsls	r1, r3, #25
 800f4da:	bf48      	it	mi
 800f4dc:	b2b6      	uxthmi	r6, r6
 800f4de:	e7e6      	b.n	800f4ae <_printf_i+0x182>
 800f4e0:	4615      	mov	r5, r2
 800f4e2:	e7bb      	b.n	800f45c <_printf_i+0x130>
 800f4e4:	682b      	ldr	r3, [r5, #0]
 800f4e6:	6826      	ldr	r6, [r4, #0]
 800f4e8:	6961      	ldr	r1, [r4, #20]
 800f4ea:	1d18      	adds	r0, r3, #4
 800f4ec:	6028      	str	r0, [r5, #0]
 800f4ee:	0635      	lsls	r5, r6, #24
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	d501      	bpl.n	800f4f8 <_printf_i+0x1cc>
 800f4f4:	6019      	str	r1, [r3, #0]
 800f4f6:	e002      	b.n	800f4fe <_printf_i+0x1d2>
 800f4f8:	0670      	lsls	r0, r6, #25
 800f4fa:	d5fb      	bpl.n	800f4f4 <_printf_i+0x1c8>
 800f4fc:	8019      	strh	r1, [r3, #0]
 800f4fe:	2300      	movs	r3, #0
 800f500:	6123      	str	r3, [r4, #16]
 800f502:	4615      	mov	r5, r2
 800f504:	e7ba      	b.n	800f47c <_printf_i+0x150>
 800f506:	682b      	ldr	r3, [r5, #0]
 800f508:	1d1a      	adds	r2, r3, #4
 800f50a:	602a      	str	r2, [r5, #0]
 800f50c:	681d      	ldr	r5, [r3, #0]
 800f50e:	6862      	ldr	r2, [r4, #4]
 800f510:	2100      	movs	r1, #0
 800f512:	4628      	mov	r0, r5
 800f514:	f7f0 fe64 	bl	80001e0 <memchr>
 800f518:	b108      	cbz	r0, 800f51e <_printf_i+0x1f2>
 800f51a:	1b40      	subs	r0, r0, r5
 800f51c:	6060      	str	r0, [r4, #4]
 800f51e:	6863      	ldr	r3, [r4, #4]
 800f520:	6123      	str	r3, [r4, #16]
 800f522:	2300      	movs	r3, #0
 800f524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f528:	e7a8      	b.n	800f47c <_printf_i+0x150>
 800f52a:	6923      	ldr	r3, [r4, #16]
 800f52c:	462a      	mov	r2, r5
 800f52e:	4649      	mov	r1, r9
 800f530:	4640      	mov	r0, r8
 800f532:	47d0      	blx	sl
 800f534:	3001      	adds	r0, #1
 800f536:	d0ab      	beq.n	800f490 <_printf_i+0x164>
 800f538:	6823      	ldr	r3, [r4, #0]
 800f53a:	079b      	lsls	r3, r3, #30
 800f53c:	d413      	bmi.n	800f566 <_printf_i+0x23a>
 800f53e:	68e0      	ldr	r0, [r4, #12]
 800f540:	9b03      	ldr	r3, [sp, #12]
 800f542:	4298      	cmp	r0, r3
 800f544:	bfb8      	it	lt
 800f546:	4618      	movlt	r0, r3
 800f548:	e7a4      	b.n	800f494 <_printf_i+0x168>
 800f54a:	2301      	movs	r3, #1
 800f54c:	4632      	mov	r2, r6
 800f54e:	4649      	mov	r1, r9
 800f550:	4640      	mov	r0, r8
 800f552:	47d0      	blx	sl
 800f554:	3001      	adds	r0, #1
 800f556:	d09b      	beq.n	800f490 <_printf_i+0x164>
 800f558:	3501      	adds	r5, #1
 800f55a:	68e3      	ldr	r3, [r4, #12]
 800f55c:	9903      	ldr	r1, [sp, #12]
 800f55e:	1a5b      	subs	r3, r3, r1
 800f560:	42ab      	cmp	r3, r5
 800f562:	dcf2      	bgt.n	800f54a <_printf_i+0x21e>
 800f564:	e7eb      	b.n	800f53e <_printf_i+0x212>
 800f566:	2500      	movs	r5, #0
 800f568:	f104 0619 	add.w	r6, r4, #25
 800f56c:	e7f5      	b.n	800f55a <_printf_i+0x22e>
 800f56e:	bf00      	nop
 800f570:	08011639 	.word	0x08011639
 800f574:	0801164a 	.word	0x0801164a

0800f578 <_sbrk_r>:
 800f578:	b538      	push	{r3, r4, r5, lr}
 800f57a:	4d06      	ldr	r5, [pc, #24]	; (800f594 <_sbrk_r+0x1c>)
 800f57c:	2300      	movs	r3, #0
 800f57e:	4604      	mov	r4, r0
 800f580:	4608      	mov	r0, r1
 800f582:	602b      	str	r3, [r5, #0]
 800f584:	f7f2 fe86 	bl	8002294 <_sbrk>
 800f588:	1c43      	adds	r3, r0, #1
 800f58a:	d102      	bne.n	800f592 <_sbrk_r+0x1a>
 800f58c:	682b      	ldr	r3, [r5, #0]
 800f58e:	b103      	cbz	r3, 800f592 <_sbrk_r+0x1a>
 800f590:	6023      	str	r3, [r4, #0]
 800f592:	bd38      	pop	{r3, r4, r5, pc}
 800f594:	200012e0 	.word	0x200012e0

0800f598 <__sread>:
 800f598:	b510      	push	{r4, lr}
 800f59a:	460c      	mov	r4, r1
 800f59c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5a0:	f000 f8f8 	bl	800f794 <_read_r>
 800f5a4:	2800      	cmp	r0, #0
 800f5a6:	bfab      	itete	ge
 800f5a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f5aa:	89a3      	ldrhlt	r3, [r4, #12]
 800f5ac:	181b      	addge	r3, r3, r0
 800f5ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f5b2:	bfac      	ite	ge
 800f5b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800f5b6:	81a3      	strhlt	r3, [r4, #12]
 800f5b8:	bd10      	pop	{r4, pc}

0800f5ba <__swrite>:
 800f5ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5be:	461f      	mov	r7, r3
 800f5c0:	898b      	ldrh	r3, [r1, #12]
 800f5c2:	05db      	lsls	r3, r3, #23
 800f5c4:	4605      	mov	r5, r0
 800f5c6:	460c      	mov	r4, r1
 800f5c8:	4616      	mov	r6, r2
 800f5ca:	d505      	bpl.n	800f5d8 <__swrite+0x1e>
 800f5cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5d0:	2302      	movs	r3, #2
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	f000 f868 	bl	800f6a8 <_lseek_r>
 800f5d8:	89a3      	ldrh	r3, [r4, #12]
 800f5da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f5de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f5e2:	81a3      	strh	r3, [r4, #12]
 800f5e4:	4632      	mov	r2, r6
 800f5e6:	463b      	mov	r3, r7
 800f5e8:	4628      	mov	r0, r5
 800f5ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f5ee:	f000 b817 	b.w	800f620 <_write_r>

0800f5f2 <__sseek>:
 800f5f2:	b510      	push	{r4, lr}
 800f5f4:	460c      	mov	r4, r1
 800f5f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5fa:	f000 f855 	bl	800f6a8 <_lseek_r>
 800f5fe:	1c43      	adds	r3, r0, #1
 800f600:	89a3      	ldrh	r3, [r4, #12]
 800f602:	bf15      	itete	ne
 800f604:	6560      	strne	r0, [r4, #84]	; 0x54
 800f606:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f60a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f60e:	81a3      	strheq	r3, [r4, #12]
 800f610:	bf18      	it	ne
 800f612:	81a3      	strhne	r3, [r4, #12]
 800f614:	bd10      	pop	{r4, pc}

0800f616 <__sclose>:
 800f616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f61a:	f000 b813 	b.w	800f644 <_close_r>
	...

0800f620 <_write_r>:
 800f620:	b538      	push	{r3, r4, r5, lr}
 800f622:	4d07      	ldr	r5, [pc, #28]	; (800f640 <_write_r+0x20>)
 800f624:	4604      	mov	r4, r0
 800f626:	4608      	mov	r0, r1
 800f628:	4611      	mov	r1, r2
 800f62a:	2200      	movs	r2, #0
 800f62c:	602a      	str	r2, [r5, #0]
 800f62e:	461a      	mov	r2, r3
 800f630:	f7f2 fddf 	bl	80021f2 <_write>
 800f634:	1c43      	adds	r3, r0, #1
 800f636:	d102      	bne.n	800f63e <_write_r+0x1e>
 800f638:	682b      	ldr	r3, [r5, #0]
 800f63a:	b103      	cbz	r3, 800f63e <_write_r+0x1e>
 800f63c:	6023      	str	r3, [r4, #0]
 800f63e:	bd38      	pop	{r3, r4, r5, pc}
 800f640:	200012e0 	.word	0x200012e0

0800f644 <_close_r>:
 800f644:	b538      	push	{r3, r4, r5, lr}
 800f646:	4d06      	ldr	r5, [pc, #24]	; (800f660 <_close_r+0x1c>)
 800f648:	2300      	movs	r3, #0
 800f64a:	4604      	mov	r4, r0
 800f64c:	4608      	mov	r0, r1
 800f64e:	602b      	str	r3, [r5, #0]
 800f650:	f7f2 fdeb 	bl	800222a <_close>
 800f654:	1c43      	adds	r3, r0, #1
 800f656:	d102      	bne.n	800f65e <_close_r+0x1a>
 800f658:	682b      	ldr	r3, [r5, #0]
 800f65a:	b103      	cbz	r3, 800f65e <_close_r+0x1a>
 800f65c:	6023      	str	r3, [r4, #0]
 800f65e:	bd38      	pop	{r3, r4, r5, pc}
 800f660:	200012e0 	.word	0x200012e0

0800f664 <_fstat_r>:
 800f664:	b538      	push	{r3, r4, r5, lr}
 800f666:	4d07      	ldr	r5, [pc, #28]	; (800f684 <_fstat_r+0x20>)
 800f668:	2300      	movs	r3, #0
 800f66a:	4604      	mov	r4, r0
 800f66c:	4608      	mov	r0, r1
 800f66e:	4611      	mov	r1, r2
 800f670:	602b      	str	r3, [r5, #0]
 800f672:	f7f2 fde6 	bl	8002242 <_fstat>
 800f676:	1c43      	adds	r3, r0, #1
 800f678:	d102      	bne.n	800f680 <_fstat_r+0x1c>
 800f67a:	682b      	ldr	r3, [r5, #0]
 800f67c:	b103      	cbz	r3, 800f680 <_fstat_r+0x1c>
 800f67e:	6023      	str	r3, [r4, #0]
 800f680:	bd38      	pop	{r3, r4, r5, pc}
 800f682:	bf00      	nop
 800f684:	200012e0 	.word	0x200012e0

0800f688 <_isatty_r>:
 800f688:	b538      	push	{r3, r4, r5, lr}
 800f68a:	4d06      	ldr	r5, [pc, #24]	; (800f6a4 <_isatty_r+0x1c>)
 800f68c:	2300      	movs	r3, #0
 800f68e:	4604      	mov	r4, r0
 800f690:	4608      	mov	r0, r1
 800f692:	602b      	str	r3, [r5, #0]
 800f694:	f7f2 fde5 	bl	8002262 <_isatty>
 800f698:	1c43      	adds	r3, r0, #1
 800f69a:	d102      	bne.n	800f6a2 <_isatty_r+0x1a>
 800f69c:	682b      	ldr	r3, [r5, #0]
 800f69e:	b103      	cbz	r3, 800f6a2 <_isatty_r+0x1a>
 800f6a0:	6023      	str	r3, [r4, #0]
 800f6a2:	bd38      	pop	{r3, r4, r5, pc}
 800f6a4:	200012e0 	.word	0x200012e0

0800f6a8 <_lseek_r>:
 800f6a8:	b538      	push	{r3, r4, r5, lr}
 800f6aa:	4d07      	ldr	r5, [pc, #28]	; (800f6c8 <_lseek_r+0x20>)
 800f6ac:	4604      	mov	r4, r0
 800f6ae:	4608      	mov	r0, r1
 800f6b0:	4611      	mov	r1, r2
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	602a      	str	r2, [r5, #0]
 800f6b6:	461a      	mov	r2, r3
 800f6b8:	f7f2 fdde 	bl	8002278 <_lseek>
 800f6bc:	1c43      	adds	r3, r0, #1
 800f6be:	d102      	bne.n	800f6c6 <_lseek_r+0x1e>
 800f6c0:	682b      	ldr	r3, [r5, #0]
 800f6c2:	b103      	cbz	r3, 800f6c6 <_lseek_r+0x1e>
 800f6c4:	6023      	str	r3, [r4, #0]
 800f6c6:	bd38      	pop	{r3, r4, r5, pc}
 800f6c8:	200012e0 	.word	0x200012e0

0800f6cc <memcpy>:
 800f6cc:	440a      	add	r2, r1
 800f6ce:	4291      	cmp	r1, r2
 800f6d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800f6d4:	d100      	bne.n	800f6d8 <memcpy+0xc>
 800f6d6:	4770      	bx	lr
 800f6d8:	b510      	push	{r4, lr}
 800f6da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f6de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f6e2:	4291      	cmp	r1, r2
 800f6e4:	d1f9      	bne.n	800f6da <memcpy+0xe>
 800f6e6:	bd10      	pop	{r4, pc}

0800f6e8 <memmove>:
 800f6e8:	4288      	cmp	r0, r1
 800f6ea:	b510      	push	{r4, lr}
 800f6ec:	eb01 0402 	add.w	r4, r1, r2
 800f6f0:	d902      	bls.n	800f6f8 <memmove+0x10>
 800f6f2:	4284      	cmp	r4, r0
 800f6f4:	4623      	mov	r3, r4
 800f6f6:	d807      	bhi.n	800f708 <memmove+0x20>
 800f6f8:	1e43      	subs	r3, r0, #1
 800f6fa:	42a1      	cmp	r1, r4
 800f6fc:	d008      	beq.n	800f710 <memmove+0x28>
 800f6fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f702:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f706:	e7f8      	b.n	800f6fa <memmove+0x12>
 800f708:	4402      	add	r2, r0
 800f70a:	4601      	mov	r1, r0
 800f70c:	428a      	cmp	r2, r1
 800f70e:	d100      	bne.n	800f712 <memmove+0x2a>
 800f710:	bd10      	pop	{r4, pc}
 800f712:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f716:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f71a:	e7f7      	b.n	800f70c <memmove+0x24>

0800f71c <__malloc_lock>:
 800f71c:	4801      	ldr	r0, [pc, #4]	; (800f724 <__malloc_lock+0x8>)
 800f71e:	f7ff b999 	b.w	800ea54 <__retarget_lock_acquire_recursive>
 800f722:	bf00      	nop
 800f724:	200012d4 	.word	0x200012d4

0800f728 <__malloc_unlock>:
 800f728:	4801      	ldr	r0, [pc, #4]	; (800f730 <__malloc_unlock+0x8>)
 800f72a:	f7ff b994 	b.w	800ea56 <__retarget_lock_release_recursive>
 800f72e:	bf00      	nop
 800f730:	200012d4 	.word	0x200012d4

0800f734 <_realloc_r>:
 800f734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f738:	4680      	mov	r8, r0
 800f73a:	4614      	mov	r4, r2
 800f73c:	460e      	mov	r6, r1
 800f73e:	b921      	cbnz	r1, 800f74a <_realloc_r+0x16>
 800f740:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f744:	4611      	mov	r1, r2
 800f746:	f7ff ba59 	b.w	800ebfc <_malloc_r>
 800f74a:	b92a      	cbnz	r2, 800f758 <_realloc_r+0x24>
 800f74c:	f7ff f9ea 	bl	800eb24 <_free_r>
 800f750:	4625      	mov	r5, r4
 800f752:	4628      	mov	r0, r5
 800f754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f758:	f000 f82e 	bl	800f7b8 <_malloc_usable_size_r>
 800f75c:	4284      	cmp	r4, r0
 800f75e:	4607      	mov	r7, r0
 800f760:	d802      	bhi.n	800f768 <_realloc_r+0x34>
 800f762:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f766:	d812      	bhi.n	800f78e <_realloc_r+0x5a>
 800f768:	4621      	mov	r1, r4
 800f76a:	4640      	mov	r0, r8
 800f76c:	f7ff fa46 	bl	800ebfc <_malloc_r>
 800f770:	4605      	mov	r5, r0
 800f772:	2800      	cmp	r0, #0
 800f774:	d0ed      	beq.n	800f752 <_realloc_r+0x1e>
 800f776:	42bc      	cmp	r4, r7
 800f778:	4622      	mov	r2, r4
 800f77a:	4631      	mov	r1, r6
 800f77c:	bf28      	it	cs
 800f77e:	463a      	movcs	r2, r7
 800f780:	f7ff ffa4 	bl	800f6cc <memcpy>
 800f784:	4631      	mov	r1, r6
 800f786:	4640      	mov	r0, r8
 800f788:	f7ff f9cc 	bl	800eb24 <_free_r>
 800f78c:	e7e1      	b.n	800f752 <_realloc_r+0x1e>
 800f78e:	4635      	mov	r5, r6
 800f790:	e7df      	b.n	800f752 <_realloc_r+0x1e>
	...

0800f794 <_read_r>:
 800f794:	b538      	push	{r3, r4, r5, lr}
 800f796:	4d07      	ldr	r5, [pc, #28]	; (800f7b4 <_read_r+0x20>)
 800f798:	4604      	mov	r4, r0
 800f79a:	4608      	mov	r0, r1
 800f79c:	4611      	mov	r1, r2
 800f79e:	2200      	movs	r2, #0
 800f7a0:	602a      	str	r2, [r5, #0]
 800f7a2:	461a      	mov	r2, r3
 800f7a4:	f7f2 fd08 	bl	80021b8 <_read>
 800f7a8:	1c43      	adds	r3, r0, #1
 800f7aa:	d102      	bne.n	800f7b2 <_read_r+0x1e>
 800f7ac:	682b      	ldr	r3, [r5, #0]
 800f7ae:	b103      	cbz	r3, 800f7b2 <_read_r+0x1e>
 800f7b0:	6023      	str	r3, [r4, #0]
 800f7b2:	bd38      	pop	{r3, r4, r5, pc}
 800f7b4:	200012e0 	.word	0x200012e0

0800f7b8 <_malloc_usable_size_r>:
 800f7b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f7bc:	1f18      	subs	r0, r3, #4
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	bfbc      	itt	lt
 800f7c2:	580b      	ldrlt	r3, [r1, r0]
 800f7c4:	18c0      	addlt	r0, r0, r3
 800f7c6:	4770      	bx	lr

0800f7c8 <_init>:
 800f7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7ca:	bf00      	nop
 800f7cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7ce:	bc08      	pop	{r3}
 800f7d0:	469e      	mov	lr, r3
 800f7d2:	4770      	bx	lr

0800f7d4 <_fini>:
 800f7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7d6:	bf00      	nop
 800f7d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7da:	bc08      	pop	{r3}
 800f7dc:	469e      	mov	lr, r3
 800f7de:	4770      	bx	lr
