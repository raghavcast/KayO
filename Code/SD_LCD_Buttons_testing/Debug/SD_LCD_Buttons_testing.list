
SD_LCD_Buttons_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f798  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ed4  0800f938  0800f938  0001f938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801180c  0801180c  00030190  2**0
                  CONTENTS
  4 .ARM          00000008  0801180c  0801180c  0002180c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011814  08011814  00030190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011814  08011814  00021814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011818  08011818  00021818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0801181c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001154  20000190  080119ac  00030190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200012e4  080119ac  000312e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002121c  00000000  00000000  000301c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004754  00000000  00000000  000513dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cb0  00000000  00000000  00055b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001d13b  00000000  00000000  000577e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00024be0  00000000  00000000  0007491b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0009ad23  00000000  00000000  000994fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0013421e  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001ad8  00000000  00000000  00134270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000082e8  00000000  00000000  00135d48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000190 	.word	0x20000190
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f920 	.word	0x0800f920

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000194 	.word	0x20000194
 80001dc:	0800f920 	.word	0x0800f920

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ILI9341_Select>:
/* vim: set ai et ts=4 sw=4: */
#include "stm32f4xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800058e:	4802      	ldr	r0, [pc, #8]	; (8000598 <ILI9341_Select+0x14>)
 8000590:	f002 fafc 	bl	8002b8c <HAL_GPIO_WritePin>
}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40020000 	.word	0x40020000

0800059c <ILI9341_Unselect>:

void ILI9341_Unselect() {
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005a6:	4802      	ldr	r0, [pc, #8]	; (80005b0 <ILI9341_Unselect+0x14>)
 80005a8:	f002 faf0 	bl	8002b8c <HAL_GPIO_WritePin>
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40020000 	.word	0x40020000

080005b4 <ILI9341_Reset>:

static void ILI9341_Reset() {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2104      	movs	r1, #4
 80005bc:	4806      	ldr	r0, [pc, #24]	; (80005d8 <ILI9341_Reset+0x24>)
 80005be:	f002 fae5 	bl	8002b8c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80005c2:	2005      	movs	r0, #5
 80005c4:	f001 fff6 	bl	80025b4 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	2104      	movs	r1, #4
 80005cc:	4802      	ldr	r0, [pc, #8]	; (80005d8 <ILI9341_Reset+0x24>)
 80005ce:	f002 fadd 	bl	8002b8c <HAL_GPIO_WritePin>
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40020c00 	.word	0x40020c00

080005dc <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ec:	4806      	ldr	r0, [pc, #24]	; (8000608 <ILI9341_WriteCommand+0x2c>)
 80005ee:	f002 facd 	bl	8002b8c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80005f2:	1df9      	adds	r1, r7, #7
 80005f4:	f04f 33ff 	mov.w	r3, #4294967295
 80005f8:	2201      	movs	r2, #1
 80005fa:	4804      	ldr	r0, [pc, #16]	; (800060c <ILI9341_WriteCommand+0x30>)
 80005fc:	f005 fd31 	bl	8006062 <HAL_SPI_Transmit>
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40020800 	.word	0x40020800
 800060c:	20000258 	.word	0x20000258

08000610 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800061a:	2201      	movs	r2, #1
 800061c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000620:	4810      	ldr	r0, [pc, #64]	; (8000664 <ILI9341_WriteData+0x54>)
 8000622:	f002 fab3 	bl	8002b8c <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8000626:	e015      	b.n	8000654 <ILI9341_WriteData+0x44>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800062e:	bf28      	it	cs
 8000630:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8000634:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000636:	89fa      	ldrh	r2, [r7, #14]
 8000638:	f04f 33ff 	mov.w	r3, #4294967295
 800063c:	6879      	ldr	r1, [r7, #4]
 800063e:	480a      	ldr	r0, [pc, #40]	; (8000668 <ILI9341_WriteData+0x58>)
 8000640:	f005 fd0f 	bl	8006062 <HAL_SPI_Transmit>
        buff += chunk_size;
 8000644:	89fb      	ldrh	r3, [r7, #14]
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	4413      	add	r3, r2
 800064a:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 800064c:	89fb      	ldrh	r3, [r7, #14]
 800064e:	683a      	ldr	r2, [r7, #0]
 8000650:	1ad3      	subs	r3, r2, r3
 8000652:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d1e6      	bne.n	8000628 <ILI9341_WriteData+0x18>
    }
}
 800065a:	bf00      	nop
 800065c:	bf00      	nop
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40020800 	.word	0x40020800
 8000668:	20000258 	.word	0x20000258

0800066c <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	4604      	mov	r4, r0
 8000674:	4608      	mov	r0, r1
 8000676:	4611      	mov	r1, r2
 8000678:	461a      	mov	r2, r3
 800067a:	4623      	mov	r3, r4
 800067c:	80fb      	strh	r3, [r7, #6]
 800067e:	4603      	mov	r3, r0
 8000680:	80bb      	strh	r3, [r7, #4]
 8000682:	460b      	mov	r3, r1
 8000684:	807b      	strh	r3, [r7, #2]
 8000686:	4613      	mov	r3, r2
 8000688:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 800068a:	202a      	movs	r0, #42	; 0x2a
 800068c:	f7ff ffa6 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8000690:	88fb      	ldrh	r3, [r7, #6]
 8000692:	0a1b      	lsrs	r3, r3, #8
 8000694:	b29b      	uxth	r3, r3
 8000696:	b2db      	uxtb	r3, r3
 8000698:	733b      	strb	r3, [r7, #12]
 800069a:	88fb      	ldrh	r3, [r7, #6]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	737b      	strb	r3, [r7, #13]
 80006a0:	887b      	ldrh	r3, [r7, #2]
 80006a2:	0a1b      	lsrs	r3, r3, #8
 80006a4:	b29b      	uxth	r3, r3
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	73bb      	strb	r3, [r7, #14]
 80006aa:	887b      	ldrh	r3, [r7, #2]
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2104      	movs	r1, #4
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff ffaa 	bl	8000610 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 80006bc:	202b      	movs	r0, #43	; 0x2b
 80006be:	f7ff ff8d 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 80006c2:	88bb      	ldrh	r3, [r7, #4]
 80006c4:	0a1b      	lsrs	r3, r3, #8
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	723b      	strb	r3, [r7, #8]
 80006cc:	88bb      	ldrh	r3, [r7, #4]
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	727b      	strb	r3, [r7, #9]
 80006d2:	883b      	ldrh	r3, [r7, #0]
 80006d4:	0a1b      	lsrs	r3, r3, #8
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	72bb      	strb	r3, [r7, #10]
 80006dc:	883b      	ldrh	r3, [r7, #0]
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 80006e2:	f107 0308 	add.w	r3, r7, #8
 80006e6:	2104      	movs	r1, #4
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ff91 	bl	8000610 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 80006ee:	202c      	movs	r0, #44	; 0x2c
 80006f0:	f7ff ff74 	bl	80005dc <ILI9341_WriteCommand>
}
 80006f4:	bf00      	nop
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd90      	pop	{r4, r7, pc}

080006fc <ILI9341_Init>:

void ILI9341_Init() {
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b09b      	sub	sp, #108	; 0x6c
 8000700:	af00      	add	r7, sp, #0
    ILI9341_Select();
 8000702:	f7ff ff3f 	bl	8000584 <ILI9341_Select>
    ILI9341_Reset();
 8000706:	f7ff ff55 	bl	80005b4 <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 800070a:	2001      	movs	r0, #1
 800070c:	f7ff ff66 	bl	80005dc <ILI9341_WriteCommand>
    HAL_Delay(1000);
 8000710:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000714:	f001 ff4e 	bl	80025b4 <HAL_Delay>

    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 8000718:	20cb      	movs	r0, #203	; 0xcb
 800071a:	f7ff ff5f 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 800071e:	4a87      	ldr	r2, [pc, #540]	; (800093c <ILI9341_Init+0x240>)
 8000720:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000724:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000728:	6018      	str	r0, [r3, #0]
 800072a:	3304      	adds	r3, #4
 800072c:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800072e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000732:	2105      	movs	r1, #5
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff ff6b 	bl	8000610 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 800073a:	20cf      	movs	r0, #207	; 0xcf
 800073c:	f7ff ff4e 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 8000740:	4a7f      	ldr	r2, [pc, #508]	; (8000940 <ILI9341_Init+0x244>)
 8000742:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000746:	6812      	ldr	r2, [r2, #0]
 8000748:	4611      	mov	r1, r2
 800074a:	8019      	strh	r1, [r3, #0]
 800074c:	3302      	adds	r3, #2
 800074e:	0c12      	lsrs	r2, r2, #16
 8000750:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000752:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000756:	2103      	movs	r1, #3
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ff59 	bl	8000610 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 800075e:	20e8      	movs	r0, #232	; 0xe8
 8000760:	f7ff ff3c 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 8000764:	4a77      	ldr	r2, [pc, #476]	; (8000944 <ILI9341_Init+0x248>)
 8000766:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800076a:	6812      	ldr	r2, [r2, #0]
 800076c:	4611      	mov	r1, r2
 800076e:	8019      	strh	r1, [r3, #0]
 8000770:	3302      	adds	r3, #2
 8000772:	0c12      	lsrs	r2, r2, #16
 8000774:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000776:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800077a:	2103      	movs	r1, #3
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff ff47 	bl	8000610 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 8000782:	20ea      	movs	r0, #234	; 0xea
 8000784:	f7ff ff2a 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 8000788:	2300      	movs	r3, #0
 800078a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        ILI9341_WriteData(data, sizeof(data));
 800078e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000792:	2102      	movs	r1, #2
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ff3b 	bl	8000610 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 800079a:	20ed      	movs	r0, #237	; 0xed
 800079c:	f7ff ff1e 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 80007a0:	4b69      	ldr	r3, [pc, #420]	; (8000948 <ILI9341_Init+0x24c>)
 80007a2:	653b      	str	r3, [r7, #80]	; 0x50
        ILI9341_WriteData(data, sizeof(data));
 80007a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80007a8:	2104      	movs	r1, #4
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ff30 	bl	8000610 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 80007b0:	20f7      	movs	r0, #247	; 0xf7
 80007b2:	f7ff ff13 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 80007b6:	2320      	movs	r3, #32
 80007b8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        ILI9341_WriteData(data, sizeof(data));
 80007bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007c0:	2101      	movs	r1, #1
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff ff24 	bl	8000610 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 80007c8:	20c0      	movs	r0, #192	; 0xc0
 80007ca:	f7ff ff07 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 80007ce:	2323      	movs	r3, #35	; 0x23
 80007d0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        ILI9341_WriteData(data, sizeof(data));
 80007d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007d8:	2101      	movs	r1, #1
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff ff18 	bl	8000610 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 80007e0:	20c1      	movs	r0, #193	; 0xc1
 80007e2:	f7ff fefb 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 80007e6:	2310      	movs	r3, #16
 80007e8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        ILI9341_WriteData(data, sizeof(data));
 80007ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007f0:	2101      	movs	r1, #1
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ff0c 	bl	8000610 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 80007f8:	20c5      	movs	r0, #197	; 0xc5
 80007fa:	f7ff feef 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 80007fe:	f642 033e 	movw	r3, #10302	; 0x283e
 8000802:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        ILI9341_WriteData(data, sizeof(data));
 8000806:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800080a:	2102      	movs	r1, #2
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff feff 	bl	8000610 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 8000812:	20c7      	movs	r0, #199	; 0xc7
 8000814:	f7ff fee2 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 8000818:	2386      	movs	r3, #134	; 0x86
 800081a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        ILI9341_WriteData(data, sizeof(data));
 800081e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000822:	2101      	movs	r1, #1
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff fef3 	bl	8000610 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 800082a:	2036      	movs	r0, #54	; 0x36
 800082c:	f7ff fed6 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 8000830:	2348      	movs	r3, #72	; 0x48
 8000832:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        ILI9341_WriteData(data, sizeof(data));
 8000836:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800083a:	2101      	movs	r1, #1
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff fee7 	bl	8000610 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 8000842:	203a      	movs	r0, #58	; 0x3a
 8000844:	f7ff feca 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 8000848:	2355      	movs	r3, #85	; 0x55
 800084a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        ILI9341_WriteData(data, sizeof(data));
 800084e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000852:	2101      	movs	r1, #1
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff fedb 	bl	8000610 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 800085a:	20b1      	movs	r0, #177	; 0xb1
 800085c:	f7ff febe 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 8000860:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000864:	863b      	strh	r3, [r7, #48]	; 0x30
        ILI9341_WriteData(data, sizeof(data));
 8000866:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800086a:	2102      	movs	r1, #2
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fecf 	bl	8000610 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 8000872:	20b6      	movs	r0, #182	; 0xb6
 8000874:	f7ff feb2 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 8000878:	4a34      	ldr	r2, [pc, #208]	; (800094c <ILI9341_Init+0x250>)
 800087a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800087e:	6812      	ldr	r2, [r2, #0]
 8000880:	4611      	mov	r1, r2
 8000882:	8019      	strh	r1, [r3, #0]
 8000884:	3302      	adds	r3, #2
 8000886:	0c12      	lsrs	r2, r2, #16
 8000888:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800088a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800088e:	2103      	movs	r1, #3
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff febd 	bl	8000610 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 8000896:	20f2      	movs	r0, #242	; 0xf2
 8000898:	f7ff fea0 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 800089c:	2300      	movs	r3, #0
 800089e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        ILI9341_WriteData(data, sizeof(data));
 80008a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008a6:	2101      	movs	r1, #1
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff feb1 	bl	8000610 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 80008ae:	2026      	movs	r0, #38	; 0x26
 80008b0:	f7ff fe94 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 80008b4:	2301      	movs	r3, #1
 80008b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        ILI9341_WriteData(data, sizeof(data));
 80008ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008be:	2101      	movs	r1, #1
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff fea5 	bl	8000610 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 80008c6:	20e0      	movs	r0, #224	; 0xe0
 80008c8:	f7ff fe88 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 80008cc:	4b20      	ldr	r3, [pc, #128]	; (8000950 <ILI9341_Init+0x254>)
 80008ce:	f107 0414 	add.w	r4, r7, #20
 80008d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008d4:	c407      	stmia	r4!, {r0, r1, r2}
 80008d6:	8023      	strh	r3, [r4, #0]
 80008d8:	3402      	adds	r4, #2
 80008da:	0c1b      	lsrs	r3, r3, #16
 80008dc:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	210f      	movs	r1, #15
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fe93 	bl	8000610 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 80008ea:	20e1      	movs	r0, #225	; 0xe1
 80008ec:	f7ff fe76 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 80008f0:	4b18      	ldr	r3, [pc, #96]	; (8000954 <ILI9341_Init+0x258>)
 80008f2:	1d3c      	adds	r4, r7, #4
 80008f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008f6:	c407      	stmia	r4!, {r0, r1, r2}
 80008f8:	8023      	strh	r3, [r4, #0]
 80008fa:	3402      	adds	r4, #2
 80008fc:	0c1b      	lsrs	r3, r3, #16
 80008fe:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	210f      	movs	r1, #15
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff fe83 	bl	8000610 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 800090a:	2011      	movs	r0, #17
 800090c:	f7ff fe66 	bl	80005dc <ILI9341_WriteCommand>
    HAL_Delay(120);
 8000910:	2078      	movs	r0, #120	; 0x78
 8000912:	f001 fe4f 	bl	80025b4 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 8000916:	2029      	movs	r0, #41	; 0x29
 8000918:	f7ff fe60 	bl	80005dc <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 800091c:	2036      	movs	r0, #54	; 0x36
 800091e:	f7ff fe5d 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 8000922:	2328      	movs	r3, #40	; 0x28
 8000924:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000926:	463b      	mov	r3, r7
 8000928:	2101      	movs	r1, #1
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff fe70 	bl	8000610 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 8000930:	f7ff fe34 	bl	800059c <ILI9341_Unselect>
}
 8000934:	bf00      	nop
 8000936:	376c      	adds	r7, #108	; 0x6c
 8000938:	46bd      	mov	sp, r7
 800093a:	bd90      	pop	{r4, r7, pc}
 800093c:	0800f938 	.word	0x0800f938
 8000940:	0800f940 	.word	0x0800f940
 8000944:	0800f944 	.word	0x0800f944
 8000948:	81120364 	.word	0x81120364
 800094c:	0800f948 	.word	0x0800f948
 8000950:	0800f94c 	.word	0x0800f94c
 8000954:	0800f95c 	.word	0x0800f95c

08000958 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	80fb      	strh	r3, [r7, #6]
 8000962:	460b      	mov	r3, r1
 8000964:	80bb      	strh	r3, [r7, #4]
 8000966:	4613      	mov	r3, r2
 8000968:	807b      	strh	r3, [r7, #2]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
 800096a:	88fb      	ldrh	r3, [r7, #6]
 800096c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000970:	d21f      	bcs.n	80009b2 <ILI9341_DrawPixel+0x5a>
 8000972:	88bb      	ldrh	r3, [r7, #4]
 8000974:	2bef      	cmp	r3, #239	; 0xef
 8000976:	d81c      	bhi.n	80009b2 <ILI9341_DrawPixel+0x5a>
        return;

    ILI9341_Select();
 8000978:	f7ff fe04 	bl	8000584 <ILI9341_Select>

    ILI9341_SetAddressWindow(x, y, x+1, y+1);
 800097c:	88fb      	ldrh	r3, [r7, #6]
 800097e:	3301      	adds	r3, #1
 8000980:	b29a      	uxth	r2, r3
 8000982:	88bb      	ldrh	r3, [r7, #4]
 8000984:	3301      	adds	r3, #1
 8000986:	b29b      	uxth	r3, r3
 8000988:	88b9      	ldrh	r1, [r7, #4]
 800098a:	88f8      	ldrh	r0, [r7, #6]
 800098c:	f7ff fe6e 	bl	800066c <ILI9341_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8000990:	887b      	ldrh	r3, [r7, #2]
 8000992:	0a1b      	lsrs	r3, r3, #8
 8000994:	b29b      	uxth	r3, r3
 8000996:	b2db      	uxtb	r3, r3
 8000998:	733b      	strb	r3, [r7, #12]
 800099a:	887b      	ldrh	r3, [r7, #2]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	737b      	strb	r3, [r7, #13]
    ILI9341_WriteData(data, sizeof(data));
 80009a0:	f107 030c 	add.w	r3, r7, #12
 80009a4:	2102      	movs	r1, #2
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fe32 	bl	8000610 <ILI9341_WriteData>

    ILI9341_Unselect();
 80009ac:	f7ff fdf6 	bl	800059c <ILI9341_Unselect>
 80009b0:	e000      	b.n	80009b4 <ILI9341_DrawPixel+0x5c>
        return;
 80009b2:	bf00      	nop
}
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <ILI9341_WriteChar>:

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80009ba:	b082      	sub	sp, #8
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b089      	sub	sp, #36	; 0x24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	637b      	str	r3, [r7, #52]	; 0x34
 80009c4:	4603      	mov	r3, r0
 80009c6:	80fb      	strh	r3, [r7, #6]
 80009c8:	460b      	mov	r3, r1
 80009ca:	80bb      	strh	r3, [r7, #4]
 80009cc:	4613      	mov	r3, r2
 80009ce:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80009d0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	88fb      	ldrh	r3, [r7, #6]
 80009d8:	4413      	add	r3, r2
 80009da:	b29b      	uxth	r3, r3
 80009dc:	3b01      	subs	r3, #1
 80009de:	b29c      	uxth	r4, r3
 80009e0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80009e4:	b29a      	uxth	r2, r3
 80009e6:	88bb      	ldrh	r3, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	3b01      	subs	r3, #1
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	88b9      	ldrh	r1, [r7, #4]
 80009f2:	88f8      	ldrh	r0, [r7, #6]
 80009f4:	4622      	mov	r2, r4
 80009f6:	f7ff fe39 	bl	800066c <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
 80009fe:	e043      	b.n	8000a88 <ILI9341_WriteChar+0xce>
        b = font.data[(ch - 32) * font.height + i];
 8000a00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a02:	78fb      	ldrb	r3, [r7, #3]
 8000a04:	3b20      	subs	r3, #32
 8000a06:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000a0a:	fb01 f303 	mul.w	r3, r1, r3
 8000a0e:	4619      	mov	r1, r3
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	440b      	add	r3, r1
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	4413      	add	r3, r2
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61bb      	str	r3, [r7, #24]
 8000a20:	e029      	b.n	8000a76 <ILI9341_WriteChar+0xbc>
            if((b << j) & 0x8000)  {
 8000a22:	697a      	ldr	r2, [r7, #20]
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d00e      	beq.n	8000a50 <ILI9341_WriteChar+0x96>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000a32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000a34:	0a1b      	lsrs	r3, r3, #8
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	743b      	strb	r3, [r7, #16]
 8000a3c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 8000a42:	f107 0310 	add.w	r3, r7, #16
 8000a46:	2102      	movs	r1, #2
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fde1 	bl	8000610 <ILI9341_WriteData>
 8000a4e:	e00f      	b.n	8000a70 <ILI9341_WriteChar+0xb6>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000a50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000a54:	0a1b      	lsrs	r3, r3, #8
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	733b      	strb	r3, [r7, #12]
 8000a5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	2102      	movs	r1, #2
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fdd0 	bl	8000610 <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	3301      	adds	r3, #1
 8000a74:	61bb      	str	r3, [r7, #24]
 8000a76:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d3cf      	bcc.n	8000a22 <ILI9341_WriteChar+0x68>
    for(i = 0; i < font.height; i++) {
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	3301      	adds	r3, #1
 8000a86:	61fb      	str	r3, [r7, #28]
 8000a88:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d3b5      	bcc.n	8000a00 <ILI9341_WriteChar+0x46>
            }
        }
    }
}
 8000a94:	bf00      	nop
 8000a96:	bf00      	nop
 8000a98:	3724      	adds	r7, #36	; 0x24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000aa0:	b002      	add	sp, #8
 8000aa2:	4770      	bx	lr

08000aa4 <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b086      	sub	sp, #24
 8000aaa:	af04      	add	r7, sp, #16
 8000aac:	603a      	str	r2, [r7, #0]
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	80fb      	strh	r3, [r7, #6]
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 8000ab8:	f7ff fd64 	bl	8000584 <ILI9341_Select>

    while(*str) {
 8000abc:	e02e      	b.n	8000b1c <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 8000abe:	88fb      	ldrh	r3, [r7, #6]
 8000ac0:	7d3a      	ldrb	r2, [r7, #20]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000ac8:	db13      	blt.n	8000af2 <ILI9341_WriteString+0x4e>
            x = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000ace:	7d7b      	ldrb	r3, [r7, #21]
 8000ad0:	b29a      	uxth	r2, r3
 8000ad2:	88bb      	ldrh	r3, [r7, #4]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 8000ad8:	88bb      	ldrh	r3, [r7, #4]
 8000ada:	7d7a      	ldrb	r2, [r7, #21]
 8000adc:	4413      	add	r3, r2
 8000ade:	2bef      	cmp	r3, #239	; 0xef
 8000ae0:	dc21      	bgt.n	8000b26 <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b20      	cmp	r3, #32
 8000ae8:	d103      	bne.n	8000af2 <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	3301      	adds	r3, #1
 8000aee:	603b      	str	r3, [r7, #0]
                continue;
 8000af0:	e014      	b.n	8000b1c <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	781a      	ldrb	r2, [r3, #0]
 8000af6:	88b9      	ldrh	r1, [r7, #4]
 8000af8:	88f8      	ldrh	r0, [r7, #6]
 8000afa:	8c3b      	ldrh	r3, [r7, #32]
 8000afc:	9302      	str	r3, [sp, #8]
 8000afe:	8bbb      	ldrh	r3, [r7, #28]
 8000b00:	9301      	str	r3, [sp, #4]
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	f7ff ff57 	bl	80009ba <ILI9341_WriteChar>
        x += font.width;
 8000b0c:	7d3b      	ldrb	r3, [r7, #20]
 8000b0e:	b29a      	uxth	r2, r3
 8000b10:	88fb      	ldrh	r3, [r7, #6]
 8000b12:	4413      	add	r3, r2
 8000b14:	80fb      	strh	r3, [r7, #6]
        str++;
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d1cc      	bne.n	8000abe <ILI9341_WriteString+0x1a>
 8000b24:	e000      	b.n	8000b28 <ILI9341_WriteString+0x84>
                break;
 8000b26:	bf00      	nop
    }

    ILI9341_Unselect();
 8000b28:	f7ff fd38 	bl	800059c <ILI9341_Unselect>
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b36:	b002      	add	sp, #8
 8000b38:	4770      	bx	lr
	...

08000b3c <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000b3c:	b590      	push	{r4, r7, lr}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4604      	mov	r4, r0
 8000b44:	4608      	mov	r0, r1
 8000b46:	4611      	mov	r1, r2
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4623      	mov	r3, r4
 8000b4c:	80fb      	strh	r3, [r7, #6]
 8000b4e:	4603      	mov	r3, r0
 8000b50:	80bb      	strh	r3, [r7, #4]
 8000b52:	460b      	mov	r3, r1
 8000b54:	807b      	strh	r3, [r7, #2]
 8000b56:	4613      	mov	r3, r2
 8000b58:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000b5a:	88fb      	ldrh	r3, [r7, #6]
 8000b5c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000b60:	d253      	bcs.n	8000c0a <ILI9341_FillRectangle+0xce>
 8000b62:	88bb      	ldrh	r3, [r7, #4]
 8000b64:	2bef      	cmp	r3, #239	; 0xef
 8000b66:	d850      	bhi.n	8000c0a <ILI9341_FillRectangle+0xce>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8000b68:	88fa      	ldrh	r2, [r7, #6]
 8000b6a:	887b      	ldrh	r3, [r7, #2]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000b72:	dd03      	ble.n	8000b7c <ILI9341_FillRectangle+0x40>
 8000b74:	88fb      	ldrh	r3, [r7, #6]
 8000b76:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8000b7a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8000b7c:	88ba      	ldrh	r2, [r7, #4]
 8000b7e:	883b      	ldrh	r3, [r7, #0]
 8000b80:	4413      	add	r3, r2
 8000b82:	2bf0      	cmp	r3, #240	; 0xf0
 8000b84:	dd03      	ble.n	8000b8e <ILI9341_FillRectangle+0x52>
 8000b86:	88bb      	ldrh	r3, [r7, #4]
 8000b88:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000b8c:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 8000b8e:	f7ff fcf9 	bl	8000584 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000b92:	88fa      	ldrh	r2, [r7, #6]
 8000b94:	887b      	ldrh	r3, [r7, #2]
 8000b96:	4413      	add	r3, r2
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	b29c      	uxth	r4, r3
 8000b9e:	88ba      	ldrh	r2, [r7, #4]
 8000ba0:	883b      	ldrh	r3, [r7, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	88b9      	ldrh	r1, [r7, #4]
 8000bac:	88f8      	ldrh	r0, [r7, #6]
 8000bae:	4622      	mov	r2, r4
 8000bb0:	f7ff fd5c 	bl	800066c <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000bb4:	8c3b      	ldrh	r3, [r7, #32]
 8000bb6:	0a1b      	lsrs	r3, r3, #8
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	733b      	strb	r3, [r7, #12]
 8000bbe:	8c3b      	ldrh	r3, [r7, #32]
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bca:	4812      	ldr	r0, [pc, #72]	; (8000c14 <ILI9341_FillRectangle+0xd8>)
 8000bcc:	f001 ffde 	bl	8002b8c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000bd0:	883b      	ldrh	r3, [r7, #0]
 8000bd2:	80bb      	strh	r3, [r7, #4]
 8000bd4:	e013      	b.n	8000bfe <ILI9341_FillRectangle+0xc2>
        for(x = w; x > 0; x--) {
 8000bd6:	887b      	ldrh	r3, [r7, #2]
 8000bd8:	80fb      	strh	r3, [r7, #6]
 8000bda:	e00a      	b.n	8000bf2 <ILI9341_FillRectangle+0xb6>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000bdc:	f107 010c 	add.w	r1, r7, #12
 8000be0:	f04f 33ff 	mov.w	r3, #4294967295
 8000be4:	2202      	movs	r2, #2
 8000be6:	480c      	ldr	r0, [pc, #48]	; (8000c18 <ILI9341_FillRectangle+0xdc>)
 8000be8:	f005 fa3b 	bl	8006062 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000bec:	88fb      	ldrh	r3, [r7, #6]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	80fb      	strh	r3, [r7, #6]
 8000bf2:	88fb      	ldrh	r3, [r7, #6]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d1f1      	bne.n	8000bdc <ILI9341_FillRectangle+0xa0>
    for(y = h; y > 0; y--) {
 8000bf8:	88bb      	ldrh	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	80bb      	strh	r3, [r7, #4]
 8000bfe:	88bb      	ldrh	r3, [r7, #4]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d1e8      	bne.n	8000bd6 <ILI9341_FillRectangle+0x9a>
        }
    }

    ILI9341_Unselect();
 8000c04:	f7ff fcca 	bl	800059c <ILI9341_Unselect>
 8000c08:	e000      	b.n	8000c0c <ILI9341_FillRectangle+0xd0>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000c0a:	bf00      	nop
}
 8000c0c:	3714      	adds	r7, #20
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd90      	pop	{r4, r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40020800 	.word	0x40020800
 8000c18:	20000258 	.word	0x20000258

08000c1c <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af02      	add	r7, sp, #8
 8000c22:	4603      	mov	r3, r0
 8000c24:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 8000c26:	88fb      	ldrh	r3, [r7, #6]
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	23f0      	movs	r3, #240	; 0xf0
 8000c2c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000c30:	2100      	movs	r1, #0
 8000c32:	2000      	movs	r0, #0
 8000c34:	f7ff ff82 	bl	8000b3c <ILI9341_FillRectangle>
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000c48:	1d39      	adds	r1, r7, #4
 8000c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4e:	2201      	movs	r2, #1
 8000c50:	4803      	ldr	r0, [pc, #12]	; (8000c60 <__io_putchar+0x20>)
 8000c52:	f006 fa42 	bl	80070da <HAL_UART_Transmit>
  return ch;
 8000c56:	687b      	ldr	r3, [r7, #4]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000340 	.word	0x20000340

08000c64 <displayImage>:

// Image display
int displayImage(const char*fname, uint32_t startx, uint32_t starty) {
 8000c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c68:	b0a0      	sub	sp, #128	; 0x80
 8000c6a:	af04      	add	r7, sp, #16
 8000c6c:	60f8      	str	r0, [r7, #12]
 8000c6e:	60b9      	str	r1, [r7, #8]
 8000c70:	607a      	str	r2, [r7, #4]
 8000c72:	466b      	mov	r3, sp
 8000c74:	469a      	mov	sl, r3
	    FRESULT res = f_open(&fil, fname, FA_READ);
 8000c76:	2201      	movs	r2, #1
 8000c78:	68f9      	ldr	r1, [r7, #12]
 8000c7a:	488f      	ldr	r0, [pc, #572]	; (8000eb8 <displayImage+0x254>)
 8000c7c:	f00c f9f2 	bl	800d064 <f_open>
 8000c80:	4603      	mov	r3, r0
 8000c82:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	    if(res != FR_OK) {
 8000c86:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d009      	beq.n	8000ca2 <displayImage+0x3e>
	    	printf("f_open() failed, res = %d, %s\r\n", res, fname);
 8000c8e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000c92:	68fa      	ldr	r2, [r7, #12]
 8000c94:	4619      	mov	r1, r3
 8000c96:	4889      	ldr	r0, [pc, #548]	; (8000ebc <displayImage+0x258>)
 8000c98:	f00d fc4e 	bl	800e538 <iprintf>
	        return -1;
 8000c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca0:	e188      	b.n	8000fb4 <displayImage+0x350>
	    }

	    printf("File opened, reading...\r\n");
 8000ca2:	4887      	ldr	r0, [pc, #540]	; (8000ec0 <displayImage+0x25c>)
 8000ca4:	f00d fcce 	bl	800e644 <puts>

	    unsigned int bytesRead;
	    uint8_t header[34];
	    res = f_read(&fil, header, sizeof(header), &bytesRead);
 8000ca8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cac:	f107 0114 	add.w	r1, r7, #20
 8000cb0:	2222      	movs	r2, #34	; 0x22
 8000cb2:	4881      	ldr	r0, [pc, #516]	; (8000eb8 <displayImage+0x254>)
 8000cb4:	f00c fb94 	bl	800d3e0 <f_read>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	    if(res != FR_OK) {
 8000cbe:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d00b      	beq.n	8000cde <displayImage+0x7a>
	    	printf("f_read() failed: %i\r\n", res);
 8000cc6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000cca:	4619      	mov	r1, r3
 8000ccc:	487d      	ldr	r0, [pc, #500]	; (8000ec4 <displayImage+0x260>)
 8000cce:	f00d fc33 	bl	800e538 <iprintf>
	        f_close(&fil);
 8000cd2:	4879      	ldr	r0, [pc, #484]	; (8000eb8 <displayImage+0x254>)
 8000cd4:	f00c fd41 	bl	800d75a <f_close>
	        return -2;
 8000cd8:	f06f 0301 	mvn.w	r3, #1
 8000cdc:	e16a      	b.n	8000fb4 <displayImage+0x350>
	    }

	    if((header[0] != 0x42) || (header[1] != 0x4D)) {
 8000cde:	7d3b      	ldrb	r3, [r7, #20]
 8000ce0:	2b42      	cmp	r3, #66	; 0x42
 8000ce2:	d102      	bne.n	8000cea <displayImage+0x86>
 8000ce4:	7d7b      	ldrb	r3, [r7, #21]
 8000ce6:	2b4d      	cmp	r3, #77	; 0x4d
 8000ce8:	d008      	beq.n	8000cfc <displayImage+0x98>
	    	printf("Wrong BMP signature\r\n");
 8000cea:	4877      	ldr	r0, [pc, #476]	; (8000ec8 <displayImage+0x264>)
 8000cec:	f00d fcaa 	bl	800e644 <puts>
	        f_close(&fil);
 8000cf0:	4871      	ldr	r0, [pc, #452]	; (8000eb8 <displayImage+0x254>)
 8000cf2:	f00c fd32 	bl	800d75a <f_close>
	        return -3;
 8000cf6:	f06f 0302 	mvn.w	r3, #2
 8000cfa:	e15b      	b.n	8000fb4 <displayImage+0x350>
	    }

	    uint32_t imageOffset = header[10] | (header[11] << 8) | (header[12] << 16) | (header[13] << 24);
 8000cfc:	7fbb      	ldrb	r3, [r7, #30]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	7ffb      	ldrb	r3, [r7, #31]
 8000d02:	021b      	lsls	r3, r3, #8
 8000d04:	431a      	orrs	r2, r3
 8000d06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d0a:	041b      	lsls	r3, r3, #16
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000d12:	061b      	lsls	r3, r3, #24
 8000d14:	4313      	orrs	r3, r2
 8000d16:	65fb      	str	r3, [r7, #92]	; 0x5c
	    uint32_t imageWidth = header[18] | (header[19] << 8) | (header[20] << 16) | (header[21] << 24);
 8000d18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d22:	021b      	lsls	r3, r3, #8
 8000d24:	431a      	orrs	r2, r3
 8000d26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d2a:	041b      	lsls	r3, r3, #16
 8000d2c:	431a      	orrs	r2, r3
 8000d2e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000d32:	061b      	lsls	r3, r3, #24
 8000d34:	4313      	orrs	r3, r2
 8000d36:	65bb      	str	r3, [r7, #88]	; 0x58
	    uint32_t imageHeight = header[22] | (header[23] << 8) | (header[24] << 16) | (header[25] << 24);
 8000d38:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000d42:	021b      	lsls	r3, r3, #8
 8000d44:	431a      	orrs	r2, r3
 8000d46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d4a:	041b      	lsls	r3, r3, #16
 8000d4c:	431a      	orrs	r2, r3
 8000d4e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000d52:	061b      	lsls	r3, r3, #24
 8000d54:	4313      	orrs	r3, r2
 8000d56:	657b      	str	r3, [r7, #84]	; 0x54
	    uint16_t imagePlanes = header[26] | (header[27] << 8);
 8000d58:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000d5c:	b21a      	sxth	r2, r3
 8000d5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d62:	021b      	lsls	r3, r3, #8
 8000d64:	b21b      	sxth	r3, r3
 8000d66:	4313      	orrs	r3, r2
 8000d68:	b21b      	sxth	r3, r3
 8000d6a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	    uint16_t imageBitsPerPixel = header[28] | (header[29] << 8);
 8000d6e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000d72:	b21a      	sxth	r2, r3
 8000d74:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000d78:	021b      	lsls	r3, r3, #8
 8000d7a:	b21b      	sxth	r3, r3
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	b21b      	sxth	r3, r3
 8000d80:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	    uint32_t imageCompression = header[30] | (header[31] << 8) | (header[32] << 16) | (header[33] << 24);
 8000d84:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000d88:	461a      	mov	r2, r3
 8000d8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d8e:	021b      	lsls	r3, r3, #8
 8000d90:	431a      	orrs	r2, r3
 8000d92:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000d96:	041b      	lsls	r3, r3, #16
 8000d98:	431a      	orrs	r2, r3
 8000d9a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000d9e:	061b      	lsls	r3, r3, #24
 8000da0:	4313      	orrs	r3, r2
 8000da2:	64fb      	str	r3, [r7, #76]	; 0x4c

	    if((imagePlanes != 1) || (imageBitsPerPixel != 24) || (imageCompression != 0)) {
 8000da4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d106      	bne.n	8000dba <displayImage+0x156>
 8000dac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8000db0:	2b18      	cmp	r3, #24
 8000db2:	d102      	bne.n	8000dba <displayImage+0x156>
 8000db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d005      	beq.n	8000dc6 <displayImage+0x162>
	        f_close(&fil);
 8000dba:	483f      	ldr	r0, [pc, #252]	; (8000eb8 <displayImage+0x254>)
 8000dbc:	f00c fccd 	bl	800d75a <f_close>
	        return -5;
 8000dc0:	f06f 0304 	mvn.w	r3, #4
 8000dc4:	e0f6      	b.n	8000fb4 <displayImage+0x350>
	    }

	    res = f_lseek(&fil, imageOffset);
 8000dc6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8000dc8:	483b      	ldr	r0, [pc, #236]	; (8000eb8 <displayImage+0x254>)
 8000dca:	f00c fcf0 	bl	800d7ae <f_lseek>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	    if(res != FR_OK) {
 8000dd4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d021      	beq.n	8000e20 <displayImage+0x1bc>
	    	printf("f_lseek() failed, %i", res);
 8000ddc:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000de0:	4619      	mov	r1, r3
 8000de2:	483a      	ldr	r0, [pc, #232]	; (8000ecc <displayImage+0x268>)
 8000de4:	f00d fba8 	bl	800e538 <iprintf>
	        snprintf(buff, sizeof(buff), "f_lseek() failed, res = %d\r\n ", res);
 8000de8:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000dec:	4a38      	ldr	r2, [pc, #224]	; (8000ed0 <displayImage+0x26c>)
 8000dee:	2140      	movs	r1, #64	; 0x40
 8000df0:	4838      	ldr	r0, [pc, #224]	; (8000ed4 <displayImage+0x270>)
 8000df2:	f00d fc2f 	bl	800e654 <sniprintf>
	    	ILI9341_WriteString(0, 120, buff, Font_7x10, ILI9341_RED, ILI9341_WHITE);
 8000df6:	4b38      	ldr	r3, [pc, #224]	; (8000ed8 <displayImage+0x274>)
 8000df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dfc:	9202      	str	r2, [sp, #8]
 8000dfe:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000e02:	9201      	str	r2, [sp, #4]
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	9200      	str	r2, [sp, #0]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a32      	ldr	r2, [pc, #200]	; (8000ed4 <displayImage+0x270>)
 8000e0c:	2178      	movs	r1, #120	; 0x78
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f7ff fe48 	bl	8000aa4 <ILI9341_WriteString>
	        f_close(&fil);
 8000e14:	4828      	ldr	r0, [pc, #160]	; (8000eb8 <displayImage+0x254>)
 8000e16:	f00c fca0 	bl	800d75a <f_close>
	        return -6;
 8000e1a:	f06f 0305 	mvn.w	r3, #5
 8000e1e:	e0c9      	b.n	8000fb4 <displayImage+0x350>
	    }

	    // row size is aligned to 4 bytes
	    uint8_t imageRow[(imageWidth * 3 + 3) & ~3];
 8000e20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e22:	1c5a      	adds	r2, r3, #1
 8000e24:	4613      	mov	r3, r2
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	4413      	add	r3, r2
 8000e2a:	f023 0603 	bic.w	r6, r3, #3
 8000e2e:	4633      	mov	r3, r6
 8000e30:	3b01      	subs	r3, #1
 8000e32:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e34:	2300      	movs	r3, #0
 8000e36:	46b0      	mov	r8, r6
 8000e38:	4699      	mov	r9, r3
 8000e3a:	f04f 0200 	mov.w	r2, #0
 8000e3e:	f04f 0300 	mov.w	r3, #0
 8000e42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e4e:	2300      	movs	r3, #0
 8000e50:	4634      	mov	r4, r6
 8000e52:	461d      	mov	r5, r3
 8000e54:	f04f 0200 	mov.w	r2, #0
 8000e58:	f04f 0300 	mov.w	r3, #0
 8000e5c:	00eb      	lsls	r3, r5, #3
 8000e5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e62:	00e2      	lsls	r2, r4, #3
 8000e64:	1df3      	adds	r3, r6, #7
 8000e66:	08db      	lsrs	r3, r3, #3
 8000e68:	00db      	lsls	r3, r3, #3
 8000e6a:	ebad 0d03 	sub.w	sp, sp, r3
 8000e6e:	ab04      	add	r3, sp, #16
 8000e70:	3300      	adds	r3, #0
 8000e72:	647b      	str	r3, [r7, #68]	; 0x44
	    for(uint32_t y = starty; y < starty + imageHeight; y++) {
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	667b      	str	r3, [r7, #100]	; 0x64
 8000e78:	e081      	b.n	8000f7e <displayImage+0x31a>
	        uint32_t rowIdx = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	66bb      	str	r3, [r7, #104]	; 0x68
	        res = f_read(&fil, imageRow, sizeof(imageRow), &bytesRead);
 8000e7e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e82:	4632      	mov	r2, r6
 8000e84:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000e86:	480c      	ldr	r0, [pc, #48]	; (8000eb8 <displayImage+0x254>)
 8000e88:	f00c faaa 	bl	800d3e0 <f_read>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	        if(res != FR_OK) {
 8000e92:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d00b      	beq.n	8000eb2 <displayImage+0x24e>
	        	printf("f_read() failed, %i", res);
 8000e9a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	480e      	ldr	r0, [pc, #56]	; (8000edc <displayImage+0x278>)
 8000ea2:	f00d fb49 	bl	800e538 <iprintf>
	            f_close(&fil);
 8000ea6:	4804      	ldr	r0, [pc, #16]	; (8000eb8 <displayImage+0x254>)
 8000ea8:	f00c fc57 	bl	800d75a <f_close>
	            return -7;
 8000eac:	f06f 0306 	mvn.w	r3, #6
 8000eb0:	e080      	b.n	8000fb4 <displayImage+0x350>
	        }

	        for(uint32_t x = startx; x < startx + imageWidth; x++) {
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000eb6:	e059      	b.n	8000f6c <displayImage+0x308>
 8000eb8:	2000063c 	.word	0x2000063c
 8000ebc:	0800f96c 	.word	0x0800f96c
 8000ec0:	0800f98c 	.word	0x0800f98c
 8000ec4:	0800f9a8 	.word	0x0800f9a8
 8000ec8:	0800f9c0 	.word	0x0800f9c0
 8000ecc:	0800f9d8 	.word	0x0800f9d8
 8000ed0:	0800f9f0 	.word	0x0800f9f0
 8000ed4:	200003cc 	.word	0x200003cc
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	0800fa10 	.word	0x0800fa10
	            uint8_t b = imageRow[rowIdx++];
 8000ee0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ee2:	1c5a      	adds	r2, r3, #1
 8000ee4:	66ba      	str	r2, [r7, #104]	; 0x68
 8000ee6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000ee8:	5cd3      	ldrb	r3, [r2, r3]
 8000eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	            uint8_t g = imageRow[rowIdx++];
 8000eee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ef0:	1c5a      	adds	r2, r3, #1
 8000ef2:	66ba      	str	r2, [r7, #104]	; 0x68
 8000ef4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000ef6:	5cd3      	ldrb	r3, [r2, r3]
 8000ef8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	            uint8_t r = imageRow[rowIdx++];
 8000efc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000efe:	1c5a      	adds	r2, r3, #1
 8000f00:	66ba      	str	r2, [r7, #104]	; 0x68
 8000f02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000f04:	5cd3      	ldrb	r3, [r2, r3]
 8000f06:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	            uint16_t color565 = ILI9341_COLOR565(r, g, b);
 8000f0a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8000f0e:	021b      	lsls	r3, r3, #8
 8000f10:	b21b      	sxth	r3, r3
 8000f12:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000f16:	f023 0307 	bic.w	r3, r3, #7
 8000f1a:	b21a      	sxth	r2, r3
 8000f1c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	b21b      	sxth	r3, r3
 8000f24:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000f28:	b21b      	sxth	r3, r3
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	b21a      	sxth	r2, r3
 8000f2e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000f32:	08db      	lsrs	r3, r3, #3
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	b21b      	sxth	r3, r3
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	87fb      	strh	r3, [r7, #62]	; 0x3e
	            ILI9341_DrawPixel(x, (2*starty) + imageHeight - y - 1, color565);
 8000f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f40:	b298      	uxth	r0, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	4413      	add	r3, r2
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8000f60:	4619      	mov	r1, r3
 8000f62:	f7ff fcf9 	bl	8000958 <ILI9341_DrawPixel>
	        for(uint32_t x = startx; x < startx + imageWidth; x++) {
 8000f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f68:	3301      	adds	r3, #1
 8000f6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f6c:	68ba      	ldr	r2, [r7, #8]
 8000f6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f70:	4413      	add	r3, r2
 8000f72:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d3b3      	bcc.n	8000ee0 <displayImage+0x27c>
	    for(uint32_t y = starty; y < starty + imageHeight; y++) {
 8000f78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	667b      	str	r3, [r7, #100]	; 0x64
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f82:	4413      	add	r3, r2
 8000f84:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000f86:	429a      	cmp	r2, r3
 8000f88:	f4ff af77 	bcc.w	8000e7a <displayImage+0x216>
	        }
	    }

	    res = f_close(&fil);
 8000f8c:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <displayImage+0x35c>)
 8000f8e:	f00c fbe4 	bl	800d75a <f_close>
 8000f92:	4603      	mov	r3, r0
 8000f94:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	    if(res != FR_OK) {
 8000f98:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d008      	beq.n	8000fb2 <displayImage+0x34e>
	    	printf("f_close() failed %i", res);
 8000fa0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4807      	ldr	r0, [pc, #28]	; (8000fc4 <displayImage+0x360>)
 8000fa8:	f00d fac6 	bl	800e538 <iprintf>
	        return -8;
 8000fac:	f06f 0307 	mvn.w	r3, #7
 8000fb0:	e000      	b.n	8000fb4 <displayImage+0x350>
	    }

	    return 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	46d5      	mov	sp, sl
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3770      	adds	r7, #112	; 0x70
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc0:	2000063c 	.word	0x2000063c
 8000fc4:	0800fa24 	.word	0x0800fa24

08000fc8 <BQ27441_i2cWriteBytes>:

// Battery monitor related
HAL_StatusTypeDef BQ27441_i2cWriteBytes(uint16_t memAddress, uint8_t *pData, uint16_t Size) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af04      	add	r7, sp, #16
 8000fce:	4603      	mov	r3, r0
 8000fd0:	6039      	str	r1, [r7, #0]
 8000fd2:	80fb      	strh	r3, [r7, #6]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Mem_Write(&hi2c3, BQ27441_I2C_ADDRESS << 1, memAddress, I2C_MEMADD_SIZE_8BIT, pData, Size, HAL_MAX_DELAY);
 8000fd8:	88fa      	ldrh	r2, [r7, #6]
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	9302      	str	r3, [sp, #8]
 8000fe0:	88bb      	ldrh	r3, [r7, #4]
 8000fe2:	9301      	str	r3, [sp, #4]
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2301      	movs	r3, #1
 8000fea:	21aa      	movs	r1, #170	; 0xaa
 8000fec:	4803      	ldr	r0, [pc, #12]	; (8000ffc <BQ27441_i2cWriteBytes+0x34>)
 8000fee:	f002 f969 	bl	80032c4 <HAL_I2C_Mem_Write>
 8000ff2:	4603      	mov	r3, r0
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	200001ac 	.word	0x200001ac

08001000 <BQ27441_i2cReadBytes>:

HAL_StatusTypeDef BQ27441_i2cReadBytes(uint16_t memAddress, uint8_t *pData, uint16_t Size) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af04      	add	r7, sp, #16
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	80fb      	strh	r3, [r7, #6]
 800100c:	4613      	mov	r3, r2
 800100e:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Mem_Read(&hi2c3, BQ27441_I2C_ADDRESS << 1, memAddress, I2C_MEMADD_SIZE_8BIT, pData, Size, HAL_MAX_DELAY);
 8001010:	88fa      	ldrh	r2, [r7, #6]
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
 8001016:	9302      	str	r3, [sp, #8]
 8001018:	88bb      	ldrh	r3, [r7, #4]
 800101a:	9301      	str	r3, [sp, #4]
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2301      	movs	r3, #1
 8001022:	21aa      	movs	r1, #170	; 0xaa
 8001024:	4803      	ldr	r0, [pc, #12]	; (8001034 <BQ27441_i2cReadBytes+0x34>)
 8001026:	f002 fa47 	bl	80034b8 <HAL_I2C_Mem_Read>
 800102a:	4603      	mov	r3, r0
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200001ac 	.word	0x200001ac

08001038 <BQ27441_readWord>:

uint16_t BQ27441_readWord(uint16_t subAddress) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    BQ27441_i2cReadBytes(subAddress, data, 2);
 8001042:	f107 010c 	add.w	r1, r7, #12
 8001046:	88fb      	ldrh	r3, [r7, #6]
 8001048:	2202      	movs	r2, #2
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff ffd8 	bl	8001000 <BQ27441_i2cReadBytes>
    return ((uint16_t) data[1] << 8) | data[0];
 8001050:	7b7b      	ldrb	r3, [r7, #13]
 8001052:	021b      	lsls	r3, r3, #8
 8001054:	b21a      	sxth	r2, r3
 8001056:	7b3b      	ldrb	r3, [r7, #12]
 8001058:	b21b      	sxth	r3, r3
 800105a:	4313      	orrs	r3, r2
 800105c:	b21b      	sxth	r3, r3
 800105e:	b29b      	uxth	r3, r3
}
 8001060:	4618      	mov	r0, r3
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <BQ27441_soc>:

uint16_t BQ27441_soc(soc_measure type) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
    //type = FILTERED;
    uint16_t socRet = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	81fb      	strh	r3, [r7, #14]
    switch (type) {
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d002      	beq.n	8001082 <BQ27441_soc+0x1a>
 800107c:	2b01      	cmp	r3, #1
 800107e:	d006      	beq.n	800108e <BQ27441_soc+0x26>
 8001080:	e00b      	b.n	800109a <BQ27441_soc+0x32>
        case FILTERED:
            socRet = BQ27441_readWord(BQ27441_COMMAND_SOC);
 8001082:	201c      	movs	r0, #28
 8001084:	f7ff ffd8 	bl	8001038 <BQ27441_readWord>
 8001088:	4603      	mov	r3, r0
 800108a:	81fb      	strh	r3, [r7, #14]
            break;
 800108c:	e005      	b.n	800109a <BQ27441_soc+0x32>
        case UNFILTERED:
            socRet = BQ27441_readWord(BQ27441_COMMAND_SOC_UNFL);
 800108e:	2030      	movs	r0, #48	; 0x30
 8001090:	f7ff ffd2 	bl	8001038 <BQ27441_readWord>
 8001094:	4603      	mov	r3, r0
 8001096:	81fb      	strh	r3, [r7, #14]
            break;
 8001098:	bf00      	nop
    }
    return socRet;
 800109a:	89fb      	ldrh	r3, [r7, #14]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <BQ27441_power>:

uint16_t BQ27441_voltage(void) {
    return BQ27441_readWord(BQ27441_COMMAND_VOLTAGE);
}

int16_t BQ27441_power(void) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
    return (int16_t) BQ27441_readWord(BQ27441_COMMAND_AVG_POWER);
 80010a8:	2018      	movs	r0, #24
 80010aa:	f7ff ffc5 	bl	8001038 <BQ27441_readWord>
 80010ae:	4603      	mov	r3, r0
 80010b0:	b21b      	sxth	r3, r3
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <BQ27441_deviceType>:

uint16_t BQ27441_deviceType(void) {
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
	// command sent to slave to tell it master wants to know devicetype
	// 0xFF to get right 8 bits of BQ27441_CONTROL_DEVICE_TYPE
	// >>8 to get left 8 bits, discarding right 8 bits of BQ27441_CONTROL_DEVICE_TYPE
    uint8_t command[2] = {BQ27441_CONTROL_DEVICE_TYPE & 0xFF, BQ27441_CONTROL_DEVICE_TYPE >> 8};
 80010bc:	2301      	movs	r3, #1
 80010be:	80bb      	strh	r3, [r7, #4]
    uint8_t data[2];
    uint16_t deviceType = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	80fb      	strh	r3, [r7, #6]

    BQ27441_i2cWriteBytes(BQ27441_COMMAND_CONTROL, command, sizeof(command)); //write command to slave
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	2202      	movs	r2, #2
 80010c8:	4619      	mov	r1, r3
 80010ca:	2000      	movs	r0, #0
 80010cc:	f7ff ff7c 	bl	8000fc8 <BQ27441_i2cWriteBytes>

    HAL_Delay(10); //delay to ensure device is ready
 80010d0:	200a      	movs	r0, #10
 80010d2:	f001 fa6f 	bl	80025b4 <HAL_Delay>

    if (BQ27441_i2cReadBytes(BQ27441_COMMAND_CONTROL, data, sizeof(data)) == HAL_OK) { //read device type from control register
 80010d6:	463b      	mov	r3, r7
 80010d8:	2202      	movs	r2, #2
 80010da:	4619      	mov	r1, r3
 80010dc:	2000      	movs	r0, #0
 80010de:	f7ff ff8f 	bl	8001000 <BQ27441_i2cReadBytes>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d107      	bne.n	80010f8 <BQ27441_deviceType+0x42>
        deviceType = (data[1] << 8) | data[0];
 80010e8:	787b      	ldrb	r3, [r7, #1]
 80010ea:	021b      	lsls	r3, r3, #8
 80010ec:	b21a      	sxth	r2, r3
 80010ee:	783b      	ldrb	r3, [r7, #0]
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	4313      	orrs	r3, r2
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	80fb      	strh	r3, [r7, #6]
    }
    return deviceType;
 80010f8:	88fb      	ldrh	r3, [r7, #6]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <BQ27441_init>:

bool BQ27441_init(BQ27441_ctx_t *dev) {
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
    if (dev == NULL)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d101      	bne.n	8001114 <BQ27441_init+0x12>
        return false;
 8001110:	2300      	movs	r3, #0
 8001112:	e00a      	b.n	800112a <BQ27441_init+0x28>
//    ctx.read_reg = dev->read_reg;
//    ctx.write_reg = dev->write_reg;
//    ctx.BQ27441_i2c_address = dev->BQ27441_i2c_address;

    if (BQ27441_deviceType() == BQ27441_DEVICE_ID) {
 8001114:	f7ff ffcf 	bl	80010b6 <BQ27441_deviceType>
 8001118:	4603      	mov	r3, r0
 800111a:	461a      	mov	r2, r3
 800111c:	f240 4321 	movw	r3, #1057	; 0x421
 8001120:	429a      	cmp	r2, r3
 8001122:	d101      	bne.n	8001128 <BQ27441_init+0x26>
        return true;
 8001124:	2301      	movs	r3, #1
 8001126:	e000      	b.n	800112a <BQ27441_init+0x28>
    } else
        return false;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <check_charging>:


void check_charging(void) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
	uint16_t pow = BQ27441_power();
 800113a:	f7ff ffb3 	bl	80010a4 <BQ27441_power>
 800113e:	4603      	mov	r3, r0
 8001140:	80fb      	strh	r3, [r7, #6]
	printf("pow: %d\r\n", pow);
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	4619      	mov	r1, r3
 8001146:	4809      	ldr	r0, [pc, #36]	; (800116c <check_charging+0x38>)
 8001148:	f00d f9f6 	bl	800e538 <iprintf>
	if (pow > 15000) {
 800114c:	88fb      	ldrh	r3, [r7, #6]
 800114e:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001152:	4293      	cmp	r3, r2
 8001154:	d903      	bls.n	800115e <check_charging+0x2a>
		bat_charging = 0;
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <check_charging+0x3c>)
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
	}
	else {
		bat_charging = 1;
	}
}
 800115c:	e002      	b.n	8001164 <check_charging+0x30>
		bat_charging = 1;
 800115e:	4b04      	ldr	r3, [pc, #16]	; (8001170 <check_charging+0x3c>)
 8001160:	2201      	movs	r2, #1
 8001162:	601a      	str	r2, [r3, #0]
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	0800fa38 	.word	0x0800fa38
 8001170:	20000870 	.word	0x20000870

08001174 <Bat_init>:

void Bat_init(BQ27441_ctx_t * dev) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	BQ27441_init(dev);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ffc0 	bl	8001102 <BQ27441_init>
	charge = BQ27441_soc(FILTERED);
 8001182:	2000      	movs	r0, #0
 8001184:	f7ff ff70 	bl	8001068 <BQ27441_soc>
 8001188:	4603      	mov	r3, r0
 800118a:	b21a      	sxth	r2, r3
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <Bat_init+0x4c>)
 800118e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(BAT_CE_GPIO_Port, BAT_CE_Pin, GPIO_PIN_SET);
 8001190:	2201      	movs	r2, #1
 8001192:	2180      	movs	r1, #128	; 0x80
 8001194:	480b      	ldr	r0, [pc, #44]	; (80011c4 <Bat_init+0x50>)
 8001196:	f001 fcf9 	bl	8002b8c <HAL_GPIO_WritePin>
	if (bat_charging && charge < 99) {
 800119a:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <Bat_init+0x54>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d009      	beq.n	80011b6 <Bat_init+0x42>
 80011a2:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <Bat_init+0x4c>)
 80011a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a8:	2b62      	cmp	r3, #98	; 0x62
 80011aa:	dc04      	bgt.n	80011b6 <Bat_init+0x42>
		HAL_GPIO_WritePin(BAT_CE_GPIO_Port, BAT_CE_Pin, GPIO_PIN_RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2180      	movs	r1, #128	; 0x80
 80011b0:	4804      	ldr	r0, [pc, #16]	; (80011c4 <Bat_init+0x50>)
 80011b2:	f001 fceb 	bl	8002b8c <HAL_GPIO_WritePin>
	}
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000874 	.word	0x20000874
 80011c4:	40020800 	.word	0x40020800
 80011c8:	20000870 	.word	0x20000870

080011cc <updateBat>:

void updateBat(void) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	charge = BQ27441_soc(FILTERED);
 80011d0:	2000      	movs	r0, #0
 80011d2:	f7ff ff49 	bl	8001068 <BQ27441_soc>
 80011d6:	4603      	mov	r3, r0
 80011d8:	b21a      	sxth	r2, r3
 80011da:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <updateBat+0x4c>)
 80011dc:	801a      	strh	r2, [r3, #0]
	printf("lcd charge: %d\r\n", charge);
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <updateBat+0x4c>)
 80011e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e4:	4619      	mov	r1, r3
 80011e6:	480d      	ldr	r0, [pc, #52]	; (800121c <updateBat+0x50>)
 80011e8:	f00d f9a6 	bl	800e538 <iprintf>
	if (bat_charging){
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <updateBat+0x54>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d00f      	beq.n	8001214 <updateBat+0x48>
		if (charge >= 99) {
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <updateBat+0x4c>)
 80011f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011fa:	2b62      	cmp	r3, #98	; 0x62
 80011fc:	dd05      	ble.n	800120a <updateBat+0x3e>
			HAL_GPIO_WritePin(BAT_CE_GPIO_Port, BAT_CE_Pin, GPIO_PIN_SET);
 80011fe:	2201      	movs	r2, #1
 8001200:	2180      	movs	r1, #128	; 0x80
 8001202:	4808      	ldr	r0, [pc, #32]	; (8001224 <updateBat+0x58>)
 8001204:	f001 fcc2 	bl	8002b8c <HAL_GPIO_WritePin>
		else {
			HAL_GPIO_WritePin(BAT_CE_GPIO_Port, BAT_CE_Pin, GPIO_PIN_RESET);
		}
	}

}
 8001208:	e004      	b.n	8001214 <updateBat+0x48>
			HAL_GPIO_WritePin(BAT_CE_GPIO_Port, BAT_CE_Pin, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	2180      	movs	r1, #128	; 0x80
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <updateBat+0x58>)
 8001210:	f001 fcbc 	bl	8002b8c <HAL_GPIO_WritePin>
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000874 	.word	0x20000874
 800121c:	0800fa44 	.word	0x0800fa44
 8001220:	20000870 	.word	0x20000870
 8001224:	40020800 	.word	0x40020800

08001228 <startup_init>:

void startup_init(void) {
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	ILI9341_FillScreen(ILI9341_BLACK);
 800122c:	2000      	movs	r0, #0
 800122e:	f7ff fcf5 	bl	8000c1c <ILI9341_FillScreen>
	  displayImage(LOGO, LOGO_X, LOGO_Y);
 8001232:	2237      	movs	r2, #55	; 0x37
 8001234:	210f      	movs	r1, #15
 8001236:	481d      	ldr	r0, [pc, #116]	; (80012ac <startup_init+0x84>)
 8001238:	f7ff fd14 	bl	8000c64 <displayImage>
	  // Check USB connection
	  if (HAL_GPIO_ReadPin(USB_Detect_GPIO_Port, USB_Detect_Pin) == GPIO_PIN_SET) {
 800123c:	2120      	movs	r1, #32
 800123e:	481c      	ldr	r0, [pc, #112]	; (80012b0 <startup_init+0x88>)
 8001240:	f001 fc8c 	bl	8002b5c <HAL_GPIO_ReadPin>
 8001244:	4603      	mov	r3, r0
 8001246:	2b01      	cmp	r3, #1
 8001248:	d117      	bne.n	800127a <startup_init+0x52>
		  // If USB
		  // get battery percentage and status
		  bat_charging = 1;
 800124a:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <startup_init+0x8c>)
 800124c:	2201      	movs	r2, #1
 800124e:	601a      	str	r2, [r3, #0]
//		  check_charging();
		  updateBat();
 8001250:	f7ff ffbc 	bl	80011cc <updateBat>

		  // show USB symbol, battery percentage
		  printf("Connection status: USB\r\n");
 8001254:	4818      	ldr	r0, [pc, #96]	; (80012b8 <startup_init+0x90>)
 8001256:	f00d f9f5 	bl	800e644 <puts>
		  displayImage(USB, STATUS_X, STATUS_Y);
 800125a:	226e      	movs	r2, #110	; 0x6e
 800125c:	21d7      	movs	r1, #215	; 0xd7
 800125e:	4817      	ldr	r0, [pc, #92]	; (80012bc <startup_init+0x94>)
 8001260:	f7ff fd00 	bl	8000c64 <displayImage>
		  dispBat();
 8001264:	f000 fc7c 	bl	8001b60 <dispBat>

	//	  // Enable USB timer interrupt
	//	  HAL_TIM_Base_Start_IT(&htim3);
		  bluetooth_mode = false;
 8001268:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <startup_init+0x98>)
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(BT_EN_GPIO_Port, BT_EN_Pin, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	2140      	movs	r1, #64	; 0x40
 8001272:	4814      	ldr	r0, [pc, #80]	; (80012c4 <startup_init+0x9c>)
 8001274:	f001 fc8a 	bl	8002b8c <HAL_GPIO_WritePin>
//	  }
//	  else {
//		neutral_SOCD_mode = false;
//		displayImage(UP_SOCD, SOCD_X, SOCD_Y);
//	  }
}
 8001278:	e016      	b.n	80012a8 <startup_init+0x80>
		  bat_charging = 0;
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <startup_init+0x8c>)
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
		  updateBat();
 8001280:	f7ff ffa4 	bl	80011cc <updateBat>
		  printf("Connection status: Bluetooth\r\n");
 8001284:	4810      	ldr	r0, [pc, #64]	; (80012c8 <startup_init+0xa0>)
 8001286:	f00d f9dd 	bl	800e644 <puts>
		  displayImage(BLUETOOTH, STATUS_X, STATUS_Y);
 800128a:	226e      	movs	r2, #110	; 0x6e
 800128c:	21d7      	movs	r1, #215	; 0xd7
 800128e:	480f      	ldr	r0, [pc, #60]	; (80012cc <startup_init+0xa4>)
 8001290:	f7ff fce8 	bl	8000c64 <displayImage>
		  dispBat();
 8001294:	f000 fc64 	bl	8001b60 <dispBat>
		  bluetooth_mode = true;
 8001298:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <startup_init+0x98>)
 800129a:	2201      	movs	r2, #1
 800129c:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(BT_EN_GPIO_Port, BT_EN_Pin, GPIO_PIN_SET);
 800129e:	2201      	movs	r2, #1
 80012a0:	2140      	movs	r1, #64	; 0x40
 80012a2:	4808      	ldr	r0, [pc, #32]	; (80012c4 <startup_init+0x9c>)
 80012a4:	f001 fc72 	bl	8002b8c <HAL_GPIO_WritePin>
}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	0800fa58 	.word	0x0800fa58
 80012b0:	40020800 	.word	0x40020800
 80012b4:	20000870 	.word	0x20000870
 80012b8:	0800fa64 	.word	0x0800fa64
 80012bc:	0800fa7c 	.word	0x0800fa7c
 80012c0:	200003c8 	.word	0x200003c8
 80012c4:	40020000 	.word	0x40020000
 80012c8:	0800fa84 	.word	0x0800fa84
 80012cc:	0800faa4 	.word	0x0800faa4

080012d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d6:	f001 f8fb 	bl	80024d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012da:	f000 f939 	bl	8001550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012de:	f000 fb27 	bl	8001930 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012e2:	f000 fafb 	bl	80018dc <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80012e6:	f000 f9c9 	bl	800167c <MX_SPI2_Init>
  MX_SPI3_Init();
 80012ea:	f000 f9fd 	bl	80016e8 <MX_SPI3_Init>
  MX_TIM2_Init();
 80012ee:	f000 fa31 	bl	8001754 <MX_TIM2_Init>
  MX_TIM3_Init();
 80012f2:	f000 fa7b 	bl	80017ec <MX_TIM3_Init>
  MX_FATFS_Init();
 80012f6:	f007 feb3 	bl	8009060 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80012fa:	f00c fcbd 	bl	800dc78 <MX_USB_DEVICE_Init>
  MX_I2C3_Init();
 80012fe:	f000 f98f 	bl	8001620 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8001302:	f000 fac1 	bl	8001888 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize the screen
  printf("\r\n~*~* PROTOTYPE *~*~\r\n");
 8001306:	487c      	ldr	r0, [pc, #496]	; (80014f8 <main+0x228>)
 8001308:	f00d f99c 	bl	800e644 <puts>
  HAL_GPIO_WritePin(Debug_LED_GPIO_Port, Debug_LED_Pin, GPIO_PIN_SET);
 800130c:	2201      	movs	r2, #1
 800130e:	2102      	movs	r1, #2
 8001310:	487a      	ldr	r0, [pc, #488]	; (80014fc <main+0x22c>)
 8001312:	f001 fc3b 	bl	8002b8c <HAL_GPIO_WritePin>
  ILI9341_Init();
 8001316:	f7ff f9f1 	bl	80006fc <ILI9341_Init>
  ILI9341_FillScreen(ILI9341_BLACK);
 800131a:	2000      	movs	r0, #0
 800131c:	f7ff fc7e 	bl	8000c1c <ILI9341_FillScreen>

  // Disable charging
  HAL_GPIO_WritePin(BAT_CE_GPIO_Port, BAT_CE_Pin, GPIO_PIN_SET);
 8001320:	2201      	movs	r2, #1
 8001322:	2180      	movs	r1, #128	; 0x80
 8001324:	4876      	ldr	r0, [pc, #472]	; (8001500 <main+0x230>)
 8001326:	f001 fc31 	bl	8002b8c <HAL_GPIO_WritePin>

  // Connect to battery monitor
  HAL_StatusTypeDef res;
  uint8_t receiveBuffer[1];
  printf("Connecting to battery monitor\r\n");
 800132a:	4876      	ldr	r0, [pc, #472]	; (8001504 <main+0x234>)
 800132c:	f00d f98a 	bl	800e644 <puts>
  if (HAL_I2C_Master_Receive(&hi2c3, (uint16_t) BQ27441_I2C_ADDRESS << 1, receiveBuffer, sizeof(receiveBuffer), HAL_MAX_DELAY) != HAL_OK) {
 8001330:	1d3a      	adds	r2, r7, #4
 8001332:	f04f 33ff 	mov.w	r3, #4294967295
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	2301      	movs	r3, #1
 800133a:	21aa      	movs	r1, #170	; 0xaa
 800133c:	4872      	ldr	r0, [pc, #456]	; (8001508 <main+0x238>)
 800133e:	f001 fd9b 	bl	8002e78 <HAL_I2C_Master_Receive>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d02a      	beq.n	800139e <main+0xce>
	  ILI9341_WriteString(65, 100, "Battery missing", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 8001348:	4b70      	ldr	r3, [pc, #448]	; (800150c <main+0x23c>)
 800134a:	2200      	movs	r2, #0
 800134c:	9202      	str	r2, [sp, #8]
 800134e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001352:	9201      	str	r2, [sp, #4]
 8001354:	685a      	ldr	r2, [r3, #4]
 8001356:	9200      	str	r2, [sp, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a6d      	ldr	r2, [pc, #436]	; (8001510 <main+0x240>)
 800135c:	2164      	movs	r1, #100	; 0x64
 800135e:	2041      	movs	r0, #65	; 0x41
 8001360:	f7ff fba0 	bl	8000aa4 <ILI9341_WriteString>
	  ILI9341_WriteString(100, 130, "or damaged", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 8001364:	4b69      	ldr	r3, [pc, #420]	; (800150c <main+0x23c>)
 8001366:	2200      	movs	r2, #0
 8001368:	9202      	str	r2, [sp, #8]
 800136a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800136e:	9201      	str	r2, [sp, #4]
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	9200      	str	r2, [sp, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a67      	ldr	r2, [pc, #412]	; (8001514 <main+0x244>)
 8001378:	2182      	movs	r1, #130	; 0x82
 800137a:	2064      	movs	r0, #100	; 0x64
 800137c:	f7ff fb92 	bl	8000aa4 <ILI9341_WriteString>
	  while (1) {
		if (HAL_I2C_Master_Receive(&hi2c3, (uint16_t) BQ27441_I2C_ADDRESS << 1, receiveBuffer, sizeof(receiveBuffer), HAL_MAX_DELAY) == HAL_OK) {
 8001380:	1d3a      	adds	r2, r7, #4
 8001382:	f04f 33ff 	mov.w	r3, #4294967295
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	2301      	movs	r3, #1
 800138a:	21aa      	movs	r1, #170	; 0xaa
 800138c:	485e      	ldr	r0, [pc, #376]	; (8001508 <main+0x238>)
 800138e:	f001 fd73 	bl	8002e78 <HAL_I2C_Master_Receive>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1f3      	bne.n	8001380 <main+0xb0>
		  printf("Device found\r\n");
 8001398:	485f      	ldr	r0, [pc, #380]	; (8001518 <main+0x248>)
 800139a:	f00d f953 	bl	800e644 <puts>
		  break;
		}
	  }
  }
  ILI9341_FillScreen(ILI9341_BLACK);
 800139e:	2000      	movs	r0, #0
 80013a0:	f7ff fc3c 	bl	8000c1c <ILI9341_FillScreen>


  // Initialize Battery monitor
  Bat_init(&BQ27441);
 80013a4:	485d      	ldr	r0, [pc, #372]	; (800151c <main+0x24c>)
 80013a6:	f7ff fee5 	bl	8001174 <Bat_init>

  // Let SD card settle
  HAL_Delay(1000);
 80013aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013ae:	f001 f901 	bl	80025b4 <HAL_Delay>

  // Check if SD card is connected
  if (HAL_GPIO_ReadPin(SD_Detect_GPIO_Port, SD_Detect_Pin) == GPIO_PIN_RESET) {
 80013b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013b6:	485a      	ldr	r0, [pc, #360]	; (8001520 <main+0x250>)
 80013b8:	f001 fbd0 	bl	8002b5c <HAL_GPIO_ReadPin>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d14f      	bne.n	8001462 <main+0x192>
	  printf("Please check SD card connection\r\n");
 80013c2:	4858      	ldr	r0, [pc, #352]	; (8001524 <main+0x254>)
 80013c4:	f00d f93e 	bl	800e644 <puts>
	  ILI9341_WriteString(65, 100, "Please check", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 80013c8:	4b50      	ldr	r3, [pc, #320]	; (800150c <main+0x23c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	9202      	str	r2, [sp, #8]
 80013ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013d2:	9201      	str	r2, [sp, #4]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	9200      	str	r2, [sp, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a53      	ldr	r2, [pc, #332]	; (8001528 <main+0x258>)
 80013dc:	2164      	movs	r1, #100	; 0x64
 80013de:	2041      	movs	r0, #65	; 0x41
 80013e0:	f7ff fb60 	bl	8000aa4 <ILI9341_WriteString>
	  ILI9341_WriteString(100,  130,  "SD card", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 80013e4:	4b49      	ldr	r3, [pc, #292]	; (800150c <main+0x23c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	9202      	str	r2, [sp, #8]
 80013ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ee:	9201      	str	r2, [sp, #4]
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	9200      	str	r2, [sp, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a4d      	ldr	r2, [pc, #308]	; (800152c <main+0x25c>)
 80013f8:	2182      	movs	r1, #130	; 0x82
 80013fa:	2064      	movs	r0, #100	; 0x64
 80013fc:	f7ff fb52 	bl	8000aa4 <ILI9341_WriteString>
	  while (1) {
		  if(HAL_GPIO_ReadPin(SD_Detect_GPIO_Port, SD_Detect_Pin) == GPIO_PIN_SET) {
 8001400:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001404:	4846      	ldr	r0, [pc, #280]	; (8001520 <main+0x250>)
 8001406:	f001 fba9 	bl	8002b5c <HAL_GPIO_ReadPin>
 800140a:	4603      	mov	r3, r0
 800140c:	2b01      	cmp	r3, #1
 800140e:	d123      	bne.n	8001458 <main+0x188>
			  ILI9341_FillScreen(ILI9341_BLACK);
 8001410:	2000      	movs	r0, #0
 8001412:	f7ff fc03 	bl	8000c1c <ILI9341_FillScreen>
			  ILI9341_WriteString(90, 110, "SD card", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 8001416:	4b3d      	ldr	r3, [pc, #244]	; (800150c <main+0x23c>)
 8001418:	2200      	movs	r2, #0
 800141a:	9202      	str	r2, [sp, #8]
 800141c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001420:	9201      	str	r2, [sp, #4]
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	9200      	str	r2, [sp, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a40      	ldr	r2, [pc, #256]	; (800152c <main+0x25c>)
 800142a:	216e      	movs	r1, #110	; 0x6e
 800142c:	205a      	movs	r0, #90	; 0x5a
 800142e:	f7ff fb39 	bl	8000aa4 <ILI9341_WriteString>
	          ILI9341_WriteString(75, 130, "connected", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 8001432:	4b36      	ldr	r3, [pc, #216]	; (800150c <main+0x23c>)
 8001434:	2200      	movs	r2, #0
 8001436:	9202      	str	r2, [sp, #8]
 8001438:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800143c:	9201      	str	r2, [sp, #4]
 800143e:	685a      	ldr	r2, [r3, #4]
 8001440:	9200      	str	r2, [sp, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a3a      	ldr	r2, [pc, #232]	; (8001530 <main+0x260>)
 8001446:	2182      	movs	r1, #130	; 0x82
 8001448:	204b      	movs	r0, #75	; 0x4b
 800144a:	f7ff fb2b 	bl	8000aa4 <ILI9341_WriteString>
			  HAL_Delay(1000);
 800144e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001452:	f001 f8af 	bl	80025b4 <HAL_Delay>
			  break;
 8001456:	e004      	b.n	8001462 <main+0x192>
		  }
          HAL_Delay(500);
 8001458:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800145c:	f001 f8aa 	bl	80025b4 <HAL_Delay>
		  if(HAL_GPIO_ReadPin(SD_Detect_GPIO_Port, SD_Detect_Pin) == GPIO_PIN_SET) {
 8001460:	e7ce      	b.n	8001400 <main+0x130>
	  }
  }
  ILI9341_FillScreen(ILI9341_BLACK);
 8001462:	2000      	movs	r0, #0
 8001464:	f7ff fbda 	bl	8000c1c <ILI9341_FillScreen>

  // Mount SD Card
  fres = f_mount(&fs, "", 1);
 8001468:	2201      	movs	r2, #1
 800146a:	4932      	ldr	r1, [pc, #200]	; (8001534 <main+0x264>)
 800146c:	4832      	ldr	r0, [pc, #200]	; (8001538 <main+0x268>)
 800146e:	f00b fdb3 	bl	800cfd8 <f_mount>
 8001472:	4603      	mov	r3, r0
 8001474:	461a      	mov	r2, r3
 8001476:	4b31      	ldr	r3, [pc, #196]	; (800153c <main+0x26c>)
 8001478:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK) {
 800147a:	4b30      	ldr	r3, [pc, #192]	; (800153c <main+0x26c>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d030      	beq.n	80014e4 <main+0x214>
	printf("f_mount error (%i)\r\n", fres);
 8001482:	4b2e      	ldr	r3, [pc, #184]	; (800153c <main+0x26c>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	4619      	mov	r1, r3
 8001488:	482d      	ldr	r0, [pc, #180]	; (8001540 <main+0x270>)
 800148a:	f00d f855 	bl	800e538 <iprintf>
	ILI9341_WriteString(90, 110, "SD card", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 800148e:	4b1f      	ldr	r3, [pc, #124]	; (800150c <main+0x23c>)
 8001490:	2200      	movs	r2, #0
 8001492:	9202      	str	r2, [sp, #8]
 8001494:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001498:	9201      	str	r2, [sp, #4]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	9200      	str	r2, [sp, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a22      	ldr	r2, [pc, #136]	; (800152c <main+0x25c>)
 80014a2:	216e      	movs	r1, #110	; 0x6e
 80014a4:	205a      	movs	r0, #90	; 0x5a
 80014a6:	f7ff fafd 	bl	8000aa4 <ILI9341_WriteString>
	ILI9341_WriteString(75, 130, "mounting error", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 80014aa:	4b18      	ldr	r3, [pc, #96]	; (800150c <main+0x23c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	9202      	str	r2, [sp, #8]
 80014b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014b4:	9201      	str	r2, [sp, #4]
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	9200      	str	r2, [sp, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a21      	ldr	r2, [pc, #132]	; (8001544 <main+0x274>)
 80014be:	2182      	movs	r1, #130	; 0x82
 80014c0:	204b      	movs	r0, #75	; 0x4b
 80014c2:	f7ff faef 	bl	8000aa4 <ILI9341_WriteString>
	while(1) {
		fres = f_mount(&fs, "", 1);
 80014c6:	2201      	movs	r2, #1
 80014c8:	491a      	ldr	r1, [pc, #104]	; (8001534 <main+0x264>)
 80014ca:	481b      	ldr	r0, [pc, #108]	; (8001538 <main+0x268>)
 80014cc:	f00b fd84 	bl	800cfd8 <f_mount>
 80014d0:	4603      	mov	r3, r0
 80014d2:	461a      	mov	r2, r3
 80014d4:	4b19      	ldr	r3, [pc, #100]	; (800153c <main+0x26c>)
 80014d6:	701a      	strb	r2, [r3, #0]
		if (fres == FR_OK) {
 80014d8:	4b18      	ldr	r3, [pc, #96]	; (800153c <main+0x26c>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d000      	beq.n	80014e2 <main+0x212>
		fres = f_mount(&fs, "", 1);
 80014e0:	e7f1      	b.n	80014c6 <main+0x1f6>
			break;
 80014e2:	bf00      	nop
		}
	}
  }

  startup_init();
 80014e4:	f7ff fea0 	bl	8001228 <startup_init>


//  ILI9341_WriteString(80, 120, "LOGO", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
  // Enable buttons interrupt, and data timer interrupt
  HAL_TIM_Base_Start_IT(&htim2);
 80014e8:	4817      	ldr	r0, [pc, #92]	; (8001548 <main+0x278>)
 80014ea:	f005 f9b3 	bl	8006854 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80014ee:	4817      	ldr	r0, [pc, #92]	; (800154c <main+0x27c>)
 80014f0:	f005 f9b0 	bl	8006854 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <main+0x224>
 80014f6:	bf00      	nop
 80014f8:	0800fab0 	.word	0x0800fab0
 80014fc:	40020000 	.word	0x40020000
 8001500:	40020800 	.word	0x40020800
 8001504:	0800fac8 	.word	0x0800fac8
 8001508:	200001ac 	.word	0x200001ac
 800150c:	20000008 	.word	0x20000008
 8001510:	0800fae8 	.word	0x0800fae8
 8001514:	0800faf8 	.word	0x0800faf8
 8001518:	0800fb04 	.word	0x0800fb04
 800151c:	20000010 	.word	0x20000010
 8001520:	40020400 	.word	0x40020400
 8001524:	0800fb14 	.word	0x0800fb14
 8001528:	0800fb38 	.word	0x0800fb38
 800152c:	0800fb48 	.word	0x0800fb48
 8001530:	0800fb50 	.word	0x0800fb50
 8001534:	0800fb5c 	.word	0x0800fb5c
 8001538:	2000040c 	.word	0x2000040c
 800153c:	2000086c 	.word	0x2000086c
 8001540:	0800fb60 	.word	0x0800fb60
 8001544:	0800fb78 	.word	0x0800fb78
 8001548:	200002b0 	.word	0x200002b0
 800154c:	200002f8 	.word	0x200002f8

08001550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b094      	sub	sp, #80	; 0x50
 8001554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001556:	f107 0320 	add.w	r3, r7, #32
 800155a:	2230      	movs	r2, #48	; 0x30
 800155c:	2100      	movs	r1, #0
 800155e:	4618      	mov	r0, r3
 8001560:	f00c ffe2 	bl	800e528 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001564:	f107 030c 	add.w	r3, r7, #12
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	4b27      	ldr	r3, [pc, #156]	; (8001618 <SystemClock_Config+0xc8>)
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	4a26      	ldr	r2, [pc, #152]	; (8001618 <SystemClock_Config+0xc8>)
 800157e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001582:	6413      	str	r3, [r2, #64]	; 0x40
 8001584:	4b24      	ldr	r3, [pc, #144]	; (8001618 <SystemClock_Config+0xc8>)
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001590:	2300      	movs	r3, #0
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	4b21      	ldr	r3, [pc, #132]	; (800161c <SystemClock_Config+0xcc>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a20      	ldr	r2, [pc, #128]	; (800161c <SystemClock_Config+0xcc>)
 800159a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800159e:	6013      	str	r3, [r2, #0]
 80015a0:	4b1e      	ldr	r3, [pc, #120]	; (800161c <SystemClock_Config+0xcc>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015ac:	2301      	movs	r3, #1
 80015ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80015b0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015b6:	2302      	movs	r3, #2
 80015b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015c0:	2304      	movs	r3, #4
 80015c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80015c4:	23c0      	movs	r3, #192	; 0xc0
 80015c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80015c8:	2304      	movs	r3, #4
 80015ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80015cc:	2308      	movs	r3, #8
 80015ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d0:	f107 0320 	add.w	r3, r7, #32
 80015d4:	4618      	mov	r0, r3
 80015d6:	f004 f823 	bl	8005620 <HAL_RCC_OscConfig>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015e0:	f000 fc5b 	bl	8001e9a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015e4:	230f      	movs	r3, #15
 80015e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015e8:	2302      	movs	r3, #2
 80015ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015fa:	f107 030c 	add.w	r3, r7, #12
 80015fe:	2103      	movs	r1, #3
 8001600:	4618      	mov	r0, r3
 8001602:	f004 fa85 	bl	8005b10 <HAL_RCC_ClockConfig>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800160c:	f000 fc45 	bl	8001e9a <Error_Handler>
  }
}
 8001610:	bf00      	nop
 8001612:	3750      	adds	r7, #80	; 0x50
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40023800 	.word	0x40023800
 800161c:	40007000 	.word	0x40007000

08001620 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001624:	4b12      	ldr	r3, [pc, #72]	; (8001670 <MX_I2C3_Init+0x50>)
 8001626:	4a13      	ldr	r2, [pc, #76]	; (8001674 <MX_I2C3_Init+0x54>)
 8001628:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800162a:	4b11      	ldr	r3, [pc, #68]	; (8001670 <MX_I2C3_Init+0x50>)
 800162c:	4a12      	ldr	r2, [pc, #72]	; (8001678 <MX_I2C3_Init+0x58>)
 800162e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001630:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <MX_I2C3_Init+0x50>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <MX_I2C3_Init+0x50>)
 8001638:	2200      	movs	r2, #0
 800163a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <MX_I2C3_Init+0x50>)
 800163e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001642:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001644:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <MX_I2C3_Init+0x50>)
 8001646:	2200      	movs	r2, #0
 8001648:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <MX_I2C3_Init+0x50>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001650:	4b07      	ldr	r3, [pc, #28]	; (8001670 <MX_I2C3_Init+0x50>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <MX_I2C3_Init+0x50>)
 8001658:	2200      	movs	r2, #0
 800165a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800165c:	4804      	ldr	r0, [pc, #16]	; (8001670 <MX_I2C3_Init+0x50>)
 800165e:	f001 fac7 	bl	8002bf0 <HAL_I2C_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001668:	f000 fc17 	bl	8001e9a <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}
 8001670:	200001ac 	.word	0x200001ac
 8001674:	40005c00 	.word	0x40005c00
 8001678:	00061a80 	.word	0x00061a80

0800167c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001680:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <MX_SPI2_Init+0x64>)
 8001682:	4a18      	ldr	r2, [pc, #96]	; (80016e4 <MX_SPI2_Init+0x68>)
 8001684:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001686:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <MX_SPI2_Init+0x64>)
 8001688:	f44f 7282 	mov.w	r2, #260	; 0x104
 800168c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800168e:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <MX_SPI2_Init+0x64>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <MX_SPI2_Init+0x64>)
 8001696:	2200      	movs	r2, #0
 8001698:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800169a:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <MX_SPI2_Init+0x64>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016a0:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <MX_SPI2_Init+0x64>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016a6:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <MX_SPI2_Init+0x64>)
 80016a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80016ae:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <MX_SPI2_Init+0x64>)
 80016b0:	2230      	movs	r2, #48	; 0x30
 80016b2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016b4:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <MX_SPI2_Init+0x64>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016ba:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <MX_SPI2_Init+0x64>)
 80016bc:	2200      	movs	r2, #0
 80016be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016c0:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <MX_SPI2_Init+0x64>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <MX_SPI2_Init+0x64>)
 80016c8:	220a      	movs	r2, #10
 80016ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016cc:	4804      	ldr	r0, [pc, #16]	; (80016e0 <MX_SPI2_Init+0x64>)
 80016ce:	f004 fc3f 	bl	8005f50 <HAL_SPI_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80016d8:	f000 fbdf 	bl	8001e9a <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000200 	.word	0x20000200
 80016e4:	40003800 	.word	0x40003800

080016e8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80016ec:	4b17      	ldr	r3, [pc, #92]	; (800174c <MX_SPI3_Init+0x64>)
 80016ee:	4a18      	ldr	r2, [pc, #96]	; (8001750 <MX_SPI3_Init+0x68>)
 80016f0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80016f2:	4b16      	ldr	r3, [pc, #88]	; (800174c <MX_SPI3_Init+0x64>)
 80016f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016f8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80016fa:	4b14      	ldr	r3, [pc, #80]	; (800174c <MX_SPI3_Init+0x64>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <MX_SPI3_Init+0x64>)
 8001702:	2200      	movs	r2, #0
 8001704:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <MX_SPI3_Init+0x64>)
 8001708:	2200      	movs	r2, #0
 800170a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800170c:	4b0f      	ldr	r3, [pc, #60]	; (800174c <MX_SPI3_Init+0x64>)
 800170e:	2200      	movs	r2, #0
 8001710:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <MX_SPI3_Init+0x64>)
 8001714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001718:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800171a:	4b0c      	ldr	r3, [pc, #48]	; (800174c <MX_SPI3_Init+0x64>)
 800171c:	2200      	movs	r2, #0
 800171e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001720:	4b0a      	ldr	r3, [pc, #40]	; (800174c <MX_SPI3_Init+0x64>)
 8001722:	2200      	movs	r2, #0
 8001724:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <MX_SPI3_Init+0x64>)
 8001728:	2200      	movs	r2, #0
 800172a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800172c:	4b07      	ldr	r3, [pc, #28]	; (800174c <MX_SPI3_Init+0x64>)
 800172e:	2200      	movs	r2, #0
 8001730:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <MX_SPI3_Init+0x64>)
 8001734:	220a      	movs	r2, #10
 8001736:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001738:	4804      	ldr	r0, [pc, #16]	; (800174c <MX_SPI3_Init+0x64>)
 800173a:	f004 fc09 	bl	8005f50 <HAL_SPI_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001744:	f000 fba9 	bl	8001e9a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000258 	.word	0x20000258
 8001750:	40003c00 	.word	0x40003c00

08001754 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800175a:	f107 0308 	add.w	r3, r7, #8
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001768:	463b      	mov	r3, r7
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001770:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <MX_TIM2_Init+0x94>)
 8001772:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001776:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 8001778:	4b1b      	ldr	r3, [pc, #108]	; (80017e8 <MX_TIM2_Init+0x94>)
 800177a:	225f      	movs	r2, #95	; 0x5f
 800177c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177e:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <MX_TIM2_Init+0x94>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001784:	4b18      	ldr	r3, [pc, #96]	; (80017e8 <MX_TIM2_Init+0x94>)
 8001786:	2263      	movs	r2, #99	; 0x63
 8001788:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800178a:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <MX_TIM2_Init+0x94>)
 800178c:	2200      	movs	r2, #0
 800178e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001790:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <MX_TIM2_Init+0x94>)
 8001792:	2200      	movs	r2, #0
 8001794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001796:	4814      	ldr	r0, [pc, #80]	; (80017e8 <MX_TIM2_Init+0x94>)
 8001798:	f005 f80c 	bl	80067b4 <HAL_TIM_Base_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80017a2:	f000 fb7a 	bl	8001e9a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017ac:	f107 0308 	add.w	r3, r7, #8
 80017b0:	4619      	mov	r1, r3
 80017b2:	480d      	ldr	r0, [pc, #52]	; (80017e8 <MX_TIM2_Init+0x94>)
 80017b4:	f005 f9b8 	bl	8006b28 <HAL_TIM_ConfigClockSource>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80017be:	f000 fb6c 	bl	8001e9a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c2:	2300      	movs	r3, #0
 80017c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017ca:	463b      	mov	r3, r7
 80017cc:	4619      	mov	r1, r3
 80017ce:	4806      	ldr	r0, [pc, #24]	; (80017e8 <MX_TIM2_Init+0x94>)
 80017d0:	f005 fbb4 	bl	8006f3c <HAL_TIMEx_MasterConfigSynchronization>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80017da:	f000 fb5e 	bl	8001e9a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017de:	bf00      	nop
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	200002b0 	.word	0x200002b0

080017ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017f2:	f107 0308 	add.w	r3, r7, #8
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001800:	463b      	mov	r3, r7
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001808:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <MX_TIM3_Init+0x94>)
 800180a:	4a1e      	ldr	r2, [pc, #120]	; (8001884 <MX_TIM3_Init+0x98>)
 800180c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 800-1;
 800180e:	4b1c      	ldr	r3, [pc, #112]	; (8001880 <MX_TIM3_Init+0x94>)
 8001810:	f240 321f 	movw	r2, #799	; 0x31f
 8001814:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001816:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <MX_TIM3_Init+0x94>)
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800181c:	4b18      	ldr	r3, [pc, #96]	; (8001880 <MX_TIM3_Init+0x94>)
 800181e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001822:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001824:	4b16      	ldr	r3, [pc, #88]	; (8001880 <MX_TIM3_Init+0x94>)
 8001826:	2200      	movs	r2, #0
 8001828:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <MX_TIM3_Init+0x94>)
 800182c:	2200      	movs	r2, #0
 800182e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001830:	4813      	ldr	r0, [pc, #76]	; (8001880 <MX_TIM3_Init+0x94>)
 8001832:	f004 ffbf 	bl	80067b4 <HAL_TIM_Base_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800183c:	f000 fb2d 	bl	8001e9a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001844:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001846:	f107 0308 	add.w	r3, r7, #8
 800184a:	4619      	mov	r1, r3
 800184c:	480c      	ldr	r0, [pc, #48]	; (8001880 <MX_TIM3_Init+0x94>)
 800184e:	f005 f96b 	bl	8006b28 <HAL_TIM_ConfigClockSource>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001858:	f000 fb1f 	bl	8001e9a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800185c:	2300      	movs	r3, #0
 800185e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001860:	2300      	movs	r3, #0
 8001862:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001864:	463b      	mov	r3, r7
 8001866:	4619      	mov	r1, r3
 8001868:	4805      	ldr	r0, [pc, #20]	; (8001880 <MX_TIM3_Init+0x94>)
 800186a:	f005 fb67 	bl	8006f3c <HAL_TIMEx_MasterConfigSynchronization>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001874:	f000 fb11 	bl	8001e9a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001878:	bf00      	nop
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	200002f8 	.word	0x200002f8
 8001884:	40000400 	.word	0x40000400

08001888 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800188c:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <MX_USART1_UART_Init+0x4c>)
 800188e:	4a12      	ldr	r2, [pc, #72]	; (80018d8 <MX_USART1_UART_Init+0x50>)
 8001890:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <MX_USART1_UART_Init+0x4c>)
 8001894:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001898:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800189a:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <MX_USART1_UART_Init+0x4c>)
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018a0:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <MX_USART1_UART_Init+0x4c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018a6:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <MX_USART1_UART_Init+0x4c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018ac:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <MX_USART1_UART_Init+0x4c>)
 80018ae:	220c      	movs	r2, #12
 80018b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018b2:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <MX_USART1_UART_Init+0x4c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <MX_USART1_UART_Init+0x4c>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018be:	4805      	ldr	r0, [pc, #20]	; (80018d4 <MX_USART1_UART_Init+0x4c>)
 80018c0:	f005 fbbe 	bl	8007040 <HAL_UART_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018ca:	f000 fae6 	bl	8001e9a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000340 	.word	0x20000340
 80018d8:	40011000 	.word	0x40011000

080018dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <MX_USART2_UART_Init+0x4c>)
 80018e2:	4a12      	ldr	r2, [pc, #72]	; (800192c <MX_USART2_UART_Init+0x50>)
 80018e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018e6:	4b10      	ldr	r3, [pc, #64]	; (8001928 <MX_USART2_UART_Init+0x4c>)
 80018e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018ee:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <MX_USART2_UART_Init+0x4c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018f4:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <MX_USART2_UART_Init+0x4c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018fa:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <MX_USART2_UART_Init+0x4c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001900:	4b09      	ldr	r3, [pc, #36]	; (8001928 <MX_USART2_UART_Init+0x4c>)
 8001902:	220c      	movs	r2, #12
 8001904:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001906:	4b08      	ldr	r3, [pc, #32]	; (8001928 <MX_USART2_UART_Init+0x4c>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <MX_USART2_UART_Init+0x4c>)
 800190e:	2200      	movs	r2, #0
 8001910:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001912:	4805      	ldr	r0, [pc, #20]	; (8001928 <MX_USART2_UART_Init+0x4c>)
 8001914:	f005 fb94 	bl	8007040 <HAL_UART_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800191e:	f000 fabc 	bl	8001e9a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000384 	.word	0x20000384
 800192c:	40004400 	.word	0x40004400

08001930 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08a      	sub	sp, #40	; 0x28
 8001934:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001936:	f107 0314 	add.w	r3, r7, #20
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	60da      	str	r2, [r3, #12]
 8001944:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	4b80      	ldr	r3, [pc, #512]	; (8001b4c <MX_GPIO_Init+0x21c>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a7f      	ldr	r2, [pc, #508]	; (8001b4c <MX_GPIO_Init+0x21c>)
 8001950:	f043 0304 	orr.w	r3, r3, #4
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b7d      	ldr	r3, [pc, #500]	; (8001b4c <MX_GPIO_Init+0x21c>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	4b79      	ldr	r3, [pc, #484]	; (8001b4c <MX_GPIO_Init+0x21c>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a78      	ldr	r2, [pc, #480]	; (8001b4c <MX_GPIO_Init+0x21c>)
 800196c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4b76      	ldr	r3, [pc, #472]	; (8001b4c <MX_GPIO_Init+0x21c>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	4b72      	ldr	r3, [pc, #456]	; (8001b4c <MX_GPIO_Init+0x21c>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4a71      	ldr	r2, [pc, #452]	; (8001b4c <MX_GPIO_Init+0x21c>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4b6f      	ldr	r3, [pc, #444]	; (8001b4c <MX_GPIO_Init+0x21c>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	4b6b      	ldr	r3, [pc, #428]	; (8001b4c <MX_GPIO_Init+0x21c>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a6a      	ldr	r2, [pc, #424]	; (8001b4c <MX_GPIO_Init+0x21c>)
 80019a4:	f043 0302 	orr.w	r3, r3, #2
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b68      	ldr	r3, [pc, #416]	; (8001b4c <MX_GPIO_Init+0x21c>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	603b      	str	r3, [r7, #0]
 80019ba:	4b64      	ldr	r3, [pc, #400]	; (8001b4c <MX_GPIO_Init+0x21c>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a63      	ldr	r2, [pc, #396]	; (8001b4c <MX_GPIO_Init+0x21c>)
 80019c0:	f043 0308 	orr.w	r3, r3, #8
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b61      	ldr	r3, [pc, #388]	; (8001b4c <MX_GPIO_Init+0x21c>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f003 0308 	and.w	r3, r3, #8
 80019ce:	603b      	str	r3, [r7, #0]
 80019d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Debug_LED_Pin|BT_EN_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 80019d2:	2200      	movs	r2, #0
 80019d4:	f248 0142 	movw	r1, #32834	; 0x8042
 80019d8:	485d      	ldr	r0, [pc, #372]	; (8001b50 <MX_GPIO_Init+0x220>)
 80019da:	f001 f8d7 	bl	8002b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Col0_Pin|Col1_Pin|Col2_Pin|SD_CS_Pin
 80019de:	2200      	movs	r2, #0
 80019e0:	f241 010f 	movw	r1, #4111	; 0x100f
 80019e4:	485b      	ldr	r0, [pc, #364]	; (8001b54 <MX_GPIO_Init+0x224>)
 80019e6:	f001 f8d1 	bl	8002b8c <HAL_GPIO_WritePin>
                          |Col3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BAT_CE_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 80019ea:	2200      	movs	r2, #0
 80019ec:	f44f 6108 	mov.w	r1, #2176	; 0x880
 80019f0:	4859      	ldr	r0, [pc, #356]	; (8001b58 <MX_GPIO_Init+0x228>)
 80019f2:	f001 f8cb 	bl	8002b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_Reset_GPIO_Port, LCD_Reset_Pin, GPIO_PIN_RESET);
 80019f6:	2200      	movs	r2, #0
 80019f8:	2104      	movs	r1, #4
 80019fa:	4858      	ldr	r0, [pc, #352]	; (8001b5c <MX_GPIO_Init+0x22c>)
 80019fc:	f001 f8c6 	bl	8002b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : New_Button18_Pin */
  GPIO_InitStruct.Pin = New_Button18_Pin;
 8001a00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(New_Button18_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	f107 0314 	add.w	r3, r7, #20
 8001a12:	4619      	mov	r1, r3
 8001a14:	4850      	ldr	r0, [pc, #320]	; (8001b58 <MX_GPIO_Init+0x228>)
 8001a16:	f000 ff1d 	bl	8002854 <HAL_GPIO_Init>

  /*Configure GPIO pins : Debug_LED_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = Debug_LED_Pin|LCD_CS_Pin;
 8001a1a:	f248 0302 	movw	r3, #32770	; 0x8002
 8001a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a20:	2301      	movs	r3, #1
 8001a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	4619      	mov	r1, r3
 8001a32:	4847      	ldr	r0, [pc, #284]	; (8001b50 <MX_GPIO_Init+0x220>)
 8001a34:	f000 ff0e 	bl	8002854 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_EN_Pin */
  GPIO_InitStruct.Pin = BT_EN_Pin;
 8001a38:	2340      	movs	r3, #64	; 0x40
 8001a3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001a3c:	2311      	movs	r3, #17
 8001a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a44:	2300      	movs	r3, #0
 8001a46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BT_EN_GPIO_Port, &GPIO_InitStruct);
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4840      	ldr	r0, [pc, #256]	; (8001b50 <MX_GPIO_Init+0x220>)
 8001a50:	f000 ff00 	bl	8002854 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_Detect_Pin */
  GPIO_InitStruct.Pin = USB_Detect_Pin;
 8001a54:	2320      	movs	r3, #32
 8001a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001a58:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_Detect_GPIO_Port, &GPIO_InitStruct);
 8001a62:	f107 0314 	add.w	r3, r7, #20
 8001a66:	4619      	mov	r1, r3
 8001a68:	483b      	ldr	r0, [pc, #236]	; (8001b58 <MX_GPIO_Init+0x228>)
 8001a6a:	f000 fef3 	bl	8002854 <HAL_GPIO_Init>

  /*Configure GPIO pins : Col0_Pin Col1_Pin Col2_Pin Col3_Pin */
  GPIO_InitStruct.Pin = Col0_Pin|Col1_Pin|Col2_Pin|Col3_Pin;
 8001a6e:	230f      	movs	r3, #15
 8001a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a72:	2301      	movs	r3, #1
 8001a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7e:	f107 0314 	add.w	r3, r7, #20
 8001a82:	4619      	mov	r1, r3
 8001a84:	4833      	ldr	r0, [pc, #204]	; (8001b54 <MX_GPIO_Init+0x224>)
 8001a86:	f000 fee5 	bl	8002854 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8001a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a94:	2301      	movs	r3, #1
 8001a96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	482d      	ldr	r0, [pc, #180]	; (8001b54 <MX_GPIO_Init+0x224>)
 8001aa0:	f000 fed8 	bl	8002854 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001ab6:	f107 0314 	add.w	r3, r7, #20
 8001aba:	4619      	mov	r1, r3
 8001abc:	4825      	ldr	r0, [pc, #148]	; (8001b54 <MX_GPIO_Init+0x224>)
 8001abe:	f000 fec9 	bl	8002854 <HAL_GPIO_Init>

  /*Configure GPIO pins : BAT_CE_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = BAT_CE_Pin|LCD_DC_Pin;
 8001ac2:	f44f 6308 	mov.w	r3, #2176	; 0x880
 8001ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	4619      	mov	r1, r3
 8001ada:	481f      	ldr	r0, [pc, #124]	; (8001b58 <MX_GPIO_Init+0x228>)
 8001adc:	f000 feba 	bl	8002854 <HAL_GPIO_Init>

  /*Configure GPIO pin : BAT_GPOUT_Pin */
  GPIO_InitStruct.Pin = BAT_GPOUT_Pin;
 8001ae0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ae6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BAT_GPOUT_GPIO_Port, &GPIO_InitStruct);
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	4619      	mov	r1, r3
 8001af6:	4818      	ldr	r0, [pc, #96]	; (8001b58 <MX_GPIO_Init+0x228>)
 8001af8:	f000 feac 	bl	8002854 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_Reset_Pin */
  GPIO_InitStruct.Pin = LCD_Reset_Pin;
 8001afc:	2304      	movs	r3, #4
 8001afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b00:	2301      	movs	r3, #1
 8001b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_Reset_GPIO_Port, &GPIO_InitStruct);
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	4619      	mov	r1, r3
 8001b12:	4812      	ldr	r0, [pc, #72]	; (8001b5c <MX_GPIO_Init+0x22c>)
 8001b14:	f000 fe9e 	bl	8002854 <HAL_GPIO_Init>

  /*Configure GPIO pins : Row0_Pin Row1_Pin Row2_Pin Row3_Pin
                           Button17_Pin Button18_Pin */
  GPIO_InitStruct.Pin = Row0_Pin|Row1_Pin|Row2_Pin|Row3_Pin
 8001b18:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8001b1c:	617b      	str	r3, [r7, #20]
                          |Button17_Pin|Button18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b22:	2302      	movs	r3, #2
 8001b24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4809      	ldr	r0, [pc, #36]	; (8001b54 <MX_GPIO_Init+0x224>)
 8001b2e:	f000 fe91 	bl	8002854 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2100      	movs	r1, #0
 8001b36:	2017      	movs	r0, #23
 8001b38:	f000 fe51 	bl	80027de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b3c:	2017      	movs	r0, #23
 8001b3e:	f000 fe6a 	bl	8002816 <HAL_NVIC_EnableIRQ>

}
 8001b42:	bf00      	nop
 8001b44:	3728      	adds	r7, #40	; 0x28
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40020000 	.word	0x40020000
 8001b54:	40020400 	.word	0x40020400
 8001b58:	40020800 	.word	0x40020800
 8001b5c:	40020c00 	.word	0x40020c00

08001b60 <dispBat>:

/* USER CODE BEGIN 4 */
void dispBat(void) {
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af04      	add	r7, sp, #16
	snprintf(buff, sizeof(buff), "%d", charge);
 8001b66:	4b27      	ldr	r3, [pc, #156]	; (8001c04 <dispBat+0xa4>)
 8001b68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b6c:	4a26      	ldr	r2, [pc, #152]	; (8001c08 <dispBat+0xa8>)
 8001b6e:	2140      	movs	r1, #64	; 0x40
 8001b70:	4826      	ldr	r0, [pc, #152]	; (8001c0c <dispBat+0xac>)
 8001b72:	f00c fd6f 	bl	800e654 <sniprintf>
//	printf("charge: %d", charge);
	if (bat_charging){
 8001b76:	4b26      	ldr	r3, [pc, #152]	; (8001c10 <dispBat+0xb0>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d013      	beq.n	8001ba6 <dispBat+0x46>
		displayImage(BATTERY_CHARGE, BATTERY_X, BATTERY_Y);
 8001b7e:	2228      	movs	r2, #40	; 0x28
 8001b80:	21d2      	movs	r1, #210	; 0xd2
 8001b82:	4824      	ldr	r0, [pc, #144]	; (8001c14 <dispBat+0xb4>)
 8001b84:	f7ff f86e 	bl	8000c64 <displayImage>
		ILI9341_WriteString(PERCENT_X, PERCENT_Y, buff, Font_16x26, ILI9341_GREEN, ILI9341_BLACK);
 8001b88:	4b23      	ldr	r3, [pc, #140]	; (8001c18 <dispBat+0xb8>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	9202      	str	r2, [sp, #8]
 8001b8e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001b92:	9201      	str	r2, [sp, #4]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	9200      	str	r2, [sp, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a1c      	ldr	r2, [pc, #112]	; (8001c0c <dispBat+0xac>)
 8001b9c:	212f      	movs	r1, #47	; 0x2f
 8001b9e:	20e1      	movs	r0, #225	; 0xe1
 8001ba0:	f7fe ff80 	bl	8000aa4 <ILI9341_WriteString>
		else {
			displayImage(BATTERY_LOW, BATTERY_X, BATTERY_Y);
			ILI9341_WriteString(PERCENT_X, PERCENT_Y, buff, Font_16x26, ILI9341_RED, ILI9341_BLACK);
		}
	}
}
 8001ba4:	e02b      	b.n	8001bfe <dispBat+0x9e>
		if (charge >= 25) {
 8001ba6:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <dispBat+0xa4>)
 8001ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bac:	2b18      	cmp	r3, #24
 8001bae:	dd13      	ble.n	8001bd8 <dispBat+0x78>
			displayImage(BATTERY_NORM, BATTERY_X, BATTERY_Y);
 8001bb0:	2228      	movs	r2, #40	; 0x28
 8001bb2:	21d2      	movs	r1, #210	; 0xd2
 8001bb4:	4819      	ldr	r0, [pc, #100]	; (8001c1c <dispBat+0xbc>)
 8001bb6:	f7ff f855 	bl	8000c64 <displayImage>
			ILI9341_WriteString(PERCENT_X, PERCENT_Y, buff, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 8001bba:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <dispBat+0xb8>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	9202      	str	r2, [sp, #8]
 8001bc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bc4:	9201      	str	r2, [sp, #4]
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	9200      	str	r2, [sp, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a0f      	ldr	r2, [pc, #60]	; (8001c0c <dispBat+0xac>)
 8001bce:	212f      	movs	r1, #47	; 0x2f
 8001bd0:	20e1      	movs	r0, #225	; 0xe1
 8001bd2:	f7fe ff67 	bl	8000aa4 <ILI9341_WriteString>
}
 8001bd6:	e012      	b.n	8001bfe <dispBat+0x9e>
			displayImage(BATTERY_LOW, BATTERY_X, BATTERY_Y);
 8001bd8:	2228      	movs	r2, #40	; 0x28
 8001bda:	21d2      	movs	r1, #210	; 0xd2
 8001bdc:	4810      	ldr	r0, [pc, #64]	; (8001c20 <dispBat+0xc0>)
 8001bde:	f7ff f841 	bl	8000c64 <displayImage>
			ILI9341_WriteString(PERCENT_X, PERCENT_Y, buff, Font_16x26, ILI9341_RED, ILI9341_BLACK);
 8001be2:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <dispBat+0xb8>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	9202      	str	r2, [sp, #8]
 8001be8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001bec:	9201      	str	r2, [sp, #4]
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	9200      	str	r2, [sp, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a05      	ldr	r2, [pc, #20]	; (8001c0c <dispBat+0xac>)
 8001bf6:	212f      	movs	r1, #47	; 0x2f
 8001bf8:	20e1      	movs	r0, #225	; 0xe1
 8001bfa:	f7fe ff53 	bl	8000aa4 <ILI9341_WriteString>
}
 8001bfe:	bf00      	nop
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000874 	.word	0x20000874
 8001c08:	0800fb88 	.word	0x0800fb88
 8001c0c:	200003cc 	.word	0x200003cc
 8001c10:	20000870 	.word	0x20000870
 8001c14:	0800fb8c 	.word	0x0800fb8c
 8001c18:	20000008 	.word	0x20000008
 8001c1c:	0800fb98 	.word	0x0800fb98
 8001c20:	0800fba4 	.word	0x0800fba4

08001c24 <drive_column>:
void buttons_init(void) {
	  GPIOB->BSRR = 0xf << 16;
	  GPIOB->BSRR = 0x1;
}

void drive_column(void) {
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
	col = (col + 1) & 0x3;
 8001c28:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <drive_column+0x30>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	4a08      	ldr	r2, [pc, #32]	; (8001c54 <drive_column+0x30>)
 8001c34:	6013      	str	r3, [r2, #0]
	GPIOB->BSRR = 0xf << 16;
 8001c36:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <drive_column+0x34>)
 8001c38:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8001c3c:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR = 0x1 << (col);
 8001c3e:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <drive_column+0x30>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2201      	movs	r2, #1
 8001c44:	409a      	lsls	r2, r3
 8001c46:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <drive_column+0x34>)
 8001c48:	619a      	str	r2, [r3, #24]
}
 8001c4a:	bf00      	nop
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	20000878 	.word	0x20000878
 8001c58:	40020400 	.word	0x40020400

08001c5c <read_rows>:

uint8_t read_rows(void) {
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
	return ((GPIOB->IDR & 0xf0) >> 4) & 0xf;
 8001c60:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <read_rows+0x1c>)
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	091b      	lsrs	r3, r3, #4
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	f003 030f 	and.w	r3, r3, #15
 8001c6c:	b2db      	uxtb	r3, r3
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	40020400 	.word	0x40020400

08001c7c <clean_buffer>:

void clean_buffer(void) {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
	if (((buffer[2] & 0x3) == 0x3) && ((buffer[1] & 0x08) == 0x08)) {
 8001c80:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <clean_buffer+0x44>)
 8001c82:	789b      	ldrb	r3, [r3, #2]
 8001c84:	f003 0303 	and.w	r3, r3, #3
 8001c88:	2b03      	cmp	r3, #3
 8001c8a:	d107      	bne.n	8001c9c <clean_buffer+0x20>
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <clean_buffer+0x44>)
 8001c8e:	785b      	ldrb	r3, [r3, #1]
 8001c90:	f003 0308 	and.w	r3, r3, #8
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <clean_buffer+0x20>
		HAL_NVIC_SystemReset();
 8001c98:	f000 fdcb 	bl	8002832 <HAL_NVIC_SystemReset>
	}
	cleaned_buffer[0] = buffer[0];
 8001c9c:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <clean_buffer+0x44>)
 8001c9e:	781a      	ldrb	r2, [r3, #0]
 8001ca0:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <clean_buffer+0x48>)
 8001ca2:	701a      	strb	r2, [r3, #0]
	cleaned_buffer[1] = buffer[1];
 8001ca4:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <clean_buffer+0x44>)
 8001ca6:	785a      	ldrb	r2, [r3, #1]
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <clean_buffer+0x48>)
 8001caa:	705a      	strb	r2, [r3, #1]
	cleaned_buffer[2] = buffer[2] & 0x01;
 8001cac:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <clean_buffer+0x44>)
 8001cae:	789b      	ldrb	r3, [r3, #2]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	4b03      	ldr	r3, [pc, #12]	; (8001cc4 <clean_buffer+0x48>)
 8001cb8:	709a      	strb	r2, [r3, #2]
//	}
//	if (cleaned_buffer[0] & 0x02 && cleaned_buffer[0] & 0x08) {
//		cleaned_buffer[0] &= ~0x0A;
//	}
//	printf("cleaned: %X\r\n", cleaned_buffer[0]);
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	2000087c 	.word	0x2000087c
 8001cc4:	20000880 	.word	0x20000880

08001cc8 <right_stick_emulate>:

void right_stick_emulate(void) {
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
	if (buffer[2] & 0x02) {
 8001ccc:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <right_stick_emulate+0x48>)
 8001cce:	789b      	ldrb	r3, [r3, #2]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d015      	beq.n	8001d04 <right_stick_emulate+0x3c>
//		cleaned_buffer[2] &= ~0x02;
//		printf("cleaning %X, ", cleaned_buffer[2]);
//		printf("[0], %X\r\n", cleaned_buffer[0] & 0x0f);
		cleaned_buffer[2] |= ((cleaned_buffer[0] & 0x0f) << 1);
 8001cd8:	4b0e      	ldr	r3, [pc, #56]	; (8001d14 <right_stick_emulate+0x4c>)
 8001cda:	789b      	ldrb	r3, [r3, #2]
 8001cdc:	b25a      	sxtb	r2, r3
 8001cde:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <right_stick_emulate+0x4c>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	b25b      	sxtb	r3, r3
 8001ce6:	f003 031e 	and.w	r3, r3, #30
 8001cea:	b25b      	sxtb	r3, r3
 8001cec:	4313      	orrs	r3, r2
 8001cee:	b25b      	sxtb	r3, r3
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <right_stick_emulate+0x4c>)
 8001cf4:	709a      	strb	r2, [r3, #2]
//		printf("cleaned %X\r\n", cleaned_buffer[2]);
		cleaned_buffer[0] &= ~0x0f;
 8001cf6:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <right_stick_emulate+0x4c>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	f023 030f 	bic.w	r3, r3, #15
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	4b04      	ldr	r3, [pc, #16]	; (8001d14 <right_stick_emulate+0x4c>)
 8001d02:	701a      	strb	r2, [r3, #0]
//		cleaned_buffer[1] &= ~0x70;
	}
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	2000087c 	.word	0x2000087c
 8001d14:	20000880 	.word	0x20000880

08001d18 <clean_buffer_bt>:

void clean_buffer_bt(void) {
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
	bluetooth_buffer[1] = cleaned_buffer[0];
 8001d1c:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <clean_buffer_bt+0x28>)
 8001d1e:	781a      	ldrb	r2, [r3, #0]
 8001d20:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <clean_buffer_bt+0x2c>)
 8001d22:	705a      	strb	r2, [r3, #1]
	bluetooth_buffer[2] = cleaned_buffer[1];
 8001d24:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <clean_buffer_bt+0x28>)
 8001d26:	785a      	ldrb	r2, [r3, #1]
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <clean_buffer_bt+0x2c>)
 8001d2a:	709a      	strb	r2, [r3, #2]
	bluetooth_buffer[3] = cleaned_buffer[2];
 8001d2c:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <clean_buffer_bt+0x28>)
 8001d2e:	789a      	ldrb	r2, [r3, #2]
 8001d30:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <clean_buffer_bt+0x2c>)
 8001d32:	70da      	strb	r2, [r3, #3]
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	20000880 	.word	0x20000880
 8001d44:	2000001c 	.word	0x2000001c

08001d48 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001d48:	b590      	push	{r4, r7, lr}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a3a      	ldr	r2, [pc, #232]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d152      	bne.n	8001dfe <HAL_TIM_PeriodElapsedCallback+0xb6>
		uint8_t rows = read_rows();
 8001d58:	f7ff ff80 	bl	8001c5c <read_rows>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	73fb      	strb	r3, [r7, #15]
		int idx = col / 2;
 8001d60:	4b37      	ldr	r3, [pc, #220]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	0fda      	lsrs	r2, r3, #31
 8001d66:	4413      	add	r3, r2
 8001d68:	105b      	asrs	r3, r3, #1
 8001d6a:	60bb      	str	r3, [r7, #8]
		buffer[idx] &= ~(0xf << ((col % 2) * 4));
 8001d6c:	4b34      	ldr	r3, [pc, #208]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	bfb8      	it	lt
 8001d78:	425b      	neglt	r3, r3
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	220f      	movs	r2, #15
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43d9      	mvns	r1, r3
 8001d84:	4a2f      	ldr	r2, [pc, #188]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	4413      	add	r3, r2
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	b25a      	sxtb	r2, r3
 8001d8e:	b24b      	sxtb	r3, r1
 8001d90:	4013      	ands	r3, r2
 8001d92:	b25b      	sxtb	r3, r3
 8001d94:	b2d9      	uxtb	r1, r3
 8001d96:	4a2b      	ldr	r2, [pc, #172]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	460a      	mov	r2, r1
 8001d9e:	701a      	strb	r2, [r3, #0]
		buffer[idx] |= rows << ((col % 2) * 4);
 8001da0:	7bfa      	ldrb	r2, [r7, #15]
 8001da2:	4b27      	ldr	r3, [pc, #156]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	bfb8      	it	lt
 8001dae:	425b      	neglt	r3, r3
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	fa02 f103 	lsl.w	r1, r2, r3
 8001db6:	4a23      	ldr	r2, [pc, #140]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	4413      	add	r3, r2
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	b25a      	sxtb	r2, r3
 8001dc0:	b24b      	sxtb	r3, r1
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	b25b      	sxtb	r3, r3
 8001dc6:	b2d9      	uxtb	r1, r3
 8001dc8:	4a1e      	ldr	r2, [pc, #120]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	4413      	add	r3, r2
 8001dce:	460a      	mov	r2, r1
 8001dd0:	701a      	strb	r2, [r3, #0]
		drive_column();
 8001dd2:	f7ff ff27 	bl	8001c24 <drive_column>
		buffer[2] = HAL_GPIO_ReadPin(Button17_GPIO_Port, Button17_Pin) | HAL_GPIO_ReadPin(Button18_GPIO_Port, Button18_Pin) << 1;
 8001dd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dda:	481b      	ldr	r0, [pc, #108]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001ddc:	f000 febe 	bl	8002b5c <HAL_GPIO_ReadPin>
 8001de0:	4603      	mov	r3, r0
 8001de2:	b25c      	sxtb	r4, r3
 8001de4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001de8:	4817      	ldr	r0, [pc, #92]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001dea:	f000 feb7 	bl	8002b5c <HAL_GPIO_ReadPin>
 8001dee:	4603      	mov	r3, r0
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	b25b      	sxtb	r3, r3
 8001df4:	4323      	orrs	r3, r4
 8001df6:	b25b      	sxtb	r3, r3
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001dfc:	709a      	strb	r2, [r3, #2]
	}

	if (htim == &htim3) {
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a12      	ldr	r2, [pc, #72]	; (8001e4c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d115      	bne.n	8001e32 <HAL_TIM_PeriodElapsedCallback+0xea>
//		printf("buffer: %X, %X, %X\r\n", buffer[2], buffer[1], buffer[0]);
		clean_buffer();
 8001e06:	f7ff ff39 	bl	8001c7c <clean_buffer>
		right_stick_emulate();
 8001e0a:	f7ff ff5d 	bl	8001cc8 <right_stick_emulate>
		if (bluetooth_mode) {
 8001e0e:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d008      	beq.n	8001e28 <HAL_TIM_PeriodElapsedCallback+0xe0>
			clean_buffer_bt();
 8001e16:	f7ff ff7f 	bl	8001d18 <clean_buffer_bt>
			HAL_UART_Transmit(&huart2, bluetooth_buffer, sizeof(bluetooth_buffer), 100);
 8001e1a:	2364      	movs	r3, #100	; 0x64
 8001e1c:	2204      	movs	r2, #4
 8001e1e:	490d      	ldr	r1, [pc, #52]	; (8001e54 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001e20:	480d      	ldr	r0, [pc, #52]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001e22:	f005 f95a 	bl	80070da <HAL_UART_Transmit>
		}
		else {
			USBD_HID_SendReport(&hUsbDeviceFS, cleaned_buffer, sizeof(cleaned_buffer));
		}
	}
}
 8001e26:	e004      	b.n	8001e32 <HAL_TIM_PeriodElapsedCallback+0xea>
			USBD_HID_SendReport(&hUsbDeviceFS, cleaned_buffer, sizeof(cleaned_buffer));
 8001e28:	2203      	movs	r2, #3
 8001e2a:	490c      	ldr	r1, [pc, #48]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001e2c:	480c      	ldr	r0, [pc, #48]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001e2e:	f008 f81b 	bl	8009e68 <USBD_HID_SendReport>
}
 8001e32:	bf00      	nop
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd90      	pop	{r4, r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200002b0 	.word	0x200002b0
 8001e40:	20000878 	.word	0x20000878
 8001e44:	2000087c 	.word	0x2000087c
 8001e48:	40020400 	.word	0x40020400
 8001e4c:	200002f8 	.word	0x200002f8
 8001e50:	200003c8 	.word	0x200003c8
 8001e54:	2000001c 	.word	0x2000001c
 8001e58:	20000384 	.word	0x20000384
 8001e5c:	20000880 	.word	0x20000880
 8001e60:	200008d8 	.word	0x200008d8

08001e64 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	80fb      	strh	r3, [r7, #6]
	 if ((GPIO_Pin == BAT_GPOUT_Pin)) {
 8001e6e:	88fb      	ldrh	r3, [r7, #6]
 8001e70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e74:	d106      	bne.n	8001e84 <HAL_GPIO_EXTI_Callback+0x20>
		 check_charging();
 8001e76:	f7ff f95d 	bl	8001134 <check_charging>
		 updateBat();
 8001e7a:	f7ff f9a7 	bl	80011cc <updateBat>
		 dispBat();
 8001e7e:	f7ff fe6f 	bl	8001b60 <dispBat>
		 startup_init();
	 }
	 else {
		 __NOP();
	 }
}
 8001e82:	e006      	b.n	8001e92 <HAL_GPIO_EXTI_Callback+0x2e>
	 else if ((GPIO_Pin == USB_Detect_Pin)) {
 8001e84:	88fb      	ldrh	r3, [r7, #6]
 8001e86:	2b20      	cmp	r3, #32
 8001e88:	d102      	bne.n	8001e90 <HAL_GPIO_EXTI_Callback+0x2c>
		 startup_init();
 8001e8a:	f7ff f9cd 	bl	8001228 <startup_init>
}
 8001e8e:	e000      	b.n	8001e92 <HAL_GPIO_EXTI_Callback+0x2e>
		 __NOP();
 8001e90:	bf00      	nop
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e9e:	b672      	cpsid	i
}
 8001ea0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ea2:	e7fe      	b.n	8001ea2 <Error_Handler+0x8>

08001ea4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	607b      	str	r3, [r7, #4]
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <HAL_MspInit+0x4c>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	4a0f      	ldr	r2, [pc, #60]	; (8001ef0 <HAL_MspInit+0x4c>)
 8001eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eba:	4b0d      	ldr	r3, [pc, #52]	; (8001ef0 <HAL_MspInit+0x4c>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ec2:	607b      	str	r3, [r7, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	603b      	str	r3, [r7, #0]
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <HAL_MspInit+0x4c>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	4a08      	ldr	r2, [pc, #32]	; (8001ef0 <HAL_MspInit+0x4c>)
 8001ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_MspInit+0x4c>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ede:	603b      	str	r3, [r7, #0]
 8001ee0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ee2:	2007      	movs	r0, #7
 8001ee4:	f000 fc70 	bl	80027c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ee8:	bf00      	nop
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40023800 	.word	0x40023800

08001ef4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08a      	sub	sp, #40	; 0x28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a29      	ldr	r2, [pc, #164]	; (8001fb8 <HAL_I2C_MspInit+0xc4>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d14b      	bne.n	8001fae <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	4b28      	ldr	r3, [pc, #160]	; (8001fbc <HAL_I2C_MspInit+0xc8>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	4a27      	ldr	r2, [pc, #156]	; (8001fbc <HAL_I2C_MspInit+0xc8>)
 8001f20:	f043 0304 	orr.w	r3, r3, #4
 8001f24:	6313      	str	r3, [r2, #48]	; 0x30
 8001f26:	4b25      	ldr	r3, [pc, #148]	; (8001fbc <HAL_I2C_MspInit+0xc8>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f003 0304 	and.w	r3, r3, #4
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <HAL_I2C_MspInit+0xc8>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4a20      	ldr	r2, [pc, #128]	; (8001fbc <HAL_I2C_MspInit+0xc8>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
 8001f42:	4b1e      	ldr	r3, [pc, #120]	; (8001fbc <HAL_I2C_MspInit+0xc8>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = BAT_SDA_Pin;
 8001f4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f54:	2312      	movs	r3, #18
 8001f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f60:	2304      	movs	r3, #4
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BAT_SDA_GPIO_Port, &GPIO_InitStruct);
 8001f64:	f107 0314 	add.w	r3, r7, #20
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4815      	ldr	r0, [pc, #84]	; (8001fc0 <HAL_I2C_MspInit+0xcc>)
 8001f6c:	f000 fc72 	bl	8002854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BAT_SCL_Pin;
 8001f70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f76:	2312      	movs	r3, #18
 8001f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f82:	2304      	movs	r3, #4
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BAT_SCL_GPIO_Port, &GPIO_InitStruct);
 8001f86:	f107 0314 	add.w	r3, r7, #20
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	480d      	ldr	r0, [pc, #52]	; (8001fc4 <HAL_I2C_MspInit+0xd0>)
 8001f8e:	f000 fc61 	bl	8002854 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <HAL_I2C_MspInit+0xc8>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	4a08      	ldr	r2, [pc, #32]	; (8001fbc <HAL_I2C_MspInit+0xc8>)
 8001f9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <HAL_I2C_MspInit+0xc8>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001fae:	bf00      	nop
 8001fb0:	3728      	adds	r7, #40	; 0x28
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40005c00 	.word	0x40005c00
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	40020800 	.word	0x40020800
 8001fc4:	40020000 	.word	0x40020000

08001fc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08c      	sub	sp, #48	; 0x30
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd0:	f107 031c 	add.w	r3, r7, #28
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a3b      	ldr	r2, [pc, #236]	; (80020d4 <HAL_SPI_MspInit+0x10c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d13e      	bne.n	8002068 <HAL_SPI_MspInit+0xa0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	61bb      	str	r3, [r7, #24]
 8001fee:	4b3a      	ldr	r3, [pc, #232]	; (80020d8 <HAL_SPI_MspInit+0x110>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	4a39      	ldr	r2, [pc, #228]	; (80020d8 <HAL_SPI_MspInit+0x110>)
 8001ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8001ffa:	4b37      	ldr	r3, [pc, #220]	; (80020d8 <HAL_SPI_MspInit+0x110>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002002:	61bb      	str	r3, [r7, #24]
 8002004:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	4b33      	ldr	r3, [pc, #204]	; (80020d8 <HAL_SPI_MspInit+0x110>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	4a32      	ldr	r2, [pc, #200]	; (80020d8 <HAL_SPI_MspInit+0x110>)
 8002010:	f043 0302 	orr.w	r3, r3, #2
 8002014:	6313      	str	r3, [r2, #48]	; 0x30
 8002016:	4b30      	ldr	r3, [pc, #192]	; (80020d8 <HAL_SPI_MspInit+0x110>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin;
 8002022:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002028:	2302      	movs	r3, #2
 800202a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202c:	2300      	movs	r3, #0
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002030:	2303      	movs	r3, #3
 8002032:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002034:	2305      	movs	r3, #5
 8002036:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SD_SCK_GPIO_Port, &GPIO_InitStruct);
 8002038:	f107 031c 	add.w	r3, r7, #28
 800203c:	4619      	mov	r1, r3
 800203e:	4827      	ldr	r0, [pc, #156]	; (80020dc <HAL_SPI_MspInit+0x114>)
 8002040:	f000 fc08 	bl	8002854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_MISO_Pin|SD_MOSI_Pin;
 8002044:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204a:	2302      	movs	r3, #2
 800204c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800204e:	2301      	movs	r3, #1
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002052:	2303      	movs	r3, #3
 8002054:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002056:	2305      	movs	r3, #5
 8002058:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800205a:	f107 031c 	add.w	r3, r7, #28
 800205e:	4619      	mov	r1, r3
 8002060:	481e      	ldr	r0, [pc, #120]	; (80020dc <HAL_SPI_MspInit+0x114>)
 8002062:	f000 fbf7 	bl	8002854 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002066:	e031      	b.n	80020cc <HAL_SPI_MspInit+0x104>
  else if(hspi->Instance==SPI3)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a1c      	ldr	r2, [pc, #112]	; (80020e0 <HAL_SPI_MspInit+0x118>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d12c      	bne.n	80020cc <HAL_SPI_MspInit+0x104>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <HAL_SPI_MspInit+0x110>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	4a17      	ldr	r2, [pc, #92]	; (80020d8 <HAL_SPI_MspInit+0x110>)
 800207c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002080:	6413      	str	r3, [r2, #64]	; 0x40
 8002082:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <HAL_SPI_MspInit+0x110>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <HAL_SPI_MspInit+0x110>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4a10      	ldr	r2, [pc, #64]	; (80020d8 <HAL_SPI_MspInit+0x110>)
 8002098:	f043 0304 	orr.w	r3, r3, #4
 800209c:	6313      	str	r3, [r2, #48]	; 0x30
 800209e:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <HAL_SPI_MspInit+0x110>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 80020aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80020ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b0:	2302      	movs	r3, #2
 80020b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b8:	2303      	movs	r3, #3
 80020ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80020bc:	2306      	movs	r3, #6
 80020be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020c0:	f107 031c 	add.w	r3, r7, #28
 80020c4:	4619      	mov	r1, r3
 80020c6:	4807      	ldr	r0, [pc, #28]	; (80020e4 <HAL_SPI_MspInit+0x11c>)
 80020c8:	f000 fbc4 	bl	8002854 <HAL_GPIO_Init>
}
 80020cc:	bf00      	nop
 80020ce:	3730      	adds	r7, #48	; 0x30
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40003800 	.word	0x40003800
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40020400 	.word	0x40020400
 80020e0:	40003c00 	.word	0x40003c00
 80020e4:	40020800 	.word	0x40020800

080020e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f8:	d116      	bne.n	8002128 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	4b1a      	ldr	r3, [pc, #104]	; (8002168 <HAL_TIM_Base_MspInit+0x80>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	4a19      	ldr	r2, [pc, #100]	; (8002168 <HAL_TIM_Base_MspInit+0x80>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	6413      	str	r3, [r2, #64]	; 0x40
 800210a:	4b17      	ldr	r3, [pc, #92]	; (8002168 <HAL_TIM_Base_MspInit+0x80>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002116:	2200      	movs	r2, #0
 8002118:	2100      	movs	r1, #0
 800211a:	201c      	movs	r0, #28
 800211c:	f000 fb5f 	bl	80027de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002120:	201c      	movs	r0, #28
 8002122:	f000 fb78 	bl	8002816 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002126:	e01a      	b.n	800215e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a0f      	ldr	r2, [pc, #60]	; (800216c <HAL_TIM_Base_MspInit+0x84>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d115      	bne.n	800215e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <HAL_TIM_Base_MspInit+0x80>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	4a0b      	ldr	r2, [pc, #44]	; (8002168 <HAL_TIM_Base_MspInit+0x80>)
 800213c:	f043 0302 	orr.w	r3, r3, #2
 8002140:	6413      	str	r3, [r2, #64]	; 0x40
 8002142:	4b09      	ldr	r3, [pc, #36]	; (8002168 <HAL_TIM_Base_MspInit+0x80>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	60bb      	str	r3, [r7, #8]
 800214c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800214e:	2200      	movs	r2, #0
 8002150:	2100      	movs	r1, #0
 8002152:	201d      	movs	r0, #29
 8002154:	f000 fb43 	bl	80027de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002158:	201d      	movs	r0, #29
 800215a:	f000 fb5c 	bl	8002816 <HAL_NVIC_EnableIRQ>
}
 800215e:	bf00      	nop
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40023800 	.word	0x40023800
 800216c:	40000400 	.word	0x40000400

08002170 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08c      	sub	sp, #48	; 0x30
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002178:	f107 031c 	add.w	r3, r7, #28
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a32      	ldr	r2, [pc, #200]	; (8002258 <HAL_UART_MspInit+0xe8>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d12d      	bne.n	80021ee <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	61bb      	str	r3, [r7, #24]
 8002196:	4b31      	ldr	r3, [pc, #196]	; (800225c <HAL_UART_MspInit+0xec>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219a:	4a30      	ldr	r2, [pc, #192]	; (800225c <HAL_UART_MspInit+0xec>)
 800219c:	f043 0310 	orr.w	r3, r3, #16
 80021a0:	6453      	str	r3, [r2, #68]	; 0x44
 80021a2:	4b2e      	ldr	r3, [pc, #184]	; (800225c <HAL_UART_MspInit+0xec>)
 80021a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a6:	f003 0310 	and.w	r3, r3, #16
 80021aa:	61bb      	str	r3, [r7, #24]
 80021ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	4b2a      	ldr	r3, [pc, #168]	; (800225c <HAL_UART_MspInit+0xec>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	4a29      	ldr	r2, [pc, #164]	; (800225c <HAL_UART_MspInit+0xec>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6313      	str	r3, [r2, #48]	; 0x30
 80021be:	4b27      	ldr	r3, [pc, #156]	; (800225c <HAL_UART_MspInit+0xec>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80021ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80021ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d0:	2302      	movs	r3, #2
 80021d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d8:	2303      	movs	r3, #3
 80021da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021dc:	2307      	movs	r3, #7
 80021de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e0:	f107 031c 	add.w	r3, r7, #28
 80021e4:	4619      	mov	r1, r3
 80021e6:	481e      	ldr	r0, [pc, #120]	; (8002260 <HAL_UART_MspInit+0xf0>)
 80021e8:	f000 fb34 	bl	8002854 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021ec:	e030      	b.n	8002250 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a1c      	ldr	r2, [pc, #112]	; (8002264 <HAL_UART_MspInit+0xf4>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d12b      	bne.n	8002250 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80021f8:	2300      	movs	r3, #0
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	4b17      	ldr	r3, [pc, #92]	; (800225c <HAL_UART_MspInit+0xec>)
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	4a16      	ldr	r2, [pc, #88]	; (800225c <HAL_UART_MspInit+0xec>)
 8002202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002206:	6413      	str	r3, [r2, #64]	; 0x40
 8002208:	4b14      	ldr	r3, [pc, #80]	; (800225c <HAL_UART_MspInit+0xec>)
 800220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002214:	2300      	movs	r3, #0
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	4b10      	ldr	r3, [pc, #64]	; (800225c <HAL_UART_MspInit+0xec>)
 800221a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221c:	4a0f      	ldr	r2, [pc, #60]	; (800225c <HAL_UART_MspInit+0xec>)
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	6313      	str	r3, [r2, #48]	; 0x30
 8002224:	4b0d      	ldr	r3, [pc, #52]	; (800225c <HAL_UART_MspInit+0xec>)
 8002226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002230:	230c      	movs	r3, #12
 8002232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002234:	2302      	movs	r3, #2
 8002236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800223c:	2303      	movs	r3, #3
 800223e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002240:	2307      	movs	r3, #7
 8002242:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002244:	f107 031c 	add.w	r3, r7, #28
 8002248:	4619      	mov	r1, r3
 800224a:	4805      	ldr	r0, [pc, #20]	; (8002260 <HAL_UART_MspInit+0xf0>)
 800224c:	f000 fb02 	bl	8002854 <HAL_GPIO_Init>
}
 8002250:	bf00      	nop
 8002252:	3730      	adds	r7, #48	; 0x30
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40011000 	.word	0x40011000
 800225c:	40023800 	.word	0x40023800
 8002260:	40020000 	.word	0x40020000
 8002264:	40004400 	.word	0x40004400

08002268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800226c:	e7fe      	b.n	800226c <NMI_Handler+0x4>

0800226e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800226e:	b480      	push	{r7}
 8002270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002272:	e7fe      	b.n	8002272 <HardFault_Handler+0x4>

08002274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002278:	e7fe      	b.n	8002278 <MemManage_Handler+0x4>

0800227a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800227a:	b480      	push	{r7}
 800227c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800227e:	e7fe      	b.n	800227e <BusFault_Handler+0x4>

08002280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002284:	e7fe      	b.n	8002284 <UsageFault_Handler+0x4>

08002286 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002286:	b480      	push	{r7}
 8002288:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022a2:	b480      	push	{r7}
 80022a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022a6:	bf00      	nop
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022b4:	f000 f95e 	bl	8002574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022b8:	bf00      	nop
 80022ba:	bd80      	pop	{r7, pc}

080022bc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_Detect_Pin);
 80022c0:	2020      	movs	r0, #32
 80022c2:	f000 fc7d 	bl	8002bc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BAT_GPOUT_Pin);
 80022c6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80022ca:	f000 fc79 	bl	8002bc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022d8:	4802      	ldr	r0, [pc, #8]	; (80022e4 <TIM2_IRQHandler+0x10>)
 80022da:	f004 fb1d 	bl	8006918 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	200002b0 	.word	0x200002b0

080022e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80022ec:	4802      	ldr	r0, [pc, #8]	; (80022f8 <TIM3_IRQHandler+0x10>)
 80022ee:	f004 fb13 	bl	8006918 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	200002f8 	.word	0x200002f8

080022fc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002300:	4802      	ldr	r0, [pc, #8]	; (800230c <OTG_FS_IRQHandler+0x10>)
 8002302:	f002 f878 	bl	80043f6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20000db4 	.word	0x20000db4

08002310 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	e00a      	b.n	8002338 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002322:	f3af 8000 	nop.w
 8002326:	4601      	mov	r1, r0
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	1c5a      	adds	r2, r3, #1
 800232c:	60ba      	str	r2, [r7, #8]
 800232e:	b2ca      	uxtb	r2, r1
 8002330:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	3301      	adds	r3, #1
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	429a      	cmp	r2, r3
 800233e:	dbf0      	blt.n	8002322 <_read+0x12>
  }

  return len;
 8002340:	687b      	ldr	r3, [r7, #4]
}
 8002342:	4618      	mov	r0, r3
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b086      	sub	sp, #24
 800234e:	af00      	add	r7, sp, #0
 8002350:	60f8      	str	r0, [r7, #12]
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
 800235a:	e009      	b.n	8002370 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	1c5a      	adds	r2, r3, #1
 8002360:	60ba      	str	r2, [r7, #8]
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe fc6b 	bl	8000c40 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	3301      	adds	r3, #1
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	429a      	cmp	r2, r3
 8002376:	dbf1      	blt.n	800235c <_write+0x12>
  }
  return len;
 8002378:	687b      	ldr	r3, [r7, #4]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <_close>:

int _close(int file)
{
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800238a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800238e:	4618      	mov	r0, r3
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023aa:	605a      	str	r2, [r3, #4]
  return 0;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <_isatty>:

int _isatty(int file)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023c2:	2301      	movs	r3, #1
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
	...

080023ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023f4:	4a14      	ldr	r2, [pc, #80]	; (8002448 <_sbrk+0x5c>)
 80023f6:	4b15      	ldr	r3, [pc, #84]	; (800244c <_sbrk+0x60>)
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002400:	4b13      	ldr	r3, [pc, #76]	; (8002450 <_sbrk+0x64>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d102      	bne.n	800240e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002408:	4b11      	ldr	r3, [pc, #68]	; (8002450 <_sbrk+0x64>)
 800240a:	4a12      	ldr	r2, [pc, #72]	; (8002454 <_sbrk+0x68>)
 800240c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800240e:	4b10      	ldr	r3, [pc, #64]	; (8002450 <_sbrk+0x64>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4413      	add	r3, r2
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	429a      	cmp	r2, r3
 800241a:	d207      	bcs.n	800242c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800241c:	f00c f85a 	bl	800e4d4 <__errno>
 8002420:	4603      	mov	r3, r0
 8002422:	220c      	movs	r2, #12
 8002424:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002426:	f04f 33ff 	mov.w	r3, #4294967295
 800242a:	e009      	b.n	8002440 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800242c:	4b08      	ldr	r3, [pc, #32]	; (8002450 <_sbrk+0x64>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002432:	4b07      	ldr	r3, [pc, #28]	; (8002450 <_sbrk+0x64>)
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4413      	add	r3, r2
 800243a:	4a05      	ldr	r2, [pc, #20]	; (8002450 <_sbrk+0x64>)
 800243c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800243e:	68fb      	ldr	r3, [r7, #12]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20020000 	.word	0x20020000
 800244c:	00000400 	.word	0x00000400
 8002450:	20000884 	.word	0x20000884
 8002454:	200012e8 	.word	0x200012e8

08002458 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800245c:	4b06      	ldr	r3, [pc, #24]	; (8002478 <SystemInit+0x20>)
 800245e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002462:	4a05      	ldr	r2, [pc, #20]	; (8002478 <SystemInit+0x20>)
 8002464:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002468:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800247c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002480:	480d      	ldr	r0, [pc, #52]	; (80024b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002482:	490e      	ldr	r1, [pc, #56]	; (80024bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002484:	4a0e      	ldr	r2, [pc, #56]	; (80024c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002488:	e002      	b.n	8002490 <LoopCopyDataInit>

0800248a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800248a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800248c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800248e:	3304      	adds	r3, #4

08002490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002494:	d3f9      	bcc.n	800248a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002496:	4a0b      	ldr	r2, [pc, #44]	; (80024c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002498:	4c0b      	ldr	r4, [pc, #44]	; (80024c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800249a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800249c:	e001      	b.n	80024a2 <LoopFillZerobss>

0800249e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800249e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024a0:	3204      	adds	r2, #4

080024a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024a4:	d3fb      	bcc.n	800249e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024a6:	f7ff ffd7 	bl	8002458 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024aa:	f00c f819 	bl	800e4e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024ae:	f7fe ff0f 	bl	80012d0 <main>
  bx  lr    
 80024b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80024b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024bc:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 80024c0:	0801181c 	.word	0x0801181c
  ldr r2, =_sbss
 80024c4:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 80024c8:	200012e4 	.word	0x200012e4

080024cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024cc:	e7fe      	b.n	80024cc <ADC_IRQHandler>
	...

080024d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024d4:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <HAL_Init+0x40>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a0d      	ldr	r2, [pc, #52]	; (8002510 <HAL_Init+0x40>)
 80024da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024e0:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <HAL_Init+0x40>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a0a      	ldr	r2, [pc, #40]	; (8002510 <HAL_Init+0x40>)
 80024e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024ec:	4b08      	ldr	r3, [pc, #32]	; (8002510 <HAL_Init+0x40>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a07      	ldr	r2, [pc, #28]	; (8002510 <HAL_Init+0x40>)
 80024f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024f8:	2003      	movs	r0, #3
 80024fa:	f000 f965 	bl	80027c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024fe:	2000      	movs	r0, #0
 8002500:	f000 f808 	bl	8002514 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002504:	f7ff fcce 	bl	8001ea4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40023c00 	.word	0x40023c00

08002514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800251c:	4b12      	ldr	r3, [pc, #72]	; (8002568 <HAL_InitTick+0x54>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	4b12      	ldr	r3, [pc, #72]	; (800256c <HAL_InitTick+0x58>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	4619      	mov	r1, r3
 8002526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800252a:	fbb3 f3f1 	udiv	r3, r3, r1
 800252e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002532:	4618      	mov	r0, r3
 8002534:	f000 f981 	bl	800283a <HAL_SYSTICK_Config>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e00e      	b.n	8002560 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b0f      	cmp	r3, #15
 8002546:	d80a      	bhi.n	800255e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002548:	2200      	movs	r2, #0
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	f04f 30ff 	mov.w	r0, #4294967295
 8002550:	f000 f945 	bl	80027de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002554:	4a06      	ldr	r2, [pc, #24]	; (8002570 <HAL_InitTick+0x5c>)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	e000      	b.n	8002560 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
}
 8002560:	4618      	mov	r0, r3
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20000020 	.word	0x20000020
 800256c:	20000028 	.word	0x20000028
 8002570:	20000024 	.word	0x20000024

08002574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002578:	4b06      	ldr	r3, [pc, #24]	; (8002594 <HAL_IncTick+0x20>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	461a      	mov	r2, r3
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_IncTick+0x24>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4413      	add	r3, r2
 8002584:	4a04      	ldr	r2, [pc, #16]	; (8002598 <HAL_IncTick+0x24>)
 8002586:	6013      	str	r3, [r2, #0]
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	20000028 	.word	0x20000028
 8002598:	20000888 	.word	0x20000888

0800259c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return uwTick;
 80025a0:	4b03      	ldr	r3, [pc, #12]	; (80025b0 <HAL_GetTick+0x14>)
 80025a2:	681b      	ldr	r3, [r3, #0]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	20000888 	.word	0x20000888

080025b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025bc:	f7ff ffee 	bl	800259c <HAL_GetTick>
 80025c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025cc:	d005      	beq.n	80025da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ce:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <HAL_Delay+0x44>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4413      	add	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025da:	bf00      	nop
 80025dc:	f7ff ffde 	bl	800259c <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d8f7      	bhi.n	80025dc <HAL_Delay+0x28>
  {
  }
}
 80025ec:	bf00      	nop
 80025ee:	bf00      	nop
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	20000028 	.word	0x20000028

080025fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <__NVIC_SetPriorityGrouping+0x44>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002618:	4013      	ands	r3, r2
 800261a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002624:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800262c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800262e:	4a04      	ldr	r2, [pc, #16]	; (8002640 <__NVIC_SetPriorityGrouping+0x44>)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	60d3      	str	r3, [r2, #12]
}
 8002634:	bf00      	nop
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002648:	4b04      	ldr	r3, [pc, #16]	; (800265c <__NVIC_GetPriorityGrouping+0x18>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	0a1b      	lsrs	r3, r3, #8
 800264e:	f003 0307 	and.w	r3, r3, #7
}
 8002652:	4618      	mov	r0, r3
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800266a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266e:	2b00      	cmp	r3, #0
 8002670:	db0b      	blt.n	800268a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002672:	79fb      	ldrb	r3, [r7, #7]
 8002674:	f003 021f 	and.w	r2, r3, #31
 8002678:	4907      	ldr	r1, [pc, #28]	; (8002698 <__NVIC_EnableIRQ+0x38>)
 800267a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267e:	095b      	lsrs	r3, r3, #5
 8002680:	2001      	movs	r0, #1
 8002682:	fa00 f202 	lsl.w	r2, r0, r2
 8002686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	e000e100 	.word	0xe000e100

0800269c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	6039      	str	r1, [r7, #0]
 80026a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	db0a      	blt.n	80026c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	490c      	ldr	r1, [pc, #48]	; (80026e8 <__NVIC_SetPriority+0x4c>)
 80026b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ba:	0112      	lsls	r2, r2, #4
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	440b      	add	r3, r1
 80026c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026c4:	e00a      	b.n	80026dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	4908      	ldr	r1, [pc, #32]	; (80026ec <__NVIC_SetPriority+0x50>)
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	3b04      	subs	r3, #4
 80026d4:	0112      	lsls	r2, r2, #4
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	440b      	add	r3, r1
 80026da:	761a      	strb	r2, [r3, #24]
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	e000e100 	.word	0xe000e100
 80026ec:	e000ed00 	.word	0xe000ed00

080026f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b089      	sub	sp, #36	; 0x24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f1c3 0307 	rsb	r3, r3, #7
 800270a:	2b04      	cmp	r3, #4
 800270c:	bf28      	it	cs
 800270e:	2304      	movcs	r3, #4
 8002710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3304      	adds	r3, #4
 8002716:	2b06      	cmp	r3, #6
 8002718:	d902      	bls.n	8002720 <NVIC_EncodePriority+0x30>
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	3b03      	subs	r3, #3
 800271e:	e000      	b.n	8002722 <NVIC_EncodePriority+0x32>
 8002720:	2300      	movs	r3, #0
 8002722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002724:	f04f 32ff 	mov.w	r2, #4294967295
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43da      	mvns	r2, r3
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	401a      	ands	r2, r3
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002738:	f04f 31ff 	mov.w	r1, #4294967295
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	fa01 f303 	lsl.w	r3, r1, r3
 8002742:	43d9      	mvns	r1, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002748:	4313      	orrs	r3, r2
         );
}
 800274a:	4618      	mov	r0, r3
 800274c:	3724      	adds	r7, #36	; 0x24
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
	...

08002758 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800275c:	f3bf 8f4f 	dsb	sy
}
 8002760:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002762:	4b06      	ldr	r3, [pc, #24]	; (800277c <__NVIC_SystemReset+0x24>)
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800276a:	4904      	ldr	r1, [pc, #16]	; (800277c <__NVIC_SystemReset+0x24>)
 800276c:	4b04      	ldr	r3, [pc, #16]	; (8002780 <__NVIC_SystemReset+0x28>)
 800276e:	4313      	orrs	r3, r2
 8002770:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002772:	f3bf 8f4f 	dsb	sy
}
 8002776:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002778:	bf00      	nop
 800277a:	e7fd      	b.n	8002778 <__NVIC_SystemReset+0x20>
 800277c:	e000ed00 	.word	0xe000ed00
 8002780:	05fa0004 	.word	0x05fa0004

08002784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3b01      	subs	r3, #1
 8002790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002794:	d301      	bcc.n	800279a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002796:	2301      	movs	r3, #1
 8002798:	e00f      	b.n	80027ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800279a:	4a0a      	ldr	r2, [pc, #40]	; (80027c4 <SysTick_Config+0x40>)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3b01      	subs	r3, #1
 80027a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027a2:	210f      	movs	r1, #15
 80027a4:	f04f 30ff 	mov.w	r0, #4294967295
 80027a8:	f7ff ff78 	bl	800269c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027ac:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <SysTick_Config+0x40>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027b2:	4b04      	ldr	r3, [pc, #16]	; (80027c4 <SysTick_Config+0x40>)
 80027b4:	2207      	movs	r2, #7
 80027b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	e000e010 	.word	0xe000e010

080027c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7ff ff13 	bl	80025fc <__NVIC_SetPriorityGrouping>
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027de:	b580      	push	{r7, lr}
 80027e0:	b086      	sub	sp, #24
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	4603      	mov	r3, r0
 80027e6:	60b9      	str	r1, [r7, #8]
 80027e8:	607a      	str	r2, [r7, #4]
 80027ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027f0:	f7ff ff28 	bl	8002644 <__NVIC_GetPriorityGrouping>
 80027f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	68b9      	ldr	r1, [r7, #8]
 80027fa:	6978      	ldr	r0, [r7, #20]
 80027fc:	f7ff ff78 	bl	80026f0 <NVIC_EncodePriority>
 8002800:	4602      	mov	r2, r0
 8002802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002806:	4611      	mov	r1, r2
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff ff47 	bl	800269c <__NVIC_SetPriority>
}
 800280e:	bf00      	nop
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b082      	sub	sp, #8
 800281a:	af00      	add	r7, sp, #0
 800281c:	4603      	mov	r3, r0
 800281e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff ff1b 	bl	8002660 <__NVIC_EnableIRQ>
}
 800282a:	bf00      	nop
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002836:	f7ff ff8f 	bl	8002758 <__NVIC_SystemReset>

0800283a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b082      	sub	sp, #8
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7ff ff9e 	bl	8002784 <SysTick_Config>
 8002848:	4603      	mov	r3, r0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
	...

08002854 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002854:	b480      	push	{r7}
 8002856:	b089      	sub	sp, #36	; 0x24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800285e:	2300      	movs	r3, #0
 8002860:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002862:	2300      	movs	r3, #0
 8002864:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002866:	2300      	movs	r3, #0
 8002868:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800286a:	2300      	movs	r3, #0
 800286c:	61fb      	str	r3, [r7, #28]
 800286e:	e159      	b.n	8002b24 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002870:	2201      	movs	r2, #1
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	4013      	ands	r3, r2
 8002882:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	429a      	cmp	r2, r3
 800288a:	f040 8148 	bne.w	8002b1e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	2b01      	cmp	r3, #1
 8002898:	d005      	beq.n	80028a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d130      	bne.n	8002908 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	2203      	movs	r2, #3
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	43db      	mvns	r3, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	4013      	ands	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028dc:	2201      	movs	r2, #1
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	091b      	lsrs	r3, r3, #4
 80028f2:	f003 0201 	and.w	r2, r3, #1
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f003 0303 	and.w	r3, r3, #3
 8002910:	2b03      	cmp	r3, #3
 8002912:	d017      	beq.n	8002944 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	2203      	movs	r2, #3
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4313      	orrs	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f003 0303 	and.w	r3, r3, #3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d123      	bne.n	8002998 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	08da      	lsrs	r2, r3, #3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3208      	adds	r2, #8
 8002958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800295c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	220f      	movs	r2, #15
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4013      	ands	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	691a      	ldr	r2, [r3, #16]
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4313      	orrs	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	08da      	lsrs	r2, r3, #3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	3208      	adds	r2, #8
 8002992:	69b9      	ldr	r1, [r7, #24]
 8002994:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	2203      	movs	r2, #3
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	43db      	mvns	r3, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4013      	ands	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f003 0203 	and.w	r2, r3, #3
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 80a2 	beq.w	8002b1e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	4b57      	ldr	r3, [pc, #348]	; (8002b3c <HAL_GPIO_Init+0x2e8>)
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	4a56      	ldr	r2, [pc, #344]	; (8002b3c <HAL_GPIO_Init+0x2e8>)
 80029e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029e8:	6453      	str	r3, [r2, #68]	; 0x44
 80029ea:	4b54      	ldr	r3, [pc, #336]	; (8002b3c <HAL_GPIO_Init+0x2e8>)
 80029ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029f6:	4a52      	ldr	r2, [pc, #328]	; (8002b40 <HAL_GPIO_Init+0x2ec>)
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	089b      	lsrs	r3, r3, #2
 80029fc:	3302      	adds	r3, #2
 80029fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	220f      	movs	r2, #15
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43db      	mvns	r3, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4013      	ands	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a49      	ldr	r2, [pc, #292]	; (8002b44 <HAL_GPIO_Init+0x2f0>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d019      	beq.n	8002a56 <HAL_GPIO_Init+0x202>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a48      	ldr	r2, [pc, #288]	; (8002b48 <HAL_GPIO_Init+0x2f4>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d013      	beq.n	8002a52 <HAL_GPIO_Init+0x1fe>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a47      	ldr	r2, [pc, #284]	; (8002b4c <HAL_GPIO_Init+0x2f8>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d00d      	beq.n	8002a4e <HAL_GPIO_Init+0x1fa>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a46      	ldr	r2, [pc, #280]	; (8002b50 <HAL_GPIO_Init+0x2fc>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d007      	beq.n	8002a4a <HAL_GPIO_Init+0x1f6>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a45      	ldr	r2, [pc, #276]	; (8002b54 <HAL_GPIO_Init+0x300>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d101      	bne.n	8002a46 <HAL_GPIO_Init+0x1f2>
 8002a42:	2304      	movs	r3, #4
 8002a44:	e008      	b.n	8002a58 <HAL_GPIO_Init+0x204>
 8002a46:	2307      	movs	r3, #7
 8002a48:	e006      	b.n	8002a58 <HAL_GPIO_Init+0x204>
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e004      	b.n	8002a58 <HAL_GPIO_Init+0x204>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e002      	b.n	8002a58 <HAL_GPIO_Init+0x204>
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <HAL_GPIO_Init+0x204>
 8002a56:	2300      	movs	r3, #0
 8002a58:	69fa      	ldr	r2, [r7, #28]
 8002a5a:	f002 0203 	and.w	r2, r2, #3
 8002a5e:	0092      	lsls	r2, r2, #2
 8002a60:	4093      	lsls	r3, r2
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a68:	4935      	ldr	r1, [pc, #212]	; (8002b40 <HAL_GPIO_Init+0x2ec>)
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	089b      	lsrs	r3, r3, #2
 8002a6e:	3302      	adds	r3, #2
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a76:	4b38      	ldr	r3, [pc, #224]	; (8002b58 <HAL_GPIO_Init+0x304>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4013      	ands	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a9a:	4a2f      	ldr	r2, [pc, #188]	; (8002b58 <HAL_GPIO_Init+0x304>)
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002aa0:	4b2d      	ldr	r3, [pc, #180]	; (8002b58 <HAL_GPIO_Init+0x304>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4013      	ands	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ac4:	4a24      	ldr	r2, [pc, #144]	; (8002b58 <HAL_GPIO_Init+0x304>)
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002aca:	4b23      	ldr	r3, [pc, #140]	; (8002b58 <HAL_GPIO_Init+0x304>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aee:	4a1a      	ldr	r2, [pc, #104]	; (8002b58 <HAL_GPIO_Init+0x304>)
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002af4:	4b18      	ldr	r3, [pc, #96]	; (8002b58 <HAL_GPIO_Init+0x304>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	43db      	mvns	r3, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b18:	4a0f      	ldr	r2, [pc, #60]	; (8002b58 <HAL_GPIO_Init+0x304>)
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	3301      	adds	r3, #1
 8002b22:	61fb      	str	r3, [r7, #28]
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	2b0f      	cmp	r3, #15
 8002b28:	f67f aea2 	bls.w	8002870 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b2c:	bf00      	nop
 8002b2e:	bf00      	nop
 8002b30:	3724      	adds	r7, #36	; 0x24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	40013800 	.word	0x40013800
 8002b44:	40020000 	.word	0x40020000
 8002b48:	40020400 	.word	0x40020400
 8002b4c:	40020800 	.word	0x40020800
 8002b50:	40020c00 	.word	0x40020c00
 8002b54:	40021000 	.word	0x40021000
 8002b58:	40013c00 	.word	0x40013c00

08002b5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	460b      	mov	r3, r1
 8002b66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691a      	ldr	r2, [r3, #16]
 8002b6c:	887b      	ldrh	r3, [r7, #2]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d002      	beq.n	8002b7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b74:	2301      	movs	r3, #1
 8002b76:	73fb      	strb	r3, [r7, #15]
 8002b78:	e001      	b.n	8002b7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	807b      	strh	r3, [r7, #2]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b9c:	787b      	ldrb	r3, [r7, #1]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ba2:	887a      	ldrh	r2, [r7, #2]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ba8:	e003      	b.n	8002bb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002baa:	887b      	ldrh	r3, [r7, #2]
 8002bac:	041a      	lsls	r2, r3, #16
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	619a      	str	r2, [r3, #24]
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002bca:	4b08      	ldr	r3, [pc, #32]	; (8002bec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bcc:	695a      	ldr	r2, [r3, #20]
 8002bce:	88fb      	ldrh	r3, [r7, #6]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d006      	beq.n	8002be4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bd6:	4a05      	ldr	r2, [pc, #20]	; (8002bec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bd8:	88fb      	ldrh	r3, [r7, #6]
 8002bda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bdc:	88fb      	ldrh	r3, [r7, #6]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff f940 	bl	8001e64 <HAL_GPIO_EXTI_Callback>
  }
}
 8002be4:	bf00      	nop
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40013c00 	.word	0x40013c00

08002bf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e12b      	b.n	8002e5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d106      	bne.n	8002c1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7ff f96c 	bl	8001ef4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2224      	movs	r2, #36	; 0x24
 8002c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0201 	bic.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c54:	f003 f954 	bl	8005f00 <HAL_RCC_GetPCLK1Freq>
 8002c58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	4a81      	ldr	r2, [pc, #516]	; (8002e64 <HAL_I2C_Init+0x274>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d807      	bhi.n	8002c74 <HAL_I2C_Init+0x84>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	4a80      	ldr	r2, [pc, #512]	; (8002e68 <HAL_I2C_Init+0x278>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	bf94      	ite	ls
 8002c6c:	2301      	movls	r3, #1
 8002c6e:	2300      	movhi	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	e006      	b.n	8002c82 <HAL_I2C_Init+0x92>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4a7d      	ldr	r2, [pc, #500]	; (8002e6c <HAL_I2C_Init+0x27c>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	bf94      	ite	ls
 8002c7c:	2301      	movls	r3, #1
 8002c7e:	2300      	movhi	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e0e7      	b.n	8002e5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	4a78      	ldr	r2, [pc, #480]	; (8002e70 <HAL_I2C_Init+0x280>)
 8002c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c92:	0c9b      	lsrs	r3, r3, #18
 8002c94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	4a6a      	ldr	r2, [pc, #424]	; (8002e64 <HAL_I2C_Init+0x274>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d802      	bhi.n	8002cc4 <HAL_I2C_Init+0xd4>
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	e009      	b.n	8002cd8 <HAL_I2C_Init+0xe8>
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cca:	fb02 f303 	mul.w	r3, r2, r3
 8002cce:	4a69      	ldr	r2, [pc, #420]	; (8002e74 <HAL_I2C_Init+0x284>)
 8002cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd4:	099b      	lsrs	r3, r3, #6
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6812      	ldr	r2, [r2, #0]
 8002cdc:	430b      	orrs	r3, r1
 8002cde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	495c      	ldr	r1, [pc, #368]	; (8002e64 <HAL_I2C_Init+0x274>)
 8002cf4:	428b      	cmp	r3, r1
 8002cf6:	d819      	bhi.n	8002d2c <HAL_I2C_Init+0x13c>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	1e59      	subs	r1, r3, #1
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d06:	1c59      	adds	r1, r3, #1
 8002d08:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d0c:	400b      	ands	r3, r1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00a      	beq.n	8002d28 <HAL_I2C_Init+0x138>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	1e59      	subs	r1, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d20:	3301      	adds	r3, #1
 8002d22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d26:	e051      	b.n	8002dcc <HAL_I2C_Init+0x1dc>
 8002d28:	2304      	movs	r3, #4
 8002d2a:	e04f      	b.n	8002dcc <HAL_I2C_Init+0x1dc>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d111      	bne.n	8002d58 <HAL_I2C_Init+0x168>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	1e58      	subs	r0, r3, #1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6859      	ldr	r1, [r3, #4]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	440b      	add	r3, r1
 8002d42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d46:	3301      	adds	r3, #1
 8002d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	bf0c      	ite	eq
 8002d50:	2301      	moveq	r3, #1
 8002d52:	2300      	movne	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	e012      	b.n	8002d7e <HAL_I2C_Init+0x18e>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	1e58      	subs	r0, r3, #1
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6859      	ldr	r1, [r3, #4]
 8002d60:	460b      	mov	r3, r1
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	0099      	lsls	r1, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d6e:	3301      	adds	r3, #1
 8002d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	bf0c      	ite	eq
 8002d78:	2301      	moveq	r3, #1
 8002d7a:	2300      	movne	r3, #0
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_I2C_Init+0x196>
 8002d82:	2301      	movs	r3, #1
 8002d84:	e022      	b.n	8002dcc <HAL_I2C_Init+0x1dc>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10e      	bne.n	8002dac <HAL_I2C_Init+0x1bc>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	1e58      	subs	r0, r3, #1
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6859      	ldr	r1, [r3, #4]
 8002d96:	460b      	mov	r3, r1
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	440b      	add	r3, r1
 8002d9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002da0:	3301      	adds	r3, #1
 8002da2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002daa:	e00f      	b.n	8002dcc <HAL_I2C_Init+0x1dc>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	1e58      	subs	r0, r3, #1
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6859      	ldr	r1, [r3, #4]
 8002db4:	460b      	mov	r3, r1
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	0099      	lsls	r1, r3, #2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dcc:	6879      	ldr	r1, [r7, #4]
 8002dce:	6809      	ldr	r1, [r1, #0]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69da      	ldr	r2, [r3, #28]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	431a      	orrs	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002dfa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6911      	ldr	r1, [r2, #16]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	68d2      	ldr	r2, [r2, #12]
 8002e06:	4311      	orrs	r1, r2
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6812      	ldr	r2, [r2, #0]
 8002e0c:	430b      	orrs	r3, r1
 8002e0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	695a      	ldr	r2, [r3, #20]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0201 	orr.w	r2, r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2220      	movs	r2, #32
 8002e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	000186a0 	.word	0x000186a0
 8002e68:	001e847f 	.word	0x001e847f
 8002e6c:	003d08ff 	.word	0x003d08ff
 8002e70:	431bde83 	.word	0x431bde83
 8002e74:	10624dd3 	.word	0x10624dd3

08002e78 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08c      	sub	sp, #48	; 0x30
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	607a      	str	r2, [r7, #4]
 8002e82:	461a      	mov	r2, r3
 8002e84:	460b      	mov	r3, r1
 8002e86:	817b      	strh	r3, [r7, #10]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e8c:	f7ff fb86 	bl	800259c <HAL_GetTick>
 8002e90:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b20      	cmp	r3, #32
 8002e9c:	f040 820b 	bne.w	80032b6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	2319      	movs	r3, #25
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	497c      	ldr	r1, [pc, #496]	; (800309c <HAL_I2C_Master_Receive+0x224>)
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 ff76 	bl	8003d9c <I2C_WaitOnFlagUntilTimeout>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	e1fe      	b.n	80032b8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d101      	bne.n	8002ec8 <HAL_I2C_Master_Receive+0x50>
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	e1f7      	b.n	80032b8 <HAL_I2C_Master_Receive+0x440>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d007      	beq.n	8002eee <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f042 0201 	orr.w	r2, r2, #1
 8002eec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002efc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2222      	movs	r2, #34	; 0x22
 8002f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2210      	movs	r2, #16
 8002f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	893a      	ldrh	r2, [r7, #8]
 8002f1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	4a5c      	ldr	r2, [pc, #368]	; (80030a0 <HAL_I2C_Master_Receive+0x228>)
 8002f2e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f30:	8979      	ldrh	r1, [r7, #10]
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 fce4 	bl	8003904 <I2C_MasterRequestRead>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e1b8      	b.n	80032b8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d113      	bne.n	8002f76 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f4e:	2300      	movs	r3, #0
 8002f50:	623b      	str	r3, [r7, #32]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	623b      	str	r3, [r7, #32]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	623b      	str	r3, [r7, #32]
 8002f62:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	e18c      	b.n	8003290 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d11b      	bne.n	8002fb6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61fb      	str	r3, [r7, #28]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	61fb      	str	r3, [r7, #28]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	61fb      	str	r3, [r7, #28]
 8002fa2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	e16c      	b.n	8003290 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d11b      	bne.n	8002ff6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fcc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fdc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61bb      	str	r3, [r7, #24]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	61bb      	str	r3, [r7, #24]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	61bb      	str	r3, [r7, #24]
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	e14c      	b.n	8003290 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003004:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003006:	2300      	movs	r3, #0
 8003008:	617b      	str	r3, [r7, #20]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	617b      	str	r3, [r7, #20]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	617b      	str	r3, [r7, #20]
 800301a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800301c:	e138      	b.n	8003290 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003022:	2b03      	cmp	r3, #3
 8003024:	f200 80f1 	bhi.w	800320a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302c:	2b01      	cmp	r3, #1
 800302e:	d123      	bne.n	8003078 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003032:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f001 f809 	bl	800404c <I2C_WaitOnRXNEFlagUntilTimeout>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e139      	b.n	80032b8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691a      	ldr	r2, [r3, #16]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	1c5a      	adds	r2, r3, #1
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003060:	3b01      	subs	r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306c:	b29b      	uxth	r3, r3
 800306e:	3b01      	subs	r3, #1
 8003070:	b29a      	uxth	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003076:	e10b      	b.n	8003290 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307c:	2b02      	cmp	r3, #2
 800307e:	d14e      	bne.n	800311e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003086:	2200      	movs	r2, #0
 8003088:	4906      	ldr	r1, [pc, #24]	; (80030a4 <HAL_I2C_Master_Receive+0x22c>)
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 fe86 	bl	8003d9c <I2C_WaitOnFlagUntilTimeout>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d008      	beq.n	80030a8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e10e      	b.n	80032b8 <HAL_I2C_Master_Receive+0x440>
 800309a:	bf00      	nop
 800309c:	00100002 	.word	0x00100002
 80030a0:	ffff0000 	.word	0xffff0000
 80030a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691a      	ldr	r2, [r3, #16]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ca:	1c5a      	adds	r2, r3, #1
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	3b01      	subs	r3, #1
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	691a      	ldr	r2, [r3, #16]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	b2d2      	uxtb	r2, r2
 80030f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	1c5a      	adds	r2, r3, #1
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003106:	3b01      	subs	r3, #1
 8003108:	b29a      	uxth	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003112:	b29b      	uxth	r3, r3
 8003114:	3b01      	subs	r3, #1
 8003116:	b29a      	uxth	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800311c:	e0b8      	b.n	8003290 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003124:	2200      	movs	r2, #0
 8003126:	4966      	ldr	r1, [pc, #408]	; (80032c0 <HAL_I2C_Master_Receive+0x448>)
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 fe37 	bl	8003d9c <I2C_WaitOnFlagUntilTimeout>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e0bf      	b.n	80032b8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003146:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	691a      	ldr	r2, [r3, #16]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	1c5a      	adds	r2, r3, #1
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003170:	b29b      	uxth	r3, r3
 8003172:	3b01      	subs	r3, #1
 8003174:	b29a      	uxth	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	9300      	str	r3, [sp, #0]
 800317e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003180:	2200      	movs	r2, #0
 8003182:	494f      	ldr	r1, [pc, #316]	; (80032c0 <HAL_I2C_Master_Receive+0x448>)
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 fe09 	bl	8003d9c <I2C_WaitOnFlagUntilTimeout>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e091      	b.n	80032b8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	691a      	ldr	r2, [r3, #16]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	1c5a      	adds	r2, r3, #1
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	3b01      	subs	r3, #1
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	691a      	ldr	r2, [r3, #16]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	1c5a      	adds	r2, r3, #1
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f2:	3b01      	subs	r3, #1
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fe:	b29b      	uxth	r3, r3
 8003200:	3b01      	subs	r3, #1
 8003202:	b29a      	uxth	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003208:	e042      	b.n	8003290 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800320a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800320c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 ff1c 	bl	800404c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e04c      	b.n	80032b8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	b2d2      	uxtb	r2, r2
 800322a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	1c5a      	adds	r2, r3, #1
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003246:	b29b      	uxth	r3, r3
 8003248:	3b01      	subs	r3, #1
 800324a:	b29a      	uxth	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	f003 0304 	and.w	r3, r3, #4
 800325a:	2b04      	cmp	r3, #4
 800325c:	d118      	bne.n	8003290 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	691a      	ldr	r2, [r3, #16]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003268:	b2d2      	uxtb	r2, r2
 800326a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327a:	3b01      	subs	r3, #1
 800327c:	b29a      	uxth	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003286:	b29b      	uxth	r3, r3
 8003288:	3b01      	subs	r3, #1
 800328a:	b29a      	uxth	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003294:	2b00      	cmp	r3, #0
 8003296:	f47f aec2 	bne.w	800301e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2220      	movs	r2, #32
 800329e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032b2:	2300      	movs	r3, #0
 80032b4:	e000      	b.n	80032b8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80032b6:	2302      	movs	r3, #2
  }
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3728      	adds	r7, #40	; 0x28
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	00010004 	.word	0x00010004

080032c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af02      	add	r7, sp, #8
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	4608      	mov	r0, r1
 80032ce:	4611      	mov	r1, r2
 80032d0:	461a      	mov	r2, r3
 80032d2:	4603      	mov	r3, r0
 80032d4:	817b      	strh	r3, [r7, #10]
 80032d6:	460b      	mov	r3, r1
 80032d8:	813b      	strh	r3, [r7, #8]
 80032da:	4613      	mov	r3, r2
 80032dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032de:	f7ff f95d 	bl	800259c <HAL_GetTick>
 80032e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b20      	cmp	r3, #32
 80032ee:	f040 80d9 	bne.w	80034a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	2319      	movs	r3, #25
 80032f8:	2201      	movs	r2, #1
 80032fa:	496d      	ldr	r1, [pc, #436]	; (80034b0 <HAL_I2C_Mem_Write+0x1ec>)
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 fd4d 	bl	8003d9c <I2C_WaitOnFlagUntilTimeout>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003308:	2302      	movs	r3, #2
 800330a:	e0cc      	b.n	80034a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003312:	2b01      	cmp	r3, #1
 8003314:	d101      	bne.n	800331a <HAL_I2C_Mem_Write+0x56>
 8003316:	2302      	movs	r3, #2
 8003318:	e0c5      	b.n	80034a6 <HAL_I2C_Mem_Write+0x1e2>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b01      	cmp	r3, #1
 800332e:	d007      	beq.n	8003340 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800334e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2221      	movs	r2, #33	; 0x21
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2240      	movs	r2, #64	; 0x40
 800335c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6a3a      	ldr	r2, [r7, #32]
 800336a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003370:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003376:	b29a      	uxth	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4a4d      	ldr	r2, [pc, #308]	; (80034b4 <HAL_I2C_Mem_Write+0x1f0>)
 8003380:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003382:	88f8      	ldrh	r0, [r7, #6]
 8003384:	893a      	ldrh	r2, [r7, #8]
 8003386:	8979      	ldrh	r1, [r7, #10]
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	9301      	str	r3, [sp, #4]
 800338c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	4603      	mov	r3, r0
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 fb84 	bl	8003aa0 <I2C_RequestMemoryWrite>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d052      	beq.n	8003444 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e081      	b.n	80034a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 fdce 	bl	8003f48 <I2C_WaitOnTXEFlagUntilTimeout>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00d      	beq.n	80033ce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d107      	bne.n	80033ca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e06b      	b.n	80034a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	781a      	ldrb	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	1c5a      	adds	r2, r3, #1
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	3b01      	subs	r3, #1
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b04      	cmp	r3, #4
 800340a:	d11b      	bne.n	8003444 <HAL_I2C_Mem_Write+0x180>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003410:	2b00      	cmp	r3, #0
 8003412:	d017      	beq.n	8003444 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	781a      	ldrb	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	1c5a      	adds	r2, r3, #1
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800342e:	3b01      	subs	r3, #1
 8003430:	b29a      	uxth	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800343a:	b29b      	uxth	r3, r3
 800343c:	3b01      	subs	r3, #1
 800343e:	b29a      	uxth	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1aa      	bne.n	80033a2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 fdba 	bl	8003fca <I2C_WaitOnBTFFlagUntilTimeout>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00d      	beq.n	8003478 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003460:	2b04      	cmp	r3, #4
 8003462:	d107      	bne.n	8003474 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003472:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e016      	b.n	80034a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003486:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2220      	movs	r2, #32
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034a0:	2300      	movs	r3, #0
 80034a2:	e000      	b.n	80034a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80034a4:	2302      	movs	r3, #2
  }
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3718      	adds	r7, #24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	00100002 	.word	0x00100002
 80034b4:	ffff0000 	.word	0xffff0000

080034b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08c      	sub	sp, #48	; 0x30
 80034bc:	af02      	add	r7, sp, #8
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	4608      	mov	r0, r1
 80034c2:	4611      	mov	r1, r2
 80034c4:	461a      	mov	r2, r3
 80034c6:	4603      	mov	r3, r0
 80034c8:	817b      	strh	r3, [r7, #10]
 80034ca:	460b      	mov	r3, r1
 80034cc:	813b      	strh	r3, [r7, #8]
 80034ce:	4613      	mov	r3, r2
 80034d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034d2:	f7ff f863 	bl	800259c <HAL_GetTick>
 80034d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b20      	cmp	r3, #32
 80034e2:	f040 8208 	bne.w	80038f6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	2319      	movs	r3, #25
 80034ec:	2201      	movs	r2, #1
 80034ee:	497b      	ldr	r1, [pc, #492]	; (80036dc <HAL_I2C_Mem_Read+0x224>)
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f000 fc53 	bl	8003d9c <I2C_WaitOnFlagUntilTimeout>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80034fc:	2302      	movs	r3, #2
 80034fe:	e1fb      	b.n	80038f8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003506:	2b01      	cmp	r3, #1
 8003508:	d101      	bne.n	800350e <HAL_I2C_Mem_Read+0x56>
 800350a:	2302      	movs	r3, #2
 800350c:	e1f4      	b.n	80038f8 <HAL_I2C_Mem_Read+0x440>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	2b01      	cmp	r3, #1
 8003522:	d007      	beq.n	8003534 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0201 	orr.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003542:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2222      	movs	r2, #34	; 0x22
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2240      	movs	r2, #64	; 0x40
 8003550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800355e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003564:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356a:	b29a      	uxth	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	4a5b      	ldr	r2, [pc, #364]	; (80036e0 <HAL_I2C_Mem_Read+0x228>)
 8003574:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003576:	88f8      	ldrh	r0, [r7, #6]
 8003578:	893a      	ldrh	r2, [r7, #8]
 800357a:	8979      	ldrh	r1, [r7, #10]
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	9301      	str	r3, [sp, #4]
 8003580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	4603      	mov	r3, r0
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 fb20 	bl	8003bcc <I2C_RequestMemoryRead>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e1b0      	b.n	80038f8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359a:	2b00      	cmp	r3, #0
 800359c:	d113      	bne.n	80035c6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800359e:	2300      	movs	r3, #0
 80035a0:	623b      	str	r3, [r7, #32]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	623b      	str	r3, [r7, #32]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	623b      	str	r3, [r7, #32]
 80035b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	e184      	b.n	80038d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d11b      	bne.n	8003606 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035de:	2300      	movs	r3, #0
 80035e0:	61fb      	str	r3, [r7, #28]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	61fb      	str	r3, [r7, #28]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	61fb      	str	r3, [r7, #28]
 80035f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	e164      	b.n	80038d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360a:	2b02      	cmp	r3, #2
 800360c:	d11b      	bne.n	8003646 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800361c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800362c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800362e:	2300      	movs	r3, #0
 8003630:	61bb      	str	r3, [r7, #24]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	61bb      	str	r3, [r7, #24]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	61bb      	str	r3, [r7, #24]
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	e144      	b.n	80038d0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	617b      	str	r3, [r7, #20]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	617b      	str	r3, [r7, #20]
 800365a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800365c:	e138      	b.n	80038d0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003662:	2b03      	cmp	r3, #3
 8003664:	f200 80f1 	bhi.w	800384a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366c:	2b01      	cmp	r3, #1
 800366e:	d123      	bne.n	80036b8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003672:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 fce9 	bl	800404c <I2C_WaitOnRXNEFlagUntilTimeout>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e139      	b.n	80038f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	691a      	ldr	r2, [r3, #16]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	1c5a      	adds	r2, r3, #1
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036b6:	e10b      	b.n	80038d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d14e      	bne.n	800375e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c6:	2200      	movs	r2, #0
 80036c8:	4906      	ldr	r1, [pc, #24]	; (80036e4 <HAL_I2C_Mem_Read+0x22c>)
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 fb66 	bl	8003d9c <I2C_WaitOnFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d008      	beq.n	80036e8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e10e      	b.n	80038f8 <HAL_I2C_Mem_Read+0x440>
 80036da:	bf00      	nop
 80036dc:	00100002 	.word	0x00100002
 80036e0:	ffff0000 	.word	0xffff0000
 80036e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691a      	ldr	r2, [r3, #16]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003720:	b29b      	uxth	r3, r3
 8003722:	3b01      	subs	r3, #1
 8003724:	b29a      	uxth	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	691a      	ldr	r2, [r3, #16]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	1c5a      	adds	r2, r3, #1
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003746:	3b01      	subs	r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003752:	b29b      	uxth	r3, r3
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800375c:	e0b8      	b.n	80038d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003764:	2200      	movs	r2, #0
 8003766:	4966      	ldr	r1, [pc, #408]	; (8003900 <HAL_I2C_Mem_Read+0x448>)
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 fb17 	bl	8003d9c <I2C_WaitOnFlagUntilTimeout>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e0bf      	b.n	80038f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003786:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	691a      	ldr	r2, [r3, #16]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	b2d2      	uxtb	r2, r2
 8003794:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c0:	2200      	movs	r2, #0
 80037c2:	494f      	ldr	r1, [pc, #316]	; (8003900 <HAL_I2C_Mem_Read+0x448>)
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 fae9 	bl	8003d9c <I2C_WaitOnFlagUntilTimeout>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e091      	b.n	80038f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	691a      	ldr	r2, [r3, #16]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	b2d2      	uxtb	r2, r2
 80037f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003800:	3b01      	subs	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380c:	b29b      	uxth	r3, r3
 800380e:	3b01      	subs	r3, #1
 8003810:	b29a      	uxth	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	691a      	ldr	r2, [r3, #16]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	b2d2      	uxtb	r2, r2
 8003822:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	1c5a      	adds	r2, r3, #1
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003832:	3b01      	subs	r3, #1
 8003834:	b29a      	uxth	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383e:	b29b      	uxth	r3, r3
 8003840:	3b01      	subs	r3, #1
 8003842:	b29a      	uxth	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003848:	e042      	b.n	80038d0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800384a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800384c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 fbfc 	bl	800404c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e04c      	b.n	80038f8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387a:	3b01      	subs	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003886:	b29b      	uxth	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	f003 0304 	and.w	r3, r3, #4
 800389a:	2b04      	cmp	r3, #4
 800389c:	d118      	bne.n	80038d0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	691a      	ldr	r2, [r3, #16]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	1c5a      	adds	r2, r3, #1
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29a      	uxth	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	3b01      	subs	r3, #1
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f47f aec2 	bne.w	800365e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2220      	movs	r2, #32
 80038de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038f2:	2300      	movs	r3, #0
 80038f4:	e000      	b.n	80038f8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80038f6:	2302      	movs	r3, #2
  }
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3728      	adds	r7, #40	; 0x28
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	00010004 	.word	0x00010004

08003904 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b088      	sub	sp, #32
 8003908:	af02      	add	r7, sp, #8
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	607a      	str	r2, [r7, #4]
 800390e:	603b      	str	r3, [r7, #0]
 8003910:	460b      	mov	r3, r1
 8003912:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003918:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003928:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2b08      	cmp	r3, #8
 800392e:	d006      	beq.n	800393e <I2C_MasterRequestRead+0x3a>
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d003      	beq.n	800393e <I2C_MasterRequestRead+0x3a>
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800393c:	d108      	bne.n	8003950 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	e00b      	b.n	8003968 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003954:	2b11      	cmp	r3, #17
 8003956:	d107      	bne.n	8003968 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003966:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 fa11 	bl	8003d9c <I2C_WaitOnFlagUntilTimeout>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00d      	beq.n	800399c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800398e:	d103      	bne.n	8003998 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003996:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e079      	b.n	8003a90 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039a4:	d108      	bne.n	80039b8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80039a6:	897b      	ldrh	r3, [r7, #10]
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	f043 0301 	orr.w	r3, r3, #1
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	611a      	str	r2, [r3, #16]
 80039b6:	e05f      	b.n	8003a78 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80039b8:	897b      	ldrh	r3, [r7, #10]
 80039ba:	11db      	asrs	r3, r3, #7
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	f003 0306 	and.w	r3, r3, #6
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	f063 030f 	orn	r3, r3, #15
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	4930      	ldr	r1, [pc, #192]	; (8003a98 <I2C_MasterRequestRead+0x194>)
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 fa37 	bl	8003e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e054      	b.n	8003a90 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80039e6:	897b      	ldrh	r3, [r7, #10]
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	4929      	ldr	r1, [pc, #164]	; (8003a9c <I2C_MasterRequestRead+0x198>)
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 fa27 	bl	8003e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e044      	b.n	8003a90 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a06:	2300      	movs	r3, #0
 8003a08:	613b      	str	r3, [r7, #16]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	613b      	str	r3, [r7, #16]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	613b      	str	r3, [r7, #16]
 8003a1a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a2a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f000 f9af 	bl	8003d9c <I2C_WaitOnFlagUntilTimeout>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00d      	beq.n	8003a60 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a52:	d103      	bne.n	8003a5c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a5a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e017      	b.n	8003a90 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003a60:	897b      	ldrh	r3, [r7, #10]
 8003a62:	11db      	asrs	r3, r3, #7
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	f003 0306 	and.w	r3, r3, #6
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	f063 030e 	orn	r3, r3, #14
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	4907      	ldr	r1, [pc, #28]	; (8003a9c <I2C_MasterRequestRead+0x198>)
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 f9e3 	bl	8003e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	00010008 	.word	0x00010008
 8003a9c:	00010002 	.word	0x00010002

08003aa0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b088      	sub	sp, #32
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	4608      	mov	r0, r1
 8003aaa:	4611      	mov	r1, r2
 8003aac:	461a      	mov	r2, r3
 8003aae:	4603      	mov	r3, r0
 8003ab0:	817b      	strh	r3, [r7, #10]
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	813b      	strh	r3, [r7, #8]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ac8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 f960 	bl	8003d9c <I2C_WaitOnFlagUntilTimeout>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00d      	beq.n	8003afe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003af0:	d103      	bne.n	8003afa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003af8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e05f      	b.n	8003bbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003afe:	897b      	ldrh	r3, [r7, #10]
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	461a      	mov	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	6a3a      	ldr	r2, [r7, #32]
 8003b12:	492d      	ldr	r1, [pc, #180]	; (8003bc8 <I2C_RequestMemoryWrite+0x128>)
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 f998 	bl	8003e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e04c      	b.n	8003bbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b24:	2300      	movs	r3, #0
 8003b26:	617b      	str	r3, [r7, #20]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b3c:	6a39      	ldr	r1, [r7, #32]
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 fa02 	bl	8003f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00d      	beq.n	8003b66 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	d107      	bne.n	8003b62 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e02b      	b.n	8003bbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b66:	88fb      	ldrh	r3, [r7, #6]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d105      	bne.n	8003b78 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b6c:	893b      	ldrh	r3, [r7, #8]
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	611a      	str	r2, [r3, #16]
 8003b76:	e021      	b.n	8003bbc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b78:	893b      	ldrh	r3, [r7, #8]
 8003b7a:	0a1b      	lsrs	r3, r3, #8
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b88:	6a39      	ldr	r1, [r7, #32]
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 f9dc 	bl	8003f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00d      	beq.n	8003bb2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d107      	bne.n	8003bae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e005      	b.n	8003bbe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bb2:	893b      	ldrh	r3, [r7, #8]
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	00010002 	.word	0x00010002

08003bcc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b088      	sub	sp, #32
 8003bd0:	af02      	add	r7, sp, #8
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	4608      	mov	r0, r1
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	461a      	mov	r2, r3
 8003bda:	4603      	mov	r3, r0
 8003bdc:	817b      	strh	r3, [r7, #10]
 8003bde:	460b      	mov	r3, r1
 8003be0:	813b      	strh	r3, [r7, #8]
 8003be2:	4613      	mov	r3, r2
 8003be4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bf4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 f8c2 	bl	8003d9c <I2C_WaitOnFlagUntilTimeout>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00d      	beq.n	8003c3a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c2c:	d103      	bne.n	8003c36 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c34:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e0aa      	b.n	8003d90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c3a:	897b      	ldrh	r3, [r7, #10]
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	461a      	mov	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	6a3a      	ldr	r2, [r7, #32]
 8003c4e:	4952      	ldr	r1, [pc, #328]	; (8003d98 <I2C_RequestMemoryRead+0x1cc>)
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f000 f8fa 	bl	8003e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e097      	b.n	8003d90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c60:	2300      	movs	r3, #0
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	617b      	str	r3, [r7, #20]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	617b      	str	r3, [r7, #20]
 8003c74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c78:	6a39      	ldr	r1, [r7, #32]
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 f964 	bl	8003f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00d      	beq.n	8003ca2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d107      	bne.n	8003c9e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e076      	b.n	8003d90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ca2:	88fb      	ldrh	r3, [r7, #6]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d105      	bne.n	8003cb4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ca8:	893b      	ldrh	r3, [r7, #8]
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	611a      	str	r2, [r3, #16]
 8003cb2:	e021      	b.n	8003cf8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003cb4:	893b      	ldrh	r3, [r7, #8]
 8003cb6:	0a1b      	lsrs	r3, r3, #8
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc4:	6a39      	ldr	r1, [r7, #32]
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 f93e 	bl	8003f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00d      	beq.n	8003cee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	d107      	bne.n	8003cea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e050      	b.n	8003d90 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cee:	893b      	ldrh	r3, [r7, #8]
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cfa:	6a39      	ldr	r1, [r7, #32]
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 f923 	bl	8003f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00d      	beq.n	8003d24 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0c:	2b04      	cmp	r3, #4
 8003d0e:	d107      	bne.n	8003d20 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d1e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e035      	b.n	8003d90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d32:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 f82b 	bl	8003d9c <I2C_WaitOnFlagUntilTimeout>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00d      	beq.n	8003d68 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d5a:	d103      	bne.n	8003d64 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e013      	b.n	8003d90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003d68:	897b      	ldrh	r3, [r7, #10]
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	f043 0301 	orr.w	r3, r3, #1
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	6a3a      	ldr	r2, [r7, #32]
 8003d7c:	4906      	ldr	r1, [pc, #24]	; (8003d98 <I2C_RequestMemoryRead+0x1cc>)
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 f863 	bl	8003e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e000      	b.n	8003d90 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3718      	adds	r7, #24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	00010002 	.word	0x00010002

08003d9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	603b      	str	r3, [r7, #0]
 8003da8:	4613      	mov	r3, r2
 8003daa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dac:	e025      	b.n	8003dfa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db4:	d021      	beq.n	8003dfa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003db6:	f7fe fbf1 	bl	800259c <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d302      	bcc.n	8003dcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d116      	bne.n	8003dfa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	f043 0220 	orr.w	r2, r3, #32
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e023      	b.n	8003e42 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	0c1b      	lsrs	r3, r3, #16
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d10d      	bne.n	8003e20 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	43da      	mvns	r2, r3
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	bf0c      	ite	eq
 8003e16:	2301      	moveq	r3, #1
 8003e18:	2300      	movne	r3, #0
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	e00c      	b.n	8003e3a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	43da      	mvns	r2, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	bf0c      	ite	eq
 8003e32:	2301      	moveq	r3, #1
 8003e34:	2300      	movne	r3, #0
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	461a      	mov	r2, r3
 8003e3a:	79fb      	ldrb	r3, [r7, #7]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d0b6      	beq.n	8003dae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b084      	sub	sp, #16
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	60f8      	str	r0, [r7, #12]
 8003e52:	60b9      	str	r1, [r7, #8]
 8003e54:	607a      	str	r2, [r7, #4]
 8003e56:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e58:	e051      	b.n	8003efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e68:	d123      	bne.n	8003eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e78:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	f043 0204 	orr.w	r2, r3, #4
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e046      	b.n	8003f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb8:	d021      	beq.n	8003efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eba:	f7fe fb6f 	bl	800259c <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d302      	bcc.n	8003ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d116      	bne.n	8003efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	f043 0220 	orr.w	r2, r3, #32
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e020      	b.n	8003f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	0c1b      	lsrs	r3, r3, #16
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d10c      	bne.n	8003f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	43da      	mvns	r2, r3
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	4013      	ands	r3, r2
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	bf14      	ite	ne
 8003f1a:	2301      	movne	r3, #1
 8003f1c:	2300      	moveq	r3, #0
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	e00b      	b.n	8003f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	43da      	mvns	r2, r3
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	bf14      	ite	ne
 8003f34:	2301      	movne	r3, #1
 8003f36:	2300      	moveq	r3, #0
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d18d      	bne.n	8003e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f54:	e02d      	b.n	8003fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 f8ce 	bl	80040f8 <I2C_IsAcknowledgeFailed>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e02d      	b.n	8003fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6c:	d021      	beq.n	8003fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f6e:	f7fe fb15 	bl	800259c <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d302      	bcc.n	8003f84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d116      	bne.n	8003fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	f043 0220 	orr.w	r2, r3, #32
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e007      	b.n	8003fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fbc:	2b80      	cmp	r3, #128	; 0x80
 8003fbe:	d1ca      	bne.n	8003f56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b084      	sub	sp, #16
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	60f8      	str	r0, [r7, #12]
 8003fd2:	60b9      	str	r1, [r7, #8]
 8003fd4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fd6:	e02d      	b.n	8004034 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 f88d 	bl	80040f8 <I2C_IsAcknowledgeFailed>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e02d      	b.n	8004044 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fee:	d021      	beq.n	8004034 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ff0:	f7fe fad4 	bl	800259c <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d302      	bcc.n	8004006 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d116      	bne.n	8004034 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004020:	f043 0220 	orr.w	r2, r3, #32
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e007      	b.n	8004044 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	f003 0304 	and.w	r3, r3, #4
 800403e:	2b04      	cmp	r3, #4
 8004040:	d1ca      	bne.n	8003fd8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004058:	e042      	b.n	80040e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	f003 0310 	and.w	r3, r3, #16
 8004064:	2b10      	cmp	r3, #16
 8004066:	d119      	bne.n	800409c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f06f 0210 	mvn.w	r2, #16
 8004070:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e029      	b.n	80040f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800409c:	f7fe fa7e 	bl	800259c <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d302      	bcc.n	80040b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d116      	bne.n	80040e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2220      	movs	r2, #32
 80040bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040cc:	f043 0220 	orr.w	r2, r3, #32
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e007      	b.n	80040f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ea:	2b40      	cmp	r3, #64	; 0x40
 80040ec:	d1b5      	bne.n	800405a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800410a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800410e:	d11b      	bne.n	8004148 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004118:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2220      	movs	r2, #32
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004134:	f043 0204 	orr.w	r2, r3, #4
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e000      	b.n	800414a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004156:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004158:	b08f      	sub	sp, #60	; 0x3c
 800415a:	af0a      	add	r7, sp, #40	; 0x28
 800415c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e10f      	b.n	8004388 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d106      	bne.n	8004188 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f009 feae 	bl	800dee4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2203      	movs	r2, #3
 800418c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004198:	2b00      	cmp	r3, #0
 800419a:	d102      	bne.n	80041a2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f003 fc21 	bl	80079ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	603b      	str	r3, [r7, #0]
 80041b2:	687e      	ldr	r6, [r7, #4]
 80041b4:	466d      	mov	r5, sp
 80041b6:	f106 0410 	add.w	r4, r6, #16
 80041ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80041c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80041ca:	1d33      	adds	r3, r6, #4
 80041cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041ce:	6838      	ldr	r0, [r7, #0]
 80041d0:	f003 faf8 	bl	80077c4 <USB_CoreInit>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d005      	beq.n	80041e6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2202      	movs	r2, #2
 80041de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e0d0      	b.n	8004388 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2100      	movs	r1, #0
 80041ec:	4618      	mov	r0, r3
 80041ee:	f003 fc0f 	bl	8007a10 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041f2:	2300      	movs	r3, #0
 80041f4:	73fb      	strb	r3, [r7, #15]
 80041f6:	e04a      	b.n	800428e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80041f8:	7bfa      	ldrb	r2, [r7, #15]
 80041fa:	6879      	ldr	r1, [r7, #4]
 80041fc:	4613      	mov	r3, r2
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	4413      	add	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	440b      	add	r3, r1
 8004206:	333d      	adds	r3, #61	; 0x3d
 8004208:	2201      	movs	r2, #1
 800420a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800420c:	7bfa      	ldrb	r2, [r7, #15]
 800420e:	6879      	ldr	r1, [r7, #4]
 8004210:	4613      	mov	r3, r2
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	4413      	add	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	440b      	add	r3, r1
 800421a:	333c      	adds	r3, #60	; 0x3c
 800421c:	7bfa      	ldrb	r2, [r7, #15]
 800421e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004220:	7bfa      	ldrb	r2, [r7, #15]
 8004222:	7bfb      	ldrb	r3, [r7, #15]
 8004224:	b298      	uxth	r0, r3
 8004226:	6879      	ldr	r1, [r7, #4]
 8004228:	4613      	mov	r3, r2
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	4413      	add	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	440b      	add	r3, r1
 8004232:	3344      	adds	r3, #68	; 0x44
 8004234:	4602      	mov	r2, r0
 8004236:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004238:	7bfa      	ldrb	r2, [r7, #15]
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	4613      	mov	r3, r2
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	4413      	add	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	440b      	add	r3, r1
 8004246:	3340      	adds	r3, #64	; 0x40
 8004248:	2200      	movs	r2, #0
 800424a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800424c:	7bfa      	ldrb	r2, [r7, #15]
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	4613      	mov	r3, r2
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	4413      	add	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	440b      	add	r3, r1
 800425a:	3348      	adds	r3, #72	; 0x48
 800425c:	2200      	movs	r2, #0
 800425e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004260:	7bfa      	ldrb	r2, [r7, #15]
 8004262:	6879      	ldr	r1, [r7, #4]
 8004264:	4613      	mov	r3, r2
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	4413      	add	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	440b      	add	r3, r1
 800426e:	334c      	adds	r3, #76	; 0x4c
 8004270:	2200      	movs	r2, #0
 8004272:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004274:	7bfa      	ldrb	r2, [r7, #15]
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	4613      	mov	r3, r2
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	4413      	add	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	440b      	add	r3, r1
 8004282:	3354      	adds	r3, #84	; 0x54
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004288:	7bfb      	ldrb	r3, [r7, #15]
 800428a:	3301      	adds	r3, #1
 800428c:	73fb      	strb	r3, [r7, #15]
 800428e:	7bfa      	ldrb	r2, [r7, #15]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	429a      	cmp	r2, r3
 8004296:	d3af      	bcc.n	80041f8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004298:	2300      	movs	r3, #0
 800429a:	73fb      	strb	r3, [r7, #15]
 800429c:	e044      	b.n	8004328 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800429e:	7bfa      	ldrb	r2, [r7, #15]
 80042a0:	6879      	ldr	r1, [r7, #4]
 80042a2:	4613      	mov	r3, r2
 80042a4:	00db      	lsls	r3, r3, #3
 80042a6:	4413      	add	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	440b      	add	r3, r1
 80042ac:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80042b0:	2200      	movs	r2, #0
 80042b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80042b4:	7bfa      	ldrb	r2, [r7, #15]
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	4613      	mov	r3, r2
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	4413      	add	r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	440b      	add	r3, r1
 80042c2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80042c6:	7bfa      	ldrb	r2, [r7, #15]
 80042c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80042ca:	7bfa      	ldrb	r2, [r7, #15]
 80042cc:	6879      	ldr	r1, [r7, #4]
 80042ce:	4613      	mov	r3, r2
 80042d0:	00db      	lsls	r3, r3, #3
 80042d2:	4413      	add	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	440b      	add	r3, r1
 80042d8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80042dc:	2200      	movs	r2, #0
 80042de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80042e0:	7bfa      	ldrb	r2, [r7, #15]
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	4613      	mov	r3, r2
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	4413      	add	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	440b      	add	r3, r1
 80042ee:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80042f6:	7bfa      	ldrb	r2, [r7, #15]
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	4613      	mov	r3, r2
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	4413      	add	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	440b      	add	r3, r1
 8004304:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800430c:	7bfa      	ldrb	r2, [r7, #15]
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	4613      	mov	r3, r2
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	4413      	add	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800431e:	2200      	movs	r2, #0
 8004320:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004322:	7bfb      	ldrb	r3, [r7, #15]
 8004324:	3301      	adds	r3, #1
 8004326:	73fb      	strb	r3, [r7, #15]
 8004328:	7bfa      	ldrb	r2, [r7, #15]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	429a      	cmp	r2, r3
 8004330:	d3b5      	bcc.n	800429e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	603b      	str	r3, [r7, #0]
 8004338:	687e      	ldr	r6, [r7, #4]
 800433a:	466d      	mov	r5, sp
 800433c:	f106 0410 	add.w	r4, r6, #16
 8004340:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004342:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004344:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004346:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004348:	e894 0003 	ldmia.w	r4, {r0, r1}
 800434c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004350:	1d33      	adds	r3, r6, #4
 8004352:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004354:	6838      	ldr	r0, [r7, #0]
 8004356:	f003 fba7 	bl	8007aa8 <USB_DevInit>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d005      	beq.n	800436c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2202      	movs	r2, #2
 8004364:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e00d      	b.n	8004388 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4618      	mov	r0, r3
 8004382:	f004 fcf6 	bl	8008d72 <USB_DevDisconnect>

  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3714      	adds	r7, #20
 800438c:	46bd      	mov	sp, r7
 800438e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004390 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d101      	bne.n	80043ac <HAL_PCD_Start+0x1c>
 80043a8:	2302      	movs	r3, #2
 80043aa:	e020      	b.n	80043ee <HAL_PCD_Start+0x5e>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d109      	bne.n	80043d0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d005      	beq.n	80043d0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f003 faf9 	bl	80079cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4618      	mov	r0, r3
 80043e0:	f004 fca6 	bl	8008d30 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80043f6:	b590      	push	{r4, r7, lr}
 80043f8:	b08d      	sub	sp, #52	; 0x34
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004404:	6a3b      	ldr	r3, [r7, #32]
 8004406:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4618      	mov	r0, r3
 800440e:	f004 fd64 	bl	8008eda <USB_GetMode>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	f040 848a 	bne.w	8004d2e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f004 fcc8 	bl	8008db4 <USB_ReadInterrupts>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 8480 	beq.w	8004d2c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	0a1b      	lsrs	r3, r3, #8
 8004436:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4618      	mov	r0, r3
 8004446:	f004 fcb5 	bl	8008db4 <USB_ReadInterrupts>
 800444a:	4603      	mov	r3, r0
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b02      	cmp	r3, #2
 8004452:	d107      	bne.n	8004464 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	695a      	ldr	r2, [r3, #20]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f002 0202 	and.w	r2, r2, #2
 8004462:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4618      	mov	r0, r3
 800446a:	f004 fca3 	bl	8008db4 <USB_ReadInterrupts>
 800446e:	4603      	mov	r3, r0
 8004470:	f003 0310 	and.w	r3, r3, #16
 8004474:	2b10      	cmp	r3, #16
 8004476:	d161      	bne.n	800453c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	699a      	ldr	r2, [r3, #24]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 0210 	bic.w	r2, r2, #16
 8004486:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004488:	6a3b      	ldr	r3, [r7, #32]
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	f003 020f 	and.w	r2, r3, #15
 8004494:	4613      	mov	r3, r2
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	4413      	add	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	4413      	add	r3, r2
 80044a4:	3304      	adds	r3, #4
 80044a6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	0c5b      	lsrs	r3, r3, #17
 80044ac:	f003 030f 	and.w	r3, r3, #15
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d124      	bne.n	80044fe <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80044ba:	4013      	ands	r3, r2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d035      	beq.n	800452c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	091b      	lsrs	r3, r3, #4
 80044c8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80044ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	461a      	mov	r2, r3
 80044d2:	6a38      	ldr	r0, [r7, #32]
 80044d4:	f004 fada 	bl	8008a8c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	691a      	ldr	r2, [r3, #16]
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	091b      	lsrs	r3, r3, #4
 80044e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044e4:	441a      	add	r2, r3
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	6a1a      	ldr	r2, [r3, #32]
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	091b      	lsrs	r3, r3, #4
 80044f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044f6:	441a      	add	r2, r3
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	621a      	str	r2, [r3, #32]
 80044fc:	e016      	b.n	800452c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	0c5b      	lsrs	r3, r3, #17
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	2b06      	cmp	r3, #6
 8004508:	d110      	bne.n	800452c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004510:	2208      	movs	r2, #8
 8004512:	4619      	mov	r1, r3
 8004514:	6a38      	ldr	r0, [r7, #32]
 8004516:	f004 fab9 	bl	8008a8c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	6a1a      	ldr	r2, [r3, #32]
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	091b      	lsrs	r3, r3, #4
 8004522:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004526:	441a      	add	r2, r3
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	699a      	ldr	r2, [r3, #24]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f042 0210 	orr.w	r2, r2, #16
 800453a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4618      	mov	r0, r3
 8004542:	f004 fc37 	bl	8008db4 <USB_ReadInterrupts>
 8004546:	4603      	mov	r3, r0
 8004548:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800454c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004550:	f040 80a7 	bne.w	80046a2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4618      	mov	r0, r3
 800455e:	f004 fc3c 	bl	8008dda <USB_ReadDevAllOutEpInterrupt>
 8004562:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004564:	e099      	b.n	800469a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 808e 	beq.w	800468e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004578:	b2d2      	uxtb	r2, r2
 800457a:	4611      	mov	r1, r2
 800457c:	4618      	mov	r0, r3
 800457e:	f004 fc60 	bl	8008e42 <USB_ReadDevOutEPInterrupt>
 8004582:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00c      	beq.n	80045a8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	015a      	lsls	r2, r3, #5
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	4413      	add	r3, r2
 8004596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800459a:	461a      	mov	r2, r3
 800459c:	2301      	movs	r3, #1
 800459e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80045a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 feaa 	bl	80052fc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	f003 0308 	and.w	r3, r3, #8
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00c      	beq.n	80045cc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80045b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045be:	461a      	mov	r2, r3
 80045c0:	2308      	movs	r3, #8
 80045c2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80045c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 ff80 	bl	80054cc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	f003 0310 	and.w	r3, r3, #16
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d008      	beq.n	80045e8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	015a      	lsls	r2, r3, #5
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	4413      	add	r3, r2
 80045de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e2:	461a      	mov	r2, r3
 80045e4:	2310      	movs	r3, #16
 80045e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d030      	beq.n	8004654 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80045f2:	6a3b      	ldr	r3, [r7, #32]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fa:	2b80      	cmp	r3, #128	; 0x80
 80045fc:	d109      	bne.n	8004612 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	69fa      	ldr	r2, [r7, #28]
 8004608:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800460c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004610:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004614:	4613      	mov	r3, r2
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	4413      	add	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	4413      	add	r3, r2
 8004624:	3304      	adds	r3, #4
 8004626:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	78db      	ldrb	r3, [r3, #3]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d108      	bne.n	8004642 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	2200      	movs	r2, #0
 8004634:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	b2db      	uxtb	r3, r3
 800463a:	4619      	mov	r1, r3
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f009 fd4d 	bl	800e0dc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	015a      	lsls	r2, r3, #5
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	4413      	add	r3, r2
 800464a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800464e:	461a      	mov	r2, r3
 8004650:	2302      	movs	r3, #2
 8004652:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f003 0320 	and.w	r3, r3, #32
 800465a:	2b00      	cmp	r3, #0
 800465c:	d008      	beq.n	8004670 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	015a      	lsls	r2, r3, #5
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	4413      	add	r3, r2
 8004666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466a:	461a      	mov	r2, r3
 800466c:	2320      	movs	r3, #32
 800466e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d009      	beq.n	800468e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467c:	015a      	lsls	r2, r3, #5
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	4413      	add	r3, r2
 8004682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004686:	461a      	mov	r2, r3
 8004688:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800468c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	3301      	adds	r3, #1
 8004692:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004696:	085b      	lsrs	r3, r3, #1
 8004698:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800469a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469c:	2b00      	cmp	r3, #0
 800469e:	f47f af62 	bne.w	8004566 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f004 fb84 	bl	8008db4 <USB_ReadInterrupts>
 80046ac:	4603      	mov	r3, r0
 80046ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046b6:	f040 80db 	bne.w	8004870 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4618      	mov	r0, r3
 80046c0:	f004 fba5 	bl	8008e0e <USB_ReadDevAllInEpInterrupt>
 80046c4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80046ca:	e0cd      	b.n	8004868 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80046cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 80c2 	beq.w	800485c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046de:	b2d2      	uxtb	r2, r2
 80046e0:	4611      	mov	r1, r2
 80046e2:	4618      	mov	r0, r3
 80046e4:	f004 fbcb 	bl	8008e7e <USB_ReadDevInEPInterrupt>
 80046e8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d057      	beq.n	80047a4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	2201      	movs	r2, #1
 80046fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004700:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	43db      	mvns	r3, r3
 800470e:	69f9      	ldr	r1, [r7, #28]
 8004710:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004714:	4013      	ands	r3, r2
 8004716:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	4413      	add	r3, r2
 8004720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004724:	461a      	mov	r2, r3
 8004726:	2301      	movs	r3, #1
 8004728:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d132      	bne.n	8004798 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004732:	6879      	ldr	r1, [r7, #4]
 8004734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004736:	4613      	mov	r3, r2
 8004738:	00db      	lsls	r3, r3, #3
 800473a:	4413      	add	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	440b      	add	r3, r1
 8004740:	334c      	adds	r3, #76	; 0x4c
 8004742:	6819      	ldr	r1, [r3, #0]
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004748:	4613      	mov	r3, r2
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	4413      	add	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4403      	add	r3, r0
 8004752:	3348      	adds	r3, #72	; 0x48
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4419      	add	r1, r3
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800475c:	4613      	mov	r3, r2
 800475e:	00db      	lsls	r3, r3, #3
 8004760:	4413      	add	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4403      	add	r3, r0
 8004766:	334c      	adds	r3, #76	; 0x4c
 8004768:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	2b00      	cmp	r3, #0
 800476e:	d113      	bne.n	8004798 <HAL_PCD_IRQHandler+0x3a2>
 8004770:	6879      	ldr	r1, [r7, #4]
 8004772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004774:	4613      	mov	r3, r2
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	4413      	add	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	440b      	add	r3, r1
 800477e:	3354      	adds	r3, #84	; 0x54
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d108      	bne.n	8004798 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6818      	ldr	r0, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004790:	461a      	mov	r2, r3
 8004792:	2101      	movs	r1, #1
 8004794:	f004 fbd2 	bl	8008f3c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	b2db      	uxtb	r3, r3
 800479c:	4619      	mov	r1, r3
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f009 fc21 	bl	800dfe6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	f003 0308 	and.w	r3, r3, #8
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d008      	beq.n	80047c0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	015a      	lsls	r2, r3, #5
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	4413      	add	r3, r2
 80047b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ba:	461a      	mov	r2, r3
 80047bc:	2308      	movs	r3, #8
 80047be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	f003 0310 	and.w	r3, r3, #16
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d008      	beq.n	80047dc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	015a      	lsls	r2, r3, #5
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d6:	461a      	mov	r2, r3
 80047d8:	2310      	movs	r3, #16
 80047da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d008      	beq.n	80047f8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	015a      	lsls	r2, r3, #5
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	4413      	add	r3, r2
 80047ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f2:	461a      	mov	r2, r3
 80047f4:	2340      	movs	r3, #64	; 0x40
 80047f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d023      	beq.n	800484a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004802:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004804:	6a38      	ldr	r0, [r7, #32]
 8004806:	f003 fab3 	bl	8007d70 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800480a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800480c:	4613      	mov	r3, r2
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	4413      	add	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	3338      	adds	r3, #56	; 0x38
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	4413      	add	r3, r2
 800481a:	3304      	adds	r3, #4
 800481c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	78db      	ldrb	r3, [r3, #3]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d108      	bne.n	8004838 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	2200      	movs	r2, #0
 800482a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	b2db      	uxtb	r3, r3
 8004830:	4619      	mov	r1, r3
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f009 fc64 	bl	800e100 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483a:	015a      	lsls	r2, r3, #5
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	4413      	add	r3, r2
 8004840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004844:	461a      	mov	r2, r3
 8004846:	2302      	movs	r3, #2
 8004848:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004850:	2b00      	cmp	r3, #0
 8004852:	d003      	beq.n	800485c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004854:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 fcc3 	bl	80051e2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485e:	3301      	adds	r3, #1
 8004860:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004864:	085b      	lsrs	r3, r3, #1
 8004866:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486a:	2b00      	cmp	r3, #0
 800486c:	f47f af2e 	bne.w	80046cc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4618      	mov	r0, r3
 8004876:	f004 fa9d 	bl	8008db4 <USB_ReadInterrupts>
 800487a:	4603      	mov	r3, r0
 800487c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004880:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004884:	d122      	bne.n	80048cc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	69fa      	ldr	r2, [r7, #28]
 8004890:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004894:	f023 0301 	bic.w	r3, r3, #1
 8004898:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d108      	bne.n	80048b6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80048ac:	2100      	movs	r1, #0
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 feaa 	bl	8005608 <HAL_PCDEx_LPM_Callback>
 80048b4:	e002      	b.n	80048bc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f009 fc02 	bl	800e0c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	695a      	ldr	r2, [r3, #20]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80048ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f004 fa6f 	bl	8008db4 <USB_ReadInterrupts>
 80048d6:	4603      	mov	r3, r0
 80048d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048e0:	d112      	bne.n	8004908 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d102      	bne.n	80048f8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f009 fbbe 	bl	800e074 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	695a      	ldr	r2, [r3, #20]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004906:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4618      	mov	r0, r3
 800490e:	f004 fa51 	bl	8008db4 <USB_ReadInterrupts>
 8004912:	4603      	mov	r3, r0
 8004914:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800491c:	f040 80b7 	bne.w	8004a8e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	69fa      	ldr	r2, [r7, #28]
 800492a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800492e:	f023 0301 	bic.w	r3, r3, #1
 8004932:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2110      	movs	r1, #16
 800493a:	4618      	mov	r0, r3
 800493c:	f003 fa18 	bl	8007d70 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004940:	2300      	movs	r3, #0
 8004942:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004944:	e046      	b.n	80049d4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004948:	015a      	lsls	r2, r3, #5
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	4413      	add	r3, r2
 800494e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004952:	461a      	mov	r2, r3
 8004954:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004958:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800495a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495c:	015a      	lsls	r2, r3, #5
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	4413      	add	r3, r2
 8004962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800496a:	0151      	lsls	r1, r2, #5
 800496c:	69fa      	ldr	r2, [r7, #28]
 800496e:	440a      	add	r2, r1
 8004970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004974:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004978:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800497a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497c:	015a      	lsls	r2, r3, #5
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	4413      	add	r3, r2
 8004982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004986:	461a      	mov	r2, r3
 8004988:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800498c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800498e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004990:	015a      	lsls	r2, r3, #5
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	4413      	add	r3, r2
 8004996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800499e:	0151      	lsls	r1, r2, #5
 80049a0:	69fa      	ldr	r2, [r7, #28]
 80049a2:	440a      	add	r2, r1
 80049a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80049ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80049ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b0:	015a      	lsls	r2, r3, #5
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	4413      	add	r3, r2
 80049b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049be:	0151      	lsls	r1, r2, #5
 80049c0:	69fa      	ldr	r2, [r7, #28]
 80049c2:	440a      	add	r2, r1
 80049c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80049cc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d0:	3301      	adds	r3, #1
 80049d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049da:	429a      	cmp	r2, r3
 80049dc:	d3b3      	bcc.n	8004946 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	69fa      	ldr	r2, [r7, #28]
 80049e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049ec:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80049f0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d016      	beq.n	8004a28 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a04:	69fa      	ldr	r2, [r7, #28]
 8004a06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a0a:	f043 030b 	orr.w	r3, r3, #11
 8004a0e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1a:	69fa      	ldr	r2, [r7, #28]
 8004a1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a20:	f043 030b 	orr.w	r3, r3, #11
 8004a24:	6453      	str	r3, [r2, #68]	; 0x44
 8004a26:	e015      	b.n	8004a54 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	69fa      	ldr	r2, [r7, #28]
 8004a32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a36:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004a3a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004a3e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	69fa      	ldr	r2, [r7, #28]
 8004a4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a4e:	f043 030b 	orr.w	r3, r3, #11
 8004a52:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	69fa      	ldr	r2, [r7, #28]
 8004a5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a62:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004a66:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6818      	ldr	r0, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004a78:	461a      	mov	r2, r3
 8004a7a:	f004 fa5f 	bl	8008f3c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	695a      	ldr	r2, [r3, #20]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004a8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f004 f98e 	bl	8008db4 <USB_ReadInterrupts>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aa2:	d124      	bne.n	8004aee <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f004 fa24 	bl	8008ef6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f003 f9d9 	bl	8007e6a <USB_GetDevSpeed>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	461a      	mov	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681c      	ldr	r4, [r3, #0]
 8004ac4:	f001 fa10 	bl	8005ee8 <HAL_RCC_GetHCLKFreq>
 8004ac8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	4620      	mov	r0, r4
 8004ad4:	f002 fed8 	bl	8007888 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f009 faac 	bl	800e036 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	695a      	ldr	r2, [r3, #20]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004aec:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f004 f95e 	bl	8008db4 <USB_ReadInterrupts>
 8004af8:	4603      	mov	r3, r0
 8004afa:	f003 0308 	and.w	r3, r3, #8
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	d10a      	bne.n	8004b18 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f009 fa89 	bl	800e01a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	695a      	ldr	r2, [r3, #20]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f002 0208 	and.w	r2, r2, #8
 8004b16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f004 f949 	bl	8008db4 <USB_ReadInterrupts>
 8004b22:	4603      	mov	r3, r0
 8004b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b28:	2b80      	cmp	r3, #128	; 0x80
 8004b2a:	d122      	bne.n	8004b72 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004b2c:	6a3b      	ldr	r3, [r7, #32]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b34:	6a3b      	ldr	r3, [r7, #32]
 8004b36:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b38:	2301      	movs	r3, #1
 8004b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b3c:	e014      	b.n	8004b68 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004b3e:	6879      	ldr	r1, [r7, #4]
 8004b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b42:	4613      	mov	r3, r2
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	4413      	add	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	440b      	add	r3, r1
 8004b4c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d105      	bne.n	8004b62 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 fb0f 	bl	8005180 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b64:	3301      	adds	r3, #1
 8004b66:	627b      	str	r3, [r7, #36]	; 0x24
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d3e5      	bcc.n	8004b3e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f004 f91c 	bl	8008db4 <USB_ReadInterrupts>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b86:	d13b      	bne.n	8004c00 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b88:	2301      	movs	r3, #1
 8004b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b8c:	e02b      	b.n	8004be6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b9e:	6879      	ldr	r1, [r7, #4]
 8004ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	00db      	lsls	r3, r3, #3
 8004ba6:	4413      	add	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	440b      	add	r3, r1
 8004bac:	3340      	adds	r3, #64	; 0x40
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d115      	bne.n	8004be0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004bb4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	da12      	bge.n	8004be0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004bba:	6879      	ldr	r1, [r7, #4]
 8004bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	00db      	lsls	r3, r3, #3
 8004bc2:	4413      	add	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	440b      	add	r3, r1
 8004bc8:	333f      	adds	r3, #63	; 0x3f
 8004bca:	2201      	movs	r2, #1
 8004bcc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	4619      	mov	r1, r3
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 fad0 	bl	8005180 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	3301      	adds	r3, #1
 8004be4:	627b      	str	r3, [r7, #36]	; 0x24
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d3ce      	bcc.n	8004b8e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	695a      	ldr	r2, [r3, #20]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004bfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f004 f8d5 	bl	8008db4 <USB_ReadInterrupts>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c14:	d155      	bne.n	8004cc2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c16:	2301      	movs	r3, #1
 8004c18:	627b      	str	r3, [r7, #36]	; 0x24
 8004c1a:	e045      	b.n	8004ca8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c2c:	6879      	ldr	r1, [r7, #4]
 8004c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c30:	4613      	mov	r3, r2
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	4413      	add	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	440b      	add	r3, r1
 8004c3a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d12e      	bne.n	8004ca2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004c44:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	da2b      	bge.n	8004ca2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004c56:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d121      	bne.n	8004ca2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004c5e:	6879      	ldr	r1, [r7, #4]
 8004c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c62:	4613      	mov	r3, r2
 8004c64:	00db      	lsls	r3, r3, #3
 8004c66:	4413      	add	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	440b      	add	r3, r1
 8004c6c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004c70:	2201      	movs	r2, #1
 8004c72:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004c74:	6a3b      	ldr	r3, [r7, #32]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004c7c:	6a3b      	ldr	r3, [r7, #32]
 8004c7e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10a      	bne.n	8004ca2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	69fa      	ldr	r2, [r7, #28]
 8004c96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c9e:	6053      	str	r3, [r2, #4]
            break;
 8004ca0:	e007      	b.n	8004cb2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d3b4      	bcc.n	8004c1c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	695a      	ldr	r2, [r3, #20]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004cc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f004 f874 	bl	8008db4 <USB_ReadInterrupts>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd6:	d10a      	bne.n	8004cee <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f009 fa23 	bl	800e124 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	695a      	ldr	r2, [r3, #20]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004cec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f004 f85e 	bl	8008db4 <USB_ReadInterrupts>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	f003 0304 	and.w	r3, r3, #4
 8004cfe:	2b04      	cmp	r3, #4
 8004d00:	d115      	bne.n	8004d2e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	f003 0304 	and.w	r3, r3, #4
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d002      	beq.n	8004d1a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f009 fa13 	bl	800e140 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6859      	ldr	r1, [r3, #4]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	605a      	str	r2, [r3, #4]
 8004d2a:	e000      	b.n	8004d2e <HAL_PCD_IRQHandler+0x938>
      return;
 8004d2c:	bf00      	nop
    }
  }
}
 8004d2e:	3734      	adds	r7, #52	; 0x34
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd90      	pop	{r4, r7, pc}

08004d34 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d101      	bne.n	8004d4e <HAL_PCD_SetAddress+0x1a>
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	e013      	b.n	8004d76 <HAL_PCD_SetAddress+0x42>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	78fa      	ldrb	r2, [r7, #3]
 8004d5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	78fa      	ldrb	r2, [r7, #3]
 8004d64:	4611      	mov	r1, r2
 8004d66:	4618      	mov	r0, r3
 8004d68:	f003 ffbc 	bl	8008ce4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b084      	sub	sp, #16
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
 8004d86:	4608      	mov	r0, r1
 8004d88:	4611      	mov	r1, r2
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	70fb      	strb	r3, [r7, #3]
 8004d90:	460b      	mov	r3, r1
 8004d92:	803b      	strh	r3, [r7, #0]
 8004d94:	4613      	mov	r3, r2
 8004d96:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	da0f      	bge.n	8004dc4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004da4:	78fb      	ldrb	r3, [r7, #3]
 8004da6:	f003 020f 	and.w	r2, r3, #15
 8004daa:	4613      	mov	r3, r2
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	4413      	add	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	3338      	adds	r3, #56	; 0x38
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	4413      	add	r3, r2
 8004db8:	3304      	adds	r3, #4
 8004dba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	705a      	strb	r2, [r3, #1]
 8004dc2:	e00f      	b.n	8004de4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dc4:	78fb      	ldrb	r3, [r7, #3]
 8004dc6:	f003 020f 	and.w	r2, r3, #15
 8004dca:	4613      	mov	r3, r2
 8004dcc:	00db      	lsls	r3, r3, #3
 8004dce:	4413      	add	r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	4413      	add	r3, r2
 8004dda:	3304      	adds	r3, #4
 8004ddc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004de4:	78fb      	ldrb	r3, [r7, #3]
 8004de6:	f003 030f 	and.w	r3, r3, #15
 8004dea:	b2da      	uxtb	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004df0:	883a      	ldrh	r2, [r7, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	78ba      	ldrb	r2, [r7, #2]
 8004dfa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	785b      	ldrb	r3, [r3, #1]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d004      	beq.n	8004e0e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004e0e:	78bb      	ldrb	r3, [r7, #2]
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d102      	bne.n	8004e1a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d101      	bne.n	8004e28 <HAL_PCD_EP_Open+0xaa>
 8004e24:	2302      	movs	r3, #2
 8004e26:	e00e      	b.n	8004e46 <HAL_PCD_EP_Open+0xc8>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68f9      	ldr	r1, [r7, #12]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f003 f83c 	bl	8007eb4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004e44:	7afb      	ldrb	r3, [r7, #11]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b084      	sub	sp, #16
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
 8004e56:	460b      	mov	r3, r1
 8004e58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	da0f      	bge.n	8004e82 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e62:	78fb      	ldrb	r3, [r7, #3]
 8004e64:	f003 020f 	and.w	r2, r3, #15
 8004e68:	4613      	mov	r3, r2
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	3338      	adds	r3, #56	; 0x38
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	4413      	add	r3, r2
 8004e76:	3304      	adds	r3, #4
 8004e78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	705a      	strb	r2, [r3, #1]
 8004e80:	e00f      	b.n	8004ea2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e82:	78fb      	ldrb	r3, [r7, #3]
 8004e84:	f003 020f 	and.w	r2, r3, #15
 8004e88:	4613      	mov	r3, r2
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	4413      	add	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	4413      	add	r3, r2
 8004e98:	3304      	adds	r3, #4
 8004e9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004ea2:	78fb      	ldrb	r3, [r7, #3]
 8004ea4:	f003 030f 	and.w	r3, r3, #15
 8004ea8:	b2da      	uxtb	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d101      	bne.n	8004ebc <HAL_PCD_EP_Close+0x6e>
 8004eb8:	2302      	movs	r3, #2
 8004eba:	e00e      	b.n	8004eda <HAL_PCD_EP_Close+0x8c>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68f9      	ldr	r1, [r7, #12]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f003 f87a 	bl	8007fc4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b086      	sub	sp, #24
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	60f8      	str	r0, [r7, #12]
 8004eea:	607a      	str	r2, [r7, #4]
 8004eec:	603b      	str	r3, [r7, #0]
 8004eee:	460b      	mov	r3, r1
 8004ef0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ef2:	7afb      	ldrb	r3, [r7, #11]
 8004ef4:	f003 020f 	and.w	r2, r3, #15
 8004ef8:	4613      	mov	r3, r2
 8004efa:	00db      	lsls	r3, r3, #3
 8004efc:	4413      	add	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	4413      	add	r3, r2
 8004f08:	3304      	adds	r3, #4
 8004f0a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	2200      	movs	r2, #0
 8004f22:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f24:	7afb      	ldrb	r3, [r7, #11]
 8004f26:	f003 030f 	and.w	r3, r3, #15
 8004f2a:	b2da      	uxtb	r2, r3
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d102      	bne.n	8004f3e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f3e:	7afb      	ldrb	r3, [r7, #11]
 8004f40:	f003 030f 	and.w	r3, r3, #15
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d109      	bne.n	8004f5c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6818      	ldr	r0, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	461a      	mov	r2, r3
 8004f54:	6979      	ldr	r1, [r7, #20]
 8004f56:	f003 fb59 	bl	800860c <USB_EP0StartXfer>
 8004f5a:	e008      	b.n	8004f6e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6818      	ldr	r0, [r3, #0]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	461a      	mov	r2, r3
 8004f68:	6979      	ldr	r1, [r7, #20]
 8004f6a:	f003 f907 	bl	800817c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3718      	adds	r7, #24
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	607a      	str	r2, [r7, #4]
 8004f82:	603b      	str	r3, [r7, #0]
 8004f84:	460b      	mov	r3, r1
 8004f86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f88:	7afb      	ldrb	r3, [r7, #11]
 8004f8a:	f003 020f 	and.w	r2, r3, #15
 8004f8e:	4613      	mov	r3, r2
 8004f90:	00db      	lsls	r3, r3, #3
 8004f92:	4413      	add	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	3338      	adds	r3, #56	; 0x38
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fb8:	7afb      	ldrb	r3, [r7, #11]
 8004fba:	f003 030f 	and.w	r3, r3, #15
 8004fbe:	b2da      	uxtb	r2, r3
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d102      	bne.n	8004fd2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004fd2:	7afb      	ldrb	r3, [r7, #11]
 8004fd4:	f003 030f 	and.w	r3, r3, #15
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d109      	bne.n	8004ff0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6818      	ldr	r0, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	6979      	ldr	r1, [r7, #20]
 8004fea:	f003 fb0f 	bl	800860c <USB_EP0StartXfer>
 8004fee:	e008      	b.n	8005002 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6818      	ldr	r0, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	6979      	ldr	r1, [r7, #20]
 8004ffe:	f003 f8bd 	bl	800817c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3718      	adds	r7, #24
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	460b      	mov	r3, r1
 8005016:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005018:	78fb      	ldrb	r3, [r7, #3]
 800501a:	f003 020f 	and.w	r2, r3, #15
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	429a      	cmp	r2, r3
 8005024:	d901      	bls.n	800502a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e050      	b.n	80050cc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800502a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800502e:	2b00      	cmp	r3, #0
 8005030:	da0f      	bge.n	8005052 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005032:	78fb      	ldrb	r3, [r7, #3]
 8005034:	f003 020f 	and.w	r2, r3, #15
 8005038:	4613      	mov	r3, r2
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	4413      	add	r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	3338      	adds	r3, #56	; 0x38
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	4413      	add	r3, r2
 8005046:	3304      	adds	r3, #4
 8005048:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2201      	movs	r2, #1
 800504e:	705a      	strb	r2, [r3, #1]
 8005050:	e00d      	b.n	800506e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005052:	78fa      	ldrb	r2, [r7, #3]
 8005054:	4613      	mov	r3, r2
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	4413      	add	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	4413      	add	r3, r2
 8005064:	3304      	adds	r3, #4
 8005066:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2201      	movs	r2, #1
 8005072:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005074:	78fb      	ldrb	r3, [r7, #3]
 8005076:	f003 030f 	and.w	r3, r3, #15
 800507a:	b2da      	uxtb	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005086:	2b01      	cmp	r3, #1
 8005088:	d101      	bne.n	800508e <HAL_PCD_EP_SetStall+0x82>
 800508a:	2302      	movs	r3, #2
 800508c:	e01e      	b.n	80050cc <HAL_PCD_EP_SetStall+0xc0>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68f9      	ldr	r1, [r7, #12]
 800509c:	4618      	mov	r0, r3
 800509e:	f003 fd4d 	bl	8008b3c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80050a2:	78fb      	ldrb	r3, [r7, #3]
 80050a4:	f003 030f 	and.w	r3, r3, #15
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10a      	bne.n	80050c2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6818      	ldr	r0, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	b2d9      	uxtb	r1, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80050bc:	461a      	mov	r2, r3
 80050be:	f003 ff3d 	bl	8008f3c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	460b      	mov	r3, r1
 80050de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80050e0:	78fb      	ldrb	r3, [r7, #3]
 80050e2:	f003 020f 	and.w	r2, r3, #15
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d901      	bls.n	80050f2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e042      	b.n	8005178 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80050f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	da0f      	bge.n	800511a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050fa:	78fb      	ldrb	r3, [r7, #3]
 80050fc:	f003 020f 	and.w	r2, r3, #15
 8005100:	4613      	mov	r3, r2
 8005102:	00db      	lsls	r3, r3, #3
 8005104:	4413      	add	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	3338      	adds	r3, #56	; 0x38
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	4413      	add	r3, r2
 800510e:	3304      	adds	r3, #4
 8005110:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2201      	movs	r2, #1
 8005116:	705a      	strb	r2, [r3, #1]
 8005118:	e00f      	b.n	800513a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800511a:	78fb      	ldrb	r3, [r7, #3]
 800511c:	f003 020f 	and.w	r2, r3, #15
 8005120:	4613      	mov	r3, r2
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	4413      	add	r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	4413      	add	r3, r2
 8005130:	3304      	adds	r3, #4
 8005132:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005140:	78fb      	ldrb	r3, [r7, #3]
 8005142:	f003 030f 	and.w	r3, r3, #15
 8005146:	b2da      	uxtb	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005152:	2b01      	cmp	r3, #1
 8005154:	d101      	bne.n	800515a <HAL_PCD_EP_ClrStall+0x86>
 8005156:	2302      	movs	r3, #2
 8005158:	e00e      	b.n	8005178 <HAL_PCD_EP_ClrStall+0xa4>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68f9      	ldr	r1, [r7, #12]
 8005168:	4618      	mov	r0, r3
 800516a:	f003 fd55 	bl	8008c18 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	460b      	mov	r3, r1
 800518a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800518c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005190:	2b00      	cmp	r3, #0
 8005192:	da0c      	bge.n	80051ae <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005194:	78fb      	ldrb	r3, [r7, #3]
 8005196:	f003 020f 	and.w	r2, r3, #15
 800519a:	4613      	mov	r3, r2
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	4413      	add	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	3338      	adds	r3, #56	; 0x38
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	4413      	add	r3, r2
 80051a8:	3304      	adds	r3, #4
 80051aa:	60fb      	str	r3, [r7, #12]
 80051ac:	e00c      	b.n	80051c8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051ae:	78fb      	ldrb	r3, [r7, #3]
 80051b0:	f003 020f 	and.w	r2, r3, #15
 80051b4:	4613      	mov	r3, r2
 80051b6:	00db      	lsls	r3, r3, #3
 80051b8:	4413      	add	r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	4413      	add	r3, r2
 80051c4:	3304      	adds	r3, #4
 80051c6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68f9      	ldr	r1, [r7, #12]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f003 fb74 	bl	80088bc <USB_EPStopXfer>
 80051d4:	4603      	mov	r3, r0
 80051d6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80051d8:	7afb      	ldrb	r3, [r7, #11]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b08a      	sub	sp, #40	; 0x28
 80051e6:	af02      	add	r7, sp, #8
 80051e8:	6078      	str	r0, [r7, #4]
 80051ea:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	4613      	mov	r3, r2
 80051fa:	00db      	lsls	r3, r3, #3
 80051fc:	4413      	add	r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	3338      	adds	r3, #56	; 0x38
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	4413      	add	r3, r2
 8005206:	3304      	adds	r3, #4
 8005208:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6a1a      	ldr	r2, [r3, #32]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	429a      	cmp	r2, r3
 8005214:	d901      	bls.n	800521a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e06c      	b.n	80052f4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	699a      	ldr	r2, [r3, #24]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	69fa      	ldr	r2, [r7, #28]
 800522c:	429a      	cmp	r2, r3
 800522e:	d902      	bls.n	8005236 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	3303      	adds	r3, #3
 800523a:	089b      	lsrs	r3, r3, #2
 800523c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800523e:	e02b      	b.n	8005298 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	699a      	ldr	r2, [r3, #24]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6a1b      	ldr	r3, [r3, #32]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	69fa      	ldr	r2, [r7, #28]
 8005252:	429a      	cmp	r2, r3
 8005254:	d902      	bls.n	800525c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	3303      	adds	r3, #3
 8005260:	089b      	lsrs	r3, r3, #2
 8005262:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6919      	ldr	r1, [r3, #16]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	b2da      	uxtb	r2, r3
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005274:	b2db      	uxtb	r3, r3
 8005276:	9300      	str	r3, [sp, #0]
 8005278:	4603      	mov	r3, r0
 800527a:	6978      	ldr	r0, [r7, #20]
 800527c:	f003 fbc8 	bl	8008a10 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	691a      	ldr	r2, [r3, #16]
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	441a      	add	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6a1a      	ldr	r2, [r3, #32]
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	441a      	add	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	69ba      	ldr	r2, [r7, #24]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d809      	bhi.n	80052c2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6a1a      	ldr	r2, [r3, #32]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d203      	bcs.n	80052c2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1be      	bne.n	8005240 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	699a      	ldr	r2, [r3, #24]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d811      	bhi.n	80052f2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	f003 030f 	and.w	r3, r3, #15
 80052d4:	2201      	movs	r2, #1
 80052d6:	fa02 f303 	lsl.w	r3, r2, r3
 80052da:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	43db      	mvns	r3, r3
 80052e8:	6939      	ldr	r1, [r7, #16]
 80052ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052ee:	4013      	ands	r3, r2
 80052f0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3720      	adds	r7, #32
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b088      	sub	sp, #32
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	333c      	adds	r3, #60	; 0x3c
 8005314:	3304      	adds	r3, #4
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	4413      	add	r3, r2
 8005322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d17b      	bne.n	800542a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	f003 0308 	and.w	r3, r3, #8
 8005338:	2b00      	cmp	r3, #0
 800533a:	d015      	beq.n	8005368 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	4a61      	ldr	r2, [pc, #388]	; (80054c4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005340:	4293      	cmp	r3, r2
 8005342:	f240 80b9 	bls.w	80054b8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 80b3 	beq.w	80054b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	015a      	lsls	r2, r3, #5
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	4413      	add	r3, r2
 800535a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800535e:	461a      	mov	r2, r3
 8005360:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005364:	6093      	str	r3, [r2, #8]
 8005366:	e0a7      	b.n	80054b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	f003 0320 	and.w	r3, r3, #32
 800536e:	2b00      	cmp	r3, #0
 8005370:	d009      	beq.n	8005386 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	015a      	lsls	r2, r3, #5
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	4413      	add	r3, r2
 800537a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800537e:	461a      	mov	r2, r3
 8005380:	2320      	movs	r3, #32
 8005382:	6093      	str	r3, [r2, #8]
 8005384:	e098      	b.n	80054b8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800538c:	2b00      	cmp	r3, #0
 800538e:	f040 8093 	bne.w	80054b8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	4a4b      	ldr	r2, [pc, #300]	; (80054c4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d90f      	bls.n	80053ba <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00a      	beq.n	80053ba <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	015a      	lsls	r2, r3, #5
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b0:	461a      	mov	r2, r3
 80053b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053b6:	6093      	str	r3, [r2, #8]
 80053b8:	e07e      	b.n	80054b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	4613      	mov	r3, r2
 80053be:	00db      	lsls	r3, r3, #3
 80053c0:	4413      	add	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	4413      	add	r3, r2
 80053cc:	3304      	adds	r3, #4
 80053ce:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	69da      	ldr	r2, [r3, #28]
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	0159      	lsls	r1, r3, #5
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	440b      	add	r3, r1
 80053dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053e6:	1ad2      	subs	r2, r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d114      	bne.n	800541c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d109      	bne.n	800540e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6818      	ldr	r0, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005404:	461a      	mov	r2, r3
 8005406:	2101      	movs	r1, #1
 8005408:	f003 fd98 	bl	8008f3c <USB_EP0_OutStart>
 800540c:	e006      	b.n	800541c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	691a      	ldr	r2, [r3, #16]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	441a      	add	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	b2db      	uxtb	r3, r3
 8005420:	4619      	mov	r1, r3
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f008 fdc4 	bl	800dfb0 <HAL_PCD_DataOutStageCallback>
 8005428:	e046      	b.n	80054b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	4a26      	ldr	r2, [pc, #152]	; (80054c8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d124      	bne.n	800547c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00a      	beq.n	8005452 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	015a      	lsls	r2, r3, #5
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	4413      	add	r3, r2
 8005444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005448:	461a      	mov	r2, r3
 800544a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800544e:	6093      	str	r3, [r2, #8]
 8005450:	e032      	b.n	80054b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	f003 0320 	and.w	r3, r3, #32
 8005458:	2b00      	cmp	r3, #0
 800545a:	d008      	beq.n	800546e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	4413      	add	r3, r2
 8005464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005468:	461a      	mov	r2, r3
 800546a:	2320      	movs	r3, #32
 800546c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	b2db      	uxtb	r3, r3
 8005472:	4619      	mov	r1, r3
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f008 fd9b 	bl	800dfb0 <HAL_PCD_DataOutStageCallback>
 800547a:	e01d      	b.n	80054b8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d114      	bne.n	80054ac <PCD_EP_OutXfrComplete_int+0x1b0>
 8005482:	6879      	ldr	r1, [r7, #4]
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	4613      	mov	r3, r2
 8005488:	00db      	lsls	r3, r3, #3
 800548a:	4413      	add	r3, r2
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	440b      	add	r3, r1
 8005490:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d108      	bne.n	80054ac <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6818      	ldr	r0, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80054a4:	461a      	mov	r2, r3
 80054a6:	2100      	movs	r1, #0
 80054a8:	f003 fd48 	bl	8008f3c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	4619      	mov	r1, r3
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f008 fd7c 	bl	800dfb0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3720      	adds	r7, #32
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	4f54300a 	.word	0x4f54300a
 80054c8:	4f54310a 	.word	0x4f54310a

080054cc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	333c      	adds	r3, #60	; 0x3c
 80054e4:	3304      	adds	r3, #4
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	015a      	lsls	r2, r3, #5
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	4413      	add	r3, r2
 80054f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	4a15      	ldr	r2, [pc, #84]	; (8005554 <PCD_EP_OutSetupPacket_int+0x88>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d90e      	bls.n	8005520 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005508:	2b00      	cmp	r3, #0
 800550a:	d009      	beq.n	8005520 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005518:	461a      	mov	r2, r3
 800551a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800551e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f008 fd33 	bl	800df8c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	4a0a      	ldr	r2, [pc, #40]	; (8005554 <PCD_EP_OutSetupPacket_int+0x88>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d90c      	bls.n	8005548 <PCD_EP_OutSetupPacket_int+0x7c>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	2b01      	cmp	r3, #1
 8005534:	d108      	bne.n	8005548 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6818      	ldr	r0, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005540:	461a      	mov	r2, r3
 8005542:	2101      	movs	r1, #1
 8005544:	f003 fcfa 	bl	8008f3c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3718      	adds	r7, #24
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	4f54300a 	.word	0x4f54300a

08005558 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	460b      	mov	r3, r1
 8005562:	70fb      	strb	r3, [r7, #3]
 8005564:	4613      	mov	r3, r2
 8005566:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005570:	78fb      	ldrb	r3, [r7, #3]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d107      	bne.n	8005586 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005576:	883b      	ldrh	r3, [r7, #0]
 8005578:	0419      	lsls	r1, r3, #16
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	430a      	orrs	r2, r1
 8005582:	629a      	str	r2, [r3, #40]	; 0x28
 8005584:	e028      	b.n	80055d8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558c:	0c1b      	lsrs	r3, r3, #16
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	4413      	add	r3, r2
 8005592:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005594:	2300      	movs	r3, #0
 8005596:	73fb      	strb	r3, [r7, #15]
 8005598:	e00d      	b.n	80055b6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	7bfb      	ldrb	r3, [r7, #15]
 80055a0:	3340      	adds	r3, #64	; 0x40
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4413      	add	r3, r2
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	0c1b      	lsrs	r3, r3, #16
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	4413      	add	r3, r2
 80055ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80055b0:	7bfb      	ldrb	r3, [r7, #15]
 80055b2:	3301      	adds	r3, #1
 80055b4:	73fb      	strb	r3, [r7, #15]
 80055b6:	7bfa      	ldrb	r2, [r7, #15]
 80055b8:	78fb      	ldrb	r3, [r7, #3]
 80055ba:	3b01      	subs	r3, #1
 80055bc:	429a      	cmp	r2, r3
 80055be:	d3ec      	bcc.n	800559a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80055c0:	883b      	ldrh	r3, [r7, #0]
 80055c2:	0418      	lsls	r0, r3, #16
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6819      	ldr	r1, [r3, #0]
 80055c8:	78fb      	ldrb	r3, [r7, #3]
 80055ca:	3b01      	subs	r3, #1
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	4302      	orrs	r2, r0
 80055d0:	3340      	adds	r3, #64	; 0x40
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	440b      	add	r3, r1
 80055d6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr

080055e6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80055e6:	b480      	push	{r7}
 80055e8:	b083      	sub	sp, #12
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
 80055ee:	460b      	mov	r3, r1
 80055f0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	887a      	ldrh	r2, [r7, #2]
 80055f8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	460b      	mov	r3, r1
 8005612:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e267      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	2b00      	cmp	r3, #0
 800563c:	d075      	beq.n	800572a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800563e:	4b88      	ldr	r3, [pc, #544]	; (8005860 <HAL_RCC_OscConfig+0x240>)
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f003 030c 	and.w	r3, r3, #12
 8005646:	2b04      	cmp	r3, #4
 8005648:	d00c      	beq.n	8005664 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800564a:	4b85      	ldr	r3, [pc, #532]	; (8005860 <HAL_RCC_OscConfig+0x240>)
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005652:	2b08      	cmp	r3, #8
 8005654:	d112      	bne.n	800567c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005656:	4b82      	ldr	r3, [pc, #520]	; (8005860 <HAL_RCC_OscConfig+0x240>)
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800565e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005662:	d10b      	bne.n	800567c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005664:	4b7e      	ldr	r3, [pc, #504]	; (8005860 <HAL_RCC_OscConfig+0x240>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d05b      	beq.n	8005728 <HAL_RCC_OscConfig+0x108>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d157      	bne.n	8005728 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e242      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005684:	d106      	bne.n	8005694 <HAL_RCC_OscConfig+0x74>
 8005686:	4b76      	ldr	r3, [pc, #472]	; (8005860 <HAL_RCC_OscConfig+0x240>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a75      	ldr	r2, [pc, #468]	; (8005860 <HAL_RCC_OscConfig+0x240>)
 800568c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005690:	6013      	str	r3, [r2, #0]
 8005692:	e01d      	b.n	80056d0 <HAL_RCC_OscConfig+0xb0>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800569c:	d10c      	bne.n	80056b8 <HAL_RCC_OscConfig+0x98>
 800569e:	4b70      	ldr	r3, [pc, #448]	; (8005860 <HAL_RCC_OscConfig+0x240>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a6f      	ldr	r2, [pc, #444]	; (8005860 <HAL_RCC_OscConfig+0x240>)
 80056a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056a8:	6013      	str	r3, [r2, #0]
 80056aa:	4b6d      	ldr	r3, [pc, #436]	; (8005860 <HAL_RCC_OscConfig+0x240>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a6c      	ldr	r2, [pc, #432]	; (8005860 <HAL_RCC_OscConfig+0x240>)
 80056b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056b4:	6013      	str	r3, [r2, #0]
 80056b6:	e00b      	b.n	80056d0 <HAL_RCC_OscConfig+0xb0>
 80056b8:	4b69      	ldr	r3, [pc, #420]	; (8005860 <HAL_RCC_OscConfig+0x240>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a68      	ldr	r2, [pc, #416]	; (8005860 <HAL_RCC_OscConfig+0x240>)
 80056be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056c2:	6013      	str	r3, [r2, #0]
 80056c4:	4b66      	ldr	r3, [pc, #408]	; (8005860 <HAL_RCC_OscConfig+0x240>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a65      	ldr	r2, [pc, #404]	; (8005860 <HAL_RCC_OscConfig+0x240>)
 80056ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d013      	beq.n	8005700 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d8:	f7fc ff60 	bl	800259c <HAL_GetTick>
 80056dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056de:	e008      	b.n	80056f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056e0:	f7fc ff5c 	bl	800259c <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b64      	cmp	r3, #100	; 0x64
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e207      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056f2:	4b5b      	ldr	r3, [pc, #364]	; (8005860 <HAL_RCC_OscConfig+0x240>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d0f0      	beq.n	80056e0 <HAL_RCC_OscConfig+0xc0>
 80056fe:	e014      	b.n	800572a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005700:	f7fc ff4c 	bl	800259c <HAL_GetTick>
 8005704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005706:	e008      	b.n	800571a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005708:	f7fc ff48 	bl	800259c <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	2b64      	cmp	r3, #100	; 0x64
 8005714:	d901      	bls.n	800571a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e1f3      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800571a:	4b51      	ldr	r3, [pc, #324]	; (8005860 <HAL_RCC_OscConfig+0x240>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1f0      	bne.n	8005708 <HAL_RCC_OscConfig+0xe8>
 8005726:	e000      	b.n	800572a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d063      	beq.n	80057fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005736:	4b4a      	ldr	r3, [pc, #296]	; (8005860 <HAL_RCC_OscConfig+0x240>)
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f003 030c 	and.w	r3, r3, #12
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00b      	beq.n	800575a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005742:	4b47      	ldr	r3, [pc, #284]	; (8005860 <HAL_RCC_OscConfig+0x240>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800574a:	2b08      	cmp	r3, #8
 800574c:	d11c      	bne.n	8005788 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800574e:	4b44      	ldr	r3, [pc, #272]	; (8005860 <HAL_RCC_OscConfig+0x240>)
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d116      	bne.n	8005788 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800575a:	4b41      	ldr	r3, [pc, #260]	; (8005860 <HAL_RCC_OscConfig+0x240>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d005      	beq.n	8005772 <HAL_RCC_OscConfig+0x152>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d001      	beq.n	8005772 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e1c7      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005772:	4b3b      	ldr	r3, [pc, #236]	; (8005860 <HAL_RCC_OscConfig+0x240>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	4937      	ldr	r1, [pc, #220]	; (8005860 <HAL_RCC_OscConfig+0x240>)
 8005782:	4313      	orrs	r3, r2
 8005784:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005786:	e03a      	b.n	80057fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d020      	beq.n	80057d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005790:	4b34      	ldr	r3, [pc, #208]	; (8005864 <HAL_RCC_OscConfig+0x244>)
 8005792:	2201      	movs	r2, #1
 8005794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005796:	f7fc ff01 	bl	800259c <HAL_GetTick>
 800579a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800579c:	e008      	b.n	80057b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800579e:	f7fc fefd 	bl	800259c <HAL_GetTick>
 80057a2:	4602      	mov	r2, r0
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d901      	bls.n	80057b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e1a8      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057b0:	4b2b      	ldr	r3, [pc, #172]	; (8005860 <HAL_RCC_OscConfig+0x240>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0302 	and.w	r3, r3, #2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d0f0      	beq.n	800579e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057bc:	4b28      	ldr	r3, [pc, #160]	; (8005860 <HAL_RCC_OscConfig+0x240>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	00db      	lsls	r3, r3, #3
 80057ca:	4925      	ldr	r1, [pc, #148]	; (8005860 <HAL_RCC_OscConfig+0x240>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	600b      	str	r3, [r1, #0]
 80057d0:	e015      	b.n	80057fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057d2:	4b24      	ldr	r3, [pc, #144]	; (8005864 <HAL_RCC_OscConfig+0x244>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d8:	f7fc fee0 	bl	800259c <HAL_GetTick>
 80057dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057de:	e008      	b.n	80057f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057e0:	f7fc fedc 	bl	800259c <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d901      	bls.n	80057f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e187      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057f2:	4b1b      	ldr	r3, [pc, #108]	; (8005860 <HAL_RCC_OscConfig+0x240>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1f0      	bne.n	80057e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0308 	and.w	r3, r3, #8
 8005806:	2b00      	cmp	r3, #0
 8005808:	d036      	beq.n	8005878 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d016      	beq.n	8005840 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005812:	4b15      	ldr	r3, [pc, #84]	; (8005868 <HAL_RCC_OscConfig+0x248>)
 8005814:	2201      	movs	r2, #1
 8005816:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005818:	f7fc fec0 	bl	800259c <HAL_GetTick>
 800581c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800581e:	e008      	b.n	8005832 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005820:	f7fc febc 	bl	800259c <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b02      	cmp	r3, #2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e167      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005832:	4b0b      	ldr	r3, [pc, #44]	; (8005860 <HAL_RCC_OscConfig+0x240>)
 8005834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d0f0      	beq.n	8005820 <HAL_RCC_OscConfig+0x200>
 800583e:	e01b      	b.n	8005878 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005840:	4b09      	ldr	r3, [pc, #36]	; (8005868 <HAL_RCC_OscConfig+0x248>)
 8005842:	2200      	movs	r2, #0
 8005844:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005846:	f7fc fea9 	bl	800259c <HAL_GetTick>
 800584a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800584c:	e00e      	b.n	800586c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800584e:	f7fc fea5 	bl	800259c <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d907      	bls.n	800586c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e150      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
 8005860:	40023800 	.word	0x40023800
 8005864:	42470000 	.word	0x42470000
 8005868:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800586c:	4b88      	ldr	r3, [pc, #544]	; (8005a90 <HAL_RCC_OscConfig+0x470>)
 800586e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1ea      	bne.n	800584e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0304 	and.w	r3, r3, #4
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 8097 	beq.w	80059b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005886:	2300      	movs	r3, #0
 8005888:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800588a:	4b81      	ldr	r3, [pc, #516]	; (8005a90 <HAL_RCC_OscConfig+0x470>)
 800588c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10f      	bne.n	80058b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005896:	2300      	movs	r3, #0
 8005898:	60bb      	str	r3, [r7, #8]
 800589a:	4b7d      	ldr	r3, [pc, #500]	; (8005a90 <HAL_RCC_OscConfig+0x470>)
 800589c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589e:	4a7c      	ldr	r2, [pc, #496]	; (8005a90 <HAL_RCC_OscConfig+0x470>)
 80058a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058a4:	6413      	str	r3, [r2, #64]	; 0x40
 80058a6:	4b7a      	ldr	r3, [pc, #488]	; (8005a90 <HAL_RCC_OscConfig+0x470>)
 80058a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ae:	60bb      	str	r3, [r7, #8]
 80058b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058b2:	2301      	movs	r3, #1
 80058b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058b6:	4b77      	ldr	r3, [pc, #476]	; (8005a94 <HAL_RCC_OscConfig+0x474>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d118      	bne.n	80058f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058c2:	4b74      	ldr	r3, [pc, #464]	; (8005a94 <HAL_RCC_OscConfig+0x474>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a73      	ldr	r2, [pc, #460]	; (8005a94 <HAL_RCC_OscConfig+0x474>)
 80058c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058ce:	f7fc fe65 	bl	800259c <HAL_GetTick>
 80058d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058d4:	e008      	b.n	80058e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058d6:	f7fc fe61 	bl	800259c <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d901      	bls.n	80058e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e10c      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058e8:	4b6a      	ldr	r3, [pc, #424]	; (8005a94 <HAL_RCC_OscConfig+0x474>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d0f0      	beq.n	80058d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d106      	bne.n	800590a <HAL_RCC_OscConfig+0x2ea>
 80058fc:	4b64      	ldr	r3, [pc, #400]	; (8005a90 <HAL_RCC_OscConfig+0x470>)
 80058fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005900:	4a63      	ldr	r2, [pc, #396]	; (8005a90 <HAL_RCC_OscConfig+0x470>)
 8005902:	f043 0301 	orr.w	r3, r3, #1
 8005906:	6713      	str	r3, [r2, #112]	; 0x70
 8005908:	e01c      	b.n	8005944 <HAL_RCC_OscConfig+0x324>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	2b05      	cmp	r3, #5
 8005910:	d10c      	bne.n	800592c <HAL_RCC_OscConfig+0x30c>
 8005912:	4b5f      	ldr	r3, [pc, #380]	; (8005a90 <HAL_RCC_OscConfig+0x470>)
 8005914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005916:	4a5e      	ldr	r2, [pc, #376]	; (8005a90 <HAL_RCC_OscConfig+0x470>)
 8005918:	f043 0304 	orr.w	r3, r3, #4
 800591c:	6713      	str	r3, [r2, #112]	; 0x70
 800591e:	4b5c      	ldr	r3, [pc, #368]	; (8005a90 <HAL_RCC_OscConfig+0x470>)
 8005920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005922:	4a5b      	ldr	r2, [pc, #364]	; (8005a90 <HAL_RCC_OscConfig+0x470>)
 8005924:	f043 0301 	orr.w	r3, r3, #1
 8005928:	6713      	str	r3, [r2, #112]	; 0x70
 800592a:	e00b      	b.n	8005944 <HAL_RCC_OscConfig+0x324>
 800592c:	4b58      	ldr	r3, [pc, #352]	; (8005a90 <HAL_RCC_OscConfig+0x470>)
 800592e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005930:	4a57      	ldr	r2, [pc, #348]	; (8005a90 <HAL_RCC_OscConfig+0x470>)
 8005932:	f023 0301 	bic.w	r3, r3, #1
 8005936:	6713      	str	r3, [r2, #112]	; 0x70
 8005938:	4b55      	ldr	r3, [pc, #340]	; (8005a90 <HAL_RCC_OscConfig+0x470>)
 800593a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800593c:	4a54      	ldr	r2, [pc, #336]	; (8005a90 <HAL_RCC_OscConfig+0x470>)
 800593e:	f023 0304 	bic.w	r3, r3, #4
 8005942:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d015      	beq.n	8005978 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800594c:	f7fc fe26 	bl	800259c <HAL_GetTick>
 8005950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005952:	e00a      	b.n	800596a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005954:	f7fc fe22 	bl	800259c <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005962:	4293      	cmp	r3, r2
 8005964:	d901      	bls.n	800596a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e0cb      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800596a:	4b49      	ldr	r3, [pc, #292]	; (8005a90 <HAL_RCC_OscConfig+0x470>)
 800596c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d0ee      	beq.n	8005954 <HAL_RCC_OscConfig+0x334>
 8005976:	e014      	b.n	80059a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005978:	f7fc fe10 	bl	800259c <HAL_GetTick>
 800597c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800597e:	e00a      	b.n	8005996 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005980:	f7fc fe0c 	bl	800259c <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	f241 3288 	movw	r2, #5000	; 0x1388
 800598e:	4293      	cmp	r3, r2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e0b5      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005996:	4b3e      	ldr	r3, [pc, #248]	; (8005a90 <HAL_RCC_OscConfig+0x470>)
 8005998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1ee      	bne.n	8005980 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059a2:	7dfb      	ldrb	r3, [r7, #23]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d105      	bne.n	80059b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059a8:	4b39      	ldr	r3, [pc, #228]	; (8005a90 <HAL_RCC_OscConfig+0x470>)
 80059aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ac:	4a38      	ldr	r2, [pc, #224]	; (8005a90 <HAL_RCC_OscConfig+0x470>)
 80059ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f000 80a1 	beq.w	8005b00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059be:	4b34      	ldr	r3, [pc, #208]	; (8005a90 <HAL_RCC_OscConfig+0x470>)
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f003 030c 	and.w	r3, r3, #12
 80059c6:	2b08      	cmp	r3, #8
 80059c8:	d05c      	beq.n	8005a84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d141      	bne.n	8005a56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059d2:	4b31      	ldr	r3, [pc, #196]	; (8005a98 <HAL_RCC_OscConfig+0x478>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059d8:	f7fc fde0 	bl	800259c <HAL_GetTick>
 80059dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059de:	e008      	b.n	80059f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059e0:	f7fc fddc 	bl	800259c <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d901      	bls.n	80059f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e087      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059f2:	4b27      	ldr	r3, [pc, #156]	; (8005a90 <HAL_RCC_OscConfig+0x470>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1f0      	bne.n	80059e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	69da      	ldr	r2, [r3, #28]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	431a      	orrs	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0c:	019b      	lsls	r3, r3, #6
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a14:	085b      	lsrs	r3, r3, #1
 8005a16:	3b01      	subs	r3, #1
 8005a18:	041b      	lsls	r3, r3, #16
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a20:	061b      	lsls	r3, r3, #24
 8005a22:	491b      	ldr	r1, [pc, #108]	; (8005a90 <HAL_RCC_OscConfig+0x470>)
 8005a24:	4313      	orrs	r3, r2
 8005a26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a28:	4b1b      	ldr	r3, [pc, #108]	; (8005a98 <HAL_RCC_OscConfig+0x478>)
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a2e:	f7fc fdb5 	bl	800259c <HAL_GetTick>
 8005a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a34:	e008      	b.n	8005a48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a36:	f7fc fdb1 	bl	800259c <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d901      	bls.n	8005a48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e05c      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a48:	4b11      	ldr	r3, [pc, #68]	; (8005a90 <HAL_RCC_OscConfig+0x470>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d0f0      	beq.n	8005a36 <HAL_RCC_OscConfig+0x416>
 8005a54:	e054      	b.n	8005b00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a56:	4b10      	ldr	r3, [pc, #64]	; (8005a98 <HAL_RCC_OscConfig+0x478>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a5c:	f7fc fd9e 	bl	800259c <HAL_GetTick>
 8005a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a62:	e008      	b.n	8005a76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a64:	f7fc fd9a 	bl	800259c <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d901      	bls.n	8005a76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e045      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a76:	4b06      	ldr	r3, [pc, #24]	; (8005a90 <HAL_RCC_OscConfig+0x470>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1f0      	bne.n	8005a64 <HAL_RCC_OscConfig+0x444>
 8005a82:	e03d      	b.n	8005b00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d107      	bne.n	8005a9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e038      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
 8005a90:	40023800 	.word	0x40023800
 8005a94:	40007000 	.word	0x40007000
 8005a98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a9c:	4b1b      	ldr	r3, [pc, #108]	; (8005b0c <HAL_RCC_OscConfig+0x4ec>)
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d028      	beq.n	8005afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d121      	bne.n	8005afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d11a      	bne.n	8005afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005acc:	4013      	ands	r3, r2
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ad2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d111      	bne.n	8005afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae2:	085b      	lsrs	r3, r3, #1
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d107      	bne.n	8005afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d001      	beq.n	8005b00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e000      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3718      	adds	r7, #24
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	40023800 	.word	0x40023800

08005b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d101      	bne.n	8005b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e0cc      	b.n	8005cbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b24:	4b68      	ldr	r3, [pc, #416]	; (8005cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0307 	and.w	r3, r3, #7
 8005b2c:	683a      	ldr	r2, [r7, #0]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d90c      	bls.n	8005b4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b32:	4b65      	ldr	r3, [pc, #404]	; (8005cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b34:	683a      	ldr	r2, [r7, #0]
 8005b36:	b2d2      	uxtb	r2, r2
 8005b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b3a:	4b63      	ldr	r3, [pc, #396]	; (8005cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0307 	and.w	r3, r3, #7
 8005b42:	683a      	ldr	r2, [r7, #0]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d001      	beq.n	8005b4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e0b8      	b.n	8005cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0302 	and.w	r3, r3, #2
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d020      	beq.n	8005b9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0304 	and.w	r3, r3, #4
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d005      	beq.n	8005b70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b64:	4b59      	ldr	r3, [pc, #356]	; (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	4a58      	ldr	r2, [pc, #352]	; (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005b6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0308 	and.w	r3, r3, #8
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d005      	beq.n	8005b88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b7c:	4b53      	ldr	r3, [pc, #332]	; (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	4a52      	ldr	r2, [pc, #328]	; (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005b82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b88:	4b50      	ldr	r3, [pc, #320]	; (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	494d      	ldr	r1, [pc, #308]	; (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d044      	beq.n	8005c30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d107      	bne.n	8005bbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bae:	4b47      	ldr	r3, [pc, #284]	; (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d119      	bne.n	8005bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e07f      	b.n	8005cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d003      	beq.n	8005bce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bca:	2b03      	cmp	r3, #3
 8005bcc:	d107      	bne.n	8005bde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bce:	4b3f      	ldr	r3, [pc, #252]	; (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d109      	bne.n	8005bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e06f      	b.n	8005cbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bde:	4b3b      	ldr	r3, [pc, #236]	; (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0302 	and.w	r3, r3, #2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e067      	b.n	8005cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bee:	4b37      	ldr	r3, [pc, #220]	; (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f023 0203 	bic.w	r2, r3, #3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	4934      	ldr	r1, [pc, #208]	; (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c00:	f7fc fccc 	bl	800259c <HAL_GetTick>
 8005c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c06:	e00a      	b.n	8005c1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c08:	f7fc fcc8 	bl	800259c <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d901      	bls.n	8005c1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e04f      	b.n	8005cbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c1e:	4b2b      	ldr	r3, [pc, #172]	; (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f003 020c 	and.w	r2, r3, #12
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d1eb      	bne.n	8005c08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c30:	4b25      	ldr	r3, [pc, #148]	; (8005cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0307 	and.w	r3, r3, #7
 8005c38:	683a      	ldr	r2, [r7, #0]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d20c      	bcs.n	8005c58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c3e:	4b22      	ldr	r3, [pc, #136]	; (8005cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	b2d2      	uxtb	r2, r2
 8005c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c46:	4b20      	ldr	r3, [pc, #128]	; (8005cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0307 	and.w	r3, r3, #7
 8005c4e:	683a      	ldr	r2, [r7, #0]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d001      	beq.n	8005c58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e032      	b.n	8005cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0304 	and.w	r3, r3, #4
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d008      	beq.n	8005c76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c64:	4b19      	ldr	r3, [pc, #100]	; (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	4916      	ldr	r1, [pc, #88]	; (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0308 	and.w	r3, r3, #8
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d009      	beq.n	8005c96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c82:	4b12      	ldr	r3, [pc, #72]	; (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	00db      	lsls	r3, r3, #3
 8005c90:	490e      	ldr	r1, [pc, #56]	; (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c96:	f000 f821 	bl	8005cdc <HAL_RCC_GetSysClockFreq>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	4b0b      	ldr	r3, [pc, #44]	; (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	091b      	lsrs	r3, r3, #4
 8005ca2:	f003 030f 	and.w	r3, r3, #15
 8005ca6:	490a      	ldr	r1, [pc, #40]	; (8005cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8005ca8:	5ccb      	ldrb	r3, [r1, r3]
 8005caa:	fa22 f303 	lsr.w	r3, r2, r3
 8005cae:	4a09      	ldr	r2, [pc, #36]	; (8005cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8005cb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005cb2:	4b09      	ldr	r3, [pc, #36]	; (8005cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7fc fc2c 	bl	8002514 <HAL_InitTick>

  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	40023c00 	.word	0x40023c00
 8005ccc:	40023800 	.word	0x40023800
 8005cd0:	080116dc 	.word	0x080116dc
 8005cd4:	20000020 	.word	0x20000020
 8005cd8:	20000024 	.word	0x20000024

08005cdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ce0:	b094      	sub	sp, #80	; 0x50
 8005ce2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	647b      	str	r3, [r7, #68]	; 0x44
 8005ce8:	2300      	movs	r3, #0
 8005cea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cec:	2300      	movs	r3, #0
 8005cee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cf4:	4b79      	ldr	r3, [pc, #484]	; (8005edc <HAL_RCC_GetSysClockFreq+0x200>)
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f003 030c 	and.w	r3, r3, #12
 8005cfc:	2b08      	cmp	r3, #8
 8005cfe:	d00d      	beq.n	8005d1c <HAL_RCC_GetSysClockFreq+0x40>
 8005d00:	2b08      	cmp	r3, #8
 8005d02:	f200 80e1 	bhi.w	8005ec8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d002      	beq.n	8005d10 <HAL_RCC_GetSysClockFreq+0x34>
 8005d0a:	2b04      	cmp	r3, #4
 8005d0c:	d003      	beq.n	8005d16 <HAL_RCC_GetSysClockFreq+0x3a>
 8005d0e:	e0db      	b.n	8005ec8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d10:	4b73      	ldr	r3, [pc, #460]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d12:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005d14:	e0db      	b.n	8005ece <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d16:	4b73      	ldr	r3, [pc, #460]	; (8005ee4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005d18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d1a:	e0d8      	b.n	8005ece <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d1c:	4b6f      	ldr	r3, [pc, #444]	; (8005edc <HAL_RCC_GetSysClockFreq+0x200>)
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d24:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d26:	4b6d      	ldr	r3, [pc, #436]	; (8005edc <HAL_RCC_GetSysClockFreq+0x200>)
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d063      	beq.n	8005dfa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d32:	4b6a      	ldr	r3, [pc, #424]	; (8005edc <HAL_RCC_GetSysClockFreq+0x200>)
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	099b      	lsrs	r3, r3, #6
 8005d38:	2200      	movs	r2, #0
 8005d3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d44:	633b      	str	r3, [r7, #48]	; 0x30
 8005d46:	2300      	movs	r3, #0
 8005d48:	637b      	str	r3, [r7, #52]	; 0x34
 8005d4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005d4e:	4622      	mov	r2, r4
 8005d50:	462b      	mov	r3, r5
 8005d52:	f04f 0000 	mov.w	r0, #0
 8005d56:	f04f 0100 	mov.w	r1, #0
 8005d5a:	0159      	lsls	r1, r3, #5
 8005d5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d60:	0150      	lsls	r0, r2, #5
 8005d62:	4602      	mov	r2, r0
 8005d64:	460b      	mov	r3, r1
 8005d66:	4621      	mov	r1, r4
 8005d68:	1a51      	subs	r1, r2, r1
 8005d6a:	6139      	str	r1, [r7, #16]
 8005d6c:	4629      	mov	r1, r5
 8005d6e:	eb63 0301 	sbc.w	r3, r3, r1
 8005d72:	617b      	str	r3, [r7, #20]
 8005d74:	f04f 0200 	mov.w	r2, #0
 8005d78:	f04f 0300 	mov.w	r3, #0
 8005d7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d80:	4659      	mov	r1, fp
 8005d82:	018b      	lsls	r3, r1, #6
 8005d84:	4651      	mov	r1, sl
 8005d86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d8a:	4651      	mov	r1, sl
 8005d8c:	018a      	lsls	r2, r1, #6
 8005d8e:	4651      	mov	r1, sl
 8005d90:	ebb2 0801 	subs.w	r8, r2, r1
 8005d94:	4659      	mov	r1, fp
 8005d96:	eb63 0901 	sbc.w	r9, r3, r1
 8005d9a:	f04f 0200 	mov.w	r2, #0
 8005d9e:	f04f 0300 	mov.w	r3, #0
 8005da2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005da6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005daa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005dae:	4690      	mov	r8, r2
 8005db0:	4699      	mov	r9, r3
 8005db2:	4623      	mov	r3, r4
 8005db4:	eb18 0303 	adds.w	r3, r8, r3
 8005db8:	60bb      	str	r3, [r7, #8]
 8005dba:	462b      	mov	r3, r5
 8005dbc:	eb49 0303 	adc.w	r3, r9, r3
 8005dc0:	60fb      	str	r3, [r7, #12]
 8005dc2:	f04f 0200 	mov.w	r2, #0
 8005dc6:	f04f 0300 	mov.w	r3, #0
 8005dca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005dce:	4629      	mov	r1, r5
 8005dd0:	024b      	lsls	r3, r1, #9
 8005dd2:	4621      	mov	r1, r4
 8005dd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005dd8:	4621      	mov	r1, r4
 8005dda:	024a      	lsls	r2, r1, #9
 8005ddc:	4610      	mov	r0, r2
 8005dde:	4619      	mov	r1, r3
 8005de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005de2:	2200      	movs	r2, #0
 8005de4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005de6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005de8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005dec:	f7fa fa48 	bl	8000280 <__aeabi_uldivmod>
 8005df0:	4602      	mov	r2, r0
 8005df2:	460b      	mov	r3, r1
 8005df4:	4613      	mov	r3, r2
 8005df6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005df8:	e058      	b.n	8005eac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dfa:	4b38      	ldr	r3, [pc, #224]	; (8005edc <HAL_RCC_GetSysClockFreq+0x200>)
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	099b      	lsrs	r3, r3, #6
 8005e00:	2200      	movs	r2, #0
 8005e02:	4618      	mov	r0, r3
 8005e04:	4611      	mov	r1, r2
 8005e06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e0a:	623b      	str	r3, [r7, #32]
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e14:	4642      	mov	r2, r8
 8005e16:	464b      	mov	r3, r9
 8005e18:	f04f 0000 	mov.w	r0, #0
 8005e1c:	f04f 0100 	mov.w	r1, #0
 8005e20:	0159      	lsls	r1, r3, #5
 8005e22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e26:	0150      	lsls	r0, r2, #5
 8005e28:	4602      	mov	r2, r0
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	4641      	mov	r1, r8
 8005e2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e32:	4649      	mov	r1, r9
 8005e34:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e38:	f04f 0200 	mov.w	r2, #0
 8005e3c:	f04f 0300 	mov.w	r3, #0
 8005e40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e4c:	ebb2 040a 	subs.w	r4, r2, sl
 8005e50:	eb63 050b 	sbc.w	r5, r3, fp
 8005e54:	f04f 0200 	mov.w	r2, #0
 8005e58:	f04f 0300 	mov.w	r3, #0
 8005e5c:	00eb      	lsls	r3, r5, #3
 8005e5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e62:	00e2      	lsls	r2, r4, #3
 8005e64:	4614      	mov	r4, r2
 8005e66:	461d      	mov	r5, r3
 8005e68:	4643      	mov	r3, r8
 8005e6a:	18e3      	adds	r3, r4, r3
 8005e6c:	603b      	str	r3, [r7, #0]
 8005e6e:	464b      	mov	r3, r9
 8005e70:	eb45 0303 	adc.w	r3, r5, r3
 8005e74:	607b      	str	r3, [r7, #4]
 8005e76:	f04f 0200 	mov.w	r2, #0
 8005e7a:	f04f 0300 	mov.w	r3, #0
 8005e7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e82:	4629      	mov	r1, r5
 8005e84:	028b      	lsls	r3, r1, #10
 8005e86:	4621      	mov	r1, r4
 8005e88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e8c:	4621      	mov	r1, r4
 8005e8e:	028a      	lsls	r2, r1, #10
 8005e90:	4610      	mov	r0, r2
 8005e92:	4619      	mov	r1, r3
 8005e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e96:	2200      	movs	r2, #0
 8005e98:	61bb      	str	r3, [r7, #24]
 8005e9a:	61fa      	str	r2, [r7, #28]
 8005e9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ea0:	f7fa f9ee 	bl	8000280 <__aeabi_uldivmod>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005eac:	4b0b      	ldr	r3, [pc, #44]	; (8005edc <HAL_RCC_GetSysClockFreq+0x200>)
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	0c1b      	lsrs	r3, r3, #16
 8005eb2:	f003 0303 	and.w	r3, r3, #3
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	005b      	lsls	r3, r3, #1
 8005eba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005ebc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ec6:	e002      	b.n	8005ece <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ec8:	4b05      	ldr	r3, [pc, #20]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005eca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ecc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ece:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3750      	adds	r7, #80	; 0x50
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005eda:	bf00      	nop
 8005edc:	40023800 	.word	0x40023800
 8005ee0:	00f42400 	.word	0x00f42400
 8005ee4:	007a1200 	.word	0x007a1200

08005ee8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005eec:	4b03      	ldr	r3, [pc, #12]	; (8005efc <HAL_RCC_GetHCLKFreq+0x14>)
 8005eee:	681b      	ldr	r3, [r3, #0]
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	20000020 	.word	0x20000020

08005f00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f04:	f7ff fff0 	bl	8005ee8 <HAL_RCC_GetHCLKFreq>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	4b05      	ldr	r3, [pc, #20]	; (8005f20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	0a9b      	lsrs	r3, r3, #10
 8005f10:	f003 0307 	and.w	r3, r3, #7
 8005f14:	4903      	ldr	r1, [pc, #12]	; (8005f24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f16:	5ccb      	ldrb	r3, [r1, r3]
 8005f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	40023800 	.word	0x40023800
 8005f24:	080116ec 	.word	0x080116ec

08005f28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005f2c:	f7ff ffdc 	bl	8005ee8 <HAL_RCC_GetHCLKFreq>
 8005f30:	4602      	mov	r2, r0
 8005f32:	4b05      	ldr	r3, [pc, #20]	; (8005f48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	0b5b      	lsrs	r3, r3, #13
 8005f38:	f003 0307 	and.w	r3, r3, #7
 8005f3c:	4903      	ldr	r1, [pc, #12]	; (8005f4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f3e:	5ccb      	ldrb	r3, [r1, r3]
 8005f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	40023800 	.word	0x40023800
 8005f4c:	080116ec 	.word	0x080116ec

08005f50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e07b      	b.n	800605a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d108      	bne.n	8005f7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f72:	d009      	beq.n	8005f88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	61da      	str	r2, [r3, #28]
 8005f7a:	e005      	b.n	8005f88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d106      	bne.n	8005fa8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f7fc f810 	bl	8001fc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2202      	movs	r2, #2
 8005fac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fbe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fda:	431a      	orrs	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	f003 0302 	and.w	r3, r3, #2
 8005fe4:	431a      	orrs	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	431a      	orrs	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ff8:	431a      	orrs	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006002:	431a      	orrs	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a1b      	ldr	r3, [r3, #32]
 8006008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800600c:	ea42 0103 	orr.w	r1, r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006014:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	430a      	orrs	r2, r1
 800601e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	0c1b      	lsrs	r3, r3, #16
 8006026:	f003 0104 	and.w	r1, r3, #4
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602e:	f003 0210 	and.w	r2, r3, #16
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	430a      	orrs	r2, r1
 8006038:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	69da      	ldr	r2, [r3, #28]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006048:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3708      	adds	r7, #8
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b088      	sub	sp, #32
 8006066:	af00      	add	r7, sp, #0
 8006068:	60f8      	str	r0, [r7, #12]
 800606a:	60b9      	str	r1, [r7, #8]
 800606c:	603b      	str	r3, [r7, #0]
 800606e:	4613      	mov	r3, r2
 8006070:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006072:	2300      	movs	r3, #0
 8006074:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800607c:	2b01      	cmp	r3, #1
 800607e:	d101      	bne.n	8006084 <HAL_SPI_Transmit+0x22>
 8006080:	2302      	movs	r3, #2
 8006082:	e126      	b.n	80062d2 <HAL_SPI_Transmit+0x270>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800608c:	f7fc fa86 	bl	800259c <HAL_GetTick>
 8006090:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006092:	88fb      	ldrh	r3, [r7, #6]
 8006094:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d002      	beq.n	80060a8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80060a2:	2302      	movs	r3, #2
 80060a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80060a6:	e10b      	b.n	80062c0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d002      	beq.n	80060b4 <HAL_SPI_Transmit+0x52>
 80060ae:	88fb      	ldrh	r3, [r7, #6]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d102      	bne.n	80060ba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80060b8:	e102      	b.n	80062c0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2203      	movs	r2, #3
 80060be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	88fa      	ldrh	r2, [r7, #6]
 80060d2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	88fa      	ldrh	r2, [r7, #6]
 80060d8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006100:	d10f      	bne.n	8006122 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006110:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006120:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800612c:	2b40      	cmp	r3, #64	; 0x40
 800612e:	d007      	beq.n	8006140 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800613e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006148:	d14b      	bne.n	80061e2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d002      	beq.n	8006158 <HAL_SPI_Transmit+0xf6>
 8006152:	8afb      	ldrh	r3, [r7, #22]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d13e      	bne.n	80061d6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800615c:	881a      	ldrh	r2, [r3, #0]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006168:	1c9a      	adds	r2, r3, #2
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006172:	b29b      	uxth	r3, r3
 8006174:	3b01      	subs	r3, #1
 8006176:	b29a      	uxth	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800617c:	e02b      	b.n	80061d6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f003 0302 	and.w	r3, r3, #2
 8006188:	2b02      	cmp	r3, #2
 800618a:	d112      	bne.n	80061b2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006190:	881a      	ldrh	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619c:	1c9a      	adds	r2, r3, #2
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	3b01      	subs	r3, #1
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80061b0:	e011      	b.n	80061d6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061b2:	f7fc f9f3 	bl	800259c <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	683a      	ldr	r2, [r7, #0]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d803      	bhi.n	80061ca <HAL_SPI_Transmit+0x168>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c8:	d102      	bne.n	80061d0 <HAL_SPI_Transmit+0x16e>
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d102      	bne.n	80061d6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80061d4:	e074      	b.n	80062c0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061da:	b29b      	uxth	r3, r3
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1ce      	bne.n	800617e <HAL_SPI_Transmit+0x11c>
 80061e0:	e04c      	b.n	800627c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d002      	beq.n	80061f0 <HAL_SPI_Transmit+0x18e>
 80061ea:	8afb      	ldrh	r3, [r7, #22]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d140      	bne.n	8006272 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	330c      	adds	r3, #12
 80061fa:	7812      	ldrb	r2, [r2, #0]
 80061fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006202:	1c5a      	adds	r2, r3, #1
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800620c:	b29b      	uxth	r3, r3
 800620e:	3b01      	subs	r3, #1
 8006210:	b29a      	uxth	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006216:	e02c      	b.n	8006272 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	f003 0302 	and.w	r3, r3, #2
 8006222:	2b02      	cmp	r3, #2
 8006224:	d113      	bne.n	800624e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	330c      	adds	r3, #12
 8006230:	7812      	ldrb	r2, [r2, #0]
 8006232:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006238:	1c5a      	adds	r2, r3, #1
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006242:	b29b      	uxth	r3, r3
 8006244:	3b01      	subs	r3, #1
 8006246:	b29a      	uxth	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	86da      	strh	r2, [r3, #54]	; 0x36
 800624c:	e011      	b.n	8006272 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800624e:	f7fc f9a5 	bl	800259c <HAL_GetTick>
 8006252:	4602      	mov	r2, r0
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	683a      	ldr	r2, [r7, #0]
 800625a:	429a      	cmp	r2, r3
 800625c:	d803      	bhi.n	8006266 <HAL_SPI_Transmit+0x204>
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006264:	d102      	bne.n	800626c <HAL_SPI_Transmit+0x20a>
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d102      	bne.n	8006272 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800626c:	2303      	movs	r3, #3
 800626e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006270:	e026      	b.n	80062c0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006276:	b29b      	uxth	r3, r3
 8006278:	2b00      	cmp	r3, #0
 800627a:	d1cd      	bne.n	8006218 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800627c:	69ba      	ldr	r2, [r7, #24]
 800627e:	6839      	ldr	r1, [r7, #0]
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 fa55 	bl	8006730 <SPI_EndRxTxTransaction>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d002      	beq.n	8006292 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2220      	movs	r2, #32
 8006290:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10a      	bne.n	80062b0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800629a:	2300      	movs	r3, #0
 800629c:	613b      	str	r3, [r7, #16]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	613b      	str	r3, [r7, #16]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	613b      	str	r3, [r7, #16]
 80062ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	77fb      	strb	r3, [r7, #31]
 80062bc:	e000      	b.n	80062c0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80062be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80062d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3720      	adds	r7, #32
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b08c      	sub	sp, #48	; 0x30
 80062de:	af00      	add	r7, sp, #0
 80062e0:	60f8      	str	r0, [r7, #12]
 80062e2:	60b9      	str	r1, [r7, #8]
 80062e4:	607a      	str	r2, [r7, #4]
 80062e6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80062e8:	2301      	movs	r3, #1
 80062ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80062ec:	2300      	movs	r3, #0
 80062ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d101      	bne.n	8006300 <HAL_SPI_TransmitReceive+0x26>
 80062fc:	2302      	movs	r3, #2
 80062fe:	e18a      	b.n	8006616 <HAL_SPI_TransmitReceive+0x33c>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006308:	f7fc f948 	bl	800259c <HAL_GetTick>
 800630c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006314:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800631e:	887b      	ldrh	r3, [r7, #2]
 8006320:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006322:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006326:	2b01      	cmp	r3, #1
 8006328:	d00f      	beq.n	800634a <HAL_SPI_TransmitReceive+0x70>
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006330:	d107      	bne.n	8006342 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d103      	bne.n	8006342 <HAL_SPI_TransmitReceive+0x68>
 800633a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800633e:	2b04      	cmp	r3, #4
 8006340:	d003      	beq.n	800634a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006342:	2302      	movs	r3, #2
 8006344:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006348:	e15b      	b.n	8006602 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d005      	beq.n	800635c <HAL_SPI_TransmitReceive+0x82>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d002      	beq.n	800635c <HAL_SPI_TransmitReceive+0x82>
 8006356:	887b      	ldrh	r3, [r7, #2]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d103      	bne.n	8006364 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006362:	e14e      	b.n	8006602 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b04      	cmp	r3, #4
 800636e:	d003      	beq.n	8006378 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2205      	movs	r2, #5
 8006374:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	887a      	ldrh	r2, [r7, #2]
 8006388:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	887a      	ldrh	r2, [r7, #2]
 800638e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	887a      	ldrh	r2, [r7, #2]
 800639a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	887a      	ldrh	r2, [r7, #2]
 80063a0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b8:	2b40      	cmp	r3, #64	; 0x40
 80063ba:	d007      	beq.n	80063cc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063d4:	d178      	bne.n	80064c8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d002      	beq.n	80063e4 <HAL_SPI_TransmitReceive+0x10a>
 80063de:	8b7b      	ldrh	r3, [r7, #26]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d166      	bne.n	80064b2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e8:	881a      	ldrh	r2, [r3, #0]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f4:	1c9a      	adds	r2, r3, #2
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063fe:	b29b      	uxth	r3, r3
 8006400:	3b01      	subs	r3, #1
 8006402:	b29a      	uxth	r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006408:	e053      	b.n	80064b2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b02      	cmp	r3, #2
 8006416:	d11b      	bne.n	8006450 <HAL_SPI_TransmitReceive+0x176>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800641c:	b29b      	uxth	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d016      	beq.n	8006450 <HAL_SPI_TransmitReceive+0x176>
 8006422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006424:	2b01      	cmp	r3, #1
 8006426:	d113      	bne.n	8006450 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642c:	881a      	ldrh	r2, [r3, #0]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006438:	1c9a      	adds	r2, r3, #2
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006442:	b29b      	uxth	r3, r3
 8006444:	3b01      	subs	r3, #1
 8006446:	b29a      	uxth	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800644c:	2300      	movs	r3, #0
 800644e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	2b01      	cmp	r3, #1
 800645c:	d119      	bne.n	8006492 <HAL_SPI_TransmitReceive+0x1b8>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006462:	b29b      	uxth	r3, r3
 8006464:	2b00      	cmp	r3, #0
 8006466:	d014      	beq.n	8006492 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68da      	ldr	r2, [r3, #12]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006472:	b292      	uxth	r2, r2
 8006474:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647a:	1c9a      	adds	r2, r3, #2
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006484:	b29b      	uxth	r3, r3
 8006486:	3b01      	subs	r3, #1
 8006488:	b29a      	uxth	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800648e:	2301      	movs	r3, #1
 8006490:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006492:	f7fc f883 	bl	800259c <HAL_GetTick>
 8006496:	4602      	mov	r2, r0
 8006498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800649e:	429a      	cmp	r2, r3
 80064a0:	d807      	bhi.n	80064b2 <HAL_SPI_TransmitReceive+0x1d8>
 80064a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a8:	d003      	beq.n	80064b2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80064b0:	e0a7      	b.n	8006602 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1a6      	bne.n	800640a <HAL_SPI_TransmitReceive+0x130>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1a1      	bne.n	800640a <HAL_SPI_TransmitReceive+0x130>
 80064c6:	e07c      	b.n	80065c2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d002      	beq.n	80064d6 <HAL_SPI_TransmitReceive+0x1fc>
 80064d0:	8b7b      	ldrh	r3, [r7, #26]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d16b      	bne.n	80065ae <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	330c      	adds	r3, #12
 80064e0:	7812      	ldrb	r2, [r2, #0]
 80064e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e8:	1c5a      	adds	r2, r3, #1
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	3b01      	subs	r3, #1
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064fc:	e057      	b.n	80065ae <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f003 0302 	and.w	r3, r3, #2
 8006508:	2b02      	cmp	r3, #2
 800650a:	d11c      	bne.n	8006546 <HAL_SPI_TransmitReceive+0x26c>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006510:	b29b      	uxth	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d017      	beq.n	8006546 <HAL_SPI_TransmitReceive+0x26c>
 8006516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006518:	2b01      	cmp	r3, #1
 800651a:	d114      	bne.n	8006546 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	330c      	adds	r3, #12
 8006526:	7812      	ldrb	r2, [r2, #0]
 8006528:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652e:	1c5a      	adds	r2, r3, #1
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006538:	b29b      	uxth	r3, r3
 800653a:	3b01      	subs	r3, #1
 800653c:	b29a      	uxth	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006542:	2300      	movs	r3, #0
 8006544:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	f003 0301 	and.w	r3, r3, #1
 8006550:	2b01      	cmp	r3, #1
 8006552:	d119      	bne.n	8006588 <HAL_SPI_TransmitReceive+0x2ae>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006558:	b29b      	uxth	r3, r3
 800655a:	2b00      	cmp	r3, #0
 800655c:	d014      	beq.n	8006588 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68da      	ldr	r2, [r3, #12]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006568:	b2d2      	uxtb	r2, r2
 800656a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006570:	1c5a      	adds	r2, r3, #1
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800657a:	b29b      	uxth	r3, r3
 800657c:	3b01      	subs	r3, #1
 800657e:	b29a      	uxth	r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006584:	2301      	movs	r3, #1
 8006586:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006588:	f7fc f808 	bl	800259c <HAL_GetTick>
 800658c:	4602      	mov	r2, r0
 800658e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006594:	429a      	cmp	r2, r3
 8006596:	d803      	bhi.n	80065a0 <HAL_SPI_TransmitReceive+0x2c6>
 8006598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659e:	d102      	bne.n	80065a6 <HAL_SPI_TransmitReceive+0x2cc>
 80065a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d103      	bne.n	80065ae <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80065ac:	e029      	b.n	8006602 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1a2      	bne.n	80064fe <HAL_SPI_TransmitReceive+0x224>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065bc:	b29b      	uxth	r3, r3
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d19d      	bne.n	80064fe <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f000 f8b2 	bl	8006730 <SPI_EndRxTxTransaction>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d006      	beq.n	80065e0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2220      	movs	r2, #32
 80065dc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80065de:	e010      	b.n	8006602 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10b      	bne.n	8006600 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065e8:	2300      	movs	r3, #0
 80065ea:	617b      	str	r3, [r7, #20]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	617b      	str	r3, [r7, #20]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	617b      	str	r3, [r7, #20]
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	e000      	b.n	8006602 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006600:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006612:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006616:	4618      	mov	r0, r3
 8006618:	3730      	adds	r7, #48	; 0x30
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
	...

08006620 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b088      	sub	sp, #32
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	603b      	str	r3, [r7, #0]
 800662c:	4613      	mov	r3, r2
 800662e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006630:	f7fb ffb4 	bl	800259c <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006638:	1a9b      	subs	r3, r3, r2
 800663a:	683a      	ldr	r2, [r7, #0]
 800663c:	4413      	add	r3, r2
 800663e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006640:	f7fb ffac 	bl	800259c <HAL_GetTick>
 8006644:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006646:	4b39      	ldr	r3, [pc, #228]	; (800672c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	015b      	lsls	r3, r3, #5
 800664c:	0d1b      	lsrs	r3, r3, #20
 800664e:	69fa      	ldr	r2, [r7, #28]
 8006650:	fb02 f303 	mul.w	r3, r2, r3
 8006654:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006656:	e054      	b.n	8006702 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800665e:	d050      	beq.n	8006702 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006660:	f7fb ff9c 	bl	800259c <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	69fa      	ldr	r2, [r7, #28]
 800666c:	429a      	cmp	r2, r3
 800666e:	d902      	bls.n	8006676 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d13d      	bne.n	80066f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	685a      	ldr	r2, [r3, #4]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006684:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800668e:	d111      	bne.n	80066b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006698:	d004      	beq.n	80066a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066a2:	d107      	bne.n	80066b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066bc:	d10f      	bne.n	80066de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066cc:	601a      	str	r2, [r3, #0]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80066ee:	2303      	movs	r3, #3
 80066f0:	e017      	b.n	8006722 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d101      	bne.n	80066fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80066f8:	2300      	movs	r3, #0
 80066fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	3b01      	subs	r3, #1
 8006700:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	689a      	ldr	r2, [r3, #8]
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	4013      	ands	r3, r2
 800670c:	68ba      	ldr	r2, [r7, #8]
 800670e:	429a      	cmp	r2, r3
 8006710:	bf0c      	ite	eq
 8006712:	2301      	moveq	r3, #1
 8006714:	2300      	movne	r3, #0
 8006716:	b2db      	uxtb	r3, r3
 8006718:	461a      	mov	r2, r3
 800671a:	79fb      	ldrb	r3, [r7, #7]
 800671c:	429a      	cmp	r2, r3
 800671e:	d19b      	bne.n	8006658 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3720      	adds	r7, #32
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	20000020 	.word	0x20000020

08006730 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b088      	sub	sp, #32
 8006734:	af02      	add	r7, sp, #8
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800673c:	4b1b      	ldr	r3, [pc, #108]	; (80067ac <SPI_EndRxTxTransaction+0x7c>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a1b      	ldr	r2, [pc, #108]	; (80067b0 <SPI_EndRxTxTransaction+0x80>)
 8006742:	fba2 2303 	umull	r2, r3, r2, r3
 8006746:	0d5b      	lsrs	r3, r3, #21
 8006748:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800674c:	fb02 f303 	mul.w	r3, r2, r3
 8006750:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800675a:	d112      	bne.n	8006782 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	2200      	movs	r2, #0
 8006764:	2180      	movs	r1, #128	; 0x80
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f7ff ff5a 	bl	8006620 <SPI_WaitFlagStateUntilTimeout>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d016      	beq.n	80067a0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006776:	f043 0220 	orr.w	r2, r3, #32
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e00f      	b.n	80067a2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00a      	beq.n	800679e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	3b01      	subs	r3, #1
 800678c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006798:	2b80      	cmp	r3, #128	; 0x80
 800679a:	d0f2      	beq.n	8006782 <SPI_EndRxTxTransaction+0x52>
 800679c:	e000      	b.n	80067a0 <SPI_EndRxTxTransaction+0x70>
        break;
 800679e:	bf00      	nop
  }

  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3718      	adds	r7, #24
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	20000020 	.word	0x20000020
 80067b0:	165e9f81 	.word	0x165e9f81

080067b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d101      	bne.n	80067c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e041      	b.n	800684a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d106      	bne.n	80067e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f7fb fc84 	bl	80020e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2202      	movs	r2, #2
 80067e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	3304      	adds	r3, #4
 80067f0:	4619      	mov	r1, r3
 80067f2:	4610      	mov	r0, r2
 80067f4:	f000 fa88 	bl	8006d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3708      	adds	r7, #8
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
	...

08006854 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006862:	b2db      	uxtb	r3, r3
 8006864:	2b01      	cmp	r3, #1
 8006866:	d001      	beq.n	800686c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e044      	b.n	80068f6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2202      	movs	r2, #2
 8006870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68da      	ldr	r2, [r3, #12]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f042 0201 	orr.w	r2, r2, #1
 8006882:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a1e      	ldr	r2, [pc, #120]	; (8006904 <HAL_TIM_Base_Start_IT+0xb0>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d018      	beq.n	80068c0 <HAL_TIM_Base_Start_IT+0x6c>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006896:	d013      	beq.n	80068c0 <HAL_TIM_Base_Start_IT+0x6c>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a1a      	ldr	r2, [pc, #104]	; (8006908 <HAL_TIM_Base_Start_IT+0xb4>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d00e      	beq.n	80068c0 <HAL_TIM_Base_Start_IT+0x6c>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a19      	ldr	r2, [pc, #100]	; (800690c <HAL_TIM_Base_Start_IT+0xb8>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d009      	beq.n	80068c0 <HAL_TIM_Base_Start_IT+0x6c>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a17      	ldr	r2, [pc, #92]	; (8006910 <HAL_TIM_Base_Start_IT+0xbc>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d004      	beq.n	80068c0 <HAL_TIM_Base_Start_IT+0x6c>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a16      	ldr	r2, [pc, #88]	; (8006914 <HAL_TIM_Base_Start_IT+0xc0>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d111      	bne.n	80068e4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f003 0307 	and.w	r3, r3, #7
 80068ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2b06      	cmp	r3, #6
 80068d0:	d010      	beq.n	80068f4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f042 0201 	orr.w	r2, r2, #1
 80068e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068e2:	e007      	b.n	80068f4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f042 0201 	orr.w	r2, r2, #1
 80068f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	40010000 	.word	0x40010000
 8006908:	40000400 	.word	0x40000400
 800690c:	40000800 	.word	0x40000800
 8006910:	40000c00 	.word	0x40000c00
 8006914:	40014000 	.word	0x40014000

08006918 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	2b02      	cmp	r3, #2
 800692c:	d122      	bne.n	8006974 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	f003 0302 	and.w	r3, r3, #2
 8006938:	2b02      	cmp	r3, #2
 800693a:	d11b      	bne.n	8006974 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f06f 0202 	mvn.w	r2, #2
 8006944:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2201      	movs	r2, #1
 800694a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	f003 0303 	and.w	r3, r3, #3
 8006956:	2b00      	cmp	r3, #0
 8006958:	d003      	beq.n	8006962 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 f9b5 	bl	8006cca <HAL_TIM_IC_CaptureCallback>
 8006960:	e005      	b.n	800696e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f9a7 	bl	8006cb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 f9b8 	bl	8006cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	f003 0304 	and.w	r3, r3, #4
 800697e:	2b04      	cmp	r3, #4
 8006980:	d122      	bne.n	80069c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	f003 0304 	and.w	r3, r3, #4
 800698c:	2b04      	cmp	r3, #4
 800698e:	d11b      	bne.n	80069c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f06f 0204 	mvn.w	r2, #4
 8006998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2202      	movs	r2, #2
 800699e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d003      	beq.n	80069b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f98b 	bl	8006cca <HAL_TIM_IC_CaptureCallback>
 80069b4:	e005      	b.n	80069c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f97d 	bl	8006cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 f98e 	bl	8006cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	f003 0308 	and.w	r3, r3, #8
 80069d2:	2b08      	cmp	r3, #8
 80069d4:	d122      	bne.n	8006a1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	f003 0308 	and.w	r3, r3, #8
 80069e0:	2b08      	cmp	r3, #8
 80069e2:	d11b      	bne.n	8006a1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f06f 0208 	mvn.w	r2, #8
 80069ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2204      	movs	r2, #4
 80069f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	69db      	ldr	r3, [r3, #28]
 80069fa:	f003 0303 	and.w	r3, r3, #3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d003      	beq.n	8006a0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f961 	bl	8006cca <HAL_TIM_IC_CaptureCallback>
 8006a08:	e005      	b.n	8006a16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f953 	bl	8006cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 f964 	bl	8006cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	f003 0310 	and.w	r3, r3, #16
 8006a26:	2b10      	cmp	r3, #16
 8006a28:	d122      	bne.n	8006a70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	f003 0310 	and.w	r3, r3, #16
 8006a34:	2b10      	cmp	r3, #16
 8006a36:	d11b      	bne.n	8006a70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f06f 0210 	mvn.w	r2, #16
 8006a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2208      	movs	r2, #8
 8006a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d003      	beq.n	8006a5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f937 	bl	8006cca <HAL_TIM_IC_CaptureCallback>
 8006a5c:	e005      	b.n	8006a6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f929 	bl	8006cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f93a 	bl	8006cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	f003 0301 	and.w	r3, r3, #1
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d10e      	bne.n	8006a9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	f003 0301 	and.w	r3, r3, #1
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d107      	bne.n	8006a9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f06f 0201 	mvn.w	r2, #1
 8006a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f7fb f956 	bl	8001d48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa6:	2b80      	cmp	r3, #128	; 0x80
 8006aa8:	d10e      	bne.n	8006ac8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ab4:	2b80      	cmp	r3, #128	; 0x80
 8006ab6:	d107      	bne.n	8006ac8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fab2 	bl	800702c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad2:	2b40      	cmp	r3, #64	; 0x40
 8006ad4:	d10e      	bne.n	8006af4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae0:	2b40      	cmp	r3, #64	; 0x40
 8006ae2:	d107      	bne.n	8006af4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f8ff 	bl	8006cf2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	f003 0320 	and.w	r3, r3, #32
 8006afe:	2b20      	cmp	r3, #32
 8006b00:	d10e      	bne.n	8006b20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	f003 0320 	and.w	r3, r3, #32
 8006b0c:	2b20      	cmp	r3, #32
 8006b0e:	d107      	bne.n	8006b20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f06f 0220 	mvn.w	r2, #32
 8006b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 fa7c 	bl	8007018 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b20:	bf00      	nop
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b32:	2300      	movs	r3, #0
 8006b34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d101      	bne.n	8006b44 <HAL_TIM_ConfigClockSource+0x1c>
 8006b40:	2302      	movs	r3, #2
 8006b42:	e0b4      	b.n	8006cae <HAL_TIM_ConfigClockSource+0x186>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2202      	movs	r2, #2
 8006b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68ba      	ldr	r2, [r7, #8]
 8006b72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b7c:	d03e      	beq.n	8006bfc <HAL_TIM_ConfigClockSource+0xd4>
 8006b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b82:	f200 8087 	bhi.w	8006c94 <HAL_TIM_ConfigClockSource+0x16c>
 8006b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b8a:	f000 8086 	beq.w	8006c9a <HAL_TIM_ConfigClockSource+0x172>
 8006b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b92:	d87f      	bhi.n	8006c94 <HAL_TIM_ConfigClockSource+0x16c>
 8006b94:	2b70      	cmp	r3, #112	; 0x70
 8006b96:	d01a      	beq.n	8006bce <HAL_TIM_ConfigClockSource+0xa6>
 8006b98:	2b70      	cmp	r3, #112	; 0x70
 8006b9a:	d87b      	bhi.n	8006c94 <HAL_TIM_ConfigClockSource+0x16c>
 8006b9c:	2b60      	cmp	r3, #96	; 0x60
 8006b9e:	d050      	beq.n	8006c42 <HAL_TIM_ConfigClockSource+0x11a>
 8006ba0:	2b60      	cmp	r3, #96	; 0x60
 8006ba2:	d877      	bhi.n	8006c94 <HAL_TIM_ConfigClockSource+0x16c>
 8006ba4:	2b50      	cmp	r3, #80	; 0x50
 8006ba6:	d03c      	beq.n	8006c22 <HAL_TIM_ConfigClockSource+0xfa>
 8006ba8:	2b50      	cmp	r3, #80	; 0x50
 8006baa:	d873      	bhi.n	8006c94 <HAL_TIM_ConfigClockSource+0x16c>
 8006bac:	2b40      	cmp	r3, #64	; 0x40
 8006bae:	d058      	beq.n	8006c62 <HAL_TIM_ConfigClockSource+0x13a>
 8006bb0:	2b40      	cmp	r3, #64	; 0x40
 8006bb2:	d86f      	bhi.n	8006c94 <HAL_TIM_ConfigClockSource+0x16c>
 8006bb4:	2b30      	cmp	r3, #48	; 0x30
 8006bb6:	d064      	beq.n	8006c82 <HAL_TIM_ConfigClockSource+0x15a>
 8006bb8:	2b30      	cmp	r3, #48	; 0x30
 8006bba:	d86b      	bhi.n	8006c94 <HAL_TIM_ConfigClockSource+0x16c>
 8006bbc:	2b20      	cmp	r3, #32
 8006bbe:	d060      	beq.n	8006c82 <HAL_TIM_ConfigClockSource+0x15a>
 8006bc0:	2b20      	cmp	r3, #32
 8006bc2:	d867      	bhi.n	8006c94 <HAL_TIM_ConfigClockSource+0x16c>
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d05c      	beq.n	8006c82 <HAL_TIM_ConfigClockSource+0x15a>
 8006bc8:	2b10      	cmp	r3, #16
 8006bca:	d05a      	beq.n	8006c82 <HAL_TIM_ConfigClockSource+0x15a>
 8006bcc:	e062      	b.n	8006c94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6818      	ldr	r0, [r3, #0]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	6899      	ldr	r1, [r3, #8]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	685a      	ldr	r2, [r3, #4]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	f000 f98d 	bl	8006efc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006bf0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	609a      	str	r2, [r3, #8]
      break;
 8006bfa:	e04f      	b.n	8006c9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6818      	ldr	r0, [r3, #0]
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	6899      	ldr	r1, [r3, #8]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	685a      	ldr	r2, [r3, #4]
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	f000 f976 	bl	8006efc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	689a      	ldr	r2, [r3, #8]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c1e:	609a      	str	r2, [r3, #8]
      break;
 8006c20:	e03c      	b.n	8006c9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6818      	ldr	r0, [r3, #0]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	6859      	ldr	r1, [r3, #4]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	f000 f8ea 	bl	8006e08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2150      	movs	r1, #80	; 0x50
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f000 f943 	bl	8006ec6 <TIM_ITRx_SetConfig>
      break;
 8006c40:	e02c      	b.n	8006c9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6818      	ldr	r0, [r3, #0]
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	6859      	ldr	r1, [r3, #4]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	461a      	mov	r2, r3
 8006c50:	f000 f909 	bl	8006e66 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2160      	movs	r1, #96	; 0x60
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f000 f933 	bl	8006ec6 <TIM_ITRx_SetConfig>
      break;
 8006c60:	e01c      	b.n	8006c9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6818      	ldr	r0, [r3, #0]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	6859      	ldr	r1, [r3, #4]
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	f000 f8ca 	bl	8006e08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2140      	movs	r1, #64	; 0x40
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 f923 	bl	8006ec6 <TIM_ITRx_SetConfig>
      break;
 8006c80:	e00c      	b.n	8006c9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	4610      	mov	r0, r2
 8006c8e:	f000 f91a 	bl	8006ec6 <TIM_ITRx_SetConfig>
      break;
 8006c92:	e003      	b.n	8006c9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	73fb      	strb	r3, [r7, #15]
      break;
 8006c98:	e000      	b.n	8006c9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006c9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3710      	adds	r7, #16
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	b083      	sub	sp, #12
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cbe:	bf00      	nop
 8006cc0:	370c      	adds	r7, #12
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cca:	b480      	push	{r7}
 8006ccc:	b083      	sub	sp, #12
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006cd2:	bf00      	nop
 8006cd4:	370c      	adds	r7, #12
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cde:	b480      	push	{r7}
 8006ce0:	b083      	sub	sp, #12
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ce6:	bf00      	nop
 8006ce8:	370c      	adds	r7, #12
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b083      	sub	sp, #12
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cfa:	bf00      	nop
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
	...

08006d08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b085      	sub	sp, #20
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a34      	ldr	r2, [pc, #208]	; (8006dec <TIM_Base_SetConfig+0xe4>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d00f      	beq.n	8006d40 <TIM_Base_SetConfig+0x38>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d26:	d00b      	beq.n	8006d40 <TIM_Base_SetConfig+0x38>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a31      	ldr	r2, [pc, #196]	; (8006df0 <TIM_Base_SetConfig+0xe8>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d007      	beq.n	8006d40 <TIM_Base_SetConfig+0x38>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a30      	ldr	r2, [pc, #192]	; (8006df4 <TIM_Base_SetConfig+0xec>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d003      	beq.n	8006d40 <TIM_Base_SetConfig+0x38>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a2f      	ldr	r2, [pc, #188]	; (8006df8 <TIM_Base_SetConfig+0xf0>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d108      	bne.n	8006d52 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a25      	ldr	r2, [pc, #148]	; (8006dec <TIM_Base_SetConfig+0xe4>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d01b      	beq.n	8006d92 <TIM_Base_SetConfig+0x8a>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d60:	d017      	beq.n	8006d92 <TIM_Base_SetConfig+0x8a>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a22      	ldr	r2, [pc, #136]	; (8006df0 <TIM_Base_SetConfig+0xe8>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d013      	beq.n	8006d92 <TIM_Base_SetConfig+0x8a>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a21      	ldr	r2, [pc, #132]	; (8006df4 <TIM_Base_SetConfig+0xec>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d00f      	beq.n	8006d92 <TIM_Base_SetConfig+0x8a>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a20      	ldr	r2, [pc, #128]	; (8006df8 <TIM_Base_SetConfig+0xf0>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d00b      	beq.n	8006d92 <TIM_Base_SetConfig+0x8a>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a1f      	ldr	r2, [pc, #124]	; (8006dfc <TIM_Base_SetConfig+0xf4>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d007      	beq.n	8006d92 <TIM_Base_SetConfig+0x8a>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a1e      	ldr	r2, [pc, #120]	; (8006e00 <TIM_Base_SetConfig+0xf8>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d003      	beq.n	8006d92 <TIM_Base_SetConfig+0x8a>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a1d      	ldr	r2, [pc, #116]	; (8006e04 <TIM_Base_SetConfig+0xfc>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d108      	bne.n	8006da4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	695b      	ldr	r3, [r3, #20]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	689a      	ldr	r2, [r3, #8]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a08      	ldr	r2, [pc, #32]	; (8006dec <TIM_Base_SetConfig+0xe4>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d103      	bne.n	8006dd8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	691a      	ldr	r2, [r3, #16]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	615a      	str	r2, [r3, #20]
}
 8006dde:	bf00      	nop
 8006de0:	3714      	adds	r7, #20
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	40010000 	.word	0x40010000
 8006df0:	40000400 	.word	0x40000400
 8006df4:	40000800 	.word	0x40000800
 8006df8:	40000c00 	.word	0x40000c00
 8006dfc:	40014000 	.word	0x40014000
 8006e00:	40014400 	.word	0x40014400
 8006e04:	40014800 	.word	0x40014800

08006e08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b087      	sub	sp, #28
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6a1b      	ldr	r3, [r3, #32]
 8006e18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	f023 0201 	bic.w	r2, r3, #1
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	011b      	lsls	r3, r3, #4
 8006e38:	693a      	ldr	r2, [r7, #16]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	f023 030a 	bic.w	r3, r3, #10
 8006e44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	621a      	str	r2, [r3, #32]
}
 8006e5a:	bf00      	nop
 8006e5c:	371c      	adds	r7, #28
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e66:	b480      	push	{r7}
 8006e68:	b087      	sub	sp, #28
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	60f8      	str	r0, [r7, #12]
 8006e6e:	60b9      	str	r1, [r7, #8]
 8006e70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6a1b      	ldr	r3, [r3, #32]
 8006e76:	f023 0210 	bic.w	r2, r3, #16
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6a1b      	ldr	r3, [r3, #32]
 8006e88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	031b      	lsls	r3, r3, #12
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ea2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	011b      	lsls	r3, r3, #4
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	697a      	ldr	r2, [r7, #20]
 8006eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	693a      	ldr	r2, [r7, #16]
 8006eb8:	621a      	str	r2, [r3, #32]
}
 8006eba:	bf00      	nop
 8006ebc:	371c      	adds	r7, #28
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr

08006ec6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ec6:	b480      	push	{r7}
 8006ec8:	b085      	sub	sp, #20
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
 8006ece:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006edc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	f043 0307 	orr.w	r3, r3, #7
 8006ee8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	609a      	str	r2, [r3, #8]
}
 8006ef0:	bf00      	nop
 8006ef2:	3714      	adds	r7, #20
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
 8006f08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	021a      	lsls	r2, r3, #8
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	431a      	orrs	r2, r3
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	697a      	ldr	r2, [r7, #20]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	609a      	str	r2, [r3, #8]
}
 8006f30:	bf00      	nop
 8006f32:	371c      	adds	r7, #28
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d101      	bne.n	8006f54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f50:	2302      	movs	r3, #2
 8006f52:	e050      	b.n	8006ff6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2202      	movs	r2, #2
 8006f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a1c      	ldr	r2, [pc, #112]	; (8007004 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d018      	beq.n	8006fca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fa0:	d013      	beq.n	8006fca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a18      	ldr	r2, [pc, #96]	; (8007008 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d00e      	beq.n	8006fca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a16      	ldr	r2, [pc, #88]	; (800700c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d009      	beq.n	8006fca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a15      	ldr	r2, [pc, #84]	; (8007010 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d004      	beq.n	8006fca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a13      	ldr	r2, [pc, #76]	; (8007014 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d10c      	bne.n	8006fe4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	68ba      	ldr	r2, [r7, #8]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3714      	adds	r7, #20
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	40010000 	.word	0x40010000
 8007008:	40000400 	.word	0x40000400
 800700c:	40000800 	.word	0x40000800
 8007010:	40000c00 	.word	0x40000c00
 8007014:	40014000 	.word	0x40014000

08007018 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007020:	bf00      	nop
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d101      	bne.n	8007052 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e03f      	b.n	80070d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007058:	b2db      	uxtb	r3, r3
 800705a:	2b00      	cmp	r3, #0
 800705c:	d106      	bne.n	800706c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f7fb f882 	bl	8002170 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2224      	movs	r2, #36	; 0x24
 8007070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68da      	ldr	r2, [r3, #12]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007082:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 f929 	bl	80072dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	691a      	ldr	r2, [r3, #16]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007098:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	695a      	ldr	r2, [r3, #20]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68da      	ldr	r2, [r3, #12]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2220      	movs	r2, #32
 80070c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2220      	movs	r2, #32
 80070cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3708      	adds	r7, #8
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b08a      	sub	sp, #40	; 0x28
 80070de:	af02      	add	r7, sp, #8
 80070e0:	60f8      	str	r0, [r7, #12]
 80070e2:	60b9      	str	r1, [r7, #8]
 80070e4:	603b      	str	r3, [r7, #0]
 80070e6:	4613      	mov	r3, r2
 80070e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80070ea:	2300      	movs	r3, #0
 80070ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	2b20      	cmp	r3, #32
 80070f8:	d17c      	bne.n	80071f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d002      	beq.n	8007106 <HAL_UART_Transmit+0x2c>
 8007100:	88fb      	ldrh	r3, [r7, #6]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d101      	bne.n	800710a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e075      	b.n	80071f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007110:	2b01      	cmp	r3, #1
 8007112:	d101      	bne.n	8007118 <HAL_UART_Transmit+0x3e>
 8007114:	2302      	movs	r3, #2
 8007116:	e06e      	b.n	80071f6 <HAL_UART_Transmit+0x11c>
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2221      	movs	r2, #33	; 0x21
 800712a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800712e:	f7fb fa35 	bl	800259c <HAL_GetTick>
 8007132:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	88fa      	ldrh	r2, [r7, #6]
 8007138:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	88fa      	ldrh	r2, [r7, #6]
 800713e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007148:	d108      	bne.n	800715c <HAL_UART_Transmit+0x82>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d104      	bne.n	800715c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007152:	2300      	movs	r3, #0
 8007154:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	61bb      	str	r3, [r7, #24]
 800715a:	e003      	b.n	8007164 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007160:	2300      	movs	r3, #0
 8007162:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800716c:	e02a      	b.n	80071c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	9300      	str	r3, [sp, #0]
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	2200      	movs	r2, #0
 8007176:	2180      	movs	r1, #128	; 0x80
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f000 f840 	bl	80071fe <UART_WaitOnFlagUntilTimeout>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d001      	beq.n	8007188 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007184:	2303      	movs	r3, #3
 8007186:	e036      	b.n	80071f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d10b      	bne.n	80071a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	881b      	ldrh	r3, [r3, #0]
 8007192:	461a      	mov	r2, r3
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800719c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	3302      	adds	r3, #2
 80071a2:	61bb      	str	r3, [r7, #24]
 80071a4:	e007      	b.n	80071b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	781a      	ldrb	r2, [r3, #0]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	3301      	adds	r3, #1
 80071b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	3b01      	subs	r3, #1
 80071be:	b29a      	uxth	r2, r3
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1cf      	bne.n	800716e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	9300      	str	r3, [sp, #0]
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	2200      	movs	r2, #0
 80071d6:	2140      	movs	r1, #64	; 0x40
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f000 f810 	bl	80071fe <UART_WaitOnFlagUntilTimeout>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d001      	beq.n	80071e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80071e4:	2303      	movs	r3, #3
 80071e6:	e006      	b.n	80071f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2220      	movs	r2, #32
 80071ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80071f0:	2300      	movs	r3, #0
 80071f2:	e000      	b.n	80071f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80071f4:	2302      	movs	r3, #2
  }
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3720      	adds	r7, #32
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b090      	sub	sp, #64	; 0x40
 8007202:	af00      	add	r7, sp, #0
 8007204:	60f8      	str	r0, [r7, #12]
 8007206:	60b9      	str	r1, [r7, #8]
 8007208:	603b      	str	r3, [r7, #0]
 800720a:	4613      	mov	r3, r2
 800720c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800720e:	e050      	b.n	80072b2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007216:	d04c      	beq.n	80072b2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007218:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800721a:	2b00      	cmp	r3, #0
 800721c:	d007      	beq.n	800722e <UART_WaitOnFlagUntilTimeout+0x30>
 800721e:	f7fb f9bd 	bl	800259c <HAL_GetTick>
 8007222:	4602      	mov	r2, r0
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800722a:	429a      	cmp	r2, r3
 800722c:	d241      	bcs.n	80072b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	330c      	adds	r3, #12
 8007234:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007238:	e853 3f00 	ldrex	r3, [r3]
 800723c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800723e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007240:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007244:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	330c      	adds	r3, #12
 800724c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800724e:	637a      	str	r2, [r7, #52]	; 0x34
 8007250:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007252:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007254:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007256:	e841 2300 	strex	r3, r2, [r1]
 800725a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800725c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1e5      	bne.n	800722e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	3314      	adds	r3, #20
 8007268:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	e853 3f00 	ldrex	r3, [r3]
 8007270:	613b      	str	r3, [r7, #16]
   return(result);
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	f023 0301 	bic.w	r3, r3, #1
 8007278:	63bb      	str	r3, [r7, #56]	; 0x38
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	3314      	adds	r3, #20
 8007280:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007282:	623a      	str	r2, [r7, #32]
 8007284:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007286:	69f9      	ldr	r1, [r7, #28]
 8007288:	6a3a      	ldr	r2, [r7, #32]
 800728a:	e841 2300 	strex	r3, r2, [r1]
 800728e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1e5      	bne.n	8007262 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2220      	movs	r2, #32
 800729a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2220      	movs	r2, #32
 80072a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	e00f      	b.n	80072d2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	4013      	ands	r3, r2
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	429a      	cmp	r2, r3
 80072c0:	bf0c      	ite	eq
 80072c2:	2301      	moveq	r3, #1
 80072c4:	2300      	movne	r3, #0
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	461a      	mov	r2, r3
 80072ca:	79fb      	ldrb	r3, [r7, #7]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d09f      	beq.n	8007210 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3740      	adds	r7, #64	; 0x40
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
	...

080072dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072e0:	b0c0      	sub	sp, #256	; 0x100
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80072f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072f8:	68d9      	ldr	r1, [r3, #12]
 80072fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	ea40 0301 	orr.w	r3, r0, r1
 8007304:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800730a:	689a      	ldr	r2, [r3, #8]
 800730c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	431a      	orrs	r2, r3
 8007314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007318:	695b      	ldr	r3, [r3, #20]
 800731a:	431a      	orrs	r2, r3
 800731c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007320:	69db      	ldr	r3, [r3, #28]
 8007322:	4313      	orrs	r3, r2
 8007324:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007334:	f021 010c 	bic.w	r1, r1, #12
 8007338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007342:	430b      	orrs	r3, r1
 8007344:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	695b      	ldr	r3, [r3, #20]
 800734e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007356:	6999      	ldr	r1, [r3, #24]
 8007358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	ea40 0301 	orr.w	r3, r0, r1
 8007362:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	4b8f      	ldr	r3, [pc, #572]	; (80075a8 <UART_SetConfig+0x2cc>)
 800736c:	429a      	cmp	r2, r3
 800736e:	d005      	beq.n	800737c <UART_SetConfig+0xa0>
 8007370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	4b8d      	ldr	r3, [pc, #564]	; (80075ac <UART_SetConfig+0x2d0>)
 8007378:	429a      	cmp	r2, r3
 800737a:	d104      	bne.n	8007386 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800737c:	f7fe fdd4 	bl	8005f28 <HAL_RCC_GetPCLK2Freq>
 8007380:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007384:	e003      	b.n	800738e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007386:	f7fe fdbb 	bl	8005f00 <HAL_RCC_GetPCLK1Freq>
 800738a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800738e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007392:	69db      	ldr	r3, [r3, #28]
 8007394:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007398:	f040 810c 	bne.w	80075b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800739c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073a0:	2200      	movs	r2, #0
 80073a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80073a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80073aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80073ae:	4622      	mov	r2, r4
 80073b0:	462b      	mov	r3, r5
 80073b2:	1891      	adds	r1, r2, r2
 80073b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80073b6:	415b      	adcs	r3, r3
 80073b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80073be:	4621      	mov	r1, r4
 80073c0:	eb12 0801 	adds.w	r8, r2, r1
 80073c4:	4629      	mov	r1, r5
 80073c6:	eb43 0901 	adc.w	r9, r3, r1
 80073ca:	f04f 0200 	mov.w	r2, #0
 80073ce:	f04f 0300 	mov.w	r3, #0
 80073d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073de:	4690      	mov	r8, r2
 80073e0:	4699      	mov	r9, r3
 80073e2:	4623      	mov	r3, r4
 80073e4:	eb18 0303 	adds.w	r3, r8, r3
 80073e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80073ec:	462b      	mov	r3, r5
 80073ee:	eb49 0303 	adc.w	r3, r9, r3
 80073f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007402:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007406:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800740a:	460b      	mov	r3, r1
 800740c:	18db      	adds	r3, r3, r3
 800740e:	653b      	str	r3, [r7, #80]	; 0x50
 8007410:	4613      	mov	r3, r2
 8007412:	eb42 0303 	adc.w	r3, r2, r3
 8007416:	657b      	str	r3, [r7, #84]	; 0x54
 8007418:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800741c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007420:	f7f8 ff2e 	bl	8000280 <__aeabi_uldivmod>
 8007424:	4602      	mov	r2, r0
 8007426:	460b      	mov	r3, r1
 8007428:	4b61      	ldr	r3, [pc, #388]	; (80075b0 <UART_SetConfig+0x2d4>)
 800742a:	fba3 2302 	umull	r2, r3, r3, r2
 800742e:	095b      	lsrs	r3, r3, #5
 8007430:	011c      	lsls	r4, r3, #4
 8007432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007436:	2200      	movs	r2, #0
 8007438:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800743c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007440:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007444:	4642      	mov	r2, r8
 8007446:	464b      	mov	r3, r9
 8007448:	1891      	adds	r1, r2, r2
 800744a:	64b9      	str	r1, [r7, #72]	; 0x48
 800744c:	415b      	adcs	r3, r3
 800744e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007450:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007454:	4641      	mov	r1, r8
 8007456:	eb12 0a01 	adds.w	sl, r2, r1
 800745a:	4649      	mov	r1, r9
 800745c:	eb43 0b01 	adc.w	fp, r3, r1
 8007460:	f04f 0200 	mov.w	r2, #0
 8007464:	f04f 0300 	mov.w	r3, #0
 8007468:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800746c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007470:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007474:	4692      	mov	sl, r2
 8007476:	469b      	mov	fp, r3
 8007478:	4643      	mov	r3, r8
 800747a:	eb1a 0303 	adds.w	r3, sl, r3
 800747e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007482:	464b      	mov	r3, r9
 8007484:	eb4b 0303 	adc.w	r3, fp, r3
 8007488:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800748c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007498:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800749c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80074a0:	460b      	mov	r3, r1
 80074a2:	18db      	adds	r3, r3, r3
 80074a4:	643b      	str	r3, [r7, #64]	; 0x40
 80074a6:	4613      	mov	r3, r2
 80074a8:	eb42 0303 	adc.w	r3, r2, r3
 80074ac:	647b      	str	r3, [r7, #68]	; 0x44
 80074ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80074b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80074b6:	f7f8 fee3 	bl	8000280 <__aeabi_uldivmod>
 80074ba:	4602      	mov	r2, r0
 80074bc:	460b      	mov	r3, r1
 80074be:	4611      	mov	r1, r2
 80074c0:	4b3b      	ldr	r3, [pc, #236]	; (80075b0 <UART_SetConfig+0x2d4>)
 80074c2:	fba3 2301 	umull	r2, r3, r3, r1
 80074c6:	095b      	lsrs	r3, r3, #5
 80074c8:	2264      	movs	r2, #100	; 0x64
 80074ca:	fb02 f303 	mul.w	r3, r2, r3
 80074ce:	1acb      	subs	r3, r1, r3
 80074d0:	00db      	lsls	r3, r3, #3
 80074d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80074d6:	4b36      	ldr	r3, [pc, #216]	; (80075b0 <UART_SetConfig+0x2d4>)
 80074d8:	fba3 2302 	umull	r2, r3, r3, r2
 80074dc:	095b      	lsrs	r3, r3, #5
 80074de:	005b      	lsls	r3, r3, #1
 80074e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80074e4:	441c      	add	r4, r3
 80074e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074ea:	2200      	movs	r2, #0
 80074ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80074f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80074f8:	4642      	mov	r2, r8
 80074fa:	464b      	mov	r3, r9
 80074fc:	1891      	adds	r1, r2, r2
 80074fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8007500:	415b      	adcs	r3, r3
 8007502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007504:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007508:	4641      	mov	r1, r8
 800750a:	1851      	adds	r1, r2, r1
 800750c:	6339      	str	r1, [r7, #48]	; 0x30
 800750e:	4649      	mov	r1, r9
 8007510:	414b      	adcs	r3, r1
 8007512:	637b      	str	r3, [r7, #52]	; 0x34
 8007514:	f04f 0200 	mov.w	r2, #0
 8007518:	f04f 0300 	mov.w	r3, #0
 800751c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007520:	4659      	mov	r1, fp
 8007522:	00cb      	lsls	r3, r1, #3
 8007524:	4651      	mov	r1, sl
 8007526:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800752a:	4651      	mov	r1, sl
 800752c:	00ca      	lsls	r2, r1, #3
 800752e:	4610      	mov	r0, r2
 8007530:	4619      	mov	r1, r3
 8007532:	4603      	mov	r3, r0
 8007534:	4642      	mov	r2, r8
 8007536:	189b      	adds	r3, r3, r2
 8007538:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800753c:	464b      	mov	r3, r9
 800753e:	460a      	mov	r2, r1
 8007540:	eb42 0303 	adc.w	r3, r2, r3
 8007544:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007554:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007558:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800755c:	460b      	mov	r3, r1
 800755e:	18db      	adds	r3, r3, r3
 8007560:	62bb      	str	r3, [r7, #40]	; 0x28
 8007562:	4613      	mov	r3, r2
 8007564:	eb42 0303 	adc.w	r3, r2, r3
 8007568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800756a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800756e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007572:	f7f8 fe85 	bl	8000280 <__aeabi_uldivmod>
 8007576:	4602      	mov	r2, r0
 8007578:	460b      	mov	r3, r1
 800757a:	4b0d      	ldr	r3, [pc, #52]	; (80075b0 <UART_SetConfig+0x2d4>)
 800757c:	fba3 1302 	umull	r1, r3, r3, r2
 8007580:	095b      	lsrs	r3, r3, #5
 8007582:	2164      	movs	r1, #100	; 0x64
 8007584:	fb01 f303 	mul.w	r3, r1, r3
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	00db      	lsls	r3, r3, #3
 800758c:	3332      	adds	r3, #50	; 0x32
 800758e:	4a08      	ldr	r2, [pc, #32]	; (80075b0 <UART_SetConfig+0x2d4>)
 8007590:	fba2 2303 	umull	r2, r3, r2, r3
 8007594:	095b      	lsrs	r3, r3, #5
 8007596:	f003 0207 	and.w	r2, r3, #7
 800759a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4422      	add	r2, r4
 80075a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80075a4:	e105      	b.n	80077b2 <UART_SetConfig+0x4d6>
 80075a6:	bf00      	nop
 80075a8:	40011000 	.word	0x40011000
 80075ac:	40011400 	.word	0x40011400
 80075b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075b8:	2200      	movs	r2, #0
 80075ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80075be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80075c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80075c6:	4642      	mov	r2, r8
 80075c8:	464b      	mov	r3, r9
 80075ca:	1891      	adds	r1, r2, r2
 80075cc:	6239      	str	r1, [r7, #32]
 80075ce:	415b      	adcs	r3, r3
 80075d0:	627b      	str	r3, [r7, #36]	; 0x24
 80075d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80075d6:	4641      	mov	r1, r8
 80075d8:	1854      	adds	r4, r2, r1
 80075da:	4649      	mov	r1, r9
 80075dc:	eb43 0501 	adc.w	r5, r3, r1
 80075e0:	f04f 0200 	mov.w	r2, #0
 80075e4:	f04f 0300 	mov.w	r3, #0
 80075e8:	00eb      	lsls	r3, r5, #3
 80075ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075ee:	00e2      	lsls	r2, r4, #3
 80075f0:	4614      	mov	r4, r2
 80075f2:	461d      	mov	r5, r3
 80075f4:	4643      	mov	r3, r8
 80075f6:	18e3      	adds	r3, r4, r3
 80075f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80075fc:	464b      	mov	r3, r9
 80075fe:	eb45 0303 	adc.w	r3, r5, r3
 8007602:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007612:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007616:	f04f 0200 	mov.w	r2, #0
 800761a:	f04f 0300 	mov.w	r3, #0
 800761e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007622:	4629      	mov	r1, r5
 8007624:	008b      	lsls	r3, r1, #2
 8007626:	4621      	mov	r1, r4
 8007628:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800762c:	4621      	mov	r1, r4
 800762e:	008a      	lsls	r2, r1, #2
 8007630:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007634:	f7f8 fe24 	bl	8000280 <__aeabi_uldivmod>
 8007638:	4602      	mov	r2, r0
 800763a:	460b      	mov	r3, r1
 800763c:	4b60      	ldr	r3, [pc, #384]	; (80077c0 <UART_SetConfig+0x4e4>)
 800763e:	fba3 2302 	umull	r2, r3, r3, r2
 8007642:	095b      	lsrs	r3, r3, #5
 8007644:	011c      	lsls	r4, r3, #4
 8007646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800764a:	2200      	movs	r2, #0
 800764c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007650:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007654:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007658:	4642      	mov	r2, r8
 800765a:	464b      	mov	r3, r9
 800765c:	1891      	adds	r1, r2, r2
 800765e:	61b9      	str	r1, [r7, #24]
 8007660:	415b      	adcs	r3, r3
 8007662:	61fb      	str	r3, [r7, #28]
 8007664:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007668:	4641      	mov	r1, r8
 800766a:	1851      	adds	r1, r2, r1
 800766c:	6139      	str	r1, [r7, #16]
 800766e:	4649      	mov	r1, r9
 8007670:	414b      	adcs	r3, r1
 8007672:	617b      	str	r3, [r7, #20]
 8007674:	f04f 0200 	mov.w	r2, #0
 8007678:	f04f 0300 	mov.w	r3, #0
 800767c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007680:	4659      	mov	r1, fp
 8007682:	00cb      	lsls	r3, r1, #3
 8007684:	4651      	mov	r1, sl
 8007686:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800768a:	4651      	mov	r1, sl
 800768c:	00ca      	lsls	r2, r1, #3
 800768e:	4610      	mov	r0, r2
 8007690:	4619      	mov	r1, r3
 8007692:	4603      	mov	r3, r0
 8007694:	4642      	mov	r2, r8
 8007696:	189b      	adds	r3, r3, r2
 8007698:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800769c:	464b      	mov	r3, r9
 800769e:	460a      	mov	r2, r1
 80076a0:	eb42 0303 	adc.w	r3, r2, r3
 80076a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80076a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80076b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80076b4:	f04f 0200 	mov.w	r2, #0
 80076b8:	f04f 0300 	mov.w	r3, #0
 80076bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80076c0:	4649      	mov	r1, r9
 80076c2:	008b      	lsls	r3, r1, #2
 80076c4:	4641      	mov	r1, r8
 80076c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076ca:	4641      	mov	r1, r8
 80076cc:	008a      	lsls	r2, r1, #2
 80076ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80076d2:	f7f8 fdd5 	bl	8000280 <__aeabi_uldivmod>
 80076d6:	4602      	mov	r2, r0
 80076d8:	460b      	mov	r3, r1
 80076da:	4b39      	ldr	r3, [pc, #228]	; (80077c0 <UART_SetConfig+0x4e4>)
 80076dc:	fba3 1302 	umull	r1, r3, r3, r2
 80076e0:	095b      	lsrs	r3, r3, #5
 80076e2:	2164      	movs	r1, #100	; 0x64
 80076e4:	fb01 f303 	mul.w	r3, r1, r3
 80076e8:	1ad3      	subs	r3, r2, r3
 80076ea:	011b      	lsls	r3, r3, #4
 80076ec:	3332      	adds	r3, #50	; 0x32
 80076ee:	4a34      	ldr	r2, [pc, #208]	; (80077c0 <UART_SetConfig+0x4e4>)
 80076f0:	fba2 2303 	umull	r2, r3, r2, r3
 80076f4:	095b      	lsrs	r3, r3, #5
 80076f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076fa:	441c      	add	r4, r3
 80076fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007700:	2200      	movs	r2, #0
 8007702:	673b      	str	r3, [r7, #112]	; 0x70
 8007704:	677a      	str	r2, [r7, #116]	; 0x74
 8007706:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800770a:	4642      	mov	r2, r8
 800770c:	464b      	mov	r3, r9
 800770e:	1891      	adds	r1, r2, r2
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	415b      	adcs	r3, r3
 8007714:	60fb      	str	r3, [r7, #12]
 8007716:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800771a:	4641      	mov	r1, r8
 800771c:	1851      	adds	r1, r2, r1
 800771e:	6039      	str	r1, [r7, #0]
 8007720:	4649      	mov	r1, r9
 8007722:	414b      	adcs	r3, r1
 8007724:	607b      	str	r3, [r7, #4]
 8007726:	f04f 0200 	mov.w	r2, #0
 800772a:	f04f 0300 	mov.w	r3, #0
 800772e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007732:	4659      	mov	r1, fp
 8007734:	00cb      	lsls	r3, r1, #3
 8007736:	4651      	mov	r1, sl
 8007738:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800773c:	4651      	mov	r1, sl
 800773e:	00ca      	lsls	r2, r1, #3
 8007740:	4610      	mov	r0, r2
 8007742:	4619      	mov	r1, r3
 8007744:	4603      	mov	r3, r0
 8007746:	4642      	mov	r2, r8
 8007748:	189b      	adds	r3, r3, r2
 800774a:	66bb      	str	r3, [r7, #104]	; 0x68
 800774c:	464b      	mov	r3, r9
 800774e:	460a      	mov	r2, r1
 8007750:	eb42 0303 	adc.w	r3, r2, r3
 8007754:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	663b      	str	r3, [r7, #96]	; 0x60
 8007760:	667a      	str	r2, [r7, #100]	; 0x64
 8007762:	f04f 0200 	mov.w	r2, #0
 8007766:	f04f 0300 	mov.w	r3, #0
 800776a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800776e:	4649      	mov	r1, r9
 8007770:	008b      	lsls	r3, r1, #2
 8007772:	4641      	mov	r1, r8
 8007774:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007778:	4641      	mov	r1, r8
 800777a:	008a      	lsls	r2, r1, #2
 800777c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007780:	f7f8 fd7e 	bl	8000280 <__aeabi_uldivmod>
 8007784:	4602      	mov	r2, r0
 8007786:	460b      	mov	r3, r1
 8007788:	4b0d      	ldr	r3, [pc, #52]	; (80077c0 <UART_SetConfig+0x4e4>)
 800778a:	fba3 1302 	umull	r1, r3, r3, r2
 800778e:	095b      	lsrs	r3, r3, #5
 8007790:	2164      	movs	r1, #100	; 0x64
 8007792:	fb01 f303 	mul.w	r3, r1, r3
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	011b      	lsls	r3, r3, #4
 800779a:	3332      	adds	r3, #50	; 0x32
 800779c:	4a08      	ldr	r2, [pc, #32]	; (80077c0 <UART_SetConfig+0x4e4>)
 800779e:	fba2 2303 	umull	r2, r3, r2, r3
 80077a2:	095b      	lsrs	r3, r3, #5
 80077a4:	f003 020f 	and.w	r2, r3, #15
 80077a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4422      	add	r2, r4
 80077b0:	609a      	str	r2, [r3, #8]
}
 80077b2:	bf00      	nop
 80077b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80077b8:	46bd      	mov	sp, r7
 80077ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077be:	bf00      	nop
 80077c0:	51eb851f 	.word	0x51eb851f

080077c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077c4:	b084      	sub	sp, #16
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b084      	sub	sp, #16
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
 80077ce:	f107 001c 	add.w	r0, r7, #28
 80077d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80077d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d122      	bne.n	8007822 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80077f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007806:	2b01      	cmp	r3, #1
 8007808:	d105      	bne.n	8007816 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f001 fbee 	bl	8008ff8 <USB_CoreReset>
 800781c:	4603      	mov	r3, r0
 800781e:	73fb      	strb	r3, [r7, #15]
 8007820:	e01a      	b.n	8007858 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f001 fbe2 	bl	8008ff8 <USB_CoreReset>
 8007834:	4603      	mov	r3, r0
 8007836:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800783a:	2b00      	cmp	r3, #0
 800783c:	d106      	bne.n	800784c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007842:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	639a      	str	r2, [r3, #56]	; 0x38
 800784a:	e005      	b.n	8007858 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007850:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785a:	2b01      	cmp	r3, #1
 800785c:	d10b      	bne.n	8007876 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	f043 0206 	orr.w	r2, r3, #6
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	f043 0220 	orr.w	r2, r3, #32
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007876:	7bfb      	ldrb	r3, [r7, #15]
}
 8007878:	4618      	mov	r0, r3
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007882:	b004      	add	sp, #16
 8007884:	4770      	bx	lr
	...

08007888 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007888:	b480      	push	{r7}
 800788a:	b087      	sub	sp, #28
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	4613      	mov	r3, r2
 8007894:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007896:	79fb      	ldrb	r3, [r7, #7]
 8007898:	2b02      	cmp	r3, #2
 800789a:	d165      	bne.n	8007968 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	4a41      	ldr	r2, [pc, #260]	; (80079a4 <USB_SetTurnaroundTime+0x11c>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d906      	bls.n	80078b2 <USB_SetTurnaroundTime+0x2a>
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	4a40      	ldr	r2, [pc, #256]	; (80079a8 <USB_SetTurnaroundTime+0x120>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d202      	bcs.n	80078b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80078ac:	230f      	movs	r3, #15
 80078ae:	617b      	str	r3, [r7, #20]
 80078b0:	e062      	b.n	8007978 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	4a3c      	ldr	r2, [pc, #240]	; (80079a8 <USB_SetTurnaroundTime+0x120>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d306      	bcc.n	80078c8 <USB_SetTurnaroundTime+0x40>
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	4a3b      	ldr	r2, [pc, #236]	; (80079ac <USB_SetTurnaroundTime+0x124>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d202      	bcs.n	80078c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80078c2:	230e      	movs	r3, #14
 80078c4:	617b      	str	r3, [r7, #20]
 80078c6:	e057      	b.n	8007978 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	4a38      	ldr	r2, [pc, #224]	; (80079ac <USB_SetTurnaroundTime+0x124>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d306      	bcc.n	80078de <USB_SetTurnaroundTime+0x56>
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	4a37      	ldr	r2, [pc, #220]	; (80079b0 <USB_SetTurnaroundTime+0x128>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d202      	bcs.n	80078de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80078d8:	230d      	movs	r3, #13
 80078da:	617b      	str	r3, [r7, #20]
 80078dc:	e04c      	b.n	8007978 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	4a33      	ldr	r2, [pc, #204]	; (80079b0 <USB_SetTurnaroundTime+0x128>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d306      	bcc.n	80078f4 <USB_SetTurnaroundTime+0x6c>
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	4a32      	ldr	r2, [pc, #200]	; (80079b4 <USB_SetTurnaroundTime+0x12c>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d802      	bhi.n	80078f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80078ee:	230c      	movs	r3, #12
 80078f0:	617b      	str	r3, [r7, #20]
 80078f2:	e041      	b.n	8007978 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	4a2f      	ldr	r2, [pc, #188]	; (80079b4 <USB_SetTurnaroundTime+0x12c>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d906      	bls.n	800790a <USB_SetTurnaroundTime+0x82>
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	4a2e      	ldr	r2, [pc, #184]	; (80079b8 <USB_SetTurnaroundTime+0x130>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d802      	bhi.n	800790a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007904:	230b      	movs	r3, #11
 8007906:	617b      	str	r3, [r7, #20]
 8007908:	e036      	b.n	8007978 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	4a2a      	ldr	r2, [pc, #168]	; (80079b8 <USB_SetTurnaroundTime+0x130>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d906      	bls.n	8007920 <USB_SetTurnaroundTime+0x98>
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	4a29      	ldr	r2, [pc, #164]	; (80079bc <USB_SetTurnaroundTime+0x134>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d802      	bhi.n	8007920 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800791a:	230a      	movs	r3, #10
 800791c:	617b      	str	r3, [r7, #20]
 800791e:	e02b      	b.n	8007978 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	4a26      	ldr	r2, [pc, #152]	; (80079bc <USB_SetTurnaroundTime+0x134>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d906      	bls.n	8007936 <USB_SetTurnaroundTime+0xae>
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	4a25      	ldr	r2, [pc, #148]	; (80079c0 <USB_SetTurnaroundTime+0x138>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d202      	bcs.n	8007936 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007930:	2309      	movs	r3, #9
 8007932:	617b      	str	r3, [r7, #20]
 8007934:	e020      	b.n	8007978 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	4a21      	ldr	r2, [pc, #132]	; (80079c0 <USB_SetTurnaroundTime+0x138>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d306      	bcc.n	800794c <USB_SetTurnaroundTime+0xc4>
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	4a20      	ldr	r2, [pc, #128]	; (80079c4 <USB_SetTurnaroundTime+0x13c>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d802      	bhi.n	800794c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007946:	2308      	movs	r3, #8
 8007948:	617b      	str	r3, [r7, #20]
 800794a:	e015      	b.n	8007978 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	4a1d      	ldr	r2, [pc, #116]	; (80079c4 <USB_SetTurnaroundTime+0x13c>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d906      	bls.n	8007962 <USB_SetTurnaroundTime+0xda>
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	4a1c      	ldr	r2, [pc, #112]	; (80079c8 <USB_SetTurnaroundTime+0x140>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d202      	bcs.n	8007962 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800795c:	2307      	movs	r3, #7
 800795e:	617b      	str	r3, [r7, #20]
 8007960:	e00a      	b.n	8007978 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007962:	2306      	movs	r3, #6
 8007964:	617b      	str	r3, [r7, #20]
 8007966:	e007      	b.n	8007978 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007968:	79fb      	ldrb	r3, [r7, #7]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d102      	bne.n	8007974 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800796e:	2309      	movs	r3, #9
 8007970:	617b      	str	r3, [r7, #20]
 8007972:	e001      	b.n	8007978 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007974:	2309      	movs	r3, #9
 8007976:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	68da      	ldr	r2, [r3, #12]
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	029b      	lsls	r3, r3, #10
 800798c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007990:	431a      	orrs	r2, r3
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	371c      	adds	r7, #28
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr
 80079a4:	00d8acbf 	.word	0x00d8acbf
 80079a8:	00e4e1c0 	.word	0x00e4e1c0
 80079ac:	00f42400 	.word	0x00f42400
 80079b0:	01067380 	.word	0x01067380
 80079b4:	011a499f 	.word	0x011a499f
 80079b8:	01312cff 	.word	0x01312cff
 80079bc:	014ca43f 	.word	0x014ca43f
 80079c0:	016e3600 	.word	0x016e3600
 80079c4:	01a6ab1f 	.word	0x01a6ab1f
 80079c8:	01e84800 	.word	0x01e84800

080079cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	f043 0201 	orr.w	r2, r3, #1
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80079e0:	2300      	movs	r3, #0
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	370c      	adds	r7, #12
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80079ee:	b480      	push	{r7}
 80079f0:	b083      	sub	sp, #12
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	f023 0201 	bic.w	r2, r3, #1
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	460b      	mov	r3, r1
 8007a1a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007a2c:	78fb      	ldrb	r3, [r7, #3]
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d115      	bne.n	8007a5e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	68db      	ldr	r3, [r3, #12]
 8007a36:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007a3e:	2001      	movs	r0, #1
 8007a40:	f7fa fdb8 	bl	80025b4 <HAL_Delay>
      ms++;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	3301      	adds	r3, #1
 8007a48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f001 fa45 	bl	8008eda <USB_GetMode>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d01e      	beq.n	8007a94 <USB_SetCurrentMode+0x84>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2b31      	cmp	r3, #49	; 0x31
 8007a5a:	d9f0      	bls.n	8007a3e <USB_SetCurrentMode+0x2e>
 8007a5c:	e01a      	b.n	8007a94 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007a5e:	78fb      	ldrb	r3, [r7, #3]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d115      	bne.n	8007a90 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007a70:	2001      	movs	r0, #1
 8007a72:	f7fa fd9f 	bl	80025b4 <HAL_Delay>
      ms++;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f001 fa2c 	bl	8008eda <USB_GetMode>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d005      	beq.n	8007a94 <USB_SetCurrentMode+0x84>
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2b31      	cmp	r3, #49	; 0x31
 8007a8c:	d9f0      	bls.n	8007a70 <USB_SetCurrentMode+0x60>
 8007a8e:	e001      	b.n	8007a94 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	e005      	b.n	8007aa0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2b32      	cmp	r3, #50	; 0x32
 8007a98:	d101      	bne.n	8007a9e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e000      	b.n	8007aa0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007aa8:	b084      	sub	sp, #16
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b086      	sub	sp, #24
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
 8007ab2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007ab6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007aba:	2300      	movs	r3, #0
 8007abc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	613b      	str	r3, [r7, #16]
 8007ac6:	e009      	b.n	8007adc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	3340      	adds	r3, #64	; 0x40
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	4413      	add	r3, r2
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	613b      	str	r3, [r7, #16]
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	2b0e      	cmp	r3, #14
 8007ae0:	d9f2      	bls.n	8007ac8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d11c      	bne.n	8007b22 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	68fa      	ldr	r2, [r7, #12]
 8007af2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007af6:	f043 0302 	orr.w	r3, r3, #2
 8007afa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b00:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b18:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	639a      	str	r2, [r3, #56]	; 0x38
 8007b20:	e00b      	b.n	8007b3a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b26:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b32:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b40:	461a      	mov	r2, r3
 8007b42:	2300      	movs	r3, #0
 8007b44:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b54:	461a      	mov	r2, r3
 8007b56:	680b      	ldr	r3, [r1, #0]
 8007b58:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d10c      	bne.n	8007b7a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d104      	bne.n	8007b70 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007b66:	2100      	movs	r1, #0
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 f965 	bl	8007e38 <USB_SetDevSpeed>
 8007b6e:	e008      	b.n	8007b82 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007b70:	2101      	movs	r1, #1
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 f960 	bl	8007e38 <USB_SetDevSpeed>
 8007b78:	e003      	b.n	8007b82 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007b7a:	2103      	movs	r1, #3
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 f95b 	bl	8007e38 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007b82:	2110      	movs	r1, #16
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 f8f3 	bl	8007d70 <USB_FlushTxFifo>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d001      	beq.n	8007b94 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 f91f 	bl	8007dd8 <USB_FlushRxFifo>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d001      	beq.n	8007ba4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007baa:	461a      	mov	r2, r3
 8007bac:	2300      	movs	r3, #0
 8007bae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	2300      	movs	r3, #0
 8007bba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007bc8:	2300      	movs	r3, #0
 8007bca:	613b      	str	r3, [r7, #16]
 8007bcc:	e043      	b.n	8007c56 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	015a      	lsls	r2, r3, #5
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007be0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007be4:	d118      	bne.n	8007c18 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d10a      	bne.n	8007c02 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	015a      	lsls	r2, r3, #5
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007bfe:	6013      	str	r3, [r2, #0]
 8007c00:	e013      	b.n	8007c2a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	015a      	lsls	r2, r3, #5
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	4413      	add	r3, r2
 8007c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c0e:	461a      	mov	r2, r3
 8007c10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007c14:	6013      	str	r3, [r2, #0]
 8007c16:	e008      	b.n	8007c2a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	015a      	lsls	r2, r3, #5
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	4413      	add	r3, r2
 8007c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c24:	461a      	mov	r2, r3
 8007c26:	2300      	movs	r3, #0
 8007c28:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	015a      	lsls	r2, r3, #5
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	4413      	add	r3, r2
 8007c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c36:	461a      	mov	r2, r3
 8007c38:	2300      	movs	r3, #0
 8007c3a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	015a      	lsls	r2, r3, #5
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	4413      	add	r3, r2
 8007c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c48:	461a      	mov	r2, r3
 8007c4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c4e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	3301      	adds	r3, #1
 8007c54:	613b      	str	r3, [r7, #16]
 8007c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d3b7      	bcc.n	8007bce <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c5e:	2300      	movs	r3, #0
 8007c60:	613b      	str	r3, [r7, #16]
 8007c62:	e043      	b.n	8007cec <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	015a      	lsls	r2, r3, #5
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	4413      	add	r3, r2
 8007c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c7a:	d118      	bne.n	8007cae <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d10a      	bne.n	8007c98 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	015a      	lsls	r2, r3, #5
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	4413      	add	r3, r2
 8007c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c8e:	461a      	mov	r2, r3
 8007c90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007c94:	6013      	str	r3, [r2, #0]
 8007c96:	e013      	b.n	8007cc0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	015a      	lsls	r2, r3, #5
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007caa:	6013      	str	r3, [r2, #0]
 8007cac:	e008      	b.n	8007cc0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	015a      	lsls	r2, r3, #5
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cba:	461a      	mov	r2, r3
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	015a      	lsls	r2, r3, #5
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ccc:	461a      	mov	r2, r3
 8007cce:	2300      	movs	r3, #0
 8007cd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	015a      	lsls	r2, r3, #5
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	4413      	add	r3, r2
 8007cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cde:	461a      	mov	r2, r3
 8007ce0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007ce4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	3301      	adds	r3, #1
 8007cea:	613b      	str	r3, [r7, #16]
 8007cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cee:	693a      	ldr	r2, [r7, #16]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d3b7      	bcc.n	8007c64 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cfa:	691b      	ldr	r3, [r3, #16]
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d06:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007d14:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d105      	bne.n	8007d28 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	699b      	ldr	r3, [r3, #24]
 8007d20:	f043 0210 	orr.w	r2, r3, #16
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	699a      	ldr	r2, [r3, #24]
 8007d2c:	4b0f      	ldr	r3, [pc, #60]	; (8007d6c <USB_DevInit+0x2c4>)
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d005      	beq.n	8007d46 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	699b      	ldr	r3, [r3, #24]
 8007d3e:	f043 0208 	orr.w	r2, r3, #8
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d107      	bne.n	8007d5c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	699b      	ldr	r3, [r3, #24]
 8007d50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d54:	f043 0304 	orr.w	r3, r3, #4
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3718      	adds	r7, #24
 8007d62:	46bd      	mov	sp, r7
 8007d64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d68:	b004      	add	sp, #16
 8007d6a:	4770      	bx	lr
 8007d6c:	803c3800 	.word	0x803c3800

08007d70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	3301      	adds	r3, #1
 8007d82:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	4a13      	ldr	r2, [pc, #76]	; (8007dd4 <USB_FlushTxFifo+0x64>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d901      	bls.n	8007d90 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007d8c:	2303      	movs	r3, #3
 8007d8e:	e01b      	b.n	8007dc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	daf2      	bge.n	8007d7e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	019b      	lsls	r3, r3, #6
 8007da0:	f043 0220 	orr.w	r2, r3, #32
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	3301      	adds	r3, #1
 8007dac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	4a08      	ldr	r2, [pc, #32]	; (8007dd4 <USB_FlushTxFifo+0x64>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d901      	bls.n	8007dba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007db6:	2303      	movs	r3, #3
 8007db8:	e006      	b.n	8007dc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	f003 0320 	and.w	r3, r3, #32
 8007dc2:	2b20      	cmp	r3, #32
 8007dc4:	d0f0      	beq.n	8007da8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3714      	adds	r7, #20
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr
 8007dd4:	00030d40 	.word	0x00030d40

08007dd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007de0:	2300      	movs	r3, #0
 8007de2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	3301      	adds	r3, #1
 8007de8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	4a11      	ldr	r2, [pc, #68]	; (8007e34 <USB_FlushRxFifo+0x5c>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d901      	bls.n	8007df6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e018      	b.n	8007e28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	daf2      	bge.n	8007de4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2210      	movs	r2, #16
 8007e06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	4a08      	ldr	r2, [pc, #32]	; (8007e34 <USB_FlushRxFifo+0x5c>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d901      	bls.n	8007e1a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007e16:	2303      	movs	r3, #3
 8007e18:	e006      	b.n	8007e28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	f003 0310 	and.w	r3, r3, #16
 8007e22:	2b10      	cmp	r3, #16
 8007e24:	d0f0      	beq.n	8007e08 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007e26:	2300      	movs	r3, #0
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3714      	adds	r7, #20
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr
 8007e34:	00030d40 	.word	0x00030d40

08007e38 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	460b      	mov	r3, r1
 8007e42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	78fb      	ldrb	r3, [r7, #3]
 8007e52:	68f9      	ldr	r1, [r7, #12]
 8007e54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3714      	adds	r7, #20
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr

08007e6a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007e6a:	b480      	push	{r7}
 8007e6c:	b087      	sub	sp, #28
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	f003 0306 	and.w	r3, r3, #6
 8007e82:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d102      	bne.n	8007e90 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	75fb      	strb	r3, [r7, #23]
 8007e8e:	e00a      	b.n	8007ea6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d002      	beq.n	8007e9c <USB_GetDevSpeed+0x32>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2b06      	cmp	r3, #6
 8007e9a:	d102      	bne.n	8007ea2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007e9c:	2302      	movs	r3, #2
 8007e9e:	75fb      	strb	r3, [r7, #23]
 8007ea0:	e001      	b.n	8007ea6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007ea2:	230f      	movs	r3, #15
 8007ea4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	371c      	adds	r7, #28
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	785b      	ldrb	r3, [r3, #1]
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d13a      	bne.n	8007f46 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ed6:	69da      	ldr	r2, [r3, #28]
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	f003 030f 	and.w	r3, r3, #15
 8007ee0:	2101      	movs	r1, #1
 8007ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	68f9      	ldr	r1, [r7, #12]
 8007eea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	015a      	lsls	r2, r3, #5
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	4413      	add	r3, r2
 8007efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d155      	bne.n	8007fb4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	015a      	lsls	r2, r3, #5
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	4413      	add	r3, r2
 8007f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	791b      	ldrb	r3, [r3, #4]
 8007f22:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f24:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	059b      	lsls	r3, r3, #22
 8007f2a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	68ba      	ldr	r2, [r7, #8]
 8007f30:	0151      	lsls	r1, r2, #5
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	440a      	add	r2, r1
 8007f36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f42:	6013      	str	r3, [r2, #0]
 8007f44:	e036      	b.n	8007fb4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f4c:	69da      	ldr	r2, [r3, #28]
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	f003 030f 	and.w	r3, r3, #15
 8007f56:	2101      	movs	r1, #1
 8007f58:	fa01 f303 	lsl.w	r3, r1, r3
 8007f5c:	041b      	lsls	r3, r3, #16
 8007f5e:	68f9      	ldr	r1, [r7, #12]
 8007f60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f64:	4313      	orrs	r3, r2
 8007f66:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	015a      	lsls	r2, r3, #5
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	4413      	add	r3, r2
 8007f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d11a      	bne.n	8007fb4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	015a      	lsls	r2, r3, #5
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	4413      	add	r3, r2
 8007f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	791b      	ldrb	r3, [r3, #4]
 8007f98:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007f9a:	430b      	orrs	r3, r1
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	68ba      	ldr	r2, [r7, #8]
 8007fa0:	0151      	lsls	r1, r2, #5
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	440a      	add	r2, r1
 8007fa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fb2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3714      	adds	r7, #20
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
	...

08007fc4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	785b      	ldrb	r3, [r3, #1]
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d161      	bne.n	80080a4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	015a      	lsls	r2, r3, #5
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ff2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ff6:	d11f      	bne.n	8008038 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	015a      	lsls	r2, r3, #5
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	4413      	add	r3, r2
 8008000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68ba      	ldr	r2, [r7, #8]
 8008008:	0151      	lsls	r1, r2, #5
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	440a      	add	r2, r1
 800800e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008012:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008016:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	015a      	lsls	r2, r3, #5
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	4413      	add	r3, r2
 8008020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68ba      	ldr	r2, [r7, #8]
 8008028:	0151      	lsls	r1, r2, #5
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	440a      	add	r2, r1
 800802e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008032:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008036:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800803e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	f003 030f 	and.w	r3, r3, #15
 8008048:	2101      	movs	r1, #1
 800804a:	fa01 f303 	lsl.w	r3, r1, r3
 800804e:	b29b      	uxth	r3, r3
 8008050:	43db      	mvns	r3, r3
 8008052:	68f9      	ldr	r1, [r7, #12]
 8008054:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008058:	4013      	ands	r3, r2
 800805a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008062:	69da      	ldr	r2, [r3, #28]
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	f003 030f 	and.w	r3, r3, #15
 800806c:	2101      	movs	r1, #1
 800806e:	fa01 f303 	lsl.w	r3, r1, r3
 8008072:	b29b      	uxth	r3, r3
 8008074:	43db      	mvns	r3, r3
 8008076:	68f9      	ldr	r1, [r7, #12]
 8008078:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800807c:	4013      	ands	r3, r2
 800807e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	015a      	lsls	r2, r3, #5
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	4413      	add	r3, r2
 8008088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	0159      	lsls	r1, r3, #5
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	440b      	add	r3, r1
 8008096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800809a:	4619      	mov	r1, r3
 800809c:	4b35      	ldr	r3, [pc, #212]	; (8008174 <USB_DeactivateEndpoint+0x1b0>)
 800809e:	4013      	ands	r3, r2
 80080a0:	600b      	str	r3, [r1, #0]
 80080a2:	e060      	b.n	8008166 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	015a      	lsls	r2, r3, #5
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	4413      	add	r3, r2
 80080ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080ba:	d11f      	bne.n	80080fc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	015a      	lsls	r2, r3, #5
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	4413      	add	r3, r2
 80080c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	68ba      	ldr	r2, [r7, #8]
 80080cc:	0151      	lsls	r1, r2, #5
 80080ce:	68fa      	ldr	r2, [r7, #12]
 80080d0:	440a      	add	r2, r1
 80080d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80080da:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	015a      	lsls	r2, r3, #5
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	4413      	add	r3, r2
 80080e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68ba      	ldr	r2, [r7, #8]
 80080ec:	0151      	lsls	r1, r2, #5
 80080ee:	68fa      	ldr	r2, [r7, #12]
 80080f0:	440a      	add	r2, r1
 80080f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80080fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008102:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	f003 030f 	and.w	r3, r3, #15
 800810c:	2101      	movs	r1, #1
 800810e:	fa01 f303 	lsl.w	r3, r1, r3
 8008112:	041b      	lsls	r3, r3, #16
 8008114:	43db      	mvns	r3, r3
 8008116:	68f9      	ldr	r1, [r7, #12]
 8008118:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800811c:	4013      	ands	r3, r2
 800811e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008126:	69da      	ldr	r2, [r3, #28]
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	f003 030f 	and.w	r3, r3, #15
 8008130:	2101      	movs	r1, #1
 8008132:	fa01 f303 	lsl.w	r3, r1, r3
 8008136:	041b      	lsls	r3, r3, #16
 8008138:	43db      	mvns	r3, r3
 800813a:	68f9      	ldr	r1, [r7, #12]
 800813c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008140:	4013      	ands	r3, r2
 8008142:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	015a      	lsls	r2, r3, #5
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	4413      	add	r3, r2
 800814c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	0159      	lsls	r1, r3, #5
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	440b      	add	r3, r1
 800815a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800815e:	4619      	mov	r1, r3
 8008160:	4b05      	ldr	r3, [pc, #20]	; (8008178 <USB_DeactivateEndpoint+0x1b4>)
 8008162:	4013      	ands	r3, r2
 8008164:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3714      	adds	r7, #20
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr
 8008174:	ec337800 	.word	0xec337800
 8008178:	eff37800 	.word	0xeff37800

0800817c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b08a      	sub	sp, #40	; 0x28
 8008180:	af02      	add	r7, sp, #8
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	4613      	mov	r3, r2
 8008188:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	785b      	ldrb	r3, [r3, #1]
 8008198:	2b01      	cmp	r3, #1
 800819a:	f040 815c 	bne.w	8008456 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	699b      	ldr	r3, [r3, #24]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d132      	bne.n	800820c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	015a      	lsls	r2, r3, #5
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	4413      	add	r3, r2
 80081ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081b2:	691b      	ldr	r3, [r3, #16]
 80081b4:	69ba      	ldr	r2, [r7, #24]
 80081b6:	0151      	lsls	r1, r2, #5
 80081b8:	69fa      	ldr	r2, [r7, #28]
 80081ba:	440a      	add	r2, r1
 80081bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80081c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80081c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	015a      	lsls	r2, r3, #5
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	4413      	add	r3, r2
 80081d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	69ba      	ldr	r2, [r7, #24]
 80081da:	0151      	lsls	r1, r2, #5
 80081dc:	69fa      	ldr	r2, [r7, #28]
 80081de:	440a      	add	r2, r1
 80081e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80081e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	015a      	lsls	r2, r3, #5
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	4413      	add	r3, r2
 80081f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	69ba      	ldr	r2, [r7, #24]
 80081fa:	0151      	lsls	r1, r2, #5
 80081fc:	69fa      	ldr	r2, [r7, #28]
 80081fe:	440a      	add	r2, r1
 8008200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008204:	0cdb      	lsrs	r3, r3, #19
 8008206:	04db      	lsls	r3, r3, #19
 8008208:	6113      	str	r3, [r2, #16]
 800820a:	e074      	b.n	80082f6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800820c:	69bb      	ldr	r3, [r7, #24]
 800820e:	015a      	lsls	r2, r3, #5
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	4413      	add	r3, r2
 8008214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	69ba      	ldr	r2, [r7, #24]
 800821c:	0151      	lsls	r1, r2, #5
 800821e:	69fa      	ldr	r2, [r7, #28]
 8008220:	440a      	add	r2, r1
 8008222:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008226:	0cdb      	lsrs	r3, r3, #19
 8008228:	04db      	lsls	r3, r3, #19
 800822a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	015a      	lsls	r2, r3, #5
 8008230:	69fb      	ldr	r3, [r7, #28]
 8008232:	4413      	add	r3, r2
 8008234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008238:	691b      	ldr	r3, [r3, #16]
 800823a:	69ba      	ldr	r2, [r7, #24]
 800823c:	0151      	lsls	r1, r2, #5
 800823e:	69fa      	ldr	r2, [r7, #28]
 8008240:	440a      	add	r2, r1
 8008242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008246:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800824a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800824e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	015a      	lsls	r2, r3, #5
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	4413      	add	r3, r2
 8008258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800825c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	6999      	ldr	r1, [r3, #24]
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	440b      	add	r3, r1
 8008268:	1e59      	subs	r1, r3, #1
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	68db      	ldr	r3, [r3, #12]
 800826e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008272:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008274:	4b9d      	ldr	r3, [pc, #628]	; (80084ec <USB_EPStartXfer+0x370>)
 8008276:	400b      	ands	r3, r1
 8008278:	69b9      	ldr	r1, [r7, #24]
 800827a:	0148      	lsls	r0, r1, #5
 800827c:	69f9      	ldr	r1, [r7, #28]
 800827e:	4401      	add	r1, r0
 8008280:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008284:	4313      	orrs	r3, r2
 8008286:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	015a      	lsls	r2, r3, #5
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	4413      	add	r3, r2
 8008290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008294:	691a      	ldr	r2, [r3, #16]
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	699b      	ldr	r3, [r3, #24]
 800829a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800829e:	69b9      	ldr	r1, [r7, #24]
 80082a0:	0148      	lsls	r0, r1, #5
 80082a2:	69f9      	ldr	r1, [r7, #28]
 80082a4:	4401      	add	r1, r0
 80082a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80082aa:	4313      	orrs	r3, r2
 80082ac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	791b      	ldrb	r3, [r3, #4]
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d11f      	bne.n	80082f6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	015a      	lsls	r2, r3, #5
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	4413      	add	r3, r2
 80082be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082c2:	691b      	ldr	r3, [r3, #16]
 80082c4:	69ba      	ldr	r2, [r7, #24]
 80082c6:	0151      	lsls	r1, r2, #5
 80082c8:	69fa      	ldr	r2, [r7, #28]
 80082ca:	440a      	add	r2, r1
 80082cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082d0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80082d4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80082d6:	69bb      	ldr	r3, [r7, #24]
 80082d8:	015a      	lsls	r2, r3, #5
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	4413      	add	r3, r2
 80082de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082e2:	691b      	ldr	r3, [r3, #16]
 80082e4:	69ba      	ldr	r2, [r7, #24]
 80082e6:	0151      	lsls	r1, r2, #5
 80082e8:	69fa      	ldr	r2, [r7, #28]
 80082ea:	440a      	add	r2, r1
 80082ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80082f4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80082f6:	79fb      	ldrb	r3, [r7, #7]
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d14b      	bne.n	8008394 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	695b      	ldr	r3, [r3, #20]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d009      	beq.n	8008318 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	015a      	lsls	r2, r3, #5
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	4413      	add	r3, r2
 800830c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008310:	461a      	mov	r2, r3
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	695b      	ldr	r3, [r3, #20]
 8008316:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	791b      	ldrb	r3, [r3, #4]
 800831c:	2b01      	cmp	r3, #1
 800831e:	d128      	bne.n	8008372 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800832c:	2b00      	cmp	r3, #0
 800832e:	d110      	bne.n	8008352 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	015a      	lsls	r2, r3, #5
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	4413      	add	r3, r2
 8008338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	69ba      	ldr	r2, [r7, #24]
 8008340:	0151      	lsls	r1, r2, #5
 8008342:	69fa      	ldr	r2, [r7, #28]
 8008344:	440a      	add	r2, r1
 8008346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800834a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800834e:	6013      	str	r3, [r2, #0]
 8008350:	e00f      	b.n	8008372 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	015a      	lsls	r2, r3, #5
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	4413      	add	r3, r2
 800835a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	69ba      	ldr	r2, [r7, #24]
 8008362:	0151      	lsls	r1, r2, #5
 8008364:	69fa      	ldr	r2, [r7, #28]
 8008366:	440a      	add	r2, r1
 8008368:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800836c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008370:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	015a      	lsls	r2, r3, #5
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	4413      	add	r3, r2
 800837a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	69ba      	ldr	r2, [r7, #24]
 8008382:	0151      	lsls	r1, r2, #5
 8008384:	69fa      	ldr	r2, [r7, #28]
 8008386:	440a      	add	r2, r1
 8008388:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800838c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008390:	6013      	str	r3, [r2, #0]
 8008392:	e133      	b.n	80085fc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	015a      	lsls	r2, r3, #5
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	4413      	add	r3, r2
 800839c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	69ba      	ldr	r2, [r7, #24]
 80083a4:	0151      	lsls	r1, r2, #5
 80083a6:	69fa      	ldr	r2, [r7, #28]
 80083a8:	440a      	add	r2, r1
 80083aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80083b2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	791b      	ldrb	r3, [r3, #4]
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d015      	beq.n	80083e8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	699b      	ldr	r3, [r3, #24]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f000 811b 	beq.w	80085fc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	f003 030f 	and.w	r3, r3, #15
 80083d6:	2101      	movs	r1, #1
 80083d8:	fa01 f303 	lsl.w	r3, r1, r3
 80083dc:	69f9      	ldr	r1, [r7, #28]
 80083de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083e2:	4313      	orrs	r3, r2
 80083e4:	634b      	str	r3, [r1, #52]	; 0x34
 80083e6:	e109      	b.n	80085fc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80083e8:	69fb      	ldr	r3, [r7, #28]
 80083ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d110      	bne.n	800841a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80083f8:	69bb      	ldr	r3, [r7, #24]
 80083fa:	015a      	lsls	r2, r3, #5
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	4413      	add	r3, r2
 8008400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	69ba      	ldr	r2, [r7, #24]
 8008408:	0151      	lsls	r1, r2, #5
 800840a:	69fa      	ldr	r2, [r7, #28]
 800840c:	440a      	add	r2, r1
 800840e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008412:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008416:	6013      	str	r3, [r2, #0]
 8008418:	e00f      	b.n	800843a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800841a:	69bb      	ldr	r3, [r7, #24]
 800841c:	015a      	lsls	r2, r3, #5
 800841e:	69fb      	ldr	r3, [r7, #28]
 8008420:	4413      	add	r3, r2
 8008422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	69ba      	ldr	r2, [r7, #24]
 800842a:	0151      	lsls	r1, r2, #5
 800842c:	69fa      	ldr	r2, [r7, #28]
 800842e:	440a      	add	r2, r1
 8008430:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008438:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	6919      	ldr	r1, [r3, #16]
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	781a      	ldrb	r2, [r3, #0]
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	699b      	ldr	r3, [r3, #24]
 8008446:	b298      	uxth	r0, r3
 8008448:	79fb      	ldrb	r3, [r7, #7]
 800844a:	9300      	str	r3, [sp, #0]
 800844c:	4603      	mov	r3, r0
 800844e:	68f8      	ldr	r0, [r7, #12]
 8008450:	f000 fade 	bl	8008a10 <USB_WritePacket>
 8008454:	e0d2      	b.n	80085fc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	015a      	lsls	r2, r3, #5
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	4413      	add	r3, r2
 800845e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008462:	691b      	ldr	r3, [r3, #16]
 8008464:	69ba      	ldr	r2, [r7, #24]
 8008466:	0151      	lsls	r1, r2, #5
 8008468:	69fa      	ldr	r2, [r7, #28]
 800846a:	440a      	add	r2, r1
 800846c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008470:	0cdb      	lsrs	r3, r3, #19
 8008472:	04db      	lsls	r3, r3, #19
 8008474:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008476:	69bb      	ldr	r3, [r7, #24]
 8008478:	015a      	lsls	r2, r3, #5
 800847a:	69fb      	ldr	r3, [r7, #28]
 800847c:	4413      	add	r3, r2
 800847e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	69ba      	ldr	r2, [r7, #24]
 8008486:	0151      	lsls	r1, r2, #5
 8008488:	69fa      	ldr	r2, [r7, #28]
 800848a:	440a      	add	r2, r1
 800848c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008490:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008494:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008498:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	699b      	ldr	r3, [r3, #24]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d126      	bne.n	80084f0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	015a      	lsls	r2, r3, #5
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	4413      	add	r3, r2
 80084aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ae:	691a      	ldr	r2, [r3, #16]
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084b8:	69b9      	ldr	r1, [r7, #24]
 80084ba:	0148      	lsls	r0, r1, #5
 80084bc:	69f9      	ldr	r1, [r7, #28]
 80084be:	4401      	add	r1, r0
 80084c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80084c4:	4313      	orrs	r3, r2
 80084c6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	015a      	lsls	r2, r3, #5
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	4413      	add	r3, r2
 80084d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	69ba      	ldr	r2, [r7, #24]
 80084d8:	0151      	lsls	r1, r2, #5
 80084da:	69fa      	ldr	r2, [r7, #28]
 80084dc:	440a      	add	r2, r1
 80084de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80084e6:	6113      	str	r3, [r2, #16]
 80084e8:	e03a      	b.n	8008560 <USB_EPStartXfer+0x3e4>
 80084ea:	bf00      	nop
 80084ec:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	699a      	ldr	r2, [r3, #24]
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	4413      	add	r3, r2
 80084fa:	1e5a      	subs	r2, r3, #1
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	fbb2 f3f3 	udiv	r3, r2, r3
 8008504:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	8afa      	ldrh	r2, [r7, #22]
 800850c:	fb03 f202 	mul.w	r2, r3, r2
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	015a      	lsls	r2, r3, #5
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	4413      	add	r3, r2
 800851c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008520:	691a      	ldr	r2, [r3, #16]
 8008522:	8afb      	ldrh	r3, [r7, #22]
 8008524:	04d9      	lsls	r1, r3, #19
 8008526:	4b38      	ldr	r3, [pc, #224]	; (8008608 <USB_EPStartXfer+0x48c>)
 8008528:	400b      	ands	r3, r1
 800852a:	69b9      	ldr	r1, [r7, #24]
 800852c:	0148      	lsls	r0, r1, #5
 800852e:	69f9      	ldr	r1, [r7, #28]
 8008530:	4401      	add	r1, r0
 8008532:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008536:	4313      	orrs	r3, r2
 8008538:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800853a:	69bb      	ldr	r3, [r7, #24]
 800853c:	015a      	lsls	r2, r3, #5
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	4413      	add	r3, r2
 8008542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008546:	691a      	ldr	r2, [r3, #16]
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	69db      	ldr	r3, [r3, #28]
 800854c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008550:	69b9      	ldr	r1, [r7, #24]
 8008552:	0148      	lsls	r0, r1, #5
 8008554:	69f9      	ldr	r1, [r7, #28]
 8008556:	4401      	add	r1, r0
 8008558:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800855c:	4313      	orrs	r3, r2
 800855e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008560:	79fb      	ldrb	r3, [r7, #7]
 8008562:	2b01      	cmp	r3, #1
 8008564:	d10d      	bne.n	8008582 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d009      	beq.n	8008582 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	6919      	ldr	r1, [r3, #16]
 8008572:	69bb      	ldr	r3, [r7, #24]
 8008574:	015a      	lsls	r2, r3, #5
 8008576:	69fb      	ldr	r3, [r7, #28]
 8008578:	4413      	add	r3, r2
 800857a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800857e:	460a      	mov	r2, r1
 8008580:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	791b      	ldrb	r3, [r3, #4]
 8008586:	2b01      	cmp	r3, #1
 8008588:	d128      	bne.n	80085dc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008596:	2b00      	cmp	r3, #0
 8008598:	d110      	bne.n	80085bc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800859a:	69bb      	ldr	r3, [r7, #24]
 800859c:	015a      	lsls	r2, r3, #5
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	4413      	add	r3, r2
 80085a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	69ba      	ldr	r2, [r7, #24]
 80085aa:	0151      	lsls	r1, r2, #5
 80085ac:	69fa      	ldr	r2, [r7, #28]
 80085ae:	440a      	add	r2, r1
 80085b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80085b8:	6013      	str	r3, [r2, #0]
 80085ba:	e00f      	b.n	80085dc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	015a      	lsls	r2, r3, #5
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	4413      	add	r3, r2
 80085c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	69ba      	ldr	r2, [r7, #24]
 80085cc:	0151      	lsls	r1, r2, #5
 80085ce:	69fa      	ldr	r2, [r7, #28]
 80085d0:	440a      	add	r2, r1
 80085d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085da:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80085dc:	69bb      	ldr	r3, [r7, #24]
 80085de:	015a      	lsls	r2, r3, #5
 80085e0:	69fb      	ldr	r3, [r7, #28]
 80085e2:	4413      	add	r3, r2
 80085e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	69ba      	ldr	r2, [r7, #24]
 80085ec:	0151      	lsls	r1, r2, #5
 80085ee:	69fa      	ldr	r2, [r7, #28]
 80085f0:	440a      	add	r2, r1
 80085f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80085fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3720      	adds	r7, #32
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	1ff80000 	.word	0x1ff80000

0800860c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800860c:	b480      	push	{r7}
 800860e:	b087      	sub	sp, #28
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	4613      	mov	r3, r2
 8008618:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	785b      	ldrb	r3, [r3, #1]
 8008628:	2b01      	cmp	r3, #1
 800862a:	f040 80ce 	bne.w	80087ca <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	699b      	ldr	r3, [r3, #24]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d132      	bne.n	800869c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	015a      	lsls	r2, r3, #5
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	4413      	add	r3, r2
 800863e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008642:	691b      	ldr	r3, [r3, #16]
 8008644:	693a      	ldr	r2, [r7, #16]
 8008646:	0151      	lsls	r1, r2, #5
 8008648:	697a      	ldr	r2, [r7, #20]
 800864a:	440a      	add	r2, r1
 800864c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008650:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008654:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008658:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	015a      	lsls	r2, r3, #5
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	4413      	add	r3, r2
 8008662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	693a      	ldr	r2, [r7, #16]
 800866a:	0151      	lsls	r1, r2, #5
 800866c:	697a      	ldr	r2, [r7, #20]
 800866e:	440a      	add	r2, r1
 8008670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008674:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008678:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	015a      	lsls	r2, r3, #5
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	4413      	add	r3, r2
 8008682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	693a      	ldr	r2, [r7, #16]
 800868a:	0151      	lsls	r1, r2, #5
 800868c:	697a      	ldr	r2, [r7, #20]
 800868e:	440a      	add	r2, r1
 8008690:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008694:	0cdb      	lsrs	r3, r3, #19
 8008696:	04db      	lsls	r3, r3, #19
 8008698:	6113      	str	r3, [r2, #16]
 800869a:	e04e      	b.n	800873a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	015a      	lsls	r2, r3, #5
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	4413      	add	r3, r2
 80086a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	693a      	ldr	r2, [r7, #16]
 80086ac:	0151      	lsls	r1, r2, #5
 80086ae:	697a      	ldr	r2, [r7, #20]
 80086b0:	440a      	add	r2, r1
 80086b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086b6:	0cdb      	lsrs	r3, r3, #19
 80086b8:	04db      	lsls	r3, r3, #19
 80086ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	015a      	lsls	r2, r3, #5
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	4413      	add	r3, r2
 80086c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	693a      	ldr	r2, [r7, #16]
 80086cc:	0151      	lsls	r1, r2, #5
 80086ce:	697a      	ldr	r2, [r7, #20]
 80086d0:	440a      	add	r2, r1
 80086d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80086da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80086de:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	699a      	ldr	r2, [r3, #24]
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d903      	bls.n	80086f4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	68da      	ldr	r2, [r3, #12]
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	015a      	lsls	r2, r3, #5
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	4413      	add	r3, r2
 80086fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008700:	691b      	ldr	r3, [r3, #16]
 8008702:	693a      	ldr	r2, [r7, #16]
 8008704:	0151      	lsls	r1, r2, #5
 8008706:	697a      	ldr	r2, [r7, #20]
 8008708:	440a      	add	r2, r1
 800870a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800870e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008712:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	015a      	lsls	r2, r3, #5
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	4413      	add	r3, r2
 800871c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008720:	691a      	ldr	r2, [r3, #16]
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800872a:	6939      	ldr	r1, [r7, #16]
 800872c:	0148      	lsls	r0, r1, #5
 800872e:	6979      	ldr	r1, [r7, #20]
 8008730:	4401      	add	r1, r0
 8008732:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008736:	4313      	orrs	r3, r2
 8008738:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800873a:	79fb      	ldrb	r3, [r7, #7]
 800873c:	2b01      	cmp	r3, #1
 800873e:	d11e      	bne.n	800877e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	695b      	ldr	r3, [r3, #20]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d009      	beq.n	800875c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	015a      	lsls	r2, r3, #5
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	4413      	add	r3, r2
 8008750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008754:	461a      	mov	r2, r3
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	695b      	ldr	r3, [r3, #20]
 800875a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	015a      	lsls	r2, r3, #5
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	4413      	add	r3, r2
 8008764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	693a      	ldr	r2, [r7, #16]
 800876c:	0151      	lsls	r1, r2, #5
 800876e:	697a      	ldr	r2, [r7, #20]
 8008770:	440a      	add	r2, r1
 8008772:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008776:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800877a:	6013      	str	r3, [r2, #0]
 800877c:	e097      	b.n	80088ae <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	015a      	lsls	r2, r3, #5
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	4413      	add	r3, r2
 8008786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	693a      	ldr	r2, [r7, #16]
 800878e:	0151      	lsls	r1, r2, #5
 8008790:	697a      	ldr	r2, [r7, #20]
 8008792:	440a      	add	r2, r1
 8008794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008798:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800879c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	699b      	ldr	r3, [r3, #24]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	f000 8083 	beq.w	80088ae <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	f003 030f 	and.w	r3, r3, #15
 80087b8:	2101      	movs	r1, #1
 80087ba:	fa01 f303 	lsl.w	r3, r1, r3
 80087be:	6979      	ldr	r1, [r7, #20]
 80087c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087c4:	4313      	orrs	r3, r2
 80087c6:	634b      	str	r3, [r1, #52]	; 0x34
 80087c8:	e071      	b.n	80088ae <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	015a      	lsls	r2, r3, #5
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	4413      	add	r3, r2
 80087d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	693a      	ldr	r2, [r7, #16]
 80087da:	0151      	lsls	r1, r2, #5
 80087dc:	697a      	ldr	r2, [r7, #20]
 80087de:	440a      	add	r2, r1
 80087e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087e4:	0cdb      	lsrs	r3, r3, #19
 80087e6:	04db      	lsls	r3, r3, #19
 80087e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	015a      	lsls	r2, r3, #5
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	4413      	add	r3, r2
 80087f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087f6:	691b      	ldr	r3, [r3, #16]
 80087f8:	693a      	ldr	r2, [r7, #16]
 80087fa:	0151      	lsls	r1, r2, #5
 80087fc:	697a      	ldr	r2, [r7, #20]
 80087fe:	440a      	add	r2, r1
 8008800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008804:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008808:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800880c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	699b      	ldr	r3, [r3, #24]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d003      	beq.n	800881e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	68da      	ldr	r2, [r3, #12]
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	68da      	ldr	r2, [r3, #12]
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	015a      	lsls	r2, r3, #5
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	4413      	add	r3, r2
 800882e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008832:	691b      	ldr	r3, [r3, #16]
 8008834:	693a      	ldr	r2, [r7, #16]
 8008836:	0151      	lsls	r1, r2, #5
 8008838:	697a      	ldr	r2, [r7, #20]
 800883a:	440a      	add	r2, r1
 800883c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008840:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008844:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	015a      	lsls	r2, r3, #5
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	4413      	add	r3, r2
 800884e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008852:	691a      	ldr	r2, [r3, #16]
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	69db      	ldr	r3, [r3, #28]
 8008858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800885c:	6939      	ldr	r1, [r7, #16]
 800885e:	0148      	lsls	r0, r1, #5
 8008860:	6979      	ldr	r1, [r7, #20]
 8008862:	4401      	add	r1, r0
 8008864:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008868:	4313      	orrs	r3, r2
 800886a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800886c:	79fb      	ldrb	r3, [r7, #7]
 800886e:	2b01      	cmp	r3, #1
 8008870:	d10d      	bne.n	800888e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d009      	beq.n	800888e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	6919      	ldr	r1, [r3, #16]
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	015a      	lsls	r2, r3, #5
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	4413      	add	r3, r2
 8008886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800888a:	460a      	mov	r2, r1
 800888c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	015a      	lsls	r2, r3, #5
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	4413      	add	r3, r2
 8008896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	693a      	ldr	r2, [r7, #16]
 800889e:	0151      	lsls	r1, r2, #5
 80088a0:	697a      	ldr	r2, [r7, #20]
 80088a2:	440a      	add	r2, r1
 80088a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80088ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	371c      	adds	r7, #28
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80088bc:	b480      	push	{r7}
 80088be:	b087      	sub	sp, #28
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80088c6:	2300      	movs	r3, #0
 80088c8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80088ca:	2300      	movs	r3, #0
 80088cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	785b      	ldrb	r3, [r3, #1]
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d14a      	bne.n	8008970 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	015a      	lsls	r2, r3, #5
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	4413      	add	r3, r2
 80088e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088f2:	f040 8086 	bne.w	8008a02 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	015a      	lsls	r2, r3, #5
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	4413      	add	r3, r2
 8008900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	683a      	ldr	r2, [r7, #0]
 8008908:	7812      	ldrb	r2, [r2, #0]
 800890a:	0151      	lsls	r1, r2, #5
 800890c:	693a      	ldr	r2, [r7, #16]
 800890e:	440a      	add	r2, r1
 8008910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008914:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008918:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	015a      	lsls	r2, r3, #5
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	4413      	add	r3, r2
 8008924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	683a      	ldr	r2, [r7, #0]
 800892c:	7812      	ldrb	r2, [r2, #0]
 800892e:	0151      	lsls	r1, r2, #5
 8008930:	693a      	ldr	r2, [r7, #16]
 8008932:	440a      	add	r2, r1
 8008934:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008938:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800893c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	3301      	adds	r3, #1
 8008942:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f242 7210 	movw	r2, #10000	; 0x2710
 800894a:	4293      	cmp	r3, r2
 800894c:	d902      	bls.n	8008954 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	75fb      	strb	r3, [r7, #23]
          break;
 8008952:	e056      	b.n	8008a02 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	015a      	lsls	r2, r3, #5
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	4413      	add	r3, r2
 800895e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008968:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800896c:	d0e7      	beq.n	800893e <USB_EPStopXfer+0x82>
 800896e:	e048      	b.n	8008a02 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	015a      	lsls	r2, r3, #5
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	4413      	add	r3, r2
 800897a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008984:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008988:	d13b      	bne.n	8008a02 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	015a      	lsls	r2, r3, #5
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	4413      	add	r3, r2
 8008994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	683a      	ldr	r2, [r7, #0]
 800899c:	7812      	ldrb	r2, [r2, #0]
 800899e:	0151      	lsls	r1, r2, #5
 80089a0:	693a      	ldr	r2, [r7, #16]
 80089a2:	440a      	add	r2, r1
 80089a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80089ac:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	015a      	lsls	r2, r3, #5
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	4413      	add	r3, r2
 80089b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	683a      	ldr	r2, [r7, #0]
 80089c0:	7812      	ldrb	r2, [r2, #0]
 80089c2:	0151      	lsls	r1, r2, #5
 80089c4:	693a      	ldr	r2, [r7, #16]
 80089c6:	440a      	add	r2, r1
 80089c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	3301      	adds	r3, #1
 80089d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f242 7210 	movw	r2, #10000	; 0x2710
 80089de:	4293      	cmp	r3, r2
 80089e0:	d902      	bls.n	80089e8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	75fb      	strb	r3, [r7, #23]
          break;
 80089e6:	e00c      	b.n	8008a02 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	015a      	lsls	r2, r3, #5
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	4413      	add	r3, r2
 80089f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a00:	d0e7      	beq.n	80089d2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	371c      	adds	r7, #28
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b089      	sub	sp, #36	; 0x24
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	4611      	mov	r1, r2
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	460b      	mov	r3, r1
 8008a20:	71fb      	strb	r3, [r7, #7]
 8008a22:	4613      	mov	r3, r2
 8008a24:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008a2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d123      	bne.n	8008a7e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008a36:	88bb      	ldrh	r3, [r7, #4]
 8008a38:	3303      	adds	r3, #3
 8008a3a:	089b      	lsrs	r3, r3, #2
 8008a3c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008a3e:	2300      	movs	r3, #0
 8008a40:	61bb      	str	r3, [r7, #24]
 8008a42:	e018      	b.n	8008a76 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008a44:	79fb      	ldrb	r3, [r7, #7]
 8008a46:	031a      	lsls	r2, r3, #12
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	4413      	add	r3, r2
 8008a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a50:	461a      	mov	r2, r3
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	3301      	adds	r3, #1
 8008a62:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	3301      	adds	r3, #1
 8008a68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	3301      	adds	r3, #1
 8008a74:	61bb      	str	r3, [r7, #24]
 8008a76:	69ba      	ldr	r2, [r7, #24]
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d3e2      	bcc.n	8008a44 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008a7e:	2300      	movs	r3, #0
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3724      	adds	r7, #36	; 0x24
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b08b      	sub	sp, #44	; 0x2c
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	4613      	mov	r3, r2
 8008a98:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008aa2:	88fb      	ldrh	r3, [r7, #6]
 8008aa4:	089b      	lsrs	r3, r3, #2
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008aaa:	88fb      	ldrh	r3, [r7, #6]
 8008aac:	f003 0303 	and.w	r3, r3, #3
 8008ab0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	623b      	str	r3, [r7, #32]
 8008ab6:	e014      	b.n	8008ae2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008ab8:	69bb      	ldr	r3, [r7, #24]
 8008aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac2:	601a      	str	r2, [r3, #0]
    pDest++;
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008acc:	3301      	adds	r3, #1
 8008ace:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad8:	3301      	adds	r3, #1
 8008ada:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008adc:	6a3b      	ldr	r3, [r7, #32]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	623b      	str	r3, [r7, #32]
 8008ae2:	6a3a      	ldr	r2, [r7, #32]
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d3e6      	bcc.n	8008ab8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008aea:	8bfb      	ldrh	r3, [r7, #30]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d01e      	beq.n	8008b2e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008af0:	2300      	movs	r3, #0
 8008af2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008afa:	461a      	mov	r2, r3
 8008afc:	f107 0310 	add.w	r3, r7, #16
 8008b00:	6812      	ldr	r2, [r2, #0]
 8008b02:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008b04:	693a      	ldr	r2, [r7, #16]
 8008b06:	6a3b      	ldr	r3, [r7, #32]
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	00db      	lsls	r3, r3, #3
 8008b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b10:	b2da      	uxtb	r2, r3
 8008b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b14:	701a      	strb	r2, [r3, #0]
      i++;
 8008b16:	6a3b      	ldr	r3, [r7, #32]
 8008b18:	3301      	adds	r3, #1
 8008b1a:	623b      	str	r3, [r7, #32]
      pDest++;
 8008b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1e:	3301      	adds	r3, #1
 8008b20:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008b22:	8bfb      	ldrh	r3, [r7, #30]
 8008b24:	3b01      	subs	r3, #1
 8008b26:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008b28:	8bfb      	ldrh	r3, [r7, #30]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d1ea      	bne.n	8008b04 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	372c      	adds	r7, #44	; 0x2c
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr

08008b3c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	785b      	ldrb	r3, [r3, #1]
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d12c      	bne.n	8008bb2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	015a      	lsls	r2, r3, #5
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	4413      	add	r3, r2
 8008b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	db12      	blt.n	8008b90 <USB_EPSetStall+0x54>
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00f      	beq.n	8008b90 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	015a      	lsls	r2, r3, #5
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	4413      	add	r3, r2
 8008b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	68ba      	ldr	r2, [r7, #8]
 8008b80:	0151      	lsls	r1, r2, #5
 8008b82:	68fa      	ldr	r2, [r7, #12]
 8008b84:	440a      	add	r2, r1
 8008b86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008b8e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	015a      	lsls	r2, r3, #5
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	4413      	add	r3, r2
 8008b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	68ba      	ldr	r2, [r7, #8]
 8008ba0:	0151      	lsls	r1, r2, #5
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	440a      	add	r2, r1
 8008ba6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008baa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008bae:	6013      	str	r3, [r2, #0]
 8008bb0:	e02b      	b.n	8008c0a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	015a      	lsls	r2, r3, #5
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	4413      	add	r3, r2
 8008bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	db12      	blt.n	8008bea <USB_EPSetStall+0xae>
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00f      	beq.n	8008bea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	015a      	lsls	r2, r3, #5
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	68ba      	ldr	r2, [r7, #8]
 8008bda:	0151      	lsls	r1, r2, #5
 8008bdc:	68fa      	ldr	r2, [r7, #12]
 8008bde:	440a      	add	r2, r1
 8008be0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008be4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008be8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	015a      	lsls	r2, r3, #5
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	68ba      	ldr	r2, [r7, #8]
 8008bfa:	0151      	lsls	r1, r2, #5
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	440a      	add	r2, r1
 8008c00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008c08:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c0a:	2300      	movs	r3, #0
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3714      	adds	r7, #20
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	785b      	ldrb	r3, [r3, #1]
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d128      	bne.n	8008c86 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	015a      	lsls	r2, r3, #5
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	4413      	add	r3, r2
 8008c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	68ba      	ldr	r2, [r7, #8]
 8008c44:	0151      	lsls	r1, r2, #5
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	440a      	add	r2, r1
 8008c4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c52:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	791b      	ldrb	r3, [r3, #4]
 8008c58:	2b03      	cmp	r3, #3
 8008c5a:	d003      	beq.n	8008c64 <USB_EPClearStall+0x4c>
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	791b      	ldrb	r3, [r3, #4]
 8008c60:	2b02      	cmp	r3, #2
 8008c62:	d138      	bne.n	8008cd6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	015a      	lsls	r2, r3, #5
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	4413      	add	r3, r2
 8008c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	68ba      	ldr	r2, [r7, #8]
 8008c74:	0151      	lsls	r1, r2, #5
 8008c76:	68fa      	ldr	r2, [r7, #12]
 8008c78:	440a      	add	r2, r1
 8008c7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c82:	6013      	str	r3, [r2, #0]
 8008c84:	e027      	b.n	8008cd6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	015a      	lsls	r2, r3, #5
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	68ba      	ldr	r2, [r7, #8]
 8008c96:	0151      	lsls	r1, r2, #5
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	440a      	add	r2, r1
 8008c9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ca0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008ca4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	791b      	ldrb	r3, [r3, #4]
 8008caa:	2b03      	cmp	r3, #3
 8008cac:	d003      	beq.n	8008cb6 <USB_EPClearStall+0x9e>
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	791b      	ldrb	r3, [r3, #4]
 8008cb2:	2b02      	cmp	r3, #2
 8008cb4:	d10f      	bne.n	8008cd6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	015a      	lsls	r2, r3, #5
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	4413      	add	r3, r2
 8008cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	68ba      	ldr	r2, [r7, #8]
 8008cc6:	0151      	lsls	r1, r2, #5
 8008cc8:	68fa      	ldr	r2, [r7, #12]
 8008cca:	440a      	add	r2, r1
 8008ccc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cd4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008cd6:	2300      	movs	r3, #0
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3714      	adds	r7, #20
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b085      	sub	sp, #20
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	460b      	mov	r3, r1
 8008cee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d02:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008d06:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	78fb      	ldrb	r3, [r7, #3]
 8008d12:	011b      	lsls	r3, r3, #4
 8008d14:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008d18:	68f9      	ldr	r1, [r7, #12]
 8008d1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008d22:	2300      	movs	r3, #0
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3714      	adds	r7, #20
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b085      	sub	sp, #20
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	68fa      	ldr	r2, [r7, #12]
 8008d46:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d4a:	f023 0303 	bic.w	r3, r3, #3
 8008d4e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	68fa      	ldr	r2, [r7, #12]
 8008d5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d5e:	f023 0302 	bic.w	r3, r3, #2
 8008d62:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3714      	adds	r7, #20
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr

08008d72 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008d72:	b480      	push	{r7}
 8008d74:	b085      	sub	sp, #20
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	68fa      	ldr	r2, [r7, #12]
 8008d88:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d8c:	f023 0303 	bic.w	r3, r3, #3
 8008d90:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008da0:	f043 0302 	orr.w	r3, r3, #2
 8008da4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008da6:	2300      	movs	r3, #0
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3714      	adds	r7, #20
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b085      	sub	sp, #20
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	695b      	ldr	r3, [r3, #20]
 8008dc0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	699b      	ldr	r3, [r3, #24]
 8008dc6:	68fa      	ldr	r2, [r7, #12]
 8008dc8:	4013      	ands	r3, r2
 8008dca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3714      	adds	r7, #20
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr

08008dda <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008dda:	b480      	push	{r7}
 8008ddc:	b085      	sub	sp, #20
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dec:	699b      	ldr	r3, [r3, #24]
 8008dee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008df6:	69db      	ldr	r3, [r3, #28]
 8008df8:	68ba      	ldr	r2, [r7, #8]
 8008dfa:	4013      	ands	r3, r2
 8008dfc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	0c1b      	lsrs	r3, r3, #16
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3714      	adds	r7, #20
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr

08008e0e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e0e:	b480      	push	{r7}
 8008e10:	b085      	sub	sp, #20
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e20:	699b      	ldr	r3, [r3, #24]
 8008e22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e2a:	69db      	ldr	r3, [r3, #28]
 8008e2c:	68ba      	ldr	r2, [r7, #8]
 8008e2e:	4013      	ands	r3, r2
 8008e30:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	b29b      	uxth	r3, r3
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3714      	adds	r7, #20
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr

08008e42 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008e42:	b480      	push	{r7}
 8008e44:	b085      	sub	sp, #20
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
 8008e4a:	460b      	mov	r3, r1
 8008e4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008e52:	78fb      	ldrb	r3, [r7, #3]
 8008e54:	015a      	lsls	r2, r3, #5
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	4413      	add	r3, r2
 8008e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e68:	695b      	ldr	r3, [r3, #20]
 8008e6a:	68ba      	ldr	r2, [r7, #8]
 8008e6c:	4013      	ands	r3, r2
 8008e6e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008e70:	68bb      	ldr	r3, [r7, #8]
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3714      	adds	r7, #20
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr

08008e7e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008e7e:	b480      	push	{r7}
 8008e80:	b087      	sub	sp, #28
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
 8008e86:	460b      	mov	r3, r1
 8008e88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e94:	691b      	ldr	r3, [r3, #16]
 8008e96:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ea0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008ea2:	78fb      	ldrb	r3, [r7, #3]
 8008ea4:	f003 030f 	and.w	r3, r3, #15
 8008ea8:	68fa      	ldr	r2, [r7, #12]
 8008eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8008eae:	01db      	lsls	r3, r3, #7
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	693a      	ldr	r2, [r7, #16]
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008eb8:	78fb      	ldrb	r3, [r7, #3]
 8008eba:	015a      	lsls	r2, r3, #5
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	693a      	ldr	r2, [r7, #16]
 8008ec8:	4013      	ands	r3, r2
 8008eca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008ecc:	68bb      	ldr	r3, [r7, #8]
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	371c      	adds	r7, #28
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr

08008eda <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008eda:	b480      	push	{r7}
 8008edc:	b083      	sub	sp, #12
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	695b      	ldr	r3, [r3, #20]
 8008ee6:	f003 0301 	and.w	r3, r3, #1
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	370c      	adds	r7, #12
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr

08008ef6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008ef6:	b480      	push	{r7}
 8008ef8:	b085      	sub	sp, #20
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	68fa      	ldr	r2, [r7, #12]
 8008f0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f10:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008f14:	f023 0307 	bic.w	r3, r3, #7
 8008f18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	68fa      	ldr	r2, [r7, #12]
 8008f24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f2e:	2300      	movs	r3, #0
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3714      	adds	r7, #20
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b087      	sub	sp, #28
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	460b      	mov	r3, r1
 8008f46:	607a      	str	r2, [r7, #4]
 8008f48:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	333c      	adds	r3, #60	; 0x3c
 8008f52:	3304      	adds	r3, #4
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	4a26      	ldr	r2, [pc, #152]	; (8008ff4 <USB_EP0_OutStart+0xb8>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d90a      	bls.n	8008f76 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f70:	d101      	bne.n	8008f76 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008f72:	2300      	movs	r3, #0
 8008f74:	e037      	b.n	8008fe6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	2300      	movs	r3, #0
 8008f80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f88:	691b      	ldr	r3, [r3, #16]
 8008f8a:	697a      	ldr	r2, [r7, #20]
 8008f8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f9c:	691b      	ldr	r3, [r3, #16]
 8008f9e:	697a      	ldr	r2, [r7, #20]
 8008fa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fa4:	f043 0318 	orr.w	r3, r3, #24
 8008fa8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fb0:	691b      	ldr	r3, [r3, #16]
 8008fb2:	697a      	ldr	r2, [r7, #20]
 8008fb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fb8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008fbc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008fbe:	7afb      	ldrb	r3, [r7, #11]
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d10f      	bne.n	8008fe4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fca:	461a      	mov	r2, r3
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	697a      	ldr	r2, [r7, #20]
 8008fda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fde:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008fe2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	371c      	adds	r7, #28
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	4f54300a 	.word	0x4f54300a

08008ff8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b085      	sub	sp, #20
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009000:	2300      	movs	r3, #0
 8009002:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	3301      	adds	r3, #1
 8009008:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	4a13      	ldr	r2, [pc, #76]	; (800905c <USB_CoreReset+0x64>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d901      	bls.n	8009016 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009012:	2303      	movs	r3, #3
 8009014:	e01b      	b.n	800904e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	691b      	ldr	r3, [r3, #16]
 800901a:	2b00      	cmp	r3, #0
 800901c:	daf2      	bge.n	8009004 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800901e:	2300      	movs	r3, #0
 8009020:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	f043 0201 	orr.w	r2, r3, #1
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	3301      	adds	r3, #1
 8009032:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	4a09      	ldr	r2, [pc, #36]	; (800905c <USB_CoreReset+0x64>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d901      	bls.n	8009040 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800903c:	2303      	movs	r3, #3
 800903e:	e006      	b.n	800904e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	f003 0301 	and.w	r3, r3, #1
 8009048:	2b01      	cmp	r3, #1
 800904a:	d0f0      	beq.n	800902e <USB_CoreReset+0x36>

  return HAL_OK;
 800904c:	2300      	movs	r3, #0
}
 800904e:	4618      	mov	r0, r3
 8009050:	3714      	adds	r7, #20
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr
 800905a:	bf00      	nop
 800905c:	00030d40 	.word	0x00030d40

08009060 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009064:	4904      	ldr	r1, [pc, #16]	; (8009078 <MX_FATFS_Init+0x18>)
 8009066:	4805      	ldr	r0, [pc, #20]	; (800907c <MX_FATFS_Init+0x1c>)
 8009068:	f004 fdf6 	bl	800dc58 <FATFS_LinkDriver>
 800906c:	4603      	mov	r3, r0
 800906e:	461a      	mov	r2, r3
 8009070:	4b03      	ldr	r3, [pc, #12]	; (8009080 <MX_FATFS_Init+0x20>)
 8009072:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009074:	bf00      	nop
 8009076:	bd80      	pop	{r7, pc}
 8009078:	20000890 	.word	0x20000890
 800907c:	2000002c 	.word	0x2000002c
 8009080:	2000088c 	.word	0x2000088c

08009084 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009084:	b480      	push	{r7}
 8009086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009088:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800908a:	4618      	mov	r0, r3
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr

08009094 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	4603      	mov	r3, r0
 800909c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800909e:	79fb      	ldrb	r3, [r7, #7]
 80090a0:	4618      	mov	r0, r3
 80090a2:	f000 f9d7 	bl	8009454 <USER_SPI_initialize>
 80090a6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3708      	adds	r7, #8
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	4603      	mov	r3, r0
 80090b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 80090ba:	79fb      	ldrb	r3, [r7, #7]
 80090bc:	4618      	mov	r0, r3
 80090be:	f000 fab5 	bl	800962c <USER_SPI_status>
 80090c2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3708      	adds	r7, #8
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60b9      	str	r1, [r7, #8]
 80090d4:	607a      	str	r2, [r7, #4]
 80090d6:	603b      	str	r3, [r7, #0]
 80090d8:	4603      	mov	r3, r0
 80090da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 80090dc:	7bf8      	ldrb	r0, [r7, #15]
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	68b9      	ldr	r1, [r7, #8]
 80090e4:	f000 fab8 	bl	8009658 <USER_SPI_read>
 80090e8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3710      	adds	r7, #16
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b084      	sub	sp, #16
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	607a      	str	r2, [r7, #4]
 80090fc:	603b      	str	r3, [r7, #0]
 80090fe:	4603      	mov	r3, r0
 8009100:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 8009102:	7bf8      	ldrb	r0, [r7, #15]
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	68b9      	ldr	r1, [r7, #8]
 800910a:	f000 fb0b 	bl	8009724 <USER_SPI_write>
 800910e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8009110:	4618      	mov	r0, r3
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	4603      	mov	r3, r0
 8009120:	603a      	str	r2, [r7, #0]
 8009122:	71fb      	strb	r3, [r7, #7]
 8009124:	460b      	mov	r3, r1
 8009126:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8009128:	79b9      	ldrb	r1, [r7, #6]
 800912a:	79fb      	ldrb	r3, [r7, #7]
 800912c:	683a      	ldr	r2, [r7, #0]
 800912e:	4618      	mov	r0, r3
 8009130:	f000 fb74 	bl	800981c <USER_SPI_ioctl>
 8009134:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8009136:	4618      	mov	r0, r3
 8009138:	3708      	adds	r7, #8
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
	...

08009140 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8009148:	f7f9 fa28 	bl	800259c <HAL_GetTick>
 800914c:	4603      	mov	r3, r0
 800914e:	4a04      	ldr	r2, [pc, #16]	; (8009160 <SPI_Timer_On+0x20>)
 8009150:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8009152:	4a04      	ldr	r2, [pc, #16]	; (8009164 <SPI_Timer_On+0x24>)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6013      	str	r3, [r2, #0]
}
 8009158:	bf00      	nop
 800915a:	3708      	adds	r7, #8
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}
 8009160:	20000898 	.word	0x20000898
 8009164:	2000089c 	.word	0x2000089c

08009168 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8009168:	b580      	push	{r7, lr}
 800916a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800916c:	f7f9 fa16 	bl	800259c <HAL_GetTick>
 8009170:	4602      	mov	r2, r0
 8009172:	4b06      	ldr	r3, [pc, #24]	; (800918c <SPI_Timer_Status+0x24>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	1ad2      	subs	r2, r2, r3
 8009178:	4b05      	ldr	r3, [pc, #20]	; (8009190 <SPI_Timer_Status+0x28>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	429a      	cmp	r2, r3
 800917e:	bf34      	ite	cc
 8009180:	2301      	movcc	r3, #1
 8009182:	2300      	movcs	r3, #0
 8009184:	b2db      	uxtb	r3, r3
}
 8009186:	4618      	mov	r0, r3
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	20000898 	.word	0x20000898
 8009190:	2000089c 	.word	0x2000089c

08009194 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b086      	sub	sp, #24
 8009198:	af02      	add	r7, sp, #8
 800919a:	4603      	mov	r3, r0
 800919c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800919e:	f107 020f 	add.w	r2, r7, #15
 80091a2:	1df9      	adds	r1, r7, #7
 80091a4:	2332      	movs	r3, #50	; 0x32
 80091a6:	9300      	str	r3, [sp, #0]
 80091a8:	2301      	movs	r3, #1
 80091aa:	4804      	ldr	r0, [pc, #16]	; (80091bc <xchg_spi+0x28>)
 80091ac:	f7fd f895 	bl	80062da <HAL_SPI_TransmitReceive>
    return rxDat;
 80091b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	20000200 	.word	0x20000200

080091c0 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80091c0:	b590      	push	{r4, r7, lr}
 80091c2:	b085      	sub	sp, #20
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80091ca:	2300      	movs	r3, #0
 80091cc:	60fb      	str	r3, [r7, #12]
 80091ce:	e00a      	b.n	80091e6 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	18d4      	adds	r4, r2, r3
 80091d6:	20ff      	movs	r0, #255	; 0xff
 80091d8:	f7ff ffdc 	bl	8009194 <xchg_spi>
 80091dc:	4603      	mov	r3, r0
 80091de:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	3301      	adds	r3, #1
 80091e4:	60fb      	str	r3, [r7, #12]
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d3f0      	bcc.n	80091d0 <rcvr_spi_multi+0x10>
	}
}
 80091ee:	bf00      	nop
 80091f0:	bf00      	nop
 80091f2:	3714      	adds	r7, #20
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd90      	pop	{r4, r7, pc}

080091f8 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	b29a      	uxth	r2, r3
 8009206:	f04f 33ff 	mov.w	r3, #4294967295
 800920a:	6879      	ldr	r1, [r7, #4]
 800920c:	4803      	ldr	r0, [pc, #12]	; (800921c <xmit_spi_multi+0x24>)
 800920e:	f7fc ff28 	bl	8006062 <HAL_SPI_Transmit>
}
 8009212:	bf00      	nop
 8009214:	3708      	adds	r7, #8
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
 800921a:	bf00      	nop
 800921c:	20000200 	.word	0x20000200

08009220 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b086      	sub	sp, #24
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8009228:	f7f9 f9b8 	bl	800259c <HAL_GetTick>
 800922c:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8009232:	20ff      	movs	r0, #255	; 0xff
 8009234:	f7ff ffae 	bl	8009194 <xchg_spi>
 8009238:	4603      	mov	r3, r0
 800923a:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800923c:	7bfb      	ldrb	r3, [r7, #15]
 800923e:	2bff      	cmp	r3, #255	; 0xff
 8009240:	d007      	beq.n	8009252 <wait_ready+0x32>
 8009242:	f7f9 f9ab 	bl	800259c <HAL_GetTick>
 8009246:	4602      	mov	r2, r0
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	1ad3      	subs	r3, r2, r3
 800924c:	693a      	ldr	r2, [r7, #16]
 800924e:	429a      	cmp	r2, r3
 8009250:	d8ef      	bhi.n	8009232 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8009252:	7bfb      	ldrb	r3, [r7, #15]
 8009254:	2bff      	cmp	r3, #255	; 0xff
 8009256:	bf0c      	ite	eq
 8009258:	2301      	moveq	r3, #1
 800925a:	2300      	movne	r3, #0
 800925c:	b2db      	uxtb	r3, r3
}
 800925e:	4618      	mov	r0, r3
 8009260:	3718      	adds	r7, #24
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
	...

08009268 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800926c:	2201      	movs	r2, #1
 800926e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009272:	4804      	ldr	r0, [pc, #16]	; (8009284 <despiselect+0x1c>)
 8009274:	f7f9 fc8a 	bl	8002b8c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8009278:	20ff      	movs	r0, #255	; 0xff
 800927a:	f7ff ff8b 	bl	8009194 <xchg_spi>

}
 800927e:	bf00      	nop
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	40020400 	.word	0x40020400

08009288 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8009288:	b580      	push	{r7, lr}
 800928a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800928c:	2200      	movs	r2, #0
 800928e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009292:	480a      	ldr	r0, [pc, #40]	; (80092bc <spiselect+0x34>)
 8009294:	f7f9 fc7a 	bl	8002b8c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8009298:	20ff      	movs	r0, #255	; 0xff
 800929a:	f7ff ff7b 	bl	8009194 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800929e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80092a2:	f7ff ffbd 	bl	8009220 <wait_ready>
 80092a6:	4603      	mov	r3, r0
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d001      	beq.n	80092b0 <spiselect+0x28>
 80092ac:	2301      	movs	r3, #1
 80092ae:	e002      	b.n	80092b6 <spiselect+0x2e>

	despiselect();
 80092b0:	f7ff ffda 	bl	8009268 <despiselect>
	return 0;	/* Timeout */
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	40020400 	.word	0x40020400

080092c0 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80092ca:	20c8      	movs	r0, #200	; 0xc8
 80092cc:	f7ff ff38 	bl	8009140 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80092d0:	20ff      	movs	r0, #255	; 0xff
 80092d2:	f7ff ff5f 	bl	8009194 <xchg_spi>
 80092d6:	4603      	mov	r3, r0
 80092d8:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80092da:	7bfb      	ldrb	r3, [r7, #15]
 80092dc:	2bff      	cmp	r3, #255	; 0xff
 80092de:	d104      	bne.n	80092ea <rcvr_datablock+0x2a>
 80092e0:	f7ff ff42 	bl	8009168 <SPI_Timer_Status>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d1f2      	bne.n	80092d0 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80092ea:	7bfb      	ldrb	r3, [r7, #15]
 80092ec:	2bfe      	cmp	r3, #254	; 0xfe
 80092ee:	d001      	beq.n	80092f4 <rcvr_datablock+0x34>
 80092f0:	2300      	movs	r3, #0
 80092f2:	e00a      	b.n	800930a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80092f4:	6839      	ldr	r1, [r7, #0]
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f7ff ff62 	bl	80091c0 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80092fc:	20ff      	movs	r0, #255	; 0xff
 80092fe:	f7ff ff49 	bl	8009194 <xchg_spi>
 8009302:	20ff      	movs	r0, #255	; 0xff
 8009304:	f7ff ff46 	bl	8009194 <xchg_spi>

	return 1;						/* Function succeeded */
 8009308:	2301      	movs	r3, #1
}
 800930a:	4618      	mov	r0, r3
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}

08009312 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b084      	sub	sp, #16
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
 800931a:	460b      	mov	r3, r1
 800931c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800931e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009322:	f7ff ff7d 	bl	8009220 <wait_ready>
 8009326:	4603      	mov	r3, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d101      	bne.n	8009330 <xmit_datablock+0x1e>
 800932c:	2300      	movs	r3, #0
 800932e:	e01e      	b.n	800936e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8009330:	78fb      	ldrb	r3, [r7, #3]
 8009332:	4618      	mov	r0, r3
 8009334:	f7ff ff2e 	bl	8009194 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8009338:	78fb      	ldrb	r3, [r7, #3]
 800933a:	2bfd      	cmp	r3, #253	; 0xfd
 800933c:	d016      	beq.n	800936c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800933e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f7ff ff58 	bl	80091f8 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8009348:	20ff      	movs	r0, #255	; 0xff
 800934a:	f7ff ff23 	bl	8009194 <xchg_spi>
 800934e:	20ff      	movs	r0, #255	; 0xff
 8009350:	f7ff ff20 	bl	8009194 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8009354:	20ff      	movs	r0, #255	; 0xff
 8009356:	f7ff ff1d 	bl	8009194 <xchg_spi>
 800935a:	4603      	mov	r3, r0
 800935c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800935e:	7bfb      	ldrb	r3, [r7, #15]
 8009360:	f003 031f 	and.w	r3, r3, #31
 8009364:	2b05      	cmp	r3, #5
 8009366:	d001      	beq.n	800936c <xmit_datablock+0x5a>
 8009368:	2300      	movs	r3, #0
 800936a:	e000      	b.n	800936e <xmit_datablock+0x5c>
	}
	return 1;
 800936c:	2301      	movs	r3, #1
}
 800936e:	4618      	mov	r0, r3
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8009376:	b580      	push	{r7, lr}
 8009378:	b084      	sub	sp, #16
 800937a:	af00      	add	r7, sp, #0
 800937c:	4603      	mov	r3, r0
 800937e:	6039      	str	r1, [r7, #0]
 8009380:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8009382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009386:	2b00      	cmp	r3, #0
 8009388:	da0e      	bge.n	80093a8 <send_cmd+0x32>
		cmd &= 0x7F;
 800938a:	79fb      	ldrb	r3, [r7, #7]
 800938c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009390:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8009392:	2100      	movs	r1, #0
 8009394:	2037      	movs	r0, #55	; 0x37
 8009396:	f7ff ffee 	bl	8009376 <send_cmd>
 800939a:	4603      	mov	r3, r0
 800939c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800939e:	7bbb      	ldrb	r3, [r7, #14]
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d901      	bls.n	80093a8 <send_cmd+0x32>
 80093a4:	7bbb      	ldrb	r3, [r7, #14]
 80093a6:	e051      	b.n	800944c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80093a8:	79fb      	ldrb	r3, [r7, #7]
 80093aa:	2b0c      	cmp	r3, #12
 80093ac:	d008      	beq.n	80093c0 <send_cmd+0x4a>
		despiselect();
 80093ae:	f7ff ff5b 	bl	8009268 <despiselect>
		if (!spiselect()) return 0xFF;
 80093b2:	f7ff ff69 	bl	8009288 <spiselect>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d101      	bne.n	80093c0 <send_cmd+0x4a>
 80093bc:	23ff      	movs	r3, #255	; 0xff
 80093be:	e045      	b.n	800944c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80093c0:	79fb      	ldrb	r3, [r7, #7]
 80093c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	4618      	mov	r0, r3
 80093ca:	f7ff fee3 	bl	8009194 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	0e1b      	lsrs	r3, r3, #24
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	4618      	mov	r0, r3
 80093d6:	f7ff fedd 	bl	8009194 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	0c1b      	lsrs	r3, r3, #16
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7ff fed7 	bl	8009194 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	0a1b      	lsrs	r3, r3, #8
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7ff fed1 	bl	8009194 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7ff fecc 	bl	8009194 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80093fc:	2301      	movs	r3, #1
 80093fe:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8009400:	79fb      	ldrb	r3, [r7, #7]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d101      	bne.n	800940a <send_cmd+0x94>
 8009406:	2395      	movs	r3, #149	; 0x95
 8009408:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800940a:	79fb      	ldrb	r3, [r7, #7]
 800940c:	2b08      	cmp	r3, #8
 800940e:	d101      	bne.n	8009414 <send_cmd+0x9e>
 8009410:	2387      	movs	r3, #135	; 0x87
 8009412:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8009414:	7bfb      	ldrb	r3, [r7, #15]
 8009416:	4618      	mov	r0, r3
 8009418:	f7ff febc 	bl	8009194 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800941c:	79fb      	ldrb	r3, [r7, #7]
 800941e:	2b0c      	cmp	r3, #12
 8009420:	d102      	bne.n	8009428 <send_cmd+0xb2>
 8009422:	20ff      	movs	r0, #255	; 0xff
 8009424:	f7ff feb6 	bl	8009194 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8009428:	230a      	movs	r3, #10
 800942a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800942c:	20ff      	movs	r0, #255	; 0xff
 800942e:	f7ff feb1 	bl	8009194 <xchg_spi>
 8009432:	4603      	mov	r3, r0
 8009434:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8009436:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800943a:	2b00      	cmp	r3, #0
 800943c:	da05      	bge.n	800944a <send_cmd+0xd4>
 800943e:	7bfb      	ldrb	r3, [r7, #15]
 8009440:	3b01      	subs	r3, #1
 8009442:	73fb      	strb	r3, [r7, #15]
 8009444:	7bfb      	ldrb	r3, [r7, #15]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d1f0      	bne.n	800942c <send_cmd+0xb6>

	return res;							/* Return received response */
 800944a:	7bbb      	ldrb	r3, [r7, #14]
}
 800944c:	4618      	mov	r0, r3
 800944e:	3710      	adds	r7, #16
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8009454:	b590      	push	{r4, r7, lr}
 8009456:	b085      	sub	sp, #20
 8009458:	af00      	add	r7, sp, #0
 800945a:	4603      	mov	r3, r0
 800945c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800945e:	79fb      	ldrb	r3, [r7, #7]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d001      	beq.n	8009468 <USER_SPI_initialize+0x14>
 8009464:	2301      	movs	r3, #1
 8009466:	e0d6      	b.n	8009616 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8009468:	4b6d      	ldr	r3, [pc, #436]	; (8009620 <USER_SPI_initialize+0x1cc>)
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	b2db      	uxtb	r3, r3
 800946e:	f003 0302 	and.w	r3, r3, #2
 8009472:	2b00      	cmp	r3, #0
 8009474:	d003      	beq.n	800947e <USER_SPI_initialize+0x2a>
 8009476:	4b6a      	ldr	r3, [pc, #424]	; (8009620 <USER_SPI_initialize+0x1cc>)
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	b2db      	uxtb	r3, r3
 800947c:	e0cb      	b.n	8009616 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800947e:	4b69      	ldr	r3, [pc, #420]	; (8009624 <USER_SPI_initialize+0x1d0>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009488:	4b66      	ldr	r3, [pc, #408]	; (8009624 <USER_SPI_initialize+0x1d0>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8009490:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8009492:	230a      	movs	r3, #10
 8009494:	73fb      	strb	r3, [r7, #15]
 8009496:	e005      	b.n	80094a4 <USER_SPI_initialize+0x50>
 8009498:	20ff      	movs	r0, #255	; 0xff
 800949a:	f7ff fe7b 	bl	8009194 <xchg_spi>
 800949e:	7bfb      	ldrb	r3, [r7, #15]
 80094a0:	3b01      	subs	r3, #1
 80094a2:	73fb      	strb	r3, [r7, #15]
 80094a4:	7bfb      	ldrb	r3, [r7, #15]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d1f6      	bne.n	8009498 <USER_SPI_initialize+0x44>

	ty = 0;
 80094aa:	2300      	movs	r3, #0
 80094ac:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80094ae:	2100      	movs	r1, #0
 80094b0:	2000      	movs	r0, #0
 80094b2:	f7ff ff60 	bl	8009376 <send_cmd>
 80094b6:	4603      	mov	r3, r0
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	f040 808b 	bne.w	80095d4 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80094be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80094c2:	f7ff fe3d 	bl	8009140 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80094c6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80094ca:	2008      	movs	r0, #8
 80094cc:	f7ff ff53 	bl	8009376 <send_cmd>
 80094d0:	4603      	mov	r3, r0
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d151      	bne.n	800957a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80094d6:	2300      	movs	r3, #0
 80094d8:	73fb      	strb	r3, [r7, #15]
 80094da:	e00d      	b.n	80094f8 <USER_SPI_initialize+0xa4>
 80094dc:	7bfc      	ldrb	r4, [r7, #15]
 80094de:	20ff      	movs	r0, #255	; 0xff
 80094e0:	f7ff fe58 	bl	8009194 <xchg_spi>
 80094e4:	4603      	mov	r3, r0
 80094e6:	461a      	mov	r2, r3
 80094e8:	f104 0310 	add.w	r3, r4, #16
 80094ec:	443b      	add	r3, r7
 80094ee:	f803 2c08 	strb.w	r2, [r3, #-8]
 80094f2:	7bfb      	ldrb	r3, [r7, #15]
 80094f4:	3301      	adds	r3, #1
 80094f6:	73fb      	strb	r3, [r7, #15]
 80094f8:	7bfb      	ldrb	r3, [r7, #15]
 80094fa:	2b03      	cmp	r3, #3
 80094fc:	d9ee      	bls.n	80094dc <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80094fe:	7abb      	ldrb	r3, [r7, #10]
 8009500:	2b01      	cmp	r3, #1
 8009502:	d167      	bne.n	80095d4 <USER_SPI_initialize+0x180>
 8009504:	7afb      	ldrb	r3, [r7, #11]
 8009506:	2baa      	cmp	r3, #170	; 0xaa
 8009508:	d164      	bne.n	80095d4 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800950a:	bf00      	nop
 800950c:	f7ff fe2c 	bl	8009168 <SPI_Timer_Status>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d007      	beq.n	8009526 <USER_SPI_initialize+0xd2>
 8009516:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800951a:	20a9      	movs	r0, #169	; 0xa9
 800951c:	f7ff ff2b 	bl	8009376 <send_cmd>
 8009520:	4603      	mov	r3, r0
 8009522:	2b00      	cmp	r3, #0
 8009524:	d1f2      	bne.n	800950c <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8009526:	f7ff fe1f 	bl	8009168 <SPI_Timer_Status>
 800952a:	4603      	mov	r3, r0
 800952c:	2b00      	cmp	r3, #0
 800952e:	d051      	beq.n	80095d4 <USER_SPI_initialize+0x180>
 8009530:	2100      	movs	r1, #0
 8009532:	203a      	movs	r0, #58	; 0x3a
 8009534:	f7ff ff1f 	bl	8009376 <send_cmd>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d14a      	bne.n	80095d4 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800953e:	2300      	movs	r3, #0
 8009540:	73fb      	strb	r3, [r7, #15]
 8009542:	e00d      	b.n	8009560 <USER_SPI_initialize+0x10c>
 8009544:	7bfc      	ldrb	r4, [r7, #15]
 8009546:	20ff      	movs	r0, #255	; 0xff
 8009548:	f7ff fe24 	bl	8009194 <xchg_spi>
 800954c:	4603      	mov	r3, r0
 800954e:	461a      	mov	r2, r3
 8009550:	f104 0310 	add.w	r3, r4, #16
 8009554:	443b      	add	r3, r7
 8009556:	f803 2c08 	strb.w	r2, [r3, #-8]
 800955a:	7bfb      	ldrb	r3, [r7, #15]
 800955c:	3301      	adds	r3, #1
 800955e:	73fb      	strb	r3, [r7, #15]
 8009560:	7bfb      	ldrb	r3, [r7, #15]
 8009562:	2b03      	cmp	r3, #3
 8009564:	d9ee      	bls.n	8009544 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8009566:	7a3b      	ldrb	r3, [r7, #8]
 8009568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800956c:	2b00      	cmp	r3, #0
 800956e:	d001      	beq.n	8009574 <USER_SPI_initialize+0x120>
 8009570:	230c      	movs	r3, #12
 8009572:	e000      	b.n	8009576 <USER_SPI_initialize+0x122>
 8009574:	2304      	movs	r3, #4
 8009576:	737b      	strb	r3, [r7, #13]
 8009578:	e02c      	b.n	80095d4 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800957a:	2100      	movs	r1, #0
 800957c:	20a9      	movs	r0, #169	; 0xa9
 800957e:	f7ff fefa 	bl	8009376 <send_cmd>
 8009582:	4603      	mov	r3, r0
 8009584:	2b01      	cmp	r3, #1
 8009586:	d804      	bhi.n	8009592 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8009588:	2302      	movs	r3, #2
 800958a:	737b      	strb	r3, [r7, #13]
 800958c:	23a9      	movs	r3, #169	; 0xa9
 800958e:	73bb      	strb	r3, [r7, #14]
 8009590:	e003      	b.n	800959a <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8009592:	2301      	movs	r3, #1
 8009594:	737b      	strb	r3, [r7, #13]
 8009596:	2301      	movs	r3, #1
 8009598:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800959a:	bf00      	nop
 800959c:	f7ff fde4 	bl	8009168 <SPI_Timer_Status>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d007      	beq.n	80095b6 <USER_SPI_initialize+0x162>
 80095a6:	7bbb      	ldrb	r3, [r7, #14]
 80095a8:	2100      	movs	r1, #0
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7ff fee3 	bl	8009376 <send_cmd>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d1f2      	bne.n	800959c <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80095b6:	f7ff fdd7 	bl	8009168 <SPI_Timer_Status>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d007      	beq.n	80095d0 <USER_SPI_initialize+0x17c>
 80095c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80095c4:	2010      	movs	r0, #16
 80095c6:	f7ff fed6 	bl	8009376 <send_cmd>
 80095ca:	4603      	mov	r3, r0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d001      	beq.n	80095d4 <USER_SPI_initialize+0x180>
				ty = 0;
 80095d0:	2300      	movs	r3, #0
 80095d2:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80095d4:	4a14      	ldr	r2, [pc, #80]	; (8009628 <USER_SPI_initialize+0x1d4>)
 80095d6:	7b7b      	ldrb	r3, [r7, #13]
 80095d8:	7013      	strb	r3, [r2, #0]
	despiselect();
 80095da:	f7ff fe45 	bl	8009268 <despiselect>

	if (ty) {			/* OK */
 80095de:	7b7b      	ldrb	r3, [r7, #13]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d012      	beq.n	800960a <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80095e4:	4b0f      	ldr	r3, [pc, #60]	; (8009624 <USER_SPI_initialize+0x1d0>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80095ee:	4b0d      	ldr	r3, [pc, #52]	; (8009624 <USER_SPI_initialize+0x1d0>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f042 0210 	orr.w	r2, r2, #16
 80095f6:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80095f8:	4b09      	ldr	r3, [pc, #36]	; (8009620 <USER_SPI_initialize+0x1cc>)
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	f023 0301 	bic.w	r3, r3, #1
 8009602:	b2da      	uxtb	r2, r3
 8009604:	4b06      	ldr	r3, [pc, #24]	; (8009620 <USER_SPI_initialize+0x1cc>)
 8009606:	701a      	strb	r2, [r3, #0]
 8009608:	e002      	b.n	8009610 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800960a:	4b05      	ldr	r3, [pc, #20]	; (8009620 <USER_SPI_initialize+0x1cc>)
 800960c:	2201      	movs	r2, #1
 800960e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8009610:	4b03      	ldr	r3, [pc, #12]	; (8009620 <USER_SPI_initialize+0x1cc>)
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	b2db      	uxtb	r3, r3
}
 8009616:	4618      	mov	r0, r3
 8009618:	3714      	adds	r7, #20
 800961a:	46bd      	mov	sp, r7
 800961c:	bd90      	pop	{r4, r7, pc}
 800961e:	bf00      	nop
 8009620:	20000040 	.word	0x20000040
 8009624:	20000200 	.word	0x20000200
 8009628:	20000894 	.word	0x20000894

0800962c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800962c:	b480      	push	{r7}
 800962e:	b083      	sub	sp, #12
 8009630:	af00      	add	r7, sp, #0
 8009632:	4603      	mov	r3, r0
 8009634:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8009636:	79fb      	ldrb	r3, [r7, #7]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d001      	beq.n	8009640 <USER_SPI_status+0x14>
 800963c:	2301      	movs	r3, #1
 800963e:	e002      	b.n	8009646 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8009640:	4b04      	ldr	r3, [pc, #16]	; (8009654 <USER_SPI_status+0x28>)
 8009642:	781b      	ldrb	r3, [r3, #0]
 8009644:	b2db      	uxtb	r3, r3
}
 8009646:	4618      	mov	r0, r3
 8009648:	370c      	adds	r7, #12
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr
 8009652:	bf00      	nop
 8009654:	20000040 	.word	0x20000040

08009658 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	60b9      	str	r1, [r7, #8]
 8009660:	607a      	str	r2, [r7, #4]
 8009662:	603b      	str	r3, [r7, #0]
 8009664:	4603      	mov	r3, r0
 8009666:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8009668:	7bfb      	ldrb	r3, [r7, #15]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d102      	bne.n	8009674 <USER_SPI_read+0x1c>
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d101      	bne.n	8009678 <USER_SPI_read+0x20>
 8009674:	2304      	movs	r3, #4
 8009676:	e04d      	b.n	8009714 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8009678:	4b28      	ldr	r3, [pc, #160]	; (800971c <USER_SPI_read+0xc4>)
 800967a:	781b      	ldrb	r3, [r3, #0]
 800967c:	b2db      	uxtb	r3, r3
 800967e:	f003 0301 	and.w	r3, r3, #1
 8009682:	2b00      	cmp	r3, #0
 8009684:	d001      	beq.n	800968a <USER_SPI_read+0x32>
 8009686:	2303      	movs	r3, #3
 8009688:	e044      	b.n	8009714 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800968a:	4b25      	ldr	r3, [pc, #148]	; (8009720 <USER_SPI_read+0xc8>)
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	f003 0308 	and.w	r3, r3, #8
 8009692:	2b00      	cmp	r3, #0
 8009694:	d102      	bne.n	800969c <USER_SPI_read+0x44>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	025b      	lsls	r3, r3, #9
 800969a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d111      	bne.n	80096c6 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80096a2:	6879      	ldr	r1, [r7, #4]
 80096a4:	2011      	movs	r0, #17
 80096a6:	f7ff fe66 	bl	8009376 <send_cmd>
 80096aa:	4603      	mov	r3, r0
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d129      	bne.n	8009704 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80096b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80096b4:	68b8      	ldr	r0, [r7, #8]
 80096b6:	f7ff fe03 	bl	80092c0 <rcvr_datablock>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d021      	beq.n	8009704 <USER_SPI_read+0xac>
			count = 0;
 80096c0:	2300      	movs	r3, #0
 80096c2:	603b      	str	r3, [r7, #0]
 80096c4:	e01e      	b.n	8009704 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80096c6:	6879      	ldr	r1, [r7, #4]
 80096c8:	2012      	movs	r0, #18
 80096ca:	f7ff fe54 	bl	8009376 <send_cmd>
 80096ce:	4603      	mov	r3, r0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d117      	bne.n	8009704 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80096d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80096d8:	68b8      	ldr	r0, [r7, #8]
 80096da:	f7ff fdf1 	bl	80092c0 <rcvr_datablock>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d00a      	beq.n	80096fa <USER_SPI_read+0xa2>
				buff += 512;
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80096ea:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	3b01      	subs	r3, #1
 80096f0:	603b      	str	r3, [r7, #0]
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d1ed      	bne.n	80096d4 <USER_SPI_read+0x7c>
 80096f8:	e000      	b.n	80096fc <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80096fa:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80096fc:	2100      	movs	r1, #0
 80096fe:	200c      	movs	r0, #12
 8009700:	f7ff fe39 	bl	8009376 <send_cmd>
		}
	}
	despiselect();
 8009704:	f7ff fdb0 	bl	8009268 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	bf14      	ite	ne
 800970e:	2301      	movne	r3, #1
 8009710:	2300      	moveq	r3, #0
 8009712:	b2db      	uxtb	r3, r3
}
 8009714:	4618      	mov	r0, r3
 8009716:	3710      	adds	r7, #16
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}
 800971c:	20000040 	.word	0x20000040
 8009720:	20000894 	.word	0x20000894

08009724 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b084      	sub	sp, #16
 8009728:	af00      	add	r7, sp, #0
 800972a:	60b9      	str	r1, [r7, #8]
 800972c:	607a      	str	r2, [r7, #4]
 800972e:	603b      	str	r3, [r7, #0]
 8009730:	4603      	mov	r3, r0
 8009732:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8009734:	7bfb      	ldrb	r3, [r7, #15]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d102      	bne.n	8009740 <USER_SPI_write+0x1c>
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d101      	bne.n	8009744 <USER_SPI_write+0x20>
 8009740:	2304      	movs	r3, #4
 8009742:	e063      	b.n	800980c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8009744:	4b33      	ldr	r3, [pc, #204]	; (8009814 <USER_SPI_write+0xf0>)
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	b2db      	uxtb	r3, r3
 800974a:	f003 0301 	and.w	r3, r3, #1
 800974e:	2b00      	cmp	r3, #0
 8009750:	d001      	beq.n	8009756 <USER_SPI_write+0x32>
 8009752:	2303      	movs	r3, #3
 8009754:	e05a      	b.n	800980c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8009756:	4b2f      	ldr	r3, [pc, #188]	; (8009814 <USER_SPI_write+0xf0>)
 8009758:	781b      	ldrb	r3, [r3, #0]
 800975a:	b2db      	uxtb	r3, r3
 800975c:	f003 0304 	and.w	r3, r3, #4
 8009760:	2b00      	cmp	r3, #0
 8009762:	d001      	beq.n	8009768 <USER_SPI_write+0x44>
 8009764:	2302      	movs	r3, #2
 8009766:	e051      	b.n	800980c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8009768:	4b2b      	ldr	r3, [pc, #172]	; (8009818 <USER_SPI_write+0xf4>)
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	f003 0308 	and.w	r3, r3, #8
 8009770:	2b00      	cmp	r3, #0
 8009772:	d102      	bne.n	800977a <USER_SPI_write+0x56>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	025b      	lsls	r3, r3, #9
 8009778:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	2b01      	cmp	r3, #1
 800977e:	d110      	bne.n	80097a2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8009780:	6879      	ldr	r1, [r7, #4]
 8009782:	2018      	movs	r0, #24
 8009784:	f7ff fdf7 	bl	8009376 <send_cmd>
 8009788:	4603      	mov	r3, r0
 800978a:	2b00      	cmp	r3, #0
 800978c:	d136      	bne.n	80097fc <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800978e:	21fe      	movs	r1, #254	; 0xfe
 8009790:	68b8      	ldr	r0, [r7, #8]
 8009792:	f7ff fdbe 	bl	8009312 <xmit_datablock>
 8009796:	4603      	mov	r3, r0
 8009798:	2b00      	cmp	r3, #0
 800979a:	d02f      	beq.n	80097fc <USER_SPI_write+0xd8>
			count = 0;
 800979c:	2300      	movs	r3, #0
 800979e:	603b      	str	r3, [r7, #0]
 80097a0:	e02c      	b.n	80097fc <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80097a2:	4b1d      	ldr	r3, [pc, #116]	; (8009818 <USER_SPI_write+0xf4>)
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	f003 0306 	and.w	r3, r3, #6
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d003      	beq.n	80097b6 <USER_SPI_write+0x92>
 80097ae:	6839      	ldr	r1, [r7, #0]
 80097b0:	2097      	movs	r0, #151	; 0x97
 80097b2:	f7ff fde0 	bl	8009376 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80097b6:	6879      	ldr	r1, [r7, #4]
 80097b8:	2019      	movs	r0, #25
 80097ba:	f7ff fddc 	bl	8009376 <send_cmd>
 80097be:	4603      	mov	r3, r0
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d11b      	bne.n	80097fc <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80097c4:	21fc      	movs	r1, #252	; 0xfc
 80097c6:	68b8      	ldr	r0, [r7, #8]
 80097c8:	f7ff fda3 	bl	8009312 <xmit_datablock>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d00a      	beq.n	80097e8 <USER_SPI_write+0xc4>
				buff += 512;
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80097d8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	3b01      	subs	r3, #1
 80097de:	603b      	str	r3, [r7, #0]
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d1ee      	bne.n	80097c4 <USER_SPI_write+0xa0>
 80097e6:	e000      	b.n	80097ea <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80097e8:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80097ea:	21fd      	movs	r1, #253	; 0xfd
 80097ec:	2000      	movs	r0, #0
 80097ee:	f7ff fd90 	bl	8009312 <xmit_datablock>
 80097f2:	4603      	mov	r3, r0
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d101      	bne.n	80097fc <USER_SPI_write+0xd8>
 80097f8:	2301      	movs	r3, #1
 80097fa:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80097fc:	f7ff fd34 	bl	8009268 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	bf14      	ite	ne
 8009806:	2301      	movne	r3, #1
 8009808:	2300      	moveq	r3, #0
 800980a:	b2db      	uxtb	r3, r3
}
 800980c:	4618      	mov	r0, r3
 800980e:	3710      	adds	r7, #16
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}
 8009814:	20000040 	.word	0x20000040
 8009818:	20000894 	.word	0x20000894

0800981c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b08c      	sub	sp, #48	; 0x30
 8009820:	af00      	add	r7, sp, #0
 8009822:	4603      	mov	r3, r0
 8009824:	603a      	str	r2, [r7, #0]
 8009826:	71fb      	strb	r3, [r7, #7]
 8009828:	460b      	mov	r3, r1
 800982a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800982c:	79fb      	ldrb	r3, [r7, #7]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d001      	beq.n	8009836 <USER_SPI_ioctl+0x1a>
 8009832:	2304      	movs	r3, #4
 8009834:	e15a      	b.n	8009aec <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8009836:	4baf      	ldr	r3, [pc, #700]	; (8009af4 <USER_SPI_ioctl+0x2d8>)
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	b2db      	uxtb	r3, r3
 800983c:	f003 0301 	and.w	r3, r3, #1
 8009840:	2b00      	cmp	r3, #0
 8009842:	d001      	beq.n	8009848 <USER_SPI_ioctl+0x2c>
 8009844:	2303      	movs	r3, #3
 8009846:	e151      	b.n	8009aec <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8009848:	2301      	movs	r3, #1
 800984a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800984e:	79bb      	ldrb	r3, [r7, #6]
 8009850:	2b04      	cmp	r3, #4
 8009852:	f200 8136 	bhi.w	8009ac2 <USER_SPI_ioctl+0x2a6>
 8009856:	a201      	add	r2, pc, #4	; (adr r2, 800985c <USER_SPI_ioctl+0x40>)
 8009858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800985c:	08009871 	.word	0x08009871
 8009860:	08009885 	.word	0x08009885
 8009864:	08009ac3 	.word	0x08009ac3
 8009868:	08009931 	.word	0x08009931
 800986c:	08009a27 	.word	0x08009a27
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8009870:	f7ff fd0a 	bl	8009288 <spiselect>
 8009874:	4603      	mov	r3, r0
 8009876:	2b00      	cmp	r3, #0
 8009878:	f000 8127 	beq.w	8009aca <USER_SPI_ioctl+0x2ae>
 800987c:	2300      	movs	r3, #0
 800987e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8009882:	e122      	b.n	8009aca <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8009884:	2100      	movs	r1, #0
 8009886:	2009      	movs	r0, #9
 8009888:	f7ff fd75 	bl	8009376 <send_cmd>
 800988c:	4603      	mov	r3, r0
 800988e:	2b00      	cmp	r3, #0
 8009890:	f040 811d 	bne.w	8009ace <USER_SPI_ioctl+0x2b2>
 8009894:	f107 030c 	add.w	r3, r7, #12
 8009898:	2110      	movs	r1, #16
 800989a:	4618      	mov	r0, r3
 800989c:	f7ff fd10 	bl	80092c0 <rcvr_datablock>
 80098a0:	4603      	mov	r3, r0
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	f000 8113 	beq.w	8009ace <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80098a8:	7b3b      	ldrb	r3, [r7, #12]
 80098aa:	099b      	lsrs	r3, r3, #6
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d111      	bne.n	80098d6 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80098b2:	7d7b      	ldrb	r3, [r7, #21]
 80098b4:	461a      	mov	r2, r3
 80098b6:	7d3b      	ldrb	r3, [r7, #20]
 80098b8:	021b      	lsls	r3, r3, #8
 80098ba:	4413      	add	r3, r2
 80098bc:	461a      	mov	r2, r3
 80098be:	7cfb      	ldrb	r3, [r7, #19]
 80098c0:	041b      	lsls	r3, r3, #16
 80098c2:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80098c6:	4413      	add	r3, r2
 80098c8:	3301      	adds	r3, #1
 80098ca:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80098cc:	69fb      	ldr	r3, [r7, #28]
 80098ce:	029a      	lsls	r2, r3, #10
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	601a      	str	r2, [r3, #0]
 80098d4:	e028      	b.n	8009928 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80098d6:	7c7b      	ldrb	r3, [r7, #17]
 80098d8:	f003 030f 	and.w	r3, r3, #15
 80098dc:	b2da      	uxtb	r2, r3
 80098de:	7dbb      	ldrb	r3, [r7, #22]
 80098e0:	09db      	lsrs	r3, r3, #7
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	4413      	add	r3, r2
 80098e6:	b2da      	uxtb	r2, r3
 80098e8:	7d7b      	ldrb	r3, [r7, #21]
 80098ea:	005b      	lsls	r3, r3, #1
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	f003 0306 	and.w	r3, r3, #6
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	4413      	add	r3, r2
 80098f6:	b2db      	uxtb	r3, r3
 80098f8:	3302      	adds	r3, #2
 80098fa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80098fe:	7d3b      	ldrb	r3, [r7, #20]
 8009900:	099b      	lsrs	r3, r3, #6
 8009902:	b2db      	uxtb	r3, r3
 8009904:	461a      	mov	r2, r3
 8009906:	7cfb      	ldrb	r3, [r7, #19]
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	441a      	add	r2, r3
 800990c:	7cbb      	ldrb	r3, [r7, #18]
 800990e:	029b      	lsls	r3, r3, #10
 8009910:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009914:	4413      	add	r3, r2
 8009916:	3301      	adds	r3, #1
 8009918:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800991a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800991e:	3b09      	subs	r3, #9
 8009920:	69fa      	ldr	r2, [r7, #28]
 8009922:	409a      	lsls	r2, r3
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8009928:	2300      	movs	r3, #0
 800992a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800992e:	e0ce      	b.n	8009ace <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8009930:	4b71      	ldr	r3, [pc, #452]	; (8009af8 <USER_SPI_ioctl+0x2dc>)
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	f003 0304 	and.w	r3, r3, #4
 8009938:	2b00      	cmp	r3, #0
 800993a:	d031      	beq.n	80099a0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800993c:	2100      	movs	r1, #0
 800993e:	208d      	movs	r0, #141	; 0x8d
 8009940:	f7ff fd19 	bl	8009376 <send_cmd>
 8009944:	4603      	mov	r3, r0
 8009946:	2b00      	cmp	r3, #0
 8009948:	f040 80c3 	bne.w	8009ad2 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800994c:	20ff      	movs	r0, #255	; 0xff
 800994e:	f7ff fc21 	bl	8009194 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8009952:	f107 030c 	add.w	r3, r7, #12
 8009956:	2110      	movs	r1, #16
 8009958:	4618      	mov	r0, r3
 800995a:	f7ff fcb1 	bl	80092c0 <rcvr_datablock>
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	f000 80b6 	beq.w	8009ad2 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8009966:	2330      	movs	r3, #48	; 0x30
 8009968:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800996c:	e007      	b.n	800997e <USER_SPI_ioctl+0x162>
 800996e:	20ff      	movs	r0, #255	; 0xff
 8009970:	f7ff fc10 	bl	8009194 <xchg_spi>
 8009974:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009978:	3b01      	subs	r3, #1
 800997a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800997e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009982:	2b00      	cmp	r3, #0
 8009984:	d1f3      	bne.n	800996e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8009986:	7dbb      	ldrb	r3, [r7, #22]
 8009988:	091b      	lsrs	r3, r3, #4
 800998a:	b2db      	uxtb	r3, r3
 800998c:	461a      	mov	r2, r3
 800998e:	2310      	movs	r3, #16
 8009990:	fa03 f202 	lsl.w	r2, r3, r2
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8009998:	2300      	movs	r3, #0
 800999a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800999e:	e098      	b.n	8009ad2 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80099a0:	2100      	movs	r1, #0
 80099a2:	2009      	movs	r0, #9
 80099a4:	f7ff fce7 	bl	8009376 <send_cmd>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	f040 8091 	bne.w	8009ad2 <USER_SPI_ioctl+0x2b6>
 80099b0:	f107 030c 	add.w	r3, r7, #12
 80099b4:	2110      	movs	r1, #16
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7ff fc82 	bl	80092c0 <rcvr_datablock>
 80099bc:	4603      	mov	r3, r0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	f000 8087 	beq.w	8009ad2 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80099c4:	4b4c      	ldr	r3, [pc, #304]	; (8009af8 <USER_SPI_ioctl+0x2dc>)
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	f003 0302 	and.w	r3, r3, #2
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d012      	beq.n	80099f6 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80099d0:	7dbb      	ldrb	r3, [r7, #22]
 80099d2:	005b      	lsls	r3, r3, #1
 80099d4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80099d8:	7dfa      	ldrb	r2, [r7, #23]
 80099da:	09d2      	lsrs	r2, r2, #7
 80099dc:	b2d2      	uxtb	r2, r2
 80099de:	4413      	add	r3, r2
 80099e0:	1c5a      	adds	r2, r3, #1
 80099e2:	7e7b      	ldrb	r3, [r7, #25]
 80099e4:	099b      	lsrs	r3, r3, #6
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	3b01      	subs	r3, #1
 80099ea:	fa02 f303 	lsl.w	r3, r2, r3
 80099ee:	461a      	mov	r2, r3
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	601a      	str	r2, [r3, #0]
 80099f4:	e013      	b.n	8009a1e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80099f6:	7dbb      	ldrb	r3, [r7, #22]
 80099f8:	109b      	asrs	r3, r3, #2
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	f003 031f 	and.w	r3, r3, #31
 8009a00:	3301      	adds	r3, #1
 8009a02:	7dfa      	ldrb	r2, [r7, #23]
 8009a04:	00d2      	lsls	r2, r2, #3
 8009a06:	f002 0218 	and.w	r2, r2, #24
 8009a0a:	7df9      	ldrb	r1, [r7, #23]
 8009a0c:	0949      	lsrs	r1, r1, #5
 8009a0e:	b2c9      	uxtb	r1, r1
 8009a10:	440a      	add	r2, r1
 8009a12:	3201      	adds	r2, #1
 8009a14:	fb02 f303 	mul.w	r3, r2, r3
 8009a18:	461a      	mov	r2, r3
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8009a24:	e055      	b.n	8009ad2 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009a26:	4b34      	ldr	r3, [pc, #208]	; (8009af8 <USER_SPI_ioctl+0x2dc>)
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	f003 0306 	and.w	r3, r3, #6
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d051      	beq.n	8009ad6 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009a32:	f107 020c 	add.w	r2, r7, #12
 8009a36:	79fb      	ldrb	r3, [r7, #7]
 8009a38:	210b      	movs	r1, #11
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f7ff feee 	bl	800981c <USER_SPI_ioctl>
 8009a40:	4603      	mov	r3, r0
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d149      	bne.n	8009ada <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009a46:	7b3b      	ldrb	r3, [r7, #12]
 8009a48:	099b      	lsrs	r3, r3, #6
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d104      	bne.n	8009a5a <USER_SPI_ioctl+0x23e>
 8009a50:	7dbb      	ldrb	r3, [r7, #22]
 8009a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d041      	beq.n	8009ade <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	623b      	str	r3, [r7, #32]
 8009a5e:	6a3b      	ldr	r3, [r7, #32]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a64:	6a3b      	ldr	r3, [r7, #32]
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8009a6a:	4b23      	ldr	r3, [pc, #140]	; (8009af8 <USER_SPI_ioctl+0x2dc>)
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	f003 0308 	and.w	r3, r3, #8
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d105      	bne.n	8009a82 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8009a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a78:	025b      	lsls	r3, r3, #9
 8009a7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7e:	025b      	lsls	r3, r3, #9
 8009a80:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8009a82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a84:	2020      	movs	r0, #32
 8009a86:	f7ff fc76 	bl	8009376 <send_cmd>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d128      	bne.n	8009ae2 <USER_SPI_ioctl+0x2c6>
 8009a90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a92:	2021      	movs	r0, #33	; 0x21
 8009a94:	f7ff fc6f 	bl	8009376 <send_cmd>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d121      	bne.n	8009ae2 <USER_SPI_ioctl+0x2c6>
 8009a9e:	2100      	movs	r1, #0
 8009aa0:	2026      	movs	r0, #38	; 0x26
 8009aa2:	f7ff fc68 	bl	8009376 <send_cmd>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d11a      	bne.n	8009ae2 <USER_SPI_ioctl+0x2c6>
 8009aac:	f247 5030 	movw	r0, #30000	; 0x7530
 8009ab0:	f7ff fbb6 	bl	8009220 <wait_ready>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d013      	beq.n	8009ae2 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8009aba:	2300      	movs	r3, #0
 8009abc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8009ac0:	e00f      	b.n	8009ae2 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8009ac2:	2304      	movs	r3, #4
 8009ac4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009ac8:	e00c      	b.n	8009ae4 <USER_SPI_ioctl+0x2c8>
		break;
 8009aca:	bf00      	nop
 8009acc:	e00a      	b.n	8009ae4 <USER_SPI_ioctl+0x2c8>
		break;
 8009ace:	bf00      	nop
 8009ad0:	e008      	b.n	8009ae4 <USER_SPI_ioctl+0x2c8>
		break;
 8009ad2:	bf00      	nop
 8009ad4:	e006      	b.n	8009ae4 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009ad6:	bf00      	nop
 8009ad8:	e004      	b.n	8009ae4 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009ada:	bf00      	nop
 8009adc:	e002      	b.n	8009ae4 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009ade:	bf00      	nop
 8009ae0:	e000      	b.n	8009ae4 <USER_SPI_ioctl+0x2c8>
		break;
 8009ae2:	bf00      	nop
	}

	despiselect();
 8009ae4:	f7ff fbc0 	bl	8009268 <despiselect>

	return res;
 8009ae8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3730      	adds	r7, #48	; 0x30
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}
 8009af4:	20000040 	.word	0x20000040
 8009af8:	20000894 	.word	0x20000894

08009afc <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	460b      	mov	r3, r1
 8009b06:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8009b08:	2010      	movs	r0, #16
 8009b0a:	f004 fc9f 	bl	800e44c <USBD_static_malloc>
 8009b0e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d109      	bne.n	8009b2a <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	32b0      	adds	r2, #176	; 0xb0
 8009b20:	2100      	movs	r1, #0
 8009b22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009b26:	2302      	movs	r3, #2
 8009b28:	e048      	b.n	8009bbc <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	32b0      	adds	r2, #176	; 0xb0
 8009b34:	68f9      	ldr	r1, [r7, #12]
 8009b36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	32b0      	adds	r2, #176	; 0xb0
 8009b44:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	7c1b      	ldrb	r3, [r3, #16]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d10d      	bne.n	8009b72 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8009b56:	4b1b      	ldr	r3, [pc, #108]	; (8009bc4 <USBD_HID_Init+0xc8>)
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	f003 020f 	and.w	r2, r3, #15
 8009b5e:	6879      	ldr	r1, [r7, #4]
 8009b60:	4613      	mov	r3, r2
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	4413      	add	r3, r2
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	440b      	add	r3, r1
 8009b6a:	3326      	adds	r3, #38	; 0x26
 8009b6c:	2207      	movs	r2, #7
 8009b6e:	801a      	strh	r2, [r3, #0]
 8009b70:	e00c      	b.n	8009b8c <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8009b72:	4b14      	ldr	r3, [pc, #80]	; (8009bc4 <USBD_HID_Init+0xc8>)
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	f003 020f 	and.w	r2, r3, #15
 8009b7a:	6879      	ldr	r1, [r7, #4]
 8009b7c:	4613      	mov	r3, r2
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	4413      	add	r3, r2
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	440b      	add	r3, r1
 8009b86:	3326      	adds	r3, #38	; 0x26
 8009b88:	220a      	movs	r2, #10
 8009b8a:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8009b8c:	4b0d      	ldr	r3, [pc, #52]	; (8009bc4 <USBD_HID_Init+0xc8>)
 8009b8e:	7819      	ldrb	r1, [r3, #0]
 8009b90:	2304      	movs	r3, #4
 8009b92:	2203      	movs	r2, #3
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f004 fb48 	bl	800e22a <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8009b9a:	4b0a      	ldr	r3, [pc, #40]	; (8009bc4 <USBD_HID_Init+0xc8>)
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	f003 020f 	and.w	r2, r3, #15
 8009ba2:	6879      	ldr	r1, [r7, #4]
 8009ba4:	4613      	mov	r3, r2
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	4413      	add	r3, r2
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	440b      	add	r3, r1
 8009bae:	3324      	adds	r3, #36	; 0x24
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8009bba:	2300      	movs	r3, #0
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3710      	adds	r7, #16
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	200000d8 	.word	0x200000d8

08009bc8 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8009bd4:	4b1f      	ldr	r3, [pc, #124]	; (8009c54 <USBD_HID_DeInit+0x8c>)
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	4619      	mov	r1, r3
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f004 fb4b 	bl	800e276 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8009be0:	4b1c      	ldr	r3, [pc, #112]	; (8009c54 <USBD_HID_DeInit+0x8c>)
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	f003 020f 	and.w	r2, r3, #15
 8009be8:	6879      	ldr	r1, [r7, #4]
 8009bea:	4613      	mov	r3, r2
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	4413      	add	r3, r2
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	440b      	add	r3, r1
 8009bf4:	3324      	adds	r3, #36	; 0x24
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8009bfa:	4b16      	ldr	r3, [pc, #88]	; (8009c54 <USBD_HID_DeInit+0x8c>)
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	f003 020f 	and.w	r2, r3, #15
 8009c02:	6879      	ldr	r1, [r7, #4]
 8009c04:	4613      	mov	r3, r2
 8009c06:	009b      	lsls	r3, r3, #2
 8009c08:	4413      	add	r3, r2
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	440b      	add	r3, r1
 8009c0e:	3326      	adds	r3, #38	; 0x26
 8009c10:	2200      	movs	r2, #0
 8009c12:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	32b0      	adds	r2, #176	; 0xb0
 8009c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d011      	beq.n	8009c4a <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	32b0      	adds	r2, #176	; 0xb0
 8009c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c34:	4618      	mov	r0, r3
 8009c36:	f004 fc17 	bl	800e468 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	32b0      	adds	r2, #176	; 0xb0
 8009c44:	2100      	movs	r1, #0
 8009c46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8009c4a:	2300      	movs	r3, #0
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3708      	adds	r7, #8
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	200000d8 	.word	0x200000d8

08009c58 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b086      	sub	sp, #24
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	32b0      	adds	r2, #176	; 0xb0
 8009c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c70:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c72:	2300      	movs	r3, #0
 8009c74:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8009c76:	2300      	movs	r3, #0
 8009c78:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d101      	bne.n	8009c84 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8009c80:	2303      	movs	r3, #3
 8009c82:	e0e8      	b.n	8009e56 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d046      	beq.n	8009d1e <USBD_HID_Setup+0xc6>
 8009c90:	2b20      	cmp	r3, #32
 8009c92:	f040 80d8 	bne.w	8009e46 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	785b      	ldrb	r3, [r3, #1]
 8009c9a:	3b02      	subs	r3, #2
 8009c9c:	2b09      	cmp	r3, #9
 8009c9e:	d836      	bhi.n	8009d0e <USBD_HID_Setup+0xb6>
 8009ca0:	a201      	add	r2, pc, #4	; (adr r2, 8009ca8 <USBD_HID_Setup+0x50>)
 8009ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca6:	bf00      	nop
 8009ca8:	08009cff 	.word	0x08009cff
 8009cac:	08009cdf 	.word	0x08009cdf
 8009cb0:	08009d0f 	.word	0x08009d0f
 8009cb4:	08009d0f 	.word	0x08009d0f
 8009cb8:	08009d0f 	.word	0x08009d0f
 8009cbc:	08009d0f 	.word	0x08009d0f
 8009cc0:	08009d0f 	.word	0x08009d0f
 8009cc4:	08009d0f 	.word	0x08009d0f
 8009cc8:	08009ced 	.word	0x08009ced
 8009ccc:	08009cd1 	.word	0x08009cd1
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	885b      	ldrh	r3, [r3, #2]
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	601a      	str	r2, [r3, #0]
          break;
 8009cdc:	e01e      	b.n	8009d1c <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f001 fbd5 	bl	800b494 <USBD_CtlSendData>
          break;
 8009cea:	e017      	b.n	8009d1c <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	885b      	ldrh	r3, [r3, #2]
 8009cf0:	0a1b      	lsrs	r3, r3, #8
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	b2db      	uxtb	r3, r3
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	605a      	str	r2, [r3, #4]
          break;
 8009cfc:	e00e      	b.n	8009d1c <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	3304      	adds	r3, #4
 8009d02:	2201      	movs	r2, #1
 8009d04:	4619      	mov	r1, r3
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f001 fbc4 	bl	800b494 <USBD_CtlSendData>
          break;
 8009d0c:	e006      	b.n	8009d1c <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009d0e:	6839      	ldr	r1, [r7, #0]
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f001 fb4e 	bl	800b3b2 <USBD_CtlError>
          ret = USBD_FAIL;
 8009d16:	2303      	movs	r3, #3
 8009d18:	75fb      	strb	r3, [r7, #23]
          break;
 8009d1a:	bf00      	nop
      }
      break;
 8009d1c:	e09a      	b.n	8009e54 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	785b      	ldrb	r3, [r3, #1]
 8009d22:	2b0b      	cmp	r3, #11
 8009d24:	f200 8086 	bhi.w	8009e34 <USBD_HID_Setup+0x1dc>
 8009d28:	a201      	add	r2, pc, #4	; (adr r2, 8009d30 <USBD_HID_Setup+0xd8>)
 8009d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d2e:	bf00      	nop
 8009d30:	08009d61 	.word	0x08009d61
 8009d34:	08009e43 	.word	0x08009e43
 8009d38:	08009e35 	.word	0x08009e35
 8009d3c:	08009e35 	.word	0x08009e35
 8009d40:	08009e35 	.word	0x08009e35
 8009d44:	08009e35 	.word	0x08009e35
 8009d48:	08009d8b 	.word	0x08009d8b
 8009d4c:	08009e35 	.word	0x08009e35
 8009d50:	08009e35 	.word	0x08009e35
 8009d54:	08009e35 	.word	0x08009e35
 8009d58:	08009de3 	.word	0x08009de3
 8009d5c:	08009e0d 	.word	0x08009e0d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	2b03      	cmp	r3, #3
 8009d6a:	d107      	bne.n	8009d7c <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009d6c:	f107 030a 	add.w	r3, r7, #10
 8009d70:	2202      	movs	r2, #2
 8009d72:	4619      	mov	r1, r3
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f001 fb8d 	bl	800b494 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009d7a:	e063      	b.n	8009e44 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8009d7c:	6839      	ldr	r1, [r7, #0]
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f001 fb17 	bl	800b3b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009d84:	2303      	movs	r3, #3
 8009d86:	75fb      	strb	r3, [r7, #23]
          break;
 8009d88:	e05c      	b.n	8009e44 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	885b      	ldrh	r3, [r3, #2]
 8009d8e:	0a1b      	lsrs	r3, r3, #8
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	2b22      	cmp	r3, #34	; 0x22
 8009d94:	d108      	bne.n	8009da8 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	88db      	ldrh	r3, [r3, #6]
 8009d9a:	2b20      	cmp	r3, #32
 8009d9c:	bf28      	it	cs
 8009d9e:	2320      	movcs	r3, #32
 8009da0:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8009da2:	4b2f      	ldr	r3, [pc, #188]	; (8009e60 <USBD_HID_Setup+0x208>)
 8009da4:	613b      	str	r3, [r7, #16]
 8009da6:	e015      	b.n	8009dd4 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	885b      	ldrh	r3, [r3, #2]
 8009dac:	0a1b      	lsrs	r3, r3, #8
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	2b21      	cmp	r3, #33	; 0x21
 8009db2:	d108      	bne.n	8009dc6 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8009db4:	4b2b      	ldr	r3, [pc, #172]	; (8009e64 <USBD_HID_Setup+0x20c>)
 8009db6:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	88db      	ldrh	r3, [r3, #6]
 8009dbc:	2b09      	cmp	r3, #9
 8009dbe:	bf28      	it	cs
 8009dc0:	2309      	movcs	r3, #9
 8009dc2:	82bb      	strh	r3, [r7, #20]
 8009dc4:	e006      	b.n	8009dd4 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8009dc6:	6839      	ldr	r1, [r7, #0]
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f001 faf2 	bl	800b3b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009dce:	2303      	movs	r3, #3
 8009dd0:	75fb      	strb	r3, [r7, #23]
            break;
 8009dd2:	e037      	b.n	8009e44 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8009dd4:	8abb      	ldrh	r3, [r7, #20]
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	6939      	ldr	r1, [r7, #16]
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f001 fb5a 	bl	800b494 <USBD_CtlSendData>
          break;
 8009de0:	e030      	b.n	8009e44 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	2b03      	cmp	r3, #3
 8009dec:	d107      	bne.n	8009dfe <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	3308      	adds	r3, #8
 8009df2:	2201      	movs	r2, #1
 8009df4:	4619      	mov	r1, r3
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f001 fb4c 	bl	800b494 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009dfc:	e022      	b.n	8009e44 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8009dfe:	6839      	ldr	r1, [r7, #0]
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f001 fad6 	bl	800b3b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e06:	2303      	movs	r3, #3
 8009e08:	75fb      	strb	r3, [r7, #23]
          break;
 8009e0a:	e01b      	b.n	8009e44 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e12:	b2db      	uxtb	r3, r3
 8009e14:	2b03      	cmp	r3, #3
 8009e16:	d106      	bne.n	8009e26 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	885b      	ldrh	r3, [r3, #2]
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	461a      	mov	r2, r3
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e24:	e00e      	b.n	8009e44 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8009e26:	6839      	ldr	r1, [r7, #0]
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f001 fac2 	bl	800b3b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e2e:	2303      	movs	r3, #3
 8009e30:	75fb      	strb	r3, [r7, #23]
          break;
 8009e32:	e007      	b.n	8009e44 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009e34:	6839      	ldr	r1, [r7, #0]
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f001 fabb 	bl	800b3b2 <USBD_CtlError>
          ret = USBD_FAIL;
 8009e3c:	2303      	movs	r3, #3
 8009e3e:	75fb      	strb	r3, [r7, #23]
          break;
 8009e40:	e000      	b.n	8009e44 <USBD_HID_Setup+0x1ec>
          break;
 8009e42:	bf00      	nop
      }
      break;
 8009e44:	e006      	b.n	8009e54 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8009e46:	6839      	ldr	r1, [r7, #0]
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f001 fab2 	bl	800b3b2 <USBD_CtlError>
      ret = USBD_FAIL;
 8009e4e:	2303      	movs	r3, #3
 8009e50:	75fb      	strb	r3, [r7, #23]
      break;
 8009e52:	bf00      	nop
  }

  return (uint8_t)ret;
 8009e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3718      	adds	r7, #24
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	200000b8 	.word	0x200000b8
 8009e64:	200000a0 	.word	0x200000a0

08009e68 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b086      	sub	sp, #24
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	60b9      	str	r1, [r7, #8]
 8009e72:	4613      	mov	r3, r2
 8009e74:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	32b0      	adds	r2, #176	; 0xb0
 8009e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e84:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d101      	bne.n	8009e90 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009e8c:	2303      	movs	r3, #3
 8009e8e:	e014      	b.n	8009eba <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	2b03      	cmp	r3, #3
 8009e9a:	d10d      	bne.n	8009eb8 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	7b1b      	ldrb	r3, [r3, #12]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d109      	bne.n	8009eb8 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8009eaa:	4b06      	ldr	r3, [pc, #24]	; (8009ec4 <USBD_HID_SendReport+0x5c>)
 8009eac:	7819      	ldrb	r1, [r3, #0]
 8009eae:	88fb      	ldrh	r3, [r7, #6]
 8009eb0:	68ba      	ldr	r2, [r7, #8]
 8009eb2:	68f8      	ldr	r0, [r7, #12]
 8009eb4:	f004 fa87 	bl	800e3c6 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8009eb8:	2300      	movs	r3, #0
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3718      	adds	r7, #24
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	200000d8 	.word	0x200000d8

08009ec8 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8009ed0:	2181      	movs	r1, #129	; 0x81
 8009ed2:	4809      	ldr	r0, [pc, #36]	; (8009ef8 <USBD_HID_GetFSCfgDesc+0x30>)
 8009ed4:	f000 fc35 	bl	800a742 <USBD_GetEpDesc>
 8009ed8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d002      	beq.n	8009ee6 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	220a      	movs	r2, #10
 8009ee4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2222      	movs	r2, #34	; 0x22
 8009eea:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8009eec:	4b02      	ldr	r3, [pc, #8]	; (8009ef8 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3710      	adds	r7, #16
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	2000007c 	.word	0x2000007c

08009efc <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8009f04:	2181      	movs	r1, #129	; 0x81
 8009f06:	4809      	ldr	r0, [pc, #36]	; (8009f2c <USBD_HID_GetHSCfgDesc+0x30>)
 8009f08:	f000 fc1b 	bl	800a742 <USBD_GetEpDesc>
 8009f0c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d002      	beq.n	8009f1a <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2207      	movs	r2, #7
 8009f18:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2222      	movs	r2, #34	; 0x22
 8009f1e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8009f20:	4b02      	ldr	r3, [pc, #8]	; (8009f2c <USBD_HID_GetHSCfgDesc+0x30>)
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	2000007c 	.word	0x2000007c

08009f30 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8009f38:	2181      	movs	r1, #129	; 0x81
 8009f3a:	4809      	ldr	r0, [pc, #36]	; (8009f60 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8009f3c:	f000 fc01 	bl	800a742 <USBD_GetEpDesc>
 8009f40:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d002      	beq.n	8009f4e <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	220a      	movs	r2, #10
 8009f4c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2222      	movs	r2, #34	; 0x22
 8009f52:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8009f54:	4b02      	ldr	r3, [pc, #8]	; (8009f60 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3710      	adds	r7, #16
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
 8009f5e:	bf00      	nop
 8009f60:	2000007c 	.word	0x2000007c

08009f64 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b083      	sub	sp, #12
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	460b      	mov	r3, r1
 8009f6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	32b0      	adds	r2, #176	; 0xb0
 8009f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8009f82:	2300      	movs	r3, #0
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	370c      	adds	r7, #12
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b083      	sub	sp, #12
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	220a      	movs	r2, #10
 8009f9c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8009f9e:	4b03      	ldr	r3, [pc, #12]	; (8009fac <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	370c      	adds	r7, #12
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr
 8009fac:	200000ac 	.word	0x200000ac

08009fb0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b086      	sub	sp, #24
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	60f8      	str	r0, [r7, #12]
 8009fb8:	60b9      	str	r1, [r7, #8]
 8009fba:	4613      	mov	r3, r2
 8009fbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d101      	bne.n	8009fc8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009fc4:	2303      	movs	r3, #3
 8009fc6:	e01f      	b.n	800a008 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d003      	beq.n	8009fee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	68ba      	ldr	r2, [r7, #8]
 8009fea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	79fa      	ldrb	r2, [r7, #7]
 8009ffa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009ffc:	68f8      	ldr	r0, [r7, #12]
 8009ffe:	f004 f8ad 	bl	800e15c <USBD_LL_Init>
 800a002:	4603      	mov	r3, r0
 800a004:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a006:	7dfb      	ldrb	r3, [r7, #23]
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3718      	adds	r7, #24
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a01a:	2300      	movs	r3, #0
 800a01c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d101      	bne.n	800a028 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a024:	2303      	movs	r3, #3
 800a026:	e025      	b.n	800a074 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	683a      	ldr	r2, [r7, #0]
 800a02c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	32ae      	adds	r2, #174	; 0xae
 800a03a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a040:	2b00      	cmp	r3, #0
 800a042:	d00f      	beq.n	800a064 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	32ae      	adds	r2, #174	; 0xae
 800a04e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a054:	f107 020e 	add.w	r2, r7, #14
 800a058:	4610      	mov	r0, r2
 800a05a:	4798      	blx	r3
 800a05c:	4602      	mov	r2, r0
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a06a:	1c5a      	adds	r2, r3, #1
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a072:	2300      	movs	r3, #0
}
 800a074:	4618      	mov	r0, r3
 800a076:	3710      	adds	r7, #16
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b082      	sub	sp, #8
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f004 f8b5 	bl	800e1f4 <USBD_LL_Start>
 800a08a:	4603      	mov	r3, r0
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3708      	adds	r7, #8
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a094:	b480      	push	{r7}
 800a096:	b083      	sub	sp, #12
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a09c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	370c      	adds	r7, #12
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a8:	4770      	bx	lr

0800a0aa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b084      	sub	sp, #16
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
 800a0b2:	460b      	mov	r3, r1
 800a0b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d009      	beq.n	800a0d8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	78fa      	ldrb	r2, [r7, #3]
 800a0ce:	4611      	mov	r1, r2
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	4798      	blx	r3
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a0d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3710      	adds	r7, #16
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}

0800a0e2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0e2:	b580      	push	{r7, lr}
 800a0e4:	b084      	sub	sp, #16
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
 800a0ea:	460b      	mov	r3, r1
 800a0ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	78fa      	ldrb	r2, [r7, #3]
 800a0fc:	4611      	mov	r1, r2
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	4798      	blx	r3
 800a102:	4603      	mov	r3, r0
 800a104:	2b00      	cmp	r3, #0
 800a106:	d001      	beq.n	800a10c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a108:	2303      	movs	r3, #3
 800a10a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a10c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3710      	adds	r7, #16
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}

0800a116 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a116:	b580      	push	{r7, lr}
 800a118:	b084      	sub	sp, #16
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
 800a11e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a126:	6839      	ldr	r1, [r7, #0]
 800a128:	4618      	mov	r0, r3
 800a12a:	f001 f908 	bl	800b33e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2201      	movs	r2, #1
 800a132:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a13c:	461a      	mov	r2, r3
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a14a:	f003 031f 	and.w	r3, r3, #31
 800a14e:	2b02      	cmp	r3, #2
 800a150:	d01a      	beq.n	800a188 <USBD_LL_SetupStage+0x72>
 800a152:	2b02      	cmp	r3, #2
 800a154:	d822      	bhi.n	800a19c <USBD_LL_SetupStage+0x86>
 800a156:	2b00      	cmp	r3, #0
 800a158:	d002      	beq.n	800a160 <USBD_LL_SetupStage+0x4a>
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	d00a      	beq.n	800a174 <USBD_LL_SetupStage+0x5e>
 800a15e:	e01d      	b.n	800a19c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a166:	4619      	mov	r1, r3
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 fb5f 	bl	800a82c <USBD_StdDevReq>
 800a16e:	4603      	mov	r3, r0
 800a170:	73fb      	strb	r3, [r7, #15]
      break;
 800a172:	e020      	b.n	800a1b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a17a:	4619      	mov	r1, r3
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 fbc7 	bl	800a910 <USBD_StdItfReq>
 800a182:	4603      	mov	r3, r0
 800a184:	73fb      	strb	r3, [r7, #15]
      break;
 800a186:	e016      	b.n	800a1b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a18e:	4619      	mov	r1, r3
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f000 fc29 	bl	800a9e8 <USBD_StdEPReq>
 800a196:	4603      	mov	r3, r0
 800a198:	73fb      	strb	r3, [r7, #15]
      break;
 800a19a:	e00c      	b.n	800a1b6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a1a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	4619      	mov	r1, r3
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f004 f882 	bl	800e2b4 <USBD_LL_StallEP>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	73fb      	strb	r3, [r7, #15]
      break;
 800a1b4:	bf00      	nop
  }

  return ret;
 800a1b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3710      	adds	r7, #16
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b086      	sub	sp, #24
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	607a      	str	r2, [r7, #4]
 800a1cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a1d2:	7afb      	ldrb	r3, [r7, #11]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d16e      	bne.n	800a2b6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a1de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a1e6:	2b03      	cmp	r3, #3
 800a1e8:	f040 8098 	bne.w	800a31c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	689a      	ldr	r2, [r3, #8]
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	68db      	ldr	r3, [r3, #12]
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d913      	bls.n	800a220 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	689a      	ldr	r2, [r3, #8]
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	68db      	ldr	r3, [r3, #12]
 800a200:	1ad2      	subs	r2, r2, r3
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	68da      	ldr	r2, [r3, #12]
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	689b      	ldr	r3, [r3, #8]
 800a20e:	4293      	cmp	r3, r2
 800a210:	bf28      	it	cs
 800a212:	4613      	movcs	r3, r2
 800a214:	461a      	mov	r2, r3
 800a216:	6879      	ldr	r1, [r7, #4]
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f001 f967 	bl	800b4ec <USBD_CtlContinueRx>
 800a21e:	e07d      	b.n	800a31c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a226:	f003 031f 	and.w	r3, r3, #31
 800a22a:	2b02      	cmp	r3, #2
 800a22c:	d014      	beq.n	800a258 <USBD_LL_DataOutStage+0x98>
 800a22e:	2b02      	cmp	r3, #2
 800a230:	d81d      	bhi.n	800a26e <USBD_LL_DataOutStage+0xae>
 800a232:	2b00      	cmp	r3, #0
 800a234:	d002      	beq.n	800a23c <USBD_LL_DataOutStage+0x7c>
 800a236:	2b01      	cmp	r3, #1
 800a238:	d003      	beq.n	800a242 <USBD_LL_DataOutStage+0x82>
 800a23a:	e018      	b.n	800a26e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a23c:	2300      	movs	r3, #0
 800a23e:	75bb      	strb	r3, [r7, #22]
            break;
 800a240:	e018      	b.n	800a274 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a248:	b2db      	uxtb	r3, r3
 800a24a:	4619      	mov	r1, r3
 800a24c:	68f8      	ldr	r0, [r7, #12]
 800a24e:	f000 fa5e 	bl	800a70e <USBD_CoreFindIF>
 800a252:	4603      	mov	r3, r0
 800a254:	75bb      	strb	r3, [r7, #22]
            break;
 800a256:	e00d      	b.n	800a274 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	4619      	mov	r1, r3
 800a262:	68f8      	ldr	r0, [r7, #12]
 800a264:	f000 fa60 	bl	800a728 <USBD_CoreFindEP>
 800a268:	4603      	mov	r3, r0
 800a26a:	75bb      	strb	r3, [r7, #22]
            break;
 800a26c:	e002      	b.n	800a274 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a26e:	2300      	movs	r3, #0
 800a270:	75bb      	strb	r3, [r7, #22]
            break;
 800a272:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a274:	7dbb      	ldrb	r3, [r7, #22]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d119      	bne.n	800a2ae <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a280:	b2db      	uxtb	r3, r3
 800a282:	2b03      	cmp	r3, #3
 800a284:	d113      	bne.n	800a2ae <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a286:	7dba      	ldrb	r2, [r7, #22]
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	32ae      	adds	r2, #174	; 0xae
 800a28c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a290:	691b      	ldr	r3, [r3, #16]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d00b      	beq.n	800a2ae <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a296:	7dba      	ldrb	r2, [r7, #22]
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a29e:	7dba      	ldrb	r2, [r7, #22]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	32ae      	adds	r2, #174	; 0xae
 800a2a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2a8:	691b      	ldr	r3, [r3, #16]
 800a2aa:	68f8      	ldr	r0, [r7, #12]
 800a2ac:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a2ae:	68f8      	ldr	r0, [r7, #12]
 800a2b0:	f001 f92d 	bl	800b50e <USBD_CtlSendStatus>
 800a2b4:	e032      	b.n	800a31c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a2b6:	7afb      	ldrb	r3, [r7, #11]
 800a2b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	4619      	mov	r1, r3
 800a2c0:	68f8      	ldr	r0, [r7, #12]
 800a2c2:	f000 fa31 	bl	800a728 <USBD_CoreFindEP>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a2ca:	7dbb      	ldrb	r3, [r7, #22]
 800a2cc:	2bff      	cmp	r3, #255	; 0xff
 800a2ce:	d025      	beq.n	800a31c <USBD_LL_DataOutStage+0x15c>
 800a2d0:	7dbb      	ldrb	r3, [r7, #22]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d122      	bne.n	800a31c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	2b03      	cmp	r3, #3
 800a2e0:	d117      	bne.n	800a312 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a2e2:	7dba      	ldrb	r2, [r7, #22]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	32ae      	adds	r2, #174	; 0xae
 800a2e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2ec:	699b      	ldr	r3, [r3, #24]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d00f      	beq.n	800a312 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a2f2:	7dba      	ldrb	r2, [r7, #22]
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a2fa:	7dba      	ldrb	r2, [r7, #22]
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	32ae      	adds	r2, #174	; 0xae
 800a300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a304:	699b      	ldr	r3, [r3, #24]
 800a306:	7afa      	ldrb	r2, [r7, #11]
 800a308:	4611      	mov	r1, r2
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	4798      	blx	r3
 800a30e:	4603      	mov	r3, r0
 800a310:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a312:	7dfb      	ldrb	r3, [r7, #23]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d001      	beq.n	800a31c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a318:	7dfb      	ldrb	r3, [r7, #23]
 800a31a:	e000      	b.n	800a31e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a31c:	2300      	movs	r3, #0
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3718      	adds	r7, #24
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}

0800a326 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a326:	b580      	push	{r7, lr}
 800a328:	b086      	sub	sp, #24
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	60f8      	str	r0, [r7, #12]
 800a32e:	460b      	mov	r3, r1
 800a330:	607a      	str	r2, [r7, #4]
 800a332:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a334:	7afb      	ldrb	r3, [r7, #11]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d16f      	bne.n	800a41a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	3314      	adds	r3, #20
 800a33e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a346:	2b02      	cmp	r3, #2
 800a348:	d15a      	bne.n	800a400 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	689a      	ldr	r2, [r3, #8]
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	68db      	ldr	r3, [r3, #12]
 800a352:	429a      	cmp	r2, r3
 800a354:	d914      	bls.n	800a380 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	689a      	ldr	r2, [r3, #8]
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	68db      	ldr	r3, [r3, #12]
 800a35e:	1ad2      	subs	r2, r2, r3
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	689b      	ldr	r3, [r3, #8]
 800a368:	461a      	mov	r2, r3
 800a36a:	6879      	ldr	r1, [r7, #4]
 800a36c:	68f8      	ldr	r0, [r7, #12]
 800a36e:	f001 f8ac 	bl	800b4ca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a372:	2300      	movs	r3, #0
 800a374:	2200      	movs	r2, #0
 800a376:	2100      	movs	r1, #0
 800a378:	68f8      	ldr	r0, [r7, #12]
 800a37a:	f004 f845 	bl	800e408 <USBD_LL_PrepareReceive>
 800a37e:	e03f      	b.n	800a400 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	68da      	ldr	r2, [r3, #12]
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	429a      	cmp	r2, r3
 800a38a:	d11c      	bne.n	800a3c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	685a      	ldr	r2, [r3, #4]
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a394:	429a      	cmp	r2, r3
 800a396:	d316      	bcc.n	800a3c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	685a      	ldr	r2, [r3, #4]
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d20f      	bcs.n	800a3c6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	2100      	movs	r1, #0
 800a3aa:	68f8      	ldr	r0, [r7, #12]
 800a3ac:	f001 f88d 	bl	800b4ca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	2100      	movs	r1, #0
 800a3be:	68f8      	ldr	r0, [r7, #12]
 800a3c0:	f004 f822 	bl	800e408 <USBD_LL_PrepareReceive>
 800a3c4:	e01c      	b.n	800a400 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3cc:	b2db      	uxtb	r3, r3
 800a3ce:	2b03      	cmp	r3, #3
 800a3d0:	d10f      	bne.n	800a3f2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3d8:	68db      	ldr	r3, [r3, #12]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d009      	beq.n	800a3f2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3ec:	68db      	ldr	r3, [r3, #12]
 800a3ee:	68f8      	ldr	r0, [r7, #12]
 800a3f0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a3f2:	2180      	movs	r1, #128	; 0x80
 800a3f4:	68f8      	ldr	r0, [r7, #12]
 800a3f6:	f003 ff5d 	bl	800e2b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a3fa:	68f8      	ldr	r0, [r7, #12]
 800a3fc:	f001 f89a 	bl	800b534 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a406:	2b00      	cmp	r3, #0
 800a408:	d03a      	beq.n	800a480 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a40a:	68f8      	ldr	r0, [r7, #12]
 800a40c:	f7ff fe42 	bl	800a094 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2200      	movs	r2, #0
 800a414:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a418:	e032      	b.n	800a480 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a41a:	7afb      	ldrb	r3, [r7, #11]
 800a41c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a420:	b2db      	uxtb	r3, r3
 800a422:	4619      	mov	r1, r3
 800a424:	68f8      	ldr	r0, [r7, #12]
 800a426:	f000 f97f 	bl	800a728 <USBD_CoreFindEP>
 800a42a:	4603      	mov	r3, r0
 800a42c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a42e:	7dfb      	ldrb	r3, [r7, #23]
 800a430:	2bff      	cmp	r3, #255	; 0xff
 800a432:	d025      	beq.n	800a480 <USBD_LL_DataInStage+0x15a>
 800a434:	7dfb      	ldrb	r3, [r7, #23]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d122      	bne.n	800a480 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a440:	b2db      	uxtb	r3, r3
 800a442:	2b03      	cmp	r3, #3
 800a444:	d11c      	bne.n	800a480 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a446:	7dfa      	ldrb	r2, [r7, #23]
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	32ae      	adds	r2, #174	; 0xae
 800a44c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a450:	695b      	ldr	r3, [r3, #20]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d014      	beq.n	800a480 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a456:	7dfa      	ldrb	r2, [r7, #23]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a45e:	7dfa      	ldrb	r2, [r7, #23]
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	32ae      	adds	r2, #174	; 0xae
 800a464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a468:	695b      	ldr	r3, [r3, #20]
 800a46a:	7afa      	ldrb	r2, [r7, #11]
 800a46c:	4611      	mov	r1, r2
 800a46e:	68f8      	ldr	r0, [r7, #12]
 800a470:	4798      	blx	r3
 800a472:	4603      	mov	r3, r0
 800a474:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a476:	7dbb      	ldrb	r3, [r7, #22]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d001      	beq.n	800a480 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a47c:	7dbb      	ldrb	r3, [r7, #22]
 800a47e:	e000      	b.n	800a482 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a480:	2300      	movs	r3, #0
}
 800a482:	4618      	mov	r0, r3
 800a484:	3718      	adds	r7, #24
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}

0800a48a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a48a:	b580      	push	{r7, lr}
 800a48c:	b084      	sub	sp, #16
 800a48e:	af00      	add	r7, sp, #0
 800a490:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a492:	2300      	movs	r3, #0
 800a494:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2201      	movs	r2, #1
 800a49a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d014      	beq.n	800a4f0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d00e      	beq.n	800a4f0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	687a      	ldr	r2, [r7, #4]
 800a4dc:	6852      	ldr	r2, [r2, #4]
 800a4de:	b2d2      	uxtb	r2, r2
 800a4e0:	4611      	mov	r1, r2
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	4798      	blx	r3
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d001      	beq.n	800a4f0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a4ec:	2303      	movs	r3, #3
 800a4ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a4f0:	2340      	movs	r3, #64	; 0x40
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	2100      	movs	r1, #0
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f003 fe97 	bl	800e22a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2201      	movs	r2, #1
 800a500:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2240      	movs	r2, #64	; 0x40
 800a508:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a50c:	2340      	movs	r3, #64	; 0x40
 800a50e:	2200      	movs	r2, #0
 800a510:	2180      	movs	r1, #128	; 0x80
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f003 fe89 	bl	800e22a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2201      	movs	r2, #1
 800a51c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2240      	movs	r2, #64	; 0x40
 800a522:	621a      	str	r2, [r3, #32]

  return ret;
 800a524:	7bfb      	ldrb	r3, [r7, #15]
}
 800a526:	4618      	mov	r0, r3
 800a528:	3710      	adds	r7, #16
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}

0800a52e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a52e:	b480      	push	{r7}
 800a530:	b083      	sub	sp, #12
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
 800a536:	460b      	mov	r3, r1
 800a538:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	78fa      	ldrb	r2, [r7, #3]
 800a53e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a540:	2300      	movs	r3, #0
}
 800a542:	4618      	mov	r0, r3
 800a544:	370c      	adds	r7, #12
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr

0800a54e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a54e:	b480      	push	{r7}
 800a550:	b083      	sub	sp, #12
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a55c:	b2da      	uxtb	r2, r3
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2204      	movs	r2, #4
 800a568:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a56c:	2300      	movs	r3, #0
}
 800a56e:	4618      	mov	r0, r3
 800a570:	370c      	adds	r7, #12
 800a572:	46bd      	mov	sp, r7
 800a574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a578:	4770      	bx	lr

0800a57a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a57a:	b480      	push	{r7}
 800a57c:	b083      	sub	sp, #12
 800a57e:	af00      	add	r7, sp, #0
 800a580:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a588:	b2db      	uxtb	r3, r3
 800a58a:	2b04      	cmp	r3, #4
 800a58c:	d106      	bne.n	800a59c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a594:	b2da      	uxtb	r2, r3
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a59c:	2300      	movs	r3, #0
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	370c      	adds	r7, #12
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr

0800a5aa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a5aa:	b580      	push	{r7, lr}
 800a5ac:	b082      	sub	sp, #8
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5b8:	b2db      	uxtb	r3, r3
 800a5ba:	2b03      	cmp	r3, #3
 800a5bc:	d110      	bne.n	800a5e0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d00b      	beq.n	800a5e0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5ce:	69db      	ldr	r3, [r3, #28]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d005      	beq.n	800a5e0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5da:	69db      	ldr	r3, [r3, #28]
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a5e0:	2300      	movs	r3, #0
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3708      	adds	r7, #8
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b082      	sub	sp, #8
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	32ae      	adds	r2, #174	; 0xae
 800a600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d101      	bne.n	800a60c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a608:	2303      	movs	r3, #3
 800a60a:	e01c      	b.n	800a646 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a612:	b2db      	uxtb	r3, r3
 800a614:	2b03      	cmp	r3, #3
 800a616:	d115      	bne.n	800a644 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	32ae      	adds	r2, #174	; 0xae
 800a622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a626:	6a1b      	ldr	r3, [r3, #32]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d00b      	beq.n	800a644 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	32ae      	adds	r2, #174	; 0xae
 800a636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a63a:	6a1b      	ldr	r3, [r3, #32]
 800a63c:	78fa      	ldrb	r2, [r7, #3]
 800a63e:	4611      	mov	r1, r2
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a644:	2300      	movs	r3, #0
}
 800a646:	4618      	mov	r0, r3
 800a648:	3708      	adds	r7, #8
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}

0800a64e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a64e:	b580      	push	{r7, lr}
 800a650:	b082      	sub	sp, #8
 800a652:	af00      	add	r7, sp, #0
 800a654:	6078      	str	r0, [r7, #4]
 800a656:	460b      	mov	r3, r1
 800a658:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	32ae      	adds	r2, #174	; 0xae
 800a664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d101      	bne.n	800a670 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a66c:	2303      	movs	r3, #3
 800a66e:	e01c      	b.n	800a6aa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a676:	b2db      	uxtb	r3, r3
 800a678:	2b03      	cmp	r3, #3
 800a67a:	d115      	bne.n	800a6a8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	32ae      	adds	r2, #174	; 0xae
 800a686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d00b      	beq.n	800a6a8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	32ae      	adds	r2, #174	; 0xae
 800a69a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a0:	78fa      	ldrb	r2, [r7, #3]
 800a6a2:	4611      	mov	r1, r2
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a6a8:	2300      	movs	r3, #0
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3708      	adds	r7, #8
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}

0800a6b2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a6b2:	b480      	push	{r7}
 800a6b4:	b083      	sub	sp, #12
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a6ba:	2300      	movs	r3, #0
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	370c      	adds	r7, #12
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d00e      	beq.n	800a704 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	6852      	ldr	r2, [r2, #4]
 800a6f2:	b2d2      	uxtb	r2, r2
 800a6f4:	4611      	mov	r1, r2
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	4798      	blx	r3
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d001      	beq.n	800a704 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a700:	2303      	movs	r3, #3
 800a702:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a704:	7bfb      	ldrb	r3, [r7, #15]
}
 800a706:	4618      	mov	r0, r3
 800a708:	3710      	adds	r7, #16
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}

0800a70e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a70e:	b480      	push	{r7}
 800a710:	b083      	sub	sp, #12
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
 800a716:	460b      	mov	r3, r1
 800a718:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a71a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	370c      	adds	r7, #12
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr

0800a728 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	460b      	mov	r3, r1
 800a732:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a734:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a736:	4618      	mov	r0, r3
 800a738:	370c      	adds	r7, #12
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr

0800a742 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a742:	b580      	push	{r7, lr}
 800a744:	b086      	sub	sp, #24
 800a746:	af00      	add	r7, sp, #0
 800a748:	6078      	str	r0, [r7, #4]
 800a74a:	460b      	mov	r3, r1
 800a74c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a756:	2300      	movs	r3, #0
 800a758:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	885b      	ldrh	r3, [r3, #2]
 800a75e:	b29a      	uxth	r2, r3
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	b29b      	uxth	r3, r3
 800a766:	429a      	cmp	r2, r3
 800a768:	d920      	bls.n	800a7ac <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	b29b      	uxth	r3, r3
 800a770:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a772:	e013      	b.n	800a79c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a774:	f107 030a 	add.w	r3, r7, #10
 800a778:	4619      	mov	r1, r3
 800a77a:	6978      	ldr	r0, [r7, #20]
 800a77c:	f000 f81b 	bl	800a7b6 <USBD_GetNextDesc>
 800a780:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	785b      	ldrb	r3, [r3, #1]
 800a786:	2b05      	cmp	r3, #5
 800a788:	d108      	bne.n	800a79c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	789b      	ldrb	r3, [r3, #2]
 800a792:	78fa      	ldrb	r2, [r7, #3]
 800a794:	429a      	cmp	r2, r3
 800a796:	d008      	beq.n	800a7aa <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a798:	2300      	movs	r3, #0
 800a79a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	885b      	ldrh	r3, [r3, #2]
 800a7a0:	b29a      	uxth	r2, r3
 800a7a2:	897b      	ldrh	r3, [r7, #10]
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d8e5      	bhi.n	800a774 <USBD_GetEpDesc+0x32>
 800a7a8:	e000      	b.n	800a7ac <USBD_GetEpDesc+0x6a>
          break;
 800a7aa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a7ac:	693b      	ldr	r3, [r7, #16]
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3718      	adds	r7, #24
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}

0800a7b6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a7b6:	b480      	push	{r7}
 800a7b8:	b085      	sub	sp, #20
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	6078      	str	r0, [r7, #4]
 800a7be:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	881a      	ldrh	r2, [r3, #0]
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	4413      	add	r3, r2
 800a7d0:	b29a      	uxth	r2, r3
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	461a      	mov	r2, r3
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	4413      	add	r3, r2
 800a7e0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a7e2:	68fb      	ldr	r3, [r7, #12]
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3714      	adds	r7, #20
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr

0800a7f0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b087      	sub	sp, #28
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	781b      	ldrb	r3, [r3, #0]
 800a800:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	3301      	adds	r3, #1
 800a806:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a80e:	8a3b      	ldrh	r3, [r7, #16]
 800a810:	021b      	lsls	r3, r3, #8
 800a812:	b21a      	sxth	r2, r3
 800a814:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a818:	4313      	orrs	r3, r2
 800a81a:	b21b      	sxth	r3, r3
 800a81c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a81e:	89fb      	ldrh	r3, [r7, #14]
}
 800a820:	4618      	mov	r0, r3
 800a822:	371c      	adds	r7, #28
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a836:	2300      	movs	r3, #0
 800a838:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a842:	2b40      	cmp	r3, #64	; 0x40
 800a844:	d005      	beq.n	800a852 <USBD_StdDevReq+0x26>
 800a846:	2b40      	cmp	r3, #64	; 0x40
 800a848:	d857      	bhi.n	800a8fa <USBD_StdDevReq+0xce>
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d00f      	beq.n	800a86e <USBD_StdDevReq+0x42>
 800a84e:	2b20      	cmp	r3, #32
 800a850:	d153      	bne.n	800a8fa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	32ae      	adds	r2, #174	; 0xae
 800a85c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	6839      	ldr	r1, [r7, #0]
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	4798      	blx	r3
 800a868:	4603      	mov	r3, r0
 800a86a:	73fb      	strb	r3, [r7, #15]
      break;
 800a86c:	e04a      	b.n	800a904 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	785b      	ldrb	r3, [r3, #1]
 800a872:	2b09      	cmp	r3, #9
 800a874:	d83b      	bhi.n	800a8ee <USBD_StdDevReq+0xc2>
 800a876:	a201      	add	r2, pc, #4	; (adr r2, 800a87c <USBD_StdDevReq+0x50>)
 800a878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a87c:	0800a8d1 	.word	0x0800a8d1
 800a880:	0800a8e5 	.word	0x0800a8e5
 800a884:	0800a8ef 	.word	0x0800a8ef
 800a888:	0800a8db 	.word	0x0800a8db
 800a88c:	0800a8ef 	.word	0x0800a8ef
 800a890:	0800a8af 	.word	0x0800a8af
 800a894:	0800a8a5 	.word	0x0800a8a5
 800a898:	0800a8ef 	.word	0x0800a8ef
 800a89c:	0800a8c7 	.word	0x0800a8c7
 800a8a0:	0800a8b9 	.word	0x0800a8b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a8a4:	6839      	ldr	r1, [r7, #0]
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f000 fa3c 	bl	800ad24 <USBD_GetDescriptor>
          break;
 800a8ac:	e024      	b.n	800a8f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a8ae:	6839      	ldr	r1, [r7, #0]
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f000 fba1 	bl	800aff8 <USBD_SetAddress>
          break;
 800a8b6:	e01f      	b.n	800a8f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a8b8:	6839      	ldr	r1, [r7, #0]
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 fbe0 	bl	800b080 <USBD_SetConfig>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	73fb      	strb	r3, [r7, #15]
          break;
 800a8c4:	e018      	b.n	800a8f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a8c6:	6839      	ldr	r1, [r7, #0]
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f000 fc83 	bl	800b1d4 <USBD_GetConfig>
          break;
 800a8ce:	e013      	b.n	800a8f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a8d0:	6839      	ldr	r1, [r7, #0]
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 fcb4 	bl	800b240 <USBD_GetStatus>
          break;
 800a8d8:	e00e      	b.n	800a8f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a8da:	6839      	ldr	r1, [r7, #0]
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 fce3 	bl	800b2a8 <USBD_SetFeature>
          break;
 800a8e2:	e009      	b.n	800a8f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a8e4:	6839      	ldr	r1, [r7, #0]
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f000 fd07 	bl	800b2fa <USBD_ClrFeature>
          break;
 800a8ec:	e004      	b.n	800a8f8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a8ee:	6839      	ldr	r1, [r7, #0]
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f000 fd5e 	bl	800b3b2 <USBD_CtlError>
          break;
 800a8f6:	bf00      	nop
      }
      break;
 800a8f8:	e004      	b.n	800a904 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a8fa:	6839      	ldr	r1, [r7, #0]
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 fd58 	bl	800b3b2 <USBD_CtlError>
      break;
 800a902:	bf00      	nop
  }

  return ret;
 800a904:	7bfb      	ldrb	r3, [r7, #15]
}
 800a906:	4618      	mov	r0, r3
 800a908:	3710      	adds	r7, #16
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
 800a90e:	bf00      	nop

0800a910 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a91a:	2300      	movs	r3, #0
 800a91c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a926:	2b40      	cmp	r3, #64	; 0x40
 800a928:	d005      	beq.n	800a936 <USBD_StdItfReq+0x26>
 800a92a:	2b40      	cmp	r3, #64	; 0x40
 800a92c:	d852      	bhi.n	800a9d4 <USBD_StdItfReq+0xc4>
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d001      	beq.n	800a936 <USBD_StdItfReq+0x26>
 800a932:	2b20      	cmp	r3, #32
 800a934:	d14e      	bne.n	800a9d4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	3b01      	subs	r3, #1
 800a940:	2b02      	cmp	r3, #2
 800a942:	d840      	bhi.n	800a9c6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	889b      	ldrh	r3, [r3, #4]
 800a948:	b2db      	uxtb	r3, r3
 800a94a:	2b01      	cmp	r3, #1
 800a94c:	d836      	bhi.n	800a9bc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	889b      	ldrh	r3, [r3, #4]
 800a952:	b2db      	uxtb	r3, r3
 800a954:	4619      	mov	r1, r3
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f7ff fed9 	bl	800a70e <USBD_CoreFindIF>
 800a95c:	4603      	mov	r3, r0
 800a95e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a960:	7bbb      	ldrb	r3, [r7, #14]
 800a962:	2bff      	cmp	r3, #255	; 0xff
 800a964:	d01d      	beq.n	800a9a2 <USBD_StdItfReq+0x92>
 800a966:	7bbb      	ldrb	r3, [r7, #14]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d11a      	bne.n	800a9a2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a96c:	7bba      	ldrb	r2, [r7, #14]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	32ae      	adds	r2, #174	; 0xae
 800a972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a976:	689b      	ldr	r3, [r3, #8]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d00f      	beq.n	800a99c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a97c:	7bba      	ldrb	r2, [r7, #14]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a984:	7bba      	ldrb	r2, [r7, #14]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	32ae      	adds	r2, #174	; 0xae
 800a98a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a98e:	689b      	ldr	r3, [r3, #8]
 800a990:	6839      	ldr	r1, [r7, #0]
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	4798      	blx	r3
 800a996:	4603      	mov	r3, r0
 800a998:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a99a:	e004      	b.n	800a9a6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a99c:	2303      	movs	r3, #3
 800a99e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a9a0:	e001      	b.n	800a9a6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a9a2:	2303      	movs	r3, #3
 800a9a4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	88db      	ldrh	r3, [r3, #6]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d110      	bne.n	800a9d0 <USBD_StdItfReq+0xc0>
 800a9ae:	7bfb      	ldrb	r3, [r7, #15]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d10d      	bne.n	800a9d0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f000 fdaa 	bl	800b50e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a9ba:	e009      	b.n	800a9d0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a9bc:	6839      	ldr	r1, [r7, #0]
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 fcf7 	bl	800b3b2 <USBD_CtlError>
          break;
 800a9c4:	e004      	b.n	800a9d0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a9c6:	6839      	ldr	r1, [r7, #0]
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 fcf2 	bl	800b3b2 <USBD_CtlError>
          break;
 800a9ce:	e000      	b.n	800a9d2 <USBD_StdItfReq+0xc2>
          break;
 800a9d0:	bf00      	nop
      }
      break;
 800a9d2:	e004      	b.n	800a9de <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a9d4:	6839      	ldr	r1, [r7, #0]
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 fceb 	bl	800b3b2 <USBD_CtlError>
      break;
 800a9dc:	bf00      	nop
  }

  return ret;
 800a9de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3710      	adds	r7, #16
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b084      	sub	sp, #16
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	889b      	ldrh	r3, [r3, #4]
 800a9fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa04:	2b40      	cmp	r3, #64	; 0x40
 800aa06:	d007      	beq.n	800aa18 <USBD_StdEPReq+0x30>
 800aa08:	2b40      	cmp	r3, #64	; 0x40
 800aa0a:	f200 817f 	bhi.w	800ad0c <USBD_StdEPReq+0x324>
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d02a      	beq.n	800aa68 <USBD_StdEPReq+0x80>
 800aa12:	2b20      	cmp	r3, #32
 800aa14:	f040 817a 	bne.w	800ad0c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800aa18:	7bbb      	ldrb	r3, [r7, #14]
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f7ff fe83 	bl	800a728 <USBD_CoreFindEP>
 800aa22:	4603      	mov	r3, r0
 800aa24:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aa26:	7b7b      	ldrb	r3, [r7, #13]
 800aa28:	2bff      	cmp	r3, #255	; 0xff
 800aa2a:	f000 8174 	beq.w	800ad16 <USBD_StdEPReq+0x32e>
 800aa2e:	7b7b      	ldrb	r3, [r7, #13]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	f040 8170 	bne.w	800ad16 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800aa36:	7b7a      	ldrb	r2, [r7, #13]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800aa3e:	7b7a      	ldrb	r2, [r7, #13]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	32ae      	adds	r2, #174	; 0xae
 800aa44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa48:	689b      	ldr	r3, [r3, #8]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	f000 8163 	beq.w	800ad16 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800aa50:	7b7a      	ldrb	r2, [r7, #13]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	32ae      	adds	r2, #174	; 0xae
 800aa56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa5a:	689b      	ldr	r3, [r3, #8]
 800aa5c:	6839      	ldr	r1, [r7, #0]
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	4798      	blx	r3
 800aa62:	4603      	mov	r3, r0
 800aa64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800aa66:	e156      	b.n	800ad16 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	785b      	ldrb	r3, [r3, #1]
 800aa6c:	2b03      	cmp	r3, #3
 800aa6e:	d008      	beq.n	800aa82 <USBD_StdEPReq+0x9a>
 800aa70:	2b03      	cmp	r3, #3
 800aa72:	f300 8145 	bgt.w	800ad00 <USBD_StdEPReq+0x318>
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	f000 809b 	beq.w	800abb2 <USBD_StdEPReq+0x1ca>
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d03c      	beq.n	800aafa <USBD_StdEPReq+0x112>
 800aa80:	e13e      	b.n	800ad00 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa88:	b2db      	uxtb	r3, r3
 800aa8a:	2b02      	cmp	r3, #2
 800aa8c:	d002      	beq.n	800aa94 <USBD_StdEPReq+0xac>
 800aa8e:	2b03      	cmp	r3, #3
 800aa90:	d016      	beq.n	800aac0 <USBD_StdEPReq+0xd8>
 800aa92:	e02c      	b.n	800aaee <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa94:	7bbb      	ldrb	r3, [r7, #14]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d00d      	beq.n	800aab6 <USBD_StdEPReq+0xce>
 800aa9a:	7bbb      	ldrb	r3, [r7, #14]
 800aa9c:	2b80      	cmp	r3, #128	; 0x80
 800aa9e:	d00a      	beq.n	800aab6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aaa0:	7bbb      	ldrb	r3, [r7, #14]
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f003 fc05 	bl	800e2b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aaaa:	2180      	movs	r1, #128	; 0x80
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f003 fc01 	bl	800e2b4 <USBD_LL_StallEP>
 800aab2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aab4:	e020      	b.n	800aaf8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800aab6:	6839      	ldr	r1, [r7, #0]
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 fc7a 	bl	800b3b2 <USBD_CtlError>
              break;
 800aabe:	e01b      	b.n	800aaf8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	885b      	ldrh	r3, [r3, #2]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d10e      	bne.n	800aae6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aac8:	7bbb      	ldrb	r3, [r7, #14]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d00b      	beq.n	800aae6 <USBD_StdEPReq+0xfe>
 800aace:	7bbb      	ldrb	r3, [r7, #14]
 800aad0:	2b80      	cmp	r3, #128	; 0x80
 800aad2:	d008      	beq.n	800aae6 <USBD_StdEPReq+0xfe>
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	88db      	ldrh	r3, [r3, #6]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d104      	bne.n	800aae6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800aadc:	7bbb      	ldrb	r3, [r7, #14]
 800aade:	4619      	mov	r1, r3
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f003 fbe7 	bl	800e2b4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f000 fd11 	bl	800b50e <USBD_CtlSendStatus>

              break;
 800aaec:	e004      	b.n	800aaf8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800aaee:	6839      	ldr	r1, [r7, #0]
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f000 fc5e 	bl	800b3b2 <USBD_CtlError>
              break;
 800aaf6:	bf00      	nop
          }
          break;
 800aaf8:	e107      	b.n	800ad0a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab00:	b2db      	uxtb	r3, r3
 800ab02:	2b02      	cmp	r3, #2
 800ab04:	d002      	beq.n	800ab0c <USBD_StdEPReq+0x124>
 800ab06:	2b03      	cmp	r3, #3
 800ab08:	d016      	beq.n	800ab38 <USBD_StdEPReq+0x150>
 800ab0a:	e04b      	b.n	800aba4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab0c:	7bbb      	ldrb	r3, [r7, #14]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d00d      	beq.n	800ab2e <USBD_StdEPReq+0x146>
 800ab12:	7bbb      	ldrb	r3, [r7, #14]
 800ab14:	2b80      	cmp	r3, #128	; 0x80
 800ab16:	d00a      	beq.n	800ab2e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab18:	7bbb      	ldrb	r3, [r7, #14]
 800ab1a:	4619      	mov	r1, r3
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f003 fbc9 	bl	800e2b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab22:	2180      	movs	r1, #128	; 0x80
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f003 fbc5 	bl	800e2b4 <USBD_LL_StallEP>
 800ab2a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ab2c:	e040      	b.n	800abb0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ab2e:	6839      	ldr	r1, [r7, #0]
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 fc3e 	bl	800b3b2 <USBD_CtlError>
              break;
 800ab36:	e03b      	b.n	800abb0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	885b      	ldrh	r3, [r3, #2]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d136      	bne.n	800abae <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ab40:	7bbb      	ldrb	r3, [r7, #14]
 800ab42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d004      	beq.n	800ab54 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ab4a:	7bbb      	ldrb	r3, [r7, #14]
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f003 fbcf 	bl	800e2f2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f000 fcda 	bl	800b50e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ab5a:	7bbb      	ldrb	r3, [r7, #14]
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f7ff fde2 	bl	800a728 <USBD_CoreFindEP>
 800ab64:	4603      	mov	r3, r0
 800ab66:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab68:	7b7b      	ldrb	r3, [r7, #13]
 800ab6a:	2bff      	cmp	r3, #255	; 0xff
 800ab6c:	d01f      	beq.n	800abae <USBD_StdEPReq+0x1c6>
 800ab6e:	7b7b      	ldrb	r3, [r7, #13]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d11c      	bne.n	800abae <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ab74:	7b7a      	ldrb	r2, [r7, #13]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ab7c:	7b7a      	ldrb	r2, [r7, #13]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	32ae      	adds	r2, #174	; 0xae
 800ab82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab86:	689b      	ldr	r3, [r3, #8]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d010      	beq.n	800abae <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ab8c:	7b7a      	ldrb	r2, [r7, #13]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	32ae      	adds	r2, #174	; 0xae
 800ab92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab96:	689b      	ldr	r3, [r3, #8]
 800ab98:	6839      	ldr	r1, [r7, #0]
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	4798      	blx	r3
 800ab9e:	4603      	mov	r3, r0
 800aba0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800aba2:	e004      	b.n	800abae <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800aba4:	6839      	ldr	r1, [r7, #0]
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f000 fc03 	bl	800b3b2 <USBD_CtlError>
              break;
 800abac:	e000      	b.n	800abb0 <USBD_StdEPReq+0x1c8>
              break;
 800abae:	bf00      	nop
          }
          break;
 800abb0:	e0ab      	b.n	800ad0a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abb8:	b2db      	uxtb	r3, r3
 800abba:	2b02      	cmp	r3, #2
 800abbc:	d002      	beq.n	800abc4 <USBD_StdEPReq+0x1dc>
 800abbe:	2b03      	cmp	r3, #3
 800abc0:	d032      	beq.n	800ac28 <USBD_StdEPReq+0x240>
 800abc2:	e097      	b.n	800acf4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800abc4:	7bbb      	ldrb	r3, [r7, #14]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d007      	beq.n	800abda <USBD_StdEPReq+0x1f2>
 800abca:	7bbb      	ldrb	r3, [r7, #14]
 800abcc:	2b80      	cmp	r3, #128	; 0x80
 800abce:	d004      	beq.n	800abda <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800abd0:	6839      	ldr	r1, [r7, #0]
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f000 fbed 	bl	800b3b2 <USBD_CtlError>
                break;
 800abd8:	e091      	b.n	800acfe <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	da0b      	bge.n	800abfa <USBD_StdEPReq+0x212>
 800abe2:	7bbb      	ldrb	r3, [r7, #14]
 800abe4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800abe8:	4613      	mov	r3, r2
 800abea:	009b      	lsls	r3, r3, #2
 800abec:	4413      	add	r3, r2
 800abee:	009b      	lsls	r3, r3, #2
 800abf0:	3310      	adds	r3, #16
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	4413      	add	r3, r2
 800abf6:	3304      	adds	r3, #4
 800abf8:	e00b      	b.n	800ac12 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800abfa:	7bbb      	ldrb	r3, [r7, #14]
 800abfc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac00:	4613      	mov	r3, r2
 800ac02:	009b      	lsls	r3, r3, #2
 800ac04:	4413      	add	r3, r2
 800ac06:	009b      	lsls	r3, r3, #2
 800ac08:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ac0c:	687a      	ldr	r2, [r7, #4]
 800ac0e:	4413      	add	r3, r2
 800ac10:	3304      	adds	r3, #4
 800ac12:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	2200      	movs	r2, #0
 800ac18:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	2202      	movs	r2, #2
 800ac1e:	4619      	mov	r1, r3
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f000 fc37 	bl	800b494 <USBD_CtlSendData>
              break;
 800ac26:	e06a      	b.n	800acfe <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ac28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	da11      	bge.n	800ac54 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ac30:	7bbb      	ldrb	r3, [r7, #14]
 800ac32:	f003 020f 	and.w	r2, r3, #15
 800ac36:	6879      	ldr	r1, [r7, #4]
 800ac38:	4613      	mov	r3, r2
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	4413      	add	r3, r2
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	440b      	add	r3, r1
 800ac42:	3324      	adds	r3, #36	; 0x24
 800ac44:	881b      	ldrh	r3, [r3, #0]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d117      	bne.n	800ac7a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ac4a:	6839      	ldr	r1, [r7, #0]
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f000 fbb0 	bl	800b3b2 <USBD_CtlError>
                  break;
 800ac52:	e054      	b.n	800acfe <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ac54:	7bbb      	ldrb	r3, [r7, #14]
 800ac56:	f003 020f 	and.w	r2, r3, #15
 800ac5a:	6879      	ldr	r1, [r7, #4]
 800ac5c:	4613      	mov	r3, r2
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	4413      	add	r3, r2
 800ac62:	009b      	lsls	r3, r3, #2
 800ac64:	440b      	add	r3, r1
 800ac66:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ac6a:	881b      	ldrh	r3, [r3, #0]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d104      	bne.n	800ac7a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ac70:	6839      	ldr	r1, [r7, #0]
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 fb9d 	bl	800b3b2 <USBD_CtlError>
                  break;
 800ac78:	e041      	b.n	800acfe <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	da0b      	bge.n	800ac9a <USBD_StdEPReq+0x2b2>
 800ac82:	7bbb      	ldrb	r3, [r7, #14]
 800ac84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac88:	4613      	mov	r3, r2
 800ac8a:	009b      	lsls	r3, r3, #2
 800ac8c:	4413      	add	r3, r2
 800ac8e:	009b      	lsls	r3, r3, #2
 800ac90:	3310      	adds	r3, #16
 800ac92:	687a      	ldr	r2, [r7, #4]
 800ac94:	4413      	add	r3, r2
 800ac96:	3304      	adds	r3, #4
 800ac98:	e00b      	b.n	800acb2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ac9a:	7bbb      	ldrb	r3, [r7, #14]
 800ac9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aca0:	4613      	mov	r3, r2
 800aca2:	009b      	lsls	r3, r3, #2
 800aca4:	4413      	add	r3, r2
 800aca6:	009b      	lsls	r3, r3, #2
 800aca8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	4413      	add	r3, r2
 800acb0:	3304      	adds	r3, #4
 800acb2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800acb4:	7bbb      	ldrb	r3, [r7, #14]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d002      	beq.n	800acc0 <USBD_StdEPReq+0x2d8>
 800acba:	7bbb      	ldrb	r3, [r7, #14]
 800acbc:	2b80      	cmp	r3, #128	; 0x80
 800acbe:	d103      	bne.n	800acc8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	2200      	movs	r2, #0
 800acc4:	601a      	str	r2, [r3, #0]
 800acc6:	e00e      	b.n	800ace6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800acc8:	7bbb      	ldrb	r3, [r7, #14]
 800acca:	4619      	mov	r1, r3
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f003 fb2f 	bl	800e330 <USBD_LL_IsStallEP>
 800acd2:	4603      	mov	r3, r0
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d003      	beq.n	800ace0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	2201      	movs	r2, #1
 800acdc:	601a      	str	r2, [r3, #0]
 800acde:	e002      	b.n	800ace6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	2200      	movs	r2, #0
 800ace4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	2202      	movs	r2, #2
 800acea:	4619      	mov	r1, r3
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f000 fbd1 	bl	800b494 <USBD_CtlSendData>
              break;
 800acf2:	e004      	b.n	800acfe <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800acf4:	6839      	ldr	r1, [r7, #0]
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 fb5b 	bl	800b3b2 <USBD_CtlError>
              break;
 800acfc:	bf00      	nop
          }
          break;
 800acfe:	e004      	b.n	800ad0a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ad00:	6839      	ldr	r1, [r7, #0]
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 fb55 	bl	800b3b2 <USBD_CtlError>
          break;
 800ad08:	bf00      	nop
      }
      break;
 800ad0a:	e005      	b.n	800ad18 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ad0c:	6839      	ldr	r1, [r7, #0]
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f000 fb4f 	bl	800b3b2 <USBD_CtlError>
      break;
 800ad14:	e000      	b.n	800ad18 <USBD_StdEPReq+0x330>
      break;
 800ad16:	bf00      	nop
  }

  return ret;
 800ad18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3710      	adds	r7, #16
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
	...

0800ad24 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b084      	sub	sp, #16
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ad32:	2300      	movs	r3, #0
 800ad34:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ad36:	2300      	movs	r3, #0
 800ad38:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	885b      	ldrh	r3, [r3, #2]
 800ad3e:	0a1b      	lsrs	r3, r3, #8
 800ad40:	b29b      	uxth	r3, r3
 800ad42:	3b01      	subs	r3, #1
 800ad44:	2b06      	cmp	r3, #6
 800ad46:	f200 8128 	bhi.w	800af9a <USBD_GetDescriptor+0x276>
 800ad4a:	a201      	add	r2, pc, #4	; (adr r2, 800ad50 <USBD_GetDescriptor+0x2c>)
 800ad4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad50:	0800ad6d 	.word	0x0800ad6d
 800ad54:	0800ad85 	.word	0x0800ad85
 800ad58:	0800adc5 	.word	0x0800adc5
 800ad5c:	0800af9b 	.word	0x0800af9b
 800ad60:	0800af9b 	.word	0x0800af9b
 800ad64:	0800af3b 	.word	0x0800af3b
 800ad68:	0800af67 	.word	0x0800af67
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	7c12      	ldrb	r2, [r2, #16]
 800ad78:	f107 0108 	add.w	r1, r7, #8
 800ad7c:	4610      	mov	r0, r2
 800ad7e:	4798      	blx	r3
 800ad80:	60f8      	str	r0, [r7, #12]
      break;
 800ad82:	e112      	b.n	800afaa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	7c1b      	ldrb	r3, [r3, #16]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d10d      	bne.n	800ada8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad94:	f107 0208 	add.w	r2, r7, #8
 800ad98:	4610      	mov	r0, r2
 800ad9a:	4798      	blx	r3
 800ad9c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	3301      	adds	r3, #1
 800ada2:	2202      	movs	r2, #2
 800ada4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ada6:	e100      	b.n	800afaa <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb0:	f107 0208 	add.w	r2, r7, #8
 800adb4:	4610      	mov	r0, r2
 800adb6:	4798      	blx	r3
 800adb8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	3301      	adds	r3, #1
 800adbe:	2202      	movs	r2, #2
 800adc0:	701a      	strb	r2, [r3, #0]
      break;
 800adc2:	e0f2      	b.n	800afaa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	885b      	ldrh	r3, [r3, #2]
 800adc8:	b2db      	uxtb	r3, r3
 800adca:	2b05      	cmp	r3, #5
 800adcc:	f200 80ac 	bhi.w	800af28 <USBD_GetDescriptor+0x204>
 800add0:	a201      	add	r2, pc, #4	; (adr r2, 800add8 <USBD_GetDescriptor+0xb4>)
 800add2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add6:	bf00      	nop
 800add8:	0800adf1 	.word	0x0800adf1
 800addc:	0800ae25 	.word	0x0800ae25
 800ade0:	0800ae59 	.word	0x0800ae59
 800ade4:	0800ae8d 	.word	0x0800ae8d
 800ade8:	0800aec1 	.word	0x0800aec1
 800adec:	0800aef5 	.word	0x0800aef5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d00b      	beq.n	800ae14 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	687a      	ldr	r2, [r7, #4]
 800ae06:	7c12      	ldrb	r2, [r2, #16]
 800ae08:	f107 0108 	add.w	r1, r7, #8
 800ae0c:	4610      	mov	r0, r2
 800ae0e:	4798      	blx	r3
 800ae10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae12:	e091      	b.n	800af38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae14:	6839      	ldr	r1, [r7, #0]
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f000 facb 	bl	800b3b2 <USBD_CtlError>
            err++;
 800ae1c:	7afb      	ldrb	r3, [r7, #11]
 800ae1e:	3301      	adds	r3, #1
 800ae20:	72fb      	strb	r3, [r7, #11]
          break;
 800ae22:	e089      	b.n	800af38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d00b      	beq.n	800ae48 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae36:	689b      	ldr	r3, [r3, #8]
 800ae38:	687a      	ldr	r2, [r7, #4]
 800ae3a:	7c12      	ldrb	r2, [r2, #16]
 800ae3c:	f107 0108 	add.w	r1, r7, #8
 800ae40:	4610      	mov	r0, r2
 800ae42:	4798      	blx	r3
 800ae44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae46:	e077      	b.n	800af38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae48:	6839      	ldr	r1, [r7, #0]
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 fab1 	bl	800b3b2 <USBD_CtlError>
            err++;
 800ae50:	7afb      	ldrb	r3, [r7, #11]
 800ae52:	3301      	adds	r3, #1
 800ae54:	72fb      	strb	r3, [r7, #11]
          break;
 800ae56:	e06f      	b.n	800af38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae5e:	68db      	ldr	r3, [r3, #12]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d00b      	beq.n	800ae7c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae6a:	68db      	ldr	r3, [r3, #12]
 800ae6c:	687a      	ldr	r2, [r7, #4]
 800ae6e:	7c12      	ldrb	r2, [r2, #16]
 800ae70:	f107 0108 	add.w	r1, r7, #8
 800ae74:	4610      	mov	r0, r2
 800ae76:	4798      	blx	r3
 800ae78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae7a:	e05d      	b.n	800af38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae7c:	6839      	ldr	r1, [r7, #0]
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 fa97 	bl	800b3b2 <USBD_CtlError>
            err++;
 800ae84:	7afb      	ldrb	r3, [r7, #11]
 800ae86:	3301      	adds	r3, #1
 800ae88:	72fb      	strb	r3, [r7, #11]
          break;
 800ae8a:	e055      	b.n	800af38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae92:	691b      	ldr	r3, [r3, #16]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d00b      	beq.n	800aeb0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae9e:	691b      	ldr	r3, [r3, #16]
 800aea0:	687a      	ldr	r2, [r7, #4]
 800aea2:	7c12      	ldrb	r2, [r2, #16]
 800aea4:	f107 0108 	add.w	r1, r7, #8
 800aea8:	4610      	mov	r0, r2
 800aeaa:	4798      	blx	r3
 800aeac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aeae:	e043      	b.n	800af38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aeb0:	6839      	ldr	r1, [r7, #0]
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 fa7d 	bl	800b3b2 <USBD_CtlError>
            err++;
 800aeb8:	7afb      	ldrb	r3, [r7, #11]
 800aeba:	3301      	adds	r3, #1
 800aebc:	72fb      	strb	r3, [r7, #11]
          break;
 800aebe:	e03b      	b.n	800af38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aec6:	695b      	ldr	r3, [r3, #20]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d00b      	beq.n	800aee4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aed2:	695b      	ldr	r3, [r3, #20]
 800aed4:	687a      	ldr	r2, [r7, #4]
 800aed6:	7c12      	ldrb	r2, [r2, #16]
 800aed8:	f107 0108 	add.w	r1, r7, #8
 800aedc:	4610      	mov	r0, r2
 800aede:	4798      	blx	r3
 800aee0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aee2:	e029      	b.n	800af38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aee4:	6839      	ldr	r1, [r7, #0]
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 fa63 	bl	800b3b2 <USBD_CtlError>
            err++;
 800aeec:	7afb      	ldrb	r3, [r7, #11]
 800aeee:	3301      	adds	r3, #1
 800aef0:	72fb      	strb	r3, [r7, #11]
          break;
 800aef2:	e021      	b.n	800af38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aefa:	699b      	ldr	r3, [r3, #24]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d00b      	beq.n	800af18 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af06:	699b      	ldr	r3, [r3, #24]
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	7c12      	ldrb	r2, [r2, #16]
 800af0c:	f107 0108 	add.w	r1, r7, #8
 800af10:	4610      	mov	r0, r2
 800af12:	4798      	blx	r3
 800af14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af16:	e00f      	b.n	800af38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af18:	6839      	ldr	r1, [r7, #0]
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 fa49 	bl	800b3b2 <USBD_CtlError>
            err++;
 800af20:	7afb      	ldrb	r3, [r7, #11]
 800af22:	3301      	adds	r3, #1
 800af24:	72fb      	strb	r3, [r7, #11]
          break;
 800af26:	e007      	b.n	800af38 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800af28:	6839      	ldr	r1, [r7, #0]
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f000 fa41 	bl	800b3b2 <USBD_CtlError>
          err++;
 800af30:	7afb      	ldrb	r3, [r7, #11]
 800af32:	3301      	adds	r3, #1
 800af34:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800af36:	bf00      	nop
      }
      break;
 800af38:	e037      	b.n	800afaa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	7c1b      	ldrb	r3, [r3, #16]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d109      	bne.n	800af56 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af4a:	f107 0208 	add.w	r2, r7, #8
 800af4e:	4610      	mov	r0, r2
 800af50:	4798      	blx	r3
 800af52:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af54:	e029      	b.n	800afaa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800af56:	6839      	ldr	r1, [r7, #0]
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f000 fa2a 	bl	800b3b2 <USBD_CtlError>
        err++;
 800af5e:	7afb      	ldrb	r3, [r7, #11]
 800af60:	3301      	adds	r3, #1
 800af62:	72fb      	strb	r3, [r7, #11]
      break;
 800af64:	e021      	b.n	800afaa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	7c1b      	ldrb	r3, [r3, #16]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d10d      	bne.n	800af8a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af76:	f107 0208 	add.w	r2, r7, #8
 800af7a:	4610      	mov	r0, r2
 800af7c:	4798      	blx	r3
 800af7e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	3301      	adds	r3, #1
 800af84:	2207      	movs	r2, #7
 800af86:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af88:	e00f      	b.n	800afaa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800af8a:	6839      	ldr	r1, [r7, #0]
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f000 fa10 	bl	800b3b2 <USBD_CtlError>
        err++;
 800af92:	7afb      	ldrb	r3, [r7, #11]
 800af94:	3301      	adds	r3, #1
 800af96:	72fb      	strb	r3, [r7, #11]
      break;
 800af98:	e007      	b.n	800afaa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800af9a:	6839      	ldr	r1, [r7, #0]
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f000 fa08 	bl	800b3b2 <USBD_CtlError>
      err++;
 800afa2:	7afb      	ldrb	r3, [r7, #11]
 800afa4:	3301      	adds	r3, #1
 800afa6:	72fb      	strb	r3, [r7, #11]
      break;
 800afa8:	bf00      	nop
  }

  if (err != 0U)
 800afaa:	7afb      	ldrb	r3, [r7, #11]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d11e      	bne.n	800afee <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	88db      	ldrh	r3, [r3, #6]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d016      	beq.n	800afe6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800afb8:	893b      	ldrh	r3, [r7, #8]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d00e      	beq.n	800afdc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	88da      	ldrh	r2, [r3, #6]
 800afc2:	893b      	ldrh	r3, [r7, #8]
 800afc4:	4293      	cmp	r3, r2
 800afc6:	bf28      	it	cs
 800afc8:	4613      	movcs	r3, r2
 800afca:	b29b      	uxth	r3, r3
 800afcc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800afce:	893b      	ldrh	r3, [r7, #8]
 800afd0:	461a      	mov	r2, r3
 800afd2:	68f9      	ldr	r1, [r7, #12]
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f000 fa5d 	bl	800b494 <USBD_CtlSendData>
 800afda:	e009      	b.n	800aff0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800afdc:	6839      	ldr	r1, [r7, #0]
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f000 f9e7 	bl	800b3b2 <USBD_CtlError>
 800afe4:	e004      	b.n	800aff0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f000 fa91 	bl	800b50e <USBD_CtlSendStatus>
 800afec:	e000      	b.n	800aff0 <USBD_GetDescriptor+0x2cc>
    return;
 800afee:	bf00      	nop
  }
}
 800aff0:	3710      	adds	r7, #16
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop

0800aff8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b084      	sub	sp, #16
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	889b      	ldrh	r3, [r3, #4]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d131      	bne.n	800b06e <USBD_SetAddress+0x76>
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	88db      	ldrh	r3, [r3, #6]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d12d      	bne.n	800b06e <USBD_SetAddress+0x76>
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	885b      	ldrh	r3, [r3, #2]
 800b016:	2b7f      	cmp	r3, #127	; 0x7f
 800b018:	d829      	bhi.n	800b06e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	885b      	ldrh	r3, [r3, #2]
 800b01e:	b2db      	uxtb	r3, r3
 800b020:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b024:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	2b03      	cmp	r3, #3
 800b030:	d104      	bne.n	800b03c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b032:	6839      	ldr	r1, [r7, #0]
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f000 f9bc 	bl	800b3b2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b03a:	e01d      	b.n	800b078 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	7bfa      	ldrb	r2, [r7, #15]
 800b040:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b044:	7bfb      	ldrb	r3, [r7, #15]
 800b046:	4619      	mov	r1, r3
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f003 f99d 	bl	800e388 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 fa5d 	bl	800b50e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b054:	7bfb      	ldrb	r3, [r7, #15]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d004      	beq.n	800b064 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2202      	movs	r2, #2
 800b05e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b062:	e009      	b.n	800b078 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2201      	movs	r2, #1
 800b068:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b06c:	e004      	b.n	800b078 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b06e:	6839      	ldr	r1, [r7, #0]
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 f99e 	bl	800b3b2 <USBD_CtlError>
  }
}
 800b076:	bf00      	nop
 800b078:	bf00      	nop
 800b07a:	3710      	adds	r7, #16
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b08a:	2300      	movs	r3, #0
 800b08c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	885b      	ldrh	r3, [r3, #2]
 800b092:	b2da      	uxtb	r2, r3
 800b094:	4b4e      	ldr	r3, [pc, #312]	; (800b1d0 <USBD_SetConfig+0x150>)
 800b096:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b098:	4b4d      	ldr	r3, [pc, #308]	; (800b1d0 <USBD_SetConfig+0x150>)
 800b09a:	781b      	ldrb	r3, [r3, #0]
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d905      	bls.n	800b0ac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b0a0:	6839      	ldr	r1, [r7, #0]
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f000 f985 	bl	800b3b2 <USBD_CtlError>
    return USBD_FAIL;
 800b0a8:	2303      	movs	r3, #3
 800b0aa:	e08c      	b.n	800b1c6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0b2:	b2db      	uxtb	r3, r3
 800b0b4:	2b02      	cmp	r3, #2
 800b0b6:	d002      	beq.n	800b0be <USBD_SetConfig+0x3e>
 800b0b8:	2b03      	cmp	r3, #3
 800b0ba:	d029      	beq.n	800b110 <USBD_SetConfig+0x90>
 800b0bc:	e075      	b.n	800b1aa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b0be:	4b44      	ldr	r3, [pc, #272]	; (800b1d0 <USBD_SetConfig+0x150>)
 800b0c0:	781b      	ldrb	r3, [r3, #0]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d020      	beq.n	800b108 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b0c6:	4b42      	ldr	r3, [pc, #264]	; (800b1d0 <USBD_SetConfig+0x150>)
 800b0c8:	781b      	ldrb	r3, [r3, #0]
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b0d0:	4b3f      	ldr	r3, [pc, #252]	; (800b1d0 <USBD_SetConfig+0x150>)
 800b0d2:	781b      	ldrb	r3, [r3, #0]
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f7fe ffe7 	bl	800a0aa <USBD_SetClassConfig>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b0e0:	7bfb      	ldrb	r3, [r7, #15]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d008      	beq.n	800b0f8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b0e6:	6839      	ldr	r1, [r7, #0]
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f000 f962 	bl	800b3b2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2202      	movs	r2, #2
 800b0f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b0f6:	e065      	b.n	800b1c4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 fa08 	bl	800b50e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2203      	movs	r2, #3
 800b102:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b106:	e05d      	b.n	800b1c4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f000 fa00 	bl	800b50e <USBD_CtlSendStatus>
      break;
 800b10e:	e059      	b.n	800b1c4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b110:	4b2f      	ldr	r3, [pc, #188]	; (800b1d0 <USBD_SetConfig+0x150>)
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d112      	bne.n	800b13e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2202      	movs	r2, #2
 800b11c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b120:	4b2b      	ldr	r3, [pc, #172]	; (800b1d0 <USBD_SetConfig+0x150>)
 800b122:	781b      	ldrb	r3, [r3, #0]
 800b124:	461a      	mov	r2, r3
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b12a:	4b29      	ldr	r3, [pc, #164]	; (800b1d0 <USBD_SetConfig+0x150>)
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	4619      	mov	r1, r3
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f7fe ffd6 	bl	800a0e2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f000 f9e9 	bl	800b50e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b13c:	e042      	b.n	800b1c4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b13e:	4b24      	ldr	r3, [pc, #144]	; (800b1d0 <USBD_SetConfig+0x150>)
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	461a      	mov	r2, r3
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	685b      	ldr	r3, [r3, #4]
 800b148:	429a      	cmp	r2, r3
 800b14a:	d02a      	beq.n	800b1a2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	b2db      	uxtb	r3, r3
 800b152:	4619      	mov	r1, r3
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f7fe ffc4 	bl	800a0e2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b15a:	4b1d      	ldr	r3, [pc, #116]	; (800b1d0 <USBD_SetConfig+0x150>)
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	461a      	mov	r2, r3
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b164:	4b1a      	ldr	r3, [pc, #104]	; (800b1d0 <USBD_SetConfig+0x150>)
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	4619      	mov	r1, r3
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f7fe ff9d 	bl	800a0aa <USBD_SetClassConfig>
 800b170:	4603      	mov	r3, r0
 800b172:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b174:	7bfb      	ldrb	r3, [r7, #15]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d00f      	beq.n	800b19a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b17a:	6839      	ldr	r1, [r7, #0]
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f000 f918 	bl	800b3b2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	685b      	ldr	r3, [r3, #4]
 800b186:	b2db      	uxtb	r3, r3
 800b188:	4619      	mov	r1, r3
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f7fe ffa9 	bl	800a0e2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2202      	movs	r2, #2
 800b194:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b198:	e014      	b.n	800b1c4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f000 f9b7 	bl	800b50e <USBD_CtlSendStatus>
      break;
 800b1a0:	e010      	b.n	800b1c4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f000 f9b3 	bl	800b50e <USBD_CtlSendStatus>
      break;
 800b1a8:	e00c      	b.n	800b1c4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b1aa:	6839      	ldr	r1, [r7, #0]
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f000 f900 	bl	800b3b2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b1b2:	4b07      	ldr	r3, [pc, #28]	; (800b1d0 <USBD_SetConfig+0x150>)
 800b1b4:	781b      	ldrb	r3, [r3, #0]
 800b1b6:	4619      	mov	r1, r3
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f7fe ff92 	bl	800a0e2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b1be:	2303      	movs	r3, #3
 800b1c0:	73fb      	strb	r3, [r7, #15]
      break;
 800b1c2:	bf00      	nop
  }

  return ret;
 800b1c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3710      	adds	r7, #16
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
 800b1ce:	bf00      	nop
 800b1d0:	200008a0 	.word	0x200008a0

0800b1d4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b082      	sub	sp, #8
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	88db      	ldrh	r3, [r3, #6]
 800b1e2:	2b01      	cmp	r3, #1
 800b1e4:	d004      	beq.n	800b1f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b1e6:	6839      	ldr	r1, [r7, #0]
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f000 f8e2 	bl	800b3b2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b1ee:	e023      	b.n	800b238 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1f6:	b2db      	uxtb	r3, r3
 800b1f8:	2b02      	cmp	r3, #2
 800b1fa:	dc02      	bgt.n	800b202 <USBD_GetConfig+0x2e>
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	dc03      	bgt.n	800b208 <USBD_GetConfig+0x34>
 800b200:	e015      	b.n	800b22e <USBD_GetConfig+0x5a>
 800b202:	2b03      	cmp	r3, #3
 800b204:	d00b      	beq.n	800b21e <USBD_GetConfig+0x4a>
 800b206:	e012      	b.n	800b22e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2200      	movs	r2, #0
 800b20c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	3308      	adds	r3, #8
 800b212:	2201      	movs	r2, #1
 800b214:	4619      	mov	r1, r3
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f000 f93c 	bl	800b494 <USBD_CtlSendData>
        break;
 800b21c:	e00c      	b.n	800b238 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	3304      	adds	r3, #4
 800b222:	2201      	movs	r2, #1
 800b224:	4619      	mov	r1, r3
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 f934 	bl	800b494 <USBD_CtlSendData>
        break;
 800b22c:	e004      	b.n	800b238 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b22e:	6839      	ldr	r1, [r7, #0]
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f000 f8be 	bl	800b3b2 <USBD_CtlError>
        break;
 800b236:	bf00      	nop
}
 800b238:	bf00      	nop
 800b23a:	3708      	adds	r7, #8
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}

0800b240 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b082      	sub	sp, #8
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b250:	b2db      	uxtb	r3, r3
 800b252:	3b01      	subs	r3, #1
 800b254:	2b02      	cmp	r3, #2
 800b256:	d81e      	bhi.n	800b296 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	88db      	ldrh	r3, [r3, #6]
 800b25c:	2b02      	cmp	r3, #2
 800b25e:	d004      	beq.n	800b26a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b260:	6839      	ldr	r1, [r7, #0]
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 f8a5 	bl	800b3b2 <USBD_CtlError>
        break;
 800b268:	e01a      	b.n	800b2a0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2201      	movs	r2, #1
 800b26e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b276:	2b00      	cmp	r3, #0
 800b278:	d005      	beq.n	800b286 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	68db      	ldr	r3, [r3, #12]
 800b27e:	f043 0202 	orr.w	r2, r3, #2
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	330c      	adds	r3, #12
 800b28a:	2202      	movs	r2, #2
 800b28c:	4619      	mov	r1, r3
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f000 f900 	bl	800b494 <USBD_CtlSendData>
      break;
 800b294:	e004      	b.n	800b2a0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b296:	6839      	ldr	r1, [r7, #0]
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f000 f88a 	bl	800b3b2 <USBD_CtlError>
      break;
 800b29e:	bf00      	nop
  }
}
 800b2a0:	bf00      	nop
 800b2a2:	3708      	adds	r7, #8
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}

0800b2a8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b082      	sub	sp, #8
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	885b      	ldrh	r3, [r3, #2]
 800b2b6:	2b01      	cmp	r3, #1
 800b2b8:	d107      	bne.n	800b2ca <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2201      	movs	r2, #1
 800b2be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f000 f923 	bl	800b50e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b2c8:	e013      	b.n	800b2f2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	885b      	ldrh	r3, [r3, #2]
 800b2ce:	2b02      	cmp	r3, #2
 800b2d0:	d10b      	bne.n	800b2ea <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	889b      	ldrh	r3, [r3, #4]
 800b2d6:	0a1b      	lsrs	r3, r3, #8
 800b2d8:	b29b      	uxth	r3, r3
 800b2da:	b2da      	uxtb	r2, r3
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f000 f913 	bl	800b50e <USBD_CtlSendStatus>
}
 800b2e8:	e003      	b.n	800b2f2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b2ea:	6839      	ldr	r1, [r7, #0]
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f000 f860 	bl	800b3b2 <USBD_CtlError>
}
 800b2f2:	bf00      	nop
 800b2f4:	3708      	adds	r7, #8
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}

0800b2fa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2fa:	b580      	push	{r7, lr}
 800b2fc:	b082      	sub	sp, #8
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	6078      	str	r0, [r7, #4]
 800b302:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b30a:	b2db      	uxtb	r3, r3
 800b30c:	3b01      	subs	r3, #1
 800b30e:	2b02      	cmp	r3, #2
 800b310:	d80b      	bhi.n	800b32a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	885b      	ldrh	r3, [r3, #2]
 800b316:	2b01      	cmp	r3, #1
 800b318:	d10c      	bne.n	800b334 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2200      	movs	r2, #0
 800b31e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f000 f8f3 	bl	800b50e <USBD_CtlSendStatus>
      }
      break;
 800b328:	e004      	b.n	800b334 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b32a:	6839      	ldr	r1, [r7, #0]
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f000 f840 	bl	800b3b2 <USBD_CtlError>
      break;
 800b332:	e000      	b.n	800b336 <USBD_ClrFeature+0x3c>
      break;
 800b334:	bf00      	nop
  }
}
 800b336:	bf00      	nop
 800b338:	3708      	adds	r7, #8
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}

0800b33e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b33e:	b580      	push	{r7, lr}
 800b340:	b084      	sub	sp, #16
 800b342:	af00      	add	r7, sp, #0
 800b344:	6078      	str	r0, [r7, #4]
 800b346:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	781a      	ldrb	r2, [r3, #0]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	3301      	adds	r3, #1
 800b358:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	781a      	ldrb	r2, [r3, #0]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	3301      	adds	r3, #1
 800b366:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b368:	68f8      	ldr	r0, [r7, #12]
 800b36a:	f7ff fa41 	bl	800a7f0 <SWAPBYTE>
 800b36e:	4603      	mov	r3, r0
 800b370:	461a      	mov	r2, r3
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	3301      	adds	r3, #1
 800b37a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	3301      	adds	r3, #1
 800b380:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b382:	68f8      	ldr	r0, [r7, #12]
 800b384:	f7ff fa34 	bl	800a7f0 <SWAPBYTE>
 800b388:	4603      	mov	r3, r0
 800b38a:	461a      	mov	r2, r3
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	3301      	adds	r3, #1
 800b394:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	3301      	adds	r3, #1
 800b39a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b39c:	68f8      	ldr	r0, [r7, #12]
 800b39e:	f7ff fa27 	bl	800a7f0 <SWAPBYTE>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	461a      	mov	r2, r3
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	80da      	strh	r2, [r3, #6]
}
 800b3aa:	bf00      	nop
 800b3ac:	3710      	adds	r7, #16
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}

0800b3b2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3b2:	b580      	push	{r7, lr}
 800b3b4:	b082      	sub	sp, #8
 800b3b6:	af00      	add	r7, sp, #0
 800b3b8:	6078      	str	r0, [r7, #4]
 800b3ba:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b3bc:	2180      	movs	r1, #128	; 0x80
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f002 ff78 	bl	800e2b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b3c4:	2100      	movs	r1, #0
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f002 ff74 	bl	800e2b4 <USBD_LL_StallEP>
}
 800b3cc:	bf00      	nop
 800b3ce:	3708      	adds	r7, #8
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b086      	sub	sp, #24
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	60f8      	str	r0, [r7, #12]
 800b3dc:	60b9      	str	r1, [r7, #8]
 800b3de:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d036      	beq.n	800b458 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b3ee:	6938      	ldr	r0, [r7, #16]
 800b3f0:	f000 f836 	bl	800b460 <USBD_GetLen>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	3301      	adds	r3, #1
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	005b      	lsls	r3, r3, #1
 800b3fc:	b29a      	uxth	r2, r3
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b402:	7dfb      	ldrb	r3, [r7, #23]
 800b404:	68ba      	ldr	r2, [r7, #8]
 800b406:	4413      	add	r3, r2
 800b408:	687a      	ldr	r2, [r7, #4]
 800b40a:	7812      	ldrb	r2, [r2, #0]
 800b40c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b40e:	7dfb      	ldrb	r3, [r7, #23]
 800b410:	3301      	adds	r3, #1
 800b412:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b414:	7dfb      	ldrb	r3, [r7, #23]
 800b416:	68ba      	ldr	r2, [r7, #8]
 800b418:	4413      	add	r3, r2
 800b41a:	2203      	movs	r2, #3
 800b41c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b41e:	7dfb      	ldrb	r3, [r7, #23]
 800b420:	3301      	adds	r3, #1
 800b422:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b424:	e013      	b.n	800b44e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b426:	7dfb      	ldrb	r3, [r7, #23]
 800b428:	68ba      	ldr	r2, [r7, #8]
 800b42a:	4413      	add	r3, r2
 800b42c:	693a      	ldr	r2, [r7, #16]
 800b42e:	7812      	ldrb	r2, [r2, #0]
 800b430:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	3301      	adds	r3, #1
 800b436:	613b      	str	r3, [r7, #16]
    idx++;
 800b438:	7dfb      	ldrb	r3, [r7, #23]
 800b43a:	3301      	adds	r3, #1
 800b43c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b43e:	7dfb      	ldrb	r3, [r7, #23]
 800b440:	68ba      	ldr	r2, [r7, #8]
 800b442:	4413      	add	r3, r2
 800b444:	2200      	movs	r2, #0
 800b446:	701a      	strb	r2, [r3, #0]
    idx++;
 800b448:	7dfb      	ldrb	r3, [r7, #23]
 800b44a:	3301      	adds	r3, #1
 800b44c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	781b      	ldrb	r3, [r3, #0]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d1e7      	bne.n	800b426 <USBD_GetString+0x52>
 800b456:	e000      	b.n	800b45a <USBD_GetString+0x86>
    return;
 800b458:	bf00      	nop
  }
}
 800b45a:	3718      	adds	r7, #24
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}

0800b460 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b460:	b480      	push	{r7}
 800b462:	b085      	sub	sp, #20
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b468:	2300      	movs	r3, #0
 800b46a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b470:	e005      	b.n	800b47e <USBD_GetLen+0x1e>
  {
    len++;
 800b472:	7bfb      	ldrb	r3, [r7, #15]
 800b474:	3301      	adds	r3, #1
 800b476:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	3301      	adds	r3, #1
 800b47c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	781b      	ldrb	r3, [r3, #0]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d1f5      	bne.n	800b472 <USBD_GetLen+0x12>
  }

  return len;
 800b486:	7bfb      	ldrb	r3, [r7, #15]
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3714      	adds	r7, #20
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr

0800b494 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b084      	sub	sp, #16
 800b498:	af00      	add	r7, sp, #0
 800b49a:	60f8      	str	r0, [r7, #12]
 800b49c:	60b9      	str	r1, [r7, #8]
 800b49e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2202      	movs	r2, #2
 800b4a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	687a      	ldr	r2, [r7, #4]
 800b4ac:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	687a      	ldr	r2, [r7, #4]
 800b4b2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	68ba      	ldr	r2, [r7, #8]
 800b4b8:	2100      	movs	r1, #0
 800b4ba:	68f8      	ldr	r0, [r7, #12]
 800b4bc:	f002 ff83 	bl	800e3c6 <USBD_LL_Transmit>

  return USBD_OK;
 800b4c0:	2300      	movs	r3, #0
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3710      	adds	r7, #16
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}

0800b4ca <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b4ca:	b580      	push	{r7, lr}
 800b4cc:	b084      	sub	sp, #16
 800b4ce:	af00      	add	r7, sp, #0
 800b4d0:	60f8      	str	r0, [r7, #12]
 800b4d2:	60b9      	str	r1, [r7, #8]
 800b4d4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	68ba      	ldr	r2, [r7, #8]
 800b4da:	2100      	movs	r1, #0
 800b4dc:	68f8      	ldr	r0, [r7, #12]
 800b4de:	f002 ff72 	bl	800e3c6 <USBD_LL_Transmit>

  return USBD_OK;
 800b4e2:	2300      	movs	r3, #0
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3710      	adds	r7, #16
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}

0800b4ec <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b084      	sub	sp, #16
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	60f8      	str	r0, [r7, #12]
 800b4f4:	60b9      	str	r1, [r7, #8]
 800b4f6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	68ba      	ldr	r2, [r7, #8]
 800b4fc:	2100      	movs	r1, #0
 800b4fe:	68f8      	ldr	r0, [r7, #12]
 800b500:	f002 ff82 	bl	800e408 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b504:	2300      	movs	r3, #0
}
 800b506:	4618      	mov	r0, r3
 800b508:	3710      	adds	r7, #16
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}

0800b50e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b50e:	b580      	push	{r7, lr}
 800b510:	b082      	sub	sp, #8
 800b512:	af00      	add	r7, sp, #0
 800b514:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2204      	movs	r2, #4
 800b51a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b51e:	2300      	movs	r3, #0
 800b520:	2200      	movs	r2, #0
 800b522:	2100      	movs	r1, #0
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f002 ff4e 	bl	800e3c6 <USBD_LL_Transmit>

  return USBD_OK;
 800b52a:	2300      	movs	r3, #0
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3708      	adds	r7, #8
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}

0800b534 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b082      	sub	sp, #8
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2205      	movs	r2, #5
 800b540:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b544:	2300      	movs	r3, #0
 800b546:	2200      	movs	r2, #0
 800b548:	2100      	movs	r1, #0
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f002 ff5c 	bl	800e408 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b550:	2300      	movs	r3, #0
}
 800b552:	4618      	mov	r0, r3
 800b554:	3708      	adds	r7, #8
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}
	...

0800b55c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b084      	sub	sp, #16
 800b560:	af00      	add	r7, sp, #0
 800b562:	4603      	mov	r3, r0
 800b564:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b566:	79fb      	ldrb	r3, [r7, #7]
 800b568:	4a08      	ldr	r2, [pc, #32]	; (800b58c <disk_status+0x30>)
 800b56a:	009b      	lsls	r3, r3, #2
 800b56c:	4413      	add	r3, r2
 800b56e:	685b      	ldr	r3, [r3, #4]
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	79fa      	ldrb	r2, [r7, #7]
 800b574:	4905      	ldr	r1, [pc, #20]	; (800b58c <disk_status+0x30>)
 800b576:	440a      	add	r2, r1
 800b578:	7a12      	ldrb	r2, [r2, #8]
 800b57a:	4610      	mov	r0, r2
 800b57c:	4798      	blx	r3
 800b57e:	4603      	mov	r3, r0
 800b580:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b582:	7bfb      	ldrb	r3, [r7, #15]
}
 800b584:	4618      	mov	r0, r3
 800b586:	3710      	adds	r7, #16
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}
 800b58c:	200008cc 	.word	0x200008cc

0800b590 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b084      	sub	sp, #16
 800b594:	af00      	add	r7, sp, #0
 800b596:	4603      	mov	r3, r0
 800b598:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b59a:	2300      	movs	r3, #0
 800b59c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b59e:	79fb      	ldrb	r3, [r7, #7]
 800b5a0:	4a0d      	ldr	r2, [pc, #52]	; (800b5d8 <disk_initialize+0x48>)
 800b5a2:	5cd3      	ldrb	r3, [r2, r3]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d111      	bne.n	800b5cc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b5a8:	79fb      	ldrb	r3, [r7, #7]
 800b5aa:	4a0b      	ldr	r2, [pc, #44]	; (800b5d8 <disk_initialize+0x48>)
 800b5ac:	2101      	movs	r1, #1
 800b5ae:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b5b0:	79fb      	ldrb	r3, [r7, #7]
 800b5b2:	4a09      	ldr	r2, [pc, #36]	; (800b5d8 <disk_initialize+0x48>)
 800b5b4:	009b      	lsls	r3, r3, #2
 800b5b6:	4413      	add	r3, r2
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	79fa      	ldrb	r2, [r7, #7]
 800b5be:	4906      	ldr	r1, [pc, #24]	; (800b5d8 <disk_initialize+0x48>)
 800b5c0:	440a      	add	r2, r1
 800b5c2:	7a12      	ldrb	r2, [r2, #8]
 800b5c4:	4610      	mov	r0, r2
 800b5c6:	4798      	blx	r3
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b5cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3710      	adds	r7, #16
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}
 800b5d6:	bf00      	nop
 800b5d8:	200008cc 	.word	0x200008cc

0800b5dc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b5dc:	b590      	push	{r4, r7, lr}
 800b5de:	b087      	sub	sp, #28
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	60b9      	str	r1, [r7, #8]
 800b5e4:	607a      	str	r2, [r7, #4]
 800b5e6:	603b      	str	r3, [r7, #0]
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b5ec:	7bfb      	ldrb	r3, [r7, #15]
 800b5ee:	4a0a      	ldr	r2, [pc, #40]	; (800b618 <disk_read+0x3c>)
 800b5f0:	009b      	lsls	r3, r3, #2
 800b5f2:	4413      	add	r3, r2
 800b5f4:	685b      	ldr	r3, [r3, #4]
 800b5f6:	689c      	ldr	r4, [r3, #8]
 800b5f8:	7bfb      	ldrb	r3, [r7, #15]
 800b5fa:	4a07      	ldr	r2, [pc, #28]	; (800b618 <disk_read+0x3c>)
 800b5fc:	4413      	add	r3, r2
 800b5fe:	7a18      	ldrb	r0, [r3, #8]
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	68b9      	ldr	r1, [r7, #8]
 800b606:	47a0      	blx	r4
 800b608:	4603      	mov	r3, r0
 800b60a:	75fb      	strb	r3, [r7, #23]
  return res;
 800b60c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b60e:	4618      	mov	r0, r3
 800b610:	371c      	adds	r7, #28
 800b612:	46bd      	mov	sp, r7
 800b614:	bd90      	pop	{r4, r7, pc}
 800b616:	bf00      	nop
 800b618:	200008cc 	.word	0x200008cc

0800b61c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b61c:	b590      	push	{r4, r7, lr}
 800b61e:	b087      	sub	sp, #28
 800b620:	af00      	add	r7, sp, #0
 800b622:	60b9      	str	r1, [r7, #8]
 800b624:	607a      	str	r2, [r7, #4]
 800b626:	603b      	str	r3, [r7, #0]
 800b628:	4603      	mov	r3, r0
 800b62a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b62c:	7bfb      	ldrb	r3, [r7, #15]
 800b62e:	4a0a      	ldr	r2, [pc, #40]	; (800b658 <disk_write+0x3c>)
 800b630:	009b      	lsls	r3, r3, #2
 800b632:	4413      	add	r3, r2
 800b634:	685b      	ldr	r3, [r3, #4]
 800b636:	68dc      	ldr	r4, [r3, #12]
 800b638:	7bfb      	ldrb	r3, [r7, #15]
 800b63a:	4a07      	ldr	r2, [pc, #28]	; (800b658 <disk_write+0x3c>)
 800b63c:	4413      	add	r3, r2
 800b63e:	7a18      	ldrb	r0, [r3, #8]
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	687a      	ldr	r2, [r7, #4]
 800b644:	68b9      	ldr	r1, [r7, #8]
 800b646:	47a0      	blx	r4
 800b648:	4603      	mov	r3, r0
 800b64a:	75fb      	strb	r3, [r7, #23]
  return res;
 800b64c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b64e:	4618      	mov	r0, r3
 800b650:	371c      	adds	r7, #28
 800b652:	46bd      	mov	sp, r7
 800b654:	bd90      	pop	{r4, r7, pc}
 800b656:	bf00      	nop
 800b658:	200008cc 	.word	0x200008cc

0800b65c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b084      	sub	sp, #16
 800b660:	af00      	add	r7, sp, #0
 800b662:	4603      	mov	r3, r0
 800b664:	603a      	str	r2, [r7, #0]
 800b666:	71fb      	strb	r3, [r7, #7]
 800b668:	460b      	mov	r3, r1
 800b66a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b66c:	79fb      	ldrb	r3, [r7, #7]
 800b66e:	4a09      	ldr	r2, [pc, #36]	; (800b694 <disk_ioctl+0x38>)
 800b670:	009b      	lsls	r3, r3, #2
 800b672:	4413      	add	r3, r2
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	691b      	ldr	r3, [r3, #16]
 800b678:	79fa      	ldrb	r2, [r7, #7]
 800b67a:	4906      	ldr	r1, [pc, #24]	; (800b694 <disk_ioctl+0x38>)
 800b67c:	440a      	add	r2, r1
 800b67e:	7a10      	ldrb	r0, [r2, #8]
 800b680:	79b9      	ldrb	r1, [r7, #6]
 800b682:	683a      	ldr	r2, [r7, #0]
 800b684:	4798      	blx	r3
 800b686:	4603      	mov	r3, r0
 800b688:	73fb      	strb	r3, [r7, #15]
  return res;
 800b68a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3710      	adds	r7, #16
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}
 800b694:	200008cc 	.word	0x200008cc

0800b698 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b698:	b480      	push	{r7}
 800b69a:	b085      	sub	sp, #20
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	3301      	adds	r3, #1
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b6a8:	89fb      	ldrh	r3, [r7, #14]
 800b6aa:	021b      	lsls	r3, r3, #8
 800b6ac:	b21a      	sxth	r2, r3
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	b21b      	sxth	r3, r3
 800b6b4:	4313      	orrs	r3, r2
 800b6b6:	b21b      	sxth	r3, r3
 800b6b8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b6ba:	89fb      	ldrh	r3, [r7, #14]
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3714      	adds	r7, #20
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr

0800b6c8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b085      	sub	sp, #20
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	3303      	adds	r3, #3
 800b6d4:	781b      	ldrb	r3, [r3, #0]
 800b6d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	021b      	lsls	r3, r3, #8
 800b6dc:	687a      	ldr	r2, [r7, #4]
 800b6de:	3202      	adds	r2, #2
 800b6e0:	7812      	ldrb	r2, [r2, #0]
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	021b      	lsls	r3, r3, #8
 800b6ea:	687a      	ldr	r2, [r7, #4]
 800b6ec:	3201      	adds	r2, #1
 800b6ee:	7812      	ldrb	r2, [r2, #0]
 800b6f0:	4313      	orrs	r3, r2
 800b6f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	021b      	lsls	r3, r3, #8
 800b6f8:	687a      	ldr	r2, [r7, #4]
 800b6fa:	7812      	ldrb	r2, [r2, #0]
 800b6fc:	4313      	orrs	r3, r2
 800b6fe:	60fb      	str	r3, [r7, #12]
	return rv;
 800b700:	68fb      	ldr	r3, [r7, #12]
}
 800b702:	4618      	mov	r0, r3
 800b704:	3714      	adds	r7, #20
 800b706:	46bd      	mov	sp, r7
 800b708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70c:	4770      	bx	lr

0800b70e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b70e:	b480      	push	{r7}
 800b710:	b083      	sub	sp, #12
 800b712:	af00      	add	r7, sp, #0
 800b714:	6078      	str	r0, [r7, #4]
 800b716:	460b      	mov	r3, r1
 800b718:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	1c5a      	adds	r2, r3, #1
 800b71e:	607a      	str	r2, [r7, #4]
 800b720:	887a      	ldrh	r2, [r7, #2]
 800b722:	b2d2      	uxtb	r2, r2
 800b724:	701a      	strb	r2, [r3, #0]
 800b726:	887b      	ldrh	r3, [r7, #2]
 800b728:	0a1b      	lsrs	r3, r3, #8
 800b72a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	1c5a      	adds	r2, r3, #1
 800b730:	607a      	str	r2, [r7, #4]
 800b732:	887a      	ldrh	r2, [r7, #2]
 800b734:	b2d2      	uxtb	r2, r2
 800b736:	701a      	strb	r2, [r3, #0]
}
 800b738:	bf00      	nop
 800b73a:	370c      	adds	r7, #12
 800b73c:	46bd      	mov	sp, r7
 800b73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b742:	4770      	bx	lr

0800b744 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b744:	b480      	push	{r7}
 800b746:	b083      	sub	sp, #12
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	1c5a      	adds	r2, r3, #1
 800b752:	607a      	str	r2, [r7, #4]
 800b754:	683a      	ldr	r2, [r7, #0]
 800b756:	b2d2      	uxtb	r2, r2
 800b758:	701a      	strb	r2, [r3, #0]
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	0a1b      	lsrs	r3, r3, #8
 800b75e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	1c5a      	adds	r2, r3, #1
 800b764:	607a      	str	r2, [r7, #4]
 800b766:	683a      	ldr	r2, [r7, #0]
 800b768:	b2d2      	uxtb	r2, r2
 800b76a:	701a      	strb	r2, [r3, #0]
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	0a1b      	lsrs	r3, r3, #8
 800b770:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	1c5a      	adds	r2, r3, #1
 800b776:	607a      	str	r2, [r7, #4]
 800b778:	683a      	ldr	r2, [r7, #0]
 800b77a:	b2d2      	uxtb	r2, r2
 800b77c:	701a      	strb	r2, [r3, #0]
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	0a1b      	lsrs	r3, r3, #8
 800b782:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	1c5a      	adds	r2, r3, #1
 800b788:	607a      	str	r2, [r7, #4]
 800b78a:	683a      	ldr	r2, [r7, #0]
 800b78c:	b2d2      	uxtb	r2, r2
 800b78e:	701a      	strb	r2, [r3, #0]
}
 800b790:	bf00      	nop
 800b792:	370c      	adds	r7, #12
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr

0800b79c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b79c:	b480      	push	{r7}
 800b79e:	b087      	sub	sp, #28
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	60f8      	str	r0, [r7, #12]
 800b7a4:	60b9      	str	r1, [r7, #8]
 800b7a6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d00d      	beq.n	800b7d2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b7b6:	693a      	ldr	r2, [r7, #16]
 800b7b8:	1c53      	adds	r3, r2, #1
 800b7ba:	613b      	str	r3, [r7, #16]
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	1c59      	adds	r1, r3, #1
 800b7c0:	6179      	str	r1, [r7, #20]
 800b7c2:	7812      	ldrb	r2, [r2, #0]
 800b7c4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	3b01      	subs	r3, #1
 800b7ca:	607b      	str	r3, [r7, #4]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d1f1      	bne.n	800b7b6 <mem_cpy+0x1a>
	}
}
 800b7d2:	bf00      	nop
 800b7d4:	371c      	adds	r7, #28
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7dc:	4770      	bx	lr

0800b7de <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b7de:	b480      	push	{r7}
 800b7e0:	b087      	sub	sp, #28
 800b7e2:	af00      	add	r7, sp, #0
 800b7e4:	60f8      	str	r0, [r7, #12]
 800b7e6:	60b9      	str	r1, [r7, #8]
 800b7e8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	1c5a      	adds	r2, r3, #1
 800b7f2:	617a      	str	r2, [r7, #20]
 800b7f4:	68ba      	ldr	r2, [r7, #8]
 800b7f6:	b2d2      	uxtb	r2, r2
 800b7f8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	3b01      	subs	r3, #1
 800b7fe:	607b      	str	r3, [r7, #4]
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d1f3      	bne.n	800b7ee <mem_set+0x10>
}
 800b806:	bf00      	nop
 800b808:	bf00      	nop
 800b80a:	371c      	adds	r7, #28
 800b80c:	46bd      	mov	sp, r7
 800b80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b812:	4770      	bx	lr

0800b814 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b814:	b480      	push	{r7}
 800b816:	b089      	sub	sp, #36	; 0x24
 800b818:	af00      	add	r7, sp, #0
 800b81a:	60f8      	str	r0, [r7, #12]
 800b81c:	60b9      	str	r1, [r7, #8]
 800b81e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	61fb      	str	r3, [r7, #28]
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b828:	2300      	movs	r3, #0
 800b82a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b82c:	69fb      	ldr	r3, [r7, #28]
 800b82e:	1c5a      	adds	r2, r3, #1
 800b830:	61fa      	str	r2, [r7, #28]
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	4619      	mov	r1, r3
 800b836:	69bb      	ldr	r3, [r7, #24]
 800b838:	1c5a      	adds	r2, r3, #1
 800b83a:	61ba      	str	r2, [r7, #24]
 800b83c:	781b      	ldrb	r3, [r3, #0]
 800b83e:	1acb      	subs	r3, r1, r3
 800b840:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	3b01      	subs	r3, #1
 800b846:	607b      	str	r3, [r7, #4]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d002      	beq.n	800b854 <mem_cmp+0x40>
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d0eb      	beq.n	800b82c <mem_cmp+0x18>

	return r;
 800b854:	697b      	ldr	r3, [r7, #20]
}
 800b856:	4618      	mov	r0, r3
 800b858:	3724      	adds	r7, #36	; 0x24
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr

0800b862 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b862:	b480      	push	{r7}
 800b864:	b083      	sub	sp, #12
 800b866:	af00      	add	r7, sp, #0
 800b868:	6078      	str	r0, [r7, #4]
 800b86a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b86c:	e002      	b.n	800b874 <chk_chr+0x12>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	3301      	adds	r3, #1
 800b872:	607b      	str	r3, [r7, #4]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d005      	beq.n	800b888 <chk_chr+0x26>
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	781b      	ldrb	r3, [r3, #0]
 800b880:	461a      	mov	r2, r3
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	4293      	cmp	r3, r2
 800b886:	d1f2      	bne.n	800b86e <chk_chr+0xc>
	return *str;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	781b      	ldrb	r3, [r3, #0]
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	370c      	adds	r7, #12
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr

0800b898 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b898:	b480      	push	{r7}
 800b89a:	b085      	sub	sp, #20
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	60bb      	str	r3, [r7, #8]
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	60fb      	str	r3, [r7, #12]
 800b8aa:	e029      	b.n	800b900 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b8ac:	4a27      	ldr	r2, [pc, #156]	; (800b94c <chk_lock+0xb4>)
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	011b      	lsls	r3, r3, #4
 800b8b2:	4413      	add	r3, r2
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d01d      	beq.n	800b8f6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b8ba:	4a24      	ldr	r2, [pc, #144]	; (800b94c <chk_lock+0xb4>)
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	011b      	lsls	r3, r3, #4
 800b8c0:	4413      	add	r3, r2
 800b8c2:	681a      	ldr	r2, [r3, #0]
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	429a      	cmp	r2, r3
 800b8ca:	d116      	bne.n	800b8fa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b8cc:	4a1f      	ldr	r2, [pc, #124]	; (800b94c <chk_lock+0xb4>)
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	011b      	lsls	r3, r3, #4
 800b8d2:	4413      	add	r3, r2
 800b8d4:	3304      	adds	r3, #4
 800b8d6:	681a      	ldr	r2, [r3, #0]
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d10c      	bne.n	800b8fa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b8e0:	4a1a      	ldr	r2, [pc, #104]	; (800b94c <chk_lock+0xb4>)
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	011b      	lsls	r3, r3, #4
 800b8e6:	4413      	add	r3, r2
 800b8e8:	3308      	adds	r3, #8
 800b8ea:	681a      	ldr	r2, [r3, #0]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b8f0:	429a      	cmp	r2, r3
 800b8f2:	d102      	bne.n	800b8fa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b8f4:	e007      	b.n	800b906 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	3301      	adds	r3, #1
 800b8fe:	60fb      	str	r3, [r7, #12]
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	2b01      	cmp	r3, #1
 800b904:	d9d2      	bls.n	800b8ac <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	2b02      	cmp	r3, #2
 800b90a:	d109      	bne.n	800b920 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d102      	bne.n	800b918 <chk_lock+0x80>
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	2b02      	cmp	r3, #2
 800b916:	d101      	bne.n	800b91c <chk_lock+0x84>
 800b918:	2300      	movs	r3, #0
 800b91a:	e010      	b.n	800b93e <chk_lock+0xa6>
 800b91c:	2312      	movs	r3, #18
 800b91e:	e00e      	b.n	800b93e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d108      	bne.n	800b938 <chk_lock+0xa0>
 800b926:	4a09      	ldr	r2, [pc, #36]	; (800b94c <chk_lock+0xb4>)
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	011b      	lsls	r3, r3, #4
 800b92c:	4413      	add	r3, r2
 800b92e:	330c      	adds	r3, #12
 800b930:	881b      	ldrh	r3, [r3, #0]
 800b932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b936:	d101      	bne.n	800b93c <chk_lock+0xa4>
 800b938:	2310      	movs	r3, #16
 800b93a:	e000      	b.n	800b93e <chk_lock+0xa6>
 800b93c:	2300      	movs	r3, #0
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3714      	adds	r7, #20
 800b942:	46bd      	mov	sp, r7
 800b944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b948:	4770      	bx	lr
 800b94a:	bf00      	nop
 800b94c:	200008ac 	.word	0x200008ac

0800b950 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b950:	b480      	push	{r7}
 800b952:	b083      	sub	sp, #12
 800b954:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b956:	2300      	movs	r3, #0
 800b958:	607b      	str	r3, [r7, #4]
 800b95a:	e002      	b.n	800b962 <enq_lock+0x12>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	3301      	adds	r3, #1
 800b960:	607b      	str	r3, [r7, #4]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2b01      	cmp	r3, #1
 800b966:	d806      	bhi.n	800b976 <enq_lock+0x26>
 800b968:	4a09      	ldr	r2, [pc, #36]	; (800b990 <enq_lock+0x40>)
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	011b      	lsls	r3, r3, #4
 800b96e:	4413      	add	r3, r2
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d1f2      	bne.n	800b95c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2b02      	cmp	r3, #2
 800b97a:	bf14      	ite	ne
 800b97c:	2301      	movne	r3, #1
 800b97e:	2300      	moveq	r3, #0
 800b980:	b2db      	uxtb	r3, r3
}
 800b982:	4618      	mov	r0, r3
 800b984:	370c      	adds	r7, #12
 800b986:	46bd      	mov	sp, r7
 800b988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98c:	4770      	bx	lr
 800b98e:	bf00      	nop
 800b990:	200008ac 	.word	0x200008ac

0800b994 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b994:	b480      	push	{r7}
 800b996:	b085      	sub	sp, #20
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
 800b99c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b99e:	2300      	movs	r3, #0
 800b9a0:	60fb      	str	r3, [r7, #12]
 800b9a2:	e01f      	b.n	800b9e4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b9a4:	4a41      	ldr	r2, [pc, #260]	; (800baac <inc_lock+0x118>)
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	011b      	lsls	r3, r3, #4
 800b9aa:	4413      	add	r3, r2
 800b9ac:	681a      	ldr	r2, [r3, #0]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d113      	bne.n	800b9de <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b9b6:	4a3d      	ldr	r2, [pc, #244]	; (800baac <inc_lock+0x118>)
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	011b      	lsls	r3, r3, #4
 800b9bc:	4413      	add	r3, r2
 800b9be:	3304      	adds	r3, #4
 800b9c0:	681a      	ldr	r2, [r3, #0]
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	d109      	bne.n	800b9de <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b9ca:	4a38      	ldr	r2, [pc, #224]	; (800baac <inc_lock+0x118>)
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	011b      	lsls	r3, r3, #4
 800b9d0:	4413      	add	r3, r2
 800b9d2:	3308      	adds	r3, #8
 800b9d4:	681a      	ldr	r2, [r3, #0]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d006      	beq.n	800b9ec <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	3301      	adds	r3, #1
 800b9e2:	60fb      	str	r3, [r7, #12]
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2b01      	cmp	r3, #1
 800b9e8:	d9dc      	bls.n	800b9a4 <inc_lock+0x10>
 800b9ea:	e000      	b.n	800b9ee <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b9ec:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2b02      	cmp	r3, #2
 800b9f2:	d132      	bne.n	800ba5a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	60fb      	str	r3, [r7, #12]
 800b9f8:	e002      	b.n	800ba00 <inc_lock+0x6c>
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	3301      	adds	r3, #1
 800b9fe:	60fb      	str	r3, [r7, #12]
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2b01      	cmp	r3, #1
 800ba04:	d806      	bhi.n	800ba14 <inc_lock+0x80>
 800ba06:	4a29      	ldr	r2, [pc, #164]	; (800baac <inc_lock+0x118>)
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	011b      	lsls	r3, r3, #4
 800ba0c:	4413      	add	r3, r2
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d1f2      	bne.n	800b9fa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2b02      	cmp	r3, #2
 800ba18:	d101      	bne.n	800ba1e <inc_lock+0x8a>
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	e040      	b.n	800baa0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681a      	ldr	r2, [r3, #0]
 800ba22:	4922      	ldr	r1, [pc, #136]	; (800baac <inc_lock+0x118>)
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	011b      	lsls	r3, r3, #4
 800ba28:	440b      	add	r3, r1
 800ba2a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	689a      	ldr	r2, [r3, #8]
 800ba30:	491e      	ldr	r1, [pc, #120]	; (800baac <inc_lock+0x118>)
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	011b      	lsls	r3, r3, #4
 800ba36:	440b      	add	r3, r1
 800ba38:	3304      	adds	r3, #4
 800ba3a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	695a      	ldr	r2, [r3, #20]
 800ba40:	491a      	ldr	r1, [pc, #104]	; (800baac <inc_lock+0x118>)
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	011b      	lsls	r3, r3, #4
 800ba46:	440b      	add	r3, r1
 800ba48:	3308      	adds	r3, #8
 800ba4a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ba4c:	4a17      	ldr	r2, [pc, #92]	; (800baac <inc_lock+0x118>)
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	011b      	lsls	r3, r3, #4
 800ba52:	4413      	add	r3, r2
 800ba54:	330c      	adds	r3, #12
 800ba56:	2200      	movs	r2, #0
 800ba58:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d009      	beq.n	800ba74 <inc_lock+0xe0>
 800ba60:	4a12      	ldr	r2, [pc, #72]	; (800baac <inc_lock+0x118>)
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	011b      	lsls	r3, r3, #4
 800ba66:	4413      	add	r3, r2
 800ba68:	330c      	adds	r3, #12
 800ba6a:	881b      	ldrh	r3, [r3, #0]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d001      	beq.n	800ba74 <inc_lock+0xe0>
 800ba70:	2300      	movs	r3, #0
 800ba72:	e015      	b.n	800baa0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d108      	bne.n	800ba8c <inc_lock+0xf8>
 800ba7a:	4a0c      	ldr	r2, [pc, #48]	; (800baac <inc_lock+0x118>)
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	011b      	lsls	r3, r3, #4
 800ba80:	4413      	add	r3, r2
 800ba82:	330c      	adds	r3, #12
 800ba84:	881b      	ldrh	r3, [r3, #0]
 800ba86:	3301      	adds	r3, #1
 800ba88:	b29a      	uxth	r2, r3
 800ba8a:	e001      	b.n	800ba90 <inc_lock+0xfc>
 800ba8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ba90:	4906      	ldr	r1, [pc, #24]	; (800baac <inc_lock+0x118>)
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	011b      	lsls	r3, r3, #4
 800ba96:	440b      	add	r3, r1
 800ba98:	330c      	adds	r3, #12
 800ba9a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	3301      	adds	r3, #1
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3714      	adds	r7, #20
 800baa4:	46bd      	mov	sp, r7
 800baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baaa:	4770      	bx	lr
 800baac:	200008ac 	.word	0x200008ac

0800bab0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800bab0:	b480      	push	{r7}
 800bab2:	b085      	sub	sp, #20
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	3b01      	subs	r3, #1
 800babc:	607b      	str	r3, [r7, #4]
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d825      	bhi.n	800bb10 <dec_lock+0x60>
		n = Files[i].ctr;
 800bac4:	4a17      	ldr	r2, [pc, #92]	; (800bb24 <dec_lock+0x74>)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	011b      	lsls	r3, r3, #4
 800baca:	4413      	add	r3, r2
 800bacc:	330c      	adds	r3, #12
 800bace:	881b      	ldrh	r3, [r3, #0]
 800bad0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bad2:	89fb      	ldrh	r3, [r7, #14]
 800bad4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bad8:	d101      	bne.n	800bade <dec_lock+0x2e>
 800bada:	2300      	movs	r3, #0
 800badc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800bade:	89fb      	ldrh	r3, [r7, #14]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d002      	beq.n	800baea <dec_lock+0x3a>
 800bae4:	89fb      	ldrh	r3, [r7, #14]
 800bae6:	3b01      	subs	r3, #1
 800bae8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800baea:	4a0e      	ldr	r2, [pc, #56]	; (800bb24 <dec_lock+0x74>)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	011b      	lsls	r3, r3, #4
 800baf0:	4413      	add	r3, r2
 800baf2:	330c      	adds	r3, #12
 800baf4:	89fa      	ldrh	r2, [r7, #14]
 800baf6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800baf8:	89fb      	ldrh	r3, [r7, #14]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d105      	bne.n	800bb0a <dec_lock+0x5a>
 800bafe:	4a09      	ldr	r2, [pc, #36]	; (800bb24 <dec_lock+0x74>)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	011b      	lsls	r3, r3, #4
 800bb04:	4413      	add	r3, r2
 800bb06:	2200      	movs	r2, #0
 800bb08:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	737b      	strb	r3, [r7, #13]
 800bb0e:	e001      	b.n	800bb14 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bb10:	2302      	movs	r3, #2
 800bb12:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800bb14:	7b7b      	ldrb	r3, [r7, #13]
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3714      	adds	r7, #20
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb20:	4770      	bx	lr
 800bb22:	bf00      	nop
 800bb24:	200008ac 	.word	0x200008ac

0800bb28 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b085      	sub	sp, #20
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bb30:	2300      	movs	r3, #0
 800bb32:	60fb      	str	r3, [r7, #12]
 800bb34:	e010      	b.n	800bb58 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bb36:	4a0d      	ldr	r2, [pc, #52]	; (800bb6c <clear_lock+0x44>)
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	011b      	lsls	r3, r3, #4
 800bb3c:	4413      	add	r3, r2
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	429a      	cmp	r2, r3
 800bb44:	d105      	bne.n	800bb52 <clear_lock+0x2a>
 800bb46:	4a09      	ldr	r2, [pc, #36]	; (800bb6c <clear_lock+0x44>)
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	011b      	lsls	r3, r3, #4
 800bb4c:	4413      	add	r3, r2
 800bb4e:	2200      	movs	r2, #0
 800bb50:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	3301      	adds	r3, #1
 800bb56:	60fb      	str	r3, [r7, #12]
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	2b01      	cmp	r3, #1
 800bb5c:	d9eb      	bls.n	800bb36 <clear_lock+0xe>
	}
}
 800bb5e:	bf00      	nop
 800bb60:	bf00      	nop
 800bb62:	3714      	adds	r7, #20
 800bb64:	46bd      	mov	sp, r7
 800bb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6a:	4770      	bx	lr
 800bb6c:	200008ac 	.word	0x200008ac

0800bb70 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b086      	sub	sp, #24
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	78db      	ldrb	r3, [r3, #3]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d034      	beq.n	800bbee <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb88:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	7858      	ldrb	r0, [r3, #1]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bb94:	2301      	movs	r3, #1
 800bb96:	697a      	ldr	r2, [r7, #20]
 800bb98:	f7ff fd40 	bl	800b61c <disk_write>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d002      	beq.n	800bba8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800bba2:	2301      	movs	r3, #1
 800bba4:	73fb      	strb	r3, [r7, #15]
 800bba6:	e022      	b.n	800bbee <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6a1b      	ldr	r3, [r3, #32]
 800bbb2:	697a      	ldr	r2, [r7, #20]
 800bbb4:	1ad2      	subs	r2, r2, r3
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	699b      	ldr	r3, [r3, #24]
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d217      	bcs.n	800bbee <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	789b      	ldrb	r3, [r3, #2]
 800bbc2:	613b      	str	r3, [r7, #16]
 800bbc4:	e010      	b.n	800bbe8 <sync_window+0x78>
					wsect += fs->fsize;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	699b      	ldr	r3, [r3, #24]
 800bbca:	697a      	ldr	r2, [r7, #20]
 800bbcc:	4413      	add	r3, r2
 800bbce:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	7858      	ldrb	r0, [r3, #1]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bbda:	2301      	movs	r3, #1
 800bbdc:	697a      	ldr	r2, [r7, #20]
 800bbde:	f7ff fd1d 	bl	800b61c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	3b01      	subs	r3, #1
 800bbe6:	613b      	str	r3, [r7, #16]
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	2b01      	cmp	r3, #1
 800bbec:	d8eb      	bhi.n	800bbc6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bbee:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3718      	adds	r7, #24
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}

0800bbf8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b084      	sub	sp, #16
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bc02:	2300      	movs	r3, #0
 800bc04:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc0a:	683a      	ldr	r2, [r7, #0]
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d01b      	beq.n	800bc48 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f7ff ffad 	bl	800bb70 <sync_window>
 800bc16:	4603      	mov	r3, r0
 800bc18:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bc1a:	7bfb      	ldrb	r3, [r7, #15]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d113      	bne.n	800bc48 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	7858      	ldrb	r0, [r3, #1]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	683a      	ldr	r2, [r7, #0]
 800bc2e:	f7ff fcd5 	bl	800b5dc <disk_read>
 800bc32:	4603      	mov	r3, r0
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d004      	beq.n	800bc42 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bc38:	f04f 33ff 	mov.w	r3, #4294967295
 800bc3c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bc3e:	2301      	movs	r3, #1
 800bc40:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	683a      	ldr	r2, [r7, #0]
 800bc46:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800bc48:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3710      	adds	r7, #16
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}
	...

0800bc54 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b084      	sub	sp, #16
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f7ff ff87 	bl	800bb70 <sync_window>
 800bc62:	4603      	mov	r3, r0
 800bc64:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bc66:	7bfb      	ldrb	r3, [r7, #15]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d158      	bne.n	800bd1e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	781b      	ldrb	r3, [r3, #0]
 800bc70:	2b03      	cmp	r3, #3
 800bc72:	d148      	bne.n	800bd06 <sync_fs+0xb2>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	791b      	ldrb	r3, [r3, #4]
 800bc78:	2b01      	cmp	r3, #1
 800bc7a:	d144      	bne.n	800bd06 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	3330      	adds	r3, #48	; 0x30
 800bc80:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bc84:	2100      	movs	r1, #0
 800bc86:	4618      	mov	r0, r3
 800bc88:	f7ff fda9 	bl	800b7de <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	3330      	adds	r3, #48	; 0x30
 800bc90:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bc94:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f7ff fd38 	bl	800b70e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	3330      	adds	r3, #48	; 0x30
 800bca2:	4921      	ldr	r1, [pc, #132]	; (800bd28 <sync_fs+0xd4>)
 800bca4:	4618      	mov	r0, r3
 800bca6:	f7ff fd4d 	bl	800b744 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	3330      	adds	r3, #48	; 0x30
 800bcae:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bcb2:	491e      	ldr	r1, [pc, #120]	; (800bd2c <sync_fs+0xd8>)
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7ff fd45 	bl	800b744 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	3330      	adds	r3, #48	; 0x30
 800bcbe:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	691b      	ldr	r3, [r3, #16]
 800bcc6:	4619      	mov	r1, r3
 800bcc8:	4610      	mov	r0, r2
 800bcca:	f7ff fd3b 	bl	800b744 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	3330      	adds	r3, #48	; 0x30
 800bcd2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	68db      	ldr	r3, [r3, #12]
 800bcda:	4619      	mov	r1, r3
 800bcdc:	4610      	mov	r0, r2
 800bcde:	f7ff fd31 	bl	800b744 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	69db      	ldr	r3, [r3, #28]
 800bce6:	1c5a      	adds	r2, r3, #1
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	7858      	ldrb	r0, [r3, #1]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	f7ff fc8e 	bl	800b61c <disk_write>
			fs->fsi_flag = 0;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2200      	movs	r2, #0
 800bd04:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	785b      	ldrb	r3, [r3, #1]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	2100      	movs	r1, #0
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f7ff fca4 	bl	800b65c <disk_ioctl>
 800bd14:	4603      	mov	r3, r0
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d001      	beq.n	800bd1e <sync_fs+0xca>
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bd1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3710      	adds	r7, #16
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}
 800bd28:	41615252 	.word	0x41615252
 800bd2c:	61417272 	.word	0x61417272

0800bd30 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b083      	sub	sp, #12
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	3b02      	subs	r3, #2
 800bd3e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	695b      	ldr	r3, [r3, #20]
 800bd44:	3b02      	subs	r3, #2
 800bd46:	683a      	ldr	r2, [r7, #0]
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d301      	bcc.n	800bd50 <clust2sect+0x20>
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	e008      	b.n	800bd62 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	895b      	ldrh	r3, [r3, #10]
 800bd54:	461a      	mov	r2, r3
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	fb03 f202 	mul.w	r2, r3, r2
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd60:	4413      	add	r3, r2
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	370c      	adds	r7, #12
 800bd66:	46bd      	mov	sp, r7
 800bd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6c:	4770      	bx	lr

0800bd6e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bd6e:	b580      	push	{r7, lr}
 800bd70:	b086      	sub	sp, #24
 800bd72:	af00      	add	r7, sp, #0
 800bd74:	6078      	str	r0, [r7, #4]
 800bd76:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	d904      	bls.n	800bd8e <get_fat+0x20>
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	695b      	ldr	r3, [r3, #20]
 800bd88:	683a      	ldr	r2, [r7, #0]
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	d302      	bcc.n	800bd94 <get_fat+0x26>
		val = 1;	/* Internal error */
 800bd8e:	2301      	movs	r3, #1
 800bd90:	617b      	str	r3, [r7, #20]
 800bd92:	e08f      	b.n	800beb4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bd94:	f04f 33ff 	mov.w	r3, #4294967295
 800bd98:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	781b      	ldrb	r3, [r3, #0]
 800bd9e:	2b03      	cmp	r3, #3
 800bda0:	d062      	beq.n	800be68 <get_fat+0xfa>
 800bda2:	2b03      	cmp	r3, #3
 800bda4:	dc7c      	bgt.n	800bea0 <get_fat+0x132>
 800bda6:	2b01      	cmp	r3, #1
 800bda8:	d002      	beq.n	800bdb0 <get_fat+0x42>
 800bdaa:	2b02      	cmp	r3, #2
 800bdac:	d042      	beq.n	800be34 <get_fat+0xc6>
 800bdae:	e077      	b.n	800bea0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	60fb      	str	r3, [r7, #12]
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	085b      	lsrs	r3, r3, #1
 800bdb8:	68fa      	ldr	r2, [r7, #12]
 800bdba:	4413      	add	r3, r2
 800bdbc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	6a1a      	ldr	r2, [r3, #32]
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	0a5b      	lsrs	r3, r3, #9
 800bdc6:	4413      	add	r3, r2
 800bdc8:	4619      	mov	r1, r3
 800bdca:	6938      	ldr	r0, [r7, #16]
 800bdcc:	f7ff ff14 	bl	800bbf8 <move_window>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d167      	bne.n	800bea6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	1c5a      	adds	r2, r3, #1
 800bdda:	60fa      	str	r2, [r7, #12]
 800bddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bde0:	693a      	ldr	r2, [r7, #16]
 800bde2:	4413      	add	r3, r2
 800bde4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bde8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	6a1a      	ldr	r2, [r3, #32]
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	0a5b      	lsrs	r3, r3, #9
 800bdf2:	4413      	add	r3, r2
 800bdf4:	4619      	mov	r1, r3
 800bdf6:	6938      	ldr	r0, [r7, #16]
 800bdf8:	f7ff fefe 	bl	800bbf8 <move_window>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d153      	bne.n	800beaa <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be08:	693a      	ldr	r2, [r7, #16]
 800be0a:	4413      	add	r3, r2
 800be0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800be10:	021b      	lsls	r3, r3, #8
 800be12:	461a      	mov	r2, r3
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	4313      	orrs	r3, r2
 800be18:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	f003 0301 	and.w	r3, r3, #1
 800be20:	2b00      	cmp	r3, #0
 800be22:	d002      	beq.n	800be2a <get_fat+0xbc>
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	091b      	lsrs	r3, r3, #4
 800be28:	e002      	b.n	800be30 <get_fat+0xc2>
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800be30:	617b      	str	r3, [r7, #20]
			break;
 800be32:	e03f      	b.n	800beb4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800be34:	693b      	ldr	r3, [r7, #16]
 800be36:	6a1a      	ldr	r2, [r3, #32]
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	0a1b      	lsrs	r3, r3, #8
 800be3c:	4413      	add	r3, r2
 800be3e:	4619      	mov	r1, r3
 800be40:	6938      	ldr	r0, [r7, #16]
 800be42:	f7ff fed9 	bl	800bbf8 <move_window>
 800be46:	4603      	mov	r3, r0
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d130      	bne.n	800beae <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	005b      	lsls	r3, r3, #1
 800be56:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800be5a:	4413      	add	r3, r2
 800be5c:	4618      	mov	r0, r3
 800be5e:	f7ff fc1b 	bl	800b698 <ld_word>
 800be62:	4603      	mov	r3, r0
 800be64:	617b      	str	r3, [r7, #20]
			break;
 800be66:	e025      	b.n	800beb4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	6a1a      	ldr	r2, [r3, #32]
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	09db      	lsrs	r3, r3, #7
 800be70:	4413      	add	r3, r2
 800be72:	4619      	mov	r1, r3
 800be74:	6938      	ldr	r0, [r7, #16]
 800be76:	f7ff febf 	bl	800bbf8 <move_window>
 800be7a:	4603      	mov	r3, r0
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d118      	bne.n	800beb2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	009b      	lsls	r3, r3, #2
 800be8a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800be8e:	4413      	add	r3, r2
 800be90:	4618      	mov	r0, r3
 800be92:	f7ff fc19 	bl	800b6c8 <ld_dword>
 800be96:	4603      	mov	r3, r0
 800be98:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800be9c:	617b      	str	r3, [r7, #20]
			break;
 800be9e:	e009      	b.n	800beb4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bea0:	2301      	movs	r3, #1
 800bea2:	617b      	str	r3, [r7, #20]
 800bea4:	e006      	b.n	800beb4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bea6:	bf00      	nop
 800bea8:	e004      	b.n	800beb4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800beaa:	bf00      	nop
 800beac:	e002      	b.n	800beb4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800beae:	bf00      	nop
 800beb0:	e000      	b.n	800beb4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800beb2:	bf00      	nop
		}
	}

	return val;
 800beb4:	697b      	ldr	r3, [r7, #20]
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3718      	adds	r7, #24
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}

0800bebe <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bebe:	b590      	push	{r4, r7, lr}
 800bec0:	b089      	sub	sp, #36	; 0x24
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	60f8      	str	r0, [r7, #12]
 800bec6:	60b9      	str	r1, [r7, #8]
 800bec8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800beca:	2302      	movs	r3, #2
 800becc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	2b01      	cmp	r3, #1
 800bed2:	f240 80d2 	bls.w	800c07a <put_fat+0x1bc>
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	695b      	ldr	r3, [r3, #20]
 800beda:	68ba      	ldr	r2, [r7, #8]
 800bedc:	429a      	cmp	r2, r3
 800bede:	f080 80cc 	bcs.w	800c07a <put_fat+0x1bc>
		switch (fs->fs_type) {
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	781b      	ldrb	r3, [r3, #0]
 800bee6:	2b03      	cmp	r3, #3
 800bee8:	f000 8096 	beq.w	800c018 <put_fat+0x15a>
 800beec:	2b03      	cmp	r3, #3
 800beee:	f300 80cd 	bgt.w	800c08c <put_fat+0x1ce>
 800bef2:	2b01      	cmp	r3, #1
 800bef4:	d002      	beq.n	800befc <put_fat+0x3e>
 800bef6:	2b02      	cmp	r3, #2
 800bef8:	d06e      	beq.n	800bfd8 <put_fat+0x11a>
 800befa:	e0c7      	b.n	800c08c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	61bb      	str	r3, [r7, #24]
 800bf00:	69bb      	ldr	r3, [r7, #24]
 800bf02:	085b      	lsrs	r3, r3, #1
 800bf04:	69ba      	ldr	r2, [r7, #24]
 800bf06:	4413      	add	r3, r2
 800bf08:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	6a1a      	ldr	r2, [r3, #32]
 800bf0e:	69bb      	ldr	r3, [r7, #24]
 800bf10:	0a5b      	lsrs	r3, r3, #9
 800bf12:	4413      	add	r3, r2
 800bf14:	4619      	mov	r1, r3
 800bf16:	68f8      	ldr	r0, [r7, #12]
 800bf18:	f7ff fe6e 	bl	800bbf8 <move_window>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bf20:	7ffb      	ldrb	r3, [r7, #31]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	f040 80ab 	bne.w	800c07e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bf2e:	69bb      	ldr	r3, [r7, #24]
 800bf30:	1c59      	adds	r1, r3, #1
 800bf32:	61b9      	str	r1, [r7, #24]
 800bf34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf38:	4413      	add	r3, r2
 800bf3a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	f003 0301 	and.w	r3, r3, #1
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d00d      	beq.n	800bf62 <put_fat+0xa4>
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	781b      	ldrb	r3, [r3, #0]
 800bf4a:	b25b      	sxtb	r3, r3
 800bf4c:	f003 030f 	and.w	r3, r3, #15
 800bf50:	b25a      	sxtb	r2, r3
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	b2db      	uxtb	r3, r3
 800bf56:	011b      	lsls	r3, r3, #4
 800bf58:	b25b      	sxtb	r3, r3
 800bf5a:	4313      	orrs	r3, r2
 800bf5c:	b25b      	sxtb	r3, r3
 800bf5e:	b2db      	uxtb	r3, r3
 800bf60:	e001      	b.n	800bf66 <put_fat+0xa8>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	b2db      	uxtb	r3, r3
 800bf66:	697a      	ldr	r2, [r7, #20]
 800bf68:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2201      	movs	r2, #1
 800bf6e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	6a1a      	ldr	r2, [r3, #32]
 800bf74:	69bb      	ldr	r3, [r7, #24]
 800bf76:	0a5b      	lsrs	r3, r3, #9
 800bf78:	4413      	add	r3, r2
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	68f8      	ldr	r0, [r7, #12]
 800bf7e:	f7ff fe3b 	bl	800bbf8 <move_window>
 800bf82:	4603      	mov	r3, r0
 800bf84:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bf86:	7ffb      	ldrb	r3, [r7, #31]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d17a      	bne.n	800c082 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bf92:	69bb      	ldr	r3, [r7, #24]
 800bf94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf98:	4413      	add	r3, r2
 800bf9a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	f003 0301 	and.w	r3, r3, #1
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d003      	beq.n	800bfae <put_fat+0xf0>
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	091b      	lsrs	r3, r3, #4
 800bfaa:	b2db      	uxtb	r3, r3
 800bfac:	e00e      	b.n	800bfcc <put_fat+0x10e>
 800bfae:	697b      	ldr	r3, [r7, #20]
 800bfb0:	781b      	ldrb	r3, [r3, #0]
 800bfb2:	b25b      	sxtb	r3, r3
 800bfb4:	f023 030f 	bic.w	r3, r3, #15
 800bfb8:	b25a      	sxtb	r2, r3
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	0a1b      	lsrs	r3, r3, #8
 800bfbe:	b25b      	sxtb	r3, r3
 800bfc0:	f003 030f 	and.w	r3, r3, #15
 800bfc4:	b25b      	sxtb	r3, r3
 800bfc6:	4313      	orrs	r3, r2
 800bfc8:	b25b      	sxtb	r3, r3
 800bfca:	b2db      	uxtb	r3, r3
 800bfcc:	697a      	ldr	r2, [r7, #20]
 800bfce:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	2201      	movs	r2, #1
 800bfd4:	70da      	strb	r2, [r3, #3]
			break;
 800bfd6:	e059      	b.n	800c08c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	6a1a      	ldr	r2, [r3, #32]
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	0a1b      	lsrs	r3, r3, #8
 800bfe0:	4413      	add	r3, r2
 800bfe2:	4619      	mov	r1, r3
 800bfe4:	68f8      	ldr	r0, [r7, #12]
 800bfe6:	f7ff fe07 	bl	800bbf8 <move_window>
 800bfea:	4603      	mov	r3, r0
 800bfec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bfee:	7ffb      	ldrb	r3, [r7, #31]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d148      	bne.n	800c086 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	005b      	lsls	r3, r3, #1
 800bffe:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c002:	4413      	add	r3, r2
 800c004:	687a      	ldr	r2, [r7, #4]
 800c006:	b292      	uxth	r2, r2
 800c008:	4611      	mov	r1, r2
 800c00a:	4618      	mov	r0, r3
 800c00c:	f7ff fb7f 	bl	800b70e <st_word>
			fs->wflag = 1;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	2201      	movs	r2, #1
 800c014:	70da      	strb	r2, [r3, #3]
			break;
 800c016:	e039      	b.n	800c08c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	6a1a      	ldr	r2, [r3, #32]
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	09db      	lsrs	r3, r3, #7
 800c020:	4413      	add	r3, r2
 800c022:	4619      	mov	r1, r3
 800c024:	68f8      	ldr	r0, [r7, #12]
 800c026:	f7ff fde7 	bl	800bbf8 <move_window>
 800c02a:	4603      	mov	r3, r0
 800c02c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c02e:	7ffb      	ldrb	r3, [r7, #31]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d12a      	bne.n	800c08a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	009b      	lsls	r3, r3, #2
 800c044:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c048:	4413      	add	r3, r2
 800c04a:	4618      	mov	r0, r3
 800c04c:	f7ff fb3c 	bl	800b6c8 <ld_dword>
 800c050:	4603      	mov	r3, r0
 800c052:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c056:	4323      	orrs	r3, r4
 800c058:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	009b      	lsls	r3, r3, #2
 800c064:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c068:	4413      	add	r3, r2
 800c06a:	6879      	ldr	r1, [r7, #4]
 800c06c:	4618      	mov	r0, r3
 800c06e:	f7ff fb69 	bl	800b744 <st_dword>
			fs->wflag = 1;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	2201      	movs	r2, #1
 800c076:	70da      	strb	r2, [r3, #3]
			break;
 800c078:	e008      	b.n	800c08c <put_fat+0x1ce>
		}
	}
 800c07a:	bf00      	nop
 800c07c:	e006      	b.n	800c08c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c07e:	bf00      	nop
 800c080:	e004      	b.n	800c08c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c082:	bf00      	nop
 800c084:	e002      	b.n	800c08c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c086:	bf00      	nop
 800c088:	e000      	b.n	800c08c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c08a:	bf00      	nop
	return res;
 800c08c:	7ffb      	ldrb	r3, [r7, #31]
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3724      	adds	r7, #36	; 0x24
 800c092:	46bd      	mov	sp, r7
 800c094:	bd90      	pop	{r4, r7, pc}

0800c096 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c096:	b580      	push	{r7, lr}
 800c098:	b088      	sub	sp, #32
 800c09a:	af00      	add	r7, sp, #0
 800c09c:	60f8      	str	r0, [r7, #12]
 800c09e:	60b9      	str	r1, [r7, #8]
 800c0a0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	2b01      	cmp	r3, #1
 800c0b0:	d904      	bls.n	800c0bc <remove_chain+0x26>
 800c0b2:	69bb      	ldr	r3, [r7, #24]
 800c0b4:	695b      	ldr	r3, [r3, #20]
 800c0b6:	68ba      	ldr	r2, [r7, #8]
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d301      	bcc.n	800c0c0 <remove_chain+0x2a>
 800c0bc:	2302      	movs	r3, #2
 800c0be:	e04b      	b.n	800c158 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d00c      	beq.n	800c0e0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c0c6:	f04f 32ff 	mov.w	r2, #4294967295
 800c0ca:	6879      	ldr	r1, [r7, #4]
 800c0cc:	69b8      	ldr	r0, [r7, #24]
 800c0ce:	f7ff fef6 	bl	800bebe <put_fat>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c0d6:	7ffb      	ldrb	r3, [r7, #31]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d001      	beq.n	800c0e0 <remove_chain+0x4a>
 800c0dc:	7ffb      	ldrb	r3, [r7, #31]
 800c0de:	e03b      	b.n	800c158 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c0e0:	68b9      	ldr	r1, [r7, #8]
 800c0e2:	68f8      	ldr	r0, [r7, #12]
 800c0e4:	f7ff fe43 	bl	800bd6e <get_fat>
 800c0e8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d031      	beq.n	800c154 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	2b01      	cmp	r3, #1
 800c0f4:	d101      	bne.n	800c0fa <remove_chain+0x64>
 800c0f6:	2302      	movs	r3, #2
 800c0f8:	e02e      	b.n	800c158 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c100:	d101      	bne.n	800c106 <remove_chain+0x70>
 800c102:	2301      	movs	r3, #1
 800c104:	e028      	b.n	800c158 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c106:	2200      	movs	r2, #0
 800c108:	68b9      	ldr	r1, [r7, #8]
 800c10a:	69b8      	ldr	r0, [r7, #24]
 800c10c:	f7ff fed7 	bl	800bebe <put_fat>
 800c110:	4603      	mov	r3, r0
 800c112:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c114:	7ffb      	ldrb	r3, [r7, #31]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d001      	beq.n	800c11e <remove_chain+0x88>
 800c11a:	7ffb      	ldrb	r3, [r7, #31]
 800c11c:	e01c      	b.n	800c158 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c11e:	69bb      	ldr	r3, [r7, #24]
 800c120:	691a      	ldr	r2, [r3, #16]
 800c122:	69bb      	ldr	r3, [r7, #24]
 800c124:	695b      	ldr	r3, [r3, #20]
 800c126:	3b02      	subs	r3, #2
 800c128:	429a      	cmp	r2, r3
 800c12a:	d20b      	bcs.n	800c144 <remove_chain+0xae>
			fs->free_clst++;
 800c12c:	69bb      	ldr	r3, [r7, #24]
 800c12e:	691b      	ldr	r3, [r3, #16]
 800c130:	1c5a      	adds	r2, r3, #1
 800c132:	69bb      	ldr	r3, [r7, #24]
 800c134:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800c136:	69bb      	ldr	r3, [r7, #24]
 800c138:	791b      	ldrb	r3, [r3, #4]
 800c13a:	f043 0301 	orr.w	r3, r3, #1
 800c13e:	b2da      	uxtb	r2, r3
 800c140:	69bb      	ldr	r3, [r7, #24]
 800c142:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c148:	69bb      	ldr	r3, [r7, #24]
 800c14a:	695b      	ldr	r3, [r3, #20]
 800c14c:	68ba      	ldr	r2, [r7, #8]
 800c14e:	429a      	cmp	r2, r3
 800c150:	d3c6      	bcc.n	800c0e0 <remove_chain+0x4a>
 800c152:	e000      	b.n	800c156 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c154:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c156:	2300      	movs	r3, #0
}
 800c158:	4618      	mov	r0, r3
 800c15a:	3720      	adds	r7, #32
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}

0800c160 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b088      	sub	sp, #32
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d10d      	bne.n	800c192 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	68db      	ldr	r3, [r3, #12]
 800c17a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c17c:	69bb      	ldr	r3, [r7, #24]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d004      	beq.n	800c18c <create_chain+0x2c>
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	695b      	ldr	r3, [r3, #20]
 800c186:	69ba      	ldr	r2, [r7, #24]
 800c188:	429a      	cmp	r2, r3
 800c18a:	d31b      	bcc.n	800c1c4 <create_chain+0x64>
 800c18c:	2301      	movs	r3, #1
 800c18e:	61bb      	str	r3, [r7, #24]
 800c190:	e018      	b.n	800c1c4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c192:	6839      	ldr	r1, [r7, #0]
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f7ff fdea 	bl	800bd6e <get_fat>
 800c19a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	2b01      	cmp	r3, #1
 800c1a0:	d801      	bhi.n	800c1a6 <create_chain+0x46>
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	e070      	b.n	800c288 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ac:	d101      	bne.n	800c1b2 <create_chain+0x52>
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	e06a      	b.n	800c288 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	695b      	ldr	r3, [r3, #20]
 800c1b6:	68fa      	ldr	r2, [r7, #12]
 800c1b8:	429a      	cmp	r2, r3
 800c1ba:	d201      	bcs.n	800c1c0 <create_chain+0x60>
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	e063      	b.n	800c288 <create_chain+0x128>
		scl = clst;
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c1c4:	69bb      	ldr	r3, [r7, #24]
 800c1c6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c1c8:	69fb      	ldr	r3, [r7, #28]
 800c1ca:	3301      	adds	r3, #1
 800c1cc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	695b      	ldr	r3, [r3, #20]
 800c1d2:	69fa      	ldr	r2, [r7, #28]
 800c1d4:	429a      	cmp	r2, r3
 800c1d6:	d307      	bcc.n	800c1e8 <create_chain+0x88>
				ncl = 2;
 800c1d8:	2302      	movs	r3, #2
 800c1da:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c1dc:	69fa      	ldr	r2, [r7, #28]
 800c1de:	69bb      	ldr	r3, [r7, #24]
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	d901      	bls.n	800c1e8 <create_chain+0x88>
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	e04f      	b.n	800c288 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c1e8:	69f9      	ldr	r1, [r7, #28]
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f7ff fdbf 	bl	800bd6e <get_fat>
 800c1f0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d00e      	beq.n	800c216 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	2b01      	cmp	r3, #1
 800c1fc:	d003      	beq.n	800c206 <create_chain+0xa6>
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c204:	d101      	bne.n	800c20a <create_chain+0xaa>
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	e03e      	b.n	800c288 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c20a:	69fa      	ldr	r2, [r7, #28]
 800c20c:	69bb      	ldr	r3, [r7, #24]
 800c20e:	429a      	cmp	r2, r3
 800c210:	d1da      	bne.n	800c1c8 <create_chain+0x68>
 800c212:	2300      	movs	r3, #0
 800c214:	e038      	b.n	800c288 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c216:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c218:	f04f 32ff 	mov.w	r2, #4294967295
 800c21c:	69f9      	ldr	r1, [r7, #28]
 800c21e:	6938      	ldr	r0, [r7, #16]
 800c220:	f7ff fe4d 	bl	800bebe <put_fat>
 800c224:	4603      	mov	r3, r0
 800c226:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c228:	7dfb      	ldrb	r3, [r7, #23]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d109      	bne.n	800c242 <create_chain+0xe2>
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d006      	beq.n	800c242 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c234:	69fa      	ldr	r2, [r7, #28]
 800c236:	6839      	ldr	r1, [r7, #0]
 800c238:	6938      	ldr	r0, [r7, #16]
 800c23a:	f7ff fe40 	bl	800bebe <put_fat>
 800c23e:	4603      	mov	r3, r0
 800c240:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c242:	7dfb      	ldrb	r3, [r7, #23]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d116      	bne.n	800c276 <create_chain+0x116>
		fs->last_clst = ncl;
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	69fa      	ldr	r2, [r7, #28]
 800c24c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	691a      	ldr	r2, [r3, #16]
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	695b      	ldr	r3, [r3, #20]
 800c256:	3b02      	subs	r3, #2
 800c258:	429a      	cmp	r2, r3
 800c25a:	d804      	bhi.n	800c266 <create_chain+0x106>
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	691b      	ldr	r3, [r3, #16]
 800c260:	1e5a      	subs	r2, r3, #1
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	791b      	ldrb	r3, [r3, #4]
 800c26a:	f043 0301 	orr.w	r3, r3, #1
 800c26e:	b2da      	uxtb	r2, r3
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	711a      	strb	r2, [r3, #4]
 800c274:	e007      	b.n	800c286 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c276:	7dfb      	ldrb	r3, [r7, #23]
 800c278:	2b01      	cmp	r3, #1
 800c27a:	d102      	bne.n	800c282 <create_chain+0x122>
 800c27c:	f04f 33ff 	mov.w	r3, #4294967295
 800c280:	e000      	b.n	800c284 <create_chain+0x124>
 800c282:	2301      	movs	r3, #1
 800c284:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c286:	69fb      	ldr	r3, [r7, #28]
}
 800c288:	4618      	mov	r0, r3
 800c28a:	3720      	adds	r7, #32
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c290:	b480      	push	{r7}
 800c292:	b087      	sub	sp, #28
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2a4:	3304      	adds	r3, #4
 800c2a6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	0a5b      	lsrs	r3, r3, #9
 800c2ac:	68fa      	ldr	r2, [r7, #12]
 800c2ae:	8952      	ldrh	r2, [r2, #10]
 800c2b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2b4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	1d1a      	adds	r2, r3, #4
 800c2ba:	613a      	str	r2, [r7, #16]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d101      	bne.n	800c2ca <clmt_clust+0x3a>
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	e010      	b.n	800c2ec <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c2ca:	697a      	ldr	r2, [r7, #20]
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d307      	bcc.n	800c2e2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c2d2:	697a      	ldr	r2, [r7, #20]
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	1ad3      	subs	r3, r2, r3
 800c2d8:	617b      	str	r3, [r7, #20]
 800c2da:	693b      	ldr	r3, [r7, #16]
 800c2dc:	3304      	adds	r3, #4
 800c2de:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c2e0:	e7e9      	b.n	800c2b6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c2e2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	681a      	ldr	r2, [r3, #0]
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	4413      	add	r3, r2
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	371c      	adds	r7, #28
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr

0800c2f8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b086      	sub	sp, #24
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
 800c300:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c30e:	d204      	bcs.n	800c31a <dir_sdi+0x22>
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	f003 031f 	and.w	r3, r3, #31
 800c316:	2b00      	cmp	r3, #0
 800c318:	d001      	beq.n	800c31e <dir_sdi+0x26>
		return FR_INT_ERR;
 800c31a:	2302      	movs	r3, #2
 800c31c:	e063      	b.n	800c3e6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	683a      	ldr	r2, [r7, #0]
 800c322:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	689b      	ldr	r3, [r3, #8]
 800c328:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d106      	bne.n	800c33e <dir_sdi+0x46>
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	781b      	ldrb	r3, [r3, #0]
 800c334:	2b02      	cmp	r3, #2
 800c336:	d902      	bls.n	800c33e <dir_sdi+0x46>
		clst = fs->dirbase;
 800c338:	693b      	ldr	r3, [r7, #16]
 800c33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c33c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d10c      	bne.n	800c35e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	095b      	lsrs	r3, r3, #5
 800c348:	693a      	ldr	r2, [r7, #16]
 800c34a:	8912      	ldrh	r2, [r2, #8]
 800c34c:	4293      	cmp	r3, r2
 800c34e:	d301      	bcc.n	800c354 <dir_sdi+0x5c>
 800c350:	2302      	movs	r3, #2
 800c352:	e048      	b.n	800c3e6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	61da      	str	r2, [r3, #28]
 800c35c:	e029      	b.n	800c3b2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	895b      	ldrh	r3, [r3, #10]
 800c362:	025b      	lsls	r3, r3, #9
 800c364:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c366:	e019      	b.n	800c39c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6979      	ldr	r1, [r7, #20]
 800c36c:	4618      	mov	r0, r3
 800c36e:	f7ff fcfe 	bl	800bd6e <get_fat>
 800c372:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c374:	697b      	ldr	r3, [r7, #20]
 800c376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c37a:	d101      	bne.n	800c380 <dir_sdi+0x88>
 800c37c:	2301      	movs	r3, #1
 800c37e:	e032      	b.n	800c3e6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	2b01      	cmp	r3, #1
 800c384:	d904      	bls.n	800c390 <dir_sdi+0x98>
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	695b      	ldr	r3, [r3, #20]
 800c38a:	697a      	ldr	r2, [r7, #20]
 800c38c:	429a      	cmp	r2, r3
 800c38e:	d301      	bcc.n	800c394 <dir_sdi+0x9c>
 800c390:	2302      	movs	r3, #2
 800c392:	e028      	b.n	800c3e6 <dir_sdi+0xee>
			ofs -= csz;
 800c394:	683a      	ldr	r2, [r7, #0]
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	1ad3      	subs	r3, r2, r3
 800c39a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c39c:	683a      	ldr	r2, [r7, #0]
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	d2e1      	bcs.n	800c368 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c3a4:	6979      	ldr	r1, [r7, #20]
 800c3a6:	6938      	ldr	r0, [r7, #16]
 800c3a8:	f7ff fcc2 	bl	800bd30 <clust2sect>
 800c3ac:	4602      	mov	r2, r0
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	697a      	ldr	r2, [r7, #20]
 800c3b6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	69db      	ldr	r3, [r3, #28]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d101      	bne.n	800c3c4 <dir_sdi+0xcc>
 800c3c0:	2302      	movs	r3, #2
 800c3c2:	e010      	b.n	800c3e6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	69da      	ldr	r2, [r3, #28]
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	0a5b      	lsrs	r3, r3, #9
 800c3cc:	441a      	add	r2, r3
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c3d2:	693b      	ldr	r3, [r7, #16]
 800c3d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3de:	441a      	add	r2, r3
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c3e4:	2300      	movs	r3, #0
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3718      	adds	r7, #24
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}

0800c3ee <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c3ee:	b580      	push	{r7, lr}
 800c3f0:	b086      	sub	sp, #24
 800c3f2:	af00      	add	r7, sp, #0
 800c3f4:	6078      	str	r0, [r7, #4]
 800c3f6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	695b      	ldr	r3, [r3, #20]
 800c402:	3320      	adds	r3, #32
 800c404:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	69db      	ldr	r3, [r3, #28]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d003      	beq.n	800c416 <dir_next+0x28>
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c414:	d301      	bcc.n	800c41a <dir_next+0x2c>
 800c416:	2304      	movs	r3, #4
 800c418:	e0aa      	b.n	800c570 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c420:	2b00      	cmp	r3, #0
 800c422:	f040 8098 	bne.w	800c556 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	69db      	ldr	r3, [r3, #28]
 800c42a:	1c5a      	adds	r2, r3, #1
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	699b      	ldr	r3, [r3, #24]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d10b      	bne.n	800c450 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	095b      	lsrs	r3, r3, #5
 800c43c:	68fa      	ldr	r2, [r7, #12]
 800c43e:	8912      	ldrh	r2, [r2, #8]
 800c440:	4293      	cmp	r3, r2
 800c442:	f0c0 8088 	bcc.w	800c556 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2200      	movs	r2, #0
 800c44a:	61da      	str	r2, [r3, #28]
 800c44c:	2304      	movs	r3, #4
 800c44e:	e08f      	b.n	800c570 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	0a5b      	lsrs	r3, r3, #9
 800c454:	68fa      	ldr	r2, [r7, #12]
 800c456:	8952      	ldrh	r2, [r2, #10]
 800c458:	3a01      	subs	r2, #1
 800c45a:	4013      	ands	r3, r2
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d17a      	bne.n	800c556 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c460:	687a      	ldr	r2, [r7, #4]
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	699b      	ldr	r3, [r3, #24]
 800c466:	4619      	mov	r1, r3
 800c468:	4610      	mov	r0, r2
 800c46a:	f7ff fc80 	bl	800bd6e <get_fat>
 800c46e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	2b01      	cmp	r3, #1
 800c474:	d801      	bhi.n	800c47a <dir_next+0x8c>
 800c476:	2302      	movs	r3, #2
 800c478:	e07a      	b.n	800c570 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c480:	d101      	bne.n	800c486 <dir_next+0x98>
 800c482:	2301      	movs	r3, #1
 800c484:	e074      	b.n	800c570 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	695b      	ldr	r3, [r3, #20]
 800c48a:	697a      	ldr	r2, [r7, #20]
 800c48c:	429a      	cmp	r2, r3
 800c48e:	d358      	bcc.n	800c542 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d104      	bne.n	800c4a0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2200      	movs	r2, #0
 800c49a:	61da      	str	r2, [r3, #28]
 800c49c:	2304      	movs	r3, #4
 800c49e:	e067      	b.n	800c570 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c4a0:	687a      	ldr	r2, [r7, #4]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	699b      	ldr	r3, [r3, #24]
 800c4a6:	4619      	mov	r1, r3
 800c4a8:	4610      	mov	r0, r2
 800c4aa:	f7ff fe59 	bl	800c160 <create_chain>
 800c4ae:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d101      	bne.n	800c4ba <dir_next+0xcc>
 800c4b6:	2307      	movs	r3, #7
 800c4b8:	e05a      	b.n	800c570 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	2b01      	cmp	r3, #1
 800c4be:	d101      	bne.n	800c4c4 <dir_next+0xd6>
 800c4c0:	2302      	movs	r3, #2
 800c4c2:	e055      	b.n	800c570 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4ca:	d101      	bne.n	800c4d0 <dir_next+0xe2>
 800c4cc:	2301      	movs	r3, #1
 800c4ce:	e04f      	b.n	800c570 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c4d0:	68f8      	ldr	r0, [r7, #12]
 800c4d2:	f7ff fb4d 	bl	800bb70 <sync_window>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d001      	beq.n	800c4e0 <dir_next+0xf2>
 800c4dc:	2301      	movs	r3, #1
 800c4de:	e047      	b.n	800c570 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	3330      	adds	r3, #48	; 0x30
 800c4e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c4e8:	2100      	movs	r1, #0
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7ff f977 	bl	800b7de <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	613b      	str	r3, [r7, #16]
 800c4f4:	6979      	ldr	r1, [r7, #20]
 800c4f6:	68f8      	ldr	r0, [r7, #12]
 800c4f8:	f7ff fc1a 	bl	800bd30 <clust2sect>
 800c4fc:	4602      	mov	r2, r0
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	62da      	str	r2, [r3, #44]	; 0x2c
 800c502:	e012      	b.n	800c52a <dir_next+0x13c>
						fs->wflag = 1;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	2201      	movs	r2, #1
 800c508:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c50a:	68f8      	ldr	r0, [r7, #12]
 800c50c:	f7ff fb30 	bl	800bb70 <sync_window>
 800c510:	4603      	mov	r3, r0
 800c512:	2b00      	cmp	r3, #0
 800c514:	d001      	beq.n	800c51a <dir_next+0x12c>
 800c516:	2301      	movs	r3, #1
 800c518:	e02a      	b.n	800c570 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	3301      	adds	r3, #1
 800c51e:	613b      	str	r3, [r7, #16]
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c524:	1c5a      	adds	r2, r3, #1
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	62da      	str	r2, [r3, #44]	; 0x2c
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	895b      	ldrh	r3, [r3, #10]
 800c52e:	461a      	mov	r2, r3
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	4293      	cmp	r3, r2
 800c534:	d3e6      	bcc.n	800c504 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	1ad2      	subs	r2, r2, r3
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	697a      	ldr	r2, [r7, #20]
 800c546:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c548:	6979      	ldr	r1, [r7, #20]
 800c54a:	68f8      	ldr	r0, [r7, #12]
 800c54c:	f7ff fbf0 	bl	800bd30 <clust2sect>
 800c550:	4602      	mov	r2, r0
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	68ba      	ldr	r2, [r7, #8]
 800c55a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c568:	441a      	add	r2, r3
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c56e:	2300      	movs	r3, #0
}
 800c570:	4618      	mov	r0, r3
 800c572:	3718      	adds	r7, #24
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}

0800c578 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b086      	sub	sp, #24
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
 800c580:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c588:	2100      	movs	r1, #0
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f7ff feb4 	bl	800c2f8 <dir_sdi>
 800c590:	4603      	mov	r3, r0
 800c592:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c594:	7dfb      	ldrb	r3, [r7, #23]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d12b      	bne.n	800c5f2 <dir_alloc+0x7a>
		n = 0;
 800c59a:	2300      	movs	r3, #0
 800c59c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	69db      	ldr	r3, [r3, #28]
 800c5a2:	4619      	mov	r1, r3
 800c5a4:	68f8      	ldr	r0, [r7, #12]
 800c5a6:	f7ff fb27 	bl	800bbf8 <move_window>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c5ae:	7dfb      	ldrb	r3, [r7, #23]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d11d      	bne.n	800c5f0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6a1b      	ldr	r3, [r3, #32]
 800c5b8:	781b      	ldrb	r3, [r3, #0]
 800c5ba:	2be5      	cmp	r3, #229	; 0xe5
 800c5bc:	d004      	beq.n	800c5c8 <dir_alloc+0x50>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6a1b      	ldr	r3, [r3, #32]
 800c5c2:	781b      	ldrb	r3, [r3, #0]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d107      	bne.n	800c5d8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	3301      	adds	r3, #1
 800c5cc:	613b      	str	r3, [r7, #16]
 800c5ce:	693a      	ldr	r2, [r7, #16]
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	d102      	bne.n	800c5dc <dir_alloc+0x64>
 800c5d6:	e00c      	b.n	800c5f2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c5d8:	2300      	movs	r3, #0
 800c5da:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c5dc:	2101      	movs	r1, #1
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f7ff ff05 	bl	800c3ee <dir_next>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c5e8:	7dfb      	ldrb	r3, [r7, #23]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d0d7      	beq.n	800c59e <dir_alloc+0x26>
 800c5ee:	e000      	b.n	800c5f2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c5f0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c5f2:	7dfb      	ldrb	r3, [r7, #23]
 800c5f4:	2b04      	cmp	r3, #4
 800c5f6:	d101      	bne.n	800c5fc <dir_alloc+0x84>
 800c5f8:	2307      	movs	r3, #7
 800c5fa:	75fb      	strb	r3, [r7, #23]
	return res;
 800c5fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3718      	adds	r7, #24
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}

0800c606 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c606:	b580      	push	{r7, lr}
 800c608:	b084      	sub	sp, #16
 800c60a:	af00      	add	r7, sp, #0
 800c60c:	6078      	str	r0, [r7, #4]
 800c60e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	331a      	adds	r3, #26
 800c614:	4618      	mov	r0, r3
 800c616:	f7ff f83f 	bl	800b698 <ld_word>
 800c61a:	4603      	mov	r3, r0
 800c61c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	781b      	ldrb	r3, [r3, #0]
 800c622:	2b03      	cmp	r3, #3
 800c624:	d109      	bne.n	800c63a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	3314      	adds	r3, #20
 800c62a:	4618      	mov	r0, r3
 800c62c:	f7ff f834 	bl	800b698 <ld_word>
 800c630:	4603      	mov	r3, r0
 800c632:	041b      	lsls	r3, r3, #16
 800c634:	68fa      	ldr	r2, [r7, #12]
 800c636:	4313      	orrs	r3, r2
 800c638:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c63a:	68fb      	ldr	r3, [r7, #12]
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	3710      	adds	r7, #16
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}

0800c644 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b084      	sub	sp, #16
 800c648:	af00      	add	r7, sp, #0
 800c64a:	60f8      	str	r0, [r7, #12]
 800c64c:	60b9      	str	r1, [r7, #8]
 800c64e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	331a      	adds	r3, #26
 800c654:	687a      	ldr	r2, [r7, #4]
 800c656:	b292      	uxth	r2, r2
 800c658:	4611      	mov	r1, r2
 800c65a:	4618      	mov	r0, r3
 800c65c:	f7ff f857 	bl	800b70e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	781b      	ldrb	r3, [r3, #0]
 800c664:	2b03      	cmp	r3, #3
 800c666:	d109      	bne.n	800c67c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	f103 0214 	add.w	r2, r3, #20
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	0c1b      	lsrs	r3, r3, #16
 800c672:	b29b      	uxth	r3, r3
 800c674:	4619      	mov	r1, r3
 800c676:	4610      	mov	r0, r2
 800c678:	f7ff f849 	bl	800b70e <st_word>
	}
}
 800c67c:	bf00      	nop
 800c67e:	3710      	adds	r7, #16
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}

0800c684 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b086      	sub	sp, #24
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c692:	2100      	movs	r1, #0
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f7ff fe2f 	bl	800c2f8 <dir_sdi>
 800c69a:	4603      	mov	r3, r0
 800c69c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c69e:	7dfb      	ldrb	r3, [r7, #23]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d001      	beq.n	800c6a8 <dir_find+0x24>
 800c6a4:	7dfb      	ldrb	r3, [r7, #23]
 800c6a6:	e03e      	b.n	800c726 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	69db      	ldr	r3, [r3, #28]
 800c6ac:	4619      	mov	r1, r3
 800c6ae:	6938      	ldr	r0, [r7, #16]
 800c6b0:	f7ff faa2 	bl	800bbf8 <move_window>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c6b8:	7dfb      	ldrb	r3, [r7, #23]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d12f      	bne.n	800c71e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6a1b      	ldr	r3, [r3, #32]
 800c6c2:	781b      	ldrb	r3, [r3, #0]
 800c6c4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c6c6:	7bfb      	ldrb	r3, [r7, #15]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d102      	bne.n	800c6d2 <dir_find+0x4e>
 800c6cc:	2304      	movs	r3, #4
 800c6ce:	75fb      	strb	r3, [r7, #23]
 800c6d0:	e028      	b.n	800c724 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6a1b      	ldr	r3, [r3, #32]
 800c6d6:	330b      	adds	r3, #11
 800c6d8:	781b      	ldrb	r3, [r3, #0]
 800c6da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c6de:	b2da      	uxtb	r2, r3
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	6a1b      	ldr	r3, [r3, #32]
 800c6e8:	330b      	adds	r3, #11
 800c6ea:	781b      	ldrb	r3, [r3, #0]
 800c6ec:	f003 0308 	and.w	r3, r3, #8
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d10a      	bne.n	800c70a <dir_find+0x86>
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6a18      	ldr	r0, [r3, #32]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	3324      	adds	r3, #36	; 0x24
 800c6fc:	220b      	movs	r2, #11
 800c6fe:	4619      	mov	r1, r3
 800c700:	f7ff f888 	bl	800b814 <mem_cmp>
 800c704:	4603      	mov	r3, r0
 800c706:	2b00      	cmp	r3, #0
 800c708:	d00b      	beq.n	800c722 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c70a:	2100      	movs	r1, #0
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f7ff fe6e 	bl	800c3ee <dir_next>
 800c712:	4603      	mov	r3, r0
 800c714:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c716:	7dfb      	ldrb	r3, [r7, #23]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d0c5      	beq.n	800c6a8 <dir_find+0x24>
 800c71c:	e002      	b.n	800c724 <dir_find+0xa0>
		if (res != FR_OK) break;
 800c71e:	bf00      	nop
 800c720:	e000      	b.n	800c724 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c722:	bf00      	nop

	return res;
 800c724:	7dfb      	ldrb	r3, [r7, #23]
}
 800c726:	4618      	mov	r0, r3
 800c728:	3718      	adds	r7, #24
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}

0800c72e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c72e:	b580      	push	{r7, lr}
 800c730:	b084      	sub	sp, #16
 800c732:	af00      	add	r7, sp, #0
 800c734:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c73c:	2101      	movs	r1, #1
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f7ff ff1a 	bl	800c578 <dir_alloc>
 800c744:	4603      	mov	r3, r0
 800c746:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c748:	7bfb      	ldrb	r3, [r7, #15]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d11c      	bne.n	800c788 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	69db      	ldr	r3, [r3, #28]
 800c752:	4619      	mov	r1, r3
 800c754:	68b8      	ldr	r0, [r7, #8]
 800c756:	f7ff fa4f 	bl	800bbf8 <move_window>
 800c75a:	4603      	mov	r3, r0
 800c75c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c75e:	7bfb      	ldrb	r3, [r7, #15]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d111      	bne.n	800c788 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6a1b      	ldr	r3, [r3, #32]
 800c768:	2220      	movs	r2, #32
 800c76a:	2100      	movs	r1, #0
 800c76c:	4618      	mov	r0, r3
 800c76e:	f7ff f836 	bl	800b7de <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6a18      	ldr	r0, [r3, #32]
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	3324      	adds	r3, #36	; 0x24
 800c77a:	220b      	movs	r2, #11
 800c77c:	4619      	mov	r1, r3
 800c77e:	f7ff f80d 	bl	800b79c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	2201      	movs	r2, #1
 800c786:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c788:	7bfb      	ldrb	r3, [r7, #15]
}
 800c78a:	4618      	mov	r0, r3
 800c78c:	3710      	adds	r7, #16
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}
	...

0800c794 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b088      	sub	sp, #32
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	60fb      	str	r3, [r7, #12]
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	3324      	adds	r3, #36	; 0x24
 800c7a8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c7aa:	220b      	movs	r2, #11
 800c7ac:	2120      	movs	r1, #32
 800c7ae:	68b8      	ldr	r0, [r7, #8]
 800c7b0:	f7ff f815 	bl	800b7de <mem_set>
	si = i = 0; ni = 8;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	613b      	str	r3, [r7, #16]
 800c7b8:	693b      	ldr	r3, [r7, #16]
 800c7ba:	61fb      	str	r3, [r7, #28]
 800c7bc:	2308      	movs	r3, #8
 800c7be:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c7c0:	69fb      	ldr	r3, [r7, #28]
 800c7c2:	1c5a      	adds	r2, r3, #1
 800c7c4:	61fa      	str	r2, [r7, #28]
 800c7c6:	68fa      	ldr	r2, [r7, #12]
 800c7c8:	4413      	add	r3, r2
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c7ce:	7efb      	ldrb	r3, [r7, #27]
 800c7d0:	2b20      	cmp	r3, #32
 800c7d2:	d94e      	bls.n	800c872 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c7d4:	7efb      	ldrb	r3, [r7, #27]
 800c7d6:	2b2f      	cmp	r3, #47	; 0x2f
 800c7d8:	d006      	beq.n	800c7e8 <create_name+0x54>
 800c7da:	7efb      	ldrb	r3, [r7, #27]
 800c7dc:	2b5c      	cmp	r3, #92	; 0x5c
 800c7de:	d110      	bne.n	800c802 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c7e0:	e002      	b.n	800c7e8 <create_name+0x54>
 800c7e2:	69fb      	ldr	r3, [r7, #28]
 800c7e4:	3301      	adds	r3, #1
 800c7e6:	61fb      	str	r3, [r7, #28]
 800c7e8:	68fa      	ldr	r2, [r7, #12]
 800c7ea:	69fb      	ldr	r3, [r7, #28]
 800c7ec:	4413      	add	r3, r2
 800c7ee:	781b      	ldrb	r3, [r3, #0]
 800c7f0:	2b2f      	cmp	r3, #47	; 0x2f
 800c7f2:	d0f6      	beq.n	800c7e2 <create_name+0x4e>
 800c7f4:	68fa      	ldr	r2, [r7, #12]
 800c7f6:	69fb      	ldr	r3, [r7, #28]
 800c7f8:	4413      	add	r3, r2
 800c7fa:	781b      	ldrb	r3, [r3, #0]
 800c7fc:	2b5c      	cmp	r3, #92	; 0x5c
 800c7fe:	d0f0      	beq.n	800c7e2 <create_name+0x4e>
			break;
 800c800:	e038      	b.n	800c874 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c802:	7efb      	ldrb	r3, [r7, #27]
 800c804:	2b2e      	cmp	r3, #46	; 0x2e
 800c806:	d003      	beq.n	800c810 <create_name+0x7c>
 800c808:	693a      	ldr	r2, [r7, #16]
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d30c      	bcc.n	800c82a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	2b0b      	cmp	r3, #11
 800c814:	d002      	beq.n	800c81c <create_name+0x88>
 800c816:	7efb      	ldrb	r3, [r7, #27]
 800c818:	2b2e      	cmp	r3, #46	; 0x2e
 800c81a:	d001      	beq.n	800c820 <create_name+0x8c>
 800c81c:	2306      	movs	r3, #6
 800c81e:	e044      	b.n	800c8aa <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c820:	2308      	movs	r3, #8
 800c822:	613b      	str	r3, [r7, #16]
 800c824:	230b      	movs	r3, #11
 800c826:	617b      	str	r3, [r7, #20]
			continue;
 800c828:	e022      	b.n	800c870 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c82a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	da04      	bge.n	800c83c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c832:	7efb      	ldrb	r3, [r7, #27]
 800c834:	3b80      	subs	r3, #128	; 0x80
 800c836:	4a1f      	ldr	r2, [pc, #124]	; (800c8b4 <create_name+0x120>)
 800c838:	5cd3      	ldrb	r3, [r2, r3]
 800c83a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c83c:	7efb      	ldrb	r3, [r7, #27]
 800c83e:	4619      	mov	r1, r3
 800c840:	481d      	ldr	r0, [pc, #116]	; (800c8b8 <create_name+0x124>)
 800c842:	f7ff f80e 	bl	800b862 <chk_chr>
 800c846:	4603      	mov	r3, r0
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d001      	beq.n	800c850 <create_name+0xbc>
 800c84c:	2306      	movs	r3, #6
 800c84e:	e02c      	b.n	800c8aa <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c850:	7efb      	ldrb	r3, [r7, #27]
 800c852:	2b60      	cmp	r3, #96	; 0x60
 800c854:	d905      	bls.n	800c862 <create_name+0xce>
 800c856:	7efb      	ldrb	r3, [r7, #27]
 800c858:	2b7a      	cmp	r3, #122	; 0x7a
 800c85a:	d802      	bhi.n	800c862 <create_name+0xce>
 800c85c:	7efb      	ldrb	r3, [r7, #27]
 800c85e:	3b20      	subs	r3, #32
 800c860:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c862:	693b      	ldr	r3, [r7, #16]
 800c864:	1c5a      	adds	r2, r3, #1
 800c866:	613a      	str	r2, [r7, #16]
 800c868:	68ba      	ldr	r2, [r7, #8]
 800c86a:	4413      	add	r3, r2
 800c86c:	7efa      	ldrb	r2, [r7, #27]
 800c86e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c870:	e7a6      	b.n	800c7c0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c872:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c874:	68fa      	ldr	r2, [r7, #12]
 800c876:	69fb      	ldr	r3, [r7, #28]
 800c878:	441a      	add	r2, r3
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d101      	bne.n	800c888 <create_name+0xf4>
 800c884:	2306      	movs	r3, #6
 800c886:	e010      	b.n	800c8aa <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	781b      	ldrb	r3, [r3, #0]
 800c88c:	2be5      	cmp	r3, #229	; 0xe5
 800c88e:	d102      	bne.n	800c896 <create_name+0x102>
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	2205      	movs	r2, #5
 800c894:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c896:	7efb      	ldrb	r3, [r7, #27]
 800c898:	2b20      	cmp	r3, #32
 800c89a:	d801      	bhi.n	800c8a0 <create_name+0x10c>
 800c89c:	2204      	movs	r2, #4
 800c89e:	e000      	b.n	800c8a2 <create_name+0x10e>
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	330b      	adds	r3, #11
 800c8a6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c8a8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	3720      	adds	r7, #32
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}
 800c8b2:	bf00      	nop
 800c8b4:	080116f4 	.word	0x080116f4
 800c8b8:	0800fbac 	.word	0x0800fbac

0800c8bc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b086      	sub	sp, #24
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c8ca:	693b      	ldr	r3, [r7, #16]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c8d0:	e002      	b.n	800c8d8 <follow_path+0x1c>
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	3301      	adds	r3, #1
 800c8d6:	603b      	str	r3, [r7, #0]
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	781b      	ldrb	r3, [r3, #0]
 800c8dc:	2b2f      	cmp	r3, #47	; 0x2f
 800c8de:	d0f8      	beq.n	800c8d2 <follow_path+0x16>
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	781b      	ldrb	r3, [r3, #0]
 800c8e4:	2b5c      	cmp	r3, #92	; 0x5c
 800c8e6:	d0f4      	beq.n	800c8d2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	781b      	ldrb	r3, [r3, #0]
 800c8f2:	2b1f      	cmp	r3, #31
 800c8f4:	d80a      	bhi.n	800c90c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2280      	movs	r2, #128	; 0x80
 800c8fa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c8fe:	2100      	movs	r1, #0
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f7ff fcf9 	bl	800c2f8 <dir_sdi>
 800c906:	4603      	mov	r3, r0
 800c908:	75fb      	strb	r3, [r7, #23]
 800c90a:	e043      	b.n	800c994 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c90c:	463b      	mov	r3, r7
 800c90e:	4619      	mov	r1, r3
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	f7ff ff3f 	bl	800c794 <create_name>
 800c916:	4603      	mov	r3, r0
 800c918:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c91a:	7dfb      	ldrb	r3, [r7, #23]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d134      	bne.n	800c98a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f7ff feaf 	bl	800c684 <dir_find>
 800c926:	4603      	mov	r3, r0
 800c928:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c930:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c932:	7dfb      	ldrb	r3, [r7, #23]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d00a      	beq.n	800c94e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c938:	7dfb      	ldrb	r3, [r7, #23]
 800c93a:	2b04      	cmp	r3, #4
 800c93c:	d127      	bne.n	800c98e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c93e:	7afb      	ldrb	r3, [r7, #11]
 800c940:	f003 0304 	and.w	r3, r3, #4
 800c944:	2b00      	cmp	r3, #0
 800c946:	d122      	bne.n	800c98e <follow_path+0xd2>
 800c948:	2305      	movs	r3, #5
 800c94a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c94c:	e01f      	b.n	800c98e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c94e:	7afb      	ldrb	r3, [r7, #11]
 800c950:	f003 0304 	and.w	r3, r3, #4
 800c954:	2b00      	cmp	r3, #0
 800c956:	d11c      	bne.n	800c992 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	799b      	ldrb	r3, [r3, #6]
 800c95c:	f003 0310 	and.w	r3, r3, #16
 800c960:	2b00      	cmp	r3, #0
 800c962:	d102      	bne.n	800c96a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c964:	2305      	movs	r3, #5
 800c966:	75fb      	strb	r3, [r7, #23]
 800c968:	e014      	b.n	800c994 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	695b      	ldr	r3, [r3, #20]
 800c974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c978:	4413      	add	r3, r2
 800c97a:	4619      	mov	r1, r3
 800c97c:	68f8      	ldr	r0, [r7, #12]
 800c97e:	f7ff fe42 	bl	800c606 <ld_clust>
 800c982:	4602      	mov	r2, r0
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c988:	e7c0      	b.n	800c90c <follow_path+0x50>
			if (res != FR_OK) break;
 800c98a:	bf00      	nop
 800c98c:	e002      	b.n	800c994 <follow_path+0xd8>
				break;
 800c98e:	bf00      	nop
 800c990:	e000      	b.n	800c994 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c992:	bf00      	nop
			}
		}
	}

	return res;
 800c994:	7dfb      	ldrb	r3, [r7, #23]
}
 800c996:	4618      	mov	r0, r3
 800c998:	3718      	adds	r7, #24
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}

0800c99e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c99e:	b480      	push	{r7}
 800c9a0:	b087      	sub	sp, #28
 800c9a2:	af00      	add	r7, sp, #0
 800c9a4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c9a6:	f04f 33ff 	mov.w	r3, #4294967295
 800c9aa:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d031      	beq.n	800ca18 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	617b      	str	r3, [r7, #20]
 800c9ba:	e002      	b.n	800c9c2 <get_ldnumber+0x24>
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	3301      	adds	r3, #1
 800c9c0:	617b      	str	r3, [r7, #20]
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	2b20      	cmp	r3, #32
 800c9c8:	d903      	bls.n	800c9d2 <get_ldnumber+0x34>
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	781b      	ldrb	r3, [r3, #0]
 800c9ce:	2b3a      	cmp	r3, #58	; 0x3a
 800c9d0:	d1f4      	bne.n	800c9bc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	781b      	ldrb	r3, [r3, #0]
 800c9d6:	2b3a      	cmp	r3, #58	; 0x3a
 800c9d8:	d11c      	bne.n	800ca14 <get_ldnumber+0x76>
			tp = *path;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	1c5a      	adds	r2, r3, #1
 800c9e4:	60fa      	str	r2, [r7, #12]
 800c9e6:	781b      	ldrb	r3, [r3, #0]
 800c9e8:	3b30      	subs	r3, #48	; 0x30
 800c9ea:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	2b09      	cmp	r3, #9
 800c9f0:	d80e      	bhi.n	800ca10 <get_ldnumber+0x72>
 800c9f2:	68fa      	ldr	r2, [r7, #12]
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	429a      	cmp	r2, r3
 800c9f8:	d10a      	bne.n	800ca10 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d107      	bne.n	800ca10 <get_ldnumber+0x72>
					vol = (int)i;
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ca04:	697b      	ldr	r3, [r7, #20]
 800ca06:	3301      	adds	r3, #1
 800ca08:	617b      	str	r3, [r7, #20]
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	697a      	ldr	r2, [r7, #20]
 800ca0e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	e002      	b.n	800ca1a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ca14:	2300      	movs	r3, #0
 800ca16:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ca18:	693b      	ldr	r3, [r7, #16]
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	371c      	adds	r7, #28
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca24:	4770      	bx	lr
	...

0800ca28 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b082      	sub	sp, #8
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2200      	movs	r2, #0
 800ca36:	70da      	strb	r2, [r3, #3]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f04f 32ff 	mov.w	r2, #4294967295
 800ca3e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ca40:	6839      	ldr	r1, [r7, #0]
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f7ff f8d8 	bl	800bbf8 <move_window>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d001      	beq.n	800ca52 <check_fs+0x2a>
 800ca4e:	2304      	movs	r3, #4
 800ca50:	e038      	b.n	800cac4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	3330      	adds	r3, #48	; 0x30
 800ca56:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f7fe fe1c 	bl	800b698 <ld_word>
 800ca60:	4603      	mov	r3, r0
 800ca62:	461a      	mov	r2, r3
 800ca64:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ca68:	429a      	cmp	r2, r3
 800ca6a:	d001      	beq.n	800ca70 <check_fs+0x48>
 800ca6c:	2303      	movs	r3, #3
 800ca6e:	e029      	b.n	800cac4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ca76:	2be9      	cmp	r3, #233	; 0xe9
 800ca78:	d009      	beq.n	800ca8e <check_fs+0x66>
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ca80:	2beb      	cmp	r3, #235	; 0xeb
 800ca82:	d11e      	bne.n	800cac2 <check_fs+0x9a>
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ca8a:	2b90      	cmp	r3, #144	; 0x90
 800ca8c:	d119      	bne.n	800cac2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	3330      	adds	r3, #48	; 0x30
 800ca92:	3336      	adds	r3, #54	; 0x36
 800ca94:	4618      	mov	r0, r3
 800ca96:	f7fe fe17 	bl	800b6c8 <ld_dword>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800caa0:	4a0a      	ldr	r2, [pc, #40]	; (800cacc <check_fs+0xa4>)
 800caa2:	4293      	cmp	r3, r2
 800caa4:	d101      	bne.n	800caaa <check_fs+0x82>
 800caa6:	2300      	movs	r3, #0
 800caa8:	e00c      	b.n	800cac4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	3330      	adds	r3, #48	; 0x30
 800caae:	3352      	adds	r3, #82	; 0x52
 800cab0:	4618      	mov	r0, r3
 800cab2:	f7fe fe09 	bl	800b6c8 <ld_dword>
 800cab6:	4603      	mov	r3, r0
 800cab8:	4a05      	ldr	r2, [pc, #20]	; (800cad0 <check_fs+0xa8>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	d101      	bne.n	800cac2 <check_fs+0x9a>
 800cabe:	2300      	movs	r3, #0
 800cac0:	e000      	b.n	800cac4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800cac2:	2302      	movs	r3, #2
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	3708      	adds	r7, #8
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}
 800cacc:	00544146 	.word	0x00544146
 800cad0:	33544146 	.word	0x33544146

0800cad4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b096      	sub	sp, #88	; 0x58
 800cad8:	af00      	add	r7, sp, #0
 800cada:	60f8      	str	r0, [r7, #12]
 800cadc:	60b9      	str	r1, [r7, #8]
 800cade:	4613      	mov	r3, r2
 800cae0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	2200      	movs	r2, #0
 800cae6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cae8:	68f8      	ldr	r0, [r7, #12]
 800caea:	f7ff ff58 	bl	800c99e <get_ldnumber>
 800caee:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800caf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	da01      	bge.n	800cafa <find_volume+0x26>
 800caf6:	230b      	movs	r3, #11
 800caf8:	e22d      	b.n	800cf56 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cafa:	4aa1      	ldr	r2, [pc, #644]	; (800cd80 <find_volume+0x2ac>)
 800cafc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cafe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb02:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cb04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d101      	bne.n	800cb0e <find_volume+0x3a>
 800cb0a:	230c      	movs	r3, #12
 800cb0c:	e223      	b.n	800cf56 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb12:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cb14:	79fb      	ldrb	r3, [r7, #7]
 800cb16:	f023 0301 	bic.w	r3, r3, #1
 800cb1a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cb1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb1e:	781b      	ldrb	r3, [r3, #0]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d01a      	beq.n	800cb5a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800cb24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb26:	785b      	ldrb	r3, [r3, #1]
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f7fe fd17 	bl	800b55c <disk_status>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cb34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cb38:	f003 0301 	and.w	r3, r3, #1
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d10c      	bne.n	800cb5a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cb40:	79fb      	ldrb	r3, [r7, #7]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d007      	beq.n	800cb56 <find_volume+0x82>
 800cb46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cb4a:	f003 0304 	and.w	r3, r3, #4
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d001      	beq.n	800cb56 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800cb52:	230a      	movs	r3, #10
 800cb54:	e1ff      	b.n	800cf56 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800cb56:	2300      	movs	r3, #0
 800cb58:	e1fd      	b.n	800cf56 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cb5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cb60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb62:	b2da      	uxtb	r2, r3
 800cb64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb66:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cb68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb6a:	785b      	ldrb	r3, [r3, #1]
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f7fe fd0f 	bl	800b590 <disk_initialize>
 800cb72:	4603      	mov	r3, r0
 800cb74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cb78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cb7c:	f003 0301 	and.w	r3, r3, #1
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d001      	beq.n	800cb88 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cb84:	2303      	movs	r3, #3
 800cb86:	e1e6      	b.n	800cf56 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cb88:	79fb      	ldrb	r3, [r7, #7]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d007      	beq.n	800cb9e <find_volume+0xca>
 800cb8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cb92:	f003 0304 	and.w	r3, r3, #4
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d001      	beq.n	800cb9e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800cb9a:	230a      	movs	r3, #10
 800cb9c:	e1db      	b.n	800cf56 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cba2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cba4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cba6:	f7ff ff3f 	bl	800ca28 <check_fs>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cbb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cbb4:	2b02      	cmp	r3, #2
 800cbb6:	d149      	bne.n	800cc4c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cbb8:	2300      	movs	r3, #0
 800cbba:	643b      	str	r3, [r7, #64]	; 0x40
 800cbbc:	e01e      	b.n	800cbfc <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cbbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cbc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbc6:	011b      	lsls	r3, r3, #4
 800cbc8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800cbcc:	4413      	add	r3, r2
 800cbce:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cbd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd2:	3304      	adds	r3, #4
 800cbd4:	781b      	ldrb	r3, [r3, #0]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d006      	beq.n	800cbe8 <find_volume+0x114>
 800cbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbdc:	3308      	adds	r3, #8
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f7fe fd72 	bl	800b6c8 <ld_dword>
 800cbe4:	4602      	mov	r2, r0
 800cbe6:	e000      	b.n	800cbea <find_volume+0x116>
 800cbe8:	2200      	movs	r2, #0
 800cbea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbec:	009b      	lsls	r3, r3, #2
 800cbee:	3358      	adds	r3, #88	; 0x58
 800cbf0:	443b      	add	r3, r7
 800cbf2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cbf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbf8:	3301      	adds	r3, #1
 800cbfa:	643b      	str	r3, [r7, #64]	; 0x40
 800cbfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbfe:	2b03      	cmp	r3, #3
 800cc00:	d9dd      	bls.n	800cbbe <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cc02:	2300      	movs	r3, #0
 800cc04:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800cc06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d002      	beq.n	800cc12 <find_volume+0x13e>
 800cc0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc0e:	3b01      	subs	r3, #1
 800cc10:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cc12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc14:	009b      	lsls	r3, r3, #2
 800cc16:	3358      	adds	r3, #88	; 0x58
 800cc18:	443b      	add	r3, r7
 800cc1a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cc1e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cc20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d005      	beq.n	800cc32 <find_volume+0x15e>
 800cc26:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cc28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cc2a:	f7ff fefd 	bl	800ca28 <check_fs>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	e000      	b.n	800cc34 <find_volume+0x160>
 800cc32:	2303      	movs	r3, #3
 800cc34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cc38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cc3c:	2b01      	cmp	r3, #1
 800cc3e:	d905      	bls.n	800cc4c <find_volume+0x178>
 800cc40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc42:	3301      	adds	r3, #1
 800cc44:	643b      	str	r3, [r7, #64]	; 0x40
 800cc46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc48:	2b03      	cmp	r3, #3
 800cc4a:	d9e2      	bls.n	800cc12 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cc4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cc50:	2b04      	cmp	r3, #4
 800cc52:	d101      	bne.n	800cc58 <find_volume+0x184>
 800cc54:	2301      	movs	r3, #1
 800cc56:	e17e      	b.n	800cf56 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cc58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cc5c:	2b01      	cmp	r3, #1
 800cc5e:	d901      	bls.n	800cc64 <find_volume+0x190>
 800cc60:	230d      	movs	r3, #13
 800cc62:	e178      	b.n	800cf56 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cc64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc66:	3330      	adds	r3, #48	; 0x30
 800cc68:	330b      	adds	r3, #11
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f7fe fd14 	bl	800b698 <ld_word>
 800cc70:	4603      	mov	r3, r0
 800cc72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc76:	d001      	beq.n	800cc7c <find_volume+0x1a8>
 800cc78:	230d      	movs	r3, #13
 800cc7a:	e16c      	b.n	800cf56 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cc7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc7e:	3330      	adds	r3, #48	; 0x30
 800cc80:	3316      	adds	r3, #22
 800cc82:	4618      	mov	r0, r3
 800cc84:	f7fe fd08 	bl	800b698 <ld_word>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cc8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d106      	bne.n	800cca0 <find_volume+0x1cc>
 800cc92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc94:	3330      	adds	r3, #48	; 0x30
 800cc96:	3324      	adds	r3, #36	; 0x24
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f7fe fd15 	bl	800b6c8 <ld_dword>
 800cc9e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800cca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cca4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800ccac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccae:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ccb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccb2:	789b      	ldrb	r3, [r3, #2]
 800ccb4:	2b01      	cmp	r3, #1
 800ccb6:	d005      	beq.n	800ccc4 <find_volume+0x1f0>
 800ccb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccba:	789b      	ldrb	r3, [r3, #2]
 800ccbc:	2b02      	cmp	r3, #2
 800ccbe:	d001      	beq.n	800ccc4 <find_volume+0x1f0>
 800ccc0:	230d      	movs	r3, #13
 800ccc2:	e148      	b.n	800cf56 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ccc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccc6:	789b      	ldrb	r3, [r3, #2]
 800ccc8:	461a      	mov	r2, r3
 800ccca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cccc:	fb02 f303 	mul.w	r3, r2, r3
 800ccd0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ccd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ccd8:	b29a      	uxth	r2, r3
 800ccda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccdc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ccde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cce0:	895b      	ldrh	r3, [r3, #10]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d008      	beq.n	800ccf8 <find_volume+0x224>
 800cce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cce8:	895b      	ldrh	r3, [r3, #10]
 800ccea:	461a      	mov	r2, r3
 800ccec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccee:	895b      	ldrh	r3, [r3, #10]
 800ccf0:	3b01      	subs	r3, #1
 800ccf2:	4013      	ands	r3, r2
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d001      	beq.n	800ccfc <find_volume+0x228>
 800ccf8:	230d      	movs	r3, #13
 800ccfa:	e12c      	b.n	800cf56 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ccfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccfe:	3330      	adds	r3, #48	; 0x30
 800cd00:	3311      	adds	r3, #17
 800cd02:	4618      	mov	r0, r3
 800cd04:	f7fe fcc8 	bl	800b698 <ld_word>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	461a      	mov	r2, r3
 800cd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd0e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cd10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd12:	891b      	ldrh	r3, [r3, #8]
 800cd14:	f003 030f 	and.w	r3, r3, #15
 800cd18:	b29b      	uxth	r3, r3
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d001      	beq.n	800cd22 <find_volume+0x24e>
 800cd1e:	230d      	movs	r3, #13
 800cd20:	e119      	b.n	800cf56 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cd22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd24:	3330      	adds	r3, #48	; 0x30
 800cd26:	3313      	adds	r3, #19
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f7fe fcb5 	bl	800b698 <ld_word>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cd32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d106      	bne.n	800cd46 <find_volume+0x272>
 800cd38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd3a:	3330      	adds	r3, #48	; 0x30
 800cd3c:	3320      	adds	r3, #32
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f7fe fcc2 	bl	800b6c8 <ld_dword>
 800cd44:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cd46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd48:	3330      	adds	r3, #48	; 0x30
 800cd4a:	330e      	adds	r3, #14
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f7fe fca3 	bl	800b698 <ld_word>
 800cd52:	4603      	mov	r3, r0
 800cd54:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cd56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d101      	bne.n	800cd60 <find_volume+0x28c>
 800cd5c:	230d      	movs	r3, #13
 800cd5e:	e0fa      	b.n	800cf56 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cd60:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cd62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd64:	4413      	add	r3, r2
 800cd66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd68:	8912      	ldrh	r2, [r2, #8]
 800cd6a:	0912      	lsrs	r2, r2, #4
 800cd6c:	b292      	uxth	r2, r2
 800cd6e:	4413      	add	r3, r2
 800cd70:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cd72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd76:	429a      	cmp	r2, r3
 800cd78:	d204      	bcs.n	800cd84 <find_volume+0x2b0>
 800cd7a:	230d      	movs	r3, #13
 800cd7c:	e0eb      	b.n	800cf56 <find_volume+0x482>
 800cd7e:	bf00      	nop
 800cd80:	200008a4 	.word	0x200008a4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cd84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd88:	1ad3      	subs	r3, r2, r3
 800cd8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd8c:	8952      	ldrh	r2, [r2, #10]
 800cd8e:	fbb3 f3f2 	udiv	r3, r3, r2
 800cd92:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d101      	bne.n	800cd9e <find_volume+0x2ca>
 800cd9a:	230d      	movs	r3, #13
 800cd9c:	e0db      	b.n	800cf56 <find_volume+0x482>
		fmt = FS_FAT32;
 800cd9e:	2303      	movs	r3, #3
 800cda0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800cdaa:	4293      	cmp	r3, r2
 800cdac:	d802      	bhi.n	800cdb4 <find_volume+0x2e0>
 800cdae:	2302      	movs	r3, #2
 800cdb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cdb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb6:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cdba:	4293      	cmp	r3, r2
 800cdbc:	d802      	bhi.n	800cdc4 <find_volume+0x2f0>
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc6:	1c9a      	adds	r2, r3, #2
 800cdc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdca:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800cdcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cdd0:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cdd2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cdd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdd6:	441a      	add	r2, r3
 800cdd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdda:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800cddc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cdde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cde0:	441a      	add	r2, r3
 800cde2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde4:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800cde6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cdea:	2b03      	cmp	r3, #3
 800cdec:	d11e      	bne.n	800ce2c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cdee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf0:	3330      	adds	r3, #48	; 0x30
 800cdf2:	332a      	adds	r3, #42	; 0x2a
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f7fe fc4f 	bl	800b698 <ld_word>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d001      	beq.n	800ce04 <find_volume+0x330>
 800ce00:	230d      	movs	r3, #13
 800ce02:	e0a8      	b.n	800cf56 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ce04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce06:	891b      	ldrh	r3, [r3, #8]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d001      	beq.n	800ce10 <find_volume+0x33c>
 800ce0c:	230d      	movs	r3, #13
 800ce0e:	e0a2      	b.n	800cf56 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ce10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce12:	3330      	adds	r3, #48	; 0x30
 800ce14:	332c      	adds	r3, #44	; 0x2c
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7fe fc56 	bl	800b6c8 <ld_dword>
 800ce1c:	4602      	mov	r2, r0
 800ce1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce20:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ce22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce24:	695b      	ldr	r3, [r3, #20]
 800ce26:	009b      	lsls	r3, r3, #2
 800ce28:	647b      	str	r3, [r7, #68]	; 0x44
 800ce2a:	e01f      	b.n	800ce6c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ce2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce2e:	891b      	ldrh	r3, [r3, #8]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d101      	bne.n	800ce38 <find_volume+0x364>
 800ce34:	230d      	movs	r3, #13
 800ce36:	e08e      	b.n	800cf56 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ce38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce3a:	6a1a      	ldr	r2, [r3, #32]
 800ce3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce3e:	441a      	add	r2, r3
 800ce40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce42:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ce44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ce48:	2b02      	cmp	r3, #2
 800ce4a:	d103      	bne.n	800ce54 <find_volume+0x380>
 800ce4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce4e:	695b      	ldr	r3, [r3, #20]
 800ce50:	005b      	lsls	r3, r3, #1
 800ce52:	e00a      	b.n	800ce6a <find_volume+0x396>
 800ce54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce56:	695a      	ldr	r2, [r3, #20]
 800ce58:	4613      	mov	r3, r2
 800ce5a:	005b      	lsls	r3, r3, #1
 800ce5c:	4413      	add	r3, r2
 800ce5e:	085a      	lsrs	r2, r3, #1
 800ce60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce62:	695b      	ldr	r3, [r3, #20]
 800ce64:	f003 0301 	and.w	r3, r3, #1
 800ce68:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ce6a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ce6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce6e:	699a      	ldr	r2, [r3, #24]
 800ce70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce72:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ce76:	0a5b      	lsrs	r3, r3, #9
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d201      	bcs.n	800ce80 <find_volume+0x3ac>
 800ce7c:	230d      	movs	r3, #13
 800ce7e:	e06a      	b.n	800cf56 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ce80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce82:	f04f 32ff 	mov.w	r2, #4294967295
 800ce86:	611a      	str	r2, [r3, #16]
 800ce88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce8a:	691a      	ldr	r2, [r3, #16]
 800ce8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce8e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800ce90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce92:	2280      	movs	r2, #128	; 0x80
 800ce94:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ce96:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ce9a:	2b03      	cmp	r3, #3
 800ce9c:	d149      	bne.n	800cf32 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ce9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cea0:	3330      	adds	r3, #48	; 0x30
 800cea2:	3330      	adds	r3, #48	; 0x30
 800cea4:	4618      	mov	r0, r3
 800cea6:	f7fe fbf7 	bl	800b698 <ld_word>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	2b01      	cmp	r3, #1
 800ceae:	d140      	bne.n	800cf32 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ceb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	4619      	mov	r1, r3
 800ceb6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ceb8:	f7fe fe9e 	bl	800bbf8 <move_window>
 800cebc:	4603      	mov	r3, r0
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d137      	bne.n	800cf32 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800cec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cec4:	2200      	movs	r2, #0
 800cec6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceca:	3330      	adds	r3, #48	; 0x30
 800cecc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ced0:	4618      	mov	r0, r3
 800ced2:	f7fe fbe1 	bl	800b698 <ld_word>
 800ced6:	4603      	mov	r3, r0
 800ced8:	461a      	mov	r2, r3
 800ceda:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cede:	429a      	cmp	r2, r3
 800cee0:	d127      	bne.n	800cf32 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cee4:	3330      	adds	r3, #48	; 0x30
 800cee6:	4618      	mov	r0, r3
 800cee8:	f7fe fbee 	bl	800b6c8 <ld_dword>
 800ceec:	4603      	mov	r3, r0
 800ceee:	4a1c      	ldr	r2, [pc, #112]	; (800cf60 <find_volume+0x48c>)
 800cef0:	4293      	cmp	r3, r2
 800cef2:	d11e      	bne.n	800cf32 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef6:	3330      	adds	r3, #48	; 0x30
 800cef8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cefc:	4618      	mov	r0, r3
 800cefe:	f7fe fbe3 	bl	800b6c8 <ld_dword>
 800cf02:	4603      	mov	r3, r0
 800cf04:	4a17      	ldr	r2, [pc, #92]	; (800cf64 <find_volume+0x490>)
 800cf06:	4293      	cmp	r3, r2
 800cf08:	d113      	bne.n	800cf32 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cf0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf0c:	3330      	adds	r3, #48	; 0x30
 800cf0e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800cf12:	4618      	mov	r0, r3
 800cf14:	f7fe fbd8 	bl	800b6c8 <ld_dword>
 800cf18:	4602      	mov	r2, r0
 800cf1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf1c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cf1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf20:	3330      	adds	r3, #48	; 0x30
 800cf22:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800cf26:	4618      	mov	r0, r3
 800cf28:	f7fe fbce 	bl	800b6c8 <ld_dword>
 800cf2c:	4602      	mov	r2, r0
 800cf2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf30:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cf32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf34:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800cf38:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cf3a:	4b0b      	ldr	r3, [pc, #44]	; (800cf68 <find_volume+0x494>)
 800cf3c:	881b      	ldrh	r3, [r3, #0]
 800cf3e:	3301      	adds	r3, #1
 800cf40:	b29a      	uxth	r2, r3
 800cf42:	4b09      	ldr	r3, [pc, #36]	; (800cf68 <find_volume+0x494>)
 800cf44:	801a      	strh	r2, [r3, #0]
 800cf46:	4b08      	ldr	r3, [pc, #32]	; (800cf68 <find_volume+0x494>)
 800cf48:	881a      	ldrh	r2, [r3, #0]
 800cf4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf4c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cf4e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cf50:	f7fe fdea 	bl	800bb28 <clear_lock>
#endif
	return FR_OK;
 800cf54:	2300      	movs	r3, #0
}
 800cf56:	4618      	mov	r0, r3
 800cf58:	3758      	adds	r7, #88	; 0x58
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd80      	pop	{r7, pc}
 800cf5e:	bf00      	nop
 800cf60:	41615252 	.word	0x41615252
 800cf64:	61417272 	.word	0x61417272
 800cf68:	200008a8 	.word	0x200008a8

0800cf6c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b084      	sub	sp, #16
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
 800cf74:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cf76:	2309      	movs	r3, #9
 800cf78:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d01c      	beq.n	800cfba <validate+0x4e>
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d018      	beq.n	800cfba <validate+0x4e>
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	781b      	ldrb	r3, [r3, #0]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d013      	beq.n	800cfba <validate+0x4e>
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	889a      	ldrh	r2, [r3, #4]
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	88db      	ldrh	r3, [r3, #6]
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	d10c      	bne.n	800cfba <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	785b      	ldrb	r3, [r3, #1]
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f7fe fad8 	bl	800b55c <disk_status>
 800cfac:	4603      	mov	r3, r0
 800cfae:	f003 0301 	and.w	r3, r3, #1
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d101      	bne.n	800cfba <validate+0x4e>
			res = FR_OK;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cfba:	7bfb      	ldrb	r3, [r7, #15]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d102      	bne.n	800cfc6 <validate+0x5a>
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	e000      	b.n	800cfc8 <validate+0x5c>
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	683a      	ldr	r2, [r7, #0]
 800cfca:	6013      	str	r3, [r2, #0]
	return res;
 800cfcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfce:	4618      	mov	r0, r3
 800cfd0:	3710      	adds	r7, #16
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}
	...

0800cfd8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b088      	sub	sp, #32
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	60f8      	str	r0, [r7, #12]
 800cfe0:	60b9      	str	r1, [r7, #8]
 800cfe2:	4613      	mov	r3, r2
 800cfe4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cfea:	f107 0310 	add.w	r3, r7, #16
 800cfee:	4618      	mov	r0, r3
 800cff0:	f7ff fcd5 	bl	800c99e <get_ldnumber>
 800cff4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cff6:	69fb      	ldr	r3, [r7, #28]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	da01      	bge.n	800d000 <f_mount+0x28>
 800cffc:	230b      	movs	r3, #11
 800cffe:	e02b      	b.n	800d058 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d000:	4a17      	ldr	r2, [pc, #92]	; (800d060 <f_mount+0x88>)
 800d002:	69fb      	ldr	r3, [r7, #28]
 800d004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d008:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d00a:	69bb      	ldr	r3, [r7, #24]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d005      	beq.n	800d01c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d010:	69b8      	ldr	r0, [r7, #24]
 800d012:	f7fe fd89 	bl	800bb28 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d016:	69bb      	ldr	r3, [r7, #24]
 800d018:	2200      	movs	r2, #0
 800d01a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d002      	beq.n	800d028 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	2200      	movs	r2, #0
 800d026:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d028:	68fa      	ldr	r2, [r7, #12]
 800d02a:	490d      	ldr	r1, [pc, #52]	; (800d060 <f_mount+0x88>)
 800d02c:	69fb      	ldr	r3, [r7, #28]
 800d02e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d002      	beq.n	800d03e <f_mount+0x66>
 800d038:	79fb      	ldrb	r3, [r7, #7]
 800d03a:	2b01      	cmp	r3, #1
 800d03c:	d001      	beq.n	800d042 <f_mount+0x6a>
 800d03e:	2300      	movs	r3, #0
 800d040:	e00a      	b.n	800d058 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d042:	f107 010c 	add.w	r1, r7, #12
 800d046:	f107 0308 	add.w	r3, r7, #8
 800d04a:	2200      	movs	r2, #0
 800d04c:	4618      	mov	r0, r3
 800d04e:	f7ff fd41 	bl	800cad4 <find_volume>
 800d052:	4603      	mov	r3, r0
 800d054:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d056:	7dfb      	ldrb	r3, [r7, #23]
}
 800d058:	4618      	mov	r0, r3
 800d05a:	3720      	adds	r7, #32
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}
 800d060:	200008a4 	.word	0x200008a4

0800d064 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b098      	sub	sp, #96	; 0x60
 800d068:	af00      	add	r7, sp, #0
 800d06a:	60f8      	str	r0, [r7, #12]
 800d06c:	60b9      	str	r1, [r7, #8]
 800d06e:	4613      	mov	r3, r2
 800d070:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d101      	bne.n	800d07c <f_open+0x18>
 800d078:	2309      	movs	r3, #9
 800d07a:	e1ad      	b.n	800d3d8 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d07c:	79fb      	ldrb	r3, [r7, #7]
 800d07e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d082:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d084:	79fa      	ldrb	r2, [r7, #7]
 800d086:	f107 0110 	add.w	r1, r7, #16
 800d08a:	f107 0308 	add.w	r3, r7, #8
 800d08e:	4618      	mov	r0, r3
 800d090:	f7ff fd20 	bl	800cad4 <find_volume>
 800d094:	4603      	mov	r3, r0
 800d096:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800d09a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	f040 8191 	bne.w	800d3c6 <f_open+0x362>
		dj.obj.fs = fs;
 800d0a4:	693b      	ldr	r3, [r7, #16]
 800d0a6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d0a8:	68ba      	ldr	r2, [r7, #8]
 800d0aa:	f107 0314 	add.w	r3, r7, #20
 800d0ae:	4611      	mov	r1, r2
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f7ff fc03 	bl	800c8bc <follow_path>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d0bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d11a      	bne.n	800d0fa <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d0c4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d0c8:	b25b      	sxtb	r3, r3
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	da03      	bge.n	800d0d6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800d0ce:	2306      	movs	r3, #6
 800d0d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d0d4:	e011      	b.n	800d0fa <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d0d6:	79fb      	ldrb	r3, [r7, #7]
 800d0d8:	f023 0301 	bic.w	r3, r3, #1
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	bf14      	ite	ne
 800d0e0:	2301      	movne	r3, #1
 800d0e2:	2300      	moveq	r3, #0
 800d0e4:	b2db      	uxtb	r3, r3
 800d0e6:	461a      	mov	r2, r3
 800d0e8:	f107 0314 	add.w	r3, r7, #20
 800d0ec:	4611      	mov	r1, r2
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f7fe fbd2 	bl	800b898 <chk_lock>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d0fa:	79fb      	ldrb	r3, [r7, #7]
 800d0fc:	f003 031c 	and.w	r3, r3, #28
 800d100:	2b00      	cmp	r3, #0
 800d102:	d07f      	beq.n	800d204 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d104:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d017      	beq.n	800d13c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d10c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d110:	2b04      	cmp	r3, #4
 800d112:	d10e      	bne.n	800d132 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d114:	f7fe fc1c 	bl	800b950 <enq_lock>
 800d118:	4603      	mov	r3, r0
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d006      	beq.n	800d12c <f_open+0xc8>
 800d11e:	f107 0314 	add.w	r3, r7, #20
 800d122:	4618      	mov	r0, r3
 800d124:	f7ff fb03 	bl	800c72e <dir_register>
 800d128:	4603      	mov	r3, r0
 800d12a:	e000      	b.n	800d12e <f_open+0xca>
 800d12c:	2312      	movs	r3, #18
 800d12e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d132:	79fb      	ldrb	r3, [r7, #7]
 800d134:	f043 0308 	orr.w	r3, r3, #8
 800d138:	71fb      	strb	r3, [r7, #7]
 800d13a:	e010      	b.n	800d15e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d13c:	7ebb      	ldrb	r3, [r7, #26]
 800d13e:	f003 0311 	and.w	r3, r3, #17
 800d142:	2b00      	cmp	r3, #0
 800d144:	d003      	beq.n	800d14e <f_open+0xea>
					res = FR_DENIED;
 800d146:	2307      	movs	r3, #7
 800d148:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d14c:	e007      	b.n	800d15e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d14e:	79fb      	ldrb	r3, [r7, #7]
 800d150:	f003 0304 	and.w	r3, r3, #4
 800d154:	2b00      	cmp	r3, #0
 800d156:	d002      	beq.n	800d15e <f_open+0xfa>
 800d158:	2308      	movs	r3, #8
 800d15a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d15e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d162:	2b00      	cmp	r3, #0
 800d164:	d168      	bne.n	800d238 <f_open+0x1d4>
 800d166:	79fb      	ldrb	r3, [r7, #7]
 800d168:	f003 0308 	and.w	r3, r3, #8
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d063      	beq.n	800d238 <f_open+0x1d4>
				dw = GET_FATTIME();
 800d170:	f7fb ff88 	bl	8009084 <get_fattime>
 800d174:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d178:	330e      	adds	r3, #14
 800d17a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d17c:	4618      	mov	r0, r3
 800d17e:	f7fe fae1 	bl	800b744 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d184:	3316      	adds	r3, #22
 800d186:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d188:	4618      	mov	r0, r3
 800d18a:	f7fe fadb 	bl	800b744 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d18e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d190:	330b      	adds	r3, #11
 800d192:	2220      	movs	r2, #32
 800d194:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d196:	693b      	ldr	r3, [r7, #16]
 800d198:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d19a:	4611      	mov	r1, r2
 800d19c:	4618      	mov	r0, r3
 800d19e:	f7ff fa32 	bl	800c606 <ld_clust>
 800d1a2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f7ff fa4a 	bl	800c644 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d1b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1b2:	331c      	adds	r3, #28
 800d1b4:	2100      	movs	r1, #0
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f7fe fac4 	bl	800b744 <st_dword>
					fs->wflag = 1;
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	2201      	movs	r2, #1
 800d1c0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d1c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d037      	beq.n	800d238 <f_open+0x1d4>
						dw = fs->winsect;
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1cc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d1ce:	f107 0314 	add.w	r3, r7, #20
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f7fe ff5d 	bl	800c096 <remove_chain>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800d1e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d126      	bne.n	800d238 <f_open+0x1d4>
							res = move_window(fs, dw);
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f7fe fd02 	bl	800bbf8 <move_window>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d1fa:	693b      	ldr	r3, [r7, #16]
 800d1fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d1fe:	3a01      	subs	r2, #1
 800d200:	60da      	str	r2, [r3, #12]
 800d202:	e019      	b.n	800d238 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d204:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d115      	bne.n	800d238 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d20c:	7ebb      	ldrb	r3, [r7, #26]
 800d20e:	f003 0310 	and.w	r3, r3, #16
 800d212:	2b00      	cmp	r3, #0
 800d214:	d003      	beq.n	800d21e <f_open+0x1ba>
					res = FR_NO_FILE;
 800d216:	2304      	movs	r3, #4
 800d218:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d21c:	e00c      	b.n	800d238 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d21e:	79fb      	ldrb	r3, [r7, #7]
 800d220:	f003 0302 	and.w	r3, r3, #2
 800d224:	2b00      	cmp	r3, #0
 800d226:	d007      	beq.n	800d238 <f_open+0x1d4>
 800d228:	7ebb      	ldrb	r3, [r7, #26]
 800d22a:	f003 0301 	and.w	r3, r3, #1
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d002      	beq.n	800d238 <f_open+0x1d4>
						res = FR_DENIED;
 800d232:	2307      	movs	r3, #7
 800d234:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d238:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d128      	bne.n	800d292 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d240:	79fb      	ldrb	r3, [r7, #7]
 800d242:	f003 0308 	and.w	r3, r3, #8
 800d246:	2b00      	cmp	r3, #0
 800d248:	d003      	beq.n	800d252 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d24a:	79fb      	ldrb	r3, [r7, #7]
 800d24c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d250:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d252:	693b      	ldr	r3, [r7, #16]
 800d254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d25a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d260:	79fb      	ldrb	r3, [r7, #7]
 800d262:	f023 0301 	bic.w	r3, r3, #1
 800d266:	2b00      	cmp	r3, #0
 800d268:	bf14      	ite	ne
 800d26a:	2301      	movne	r3, #1
 800d26c:	2300      	moveq	r3, #0
 800d26e:	b2db      	uxtb	r3, r3
 800d270:	461a      	mov	r2, r3
 800d272:	f107 0314 	add.w	r3, r7, #20
 800d276:	4611      	mov	r1, r2
 800d278:	4618      	mov	r0, r3
 800d27a:	f7fe fb8b 	bl	800b994 <inc_lock>
 800d27e:	4602      	mov	r2, r0
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	691b      	ldr	r3, [r3, #16]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d102      	bne.n	800d292 <f_open+0x22e>
 800d28c:	2302      	movs	r3, #2
 800d28e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d292:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d296:	2b00      	cmp	r3, #0
 800d298:	f040 8095 	bne.w	800d3c6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d29c:	693b      	ldr	r3, [r7, #16]
 800d29e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d2a0:	4611      	mov	r1, r2
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f7ff f9af 	bl	800c606 <ld_clust>
 800d2a8:	4602      	mov	r2, r0
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d2ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2b0:	331c      	adds	r3, #28
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f7fe fa08 	bl	800b6c8 <ld_dword>
 800d2b8:	4602      	mov	r2, r0
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d2c4:	693a      	ldr	r2, [r7, #16]
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d2ca:	693b      	ldr	r3, [r7, #16]
 800d2cc:	88da      	ldrh	r2, [r3, #6]
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	79fa      	ldrb	r2, [r7, #7]
 800d2d6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	3330      	adds	r3, #48	; 0x30
 800d2ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d2f2:	2100      	movs	r1, #0
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	f7fe fa72 	bl	800b7de <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d2fa:	79fb      	ldrb	r3, [r7, #7]
 800d2fc:	f003 0320 	and.w	r3, r3, #32
 800d300:	2b00      	cmp	r3, #0
 800d302:	d060      	beq.n	800d3c6 <f_open+0x362>
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	68db      	ldr	r3, [r3, #12]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d05c      	beq.n	800d3c6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	68da      	ldr	r2, [r3, #12]
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d314:	693b      	ldr	r3, [r7, #16]
 800d316:	895b      	ldrh	r3, [r3, #10]
 800d318:	025b      	lsls	r3, r3, #9
 800d31a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	689b      	ldr	r3, [r3, #8]
 800d320:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	68db      	ldr	r3, [r3, #12]
 800d326:	657b      	str	r3, [r7, #84]	; 0x54
 800d328:	e016      	b.n	800d358 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d32e:	4618      	mov	r0, r3
 800d330:	f7fe fd1d 	bl	800bd6e <get_fat>
 800d334:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d336:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d338:	2b01      	cmp	r3, #1
 800d33a:	d802      	bhi.n	800d342 <f_open+0x2de>
 800d33c:	2302      	movs	r3, #2
 800d33e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d342:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d344:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d348:	d102      	bne.n	800d350 <f_open+0x2ec>
 800d34a:	2301      	movs	r3, #1
 800d34c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d350:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d354:	1ad3      	subs	r3, r2, r3
 800d356:	657b      	str	r3, [r7, #84]	; 0x54
 800d358:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d103      	bne.n	800d368 <f_open+0x304>
 800d360:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d362:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d364:	429a      	cmp	r2, r3
 800d366:	d8e0      	bhi.n	800d32a <f_open+0x2c6>
				}
				fp->clust = clst;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d36c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d36e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d372:	2b00      	cmp	r3, #0
 800d374:	d127      	bne.n	800d3c6 <f_open+0x362>
 800d376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d022      	beq.n	800d3c6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d380:	693b      	ldr	r3, [r7, #16]
 800d382:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d384:	4618      	mov	r0, r3
 800d386:	f7fe fcd3 	bl	800bd30 <clust2sect>
 800d38a:	6478      	str	r0, [r7, #68]	; 0x44
 800d38c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d103      	bne.n	800d39a <f_open+0x336>
						res = FR_INT_ERR;
 800d392:	2302      	movs	r3, #2
 800d394:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d398:	e015      	b.n	800d3c6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d39a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d39c:	0a5a      	lsrs	r2, r3, #9
 800d39e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3a0:	441a      	add	r2, r3
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d3a6:	693b      	ldr	r3, [r7, #16]
 800d3a8:	7858      	ldrb	r0, [r3, #1]
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	6a1a      	ldr	r2, [r3, #32]
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	f7fe f911 	bl	800b5dc <disk_read>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d002      	beq.n	800d3c6 <f_open+0x362>
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d3c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d002      	beq.n	800d3d4 <f_open+0x370>
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d3d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	3760      	adds	r7, #96	; 0x60
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}

0800d3e0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b08e      	sub	sp, #56	; 0x38
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	60f8      	str	r0, [r7, #12]
 800d3e8:	60b9      	str	r1, [r7, #8]
 800d3ea:	607a      	str	r2, [r7, #4]
 800d3ec:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d3ee:	68bb      	ldr	r3, [r7, #8]
 800d3f0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	f107 0214 	add.w	r2, r7, #20
 800d3fe:	4611      	mov	r1, r2
 800d400:	4618      	mov	r0, r3
 800d402:	f7ff fdb3 	bl	800cf6c <validate>
 800d406:	4603      	mov	r3, r0
 800d408:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d40c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d410:	2b00      	cmp	r3, #0
 800d412:	d107      	bne.n	800d424 <f_read+0x44>
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	7d5b      	ldrb	r3, [r3, #21]
 800d418:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d41c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d420:	2b00      	cmp	r3, #0
 800d422:	d002      	beq.n	800d42a <f_read+0x4a>
 800d424:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d428:	e115      	b.n	800d656 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	7d1b      	ldrb	r3, [r3, #20]
 800d42e:	f003 0301 	and.w	r3, r3, #1
 800d432:	2b00      	cmp	r3, #0
 800d434:	d101      	bne.n	800d43a <f_read+0x5a>
 800d436:	2307      	movs	r3, #7
 800d438:	e10d      	b.n	800d656 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	68da      	ldr	r2, [r3, #12]
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	699b      	ldr	r3, [r3, #24]
 800d442:	1ad3      	subs	r3, r2, r3
 800d444:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d446:	687a      	ldr	r2, [r7, #4]
 800d448:	6a3b      	ldr	r3, [r7, #32]
 800d44a:	429a      	cmp	r2, r3
 800d44c:	f240 80fe 	bls.w	800d64c <f_read+0x26c>
 800d450:	6a3b      	ldr	r3, [r7, #32]
 800d452:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d454:	e0fa      	b.n	800d64c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	699b      	ldr	r3, [r3, #24]
 800d45a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d45e:	2b00      	cmp	r3, #0
 800d460:	f040 80c6 	bne.w	800d5f0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	699b      	ldr	r3, [r3, #24]
 800d468:	0a5b      	lsrs	r3, r3, #9
 800d46a:	697a      	ldr	r2, [r7, #20]
 800d46c:	8952      	ldrh	r2, [r2, #10]
 800d46e:	3a01      	subs	r2, #1
 800d470:	4013      	ands	r3, r2
 800d472:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d474:	69fb      	ldr	r3, [r7, #28]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d12f      	bne.n	800d4da <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	699b      	ldr	r3, [r3, #24]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d103      	bne.n	800d48a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	689b      	ldr	r3, [r3, #8]
 800d486:	633b      	str	r3, [r7, #48]	; 0x30
 800d488:	e013      	b.n	800d4b2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d007      	beq.n	800d4a2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	699b      	ldr	r3, [r3, #24]
 800d496:	4619      	mov	r1, r3
 800d498:	68f8      	ldr	r0, [r7, #12]
 800d49a:	f7fe fef9 	bl	800c290 <clmt_clust>
 800d49e:	6338      	str	r0, [r7, #48]	; 0x30
 800d4a0:	e007      	b.n	800d4b2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d4a2:	68fa      	ldr	r2, [r7, #12]
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	69db      	ldr	r3, [r3, #28]
 800d4a8:	4619      	mov	r1, r3
 800d4aa:	4610      	mov	r0, r2
 800d4ac:	f7fe fc5f 	bl	800bd6e <get_fat>
 800d4b0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b4:	2b01      	cmp	r3, #1
 800d4b6:	d804      	bhi.n	800d4c2 <f_read+0xe2>
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	2202      	movs	r2, #2
 800d4bc:	755a      	strb	r2, [r3, #21]
 800d4be:	2302      	movs	r3, #2
 800d4c0:	e0c9      	b.n	800d656 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4c8:	d104      	bne.n	800d4d4 <f_read+0xf4>
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	2201      	movs	r2, #1
 800d4ce:	755a      	strb	r2, [r3, #21]
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	e0c0      	b.n	800d656 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4d8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d4da:	697a      	ldr	r2, [r7, #20]
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	69db      	ldr	r3, [r3, #28]
 800d4e0:	4619      	mov	r1, r3
 800d4e2:	4610      	mov	r0, r2
 800d4e4:	f7fe fc24 	bl	800bd30 <clust2sect>
 800d4e8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d4ea:	69bb      	ldr	r3, [r7, #24]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d104      	bne.n	800d4fa <f_read+0x11a>
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	2202      	movs	r2, #2
 800d4f4:	755a      	strb	r2, [r3, #21]
 800d4f6:	2302      	movs	r3, #2
 800d4f8:	e0ad      	b.n	800d656 <f_read+0x276>
			sect += csect;
 800d4fa:	69ba      	ldr	r2, [r7, #24]
 800d4fc:	69fb      	ldr	r3, [r7, #28]
 800d4fe:	4413      	add	r3, r2
 800d500:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	0a5b      	lsrs	r3, r3, #9
 800d506:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d039      	beq.n	800d582 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d50e:	69fa      	ldr	r2, [r7, #28]
 800d510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d512:	4413      	add	r3, r2
 800d514:	697a      	ldr	r2, [r7, #20]
 800d516:	8952      	ldrh	r2, [r2, #10]
 800d518:	4293      	cmp	r3, r2
 800d51a:	d905      	bls.n	800d528 <f_read+0x148>
					cc = fs->csize - csect;
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	895b      	ldrh	r3, [r3, #10]
 800d520:	461a      	mov	r2, r3
 800d522:	69fb      	ldr	r3, [r7, #28]
 800d524:	1ad3      	subs	r3, r2, r3
 800d526:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d528:	697b      	ldr	r3, [r7, #20]
 800d52a:	7858      	ldrb	r0, [r3, #1]
 800d52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d52e:	69ba      	ldr	r2, [r7, #24]
 800d530:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d532:	f7fe f853 	bl	800b5dc <disk_read>
 800d536:	4603      	mov	r3, r0
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d004      	beq.n	800d546 <f_read+0x166>
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	2201      	movs	r2, #1
 800d540:	755a      	strb	r2, [r3, #21]
 800d542:	2301      	movs	r3, #1
 800d544:	e087      	b.n	800d656 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	7d1b      	ldrb	r3, [r3, #20]
 800d54a:	b25b      	sxtb	r3, r3
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	da14      	bge.n	800d57a <f_read+0x19a>
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	6a1a      	ldr	r2, [r3, #32]
 800d554:	69bb      	ldr	r3, [r7, #24]
 800d556:	1ad3      	subs	r3, r2, r3
 800d558:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d55a:	429a      	cmp	r2, r3
 800d55c:	d90d      	bls.n	800d57a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	6a1a      	ldr	r2, [r3, #32]
 800d562:	69bb      	ldr	r3, [r7, #24]
 800d564:	1ad3      	subs	r3, r2, r3
 800d566:	025b      	lsls	r3, r3, #9
 800d568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d56a:	18d0      	adds	r0, r2, r3
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	3330      	adds	r3, #48	; 0x30
 800d570:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d574:	4619      	mov	r1, r3
 800d576:	f7fe f911 	bl	800b79c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d57c:	025b      	lsls	r3, r3, #9
 800d57e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800d580:	e050      	b.n	800d624 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	6a1b      	ldr	r3, [r3, #32]
 800d586:	69ba      	ldr	r2, [r7, #24]
 800d588:	429a      	cmp	r2, r3
 800d58a:	d02e      	beq.n	800d5ea <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	7d1b      	ldrb	r3, [r3, #20]
 800d590:	b25b      	sxtb	r3, r3
 800d592:	2b00      	cmp	r3, #0
 800d594:	da18      	bge.n	800d5c8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d596:	697b      	ldr	r3, [r7, #20]
 800d598:	7858      	ldrb	r0, [r3, #1]
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	6a1a      	ldr	r2, [r3, #32]
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	f7fe f839 	bl	800b61c <disk_write>
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d004      	beq.n	800d5ba <f_read+0x1da>
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	2201      	movs	r2, #1
 800d5b4:	755a      	strb	r2, [r3, #21]
 800d5b6:	2301      	movs	r3, #1
 800d5b8:	e04d      	b.n	800d656 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	7d1b      	ldrb	r3, [r3, #20]
 800d5be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5c2:	b2da      	uxtb	r2, r3
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	7858      	ldrb	r0, [r3, #1]
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	69ba      	ldr	r2, [r7, #24]
 800d5d6:	f7fe f801 	bl	800b5dc <disk_read>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d004      	beq.n	800d5ea <f_read+0x20a>
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	2201      	movs	r2, #1
 800d5e4:	755a      	strb	r2, [r3, #21]
 800d5e6:	2301      	movs	r3, #1
 800d5e8:	e035      	b.n	800d656 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	69ba      	ldr	r2, [r7, #24]
 800d5ee:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	699b      	ldr	r3, [r3, #24]
 800d5f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5f8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d5fc:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d5fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	429a      	cmp	r2, r3
 800d604:	d901      	bls.n	800d60a <f_read+0x22a>
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	699b      	ldr	r3, [r3, #24]
 800d614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d618:	4413      	add	r3, r2
 800d61a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d61c:	4619      	mov	r1, r3
 800d61e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d620:	f7fe f8bc 	bl	800b79c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d628:	4413      	add	r3, r2
 800d62a:	627b      	str	r3, [r7, #36]	; 0x24
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	699a      	ldr	r2, [r3, #24]
 800d630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d632:	441a      	add	r2, r3
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	619a      	str	r2, [r3, #24]
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	681a      	ldr	r2, [r3, #0]
 800d63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d63e:	441a      	add	r2, r3
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	601a      	str	r2, [r3, #0]
 800d644:	687a      	ldr	r2, [r7, #4]
 800d646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d648:	1ad3      	subs	r3, r2, r3
 800d64a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	f47f af01 	bne.w	800d456 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d654:	2300      	movs	r3, #0
}
 800d656:	4618      	mov	r0, r3
 800d658:	3738      	adds	r7, #56	; 0x38
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}

0800d65e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d65e:	b580      	push	{r7, lr}
 800d660:	b086      	sub	sp, #24
 800d662:	af00      	add	r7, sp, #0
 800d664:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	f107 0208 	add.w	r2, r7, #8
 800d66c:	4611      	mov	r1, r2
 800d66e:	4618      	mov	r0, r3
 800d670:	f7ff fc7c 	bl	800cf6c <validate>
 800d674:	4603      	mov	r3, r0
 800d676:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d678:	7dfb      	ldrb	r3, [r7, #23]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d168      	bne.n	800d750 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	7d1b      	ldrb	r3, [r3, #20]
 800d682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d686:	2b00      	cmp	r3, #0
 800d688:	d062      	beq.n	800d750 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	7d1b      	ldrb	r3, [r3, #20]
 800d68e:	b25b      	sxtb	r3, r3
 800d690:	2b00      	cmp	r3, #0
 800d692:	da15      	bge.n	800d6c0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	7858      	ldrb	r0, [r3, #1]
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6a1a      	ldr	r2, [r3, #32]
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	f7fd ffba 	bl	800b61c <disk_write>
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d001      	beq.n	800d6b2 <f_sync+0x54>
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	e04f      	b.n	800d752 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	7d1b      	ldrb	r3, [r3, #20]
 800d6b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6ba:	b2da      	uxtb	r2, r3
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d6c0:	f7fb fce0 	bl	8009084 <get_fattime>
 800d6c4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d6c6:	68ba      	ldr	r2, [r7, #8]
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6cc:	4619      	mov	r1, r3
 800d6ce:	4610      	mov	r0, r2
 800d6d0:	f7fe fa92 	bl	800bbf8 <move_window>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d6d8:	7dfb      	ldrb	r3, [r7, #23]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d138      	bne.n	800d750 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6e2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	330b      	adds	r3, #11
 800d6e8:	781a      	ldrb	r2, [r3, #0]
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	330b      	adds	r3, #11
 800d6ee:	f042 0220 	orr.w	r2, r2, #32
 800d6f2:	b2d2      	uxtb	r2, r2
 800d6f4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6818      	ldr	r0, [r3, #0]
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	689b      	ldr	r3, [r3, #8]
 800d6fe:	461a      	mov	r2, r3
 800d700:	68f9      	ldr	r1, [r7, #12]
 800d702:	f7fe ff9f 	bl	800c644 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	f103 021c 	add.w	r2, r3, #28
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	68db      	ldr	r3, [r3, #12]
 800d710:	4619      	mov	r1, r3
 800d712:	4610      	mov	r0, r2
 800d714:	f7fe f816 	bl	800b744 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	3316      	adds	r3, #22
 800d71c:	6939      	ldr	r1, [r7, #16]
 800d71e:	4618      	mov	r0, r3
 800d720:	f7fe f810 	bl	800b744 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	3312      	adds	r3, #18
 800d728:	2100      	movs	r1, #0
 800d72a:	4618      	mov	r0, r3
 800d72c:	f7fd ffef 	bl	800b70e <st_word>
					fs->wflag = 1;
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	2201      	movs	r2, #1
 800d734:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	4618      	mov	r0, r3
 800d73a:	f7fe fa8b 	bl	800bc54 <sync_fs>
 800d73e:	4603      	mov	r3, r0
 800d740:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	7d1b      	ldrb	r3, [r3, #20]
 800d746:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d74a:	b2da      	uxtb	r2, r3
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d750:	7dfb      	ldrb	r3, [r7, #23]
}
 800d752:	4618      	mov	r0, r3
 800d754:	3718      	adds	r7, #24
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}

0800d75a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d75a:	b580      	push	{r7, lr}
 800d75c:	b084      	sub	sp, #16
 800d75e:	af00      	add	r7, sp, #0
 800d760:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f7ff ff7b 	bl	800d65e <f_sync>
 800d768:	4603      	mov	r3, r0
 800d76a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d76c:	7bfb      	ldrb	r3, [r7, #15]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d118      	bne.n	800d7a4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f107 0208 	add.w	r2, r7, #8
 800d778:	4611      	mov	r1, r2
 800d77a:	4618      	mov	r0, r3
 800d77c:	f7ff fbf6 	bl	800cf6c <validate>
 800d780:	4603      	mov	r3, r0
 800d782:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d784:	7bfb      	ldrb	r3, [r7, #15]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d10c      	bne.n	800d7a4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	691b      	ldr	r3, [r3, #16]
 800d78e:	4618      	mov	r0, r3
 800d790:	f7fe f98e 	bl	800bab0 <dec_lock>
 800d794:	4603      	mov	r3, r0
 800d796:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d798:	7bfb      	ldrb	r3, [r7, #15]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d102      	bne.n	800d7a4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d7a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3710      	adds	r7, #16
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}

0800d7ae <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800d7ae:	b580      	push	{r7, lr}
 800d7b0:	b090      	sub	sp, #64	; 0x40
 800d7b2:	af00      	add	r7, sp, #0
 800d7b4:	6078      	str	r0, [r7, #4]
 800d7b6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	f107 0208 	add.w	r2, r7, #8
 800d7be:	4611      	mov	r1, r2
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f7ff fbd3 	bl	800cf6c <validate>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800d7cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d103      	bne.n	800d7dc <f_lseek+0x2e>
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	7d5b      	ldrb	r3, [r3, #21]
 800d7d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800d7dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d002      	beq.n	800d7ea <f_lseek+0x3c>
 800d7e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d7e8:	e1e6      	b.n	800dbb8 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	f000 80d1 	beq.w	800d996 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7fa:	d15a      	bne.n	800d8b2 <f_lseek+0x104>
			tbl = fp->cltbl;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d800:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d804:	1d1a      	adds	r2, r3, #4
 800d806:	627a      	str	r2, [r7, #36]	; 0x24
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	617b      	str	r3, [r7, #20]
 800d80c:	2302      	movs	r3, #2
 800d80e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	689b      	ldr	r3, [r3, #8]
 800d814:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800d816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d03a      	beq.n	800d892 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d81e:	613b      	str	r3, [r7, #16]
 800d820:	2300      	movs	r3, #0
 800d822:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d826:	3302      	adds	r3, #2
 800d828:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800d82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d82c:	60fb      	str	r3, [r7, #12]
 800d82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d830:	3301      	adds	r3, #1
 800d832:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d838:	4618      	mov	r0, r3
 800d83a:	f7fe fa98 	bl	800bd6e <get_fat>
 800d83e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800d840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d842:	2b01      	cmp	r3, #1
 800d844:	d804      	bhi.n	800d850 <f_lseek+0xa2>
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2202      	movs	r2, #2
 800d84a:	755a      	strb	r2, [r3, #21]
 800d84c:	2302      	movs	r3, #2
 800d84e:	e1b3      	b.n	800dbb8 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d852:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d856:	d104      	bne.n	800d862 <f_lseek+0xb4>
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2201      	movs	r2, #1
 800d85c:	755a      	strb	r2, [r3, #21]
 800d85e:	2301      	movs	r3, #1
 800d860:	e1aa      	b.n	800dbb8 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	3301      	adds	r3, #1
 800d866:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d868:	429a      	cmp	r2, r3
 800d86a:	d0de      	beq.n	800d82a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d86c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	429a      	cmp	r2, r3
 800d872:	d809      	bhi.n	800d888 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800d874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d876:	1d1a      	adds	r2, r3, #4
 800d878:	627a      	str	r2, [r7, #36]	; 0x24
 800d87a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d87c:	601a      	str	r2, [r3, #0]
 800d87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d880:	1d1a      	adds	r2, r3, #4
 800d882:	627a      	str	r2, [r7, #36]	; 0x24
 800d884:	693a      	ldr	r2, [r7, #16]
 800d886:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800d888:	68bb      	ldr	r3, [r7, #8]
 800d88a:	695b      	ldr	r3, [r3, #20]
 800d88c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d88e:	429a      	cmp	r2, r3
 800d890:	d3c4      	bcc.n	800d81c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d896:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d898:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800d89a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	429a      	cmp	r2, r3
 800d8a0:	d803      	bhi.n	800d8aa <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800d8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	601a      	str	r2, [r3, #0]
 800d8a8:	e184      	b.n	800dbb4 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800d8aa:	2311      	movs	r3, #17
 800d8ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d8b0:	e180      	b.n	800dbb4 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	68db      	ldr	r3, [r3, #12]
 800d8b6:	683a      	ldr	r2, [r7, #0]
 800d8b8:	429a      	cmp	r2, r3
 800d8ba:	d902      	bls.n	800d8c2 <f_lseek+0x114>
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	68db      	ldr	r3, [r3, #12]
 800d8c0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	683a      	ldr	r2, [r7, #0]
 800d8c6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	f000 8172 	beq.w	800dbb4 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	3b01      	subs	r3, #1
 800d8d4:	4619      	mov	r1, r3
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	f7fe fcda 	bl	800c290 <clmt_clust>
 800d8dc:	4602      	mov	r2, r0
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800d8e2:	68ba      	ldr	r2, [r7, #8]
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	69db      	ldr	r3, [r3, #28]
 800d8e8:	4619      	mov	r1, r3
 800d8ea:	4610      	mov	r0, r2
 800d8ec:	f7fe fa20 	bl	800bd30 <clust2sect>
 800d8f0:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800d8f2:	69bb      	ldr	r3, [r7, #24]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d104      	bne.n	800d902 <f_lseek+0x154>
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2202      	movs	r2, #2
 800d8fc:	755a      	strb	r2, [r3, #21]
 800d8fe:	2302      	movs	r3, #2
 800d900:	e15a      	b.n	800dbb8 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	3b01      	subs	r3, #1
 800d906:	0a5b      	lsrs	r3, r3, #9
 800d908:	68ba      	ldr	r2, [r7, #8]
 800d90a:	8952      	ldrh	r2, [r2, #10]
 800d90c:	3a01      	subs	r2, #1
 800d90e:	4013      	ands	r3, r2
 800d910:	69ba      	ldr	r2, [r7, #24]
 800d912:	4413      	add	r3, r2
 800d914:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	699b      	ldr	r3, [r3, #24]
 800d91a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d91e:	2b00      	cmp	r3, #0
 800d920:	f000 8148 	beq.w	800dbb4 <f_lseek+0x406>
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	6a1b      	ldr	r3, [r3, #32]
 800d928:	69ba      	ldr	r2, [r7, #24]
 800d92a:	429a      	cmp	r2, r3
 800d92c:	f000 8142 	beq.w	800dbb4 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	7d1b      	ldrb	r3, [r3, #20]
 800d934:	b25b      	sxtb	r3, r3
 800d936:	2b00      	cmp	r3, #0
 800d938:	da18      	bge.n	800d96c <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	7858      	ldrb	r0, [r3, #1]
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	6a1a      	ldr	r2, [r3, #32]
 800d948:	2301      	movs	r3, #1
 800d94a:	f7fd fe67 	bl	800b61c <disk_write>
 800d94e:	4603      	mov	r3, r0
 800d950:	2b00      	cmp	r3, #0
 800d952:	d004      	beq.n	800d95e <f_lseek+0x1b0>
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2201      	movs	r2, #1
 800d958:	755a      	strb	r2, [r3, #21]
 800d95a:	2301      	movs	r3, #1
 800d95c:	e12c      	b.n	800dbb8 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	7d1b      	ldrb	r3, [r3, #20]
 800d962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d966:	b2da      	uxtb	r2, r3
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	7858      	ldrb	r0, [r3, #1]
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d976:	2301      	movs	r3, #1
 800d978:	69ba      	ldr	r2, [r7, #24]
 800d97a:	f7fd fe2f 	bl	800b5dc <disk_read>
 800d97e:	4603      	mov	r3, r0
 800d980:	2b00      	cmp	r3, #0
 800d982:	d004      	beq.n	800d98e <f_lseek+0x1e0>
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2201      	movs	r2, #1
 800d988:	755a      	strb	r2, [r3, #21]
 800d98a:	2301      	movs	r3, #1
 800d98c:	e114      	b.n	800dbb8 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	69ba      	ldr	r2, [r7, #24]
 800d992:	621a      	str	r2, [r3, #32]
 800d994:	e10e      	b.n	800dbb4 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	68db      	ldr	r3, [r3, #12]
 800d99a:	683a      	ldr	r2, [r7, #0]
 800d99c:	429a      	cmp	r2, r3
 800d99e:	d908      	bls.n	800d9b2 <f_lseek+0x204>
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	7d1b      	ldrb	r3, [r3, #20]
 800d9a4:	f003 0302 	and.w	r3, r3, #2
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d102      	bne.n	800d9b2 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	68db      	ldr	r3, [r3, #12]
 800d9b0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	699b      	ldr	r3, [r3, #24]
 800d9b6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	637b      	str	r3, [r7, #52]	; 0x34
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9c0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	f000 80a7 	beq.w	800db18 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	895b      	ldrh	r3, [r3, #10]
 800d9ce:	025b      	lsls	r3, r3, #9
 800d9d0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800d9d2:	6a3b      	ldr	r3, [r7, #32]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d01b      	beq.n	800da10 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	1e5a      	subs	r2, r3, #1
 800d9dc:	69fb      	ldr	r3, [r7, #28]
 800d9de:	fbb2 f2f3 	udiv	r2, r2, r3
 800d9e2:	6a3b      	ldr	r3, [r7, #32]
 800d9e4:	1e59      	subs	r1, r3, #1
 800d9e6:	69fb      	ldr	r3, [r7, #28]
 800d9e8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800d9ec:	429a      	cmp	r2, r3
 800d9ee:	d30f      	bcc.n	800da10 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800d9f0:	6a3b      	ldr	r3, [r7, #32]
 800d9f2:	1e5a      	subs	r2, r3, #1
 800d9f4:	69fb      	ldr	r3, [r7, #28]
 800d9f6:	425b      	negs	r3, r3
 800d9f8:	401a      	ands	r2, r3
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	699b      	ldr	r3, [r3, #24]
 800da02:	683a      	ldr	r2, [r7, #0]
 800da04:	1ad3      	subs	r3, r2, r3
 800da06:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	69db      	ldr	r3, [r3, #28]
 800da0c:	63bb      	str	r3, [r7, #56]	; 0x38
 800da0e:	e022      	b.n	800da56 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	689b      	ldr	r3, [r3, #8]
 800da14:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800da16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d119      	bne.n	800da50 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2100      	movs	r1, #0
 800da20:	4618      	mov	r0, r3
 800da22:	f7fe fb9d 	bl	800c160 <create_chain>
 800da26:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800da28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da2a:	2b01      	cmp	r3, #1
 800da2c:	d104      	bne.n	800da38 <f_lseek+0x28a>
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2202      	movs	r2, #2
 800da32:	755a      	strb	r2, [r3, #21]
 800da34:	2302      	movs	r3, #2
 800da36:	e0bf      	b.n	800dbb8 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800da38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da3e:	d104      	bne.n	800da4a <f_lseek+0x29c>
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2201      	movs	r2, #1
 800da44:	755a      	strb	r2, [r3, #21]
 800da46:	2301      	movs	r3, #1
 800da48:	e0b6      	b.n	800dbb8 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da4e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da54:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800da56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d05d      	beq.n	800db18 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800da5c:	e03a      	b.n	800dad4 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800da5e:	683a      	ldr	r2, [r7, #0]
 800da60:	69fb      	ldr	r3, [r7, #28]
 800da62:	1ad3      	subs	r3, r2, r3
 800da64:	603b      	str	r3, [r7, #0]
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	699a      	ldr	r2, [r3, #24]
 800da6a:	69fb      	ldr	r3, [r7, #28]
 800da6c:	441a      	add	r2, r3
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	7d1b      	ldrb	r3, [r3, #20]
 800da76:	f003 0302 	and.w	r3, r3, #2
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d00b      	beq.n	800da96 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800da82:	4618      	mov	r0, r3
 800da84:	f7fe fb6c 	bl	800c160 <create_chain>
 800da88:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800da8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d108      	bne.n	800daa2 <f_lseek+0x2f4>
							ofs = 0; break;
 800da90:	2300      	movs	r3, #0
 800da92:	603b      	str	r3, [r7, #0]
 800da94:	e022      	b.n	800dadc <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800da9a:	4618      	mov	r0, r3
 800da9c:	f7fe f967 	bl	800bd6e <get_fat>
 800daa0:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800daa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daa8:	d104      	bne.n	800dab4 <f_lseek+0x306>
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	2201      	movs	r2, #1
 800daae:	755a      	strb	r2, [r3, #21]
 800dab0:	2301      	movs	r3, #1
 800dab2:	e081      	b.n	800dbb8 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800dab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dab6:	2b01      	cmp	r3, #1
 800dab8:	d904      	bls.n	800dac4 <f_lseek+0x316>
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	695b      	ldr	r3, [r3, #20]
 800dabe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dac0:	429a      	cmp	r2, r3
 800dac2:	d304      	bcc.n	800dace <f_lseek+0x320>
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2202      	movs	r2, #2
 800dac8:	755a      	strb	r2, [r3, #21]
 800daca:	2302      	movs	r3, #2
 800dacc:	e074      	b.n	800dbb8 <f_lseek+0x40a>
					fp->clust = clst;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dad2:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800dad4:	683a      	ldr	r2, [r7, #0]
 800dad6:	69fb      	ldr	r3, [r7, #28]
 800dad8:	429a      	cmp	r2, r3
 800dada:	d8c0      	bhi.n	800da5e <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	699a      	ldr	r2, [r3, #24]
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	441a      	add	r2, r3
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d012      	beq.n	800db18 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800daf2:	68bb      	ldr	r3, [r7, #8]
 800daf4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800daf6:	4618      	mov	r0, r3
 800daf8:	f7fe f91a 	bl	800bd30 <clust2sect>
 800dafc:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800dafe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db00:	2b00      	cmp	r3, #0
 800db02:	d104      	bne.n	800db0e <f_lseek+0x360>
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2202      	movs	r2, #2
 800db08:	755a      	strb	r2, [r3, #21]
 800db0a:	2302      	movs	r3, #2
 800db0c:	e054      	b.n	800dbb8 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	0a5b      	lsrs	r3, r3, #9
 800db12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db14:	4413      	add	r3, r2
 800db16:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	699a      	ldr	r2, [r3, #24]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	68db      	ldr	r3, [r3, #12]
 800db20:	429a      	cmp	r2, r3
 800db22:	d90a      	bls.n	800db3a <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	699a      	ldr	r2, [r3, #24]
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	7d1b      	ldrb	r3, [r3, #20]
 800db30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db34:	b2da      	uxtb	r2, r3
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	699b      	ldr	r3, [r3, #24]
 800db3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db42:	2b00      	cmp	r3, #0
 800db44:	d036      	beq.n	800dbb4 <f_lseek+0x406>
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	6a1b      	ldr	r3, [r3, #32]
 800db4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db4c:	429a      	cmp	r2, r3
 800db4e:	d031      	beq.n	800dbb4 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	7d1b      	ldrb	r3, [r3, #20]
 800db54:	b25b      	sxtb	r3, r3
 800db56:	2b00      	cmp	r3, #0
 800db58:	da18      	bge.n	800db8c <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	7858      	ldrb	r0, [r3, #1]
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6a1a      	ldr	r2, [r3, #32]
 800db68:	2301      	movs	r3, #1
 800db6a:	f7fd fd57 	bl	800b61c <disk_write>
 800db6e:	4603      	mov	r3, r0
 800db70:	2b00      	cmp	r3, #0
 800db72:	d004      	beq.n	800db7e <f_lseek+0x3d0>
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2201      	movs	r2, #1
 800db78:	755a      	strb	r2, [r3, #21]
 800db7a:	2301      	movs	r3, #1
 800db7c:	e01c      	b.n	800dbb8 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	7d1b      	ldrb	r3, [r3, #20]
 800db82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db86:	b2da      	uxtb	r2, r3
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	7858      	ldrb	r0, [r3, #1]
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800db96:	2301      	movs	r3, #1
 800db98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db9a:	f7fd fd1f 	bl	800b5dc <disk_read>
 800db9e:	4603      	mov	r3, r0
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d004      	beq.n	800dbae <f_lseek+0x400>
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2201      	movs	r2, #1
 800dba8:	755a      	strb	r2, [r3, #21]
 800dbaa:	2301      	movs	r3, #1
 800dbac:	e004      	b.n	800dbb8 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dbb2:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800dbb4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800dbb8:	4618      	mov	r0, r3
 800dbba:	3740      	adds	r7, #64	; 0x40
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd80      	pop	{r7, pc}

0800dbc0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800dbc0:	b480      	push	{r7}
 800dbc2:	b087      	sub	sp, #28
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	60f8      	str	r0, [r7, #12]
 800dbc8:	60b9      	str	r1, [r7, #8]
 800dbca:	4613      	mov	r3, r2
 800dbcc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800dbce:	2301      	movs	r3, #1
 800dbd0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800dbd6:	4b1f      	ldr	r3, [pc, #124]	; (800dc54 <FATFS_LinkDriverEx+0x94>)
 800dbd8:	7a5b      	ldrb	r3, [r3, #9]
 800dbda:	b2db      	uxtb	r3, r3
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d131      	bne.n	800dc44 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800dbe0:	4b1c      	ldr	r3, [pc, #112]	; (800dc54 <FATFS_LinkDriverEx+0x94>)
 800dbe2:	7a5b      	ldrb	r3, [r3, #9]
 800dbe4:	b2db      	uxtb	r3, r3
 800dbe6:	461a      	mov	r2, r3
 800dbe8:	4b1a      	ldr	r3, [pc, #104]	; (800dc54 <FATFS_LinkDriverEx+0x94>)
 800dbea:	2100      	movs	r1, #0
 800dbec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800dbee:	4b19      	ldr	r3, [pc, #100]	; (800dc54 <FATFS_LinkDriverEx+0x94>)
 800dbf0:	7a5b      	ldrb	r3, [r3, #9]
 800dbf2:	b2db      	uxtb	r3, r3
 800dbf4:	4a17      	ldr	r2, [pc, #92]	; (800dc54 <FATFS_LinkDriverEx+0x94>)
 800dbf6:	009b      	lsls	r3, r3, #2
 800dbf8:	4413      	add	r3, r2
 800dbfa:	68fa      	ldr	r2, [r7, #12]
 800dbfc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800dbfe:	4b15      	ldr	r3, [pc, #84]	; (800dc54 <FATFS_LinkDriverEx+0x94>)
 800dc00:	7a5b      	ldrb	r3, [r3, #9]
 800dc02:	b2db      	uxtb	r3, r3
 800dc04:	461a      	mov	r2, r3
 800dc06:	4b13      	ldr	r3, [pc, #76]	; (800dc54 <FATFS_LinkDriverEx+0x94>)
 800dc08:	4413      	add	r3, r2
 800dc0a:	79fa      	ldrb	r2, [r7, #7]
 800dc0c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800dc0e:	4b11      	ldr	r3, [pc, #68]	; (800dc54 <FATFS_LinkDriverEx+0x94>)
 800dc10:	7a5b      	ldrb	r3, [r3, #9]
 800dc12:	b2db      	uxtb	r3, r3
 800dc14:	1c5a      	adds	r2, r3, #1
 800dc16:	b2d1      	uxtb	r1, r2
 800dc18:	4a0e      	ldr	r2, [pc, #56]	; (800dc54 <FATFS_LinkDriverEx+0x94>)
 800dc1a:	7251      	strb	r1, [r2, #9]
 800dc1c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800dc1e:	7dbb      	ldrb	r3, [r7, #22]
 800dc20:	3330      	adds	r3, #48	; 0x30
 800dc22:	b2da      	uxtb	r2, r3
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800dc28:	68bb      	ldr	r3, [r7, #8]
 800dc2a:	3301      	adds	r3, #1
 800dc2c:	223a      	movs	r2, #58	; 0x3a
 800dc2e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	3302      	adds	r3, #2
 800dc34:	222f      	movs	r2, #47	; 0x2f
 800dc36:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	3303      	adds	r3, #3
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dc40:	2300      	movs	r3, #0
 800dc42:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800dc44:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc46:	4618      	mov	r0, r3
 800dc48:	371c      	adds	r7, #28
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc50:	4770      	bx	lr
 800dc52:	bf00      	nop
 800dc54:	200008cc 	.word	0x200008cc

0800dc58 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b082      	sub	sp, #8
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
 800dc60:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dc62:	2200      	movs	r2, #0
 800dc64:	6839      	ldr	r1, [r7, #0]
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f7ff ffaa 	bl	800dbc0 <FATFS_LinkDriverEx>
 800dc6c:	4603      	mov	r3, r0
}
 800dc6e:	4618      	mov	r0, r3
 800dc70:	3708      	adds	r7, #8
 800dc72:	46bd      	mov	sp, r7
 800dc74:	bd80      	pop	{r7, pc}
	...

0800dc78 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	490e      	ldr	r1, [pc, #56]	; (800dcb8 <MX_USB_DEVICE_Init+0x40>)
 800dc80:	480e      	ldr	r0, [pc, #56]	; (800dcbc <MX_USB_DEVICE_Init+0x44>)
 800dc82:	f7fc f995 	bl	8009fb0 <USBD_Init>
 800dc86:	4603      	mov	r3, r0
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d001      	beq.n	800dc90 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800dc8c:	f7f4 f905 	bl	8001e9a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800dc90:	490b      	ldr	r1, [pc, #44]	; (800dcc0 <MX_USB_DEVICE_Init+0x48>)
 800dc92:	480a      	ldr	r0, [pc, #40]	; (800dcbc <MX_USB_DEVICE_Init+0x44>)
 800dc94:	f7fc f9bc 	bl	800a010 <USBD_RegisterClass>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d001      	beq.n	800dca2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800dc9e:	f7f4 f8fc 	bl	8001e9a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800dca2:	4806      	ldr	r0, [pc, #24]	; (800dcbc <MX_USB_DEVICE_Init+0x44>)
 800dca4:	f7fc f9ea 	bl	800a07c <USBD_Start>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d001      	beq.n	800dcb2 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800dcae:	f7f4 f8f4 	bl	8001e9a <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800dcb2:	bf00      	nop
 800dcb4:	bd80      	pop	{r7, pc}
 800dcb6:	bf00      	nop
 800dcb8:	200000dc 	.word	0x200000dc
 800dcbc:	200008d8 	.word	0x200008d8
 800dcc0:	20000044 	.word	0x20000044

0800dcc4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dcc4:	b480      	push	{r7}
 800dcc6:	b083      	sub	sp, #12
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	4603      	mov	r3, r0
 800dccc:	6039      	str	r1, [r7, #0]
 800dcce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	2212      	movs	r2, #18
 800dcd4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800dcd6:	4b03      	ldr	r3, [pc, #12]	; (800dce4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800dcd8:	4618      	mov	r0, r3
 800dcda:	370c      	adds	r7, #12
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce2:	4770      	bx	lr
 800dce4:	200000f8 	.word	0x200000f8

0800dce8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dce8:	b480      	push	{r7}
 800dcea:	b083      	sub	sp, #12
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	4603      	mov	r3, r0
 800dcf0:	6039      	str	r1, [r7, #0]
 800dcf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	2204      	movs	r2, #4
 800dcf8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dcfa:	4b03      	ldr	r3, [pc, #12]	; (800dd08 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	370c      	adds	r7, #12
 800dd00:	46bd      	mov	sp, r7
 800dd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd06:	4770      	bx	lr
 800dd08:	2000010c 	.word	0x2000010c

0800dd0c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b082      	sub	sp, #8
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	4603      	mov	r3, r0
 800dd14:	6039      	str	r1, [r7, #0]
 800dd16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dd18:	79fb      	ldrb	r3, [r7, #7]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d105      	bne.n	800dd2a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dd1e:	683a      	ldr	r2, [r7, #0]
 800dd20:	4907      	ldr	r1, [pc, #28]	; (800dd40 <USBD_FS_ProductStrDescriptor+0x34>)
 800dd22:	4808      	ldr	r0, [pc, #32]	; (800dd44 <USBD_FS_ProductStrDescriptor+0x38>)
 800dd24:	f7fd fb56 	bl	800b3d4 <USBD_GetString>
 800dd28:	e004      	b.n	800dd34 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dd2a:	683a      	ldr	r2, [r7, #0]
 800dd2c:	4904      	ldr	r1, [pc, #16]	; (800dd40 <USBD_FS_ProductStrDescriptor+0x34>)
 800dd2e:	4805      	ldr	r0, [pc, #20]	; (800dd44 <USBD_FS_ProductStrDescriptor+0x38>)
 800dd30:	f7fd fb50 	bl	800b3d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dd34:	4b02      	ldr	r3, [pc, #8]	; (800dd40 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dd36:	4618      	mov	r0, r3
 800dd38:	3708      	adds	r7, #8
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bd80      	pop	{r7, pc}
 800dd3e:	bf00      	nop
 800dd40:	20000bb4 	.word	0x20000bb4
 800dd44:	0800fbf0 	.word	0x0800fbf0

0800dd48 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b082      	sub	sp, #8
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	4603      	mov	r3, r0
 800dd50:	6039      	str	r1, [r7, #0]
 800dd52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dd54:	683a      	ldr	r2, [r7, #0]
 800dd56:	4904      	ldr	r1, [pc, #16]	; (800dd68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dd58:	4804      	ldr	r0, [pc, #16]	; (800dd6c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dd5a:	f7fd fb3b 	bl	800b3d4 <USBD_GetString>
  return USBD_StrDesc;
 800dd5e:	4b02      	ldr	r3, [pc, #8]	; (800dd68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800dd60:	4618      	mov	r0, r3
 800dd62:	3708      	adds	r7, #8
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd80      	pop	{r7, pc}
 800dd68:	20000bb4 	.word	0x20000bb4
 800dd6c:	0800fc00 	.word	0x0800fc00

0800dd70 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b082      	sub	sp, #8
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	4603      	mov	r3, r0
 800dd78:	6039      	str	r1, [r7, #0]
 800dd7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	221a      	movs	r2, #26
 800dd80:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dd82:	f000 f843 	bl	800de0c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800dd86:	4b02      	ldr	r3, [pc, #8]	; (800dd90 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	3708      	adds	r7, #8
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}
 800dd90:	20000110 	.word	0x20000110

0800dd94 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b082      	sub	sp, #8
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	6039      	str	r1, [r7, #0]
 800dd9e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dda0:	79fb      	ldrb	r3, [r7, #7]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d105      	bne.n	800ddb2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dda6:	683a      	ldr	r2, [r7, #0]
 800dda8:	4907      	ldr	r1, [pc, #28]	; (800ddc8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ddaa:	4808      	ldr	r0, [pc, #32]	; (800ddcc <USBD_FS_ConfigStrDescriptor+0x38>)
 800ddac:	f7fd fb12 	bl	800b3d4 <USBD_GetString>
 800ddb0:	e004      	b.n	800ddbc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ddb2:	683a      	ldr	r2, [r7, #0]
 800ddb4:	4904      	ldr	r1, [pc, #16]	; (800ddc8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ddb6:	4805      	ldr	r0, [pc, #20]	; (800ddcc <USBD_FS_ConfigStrDescriptor+0x38>)
 800ddb8:	f7fd fb0c 	bl	800b3d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ddbc:	4b02      	ldr	r3, [pc, #8]	; (800ddc8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	3708      	adds	r7, #8
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}
 800ddc6:	bf00      	nop
 800ddc8:	20000bb4 	.word	0x20000bb4
 800ddcc:	0800fc08 	.word	0x0800fc08

0800ddd0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b082      	sub	sp, #8
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	6039      	str	r1, [r7, #0]
 800ddda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dddc:	79fb      	ldrb	r3, [r7, #7]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d105      	bne.n	800ddee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dde2:	683a      	ldr	r2, [r7, #0]
 800dde4:	4907      	ldr	r1, [pc, #28]	; (800de04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dde6:	4808      	ldr	r0, [pc, #32]	; (800de08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dde8:	f7fd faf4 	bl	800b3d4 <USBD_GetString>
 800ddec:	e004      	b.n	800ddf8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ddee:	683a      	ldr	r2, [r7, #0]
 800ddf0:	4904      	ldr	r1, [pc, #16]	; (800de04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ddf2:	4805      	ldr	r0, [pc, #20]	; (800de08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ddf4:	f7fd faee 	bl	800b3d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ddf8:	4b02      	ldr	r3, [pc, #8]	; (800de04 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	3708      	adds	r7, #8
 800ddfe:	46bd      	mov	sp, r7
 800de00:	bd80      	pop	{r7, pc}
 800de02:	bf00      	nop
 800de04:	20000bb4 	.word	0x20000bb4
 800de08:	0800fc14 	.word	0x0800fc14

0800de0c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b084      	sub	sp, #16
 800de10:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800de12:	4b0f      	ldr	r3, [pc, #60]	; (800de50 <Get_SerialNum+0x44>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800de18:	4b0e      	ldr	r3, [pc, #56]	; (800de54 <Get_SerialNum+0x48>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800de1e:	4b0e      	ldr	r3, [pc, #56]	; (800de58 <Get_SerialNum+0x4c>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800de24:	68fa      	ldr	r2, [r7, #12]
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	4413      	add	r3, r2
 800de2a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d009      	beq.n	800de46 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800de32:	2208      	movs	r2, #8
 800de34:	4909      	ldr	r1, [pc, #36]	; (800de5c <Get_SerialNum+0x50>)
 800de36:	68f8      	ldr	r0, [r7, #12]
 800de38:	f000 f814 	bl	800de64 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800de3c:	2204      	movs	r2, #4
 800de3e:	4908      	ldr	r1, [pc, #32]	; (800de60 <Get_SerialNum+0x54>)
 800de40:	68b8      	ldr	r0, [r7, #8]
 800de42:	f000 f80f 	bl	800de64 <IntToUnicode>
  }
}
 800de46:	bf00      	nop
 800de48:	3710      	adds	r7, #16
 800de4a:	46bd      	mov	sp, r7
 800de4c:	bd80      	pop	{r7, pc}
 800de4e:	bf00      	nop
 800de50:	1fff7a10 	.word	0x1fff7a10
 800de54:	1fff7a14 	.word	0x1fff7a14
 800de58:	1fff7a18 	.word	0x1fff7a18
 800de5c:	20000112 	.word	0x20000112
 800de60:	20000122 	.word	0x20000122

0800de64 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800de64:	b480      	push	{r7}
 800de66:	b087      	sub	sp, #28
 800de68:	af00      	add	r7, sp, #0
 800de6a:	60f8      	str	r0, [r7, #12]
 800de6c:	60b9      	str	r1, [r7, #8]
 800de6e:	4613      	mov	r3, r2
 800de70:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800de72:	2300      	movs	r3, #0
 800de74:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800de76:	2300      	movs	r3, #0
 800de78:	75fb      	strb	r3, [r7, #23]
 800de7a:	e027      	b.n	800decc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	0f1b      	lsrs	r3, r3, #28
 800de80:	2b09      	cmp	r3, #9
 800de82:	d80b      	bhi.n	800de9c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	0f1b      	lsrs	r3, r3, #28
 800de88:	b2da      	uxtb	r2, r3
 800de8a:	7dfb      	ldrb	r3, [r7, #23]
 800de8c:	005b      	lsls	r3, r3, #1
 800de8e:	4619      	mov	r1, r3
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	440b      	add	r3, r1
 800de94:	3230      	adds	r2, #48	; 0x30
 800de96:	b2d2      	uxtb	r2, r2
 800de98:	701a      	strb	r2, [r3, #0]
 800de9a:	e00a      	b.n	800deb2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	0f1b      	lsrs	r3, r3, #28
 800dea0:	b2da      	uxtb	r2, r3
 800dea2:	7dfb      	ldrb	r3, [r7, #23]
 800dea4:	005b      	lsls	r3, r3, #1
 800dea6:	4619      	mov	r1, r3
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	440b      	add	r3, r1
 800deac:	3237      	adds	r2, #55	; 0x37
 800deae:	b2d2      	uxtb	r2, r2
 800deb0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	011b      	lsls	r3, r3, #4
 800deb6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800deb8:	7dfb      	ldrb	r3, [r7, #23]
 800deba:	005b      	lsls	r3, r3, #1
 800debc:	3301      	adds	r3, #1
 800debe:	68ba      	ldr	r2, [r7, #8]
 800dec0:	4413      	add	r3, r2
 800dec2:	2200      	movs	r2, #0
 800dec4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dec6:	7dfb      	ldrb	r3, [r7, #23]
 800dec8:	3301      	adds	r3, #1
 800deca:	75fb      	strb	r3, [r7, #23]
 800decc:	7dfa      	ldrb	r2, [r7, #23]
 800dece:	79fb      	ldrb	r3, [r7, #7]
 800ded0:	429a      	cmp	r2, r3
 800ded2:	d3d3      	bcc.n	800de7c <IntToUnicode+0x18>
  }
}
 800ded4:	bf00      	nop
 800ded6:	bf00      	nop
 800ded8:	371c      	adds	r7, #28
 800deda:	46bd      	mov	sp, r7
 800dedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee0:	4770      	bx	lr
	...

0800dee4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b08a      	sub	sp, #40	; 0x28
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800deec:	f107 0314 	add.w	r3, r7, #20
 800def0:	2200      	movs	r2, #0
 800def2:	601a      	str	r2, [r3, #0]
 800def4:	605a      	str	r2, [r3, #4]
 800def6:	609a      	str	r2, [r3, #8]
 800def8:	60da      	str	r2, [r3, #12]
 800defa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800df04:	d13a      	bne.n	800df7c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800df06:	2300      	movs	r3, #0
 800df08:	613b      	str	r3, [r7, #16]
 800df0a:	4b1e      	ldr	r3, [pc, #120]	; (800df84 <HAL_PCD_MspInit+0xa0>)
 800df0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df0e:	4a1d      	ldr	r2, [pc, #116]	; (800df84 <HAL_PCD_MspInit+0xa0>)
 800df10:	f043 0301 	orr.w	r3, r3, #1
 800df14:	6313      	str	r3, [r2, #48]	; 0x30
 800df16:	4b1b      	ldr	r3, [pc, #108]	; (800df84 <HAL_PCD_MspInit+0xa0>)
 800df18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df1a:	f003 0301 	and.w	r3, r3, #1
 800df1e:	613b      	str	r3, [r7, #16]
 800df20:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 800df22:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800df26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df28:	2302      	movs	r3, #2
 800df2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df2c:	2300      	movs	r3, #0
 800df2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800df30:	2303      	movs	r3, #3
 800df32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800df34:	230a      	movs	r3, #10
 800df36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800df38:	f107 0314 	add.w	r3, r7, #20
 800df3c:	4619      	mov	r1, r3
 800df3e:	4812      	ldr	r0, [pc, #72]	; (800df88 <HAL_PCD_MspInit+0xa4>)
 800df40:	f7f4 fc88 	bl	8002854 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800df44:	4b0f      	ldr	r3, [pc, #60]	; (800df84 <HAL_PCD_MspInit+0xa0>)
 800df46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df48:	4a0e      	ldr	r2, [pc, #56]	; (800df84 <HAL_PCD_MspInit+0xa0>)
 800df4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df4e:	6353      	str	r3, [r2, #52]	; 0x34
 800df50:	2300      	movs	r3, #0
 800df52:	60fb      	str	r3, [r7, #12]
 800df54:	4b0b      	ldr	r3, [pc, #44]	; (800df84 <HAL_PCD_MspInit+0xa0>)
 800df56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df58:	4a0a      	ldr	r2, [pc, #40]	; (800df84 <HAL_PCD_MspInit+0xa0>)
 800df5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800df5e:	6453      	str	r3, [r2, #68]	; 0x44
 800df60:	4b08      	ldr	r3, [pc, #32]	; (800df84 <HAL_PCD_MspInit+0xa0>)
 800df62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800df68:	60fb      	str	r3, [r7, #12]
 800df6a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800df6c:	2200      	movs	r2, #0
 800df6e:	2100      	movs	r1, #0
 800df70:	2043      	movs	r0, #67	; 0x43
 800df72:	f7f4 fc34 	bl	80027de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800df76:	2043      	movs	r0, #67	; 0x43
 800df78:	f7f4 fc4d 	bl	8002816 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800df7c:	bf00      	nop
 800df7e:	3728      	adds	r7, #40	; 0x28
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}
 800df84:	40023800 	.word	0x40023800
 800df88:	40020000 	.word	0x40020000

0800df8c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b082      	sub	sp, #8
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800dfa0:	4619      	mov	r1, r3
 800dfa2:	4610      	mov	r0, r2
 800dfa4:	f7fc f8b7 	bl	800a116 <USBD_LL_SetupStage>
}
 800dfa8:	bf00      	nop
 800dfaa:	3708      	adds	r7, #8
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}

0800dfb0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b082      	sub	sp, #8
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
 800dfb8:	460b      	mov	r3, r1
 800dfba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800dfc2:	78fa      	ldrb	r2, [r7, #3]
 800dfc4:	6879      	ldr	r1, [r7, #4]
 800dfc6:	4613      	mov	r3, r2
 800dfc8:	00db      	lsls	r3, r3, #3
 800dfca:	4413      	add	r3, r2
 800dfcc:	009b      	lsls	r3, r3, #2
 800dfce:	440b      	add	r3, r1
 800dfd0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800dfd4:	681a      	ldr	r2, [r3, #0]
 800dfd6:	78fb      	ldrb	r3, [r7, #3]
 800dfd8:	4619      	mov	r1, r3
 800dfda:	f7fc f8f1 	bl	800a1c0 <USBD_LL_DataOutStage>
}
 800dfde:	bf00      	nop
 800dfe0:	3708      	adds	r7, #8
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}

0800dfe6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfe6:	b580      	push	{r7, lr}
 800dfe8:	b082      	sub	sp, #8
 800dfea:	af00      	add	r7, sp, #0
 800dfec:	6078      	str	r0, [r7, #4]
 800dfee:	460b      	mov	r3, r1
 800dff0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800dff8:	78fa      	ldrb	r2, [r7, #3]
 800dffa:	6879      	ldr	r1, [r7, #4]
 800dffc:	4613      	mov	r3, r2
 800dffe:	00db      	lsls	r3, r3, #3
 800e000:	4413      	add	r3, r2
 800e002:	009b      	lsls	r3, r3, #2
 800e004:	440b      	add	r3, r1
 800e006:	334c      	adds	r3, #76	; 0x4c
 800e008:	681a      	ldr	r2, [r3, #0]
 800e00a:	78fb      	ldrb	r3, [r7, #3]
 800e00c:	4619      	mov	r1, r3
 800e00e:	f7fc f98a 	bl	800a326 <USBD_LL_DataInStage>
}
 800e012:	bf00      	nop
 800e014:	3708      	adds	r7, #8
 800e016:	46bd      	mov	sp, r7
 800e018:	bd80      	pop	{r7, pc}

0800e01a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e01a:	b580      	push	{r7, lr}
 800e01c:	b082      	sub	sp, #8
 800e01e:	af00      	add	r7, sp, #0
 800e020:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e028:	4618      	mov	r0, r3
 800e02a:	f7fc fabe 	bl	800a5aa <USBD_LL_SOF>
}
 800e02e:	bf00      	nop
 800e030:	3708      	adds	r7, #8
 800e032:	46bd      	mov	sp, r7
 800e034:	bd80      	pop	{r7, pc}

0800e036 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e036:	b580      	push	{r7, lr}
 800e038:	b084      	sub	sp, #16
 800e03a:	af00      	add	r7, sp, #0
 800e03c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e03e:	2301      	movs	r3, #1
 800e040:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	68db      	ldr	r3, [r3, #12]
 800e046:	2b02      	cmp	r3, #2
 800e048:	d001      	beq.n	800e04e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e04a:	f7f3 ff26 	bl	8001e9a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e054:	7bfa      	ldrb	r2, [r7, #15]
 800e056:	4611      	mov	r1, r2
 800e058:	4618      	mov	r0, r3
 800e05a:	f7fc fa68 	bl	800a52e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e064:	4618      	mov	r0, r3
 800e066:	f7fc fa10 	bl	800a48a <USBD_LL_Reset>
}
 800e06a:	bf00      	nop
 800e06c:	3710      	adds	r7, #16
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}
	...

0800e074 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b082      	sub	sp, #8
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e082:	4618      	mov	r0, r3
 800e084:	f7fc fa63 	bl	800a54e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	687a      	ldr	r2, [r7, #4]
 800e094:	6812      	ldr	r2, [r2, #0]
 800e096:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e09a:	f043 0301 	orr.w	r3, r3, #1
 800e09e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	6a1b      	ldr	r3, [r3, #32]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d005      	beq.n	800e0b4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e0a8:	4b04      	ldr	r3, [pc, #16]	; (800e0bc <HAL_PCD_SuspendCallback+0x48>)
 800e0aa:	691b      	ldr	r3, [r3, #16]
 800e0ac:	4a03      	ldr	r2, [pc, #12]	; (800e0bc <HAL_PCD_SuspendCallback+0x48>)
 800e0ae:	f043 0306 	orr.w	r3, r3, #6
 800e0b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e0b4:	bf00      	nop
 800e0b6:	3708      	adds	r7, #8
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	bd80      	pop	{r7, pc}
 800e0bc:	e000ed00 	.word	0xe000ed00

0800e0c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b082      	sub	sp, #8
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	f7fc fa53 	bl	800a57a <USBD_LL_Resume>
}
 800e0d4:	bf00      	nop
 800e0d6:	3708      	adds	r7, #8
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}

0800e0dc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b082      	sub	sp, #8
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
 800e0e4:	460b      	mov	r3, r1
 800e0e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e0ee:	78fa      	ldrb	r2, [r7, #3]
 800e0f0:	4611      	mov	r1, r2
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f7fc faab 	bl	800a64e <USBD_LL_IsoOUTIncomplete>
}
 800e0f8:	bf00      	nop
 800e0fa:	3708      	adds	r7, #8
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}

0800e100 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b082      	sub	sp, #8
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
 800e108:	460b      	mov	r3, r1
 800e10a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e112:	78fa      	ldrb	r2, [r7, #3]
 800e114:	4611      	mov	r1, r2
 800e116:	4618      	mov	r0, r3
 800e118:	f7fc fa67 	bl	800a5ea <USBD_LL_IsoINIncomplete>
}
 800e11c:	bf00      	nop
 800e11e:	3708      	adds	r7, #8
 800e120:	46bd      	mov	sp, r7
 800e122:	bd80      	pop	{r7, pc}

0800e124 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b082      	sub	sp, #8
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e132:	4618      	mov	r0, r3
 800e134:	f7fc fabd 	bl	800a6b2 <USBD_LL_DevConnected>
}
 800e138:	bf00      	nop
 800e13a:	3708      	adds	r7, #8
 800e13c:	46bd      	mov	sp, r7
 800e13e:	bd80      	pop	{r7, pc}

0800e140 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b082      	sub	sp, #8
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e14e:	4618      	mov	r0, r3
 800e150:	f7fc faba 	bl	800a6c8 <USBD_LL_DevDisconnected>
}
 800e154:	bf00      	nop
 800e156:	3708      	adds	r7, #8
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}

0800e15c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b082      	sub	sp, #8
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	781b      	ldrb	r3, [r3, #0]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d13c      	bne.n	800e1e6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e16c:	4a20      	ldr	r2, [pc, #128]	; (800e1f0 <USBD_LL_Init+0x94>)
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	4a1e      	ldr	r2, [pc, #120]	; (800e1f0 <USBD_LL_Init+0x94>)
 800e178:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e17c:	4b1c      	ldr	r3, [pc, #112]	; (800e1f0 <USBD_LL_Init+0x94>)
 800e17e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e182:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e184:	4b1a      	ldr	r3, [pc, #104]	; (800e1f0 <USBD_LL_Init+0x94>)
 800e186:	2204      	movs	r2, #4
 800e188:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e18a:	4b19      	ldr	r3, [pc, #100]	; (800e1f0 <USBD_LL_Init+0x94>)
 800e18c:	2202      	movs	r2, #2
 800e18e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e190:	4b17      	ldr	r3, [pc, #92]	; (800e1f0 <USBD_LL_Init+0x94>)
 800e192:	2200      	movs	r2, #0
 800e194:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e196:	4b16      	ldr	r3, [pc, #88]	; (800e1f0 <USBD_LL_Init+0x94>)
 800e198:	2202      	movs	r2, #2
 800e19a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e19c:	4b14      	ldr	r3, [pc, #80]	; (800e1f0 <USBD_LL_Init+0x94>)
 800e19e:	2200      	movs	r2, #0
 800e1a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e1a2:	4b13      	ldr	r3, [pc, #76]	; (800e1f0 <USBD_LL_Init+0x94>)
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e1a8:	4b11      	ldr	r3, [pc, #68]	; (800e1f0 <USBD_LL_Init+0x94>)
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e1ae:	4b10      	ldr	r3, [pc, #64]	; (800e1f0 <USBD_LL_Init+0x94>)
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e1b4:	4b0e      	ldr	r3, [pc, #56]	; (800e1f0 <USBD_LL_Init+0x94>)
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e1ba:	480d      	ldr	r0, [pc, #52]	; (800e1f0 <USBD_LL_Init+0x94>)
 800e1bc:	f7f5 ffcb 	bl	8004156 <HAL_PCD_Init>
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d001      	beq.n	800e1ca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e1c6:	f7f3 fe68 	bl	8001e9a <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e1ca:	2180      	movs	r1, #128	; 0x80
 800e1cc:	4808      	ldr	r0, [pc, #32]	; (800e1f0 <USBD_LL_Init+0x94>)
 800e1ce:	f7f7 fa0a 	bl	80055e6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e1d2:	2240      	movs	r2, #64	; 0x40
 800e1d4:	2100      	movs	r1, #0
 800e1d6:	4806      	ldr	r0, [pc, #24]	; (800e1f0 <USBD_LL_Init+0x94>)
 800e1d8:	f7f7 f9be 	bl	8005558 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e1dc:	2280      	movs	r2, #128	; 0x80
 800e1de:	2101      	movs	r1, #1
 800e1e0:	4803      	ldr	r0, [pc, #12]	; (800e1f0 <USBD_LL_Init+0x94>)
 800e1e2:	f7f7 f9b9 	bl	8005558 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e1e6:	2300      	movs	r3, #0
}
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	3708      	adds	r7, #8
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}
 800e1f0:	20000db4 	.word	0x20000db4

0800e1f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b084      	sub	sp, #16
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e200:	2300      	movs	r3, #0
 800e202:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e20a:	4618      	mov	r0, r3
 800e20c:	f7f6 f8c0 	bl	8004390 <HAL_PCD_Start>
 800e210:	4603      	mov	r3, r0
 800e212:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e214:	7bfb      	ldrb	r3, [r7, #15]
 800e216:	4618      	mov	r0, r3
 800e218:	f000 f930 	bl	800e47c <USBD_Get_USB_Status>
 800e21c:	4603      	mov	r3, r0
 800e21e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e220:	7bbb      	ldrb	r3, [r7, #14]
}
 800e222:	4618      	mov	r0, r3
 800e224:	3710      	adds	r7, #16
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}

0800e22a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e22a:	b580      	push	{r7, lr}
 800e22c:	b084      	sub	sp, #16
 800e22e:	af00      	add	r7, sp, #0
 800e230:	6078      	str	r0, [r7, #4]
 800e232:	4608      	mov	r0, r1
 800e234:	4611      	mov	r1, r2
 800e236:	461a      	mov	r2, r3
 800e238:	4603      	mov	r3, r0
 800e23a:	70fb      	strb	r3, [r7, #3]
 800e23c:	460b      	mov	r3, r1
 800e23e:	70bb      	strb	r3, [r7, #2]
 800e240:	4613      	mov	r3, r2
 800e242:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e244:	2300      	movs	r3, #0
 800e246:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e248:	2300      	movs	r3, #0
 800e24a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e252:	78bb      	ldrb	r3, [r7, #2]
 800e254:	883a      	ldrh	r2, [r7, #0]
 800e256:	78f9      	ldrb	r1, [r7, #3]
 800e258:	f7f6 fd91 	bl	8004d7e <HAL_PCD_EP_Open>
 800e25c:	4603      	mov	r3, r0
 800e25e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e260:	7bfb      	ldrb	r3, [r7, #15]
 800e262:	4618      	mov	r0, r3
 800e264:	f000 f90a 	bl	800e47c <USBD_Get_USB_Status>
 800e268:	4603      	mov	r3, r0
 800e26a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e26c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e26e:	4618      	mov	r0, r3
 800e270:	3710      	adds	r7, #16
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}

0800e276 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e276:	b580      	push	{r7, lr}
 800e278:	b084      	sub	sp, #16
 800e27a:	af00      	add	r7, sp, #0
 800e27c:	6078      	str	r0, [r7, #4]
 800e27e:	460b      	mov	r3, r1
 800e280:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e282:	2300      	movs	r3, #0
 800e284:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e286:	2300      	movs	r3, #0
 800e288:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e290:	78fa      	ldrb	r2, [r7, #3]
 800e292:	4611      	mov	r1, r2
 800e294:	4618      	mov	r0, r3
 800e296:	f7f6 fdda 	bl	8004e4e <HAL_PCD_EP_Close>
 800e29a:	4603      	mov	r3, r0
 800e29c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e29e:	7bfb      	ldrb	r3, [r7, #15]
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	f000 f8eb 	bl	800e47c <USBD_Get_USB_Status>
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	3710      	adds	r7, #16
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}

0800e2b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b084      	sub	sp, #16
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
 800e2bc:	460b      	mov	r3, r1
 800e2be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e2ce:	78fa      	ldrb	r2, [r7, #3]
 800e2d0:	4611      	mov	r1, r2
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	f7f6 fe9a 	bl	800500c <HAL_PCD_EP_SetStall>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2dc:	7bfb      	ldrb	r3, [r7, #15]
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f000 f8cc 	bl	800e47c <USBD_Get_USB_Status>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	3710      	adds	r7, #16
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	bd80      	pop	{r7, pc}

0800e2f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e2f2:	b580      	push	{r7, lr}
 800e2f4:	b084      	sub	sp, #16
 800e2f6:	af00      	add	r7, sp, #0
 800e2f8:	6078      	str	r0, [r7, #4]
 800e2fa:	460b      	mov	r3, r1
 800e2fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2fe:	2300      	movs	r3, #0
 800e300:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e302:	2300      	movs	r3, #0
 800e304:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e30c:	78fa      	ldrb	r2, [r7, #3]
 800e30e:	4611      	mov	r1, r2
 800e310:	4618      	mov	r0, r3
 800e312:	f7f6 fedf 	bl	80050d4 <HAL_PCD_EP_ClrStall>
 800e316:	4603      	mov	r3, r0
 800e318:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e31a:	7bfb      	ldrb	r3, [r7, #15]
 800e31c:	4618      	mov	r0, r3
 800e31e:	f000 f8ad 	bl	800e47c <USBD_Get_USB_Status>
 800e322:	4603      	mov	r3, r0
 800e324:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e326:	7bbb      	ldrb	r3, [r7, #14]
}
 800e328:	4618      	mov	r0, r3
 800e32a:	3710      	adds	r7, #16
 800e32c:	46bd      	mov	sp, r7
 800e32e:	bd80      	pop	{r7, pc}

0800e330 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e330:	b480      	push	{r7}
 800e332:	b085      	sub	sp, #20
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
 800e338:	460b      	mov	r3, r1
 800e33a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e342:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e344:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	da0b      	bge.n	800e364 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e34c:	78fb      	ldrb	r3, [r7, #3]
 800e34e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e352:	68f9      	ldr	r1, [r7, #12]
 800e354:	4613      	mov	r3, r2
 800e356:	00db      	lsls	r3, r3, #3
 800e358:	4413      	add	r3, r2
 800e35a:	009b      	lsls	r3, r3, #2
 800e35c:	440b      	add	r3, r1
 800e35e:	333e      	adds	r3, #62	; 0x3e
 800e360:	781b      	ldrb	r3, [r3, #0]
 800e362:	e00b      	b.n	800e37c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e364:	78fb      	ldrb	r3, [r7, #3]
 800e366:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e36a:	68f9      	ldr	r1, [r7, #12]
 800e36c:	4613      	mov	r3, r2
 800e36e:	00db      	lsls	r3, r3, #3
 800e370:	4413      	add	r3, r2
 800e372:	009b      	lsls	r3, r3, #2
 800e374:	440b      	add	r3, r1
 800e376:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e37a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e37c:	4618      	mov	r0, r3
 800e37e:	3714      	adds	r7, #20
 800e380:	46bd      	mov	sp, r7
 800e382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e386:	4770      	bx	lr

0800e388 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b084      	sub	sp, #16
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
 800e390:	460b      	mov	r3, r1
 800e392:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e394:	2300      	movs	r3, #0
 800e396:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e398:	2300      	movs	r3, #0
 800e39a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e3a2:	78fa      	ldrb	r2, [r7, #3]
 800e3a4:	4611      	mov	r1, r2
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f7f6 fcc4 	bl	8004d34 <HAL_PCD_SetAddress>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3b0:	7bfb      	ldrb	r3, [r7, #15]
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f000 f862 	bl	800e47c <USBD_Get_USB_Status>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3be:	4618      	mov	r0, r3
 800e3c0:	3710      	adds	r7, #16
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}

0800e3c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e3c6:	b580      	push	{r7, lr}
 800e3c8:	b086      	sub	sp, #24
 800e3ca:	af00      	add	r7, sp, #0
 800e3cc:	60f8      	str	r0, [r7, #12]
 800e3ce:	607a      	str	r2, [r7, #4]
 800e3d0:	603b      	str	r3, [r7, #0]
 800e3d2:	460b      	mov	r3, r1
 800e3d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e3e4:	7af9      	ldrb	r1, [r7, #11]
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	687a      	ldr	r2, [r7, #4]
 800e3ea:	f7f6 fdc5 	bl	8004f78 <HAL_PCD_EP_Transmit>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3f2:	7dfb      	ldrb	r3, [r7, #23]
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	f000 f841 	bl	800e47c <USBD_Get_USB_Status>
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e3fe:	7dbb      	ldrb	r3, [r7, #22]
}
 800e400:	4618      	mov	r0, r3
 800e402:	3718      	adds	r7, #24
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}

0800e408 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b086      	sub	sp, #24
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	60f8      	str	r0, [r7, #12]
 800e410:	607a      	str	r2, [r7, #4]
 800e412:	603b      	str	r3, [r7, #0]
 800e414:	460b      	mov	r3, r1
 800e416:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e418:	2300      	movs	r3, #0
 800e41a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e41c:	2300      	movs	r3, #0
 800e41e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e426:	7af9      	ldrb	r1, [r7, #11]
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	687a      	ldr	r2, [r7, #4]
 800e42c:	f7f6 fd59 	bl	8004ee2 <HAL_PCD_EP_Receive>
 800e430:	4603      	mov	r3, r0
 800e432:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e434:	7dfb      	ldrb	r3, [r7, #23]
 800e436:	4618      	mov	r0, r3
 800e438:	f000 f820 	bl	800e47c <USBD_Get_USB_Status>
 800e43c:	4603      	mov	r3, r0
 800e43e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e440:	7dbb      	ldrb	r3, [r7, #22]
}
 800e442:	4618      	mov	r0, r3
 800e444:	3718      	adds	r7, #24
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}
	...

0800e44c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e44c:	b480      	push	{r7}
 800e44e:	b083      	sub	sp, #12
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e454:	4b03      	ldr	r3, [pc, #12]	; (800e464 <USBD_static_malloc+0x18>)
}
 800e456:	4618      	mov	r0, r3
 800e458:	370c      	adds	r7, #12
 800e45a:	46bd      	mov	sp, r7
 800e45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e460:	4770      	bx	lr
 800e462:	bf00      	nop
 800e464:	200012c0 	.word	0x200012c0

0800e468 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e468:	b480      	push	{r7}
 800e46a:	b083      	sub	sp, #12
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]

}
 800e470:	bf00      	nop
 800e472:	370c      	adds	r7, #12
 800e474:	46bd      	mov	sp, r7
 800e476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47a:	4770      	bx	lr

0800e47c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e47c:	b480      	push	{r7}
 800e47e:	b085      	sub	sp, #20
 800e480:	af00      	add	r7, sp, #0
 800e482:	4603      	mov	r3, r0
 800e484:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e486:	2300      	movs	r3, #0
 800e488:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e48a:	79fb      	ldrb	r3, [r7, #7]
 800e48c:	2b03      	cmp	r3, #3
 800e48e:	d817      	bhi.n	800e4c0 <USBD_Get_USB_Status+0x44>
 800e490:	a201      	add	r2, pc, #4	; (adr r2, 800e498 <USBD_Get_USB_Status+0x1c>)
 800e492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e496:	bf00      	nop
 800e498:	0800e4a9 	.word	0x0800e4a9
 800e49c:	0800e4af 	.word	0x0800e4af
 800e4a0:	0800e4b5 	.word	0x0800e4b5
 800e4a4:	0800e4bb 	.word	0x0800e4bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	73fb      	strb	r3, [r7, #15]
    break;
 800e4ac:	e00b      	b.n	800e4c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e4ae:	2303      	movs	r3, #3
 800e4b0:	73fb      	strb	r3, [r7, #15]
    break;
 800e4b2:	e008      	b.n	800e4c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e4b4:	2301      	movs	r3, #1
 800e4b6:	73fb      	strb	r3, [r7, #15]
    break;
 800e4b8:	e005      	b.n	800e4c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e4ba:	2303      	movs	r3, #3
 800e4bc:	73fb      	strb	r3, [r7, #15]
    break;
 800e4be:	e002      	b.n	800e4c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e4c0:	2303      	movs	r3, #3
 800e4c2:	73fb      	strb	r3, [r7, #15]
    break;
 800e4c4:	bf00      	nop
  }
  return usb_status;
 800e4c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	3714      	adds	r7, #20
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d2:	4770      	bx	lr

0800e4d4 <__errno>:
 800e4d4:	4b01      	ldr	r3, [pc, #4]	; (800e4dc <__errno+0x8>)
 800e4d6:	6818      	ldr	r0, [r3, #0]
 800e4d8:	4770      	bx	lr
 800e4da:	bf00      	nop
 800e4dc:	2000012c 	.word	0x2000012c

0800e4e0 <__libc_init_array>:
 800e4e0:	b570      	push	{r4, r5, r6, lr}
 800e4e2:	4d0d      	ldr	r5, [pc, #52]	; (800e518 <__libc_init_array+0x38>)
 800e4e4:	4c0d      	ldr	r4, [pc, #52]	; (800e51c <__libc_init_array+0x3c>)
 800e4e6:	1b64      	subs	r4, r4, r5
 800e4e8:	10a4      	asrs	r4, r4, #2
 800e4ea:	2600      	movs	r6, #0
 800e4ec:	42a6      	cmp	r6, r4
 800e4ee:	d109      	bne.n	800e504 <__libc_init_array+0x24>
 800e4f0:	4d0b      	ldr	r5, [pc, #44]	; (800e520 <__libc_init_array+0x40>)
 800e4f2:	4c0c      	ldr	r4, [pc, #48]	; (800e524 <__libc_init_array+0x44>)
 800e4f4:	f001 fa14 	bl	800f920 <_init>
 800e4f8:	1b64      	subs	r4, r4, r5
 800e4fa:	10a4      	asrs	r4, r4, #2
 800e4fc:	2600      	movs	r6, #0
 800e4fe:	42a6      	cmp	r6, r4
 800e500:	d105      	bne.n	800e50e <__libc_init_array+0x2e>
 800e502:	bd70      	pop	{r4, r5, r6, pc}
 800e504:	f855 3b04 	ldr.w	r3, [r5], #4
 800e508:	4798      	blx	r3
 800e50a:	3601      	adds	r6, #1
 800e50c:	e7ee      	b.n	800e4ec <__libc_init_array+0xc>
 800e50e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e512:	4798      	blx	r3
 800e514:	3601      	adds	r6, #1
 800e516:	e7f2      	b.n	800e4fe <__libc_init_array+0x1e>
 800e518:	08011814 	.word	0x08011814
 800e51c:	08011814 	.word	0x08011814
 800e520:	08011814 	.word	0x08011814
 800e524:	08011818 	.word	0x08011818

0800e528 <memset>:
 800e528:	4402      	add	r2, r0
 800e52a:	4603      	mov	r3, r0
 800e52c:	4293      	cmp	r3, r2
 800e52e:	d100      	bne.n	800e532 <memset+0xa>
 800e530:	4770      	bx	lr
 800e532:	f803 1b01 	strb.w	r1, [r3], #1
 800e536:	e7f9      	b.n	800e52c <memset+0x4>

0800e538 <iprintf>:
 800e538:	b40f      	push	{r0, r1, r2, r3}
 800e53a:	4b0a      	ldr	r3, [pc, #40]	; (800e564 <iprintf+0x2c>)
 800e53c:	b513      	push	{r0, r1, r4, lr}
 800e53e:	681c      	ldr	r4, [r3, #0]
 800e540:	b124      	cbz	r4, 800e54c <iprintf+0x14>
 800e542:	69a3      	ldr	r3, [r4, #24]
 800e544:	b913      	cbnz	r3, 800e54c <iprintf+0x14>
 800e546:	4620      	mov	r0, r4
 800e548:	f000 fa92 	bl	800ea70 <__sinit>
 800e54c:	ab05      	add	r3, sp, #20
 800e54e:	9a04      	ldr	r2, [sp, #16]
 800e550:	68a1      	ldr	r1, [r4, #8]
 800e552:	9301      	str	r3, [sp, #4]
 800e554:	4620      	mov	r0, r4
 800e556:	f000 fdf7 	bl	800f148 <_vfiprintf_r>
 800e55a:	b002      	add	sp, #8
 800e55c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e560:	b004      	add	sp, #16
 800e562:	4770      	bx	lr
 800e564:	2000012c 	.word	0x2000012c

0800e568 <_puts_r>:
 800e568:	b570      	push	{r4, r5, r6, lr}
 800e56a:	460e      	mov	r6, r1
 800e56c:	4605      	mov	r5, r0
 800e56e:	b118      	cbz	r0, 800e578 <_puts_r+0x10>
 800e570:	6983      	ldr	r3, [r0, #24]
 800e572:	b90b      	cbnz	r3, 800e578 <_puts_r+0x10>
 800e574:	f000 fa7c 	bl	800ea70 <__sinit>
 800e578:	69ab      	ldr	r3, [r5, #24]
 800e57a:	68ac      	ldr	r4, [r5, #8]
 800e57c:	b913      	cbnz	r3, 800e584 <_puts_r+0x1c>
 800e57e:	4628      	mov	r0, r5
 800e580:	f000 fa76 	bl	800ea70 <__sinit>
 800e584:	4b2c      	ldr	r3, [pc, #176]	; (800e638 <_puts_r+0xd0>)
 800e586:	429c      	cmp	r4, r3
 800e588:	d120      	bne.n	800e5cc <_puts_r+0x64>
 800e58a:	686c      	ldr	r4, [r5, #4]
 800e58c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e58e:	07db      	lsls	r3, r3, #31
 800e590:	d405      	bmi.n	800e59e <_puts_r+0x36>
 800e592:	89a3      	ldrh	r3, [r4, #12]
 800e594:	0598      	lsls	r0, r3, #22
 800e596:	d402      	bmi.n	800e59e <_puts_r+0x36>
 800e598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e59a:	f000 fb07 	bl	800ebac <__retarget_lock_acquire_recursive>
 800e59e:	89a3      	ldrh	r3, [r4, #12]
 800e5a0:	0719      	lsls	r1, r3, #28
 800e5a2:	d51d      	bpl.n	800e5e0 <_puts_r+0x78>
 800e5a4:	6923      	ldr	r3, [r4, #16]
 800e5a6:	b1db      	cbz	r3, 800e5e0 <_puts_r+0x78>
 800e5a8:	3e01      	subs	r6, #1
 800e5aa:	68a3      	ldr	r3, [r4, #8]
 800e5ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e5b0:	3b01      	subs	r3, #1
 800e5b2:	60a3      	str	r3, [r4, #8]
 800e5b4:	bb39      	cbnz	r1, 800e606 <_puts_r+0x9e>
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	da38      	bge.n	800e62c <_puts_r+0xc4>
 800e5ba:	4622      	mov	r2, r4
 800e5bc:	210a      	movs	r1, #10
 800e5be:	4628      	mov	r0, r5
 800e5c0:	f000 f87c 	bl	800e6bc <__swbuf_r>
 800e5c4:	3001      	adds	r0, #1
 800e5c6:	d011      	beq.n	800e5ec <_puts_r+0x84>
 800e5c8:	250a      	movs	r5, #10
 800e5ca:	e011      	b.n	800e5f0 <_puts_r+0x88>
 800e5cc:	4b1b      	ldr	r3, [pc, #108]	; (800e63c <_puts_r+0xd4>)
 800e5ce:	429c      	cmp	r4, r3
 800e5d0:	d101      	bne.n	800e5d6 <_puts_r+0x6e>
 800e5d2:	68ac      	ldr	r4, [r5, #8]
 800e5d4:	e7da      	b.n	800e58c <_puts_r+0x24>
 800e5d6:	4b1a      	ldr	r3, [pc, #104]	; (800e640 <_puts_r+0xd8>)
 800e5d8:	429c      	cmp	r4, r3
 800e5da:	bf08      	it	eq
 800e5dc:	68ec      	ldreq	r4, [r5, #12]
 800e5de:	e7d5      	b.n	800e58c <_puts_r+0x24>
 800e5e0:	4621      	mov	r1, r4
 800e5e2:	4628      	mov	r0, r5
 800e5e4:	f000 f8bc 	bl	800e760 <__swsetup_r>
 800e5e8:	2800      	cmp	r0, #0
 800e5ea:	d0dd      	beq.n	800e5a8 <_puts_r+0x40>
 800e5ec:	f04f 35ff 	mov.w	r5, #4294967295
 800e5f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e5f2:	07da      	lsls	r2, r3, #31
 800e5f4:	d405      	bmi.n	800e602 <_puts_r+0x9a>
 800e5f6:	89a3      	ldrh	r3, [r4, #12]
 800e5f8:	059b      	lsls	r3, r3, #22
 800e5fa:	d402      	bmi.n	800e602 <_puts_r+0x9a>
 800e5fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5fe:	f000 fad6 	bl	800ebae <__retarget_lock_release_recursive>
 800e602:	4628      	mov	r0, r5
 800e604:	bd70      	pop	{r4, r5, r6, pc}
 800e606:	2b00      	cmp	r3, #0
 800e608:	da04      	bge.n	800e614 <_puts_r+0xac>
 800e60a:	69a2      	ldr	r2, [r4, #24]
 800e60c:	429a      	cmp	r2, r3
 800e60e:	dc06      	bgt.n	800e61e <_puts_r+0xb6>
 800e610:	290a      	cmp	r1, #10
 800e612:	d004      	beq.n	800e61e <_puts_r+0xb6>
 800e614:	6823      	ldr	r3, [r4, #0]
 800e616:	1c5a      	adds	r2, r3, #1
 800e618:	6022      	str	r2, [r4, #0]
 800e61a:	7019      	strb	r1, [r3, #0]
 800e61c:	e7c5      	b.n	800e5aa <_puts_r+0x42>
 800e61e:	4622      	mov	r2, r4
 800e620:	4628      	mov	r0, r5
 800e622:	f000 f84b 	bl	800e6bc <__swbuf_r>
 800e626:	3001      	adds	r0, #1
 800e628:	d1bf      	bne.n	800e5aa <_puts_r+0x42>
 800e62a:	e7df      	b.n	800e5ec <_puts_r+0x84>
 800e62c:	6823      	ldr	r3, [r4, #0]
 800e62e:	250a      	movs	r5, #10
 800e630:	1c5a      	adds	r2, r3, #1
 800e632:	6022      	str	r2, [r4, #0]
 800e634:	701d      	strb	r5, [r3, #0]
 800e636:	e7db      	b.n	800e5f0 <_puts_r+0x88>
 800e638:	08011798 	.word	0x08011798
 800e63c:	080117b8 	.word	0x080117b8
 800e640:	08011778 	.word	0x08011778

0800e644 <puts>:
 800e644:	4b02      	ldr	r3, [pc, #8]	; (800e650 <puts+0xc>)
 800e646:	4601      	mov	r1, r0
 800e648:	6818      	ldr	r0, [r3, #0]
 800e64a:	f7ff bf8d 	b.w	800e568 <_puts_r>
 800e64e:	bf00      	nop
 800e650:	2000012c 	.word	0x2000012c

0800e654 <sniprintf>:
 800e654:	b40c      	push	{r2, r3}
 800e656:	b530      	push	{r4, r5, lr}
 800e658:	4b17      	ldr	r3, [pc, #92]	; (800e6b8 <sniprintf+0x64>)
 800e65a:	1e0c      	subs	r4, r1, #0
 800e65c:	681d      	ldr	r5, [r3, #0]
 800e65e:	b09d      	sub	sp, #116	; 0x74
 800e660:	da08      	bge.n	800e674 <sniprintf+0x20>
 800e662:	238b      	movs	r3, #139	; 0x8b
 800e664:	602b      	str	r3, [r5, #0]
 800e666:	f04f 30ff 	mov.w	r0, #4294967295
 800e66a:	b01d      	add	sp, #116	; 0x74
 800e66c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e670:	b002      	add	sp, #8
 800e672:	4770      	bx	lr
 800e674:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e678:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e67c:	bf14      	ite	ne
 800e67e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e682:	4623      	moveq	r3, r4
 800e684:	9304      	str	r3, [sp, #16]
 800e686:	9307      	str	r3, [sp, #28]
 800e688:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e68c:	9002      	str	r0, [sp, #8]
 800e68e:	9006      	str	r0, [sp, #24]
 800e690:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e694:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e696:	ab21      	add	r3, sp, #132	; 0x84
 800e698:	a902      	add	r1, sp, #8
 800e69a:	4628      	mov	r0, r5
 800e69c:	9301      	str	r3, [sp, #4]
 800e69e:	f000 fc29 	bl	800eef4 <_svfiprintf_r>
 800e6a2:	1c43      	adds	r3, r0, #1
 800e6a4:	bfbc      	itt	lt
 800e6a6:	238b      	movlt	r3, #139	; 0x8b
 800e6a8:	602b      	strlt	r3, [r5, #0]
 800e6aa:	2c00      	cmp	r4, #0
 800e6ac:	d0dd      	beq.n	800e66a <sniprintf+0x16>
 800e6ae:	9b02      	ldr	r3, [sp, #8]
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	701a      	strb	r2, [r3, #0]
 800e6b4:	e7d9      	b.n	800e66a <sniprintf+0x16>
 800e6b6:	bf00      	nop
 800e6b8:	2000012c 	.word	0x2000012c

0800e6bc <__swbuf_r>:
 800e6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6be:	460e      	mov	r6, r1
 800e6c0:	4614      	mov	r4, r2
 800e6c2:	4605      	mov	r5, r0
 800e6c4:	b118      	cbz	r0, 800e6ce <__swbuf_r+0x12>
 800e6c6:	6983      	ldr	r3, [r0, #24]
 800e6c8:	b90b      	cbnz	r3, 800e6ce <__swbuf_r+0x12>
 800e6ca:	f000 f9d1 	bl	800ea70 <__sinit>
 800e6ce:	4b21      	ldr	r3, [pc, #132]	; (800e754 <__swbuf_r+0x98>)
 800e6d0:	429c      	cmp	r4, r3
 800e6d2:	d12b      	bne.n	800e72c <__swbuf_r+0x70>
 800e6d4:	686c      	ldr	r4, [r5, #4]
 800e6d6:	69a3      	ldr	r3, [r4, #24]
 800e6d8:	60a3      	str	r3, [r4, #8]
 800e6da:	89a3      	ldrh	r3, [r4, #12]
 800e6dc:	071a      	lsls	r2, r3, #28
 800e6de:	d52f      	bpl.n	800e740 <__swbuf_r+0x84>
 800e6e0:	6923      	ldr	r3, [r4, #16]
 800e6e2:	b36b      	cbz	r3, 800e740 <__swbuf_r+0x84>
 800e6e4:	6923      	ldr	r3, [r4, #16]
 800e6e6:	6820      	ldr	r0, [r4, #0]
 800e6e8:	1ac0      	subs	r0, r0, r3
 800e6ea:	6963      	ldr	r3, [r4, #20]
 800e6ec:	b2f6      	uxtb	r6, r6
 800e6ee:	4283      	cmp	r3, r0
 800e6f0:	4637      	mov	r7, r6
 800e6f2:	dc04      	bgt.n	800e6fe <__swbuf_r+0x42>
 800e6f4:	4621      	mov	r1, r4
 800e6f6:	4628      	mov	r0, r5
 800e6f8:	f000 f926 	bl	800e948 <_fflush_r>
 800e6fc:	bb30      	cbnz	r0, 800e74c <__swbuf_r+0x90>
 800e6fe:	68a3      	ldr	r3, [r4, #8]
 800e700:	3b01      	subs	r3, #1
 800e702:	60a3      	str	r3, [r4, #8]
 800e704:	6823      	ldr	r3, [r4, #0]
 800e706:	1c5a      	adds	r2, r3, #1
 800e708:	6022      	str	r2, [r4, #0]
 800e70a:	701e      	strb	r6, [r3, #0]
 800e70c:	6963      	ldr	r3, [r4, #20]
 800e70e:	3001      	adds	r0, #1
 800e710:	4283      	cmp	r3, r0
 800e712:	d004      	beq.n	800e71e <__swbuf_r+0x62>
 800e714:	89a3      	ldrh	r3, [r4, #12]
 800e716:	07db      	lsls	r3, r3, #31
 800e718:	d506      	bpl.n	800e728 <__swbuf_r+0x6c>
 800e71a:	2e0a      	cmp	r6, #10
 800e71c:	d104      	bne.n	800e728 <__swbuf_r+0x6c>
 800e71e:	4621      	mov	r1, r4
 800e720:	4628      	mov	r0, r5
 800e722:	f000 f911 	bl	800e948 <_fflush_r>
 800e726:	b988      	cbnz	r0, 800e74c <__swbuf_r+0x90>
 800e728:	4638      	mov	r0, r7
 800e72a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e72c:	4b0a      	ldr	r3, [pc, #40]	; (800e758 <__swbuf_r+0x9c>)
 800e72e:	429c      	cmp	r4, r3
 800e730:	d101      	bne.n	800e736 <__swbuf_r+0x7a>
 800e732:	68ac      	ldr	r4, [r5, #8]
 800e734:	e7cf      	b.n	800e6d6 <__swbuf_r+0x1a>
 800e736:	4b09      	ldr	r3, [pc, #36]	; (800e75c <__swbuf_r+0xa0>)
 800e738:	429c      	cmp	r4, r3
 800e73a:	bf08      	it	eq
 800e73c:	68ec      	ldreq	r4, [r5, #12]
 800e73e:	e7ca      	b.n	800e6d6 <__swbuf_r+0x1a>
 800e740:	4621      	mov	r1, r4
 800e742:	4628      	mov	r0, r5
 800e744:	f000 f80c 	bl	800e760 <__swsetup_r>
 800e748:	2800      	cmp	r0, #0
 800e74a:	d0cb      	beq.n	800e6e4 <__swbuf_r+0x28>
 800e74c:	f04f 37ff 	mov.w	r7, #4294967295
 800e750:	e7ea      	b.n	800e728 <__swbuf_r+0x6c>
 800e752:	bf00      	nop
 800e754:	08011798 	.word	0x08011798
 800e758:	080117b8 	.word	0x080117b8
 800e75c:	08011778 	.word	0x08011778

0800e760 <__swsetup_r>:
 800e760:	4b32      	ldr	r3, [pc, #200]	; (800e82c <__swsetup_r+0xcc>)
 800e762:	b570      	push	{r4, r5, r6, lr}
 800e764:	681d      	ldr	r5, [r3, #0]
 800e766:	4606      	mov	r6, r0
 800e768:	460c      	mov	r4, r1
 800e76a:	b125      	cbz	r5, 800e776 <__swsetup_r+0x16>
 800e76c:	69ab      	ldr	r3, [r5, #24]
 800e76e:	b913      	cbnz	r3, 800e776 <__swsetup_r+0x16>
 800e770:	4628      	mov	r0, r5
 800e772:	f000 f97d 	bl	800ea70 <__sinit>
 800e776:	4b2e      	ldr	r3, [pc, #184]	; (800e830 <__swsetup_r+0xd0>)
 800e778:	429c      	cmp	r4, r3
 800e77a:	d10f      	bne.n	800e79c <__swsetup_r+0x3c>
 800e77c:	686c      	ldr	r4, [r5, #4]
 800e77e:	89a3      	ldrh	r3, [r4, #12]
 800e780:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e784:	0719      	lsls	r1, r3, #28
 800e786:	d42c      	bmi.n	800e7e2 <__swsetup_r+0x82>
 800e788:	06dd      	lsls	r5, r3, #27
 800e78a:	d411      	bmi.n	800e7b0 <__swsetup_r+0x50>
 800e78c:	2309      	movs	r3, #9
 800e78e:	6033      	str	r3, [r6, #0]
 800e790:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e794:	81a3      	strh	r3, [r4, #12]
 800e796:	f04f 30ff 	mov.w	r0, #4294967295
 800e79a:	e03e      	b.n	800e81a <__swsetup_r+0xba>
 800e79c:	4b25      	ldr	r3, [pc, #148]	; (800e834 <__swsetup_r+0xd4>)
 800e79e:	429c      	cmp	r4, r3
 800e7a0:	d101      	bne.n	800e7a6 <__swsetup_r+0x46>
 800e7a2:	68ac      	ldr	r4, [r5, #8]
 800e7a4:	e7eb      	b.n	800e77e <__swsetup_r+0x1e>
 800e7a6:	4b24      	ldr	r3, [pc, #144]	; (800e838 <__swsetup_r+0xd8>)
 800e7a8:	429c      	cmp	r4, r3
 800e7aa:	bf08      	it	eq
 800e7ac:	68ec      	ldreq	r4, [r5, #12]
 800e7ae:	e7e6      	b.n	800e77e <__swsetup_r+0x1e>
 800e7b0:	0758      	lsls	r0, r3, #29
 800e7b2:	d512      	bpl.n	800e7da <__swsetup_r+0x7a>
 800e7b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e7b6:	b141      	cbz	r1, 800e7ca <__swsetup_r+0x6a>
 800e7b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e7bc:	4299      	cmp	r1, r3
 800e7be:	d002      	beq.n	800e7c6 <__swsetup_r+0x66>
 800e7c0:	4630      	mov	r0, r6
 800e7c2:	f000 fa5b 	bl	800ec7c <_free_r>
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	6363      	str	r3, [r4, #52]	; 0x34
 800e7ca:	89a3      	ldrh	r3, [r4, #12]
 800e7cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e7d0:	81a3      	strh	r3, [r4, #12]
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	6063      	str	r3, [r4, #4]
 800e7d6:	6923      	ldr	r3, [r4, #16]
 800e7d8:	6023      	str	r3, [r4, #0]
 800e7da:	89a3      	ldrh	r3, [r4, #12]
 800e7dc:	f043 0308 	orr.w	r3, r3, #8
 800e7e0:	81a3      	strh	r3, [r4, #12]
 800e7e2:	6923      	ldr	r3, [r4, #16]
 800e7e4:	b94b      	cbnz	r3, 800e7fa <__swsetup_r+0x9a>
 800e7e6:	89a3      	ldrh	r3, [r4, #12]
 800e7e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e7ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e7f0:	d003      	beq.n	800e7fa <__swsetup_r+0x9a>
 800e7f2:	4621      	mov	r1, r4
 800e7f4:	4630      	mov	r0, r6
 800e7f6:	f000 fa01 	bl	800ebfc <__smakebuf_r>
 800e7fa:	89a0      	ldrh	r0, [r4, #12]
 800e7fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e800:	f010 0301 	ands.w	r3, r0, #1
 800e804:	d00a      	beq.n	800e81c <__swsetup_r+0xbc>
 800e806:	2300      	movs	r3, #0
 800e808:	60a3      	str	r3, [r4, #8]
 800e80a:	6963      	ldr	r3, [r4, #20]
 800e80c:	425b      	negs	r3, r3
 800e80e:	61a3      	str	r3, [r4, #24]
 800e810:	6923      	ldr	r3, [r4, #16]
 800e812:	b943      	cbnz	r3, 800e826 <__swsetup_r+0xc6>
 800e814:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e818:	d1ba      	bne.n	800e790 <__swsetup_r+0x30>
 800e81a:	bd70      	pop	{r4, r5, r6, pc}
 800e81c:	0781      	lsls	r1, r0, #30
 800e81e:	bf58      	it	pl
 800e820:	6963      	ldrpl	r3, [r4, #20]
 800e822:	60a3      	str	r3, [r4, #8]
 800e824:	e7f4      	b.n	800e810 <__swsetup_r+0xb0>
 800e826:	2000      	movs	r0, #0
 800e828:	e7f7      	b.n	800e81a <__swsetup_r+0xba>
 800e82a:	bf00      	nop
 800e82c:	2000012c 	.word	0x2000012c
 800e830:	08011798 	.word	0x08011798
 800e834:	080117b8 	.word	0x080117b8
 800e838:	08011778 	.word	0x08011778

0800e83c <__sflush_r>:
 800e83c:	898a      	ldrh	r2, [r1, #12]
 800e83e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e842:	4605      	mov	r5, r0
 800e844:	0710      	lsls	r0, r2, #28
 800e846:	460c      	mov	r4, r1
 800e848:	d458      	bmi.n	800e8fc <__sflush_r+0xc0>
 800e84a:	684b      	ldr	r3, [r1, #4]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	dc05      	bgt.n	800e85c <__sflush_r+0x20>
 800e850:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e852:	2b00      	cmp	r3, #0
 800e854:	dc02      	bgt.n	800e85c <__sflush_r+0x20>
 800e856:	2000      	movs	r0, #0
 800e858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e85c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e85e:	2e00      	cmp	r6, #0
 800e860:	d0f9      	beq.n	800e856 <__sflush_r+0x1a>
 800e862:	2300      	movs	r3, #0
 800e864:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e868:	682f      	ldr	r7, [r5, #0]
 800e86a:	602b      	str	r3, [r5, #0]
 800e86c:	d032      	beq.n	800e8d4 <__sflush_r+0x98>
 800e86e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e870:	89a3      	ldrh	r3, [r4, #12]
 800e872:	075a      	lsls	r2, r3, #29
 800e874:	d505      	bpl.n	800e882 <__sflush_r+0x46>
 800e876:	6863      	ldr	r3, [r4, #4]
 800e878:	1ac0      	subs	r0, r0, r3
 800e87a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e87c:	b10b      	cbz	r3, 800e882 <__sflush_r+0x46>
 800e87e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e880:	1ac0      	subs	r0, r0, r3
 800e882:	2300      	movs	r3, #0
 800e884:	4602      	mov	r2, r0
 800e886:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e888:	6a21      	ldr	r1, [r4, #32]
 800e88a:	4628      	mov	r0, r5
 800e88c:	47b0      	blx	r6
 800e88e:	1c43      	adds	r3, r0, #1
 800e890:	89a3      	ldrh	r3, [r4, #12]
 800e892:	d106      	bne.n	800e8a2 <__sflush_r+0x66>
 800e894:	6829      	ldr	r1, [r5, #0]
 800e896:	291d      	cmp	r1, #29
 800e898:	d82c      	bhi.n	800e8f4 <__sflush_r+0xb8>
 800e89a:	4a2a      	ldr	r2, [pc, #168]	; (800e944 <__sflush_r+0x108>)
 800e89c:	40ca      	lsrs	r2, r1
 800e89e:	07d6      	lsls	r6, r2, #31
 800e8a0:	d528      	bpl.n	800e8f4 <__sflush_r+0xb8>
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	6062      	str	r2, [r4, #4]
 800e8a6:	04d9      	lsls	r1, r3, #19
 800e8a8:	6922      	ldr	r2, [r4, #16]
 800e8aa:	6022      	str	r2, [r4, #0]
 800e8ac:	d504      	bpl.n	800e8b8 <__sflush_r+0x7c>
 800e8ae:	1c42      	adds	r2, r0, #1
 800e8b0:	d101      	bne.n	800e8b6 <__sflush_r+0x7a>
 800e8b2:	682b      	ldr	r3, [r5, #0]
 800e8b4:	b903      	cbnz	r3, 800e8b8 <__sflush_r+0x7c>
 800e8b6:	6560      	str	r0, [r4, #84]	; 0x54
 800e8b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e8ba:	602f      	str	r7, [r5, #0]
 800e8bc:	2900      	cmp	r1, #0
 800e8be:	d0ca      	beq.n	800e856 <__sflush_r+0x1a>
 800e8c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e8c4:	4299      	cmp	r1, r3
 800e8c6:	d002      	beq.n	800e8ce <__sflush_r+0x92>
 800e8c8:	4628      	mov	r0, r5
 800e8ca:	f000 f9d7 	bl	800ec7c <_free_r>
 800e8ce:	2000      	movs	r0, #0
 800e8d0:	6360      	str	r0, [r4, #52]	; 0x34
 800e8d2:	e7c1      	b.n	800e858 <__sflush_r+0x1c>
 800e8d4:	6a21      	ldr	r1, [r4, #32]
 800e8d6:	2301      	movs	r3, #1
 800e8d8:	4628      	mov	r0, r5
 800e8da:	47b0      	blx	r6
 800e8dc:	1c41      	adds	r1, r0, #1
 800e8de:	d1c7      	bne.n	800e870 <__sflush_r+0x34>
 800e8e0:	682b      	ldr	r3, [r5, #0]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d0c4      	beq.n	800e870 <__sflush_r+0x34>
 800e8e6:	2b1d      	cmp	r3, #29
 800e8e8:	d001      	beq.n	800e8ee <__sflush_r+0xb2>
 800e8ea:	2b16      	cmp	r3, #22
 800e8ec:	d101      	bne.n	800e8f2 <__sflush_r+0xb6>
 800e8ee:	602f      	str	r7, [r5, #0]
 800e8f0:	e7b1      	b.n	800e856 <__sflush_r+0x1a>
 800e8f2:	89a3      	ldrh	r3, [r4, #12]
 800e8f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8f8:	81a3      	strh	r3, [r4, #12]
 800e8fa:	e7ad      	b.n	800e858 <__sflush_r+0x1c>
 800e8fc:	690f      	ldr	r7, [r1, #16]
 800e8fe:	2f00      	cmp	r7, #0
 800e900:	d0a9      	beq.n	800e856 <__sflush_r+0x1a>
 800e902:	0793      	lsls	r3, r2, #30
 800e904:	680e      	ldr	r6, [r1, #0]
 800e906:	bf08      	it	eq
 800e908:	694b      	ldreq	r3, [r1, #20]
 800e90a:	600f      	str	r7, [r1, #0]
 800e90c:	bf18      	it	ne
 800e90e:	2300      	movne	r3, #0
 800e910:	eba6 0807 	sub.w	r8, r6, r7
 800e914:	608b      	str	r3, [r1, #8]
 800e916:	f1b8 0f00 	cmp.w	r8, #0
 800e91a:	dd9c      	ble.n	800e856 <__sflush_r+0x1a>
 800e91c:	6a21      	ldr	r1, [r4, #32]
 800e91e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e920:	4643      	mov	r3, r8
 800e922:	463a      	mov	r2, r7
 800e924:	4628      	mov	r0, r5
 800e926:	47b0      	blx	r6
 800e928:	2800      	cmp	r0, #0
 800e92a:	dc06      	bgt.n	800e93a <__sflush_r+0xfe>
 800e92c:	89a3      	ldrh	r3, [r4, #12]
 800e92e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e932:	81a3      	strh	r3, [r4, #12]
 800e934:	f04f 30ff 	mov.w	r0, #4294967295
 800e938:	e78e      	b.n	800e858 <__sflush_r+0x1c>
 800e93a:	4407      	add	r7, r0
 800e93c:	eba8 0800 	sub.w	r8, r8, r0
 800e940:	e7e9      	b.n	800e916 <__sflush_r+0xda>
 800e942:	bf00      	nop
 800e944:	20400001 	.word	0x20400001

0800e948 <_fflush_r>:
 800e948:	b538      	push	{r3, r4, r5, lr}
 800e94a:	690b      	ldr	r3, [r1, #16]
 800e94c:	4605      	mov	r5, r0
 800e94e:	460c      	mov	r4, r1
 800e950:	b913      	cbnz	r3, 800e958 <_fflush_r+0x10>
 800e952:	2500      	movs	r5, #0
 800e954:	4628      	mov	r0, r5
 800e956:	bd38      	pop	{r3, r4, r5, pc}
 800e958:	b118      	cbz	r0, 800e962 <_fflush_r+0x1a>
 800e95a:	6983      	ldr	r3, [r0, #24]
 800e95c:	b90b      	cbnz	r3, 800e962 <_fflush_r+0x1a>
 800e95e:	f000 f887 	bl	800ea70 <__sinit>
 800e962:	4b14      	ldr	r3, [pc, #80]	; (800e9b4 <_fflush_r+0x6c>)
 800e964:	429c      	cmp	r4, r3
 800e966:	d11b      	bne.n	800e9a0 <_fflush_r+0x58>
 800e968:	686c      	ldr	r4, [r5, #4]
 800e96a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d0ef      	beq.n	800e952 <_fflush_r+0xa>
 800e972:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e974:	07d0      	lsls	r0, r2, #31
 800e976:	d404      	bmi.n	800e982 <_fflush_r+0x3a>
 800e978:	0599      	lsls	r1, r3, #22
 800e97a:	d402      	bmi.n	800e982 <_fflush_r+0x3a>
 800e97c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e97e:	f000 f915 	bl	800ebac <__retarget_lock_acquire_recursive>
 800e982:	4628      	mov	r0, r5
 800e984:	4621      	mov	r1, r4
 800e986:	f7ff ff59 	bl	800e83c <__sflush_r>
 800e98a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e98c:	07da      	lsls	r2, r3, #31
 800e98e:	4605      	mov	r5, r0
 800e990:	d4e0      	bmi.n	800e954 <_fflush_r+0xc>
 800e992:	89a3      	ldrh	r3, [r4, #12]
 800e994:	059b      	lsls	r3, r3, #22
 800e996:	d4dd      	bmi.n	800e954 <_fflush_r+0xc>
 800e998:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e99a:	f000 f908 	bl	800ebae <__retarget_lock_release_recursive>
 800e99e:	e7d9      	b.n	800e954 <_fflush_r+0xc>
 800e9a0:	4b05      	ldr	r3, [pc, #20]	; (800e9b8 <_fflush_r+0x70>)
 800e9a2:	429c      	cmp	r4, r3
 800e9a4:	d101      	bne.n	800e9aa <_fflush_r+0x62>
 800e9a6:	68ac      	ldr	r4, [r5, #8]
 800e9a8:	e7df      	b.n	800e96a <_fflush_r+0x22>
 800e9aa:	4b04      	ldr	r3, [pc, #16]	; (800e9bc <_fflush_r+0x74>)
 800e9ac:	429c      	cmp	r4, r3
 800e9ae:	bf08      	it	eq
 800e9b0:	68ec      	ldreq	r4, [r5, #12]
 800e9b2:	e7da      	b.n	800e96a <_fflush_r+0x22>
 800e9b4:	08011798 	.word	0x08011798
 800e9b8:	080117b8 	.word	0x080117b8
 800e9bc:	08011778 	.word	0x08011778

0800e9c0 <std>:
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	b510      	push	{r4, lr}
 800e9c4:	4604      	mov	r4, r0
 800e9c6:	e9c0 3300 	strd	r3, r3, [r0]
 800e9ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e9ce:	6083      	str	r3, [r0, #8]
 800e9d0:	8181      	strh	r1, [r0, #12]
 800e9d2:	6643      	str	r3, [r0, #100]	; 0x64
 800e9d4:	81c2      	strh	r2, [r0, #14]
 800e9d6:	6183      	str	r3, [r0, #24]
 800e9d8:	4619      	mov	r1, r3
 800e9da:	2208      	movs	r2, #8
 800e9dc:	305c      	adds	r0, #92	; 0x5c
 800e9de:	f7ff fda3 	bl	800e528 <memset>
 800e9e2:	4b05      	ldr	r3, [pc, #20]	; (800e9f8 <std+0x38>)
 800e9e4:	6263      	str	r3, [r4, #36]	; 0x24
 800e9e6:	4b05      	ldr	r3, [pc, #20]	; (800e9fc <std+0x3c>)
 800e9e8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e9ea:	4b05      	ldr	r3, [pc, #20]	; (800ea00 <std+0x40>)
 800e9ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e9ee:	4b05      	ldr	r3, [pc, #20]	; (800ea04 <std+0x44>)
 800e9f0:	6224      	str	r4, [r4, #32]
 800e9f2:	6323      	str	r3, [r4, #48]	; 0x30
 800e9f4:	bd10      	pop	{r4, pc}
 800e9f6:	bf00      	nop
 800e9f8:	0800f6f1 	.word	0x0800f6f1
 800e9fc:	0800f713 	.word	0x0800f713
 800ea00:	0800f74b 	.word	0x0800f74b
 800ea04:	0800f76f 	.word	0x0800f76f

0800ea08 <_cleanup_r>:
 800ea08:	4901      	ldr	r1, [pc, #4]	; (800ea10 <_cleanup_r+0x8>)
 800ea0a:	f000 b8af 	b.w	800eb6c <_fwalk_reent>
 800ea0e:	bf00      	nop
 800ea10:	0800e949 	.word	0x0800e949

0800ea14 <__sfmoreglue>:
 800ea14:	b570      	push	{r4, r5, r6, lr}
 800ea16:	2268      	movs	r2, #104	; 0x68
 800ea18:	1e4d      	subs	r5, r1, #1
 800ea1a:	4355      	muls	r5, r2
 800ea1c:	460e      	mov	r6, r1
 800ea1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ea22:	f000 f997 	bl	800ed54 <_malloc_r>
 800ea26:	4604      	mov	r4, r0
 800ea28:	b140      	cbz	r0, 800ea3c <__sfmoreglue+0x28>
 800ea2a:	2100      	movs	r1, #0
 800ea2c:	e9c0 1600 	strd	r1, r6, [r0]
 800ea30:	300c      	adds	r0, #12
 800ea32:	60a0      	str	r0, [r4, #8]
 800ea34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ea38:	f7ff fd76 	bl	800e528 <memset>
 800ea3c:	4620      	mov	r0, r4
 800ea3e:	bd70      	pop	{r4, r5, r6, pc}

0800ea40 <__sfp_lock_acquire>:
 800ea40:	4801      	ldr	r0, [pc, #4]	; (800ea48 <__sfp_lock_acquire+0x8>)
 800ea42:	f000 b8b3 	b.w	800ebac <__retarget_lock_acquire_recursive>
 800ea46:	bf00      	nop
 800ea48:	200012d5 	.word	0x200012d5

0800ea4c <__sfp_lock_release>:
 800ea4c:	4801      	ldr	r0, [pc, #4]	; (800ea54 <__sfp_lock_release+0x8>)
 800ea4e:	f000 b8ae 	b.w	800ebae <__retarget_lock_release_recursive>
 800ea52:	bf00      	nop
 800ea54:	200012d5 	.word	0x200012d5

0800ea58 <__sinit_lock_acquire>:
 800ea58:	4801      	ldr	r0, [pc, #4]	; (800ea60 <__sinit_lock_acquire+0x8>)
 800ea5a:	f000 b8a7 	b.w	800ebac <__retarget_lock_acquire_recursive>
 800ea5e:	bf00      	nop
 800ea60:	200012d6 	.word	0x200012d6

0800ea64 <__sinit_lock_release>:
 800ea64:	4801      	ldr	r0, [pc, #4]	; (800ea6c <__sinit_lock_release+0x8>)
 800ea66:	f000 b8a2 	b.w	800ebae <__retarget_lock_release_recursive>
 800ea6a:	bf00      	nop
 800ea6c:	200012d6 	.word	0x200012d6

0800ea70 <__sinit>:
 800ea70:	b510      	push	{r4, lr}
 800ea72:	4604      	mov	r4, r0
 800ea74:	f7ff fff0 	bl	800ea58 <__sinit_lock_acquire>
 800ea78:	69a3      	ldr	r3, [r4, #24]
 800ea7a:	b11b      	cbz	r3, 800ea84 <__sinit+0x14>
 800ea7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea80:	f7ff bff0 	b.w	800ea64 <__sinit_lock_release>
 800ea84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ea88:	6523      	str	r3, [r4, #80]	; 0x50
 800ea8a:	4b13      	ldr	r3, [pc, #76]	; (800ead8 <__sinit+0x68>)
 800ea8c:	4a13      	ldr	r2, [pc, #76]	; (800eadc <__sinit+0x6c>)
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	62a2      	str	r2, [r4, #40]	; 0x28
 800ea92:	42a3      	cmp	r3, r4
 800ea94:	bf04      	itt	eq
 800ea96:	2301      	moveq	r3, #1
 800ea98:	61a3      	streq	r3, [r4, #24]
 800ea9a:	4620      	mov	r0, r4
 800ea9c:	f000 f820 	bl	800eae0 <__sfp>
 800eaa0:	6060      	str	r0, [r4, #4]
 800eaa2:	4620      	mov	r0, r4
 800eaa4:	f000 f81c 	bl	800eae0 <__sfp>
 800eaa8:	60a0      	str	r0, [r4, #8]
 800eaaa:	4620      	mov	r0, r4
 800eaac:	f000 f818 	bl	800eae0 <__sfp>
 800eab0:	2200      	movs	r2, #0
 800eab2:	60e0      	str	r0, [r4, #12]
 800eab4:	2104      	movs	r1, #4
 800eab6:	6860      	ldr	r0, [r4, #4]
 800eab8:	f7ff ff82 	bl	800e9c0 <std>
 800eabc:	68a0      	ldr	r0, [r4, #8]
 800eabe:	2201      	movs	r2, #1
 800eac0:	2109      	movs	r1, #9
 800eac2:	f7ff ff7d 	bl	800e9c0 <std>
 800eac6:	68e0      	ldr	r0, [r4, #12]
 800eac8:	2202      	movs	r2, #2
 800eaca:	2112      	movs	r1, #18
 800eacc:	f7ff ff78 	bl	800e9c0 <std>
 800ead0:	2301      	movs	r3, #1
 800ead2:	61a3      	str	r3, [r4, #24]
 800ead4:	e7d2      	b.n	800ea7c <__sinit+0xc>
 800ead6:	bf00      	nop
 800ead8:	08011774 	.word	0x08011774
 800eadc:	0800ea09 	.word	0x0800ea09

0800eae0 <__sfp>:
 800eae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eae2:	4607      	mov	r7, r0
 800eae4:	f7ff ffac 	bl	800ea40 <__sfp_lock_acquire>
 800eae8:	4b1e      	ldr	r3, [pc, #120]	; (800eb64 <__sfp+0x84>)
 800eaea:	681e      	ldr	r6, [r3, #0]
 800eaec:	69b3      	ldr	r3, [r6, #24]
 800eaee:	b913      	cbnz	r3, 800eaf6 <__sfp+0x16>
 800eaf0:	4630      	mov	r0, r6
 800eaf2:	f7ff ffbd 	bl	800ea70 <__sinit>
 800eaf6:	3648      	adds	r6, #72	; 0x48
 800eaf8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800eafc:	3b01      	subs	r3, #1
 800eafe:	d503      	bpl.n	800eb08 <__sfp+0x28>
 800eb00:	6833      	ldr	r3, [r6, #0]
 800eb02:	b30b      	cbz	r3, 800eb48 <__sfp+0x68>
 800eb04:	6836      	ldr	r6, [r6, #0]
 800eb06:	e7f7      	b.n	800eaf8 <__sfp+0x18>
 800eb08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800eb0c:	b9d5      	cbnz	r5, 800eb44 <__sfp+0x64>
 800eb0e:	4b16      	ldr	r3, [pc, #88]	; (800eb68 <__sfp+0x88>)
 800eb10:	60e3      	str	r3, [r4, #12]
 800eb12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800eb16:	6665      	str	r5, [r4, #100]	; 0x64
 800eb18:	f000 f847 	bl	800ebaa <__retarget_lock_init_recursive>
 800eb1c:	f7ff ff96 	bl	800ea4c <__sfp_lock_release>
 800eb20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800eb24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800eb28:	6025      	str	r5, [r4, #0]
 800eb2a:	61a5      	str	r5, [r4, #24]
 800eb2c:	2208      	movs	r2, #8
 800eb2e:	4629      	mov	r1, r5
 800eb30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800eb34:	f7ff fcf8 	bl	800e528 <memset>
 800eb38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800eb3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800eb40:	4620      	mov	r0, r4
 800eb42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb44:	3468      	adds	r4, #104	; 0x68
 800eb46:	e7d9      	b.n	800eafc <__sfp+0x1c>
 800eb48:	2104      	movs	r1, #4
 800eb4a:	4638      	mov	r0, r7
 800eb4c:	f7ff ff62 	bl	800ea14 <__sfmoreglue>
 800eb50:	4604      	mov	r4, r0
 800eb52:	6030      	str	r0, [r6, #0]
 800eb54:	2800      	cmp	r0, #0
 800eb56:	d1d5      	bne.n	800eb04 <__sfp+0x24>
 800eb58:	f7ff ff78 	bl	800ea4c <__sfp_lock_release>
 800eb5c:	230c      	movs	r3, #12
 800eb5e:	603b      	str	r3, [r7, #0]
 800eb60:	e7ee      	b.n	800eb40 <__sfp+0x60>
 800eb62:	bf00      	nop
 800eb64:	08011774 	.word	0x08011774
 800eb68:	ffff0001 	.word	0xffff0001

0800eb6c <_fwalk_reent>:
 800eb6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb70:	4606      	mov	r6, r0
 800eb72:	4688      	mov	r8, r1
 800eb74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800eb78:	2700      	movs	r7, #0
 800eb7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eb7e:	f1b9 0901 	subs.w	r9, r9, #1
 800eb82:	d505      	bpl.n	800eb90 <_fwalk_reent+0x24>
 800eb84:	6824      	ldr	r4, [r4, #0]
 800eb86:	2c00      	cmp	r4, #0
 800eb88:	d1f7      	bne.n	800eb7a <_fwalk_reent+0xe>
 800eb8a:	4638      	mov	r0, r7
 800eb8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb90:	89ab      	ldrh	r3, [r5, #12]
 800eb92:	2b01      	cmp	r3, #1
 800eb94:	d907      	bls.n	800eba6 <_fwalk_reent+0x3a>
 800eb96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eb9a:	3301      	adds	r3, #1
 800eb9c:	d003      	beq.n	800eba6 <_fwalk_reent+0x3a>
 800eb9e:	4629      	mov	r1, r5
 800eba0:	4630      	mov	r0, r6
 800eba2:	47c0      	blx	r8
 800eba4:	4307      	orrs	r7, r0
 800eba6:	3568      	adds	r5, #104	; 0x68
 800eba8:	e7e9      	b.n	800eb7e <_fwalk_reent+0x12>

0800ebaa <__retarget_lock_init_recursive>:
 800ebaa:	4770      	bx	lr

0800ebac <__retarget_lock_acquire_recursive>:
 800ebac:	4770      	bx	lr

0800ebae <__retarget_lock_release_recursive>:
 800ebae:	4770      	bx	lr

0800ebb0 <__swhatbuf_r>:
 800ebb0:	b570      	push	{r4, r5, r6, lr}
 800ebb2:	460e      	mov	r6, r1
 800ebb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebb8:	2900      	cmp	r1, #0
 800ebba:	b096      	sub	sp, #88	; 0x58
 800ebbc:	4614      	mov	r4, r2
 800ebbe:	461d      	mov	r5, r3
 800ebc0:	da08      	bge.n	800ebd4 <__swhatbuf_r+0x24>
 800ebc2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	602a      	str	r2, [r5, #0]
 800ebca:	061a      	lsls	r2, r3, #24
 800ebcc:	d410      	bmi.n	800ebf0 <__swhatbuf_r+0x40>
 800ebce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ebd2:	e00e      	b.n	800ebf2 <__swhatbuf_r+0x42>
 800ebd4:	466a      	mov	r2, sp
 800ebd6:	f000 fdf1 	bl	800f7bc <_fstat_r>
 800ebda:	2800      	cmp	r0, #0
 800ebdc:	dbf1      	blt.n	800ebc2 <__swhatbuf_r+0x12>
 800ebde:	9a01      	ldr	r2, [sp, #4]
 800ebe0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ebe4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ebe8:	425a      	negs	r2, r3
 800ebea:	415a      	adcs	r2, r3
 800ebec:	602a      	str	r2, [r5, #0]
 800ebee:	e7ee      	b.n	800ebce <__swhatbuf_r+0x1e>
 800ebf0:	2340      	movs	r3, #64	; 0x40
 800ebf2:	2000      	movs	r0, #0
 800ebf4:	6023      	str	r3, [r4, #0]
 800ebf6:	b016      	add	sp, #88	; 0x58
 800ebf8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ebfc <__smakebuf_r>:
 800ebfc:	898b      	ldrh	r3, [r1, #12]
 800ebfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ec00:	079d      	lsls	r5, r3, #30
 800ec02:	4606      	mov	r6, r0
 800ec04:	460c      	mov	r4, r1
 800ec06:	d507      	bpl.n	800ec18 <__smakebuf_r+0x1c>
 800ec08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ec0c:	6023      	str	r3, [r4, #0]
 800ec0e:	6123      	str	r3, [r4, #16]
 800ec10:	2301      	movs	r3, #1
 800ec12:	6163      	str	r3, [r4, #20]
 800ec14:	b002      	add	sp, #8
 800ec16:	bd70      	pop	{r4, r5, r6, pc}
 800ec18:	ab01      	add	r3, sp, #4
 800ec1a:	466a      	mov	r2, sp
 800ec1c:	f7ff ffc8 	bl	800ebb0 <__swhatbuf_r>
 800ec20:	9900      	ldr	r1, [sp, #0]
 800ec22:	4605      	mov	r5, r0
 800ec24:	4630      	mov	r0, r6
 800ec26:	f000 f895 	bl	800ed54 <_malloc_r>
 800ec2a:	b948      	cbnz	r0, 800ec40 <__smakebuf_r+0x44>
 800ec2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec30:	059a      	lsls	r2, r3, #22
 800ec32:	d4ef      	bmi.n	800ec14 <__smakebuf_r+0x18>
 800ec34:	f023 0303 	bic.w	r3, r3, #3
 800ec38:	f043 0302 	orr.w	r3, r3, #2
 800ec3c:	81a3      	strh	r3, [r4, #12]
 800ec3e:	e7e3      	b.n	800ec08 <__smakebuf_r+0xc>
 800ec40:	4b0d      	ldr	r3, [pc, #52]	; (800ec78 <__smakebuf_r+0x7c>)
 800ec42:	62b3      	str	r3, [r6, #40]	; 0x28
 800ec44:	89a3      	ldrh	r3, [r4, #12]
 800ec46:	6020      	str	r0, [r4, #0]
 800ec48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec4c:	81a3      	strh	r3, [r4, #12]
 800ec4e:	9b00      	ldr	r3, [sp, #0]
 800ec50:	6163      	str	r3, [r4, #20]
 800ec52:	9b01      	ldr	r3, [sp, #4]
 800ec54:	6120      	str	r0, [r4, #16]
 800ec56:	b15b      	cbz	r3, 800ec70 <__smakebuf_r+0x74>
 800ec58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec5c:	4630      	mov	r0, r6
 800ec5e:	f000 fdbf 	bl	800f7e0 <_isatty_r>
 800ec62:	b128      	cbz	r0, 800ec70 <__smakebuf_r+0x74>
 800ec64:	89a3      	ldrh	r3, [r4, #12]
 800ec66:	f023 0303 	bic.w	r3, r3, #3
 800ec6a:	f043 0301 	orr.w	r3, r3, #1
 800ec6e:	81a3      	strh	r3, [r4, #12]
 800ec70:	89a0      	ldrh	r0, [r4, #12]
 800ec72:	4305      	orrs	r5, r0
 800ec74:	81a5      	strh	r5, [r4, #12]
 800ec76:	e7cd      	b.n	800ec14 <__smakebuf_r+0x18>
 800ec78:	0800ea09 	.word	0x0800ea09

0800ec7c <_free_r>:
 800ec7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec7e:	2900      	cmp	r1, #0
 800ec80:	d044      	beq.n	800ed0c <_free_r+0x90>
 800ec82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec86:	9001      	str	r0, [sp, #4]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	f1a1 0404 	sub.w	r4, r1, #4
 800ec8e:	bfb8      	it	lt
 800ec90:	18e4      	addlt	r4, r4, r3
 800ec92:	f000 fdef 	bl	800f874 <__malloc_lock>
 800ec96:	4a1e      	ldr	r2, [pc, #120]	; (800ed10 <_free_r+0x94>)
 800ec98:	9801      	ldr	r0, [sp, #4]
 800ec9a:	6813      	ldr	r3, [r2, #0]
 800ec9c:	b933      	cbnz	r3, 800ecac <_free_r+0x30>
 800ec9e:	6063      	str	r3, [r4, #4]
 800eca0:	6014      	str	r4, [r2, #0]
 800eca2:	b003      	add	sp, #12
 800eca4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eca8:	f000 bdea 	b.w	800f880 <__malloc_unlock>
 800ecac:	42a3      	cmp	r3, r4
 800ecae:	d908      	bls.n	800ecc2 <_free_r+0x46>
 800ecb0:	6825      	ldr	r5, [r4, #0]
 800ecb2:	1961      	adds	r1, r4, r5
 800ecb4:	428b      	cmp	r3, r1
 800ecb6:	bf01      	itttt	eq
 800ecb8:	6819      	ldreq	r1, [r3, #0]
 800ecba:	685b      	ldreq	r3, [r3, #4]
 800ecbc:	1949      	addeq	r1, r1, r5
 800ecbe:	6021      	streq	r1, [r4, #0]
 800ecc0:	e7ed      	b.n	800ec9e <_free_r+0x22>
 800ecc2:	461a      	mov	r2, r3
 800ecc4:	685b      	ldr	r3, [r3, #4]
 800ecc6:	b10b      	cbz	r3, 800eccc <_free_r+0x50>
 800ecc8:	42a3      	cmp	r3, r4
 800ecca:	d9fa      	bls.n	800ecc2 <_free_r+0x46>
 800eccc:	6811      	ldr	r1, [r2, #0]
 800ecce:	1855      	adds	r5, r2, r1
 800ecd0:	42a5      	cmp	r5, r4
 800ecd2:	d10b      	bne.n	800ecec <_free_r+0x70>
 800ecd4:	6824      	ldr	r4, [r4, #0]
 800ecd6:	4421      	add	r1, r4
 800ecd8:	1854      	adds	r4, r2, r1
 800ecda:	42a3      	cmp	r3, r4
 800ecdc:	6011      	str	r1, [r2, #0]
 800ecde:	d1e0      	bne.n	800eca2 <_free_r+0x26>
 800ece0:	681c      	ldr	r4, [r3, #0]
 800ece2:	685b      	ldr	r3, [r3, #4]
 800ece4:	6053      	str	r3, [r2, #4]
 800ece6:	4421      	add	r1, r4
 800ece8:	6011      	str	r1, [r2, #0]
 800ecea:	e7da      	b.n	800eca2 <_free_r+0x26>
 800ecec:	d902      	bls.n	800ecf4 <_free_r+0x78>
 800ecee:	230c      	movs	r3, #12
 800ecf0:	6003      	str	r3, [r0, #0]
 800ecf2:	e7d6      	b.n	800eca2 <_free_r+0x26>
 800ecf4:	6825      	ldr	r5, [r4, #0]
 800ecf6:	1961      	adds	r1, r4, r5
 800ecf8:	428b      	cmp	r3, r1
 800ecfa:	bf04      	itt	eq
 800ecfc:	6819      	ldreq	r1, [r3, #0]
 800ecfe:	685b      	ldreq	r3, [r3, #4]
 800ed00:	6063      	str	r3, [r4, #4]
 800ed02:	bf04      	itt	eq
 800ed04:	1949      	addeq	r1, r1, r5
 800ed06:	6021      	streq	r1, [r4, #0]
 800ed08:	6054      	str	r4, [r2, #4]
 800ed0a:	e7ca      	b.n	800eca2 <_free_r+0x26>
 800ed0c:	b003      	add	sp, #12
 800ed0e:	bd30      	pop	{r4, r5, pc}
 800ed10:	200012d8 	.word	0x200012d8

0800ed14 <sbrk_aligned>:
 800ed14:	b570      	push	{r4, r5, r6, lr}
 800ed16:	4e0e      	ldr	r6, [pc, #56]	; (800ed50 <sbrk_aligned+0x3c>)
 800ed18:	460c      	mov	r4, r1
 800ed1a:	6831      	ldr	r1, [r6, #0]
 800ed1c:	4605      	mov	r5, r0
 800ed1e:	b911      	cbnz	r1, 800ed26 <sbrk_aligned+0x12>
 800ed20:	f000 fcd6 	bl	800f6d0 <_sbrk_r>
 800ed24:	6030      	str	r0, [r6, #0]
 800ed26:	4621      	mov	r1, r4
 800ed28:	4628      	mov	r0, r5
 800ed2a:	f000 fcd1 	bl	800f6d0 <_sbrk_r>
 800ed2e:	1c43      	adds	r3, r0, #1
 800ed30:	d00a      	beq.n	800ed48 <sbrk_aligned+0x34>
 800ed32:	1cc4      	adds	r4, r0, #3
 800ed34:	f024 0403 	bic.w	r4, r4, #3
 800ed38:	42a0      	cmp	r0, r4
 800ed3a:	d007      	beq.n	800ed4c <sbrk_aligned+0x38>
 800ed3c:	1a21      	subs	r1, r4, r0
 800ed3e:	4628      	mov	r0, r5
 800ed40:	f000 fcc6 	bl	800f6d0 <_sbrk_r>
 800ed44:	3001      	adds	r0, #1
 800ed46:	d101      	bne.n	800ed4c <sbrk_aligned+0x38>
 800ed48:	f04f 34ff 	mov.w	r4, #4294967295
 800ed4c:	4620      	mov	r0, r4
 800ed4e:	bd70      	pop	{r4, r5, r6, pc}
 800ed50:	200012dc 	.word	0x200012dc

0800ed54 <_malloc_r>:
 800ed54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed58:	1ccd      	adds	r5, r1, #3
 800ed5a:	f025 0503 	bic.w	r5, r5, #3
 800ed5e:	3508      	adds	r5, #8
 800ed60:	2d0c      	cmp	r5, #12
 800ed62:	bf38      	it	cc
 800ed64:	250c      	movcc	r5, #12
 800ed66:	2d00      	cmp	r5, #0
 800ed68:	4607      	mov	r7, r0
 800ed6a:	db01      	blt.n	800ed70 <_malloc_r+0x1c>
 800ed6c:	42a9      	cmp	r1, r5
 800ed6e:	d905      	bls.n	800ed7c <_malloc_r+0x28>
 800ed70:	230c      	movs	r3, #12
 800ed72:	603b      	str	r3, [r7, #0]
 800ed74:	2600      	movs	r6, #0
 800ed76:	4630      	mov	r0, r6
 800ed78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed7c:	4e2e      	ldr	r6, [pc, #184]	; (800ee38 <_malloc_r+0xe4>)
 800ed7e:	f000 fd79 	bl	800f874 <__malloc_lock>
 800ed82:	6833      	ldr	r3, [r6, #0]
 800ed84:	461c      	mov	r4, r3
 800ed86:	bb34      	cbnz	r4, 800edd6 <_malloc_r+0x82>
 800ed88:	4629      	mov	r1, r5
 800ed8a:	4638      	mov	r0, r7
 800ed8c:	f7ff ffc2 	bl	800ed14 <sbrk_aligned>
 800ed90:	1c43      	adds	r3, r0, #1
 800ed92:	4604      	mov	r4, r0
 800ed94:	d14d      	bne.n	800ee32 <_malloc_r+0xde>
 800ed96:	6834      	ldr	r4, [r6, #0]
 800ed98:	4626      	mov	r6, r4
 800ed9a:	2e00      	cmp	r6, #0
 800ed9c:	d140      	bne.n	800ee20 <_malloc_r+0xcc>
 800ed9e:	6823      	ldr	r3, [r4, #0]
 800eda0:	4631      	mov	r1, r6
 800eda2:	4638      	mov	r0, r7
 800eda4:	eb04 0803 	add.w	r8, r4, r3
 800eda8:	f000 fc92 	bl	800f6d0 <_sbrk_r>
 800edac:	4580      	cmp	r8, r0
 800edae:	d13a      	bne.n	800ee26 <_malloc_r+0xd2>
 800edb0:	6821      	ldr	r1, [r4, #0]
 800edb2:	3503      	adds	r5, #3
 800edb4:	1a6d      	subs	r5, r5, r1
 800edb6:	f025 0503 	bic.w	r5, r5, #3
 800edba:	3508      	adds	r5, #8
 800edbc:	2d0c      	cmp	r5, #12
 800edbe:	bf38      	it	cc
 800edc0:	250c      	movcc	r5, #12
 800edc2:	4629      	mov	r1, r5
 800edc4:	4638      	mov	r0, r7
 800edc6:	f7ff ffa5 	bl	800ed14 <sbrk_aligned>
 800edca:	3001      	adds	r0, #1
 800edcc:	d02b      	beq.n	800ee26 <_malloc_r+0xd2>
 800edce:	6823      	ldr	r3, [r4, #0]
 800edd0:	442b      	add	r3, r5
 800edd2:	6023      	str	r3, [r4, #0]
 800edd4:	e00e      	b.n	800edf4 <_malloc_r+0xa0>
 800edd6:	6822      	ldr	r2, [r4, #0]
 800edd8:	1b52      	subs	r2, r2, r5
 800edda:	d41e      	bmi.n	800ee1a <_malloc_r+0xc6>
 800eddc:	2a0b      	cmp	r2, #11
 800edde:	d916      	bls.n	800ee0e <_malloc_r+0xba>
 800ede0:	1961      	adds	r1, r4, r5
 800ede2:	42a3      	cmp	r3, r4
 800ede4:	6025      	str	r5, [r4, #0]
 800ede6:	bf18      	it	ne
 800ede8:	6059      	strne	r1, [r3, #4]
 800edea:	6863      	ldr	r3, [r4, #4]
 800edec:	bf08      	it	eq
 800edee:	6031      	streq	r1, [r6, #0]
 800edf0:	5162      	str	r2, [r4, r5]
 800edf2:	604b      	str	r3, [r1, #4]
 800edf4:	4638      	mov	r0, r7
 800edf6:	f104 060b 	add.w	r6, r4, #11
 800edfa:	f000 fd41 	bl	800f880 <__malloc_unlock>
 800edfe:	f026 0607 	bic.w	r6, r6, #7
 800ee02:	1d23      	adds	r3, r4, #4
 800ee04:	1af2      	subs	r2, r6, r3
 800ee06:	d0b6      	beq.n	800ed76 <_malloc_r+0x22>
 800ee08:	1b9b      	subs	r3, r3, r6
 800ee0a:	50a3      	str	r3, [r4, r2]
 800ee0c:	e7b3      	b.n	800ed76 <_malloc_r+0x22>
 800ee0e:	6862      	ldr	r2, [r4, #4]
 800ee10:	42a3      	cmp	r3, r4
 800ee12:	bf0c      	ite	eq
 800ee14:	6032      	streq	r2, [r6, #0]
 800ee16:	605a      	strne	r2, [r3, #4]
 800ee18:	e7ec      	b.n	800edf4 <_malloc_r+0xa0>
 800ee1a:	4623      	mov	r3, r4
 800ee1c:	6864      	ldr	r4, [r4, #4]
 800ee1e:	e7b2      	b.n	800ed86 <_malloc_r+0x32>
 800ee20:	4634      	mov	r4, r6
 800ee22:	6876      	ldr	r6, [r6, #4]
 800ee24:	e7b9      	b.n	800ed9a <_malloc_r+0x46>
 800ee26:	230c      	movs	r3, #12
 800ee28:	603b      	str	r3, [r7, #0]
 800ee2a:	4638      	mov	r0, r7
 800ee2c:	f000 fd28 	bl	800f880 <__malloc_unlock>
 800ee30:	e7a1      	b.n	800ed76 <_malloc_r+0x22>
 800ee32:	6025      	str	r5, [r4, #0]
 800ee34:	e7de      	b.n	800edf4 <_malloc_r+0xa0>
 800ee36:	bf00      	nop
 800ee38:	200012d8 	.word	0x200012d8

0800ee3c <__ssputs_r>:
 800ee3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee40:	688e      	ldr	r6, [r1, #8]
 800ee42:	429e      	cmp	r6, r3
 800ee44:	4682      	mov	sl, r0
 800ee46:	460c      	mov	r4, r1
 800ee48:	4690      	mov	r8, r2
 800ee4a:	461f      	mov	r7, r3
 800ee4c:	d838      	bhi.n	800eec0 <__ssputs_r+0x84>
 800ee4e:	898a      	ldrh	r2, [r1, #12]
 800ee50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ee54:	d032      	beq.n	800eebc <__ssputs_r+0x80>
 800ee56:	6825      	ldr	r5, [r4, #0]
 800ee58:	6909      	ldr	r1, [r1, #16]
 800ee5a:	eba5 0901 	sub.w	r9, r5, r1
 800ee5e:	6965      	ldr	r5, [r4, #20]
 800ee60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ee64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ee68:	3301      	adds	r3, #1
 800ee6a:	444b      	add	r3, r9
 800ee6c:	106d      	asrs	r5, r5, #1
 800ee6e:	429d      	cmp	r5, r3
 800ee70:	bf38      	it	cc
 800ee72:	461d      	movcc	r5, r3
 800ee74:	0553      	lsls	r3, r2, #21
 800ee76:	d531      	bpl.n	800eedc <__ssputs_r+0xa0>
 800ee78:	4629      	mov	r1, r5
 800ee7a:	f7ff ff6b 	bl	800ed54 <_malloc_r>
 800ee7e:	4606      	mov	r6, r0
 800ee80:	b950      	cbnz	r0, 800ee98 <__ssputs_r+0x5c>
 800ee82:	230c      	movs	r3, #12
 800ee84:	f8ca 3000 	str.w	r3, [sl]
 800ee88:	89a3      	ldrh	r3, [r4, #12]
 800ee8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee8e:	81a3      	strh	r3, [r4, #12]
 800ee90:	f04f 30ff 	mov.w	r0, #4294967295
 800ee94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee98:	6921      	ldr	r1, [r4, #16]
 800ee9a:	464a      	mov	r2, r9
 800ee9c:	f000 fcc2 	bl	800f824 <memcpy>
 800eea0:	89a3      	ldrh	r3, [r4, #12]
 800eea2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eeaa:	81a3      	strh	r3, [r4, #12]
 800eeac:	6126      	str	r6, [r4, #16]
 800eeae:	6165      	str	r5, [r4, #20]
 800eeb0:	444e      	add	r6, r9
 800eeb2:	eba5 0509 	sub.w	r5, r5, r9
 800eeb6:	6026      	str	r6, [r4, #0]
 800eeb8:	60a5      	str	r5, [r4, #8]
 800eeba:	463e      	mov	r6, r7
 800eebc:	42be      	cmp	r6, r7
 800eebe:	d900      	bls.n	800eec2 <__ssputs_r+0x86>
 800eec0:	463e      	mov	r6, r7
 800eec2:	6820      	ldr	r0, [r4, #0]
 800eec4:	4632      	mov	r2, r6
 800eec6:	4641      	mov	r1, r8
 800eec8:	f000 fcba 	bl	800f840 <memmove>
 800eecc:	68a3      	ldr	r3, [r4, #8]
 800eece:	1b9b      	subs	r3, r3, r6
 800eed0:	60a3      	str	r3, [r4, #8]
 800eed2:	6823      	ldr	r3, [r4, #0]
 800eed4:	4433      	add	r3, r6
 800eed6:	6023      	str	r3, [r4, #0]
 800eed8:	2000      	movs	r0, #0
 800eeda:	e7db      	b.n	800ee94 <__ssputs_r+0x58>
 800eedc:	462a      	mov	r2, r5
 800eede:	f000 fcd5 	bl	800f88c <_realloc_r>
 800eee2:	4606      	mov	r6, r0
 800eee4:	2800      	cmp	r0, #0
 800eee6:	d1e1      	bne.n	800eeac <__ssputs_r+0x70>
 800eee8:	6921      	ldr	r1, [r4, #16]
 800eeea:	4650      	mov	r0, sl
 800eeec:	f7ff fec6 	bl	800ec7c <_free_r>
 800eef0:	e7c7      	b.n	800ee82 <__ssputs_r+0x46>
	...

0800eef4 <_svfiprintf_r>:
 800eef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eef8:	4698      	mov	r8, r3
 800eefa:	898b      	ldrh	r3, [r1, #12]
 800eefc:	061b      	lsls	r3, r3, #24
 800eefe:	b09d      	sub	sp, #116	; 0x74
 800ef00:	4607      	mov	r7, r0
 800ef02:	460d      	mov	r5, r1
 800ef04:	4614      	mov	r4, r2
 800ef06:	d50e      	bpl.n	800ef26 <_svfiprintf_r+0x32>
 800ef08:	690b      	ldr	r3, [r1, #16]
 800ef0a:	b963      	cbnz	r3, 800ef26 <_svfiprintf_r+0x32>
 800ef0c:	2140      	movs	r1, #64	; 0x40
 800ef0e:	f7ff ff21 	bl	800ed54 <_malloc_r>
 800ef12:	6028      	str	r0, [r5, #0]
 800ef14:	6128      	str	r0, [r5, #16]
 800ef16:	b920      	cbnz	r0, 800ef22 <_svfiprintf_r+0x2e>
 800ef18:	230c      	movs	r3, #12
 800ef1a:	603b      	str	r3, [r7, #0]
 800ef1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ef20:	e0d1      	b.n	800f0c6 <_svfiprintf_r+0x1d2>
 800ef22:	2340      	movs	r3, #64	; 0x40
 800ef24:	616b      	str	r3, [r5, #20]
 800ef26:	2300      	movs	r3, #0
 800ef28:	9309      	str	r3, [sp, #36]	; 0x24
 800ef2a:	2320      	movs	r3, #32
 800ef2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ef30:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef34:	2330      	movs	r3, #48	; 0x30
 800ef36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f0e0 <_svfiprintf_r+0x1ec>
 800ef3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ef3e:	f04f 0901 	mov.w	r9, #1
 800ef42:	4623      	mov	r3, r4
 800ef44:	469a      	mov	sl, r3
 800ef46:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef4a:	b10a      	cbz	r2, 800ef50 <_svfiprintf_r+0x5c>
 800ef4c:	2a25      	cmp	r2, #37	; 0x25
 800ef4e:	d1f9      	bne.n	800ef44 <_svfiprintf_r+0x50>
 800ef50:	ebba 0b04 	subs.w	fp, sl, r4
 800ef54:	d00b      	beq.n	800ef6e <_svfiprintf_r+0x7a>
 800ef56:	465b      	mov	r3, fp
 800ef58:	4622      	mov	r2, r4
 800ef5a:	4629      	mov	r1, r5
 800ef5c:	4638      	mov	r0, r7
 800ef5e:	f7ff ff6d 	bl	800ee3c <__ssputs_r>
 800ef62:	3001      	adds	r0, #1
 800ef64:	f000 80aa 	beq.w	800f0bc <_svfiprintf_r+0x1c8>
 800ef68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef6a:	445a      	add	r2, fp
 800ef6c:	9209      	str	r2, [sp, #36]	; 0x24
 800ef6e:	f89a 3000 	ldrb.w	r3, [sl]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	f000 80a2 	beq.w	800f0bc <_svfiprintf_r+0x1c8>
 800ef78:	2300      	movs	r3, #0
 800ef7a:	f04f 32ff 	mov.w	r2, #4294967295
 800ef7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef82:	f10a 0a01 	add.w	sl, sl, #1
 800ef86:	9304      	str	r3, [sp, #16]
 800ef88:	9307      	str	r3, [sp, #28]
 800ef8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ef8e:	931a      	str	r3, [sp, #104]	; 0x68
 800ef90:	4654      	mov	r4, sl
 800ef92:	2205      	movs	r2, #5
 800ef94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef98:	4851      	ldr	r0, [pc, #324]	; (800f0e0 <_svfiprintf_r+0x1ec>)
 800ef9a:	f7f1 f921 	bl	80001e0 <memchr>
 800ef9e:	9a04      	ldr	r2, [sp, #16]
 800efa0:	b9d8      	cbnz	r0, 800efda <_svfiprintf_r+0xe6>
 800efa2:	06d0      	lsls	r0, r2, #27
 800efa4:	bf44      	itt	mi
 800efa6:	2320      	movmi	r3, #32
 800efa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800efac:	0711      	lsls	r1, r2, #28
 800efae:	bf44      	itt	mi
 800efb0:	232b      	movmi	r3, #43	; 0x2b
 800efb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800efb6:	f89a 3000 	ldrb.w	r3, [sl]
 800efba:	2b2a      	cmp	r3, #42	; 0x2a
 800efbc:	d015      	beq.n	800efea <_svfiprintf_r+0xf6>
 800efbe:	9a07      	ldr	r2, [sp, #28]
 800efc0:	4654      	mov	r4, sl
 800efc2:	2000      	movs	r0, #0
 800efc4:	f04f 0c0a 	mov.w	ip, #10
 800efc8:	4621      	mov	r1, r4
 800efca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800efce:	3b30      	subs	r3, #48	; 0x30
 800efd0:	2b09      	cmp	r3, #9
 800efd2:	d94e      	bls.n	800f072 <_svfiprintf_r+0x17e>
 800efd4:	b1b0      	cbz	r0, 800f004 <_svfiprintf_r+0x110>
 800efd6:	9207      	str	r2, [sp, #28]
 800efd8:	e014      	b.n	800f004 <_svfiprintf_r+0x110>
 800efda:	eba0 0308 	sub.w	r3, r0, r8
 800efde:	fa09 f303 	lsl.w	r3, r9, r3
 800efe2:	4313      	orrs	r3, r2
 800efe4:	9304      	str	r3, [sp, #16]
 800efe6:	46a2      	mov	sl, r4
 800efe8:	e7d2      	b.n	800ef90 <_svfiprintf_r+0x9c>
 800efea:	9b03      	ldr	r3, [sp, #12]
 800efec:	1d19      	adds	r1, r3, #4
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	9103      	str	r1, [sp, #12]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	bfbb      	ittet	lt
 800eff6:	425b      	neglt	r3, r3
 800eff8:	f042 0202 	orrlt.w	r2, r2, #2
 800effc:	9307      	strge	r3, [sp, #28]
 800effe:	9307      	strlt	r3, [sp, #28]
 800f000:	bfb8      	it	lt
 800f002:	9204      	strlt	r2, [sp, #16]
 800f004:	7823      	ldrb	r3, [r4, #0]
 800f006:	2b2e      	cmp	r3, #46	; 0x2e
 800f008:	d10c      	bne.n	800f024 <_svfiprintf_r+0x130>
 800f00a:	7863      	ldrb	r3, [r4, #1]
 800f00c:	2b2a      	cmp	r3, #42	; 0x2a
 800f00e:	d135      	bne.n	800f07c <_svfiprintf_r+0x188>
 800f010:	9b03      	ldr	r3, [sp, #12]
 800f012:	1d1a      	adds	r2, r3, #4
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	9203      	str	r2, [sp, #12]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	bfb8      	it	lt
 800f01c:	f04f 33ff 	movlt.w	r3, #4294967295
 800f020:	3402      	adds	r4, #2
 800f022:	9305      	str	r3, [sp, #20]
 800f024:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f0f0 <_svfiprintf_r+0x1fc>
 800f028:	7821      	ldrb	r1, [r4, #0]
 800f02a:	2203      	movs	r2, #3
 800f02c:	4650      	mov	r0, sl
 800f02e:	f7f1 f8d7 	bl	80001e0 <memchr>
 800f032:	b140      	cbz	r0, 800f046 <_svfiprintf_r+0x152>
 800f034:	2340      	movs	r3, #64	; 0x40
 800f036:	eba0 000a 	sub.w	r0, r0, sl
 800f03a:	fa03 f000 	lsl.w	r0, r3, r0
 800f03e:	9b04      	ldr	r3, [sp, #16]
 800f040:	4303      	orrs	r3, r0
 800f042:	3401      	adds	r4, #1
 800f044:	9304      	str	r3, [sp, #16]
 800f046:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f04a:	4826      	ldr	r0, [pc, #152]	; (800f0e4 <_svfiprintf_r+0x1f0>)
 800f04c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f050:	2206      	movs	r2, #6
 800f052:	f7f1 f8c5 	bl	80001e0 <memchr>
 800f056:	2800      	cmp	r0, #0
 800f058:	d038      	beq.n	800f0cc <_svfiprintf_r+0x1d8>
 800f05a:	4b23      	ldr	r3, [pc, #140]	; (800f0e8 <_svfiprintf_r+0x1f4>)
 800f05c:	bb1b      	cbnz	r3, 800f0a6 <_svfiprintf_r+0x1b2>
 800f05e:	9b03      	ldr	r3, [sp, #12]
 800f060:	3307      	adds	r3, #7
 800f062:	f023 0307 	bic.w	r3, r3, #7
 800f066:	3308      	adds	r3, #8
 800f068:	9303      	str	r3, [sp, #12]
 800f06a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f06c:	4433      	add	r3, r6
 800f06e:	9309      	str	r3, [sp, #36]	; 0x24
 800f070:	e767      	b.n	800ef42 <_svfiprintf_r+0x4e>
 800f072:	fb0c 3202 	mla	r2, ip, r2, r3
 800f076:	460c      	mov	r4, r1
 800f078:	2001      	movs	r0, #1
 800f07a:	e7a5      	b.n	800efc8 <_svfiprintf_r+0xd4>
 800f07c:	2300      	movs	r3, #0
 800f07e:	3401      	adds	r4, #1
 800f080:	9305      	str	r3, [sp, #20]
 800f082:	4619      	mov	r1, r3
 800f084:	f04f 0c0a 	mov.w	ip, #10
 800f088:	4620      	mov	r0, r4
 800f08a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f08e:	3a30      	subs	r2, #48	; 0x30
 800f090:	2a09      	cmp	r2, #9
 800f092:	d903      	bls.n	800f09c <_svfiprintf_r+0x1a8>
 800f094:	2b00      	cmp	r3, #0
 800f096:	d0c5      	beq.n	800f024 <_svfiprintf_r+0x130>
 800f098:	9105      	str	r1, [sp, #20]
 800f09a:	e7c3      	b.n	800f024 <_svfiprintf_r+0x130>
 800f09c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f0a0:	4604      	mov	r4, r0
 800f0a2:	2301      	movs	r3, #1
 800f0a4:	e7f0      	b.n	800f088 <_svfiprintf_r+0x194>
 800f0a6:	ab03      	add	r3, sp, #12
 800f0a8:	9300      	str	r3, [sp, #0]
 800f0aa:	462a      	mov	r2, r5
 800f0ac:	4b0f      	ldr	r3, [pc, #60]	; (800f0ec <_svfiprintf_r+0x1f8>)
 800f0ae:	a904      	add	r1, sp, #16
 800f0b0:	4638      	mov	r0, r7
 800f0b2:	f3af 8000 	nop.w
 800f0b6:	1c42      	adds	r2, r0, #1
 800f0b8:	4606      	mov	r6, r0
 800f0ba:	d1d6      	bne.n	800f06a <_svfiprintf_r+0x176>
 800f0bc:	89ab      	ldrh	r3, [r5, #12]
 800f0be:	065b      	lsls	r3, r3, #25
 800f0c0:	f53f af2c 	bmi.w	800ef1c <_svfiprintf_r+0x28>
 800f0c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f0c6:	b01d      	add	sp, #116	; 0x74
 800f0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0cc:	ab03      	add	r3, sp, #12
 800f0ce:	9300      	str	r3, [sp, #0]
 800f0d0:	462a      	mov	r2, r5
 800f0d2:	4b06      	ldr	r3, [pc, #24]	; (800f0ec <_svfiprintf_r+0x1f8>)
 800f0d4:	a904      	add	r1, sp, #16
 800f0d6:	4638      	mov	r0, r7
 800f0d8:	f000 f9d4 	bl	800f484 <_printf_i>
 800f0dc:	e7eb      	b.n	800f0b6 <_svfiprintf_r+0x1c2>
 800f0de:	bf00      	nop
 800f0e0:	080117d8 	.word	0x080117d8
 800f0e4:	080117e2 	.word	0x080117e2
 800f0e8:	00000000 	.word	0x00000000
 800f0ec:	0800ee3d 	.word	0x0800ee3d
 800f0f0:	080117de 	.word	0x080117de

0800f0f4 <__sfputc_r>:
 800f0f4:	6893      	ldr	r3, [r2, #8]
 800f0f6:	3b01      	subs	r3, #1
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	b410      	push	{r4}
 800f0fc:	6093      	str	r3, [r2, #8]
 800f0fe:	da08      	bge.n	800f112 <__sfputc_r+0x1e>
 800f100:	6994      	ldr	r4, [r2, #24]
 800f102:	42a3      	cmp	r3, r4
 800f104:	db01      	blt.n	800f10a <__sfputc_r+0x16>
 800f106:	290a      	cmp	r1, #10
 800f108:	d103      	bne.n	800f112 <__sfputc_r+0x1e>
 800f10a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f10e:	f7ff bad5 	b.w	800e6bc <__swbuf_r>
 800f112:	6813      	ldr	r3, [r2, #0]
 800f114:	1c58      	adds	r0, r3, #1
 800f116:	6010      	str	r0, [r2, #0]
 800f118:	7019      	strb	r1, [r3, #0]
 800f11a:	4608      	mov	r0, r1
 800f11c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f120:	4770      	bx	lr

0800f122 <__sfputs_r>:
 800f122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f124:	4606      	mov	r6, r0
 800f126:	460f      	mov	r7, r1
 800f128:	4614      	mov	r4, r2
 800f12a:	18d5      	adds	r5, r2, r3
 800f12c:	42ac      	cmp	r4, r5
 800f12e:	d101      	bne.n	800f134 <__sfputs_r+0x12>
 800f130:	2000      	movs	r0, #0
 800f132:	e007      	b.n	800f144 <__sfputs_r+0x22>
 800f134:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f138:	463a      	mov	r2, r7
 800f13a:	4630      	mov	r0, r6
 800f13c:	f7ff ffda 	bl	800f0f4 <__sfputc_r>
 800f140:	1c43      	adds	r3, r0, #1
 800f142:	d1f3      	bne.n	800f12c <__sfputs_r+0xa>
 800f144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f148 <_vfiprintf_r>:
 800f148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f14c:	460d      	mov	r5, r1
 800f14e:	b09d      	sub	sp, #116	; 0x74
 800f150:	4614      	mov	r4, r2
 800f152:	4698      	mov	r8, r3
 800f154:	4606      	mov	r6, r0
 800f156:	b118      	cbz	r0, 800f160 <_vfiprintf_r+0x18>
 800f158:	6983      	ldr	r3, [r0, #24]
 800f15a:	b90b      	cbnz	r3, 800f160 <_vfiprintf_r+0x18>
 800f15c:	f7ff fc88 	bl	800ea70 <__sinit>
 800f160:	4b89      	ldr	r3, [pc, #548]	; (800f388 <_vfiprintf_r+0x240>)
 800f162:	429d      	cmp	r5, r3
 800f164:	d11b      	bne.n	800f19e <_vfiprintf_r+0x56>
 800f166:	6875      	ldr	r5, [r6, #4]
 800f168:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f16a:	07d9      	lsls	r1, r3, #31
 800f16c:	d405      	bmi.n	800f17a <_vfiprintf_r+0x32>
 800f16e:	89ab      	ldrh	r3, [r5, #12]
 800f170:	059a      	lsls	r2, r3, #22
 800f172:	d402      	bmi.n	800f17a <_vfiprintf_r+0x32>
 800f174:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f176:	f7ff fd19 	bl	800ebac <__retarget_lock_acquire_recursive>
 800f17a:	89ab      	ldrh	r3, [r5, #12]
 800f17c:	071b      	lsls	r3, r3, #28
 800f17e:	d501      	bpl.n	800f184 <_vfiprintf_r+0x3c>
 800f180:	692b      	ldr	r3, [r5, #16]
 800f182:	b9eb      	cbnz	r3, 800f1c0 <_vfiprintf_r+0x78>
 800f184:	4629      	mov	r1, r5
 800f186:	4630      	mov	r0, r6
 800f188:	f7ff faea 	bl	800e760 <__swsetup_r>
 800f18c:	b1c0      	cbz	r0, 800f1c0 <_vfiprintf_r+0x78>
 800f18e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f190:	07dc      	lsls	r4, r3, #31
 800f192:	d50e      	bpl.n	800f1b2 <_vfiprintf_r+0x6a>
 800f194:	f04f 30ff 	mov.w	r0, #4294967295
 800f198:	b01d      	add	sp, #116	; 0x74
 800f19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f19e:	4b7b      	ldr	r3, [pc, #492]	; (800f38c <_vfiprintf_r+0x244>)
 800f1a0:	429d      	cmp	r5, r3
 800f1a2:	d101      	bne.n	800f1a8 <_vfiprintf_r+0x60>
 800f1a4:	68b5      	ldr	r5, [r6, #8]
 800f1a6:	e7df      	b.n	800f168 <_vfiprintf_r+0x20>
 800f1a8:	4b79      	ldr	r3, [pc, #484]	; (800f390 <_vfiprintf_r+0x248>)
 800f1aa:	429d      	cmp	r5, r3
 800f1ac:	bf08      	it	eq
 800f1ae:	68f5      	ldreq	r5, [r6, #12]
 800f1b0:	e7da      	b.n	800f168 <_vfiprintf_r+0x20>
 800f1b2:	89ab      	ldrh	r3, [r5, #12]
 800f1b4:	0598      	lsls	r0, r3, #22
 800f1b6:	d4ed      	bmi.n	800f194 <_vfiprintf_r+0x4c>
 800f1b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f1ba:	f7ff fcf8 	bl	800ebae <__retarget_lock_release_recursive>
 800f1be:	e7e9      	b.n	800f194 <_vfiprintf_r+0x4c>
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	9309      	str	r3, [sp, #36]	; 0x24
 800f1c4:	2320      	movs	r3, #32
 800f1c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f1ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800f1ce:	2330      	movs	r3, #48	; 0x30
 800f1d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f394 <_vfiprintf_r+0x24c>
 800f1d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f1d8:	f04f 0901 	mov.w	r9, #1
 800f1dc:	4623      	mov	r3, r4
 800f1de:	469a      	mov	sl, r3
 800f1e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f1e4:	b10a      	cbz	r2, 800f1ea <_vfiprintf_r+0xa2>
 800f1e6:	2a25      	cmp	r2, #37	; 0x25
 800f1e8:	d1f9      	bne.n	800f1de <_vfiprintf_r+0x96>
 800f1ea:	ebba 0b04 	subs.w	fp, sl, r4
 800f1ee:	d00b      	beq.n	800f208 <_vfiprintf_r+0xc0>
 800f1f0:	465b      	mov	r3, fp
 800f1f2:	4622      	mov	r2, r4
 800f1f4:	4629      	mov	r1, r5
 800f1f6:	4630      	mov	r0, r6
 800f1f8:	f7ff ff93 	bl	800f122 <__sfputs_r>
 800f1fc:	3001      	adds	r0, #1
 800f1fe:	f000 80aa 	beq.w	800f356 <_vfiprintf_r+0x20e>
 800f202:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f204:	445a      	add	r2, fp
 800f206:	9209      	str	r2, [sp, #36]	; 0x24
 800f208:	f89a 3000 	ldrb.w	r3, [sl]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	f000 80a2 	beq.w	800f356 <_vfiprintf_r+0x20e>
 800f212:	2300      	movs	r3, #0
 800f214:	f04f 32ff 	mov.w	r2, #4294967295
 800f218:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f21c:	f10a 0a01 	add.w	sl, sl, #1
 800f220:	9304      	str	r3, [sp, #16]
 800f222:	9307      	str	r3, [sp, #28]
 800f224:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f228:	931a      	str	r3, [sp, #104]	; 0x68
 800f22a:	4654      	mov	r4, sl
 800f22c:	2205      	movs	r2, #5
 800f22e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f232:	4858      	ldr	r0, [pc, #352]	; (800f394 <_vfiprintf_r+0x24c>)
 800f234:	f7f0 ffd4 	bl	80001e0 <memchr>
 800f238:	9a04      	ldr	r2, [sp, #16]
 800f23a:	b9d8      	cbnz	r0, 800f274 <_vfiprintf_r+0x12c>
 800f23c:	06d1      	lsls	r1, r2, #27
 800f23e:	bf44      	itt	mi
 800f240:	2320      	movmi	r3, #32
 800f242:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f246:	0713      	lsls	r3, r2, #28
 800f248:	bf44      	itt	mi
 800f24a:	232b      	movmi	r3, #43	; 0x2b
 800f24c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f250:	f89a 3000 	ldrb.w	r3, [sl]
 800f254:	2b2a      	cmp	r3, #42	; 0x2a
 800f256:	d015      	beq.n	800f284 <_vfiprintf_r+0x13c>
 800f258:	9a07      	ldr	r2, [sp, #28]
 800f25a:	4654      	mov	r4, sl
 800f25c:	2000      	movs	r0, #0
 800f25e:	f04f 0c0a 	mov.w	ip, #10
 800f262:	4621      	mov	r1, r4
 800f264:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f268:	3b30      	subs	r3, #48	; 0x30
 800f26a:	2b09      	cmp	r3, #9
 800f26c:	d94e      	bls.n	800f30c <_vfiprintf_r+0x1c4>
 800f26e:	b1b0      	cbz	r0, 800f29e <_vfiprintf_r+0x156>
 800f270:	9207      	str	r2, [sp, #28]
 800f272:	e014      	b.n	800f29e <_vfiprintf_r+0x156>
 800f274:	eba0 0308 	sub.w	r3, r0, r8
 800f278:	fa09 f303 	lsl.w	r3, r9, r3
 800f27c:	4313      	orrs	r3, r2
 800f27e:	9304      	str	r3, [sp, #16]
 800f280:	46a2      	mov	sl, r4
 800f282:	e7d2      	b.n	800f22a <_vfiprintf_r+0xe2>
 800f284:	9b03      	ldr	r3, [sp, #12]
 800f286:	1d19      	adds	r1, r3, #4
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	9103      	str	r1, [sp, #12]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	bfbb      	ittet	lt
 800f290:	425b      	neglt	r3, r3
 800f292:	f042 0202 	orrlt.w	r2, r2, #2
 800f296:	9307      	strge	r3, [sp, #28]
 800f298:	9307      	strlt	r3, [sp, #28]
 800f29a:	bfb8      	it	lt
 800f29c:	9204      	strlt	r2, [sp, #16]
 800f29e:	7823      	ldrb	r3, [r4, #0]
 800f2a0:	2b2e      	cmp	r3, #46	; 0x2e
 800f2a2:	d10c      	bne.n	800f2be <_vfiprintf_r+0x176>
 800f2a4:	7863      	ldrb	r3, [r4, #1]
 800f2a6:	2b2a      	cmp	r3, #42	; 0x2a
 800f2a8:	d135      	bne.n	800f316 <_vfiprintf_r+0x1ce>
 800f2aa:	9b03      	ldr	r3, [sp, #12]
 800f2ac:	1d1a      	adds	r2, r3, #4
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	9203      	str	r2, [sp, #12]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	bfb8      	it	lt
 800f2b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800f2ba:	3402      	adds	r4, #2
 800f2bc:	9305      	str	r3, [sp, #20]
 800f2be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f3a4 <_vfiprintf_r+0x25c>
 800f2c2:	7821      	ldrb	r1, [r4, #0]
 800f2c4:	2203      	movs	r2, #3
 800f2c6:	4650      	mov	r0, sl
 800f2c8:	f7f0 ff8a 	bl	80001e0 <memchr>
 800f2cc:	b140      	cbz	r0, 800f2e0 <_vfiprintf_r+0x198>
 800f2ce:	2340      	movs	r3, #64	; 0x40
 800f2d0:	eba0 000a 	sub.w	r0, r0, sl
 800f2d4:	fa03 f000 	lsl.w	r0, r3, r0
 800f2d8:	9b04      	ldr	r3, [sp, #16]
 800f2da:	4303      	orrs	r3, r0
 800f2dc:	3401      	adds	r4, #1
 800f2de:	9304      	str	r3, [sp, #16]
 800f2e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2e4:	482c      	ldr	r0, [pc, #176]	; (800f398 <_vfiprintf_r+0x250>)
 800f2e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f2ea:	2206      	movs	r2, #6
 800f2ec:	f7f0 ff78 	bl	80001e0 <memchr>
 800f2f0:	2800      	cmp	r0, #0
 800f2f2:	d03f      	beq.n	800f374 <_vfiprintf_r+0x22c>
 800f2f4:	4b29      	ldr	r3, [pc, #164]	; (800f39c <_vfiprintf_r+0x254>)
 800f2f6:	bb1b      	cbnz	r3, 800f340 <_vfiprintf_r+0x1f8>
 800f2f8:	9b03      	ldr	r3, [sp, #12]
 800f2fa:	3307      	adds	r3, #7
 800f2fc:	f023 0307 	bic.w	r3, r3, #7
 800f300:	3308      	adds	r3, #8
 800f302:	9303      	str	r3, [sp, #12]
 800f304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f306:	443b      	add	r3, r7
 800f308:	9309      	str	r3, [sp, #36]	; 0x24
 800f30a:	e767      	b.n	800f1dc <_vfiprintf_r+0x94>
 800f30c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f310:	460c      	mov	r4, r1
 800f312:	2001      	movs	r0, #1
 800f314:	e7a5      	b.n	800f262 <_vfiprintf_r+0x11a>
 800f316:	2300      	movs	r3, #0
 800f318:	3401      	adds	r4, #1
 800f31a:	9305      	str	r3, [sp, #20]
 800f31c:	4619      	mov	r1, r3
 800f31e:	f04f 0c0a 	mov.w	ip, #10
 800f322:	4620      	mov	r0, r4
 800f324:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f328:	3a30      	subs	r2, #48	; 0x30
 800f32a:	2a09      	cmp	r2, #9
 800f32c:	d903      	bls.n	800f336 <_vfiprintf_r+0x1ee>
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d0c5      	beq.n	800f2be <_vfiprintf_r+0x176>
 800f332:	9105      	str	r1, [sp, #20]
 800f334:	e7c3      	b.n	800f2be <_vfiprintf_r+0x176>
 800f336:	fb0c 2101 	mla	r1, ip, r1, r2
 800f33a:	4604      	mov	r4, r0
 800f33c:	2301      	movs	r3, #1
 800f33e:	e7f0      	b.n	800f322 <_vfiprintf_r+0x1da>
 800f340:	ab03      	add	r3, sp, #12
 800f342:	9300      	str	r3, [sp, #0]
 800f344:	462a      	mov	r2, r5
 800f346:	4b16      	ldr	r3, [pc, #88]	; (800f3a0 <_vfiprintf_r+0x258>)
 800f348:	a904      	add	r1, sp, #16
 800f34a:	4630      	mov	r0, r6
 800f34c:	f3af 8000 	nop.w
 800f350:	4607      	mov	r7, r0
 800f352:	1c78      	adds	r0, r7, #1
 800f354:	d1d6      	bne.n	800f304 <_vfiprintf_r+0x1bc>
 800f356:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f358:	07d9      	lsls	r1, r3, #31
 800f35a:	d405      	bmi.n	800f368 <_vfiprintf_r+0x220>
 800f35c:	89ab      	ldrh	r3, [r5, #12]
 800f35e:	059a      	lsls	r2, r3, #22
 800f360:	d402      	bmi.n	800f368 <_vfiprintf_r+0x220>
 800f362:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f364:	f7ff fc23 	bl	800ebae <__retarget_lock_release_recursive>
 800f368:	89ab      	ldrh	r3, [r5, #12]
 800f36a:	065b      	lsls	r3, r3, #25
 800f36c:	f53f af12 	bmi.w	800f194 <_vfiprintf_r+0x4c>
 800f370:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f372:	e711      	b.n	800f198 <_vfiprintf_r+0x50>
 800f374:	ab03      	add	r3, sp, #12
 800f376:	9300      	str	r3, [sp, #0]
 800f378:	462a      	mov	r2, r5
 800f37a:	4b09      	ldr	r3, [pc, #36]	; (800f3a0 <_vfiprintf_r+0x258>)
 800f37c:	a904      	add	r1, sp, #16
 800f37e:	4630      	mov	r0, r6
 800f380:	f000 f880 	bl	800f484 <_printf_i>
 800f384:	e7e4      	b.n	800f350 <_vfiprintf_r+0x208>
 800f386:	bf00      	nop
 800f388:	08011798 	.word	0x08011798
 800f38c:	080117b8 	.word	0x080117b8
 800f390:	08011778 	.word	0x08011778
 800f394:	080117d8 	.word	0x080117d8
 800f398:	080117e2 	.word	0x080117e2
 800f39c:	00000000 	.word	0x00000000
 800f3a0:	0800f123 	.word	0x0800f123
 800f3a4:	080117de 	.word	0x080117de

0800f3a8 <_printf_common>:
 800f3a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3ac:	4616      	mov	r6, r2
 800f3ae:	4699      	mov	r9, r3
 800f3b0:	688a      	ldr	r2, [r1, #8]
 800f3b2:	690b      	ldr	r3, [r1, #16]
 800f3b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f3b8:	4293      	cmp	r3, r2
 800f3ba:	bfb8      	it	lt
 800f3bc:	4613      	movlt	r3, r2
 800f3be:	6033      	str	r3, [r6, #0]
 800f3c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f3c4:	4607      	mov	r7, r0
 800f3c6:	460c      	mov	r4, r1
 800f3c8:	b10a      	cbz	r2, 800f3ce <_printf_common+0x26>
 800f3ca:	3301      	adds	r3, #1
 800f3cc:	6033      	str	r3, [r6, #0]
 800f3ce:	6823      	ldr	r3, [r4, #0]
 800f3d0:	0699      	lsls	r1, r3, #26
 800f3d2:	bf42      	ittt	mi
 800f3d4:	6833      	ldrmi	r3, [r6, #0]
 800f3d6:	3302      	addmi	r3, #2
 800f3d8:	6033      	strmi	r3, [r6, #0]
 800f3da:	6825      	ldr	r5, [r4, #0]
 800f3dc:	f015 0506 	ands.w	r5, r5, #6
 800f3e0:	d106      	bne.n	800f3f0 <_printf_common+0x48>
 800f3e2:	f104 0a19 	add.w	sl, r4, #25
 800f3e6:	68e3      	ldr	r3, [r4, #12]
 800f3e8:	6832      	ldr	r2, [r6, #0]
 800f3ea:	1a9b      	subs	r3, r3, r2
 800f3ec:	42ab      	cmp	r3, r5
 800f3ee:	dc26      	bgt.n	800f43e <_printf_common+0x96>
 800f3f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f3f4:	1e13      	subs	r3, r2, #0
 800f3f6:	6822      	ldr	r2, [r4, #0]
 800f3f8:	bf18      	it	ne
 800f3fa:	2301      	movne	r3, #1
 800f3fc:	0692      	lsls	r2, r2, #26
 800f3fe:	d42b      	bmi.n	800f458 <_printf_common+0xb0>
 800f400:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f404:	4649      	mov	r1, r9
 800f406:	4638      	mov	r0, r7
 800f408:	47c0      	blx	r8
 800f40a:	3001      	adds	r0, #1
 800f40c:	d01e      	beq.n	800f44c <_printf_common+0xa4>
 800f40e:	6823      	ldr	r3, [r4, #0]
 800f410:	68e5      	ldr	r5, [r4, #12]
 800f412:	6832      	ldr	r2, [r6, #0]
 800f414:	f003 0306 	and.w	r3, r3, #6
 800f418:	2b04      	cmp	r3, #4
 800f41a:	bf08      	it	eq
 800f41c:	1aad      	subeq	r5, r5, r2
 800f41e:	68a3      	ldr	r3, [r4, #8]
 800f420:	6922      	ldr	r2, [r4, #16]
 800f422:	bf0c      	ite	eq
 800f424:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f428:	2500      	movne	r5, #0
 800f42a:	4293      	cmp	r3, r2
 800f42c:	bfc4      	itt	gt
 800f42e:	1a9b      	subgt	r3, r3, r2
 800f430:	18ed      	addgt	r5, r5, r3
 800f432:	2600      	movs	r6, #0
 800f434:	341a      	adds	r4, #26
 800f436:	42b5      	cmp	r5, r6
 800f438:	d11a      	bne.n	800f470 <_printf_common+0xc8>
 800f43a:	2000      	movs	r0, #0
 800f43c:	e008      	b.n	800f450 <_printf_common+0xa8>
 800f43e:	2301      	movs	r3, #1
 800f440:	4652      	mov	r2, sl
 800f442:	4649      	mov	r1, r9
 800f444:	4638      	mov	r0, r7
 800f446:	47c0      	blx	r8
 800f448:	3001      	adds	r0, #1
 800f44a:	d103      	bne.n	800f454 <_printf_common+0xac>
 800f44c:	f04f 30ff 	mov.w	r0, #4294967295
 800f450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f454:	3501      	adds	r5, #1
 800f456:	e7c6      	b.n	800f3e6 <_printf_common+0x3e>
 800f458:	18e1      	adds	r1, r4, r3
 800f45a:	1c5a      	adds	r2, r3, #1
 800f45c:	2030      	movs	r0, #48	; 0x30
 800f45e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f462:	4422      	add	r2, r4
 800f464:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f468:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f46c:	3302      	adds	r3, #2
 800f46e:	e7c7      	b.n	800f400 <_printf_common+0x58>
 800f470:	2301      	movs	r3, #1
 800f472:	4622      	mov	r2, r4
 800f474:	4649      	mov	r1, r9
 800f476:	4638      	mov	r0, r7
 800f478:	47c0      	blx	r8
 800f47a:	3001      	adds	r0, #1
 800f47c:	d0e6      	beq.n	800f44c <_printf_common+0xa4>
 800f47e:	3601      	adds	r6, #1
 800f480:	e7d9      	b.n	800f436 <_printf_common+0x8e>
	...

0800f484 <_printf_i>:
 800f484:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f488:	7e0f      	ldrb	r7, [r1, #24]
 800f48a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f48c:	2f78      	cmp	r7, #120	; 0x78
 800f48e:	4691      	mov	r9, r2
 800f490:	4680      	mov	r8, r0
 800f492:	460c      	mov	r4, r1
 800f494:	469a      	mov	sl, r3
 800f496:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f49a:	d807      	bhi.n	800f4ac <_printf_i+0x28>
 800f49c:	2f62      	cmp	r7, #98	; 0x62
 800f49e:	d80a      	bhi.n	800f4b6 <_printf_i+0x32>
 800f4a0:	2f00      	cmp	r7, #0
 800f4a2:	f000 80d8 	beq.w	800f656 <_printf_i+0x1d2>
 800f4a6:	2f58      	cmp	r7, #88	; 0x58
 800f4a8:	f000 80a3 	beq.w	800f5f2 <_printf_i+0x16e>
 800f4ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f4b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f4b4:	e03a      	b.n	800f52c <_printf_i+0xa8>
 800f4b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f4ba:	2b15      	cmp	r3, #21
 800f4bc:	d8f6      	bhi.n	800f4ac <_printf_i+0x28>
 800f4be:	a101      	add	r1, pc, #4	; (adr r1, 800f4c4 <_printf_i+0x40>)
 800f4c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f4c4:	0800f51d 	.word	0x0800f51d
 800f4c8:	0800f531 	.word	0x0800f531
 800f4cc:	0800f4ad 	.word	0x0800f4ad
 800f4d0:	0800f4ad 	.word	0x0800f4ad
 800f4d4:	0800f4ad 	.word	0x0800f4ad
 800f4d8:	0800f4ad 	.word	0x0800f4ad
 800f4dc:	0800f531 	.word	0x0800f531
 800f4e0:	0800f4ad 	.word	0x0800f4ad
 800f4e4:	0800f4ad 	.word	0x0800f4ad
 800f4e8:	0800f4ad 	.word	0x0800f4ad
 800f4ec:	0800f4ad 	.word	0x0800f4ad
 800f4f0:	0800f63d 	.word	0x0800f63d
 800f4f4:	0800f561 	.word	0x0800f561
 800f4f8:	0800f61f 	.word	0x0800f61f
 800f4fc:	0800f4ad 	.word	0x0800f4ad
 800f500:	0800f4ad 	.word	0x0800f4ad
 800f504:	0800f65f 	.word	0x0800f65f
 800f508:	0800f4ad 	.word	0x0800f4ad
 800f50c:	0800f561 	.word	0x0800f561
 800f510:	0800f4ad 	.word	0x0800f4ad
 800f514:	0800f4ad 	.word	0x0800f4ad
 800f518:	0800f627 	.word	0x0800f627
 800f51c:	682b      	ldr	r3, [r5, #0]
 800f51e:	1d1a      	adds	r2, r3, #4
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	602a      	str	r2, [r5, #0]
 800f524:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f528:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f52c:	2301      	movs	r3, #1
 800f52e:	e0a3      	b.n	800f678 <_printf_i+0x1f4>
 800f530:	6820      	ldr	r0, [r4, #0]
 800f532:	6829      	ldr	r1, [r5, #0]
 800f534:	0606      	lsls	r6, r0, #24
 800f536:	f101 0304 	add.w	r3, r1, #4
 800f53a:	d50a      	bpl.n	800f552 <_printf_i+0xce>
 800f53c:	680e      	ldr	r6, [r1, #0]
 800f53e:	602b      	str	r3, [r5, #0]
 800f540:	2e00      	cmp	r6, #0
 800f542:	da03      	bge.n	800f54c <_printf_i+0xc8>
 800f544:	232d      	movs	r3, #45	; 0x2d
 800f546:	4276      	negs	r6, r6
 800f548:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f54c:	485e      	ldr	r0, [pc, #376]	; (800f6c8 <_printf_i+0x244>)
 800f54e:	230a      	movs	r3, #10
 800f550:	e019      	b.n	800f586 <_printf_i+0x102>
 800f552:	680e      	ldr	r6, [r1, #0]
 800f554:	602b      	str	r3, [r5, #0]
 800f556:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f55a:	bf18      	it	ne
 800f55c:	b236      	sxthne	r6, r6
 800f55e:	e7ef      	b.n	800f540 <_printf_i+0xbc>
 800f560:	682b      	ldr	r3, [r5, #0]
 800f562:	6820      	ldr	r0, [r4, #0]
 800f564:	1d19      	adds	r1, r3, #4
 800f566:	6029      	str	r1, [r5, #0]
 800f568:	0601      	lsls	r1, r0, #24
 800f56a:	d501      	bpl.n	800f570 <_printf_i+0xec>
 800f56c:	681e      	ldr	r6, [r3, #0]
 800f56e:	e002      	b.n	800f576 <_printf_i+0xf2>
 800f570:	0646      	lsls	r6, r0, #25
 800f572:	d5fb      	bpl.n	800f56c <_printf_i+0xe8>
 800f574:	881e      	ldrh	r6, [r3, #0]
 800f576:	4854      	ldr	r0, [pc, #336]	; (800f6c8 <_printf_i+0x244>)
 800f578:	2f6f      	cmp	r7, #111	; 0x6f
 800f57a:	bf0c      	ite	eq
 800f57c:	2308      	moveq	r3, #8
 800f57e:	230a      	movne	r3, #10
 800f580:	2100      	movs	r1, #0
 800f582:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f586:	6865      	ldr	r5, [r4, #4]
 800f588:	60a5      	str	r5, [r4, #8]
 800f58a:	2d00      	cmp	r5, #0
 800f58c:	bfa2      	ittt	ge
 800f58e:	6821      	ldrge	r1, [r4, #0]
 800f590:	f021 0104 	bicge.w	r1, r1, #4
 800f594:	6021      	strge	r1, [r4, #0]
 800f596:	b90e      	cbnz	r6, 800f59c <_printf_i+0x118>
 800f598:	2d00      	cmp	r5, #0
 800f59a:	d04d      	beq.n	800f638 <_printf_i+0x1b4>
 800f59c:	4615      	mov	r5, r2
 800f59e:	fbb6 f1f3 	udiv	r1, r6, r3
 800f5a2:	fb03 6711 	mls	r7, r3, r1, r6
 800f5a6:	5dc7      	ldrb	r7, [r0, r7]
 800f5a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f5ac:	4637      	mov	r7, r6
 800f5ae:	42bb      	cmp	r3, r7
 800f5b0:	460e      	mov	r6, r1
 800f5b2:	d9f4      	bls.n	800f59e <_printf_i+0x11a>
 800f5b4:	2b08      	cmp	r3, #8
 800f5b6:	d10b      	bne.n	800f5d0 <_printf_i+0x14c>
 800f5b8:	6823      	ldr	r3, [r4, #0]
 800f5ba:	07de      	lsls	r6, r3, #31
 800f5bc:	d508      	bpl.n	800f5d0 <_printf_i+0x14c>
 800f5be:	6923      	ldr	r3, [r4, #16]
 800f5c0:	6861      	ldr	r1, [r4, #4]
 800f5c2:	4299      	cmp	r1, r3
 800f5c4:	bfde      	ittt	le
 800f5c6:	2330      	movle	r3, #48	; 0x30
 800f5c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f5cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f5d0:	1b52      	subs	r2, r2, r5
 800f5d2:	6122      	str	r2, [r4, #16]
 800f5d4:	f8cd a000 	str.w	sl, [sp]
 800f5d8:	464b      	mov	r3, r9
 800f5da:	aa03      	add	r2, sp, #12
 800f5dc:	4621      	mov	r1, r4
 800f5de:	4640      	mov	r0, r8
 800f5e0:	f7ff fee2 	bl	800f3a8 <_printf_common>
 800f5e4:	3001      	adds	r0, #1
 800f5e6:	d14c      	bne.n	800f682 <_printf_i+0x1fe>
 800f5e8:	f04f 30ff 	mov.w	r0, #4294967295
 800f5ec:	b004      	add	sp, #16
 800f5ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5f2:	4835      	ldr	r0, [pc, #212]	; (800f6c8 <_printf_i+0x244>)
 800f5f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f5f8:	6829      	ldr	r1, [r5, #0]
 800f5fa:	6823      	ldr	r3, [r4, #0]
 800f5fc:	f851 6b04 	ldr.w	r6, [r1], #4
 800f600:	6029      	str	r1, [r5, #0]
 800f602:	061d      	lsls	r5, r3, #24
 800f604:	d514      	bpl.n	800f630 <_printf_i+0x1ac>
 800f606:	07df      	lsls	r7, r3, #31
 800f608:	bf44      	itt	mi
 800f60a:	f043 0320 	orrmi.w	r3, r3, #32
 800f60e:	6023      	strmi	r3, [r4, #0]
 800f610:	b91e      	cbnz	r6, 800f61a <_printf_i+0x196>
 800f612:	6823      	ldr	r3, [r4, #0]
 800f614:	f023 0320 	bic.w	r3, r3, #32
 800f618:	6023      	str	r3, [r4, #0]
 800f61a:	2310      	movs	r3, #16
 800f61c:	e7b0      	b.n	800f580 <_printf_i+0xfc>
 800f61e:	6823      	ldr	r3, [r4, #0]
 800f620:	f043 0320 	orr.w	r3, r3, #32
 800f624:	6023      	str	r3, [r4, #0]
 800f626:	2378      	movs	r3, #120	; 0x78
 800f628:	4828      	ldr	r0, [pc, #160]	; (800f6cc <_printf_i+0x248>)
 800f62a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f62e:	e7e3      	b.n	800f5f8 <_printf_i+0x174>
 800f630:	0659      	lsls	r1, r3, #25
 800f632:	bf48      	it	mi
 800f634:	b2b6      	uxthmi	r6, r6
 800f636:	e7e6      	b.n	800f606 <_printf_i+0x182>
 800f638:	4615      	mov	r5, r2
 800f63a:	e7bb      	b.n	800f5b4 <_printf_i+0x130>
 800f63c:	682b      	ldr	r3, [r5, #0]
 800f63e:	6826      	ldr	r6, [r4, #0]
 800f640:	6961      	ldr	r1, [r4, #20]
 800f642:	1d18      	adds	r0, r3, #4
 800f644:	6028      	str	r0, [r5, #0]
 800f646:	0635      	lsls	r5, r6, #24
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	d501      	bpl.n	800f650 <_printf_i+0x1cc>
 800f64c:	6019      	str	r1, [r3, #0]
 800f64e:	e002      	b.n	800f656 <_printf_i+0x1d2>
 800f650:	0670      	lsls	r0, r6, #25
 800f652:	d5fb      	bpl.n	800f64c <_printf_i+0x1c8>
 800f654:	8019      	strh	r1, [r3, #0]
 800f656:	2300      	movs	r3, #0
 800f658:	6123      	str	r3, [r4, #16]
 800f65a:	4615      	mov	r5, r2
 800f65c:	e7ba      	b.n	800f5d4 <_printf_i+0x150>
 800f65e:	682b      	ldr	r3, [r5, #0]
 800f660:	1d1a      	adds	r2, r3, #4
 800f662:	602a      	str	r2, [r5, #0]
 800f664:	681d      	ldr	r5, [r3, #0]
 800f666:	6862      	ldr	r2, [r4, #4]
 800f668:	2100      	movs	r1, #0
 800f66a:	4628      	mov	r0, r5
 800f66c:	f7f0 fdb8 	bl	80001e0 <memchr>
 800f670:	b108      	cbz	r0, 800f676 <_printf_i+0x1f2>
 800f672:	1b40      	subs	r0, r0, r5
 800f674:	6060      	str	r0, [r4, #4]
 800f676:	6863      	ldr	r3, [r4, #4]
 800f678:	6123      	str	r3, [r4, #16]
 800f67a:	2300      	movs	r3, #0
 800f67c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f680:	e7a8      	b.n	800f5d4 <_printf_i+0x150>
 800f682:	6923      	ldr	r3, [r4, #16]
 800f684:	462a      	mov	r2, r5
 800f686:	4649      	mov	r1, r9
 800f688:	4640      	mov	r0, r8
 800f68a:	47d0      	blx	sl
 800f68c:	3001      	adds	r0, #1
 800f68e:	d0ab      	beq.n	800f5e8 <_printf_i+0x164>
 800f690:	6823      	ldr	r3, [r4, #0]
 800f692:	079b      	lsls	r3, r3, #30
 800f694:	d413      	bmi.n	800f6be <_printf_i+0x23a>
 800f696:	68e0      	ldr	r0, [r4, #12]
 800f698:	9b03      	ldr	r3, [sp, #12]
 800f69a:	4298      	cmp	r0, r3
 800f69c:	bfb8      	it	lt
 800f69e:	4618      	movlt	r0, r3
 800f6a0:	e7a4      	b.n	800f5ec <_printf_i+0x168>
 800f6a2:	2301      	movs	r3, #1
 800f6a4:	4632      	mov	r2, r6
 800f6a6:	4649      	mov	r1, r9
 800f6a8:	4640      	mov	r0, r8
 800f6aa:	47d0      	blx	sl
 800f6ac:	3001      	adds	r0, #1
 800f6ae:	d09b      	beq.n	800f5e8 <_printf_i+0x164>
 800f6b0:	3501      	adds	r5, #1
 800f6b2:	68e3      	ldr	r3, [r4, #12]
 800f6b4:	9903      	ldr	r1, [sp, #12]
 800f6b6:	1a5b      	subs	r3, r3, r1
 800f6b8:	42ab      	cmp	r3, r5
 800f6ba:	dcf2      	bgt.n	800f6a2 <_printf_i+0x21e>
 800f6bc:	e7eb      	b.n	800f696 <_printf_i+0x212>
 800f6be:	2500      	movs	r5, #0
 800f6c0:	f104 0619 	add.w	r6, r4, #25
 800f6c4:	e7f5      	b.n	800f6b2 <_printf_i+0x22e>
 800f6c6:	bf00      	nop
 800f6c8:	080117e9 	.word	0x080117e9
 800f6cc:	080117fa 	.word	0x080117fa

0800f6d0 <_sbrk_r>:
 800f6d0:	b538      	push	{r3, r4, r5, lr}
 800f6d2:	4d06      	ldr	r5, [pc, #24]	; (800f6ec <_sbrk_r+0x1c>)
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	4604      	mov	r4, r0
 800f6d8:	4608      	mov	r0, r1
 800f6da:	602b      	str	r3, [r5, #0]
 800f6dc:	f7f2 fe86 	bl	80023ec <_sbrk>
 800f6e0:	1c43      	adds	r3, r0, #1
 800f6e2:	d102      	bne.n	800f6ea <_sbrk_r+0x1a>
 800f6e4:	682b      	ldr	r3, [r5, #0]
 800f6e6:	b103      	cbz	r3, 800f6ea <_sbrk_r+0x1a>
 800f6e8:	6023      	str	r3, [r4, #0]
 800f6ea:	bd38      	pop	{r3, r4, r5, pc}
 800f6ec:	200012e0 	.word	0x200012e0

0800f6f0 <__sread>:
 800f6f0:	b510      	push	{r4, lr}
 800f6f2:	460c      	mov	r4, r1
 800f6f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6f8:	f000 f8f8 	bl	800f8ec <_read_r>
 800f6fc:	2800      	cmp	r0, #0
 800f6fe:	bfab      	itete	ge
 800f700:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f702:	89a3      	ldrhlt	r3, [r4, #12]
 800f704:	181b      	addge	r3, r3, r0
 800f706:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f70a:	bfac      	ite	ge
 800f70c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f70e:	81a3      	strhlt	r3, [r4, #12]
 800f710:	bd10      	pop	{r4, pc}

0800f712 <__swrite>:
 800f712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f716:	461f      	mov	r7, r3
 800f718:	898b      	ldrh	r3, [r1, #12]
 800f71a:	05db      	lsls	r3, r3, #23
 800f71c:	4605      	mov	r5, r0
 800f71e:	460c      	mov	r4, r1
 800f720:	4616      	mov	r6, r2
 800f722:	d505      	bpl.n	800f730 <__swrite+0x1e>
 800f724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f728:	2302      	movs	r3, #2
 800f72a:	2200      	movs	r2, #0
 800f72c:	f000 f868 	bl	800f800 <_lseek_r>
 800f730:	89a3      	ldrh	r3, [r4, #12]
 800f732:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f736:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f73a:	81a3      	strh	r3, [r4, #12]
 800f73c:	4632      	mov	r2, r6
 800f73e:	463b      	mov	r3, r7
 800f740:	4628      	mov	r0, r5
 800f742:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f746:	f000 b817 	b.w	800f778 <_write_r>

0800f74a <__sseek>:
 800f74a:	b510      	push	{r4, lr}
 800f74c:	460c      	mov	r4, r1
 800f74e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f752:	f000 f855 	bl	800f800 <_lseek_r>
 800f756:	1c43      	adds	r3, r0, #1
 800f758:	89a3      	ldrh	r3, [r4, #12]
 800f75a:	bf15      	itete	ne
 800f75c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f75e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f762:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f766:	81a3      	strheq	r3, [r4, #12]
 800f768:	bf18      	it	ne
 800f76a:	81a3      	strhne	r3, [r4, #12]
 800f76c:	bd10      	pop	{r4, pc}

0800f76e <__sclose>:
 800f76e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f772:	f000 b813 	b.w	800f79c <_close_r>
	...

0800f778 <_write_r>:
 800f778:	b538      	push	{r3, r4, r5, lr}
 800f77a:	4d07      	ldr	r5, [pc, #28]	; (800f798 <_write_r+0x20>)
 800f77c:	4604      	mov	r4, r0
 800f77e:	4608      	mov	r0, r1
 800f780:	4611      	mov	r1, r2
 800f782:	2200      	movs	r2, #0
 800f784:	602a      	str	r2, [r5, #0]
 800f786:	461a      	mov	r2, r3
 800f788:	f7f2 fddf 	bl	800234a <_write>
 800f78c:	1c43      	adds	r3, r0, #1
 800f78e:	d102      	bne.n	800f796 <_write_r+0x1e>
 800f790:	682b      	ldr	r3, [r5, #0]
 800f792:	b103      	cbz	r3, 800f796 <_write_r+0x1e>
 800f794:	6023      	str	r3, [r4, #0]
 800f796:	bd38      	pop	{r3, r4, r5, pc}
 800f798:	200012e0 	.word	0x200012e0

0800f79c <_close_r>:
 800f79c:	b538      	push	{r3, r4, r5, lr}
 800f79e:	4d06      	ldr	r5, [pc, #24]	; (800f7b8 <_close_r+0x1c>)
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	4604      	mov	r4, r0
 800f7a4:	4608      	mov	r0, r1
 800f7a6:	602b      	str	r3, [r5, #0]
 800f7a8:	f7f2 fdeb 	bl	8002382 <_close>
 800f7ac:	1c43      	adds	r3, r0, #1
 800f7ae:	d102      	bne.n	800f7b6 <_close_r+0x1a>
 800f7b0:	682b      	ldr	r3, [r5, #0]
 800f7b2:	b103      	cbz	r3, 800f7b6 <_close_r+0x1a>
 800f7b4:	6023      	str	r3, [r4, #0]
 800f7b6:	bd38      	pop	{r3, r4, r5, pc}
 800f7b8:	200012e0 	.word	0x200012e0

0800f7bc <_fstat_r>:
 800f7bc:	b538      	push	{r3, r4, r5, lr}
 800f7be:	4d07      	ldr	r5, [pc, #28]	; (800f7dc <_fstat_r+0x20>)
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	4604      	mov	r4, r0
 800f7c4:	4608      	mov	r0, r1
 800f7c6:	4611      	mov	r1, r2
 800f7c8:	602b      	str	r3, [r5, #0]
 800f7ca:	f7f2 fde6 	bl	800239a <_fstat>
 800f7ce:	1c43      	adds	r3, r0, #1
 800f7d0:	d102      	bne.n	800f7d8 <_fstat_r+0x1c>
 800f7d2:	682b      	ldr	r3, [r5, #0]
 800f7d4:	b103      	cbz	r3, 800f7d8 <_fstat_r+0x1c>
 800f7d6:	6023      	str	r3, [r4, #0]
 800f7d8:	bd38      	pop	{r3, r4, r5, pc}
 800f7da:	bf00      	nop
 800f7dc:	200012e0 	.word	0x200012e0

0800f7e0 <_isatty_r>:
 800f7e0:	b538      	push	{r3, r4, r5, lr}
 800f7e2:	4d06      	ldr	r5, [pc, #24]	; (800f7fc <_isatty_r+0x1c>)
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	4604      	mov	r4, r0
 800f7e8:	4608      	mov	r0, r1
 800f7ea:	602b      	str	r3, [r5, #0]
 800f7ec:	f7f2 fde5 	bl	80023ba <_isatty>
 800f7f0:	1c43      	adds	r3, r0, #1
 800f7f2:	d102      	bne.n	800f7fa <_isatty_r+0x1a>
 800f7f4:	682b      	ldr	r3, [r5, #0]
 800f7f6:	b103      	cbz	r3, 800f7fa <_isatty_r+0x1a>
 800f7f8:	6023      	str	r3, [r4, #0]
 800f7fa:	bd38      	pop	{r3, r4, r5, pc}
 800f7fc:	200012e0 	.word	0x200012e0

0800f800 <_lseek_r>:
 800f800:	b538      	push	{r3, r4, r5, lr}
 800f802:	4d07      	ldr	r5, [pc, #28]	; (800f820 <_lseek_r+0x20>)
 800f804:	4604      	mov	r4, r0
 800f806:	4608      	mov	r0, r1
 800f808:	4611      	mov	r1, r2
 800f80a:	2200      	movs	r2, #0
 800f80c:	602a      	str	r2, [r5, #0]
 800f80e:	461a      	mov	r2, r3
 800f810:	f7f2 fdde 	bl	80023d0 <_lseek>
 800f814:	1c43      	adds	r3, r0, #1
 800f816:	d102      	bne.n	800f81e <_lseek_r+0x1e>
 800f818:	682b      	ldr	r3, [r5, #0]
 800f81a:	b103      	cbz	r3, 800f81e <_lseek_r+0x1e>
 800f81c:	6023      	str	r3, [r4, #0]
 800f81e:	bd38      	pop	{r3, r4, r5, pc}
 800f820:	200012e0 	.word	0x200012e0

0800f824 <memcpy>:
 800f824:	440a      	add	r2, r1
 800f826:	4291      	cmp	r1, r2
 800f828:	f100 33ff 	add.w	r3, r0, #4294967295
 800f82c:	d100      	bne.n	800f830 <memcpy+0xc>
 800f82e:	4770      	bx	lr
 800f830:	b510      	push	{r4, lr}
 800f832:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f836:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f83a:	4291      	cmp	r1, r2
 800f83c:	d1f9      	bne.n	800f832 <memcpy+0xe>
 800f83e:	bd10      	pop	{r4, pc}

0800f840 <memmove>:
 800f840:	4288      	cmp	r0, r1
 800f842:	b510      	push	{r4, lr}
 800f844:	eb01 0402 	add.w	r4, r1, r2
 800f848:	d902      	bls.n	800f850 <memmove+0x10>
 800f84a:	4284      	cmp	r4, r0
 800f84c:	4623      	mov	r3, r4
 800f84e:	d807      	bhi.n	800f860 <memmove+0x20>
 800f850:	1e43      	subs	r3, r0, #1
 800f852:	42a1      	cmp	r1, r4
 800f854:	d008      	beq.n	800f868 <memmove+0x28>
 800f856:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f85a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f85e:	e7f8      	b.n	800f852 <memmove+0x12>
 800f860:	4402      	add	r2, r0
 800f862:	4601      	mov	r1, r0
 800f864:	428a      	cmp	r2, r1
 800f866:	d100      	bne.n	800f86a <memmove+0x2a>
 800f868:	bd10      	pop	{r4, pc}
 800f86a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f86e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f872:	e7f7      	b.n	800f864 <memmove+0x24>

0800f874 <__malloc_lock>:
 800f874:	4801      	ldr	r0, [pc, #4]	; (800f87c <__malloc_lock+0x8>)
 800f876:	f7ff b999 	b.w	800ebac <__retarget_lock_acquire_recursive>
 800f87a:	bf00      	nop
 800f87c:	200012d4 	.word	0x200012d4

0800f880 <__malloc_unlock>:
 800f880:	4801      	ldr	r0, [pc, #4]	; (800f888 <__malloc_unlock+0x8>)
 800f882:	f7ff b994 	b.w	800ebae <__retarget_lock_release_recursive>
 800f886:	bf00      	nop
 800f888:	200012d4 	.word	0x200012d4

0800f88c <_realloc_r>:
 800f88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f890:	4680      	mov	r8, r0
 800f892:	4614      	mov	r4, r2
 800f894:	460e      	mov	r6, r1
 800f896:	b921      	cbnz	r1, 800f8a2 <_realloc_r+0x16>
 800f898:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f89c:	4611      	mov	r1, r2
 800f89e:	f7ff ba59 	b.w	800ed54 <_malloc_r>
 800f8a2:	b92a      	cbnz	r2, 800f8b0 <_realloc_r+0x24>
 800f8a4:	f7ff f9ea 	bl	800ec7c <_free_r>
 800f8a8:	4625      	mov	r5, r4
 800f8aa:	4628      	mov	r0, r5
 800f8ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8b0:	f000 f82e 	bl	800f910 <_malloc_usable_size_r>
 800f8b4:	4284      	cmp	r4, r0
 800f8b6:	4607      	mov	r7, r0
 800f8b8:	d802      	bhi.n	800f8c0 <_realloc_r+0x34>
 800f8ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f8be:	d812      	bhi.n	800f8e6 <_realloc_r+0x5a>
 800f8c0:	4621      	mov	r1, r4
 800f8c2:	4640      	mov	r0, r8
 800f8c4:	f7ff fa46 	bl	800ed54 <_malloc_r>
 800f8c8:	4605      	mov	r5, r0
 800f8ca:	2800      	cmp	r0, #0
 800f8cc:	d0ed      	beq.n	800f8aa <_realloc_r+0x1e>
 800f8ce:	42bc      	cmp	r4, r7
 800f8d0:	4622      	mov	r2, r4
 800f8d2:	4631      	mov	r1, r6
 800f8d4:	bf28      	it	cs
 800f8d6:	463a      	movcs	r2, r7
 800f8d8:	f7ff ffa4 	bl	800f824 <memcpy>
 800f8dc:	4631      	mov	r1, r6
 800f8de:	4640      	mov	r0, r8
 800f8e0:	f7ff f9cc 	bl	800ec7c <_free_r>
 800f8e4:	e7e1      	b.n	800f8aa <_realloc_r+0x1e>
 800f8e6:	4635      	mov	r5, r6
 800f8e8:	e7df      	b.n	800f8aa <_realloc_r+0x1e>
	...

0800f8ec <_read_r>:
 800f8ec:	b538      	push	{r3, r4, r5, lr}
 800f8ee:	4d07      	ldr	r5, [pc, #28]	; (800f90c <_read_r+0x20>)
 800f8f0:	4604      	mov	r4, r0
 800f8f2:	4608      	mov	r0, r1
 800f8f4:	4611      	mov	r1, r2
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	602a      	str	r2, [r5, #0]
 800f8fa:	461a      	mov	r2, r3
 800f8fc:	f7f2 fd08 	bl	8002310 <_read>
 800f900:	1c43      	adds	r3, r0, #1
 800f902:	d102      	bne.n	800f90a <_read_r+0x1e>
 800f904:	682b      	ldr	r3, [r5, #0]
 800f906:	b103      	cbz	r3, 800f90a <_read_r+0x1e>
 800f908:	6023      	str	r3, [r4, #0]
 800f90a:	bd38      	pop	{r3, r4, r5, pc}
 800f90c:	200012e0 	.word	0x200012e0

0800f910 <_malloc_usable_size_r>:
 800f910:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f914:	1f18      	subs	r0, r3, #4
 800f916:	2b00      	cmp	r3, #0
 800f918:	bfbc      	itt	lt
 800f91a:	580b      	ldrlt	r3, [r1, r0]
 800f91c:	18c0      	addlt	r0, r0, r3
 800f91e:	4770      	bx	lr

0800f920 <_init>:
 800f920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f922:	bf00      	nop
 800f924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f926:	bc08      	pop	{r3}
 800f928:	469e      	mov	lr, r3
 800f92a:	4770      	bx	lr

0800f92c <_fini>:
 800f92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f92e:	bf00      	nop
 800f930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f932:	bc08      	pop	{r3}
 800f934:	469e      	mov	lr, r3
 800f936:	4770      	bx	lr
