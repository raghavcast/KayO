
SD_Testing_Boogaloo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ed8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000324  08007078  08007078  00017078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800739c  0800739c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800739c  0800739c  0001739c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073a4  080073a4  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073a4  080073a4  000173a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073a8  080073a8  000173a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080073ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000088  08007434  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08007434  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1d4  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022e8  00000000  00000000  0002e28c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  00030578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b58  00000000  00000000  000311c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182ce  00000000  00000000  00031d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001097c  00000000  00000000  00049fee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a88d  00000000  00000000  0005a96a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e51f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039a8  00000000  00000000  000e5248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007060 	.word	0x08007060

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08007060 	.word	0x08007060

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800058c:	1d39      	adds	r1, r7, #4
 800058e:	f04f 33ff 	mov.w	r3, #4294967295
 8000592:	2201      	movs	r2, #1
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <__io_putchar+0x20>)
 8000596:	f002 f87e 	bl	8002696 <HAL_UART_Transmit>
  return ch;
 800059a:	687b      	ldr	r3, [r7, #4]
}
 800059c:	4618      	mov	r0, r3
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200000fc 	.word	0x200000fc

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b5b0      	push	{r4, r5, r7, lr}
 80005aa:	f5ad 6d94 	sub.w	sp, sp, #1184	; 0x4a0
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 fc40 	bl	8000e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f90a 	bl	80007cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 f9d0 	bl	800095c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005bc:	f000 f9a4 	bl	8000908 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80005c0:	f000 f96c 	bl	800089c <MX_SPI2_Init>
  MX_FATFS_Init();
 80005c4:	f002 fbdc 	bl	8002d80 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  printf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 80005c8:	4871      	ldr	r0, [pc, #452]	; (8000790 <main+0x1e8>)
 80005ca:	f005 fdcb 	bl	8006164 <puts>

    HAL_Delay(1000); //a short delay is important to let the SD card settle
 80005ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d2:	f000 fca1 	bl	8000f18 <HAL_Delay>
    FATFS FatFs; 	//Fatfs handle
    FIL fil; 		//File handle
    FRESULT fres; //Result after operations

    //Open the file system
    fres = f_mount(&FatFs, "", 1); //1=mount now
 80005d6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80005da:	2201      	movs	r2, #1
 80005dc:	496d      	ldr	r1, [pc, #436]	; (8000794 <main+0x1ec>)
 80005de:	4618      	mov	r0, r3
 80005e0:	f004 fe5a 	bl	8005298 <f_mount>
 80005e4:	4603      	mov	r3, r0
 80005e6:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
    if (fres != FR_OK) {
 80005ea:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d006      	beq.n	8000600 <main+0x58>
  	printf("f_mount error (%i)\r\n", fres);
 80005f2:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80005f6:	4619      	mov	r1, r3
 80005f8:	4867      	ldr	r0, [pc, #412]	; (8000798 <main+0x1f0>)
 80005fa:	f005 fd2d 	bl	8006058 <iprintf>
  	while(1);
 80005fe:	e7fe      	b.n	80005fe <main+0x56>
    //Let's get some statistics from the SD card
    DWORD free_clusters, free_sectors, total_sectors;

    FATFS* getFreeFs;

    fres = f_getfree("", &free_clusters, &getFreeFs);
 8000600:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000604:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000608:	4619      	mov	r1, r3
 800060a:	4862      	ldr	r0, [pc, #392]	; (8000794 <main+0x1ec>)
 800060c:	f005 fba4 	bl	8005d58 <f_getfree>
 8000610:	4603      	mov	r3, r0
 8000612:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
    if (fres != FR_OK) {
 8000616:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800061a:	2b00      	cmp	r3, #0
 800061c:	d006      	beq.n	800062c <main+0x84>
  	printf("f_getfree error (%i)\r\n", fres);
 800061e:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000622:	4619      	mov	r1, r3
 8000624:	485d      	ldr	r0, [pc, #372]	; (800079c <main+0x1f4>)
 8000626:	f005 fd17 	bl	8006058 <iprintf>
  	while(1);
 800062a:	e7fe      	b.n	800062a <main+0x82>
    }

    //Formula comes from ChaN's documentation
    total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 800062c:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8000630:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	3b02      	subs	r3, #2
 800063a:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 800063e:	f5a2 628f 	sub.w	r2, r2, #1144	; 0x478
 8000642:	6812      	ldr	r2, [r2, #0]
 8000644:	8952      	ldrh	r2, [r2, #10]
 8000646:	fb02 f303 	mul.w	r3, r2, r3
 800064a:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
    free_sectors = free_clusters * getFreeFs->csize;
 800064e:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8000652:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	895b      	ldrh	r3, [r3, #10]
 800065a:	461a      	mov	r2, r3
 800065c:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8000660:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	fb02 f303 	mul.w	r3, r2, r3
 800066a:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494

    printf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 800066e:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8000672:	0859      	lsrs	r1, r3, #1
 8000674:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8000678:	085b      	lsrs	r3, r3, #1
 800067a:	461a      	mov	r2, r3
 800067c:	4848      	ldr	r0, [pc, #288]	; (80007a0 <main+0x1f8>)
 800067e:	f005 fceb 	bl	8006058 <iprintf>

    //Now let's try to open file "test.txt"
    fres = f_open(&fil, "test.txt", FA_READ);
 8000682:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000686:	2201      	movs	r2, #1
 8000688:	4946      	ldr	r1, [pc, #280]	; (80007a4 <main+0x1fc>)
 800068a:	4618      	mov	r0, r3
 800068c:	f004 fe4a 	bl	8005324 <f_open>
 8000690:	4603      	mov	r3, r0
 8000692:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
    if (fres != FR_OK) {
 8000696:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800069a:	2b00      	cmp	r3, #0
 800069c:	d006      	beq.n	80006ac <main+0x104>
  	printf("f_open error (%i)\r\n", fres);
 800069e:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80006a2:	4619      	mov	r1, r3
 80006a4:	4840      	ldr	r0, [pc, #256]	; (80007a8 <main+0x200>)
 80006a6:	f005 fcd7 	bl	8006058 <iprintf>
  	while(1);
 80006aa:	e7fe      	b.n	80006aa <main+0x102>
    }
    printf("I was able to open 'test.txt' for reading!\r\n");
 80006ac:	483f      	ldr	r0, [pc, #252]	; (80007ac <main+0x204>)
 80006ae:	f005 fd59 	bl	8006164 <puts>
    //Read 30 bytes from "test.txt" on the SD card
    BYTE readBuf[30];

    //We can either use f_read OR f_gets to get data out of files
    //f_gets is a wrapper on f_read that does some string formatting for us
    TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 80006b2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80006b6:	f107 0308 	add.w	r3, r7, #8
 80006ba:	211e      	movs	r1, #30
 80006bc:	4618      	mov	r0, r3
 80006be:	f005 fc00 	bl	8005ec2 <f_gets>
 80006c2:	f8c7 0490 	str.w	r0, [r7, #1168]	; 0x490
    if(rres != 0) {
 80006c6:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d006      	beq.n	80006dc <main+0x134>
  	printf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 80006ce:	f107 0308 	add.w	r3, r7, #8
 80006d2:	4619      	mov	r1, r3
 80006d4:	4836      	ldr	r0, [pc, #216]	; (80007b0 <main+0x208>)
 80006d6:	f005 fcbf 	bl	8006058 <iprintf>
 80006da:	e005      	b.n	80006e8 <main+0x140>
    } else {
  	printf("f_gets error (%i)\r\n", fres);
 80006dc:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80006e0:	4619      	mov	r1, r3
 80006e2:	4834      	ldr	r0, [pc, #208]	; (80007b4 <main+0x20c>)
 80006e4:	f005 fcb8 	bl	8006058 <iprintf>
    }

    //Be a tidy kiwi - don't forget to close your file!
    f_close(&fil);
 80006e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006ec:	4618      	mov	r0, r3
 80006ee:	f005 fb09 	bl	8005d04 <f_close>

    //Now let's try and write a file "write.txt"
    fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 80006f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006f6:	221a      	movs	r2, #26
 80006f8:	492f      	ldr	r1, [pc, #188]	; (80007b8 <main+0x210>)
 80006fa:	4618      	mov	r0, r3
 80006fc:	f004 fe12 	bl	8005324 <f_open>
 8000700:	4603      	mov	r3, r0
 8000702:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
    if(fres == FR_OK) {
 8000706:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800070a:	2b00      	cmp	r3, #0
 800070c:	d103      	bne.n	8000716 <main+0x16e>
  	printf("I was able to open 'write.txt' for writing\r\n");
 800070e:	482b      	ldr	r0, [pc, #172]	; (80007bc <main+0x214>)
 8000710:	f005 fd28 	bl	8006164 <puts>
 8000714:	e005      	b.n	8000722 <main+0x17a>
    } else {
  	printf("f_open error (%i)\r\n", fres);
 8000716:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800071a:	4619      	mov	r1, r3
 800071c:	4822      	ldr	r0, [pc, #136]	; (80007a8 <main+0x200>)
 800071e:	f005 fc9b 	bl	8006058 <iprintf>
    }

    //Copy in a string
    strncpy((char*)readBuf, "a new file is made!", 19);
 8000722:	f107 0308 	add.w	r3, r7, #8
 8000726:	4a26      	ldr	r2, [pc, #152]	; (80007c0 <main+0x218>)
 8000728:	461c      	mov	r4, r3
 800072a:	4615      	mov	r5, r2
 800072c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800072e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000730:	682b      	ldr	r3, [r5, #0]
 8000732:	461a      	mov	r2, r3
 8000734:	8022      	strh	r2, [r4, #0]
 8000736:	3402      	adds	r4, #2
 8000738:	0c1b      	lsrs	r3, r3, #16
 800073a:	7023      	strb	r3, [r4, #0]
    UINT bytesWrote;
    fres = f_write(&fil, readBuf, 19, &bytesWrote);
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	f107 0108 	add.w	r1, r7, #8
 8000742:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000746:	2213      	movs	r2, #19
 8000748:	f005 f8e9 	bl	800591e <f_write>
 800074c:	4603      	mov	r3, r0
 800074e:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
    if(fres == FR_OK) {
 8000752:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000756:	2b00      	cmp	r3, #0
 8000758:	d109      	bne.n	800076e <main+0x1c6>
  	printf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 800075a:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800075e:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4619      	mov	r1, r3
 8000766:	4817      	ldr	r0, [pc, #92]	; (80007c4 <main+0x21c>)
 8000768:	f005 fc76 	bl	8006058 <iprintf>
 800076c:	e005      	b.n	800077a <main+0x1d2>
    } else {
  	printf("f_write error (%i)\r\n", fres);
 800076e:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000772:	4619      	mov	r1, r3
 8000774:	4814      	ldr	r0, [pc, #80]	; (80007c8 <main+0x220>)
 8000776:	f005 fc6f 	bl	8006058 <iprintf>
    }

    //Be a tidy kiwi - don't forget to close your file!
    f_close(&fil);
 800077a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800077e:	4618      	mov	r0, r3
 8000780:	f005 fac0 	bl	8005d04 <f_close>

    //We're done, so de-mount the drive
    f_mount(NULL, "", 0);
 8000784:	2200      	movs	r2, #0
 8000786:	4903      	ldr	r1, [pc, #12]	; (8000794 <main+0x1ec>)
 8000788:	2000      	movs	r0, #0
 800078a:	f004 fd85 	bl	8005298 <f_mount>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800078e:	e7fe      	b.n	800078e <main+0x1e6>
 8000790:	08007078 	.word	0x08007078
 8000794:	08007098 	.word	0x08007098
 8000798:	0800709c 	.word	0x0800709c
 800079c:	080070b4 	.word	0x080070b4
 80007a0:	080070cc 	.word	0x080070cc
 80007a4:	08007114 	.word	0x08007114
 80007a8:	08007120 	.word	0x08007120
 80007ac:	08007134 	.word	0x08007134
 80007b0:	08007160 	.word	0x08007160
 80007b4:	0800718c 	.word	0x0800718c
 80007b8:	080071a0 	.word	0x080071a0
 80007bc:	080071ac 	.word	0x080071ac
 80007c0:	080071d8 	.word	0x080071d8
 80007c4:	080071ec 	.word	0x080071ec
 80007c8:	08007210 	.word	0x08007210

080007cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b094      	sub	sp, #80	; 0x50
 80007d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d2:	f107 0320 	add.w	r3, r7, #32
 80007d6:	2230      	movs	r2, #48	; 0x30
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f005 fc34 	bl	8006048 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f0:	2300      	movs	r3, #0
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	4b27      	ldr	r3, [pc, #156]	; (8000894 <SystemClock_Config+0xc8>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f8:	4a26      	ldr	r2, [pc, #152]	; (8000894 <SystemClock_Config+0xc8>)
 80007fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000800:	4b24      	ldr	r3, [pc, #144]	; (8000894 <SystemClock_Config+0xc8>)
 8000802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800080c:	2300      	movs	r3, #0
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	4b21      	ldr	r3, [pc, #132]	; (8000898 <SystemClock_Config+0xcc>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a20      	ldr	r2, [pc, #128]	; (8000898 <SystemClock_Config+0xcc>)
 8000816:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800081a:	6013      	str	r3, [r2, #0]
 800081c:	4b1e      	ldr	r3, [pc, #120]	; (8000898 <SystemClock_Config+0xcc>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000828:	2301      	movs	r3, #1
 800082a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800082c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000832:	2302      	movs	r3, #2
 8000834:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000836:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800083a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800083c:	2304      	movs	r3, #4
 800083e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000840:	2360      	movs	r3, #96	; 0x60
 8000842:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000844:	2302      	movs	r3, #2
 8000846:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000848:	2304      	movs	r3, #4
 800084a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084c:	f107 0320 	add.w	r3, r7, #32
 8000850:	4618      	mov	r0, r3
 8000852:	f000 fe09 	bl	8001468 <HAL_RCC_OscConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800085c:	f000 f910 	bl	8000a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000860:	230f      	movs	r3, #15
 8000862:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000864:	2302      	movs	r3, #2
 8000866:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800086c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000870:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	2103      	movs	r1, #3
 800087c:	4618      	mov	r0, r3
 800087e:	f001 f86b 	bl	8001958 <HAL_RCC_ClockConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000888:	f000 f8fa 	bl	8000a80 <Error_Handler>
  }
}
 800088c:	bf00      	nop
 800088e:	3750      	adds	r7, #80	; 0x50
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40023800 	.word	0x40023800
 8000898:	40007000 	.word	0x40007000

0800089c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <MX_SPI2_Init+0x64>)
 80008a2:	4a18      	ldr	r2, [pc, #96]	; (8000904 <MX_SPI2_Init+0x68>)
 80008a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008a6:	4b16      	ldr	r3, [pc, #88]	; (8000900 <MX_SPI2_Init+0x64>)
 80008a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008ae:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_SPI2_Init+0x64>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <MX_SPI2_Init+0x64>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_SPI2_Init+0x64>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_SPI2_Init+0x64>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_SPI2_Init+0x64>)
 80008c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008cc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80008ce:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_SPI2_Init+0x64>)
 80008d0:	2230      	movs	r2, #48	; 0x30
 80008d2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008d4:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <MX_SPI2_Init+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_SPI2_Init+0x64>)
 80008dc:	2200      	movs	r2, #0
 80008de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e0:	4b07      	ldr	r3, [pc, #28]	; (8000900 <MX_SPI2_Init+0x64>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_SPI2_Init+0x64>)
 80008e8:	220a      	movs	r2, #10
 80008ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008ec:	4804      	ldr	r0, [pc, #16]	; (8000900 <MX_SPI2_Init+0x64>)
 80008ee:	f001 fa53 	bl	8001d98 <HAL_SPI_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80008f8:	f000 f8c2 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	200000a4 	.word	0x200000a4
 8000904:	40003800 	.word	0x40003800

08000908 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800090c:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_USART2_UART_Init+0x4c>)
 800090e:	4a12      	ldr	r2, [pc, #72]	; (8000958 <MX_USART2_UART_Init+0x50>)
 8000910:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <MX_USART2_UART_Init+0x4c>)
 8000914:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000918:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_USART2_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_USART2_UART_Init+0x4c>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <MX_USART2_UART_Init+0x4c>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_USART2_UART_Init+0x4c>)
 800092e:	220c      	movs	r2, #12
 8000930:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <MX_USART2_UART_Init+0x4c>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_USART2_UART_Init+0x4c>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800093e:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_USART2_UART_Init+0x4c>)
 8000940:	f001 fe5c 	bl	80025fc <HAL_UART_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800094a:	f000 f899 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200000fc 	.word	0x200000fc
 8000958:	40004400 	.word	0x40004400

0800095c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	; 0x28
 8000960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
 8000976:	4b3e      	ldr	r3, [pc, #248]	; (8000a70 <MX_GPIO_Init+0x114>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a3d      	ldr	r2, [pc, #244]	; (8000a70 <MX_GPIO_Init+0x114>)
 800097c:	f043 0304 	orr.w	r3, r3, #4
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b3b      	ldr	r3, [pc, #236]	; (8000a70 <MX_GPIO_Init+0x114>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0304 	and.w	r3, r3, #4
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	4b37      	ldr	r3, [pc, #220]	; (8000a70 <MX_GPIO_Init+0x114>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a36      	ldr	r2, [pc, #216]	; (8000a70 <MX_GPIO_Init+0x114>)
 8000998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b34      	ldr	r3, [pc, #208]	; (8000a70 <MX_GPIO_Init+0x114>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	4b30      	ldr	r3, [pc, #192]	; (8000a70 <MX_GPIO_Init+0x114>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a2f      	ldr	r2, [pc, #188]	; (8000a70 <MX_GPIO_Init+0x114>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b2d      	ldr	r3, [pc, #180]	; (8000a70 <MX_GPIO_Init+0x114>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	4b29      	ldr	r3, [pc, #164]	; (8000a70 <MX_GPIO_Init+0x114>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a28      	ldr	r2, [pc, #160]	; (8000a70 <MX_GPIO_Init+0x114>)
 80009d0:	f043 0302 	orr.w	r3, r3, #2
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b26      	ldr	r3, [pc, #152]	; (8000a70 <MX_GPIO_Init+0x114>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0302 	and.w	r3, r3, #2
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2120      	movs	r1, #32
 80009e6:	4823      	ldr	r0, [pc, #140]	; (8000a74 <MX_GPIO_Init+0x118>)
 80009e8:	f000 fd24 	bl	8001434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f2:	4821      	ldr	r0, [pc, #132]	; (8000a78 <MX_GPIO_Init+0x11c>)
 80009f4:	f000 fd1e 	bl	8001434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009fe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	481b      	ldr	r0, [pc, #108]	; (8000a7c <MX_GPIO_Init+0x120>)
 8000a10:	f000 fb8c 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a14:	2320      	movs	r3, #32
 8000a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4812      	ldr	r0, [pc, #72]	; (8000a74 <MX_GPIO_Init+0x118>)
 8000a2c:	f000 fb7e 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8000a30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	480c      	ldr	r0, [pc, #48]	; (8000a78 <MX_GPIO_Init+0x11c>)
 8000a46:	f000 fb71 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000a4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	4805      	ldr	r0, [pc, #20]	; (8000a78 <MX_GPIO_Init+0x11c>)
 8000a64:	f000 fb62 	bl	800112c <HAL_GPIO_Init>

}
 8000a68:	bf00      	nop
 8000a6a:	3728      	adds	r7, #40	; 0x28
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40020000 	.word	0x40020000
 8000a78:	40020400 	.word	0x40020400
 8000a7c:	40020800 	.word	0x40020800

08000a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a84:	b672      	cpsid	i
}
 8000a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <Error_Handler+0x8>
	...

08000a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	4a0f      	ldr	r2, [pc, #60]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	603b      	str	r3, [r7, #0]
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	4a08      	ldr	r2, [pc, #32]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000abc:	6413      	str	r3, [r2, #64]	; 0x40
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aca:	2007      	movs	r0, #7
 8000acc:	f000 fafa 	bl	80010c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40023800 	.word	0x40023800

08000adc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	; 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a22      	ldr	r2, [pc, #136]	; (8000b84 <HAL_SPI_MspInit+0xa8>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d13d      	bne.n	8000b7a <HAL_SPI_MspInit+0x9e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	4b21      	ldr	r3, [pc, #132]	; (8000b88 <HAL_SPI_MspInit+0xac>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	4a20      	ldr	r2, [pc, #128]	; (8000b88 <HAL_SPI_MspInit+0xac>)
 8000b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0e:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <HAL_SPI_MspInit+0xac>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <HAL_SPI_MspInit+0xac>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <HAL_SPI_MspInit+0xac>)
 8000b24:	f043 0302 	orr.w	r3, r3, #2
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <HAL_SPI_MspInit+0xac>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0302 	and.w	r3, r3, #2
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b44:	2303      	movs	r3, #3
 8000b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b48:	2305      	movs	r3, #5
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	480e      	ldr	r0, [pc, #56]	; (8000b8c <HAL_SPI_MspInit+0xb0>)
 8000b54:	f000 faea 	bl	800112c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000b58:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b66:	2303      	movs	r3, #3
 8000b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b6a:	2305      	movs	r3, #5
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	4805      	ldr	r0, [pc, #20]	; (8000b8c <HAL_SPI_MspInit+0xb0>)
 8000b76:	f000 fad9 	bl	800112c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000b7a:	bf00      	nop
 8000b7c:	3728      	adds	r7, #40	; 0x28
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40003800 	.word	0x40003800
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020400 	.word	0x40020400

08000b90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	; 0x28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a19      	ldr	r2, [pc, #100]	; (8000c14 <HAL_UART_MspInit+0x84>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d12b      	bne.n	8000c0a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <HAL_UART_MspInit+0x88>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	4a17      	ldr	r2, [pc, #92]	; (8000c18 <HAL_UART_MspInit+0x88>)
 8000bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <HAL_UART_MspInit+0x88>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <HAL_UART_MspInit+0x88>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a10      	ldr	r2, [pc, #64]	; (8000c18 <HAL_UART_MspInit+0x88>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <HAL_UART_MspInit+0x88>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bea:	230c      	movs	r3, #12
 8000bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bfa:	2307      	movs	r3, #7
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	4805      	ldr	r0, [pc, #20]	; (8000c1c <HAL_UART_MspInit+0x8c>)
 8000c06:	f000 fa91 	bl	800112c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c0a:	bf00      	nop
 8000c0c:	3728      	adds	r7, #40	; 0x28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40004400 	.word	0x40004400
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020000 	.word	0x40020000

08000c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <NMI_Handler+0x4>

08000c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <HardFault_Handler+0x4>

08000c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <MemManage_Handler+0x4>

08000c32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <BusFault_Handler+0x4>

08000c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <UsageFault_Handler+0x4>

08000c3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c6c:	f000 f934 	bl	8000ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	e00a      	b.n	8000c9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c86:	f3af 8000 	nop.w
 8000c8a:	4601      	mov	r1, r0
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	1c5a      	adds	r2, r3, #1
 8000c90:	60ba      	str	r2, [r7, #8]
 8000c92:	b2ca      	uxtb	r2, r1
 8000c94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	697a      	ldr	r2, [r7, #20]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	dbf0      	blt.n	8000c86 <_read+0x12>
  }

  return len;
 8000ca4:	687b      	ldr	r3, [r7, #4]
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3718      	adds	r7, #24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b086      	sub	sp, #24
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	60f8      	str	r0, [r7, #12]
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	e009      	b.n	8000cd4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	1c5a      	adds	r2, r3, #1
 8000cc4:	60ba      	str	r2, [r7, #8]
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fc5b 	bl	8000584 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	697a      	ldr	r2, [r7, #20]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	dbf1      	blt.n	8000cc0 <_write+0x12>
  }
  return len;
 8000cdc:	687b      	ldr	r3, [r7, #4]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <_close>:

int _close(int file)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b083      	sub	sp, #12
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
 8000d06:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d0e:	605a      	str	r2, [r3, #4]
  return 0;
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <_isatty>:

int _isatty(int file)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b083      	sub	sp, #12
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d26:	2301      	movs	r3, #1
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3714      	adds	r7, #20
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
	...

08000d50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d58:	4a14      	ldr	r2, [pc, #80]	; (8000dac <_sbrk+0x5c>)
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <_sbrk+0x60>)
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d64:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <_sbrk+0x64>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d102      	bne.n	8000d72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d6c:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <_sbrk+0x64>)
 8000d6e:	4a12      	ldr	r2, [pc, #72]	; (8000db8 <_sbrk+0x68>)
 8000d70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <_sbrk+0x64>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d207      	bcs.n	8000d90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d80:	f005 f938 	bl	8005ff4 <__errno>
 8000d84:	4603      	mov	r3, r0
 8000d86:	220c      	movs	r2, #12
 8000d88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8e:	e009      	b.n	8000da4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <_sbrk+0x64>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d96:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <_sbrk+0x64>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <_sbrk+0x64>)
 8000da0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000da2:	68fb      	ldr	r3, [r7, #12]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20020000 	.word	0x20020000
 8000db0:	00000400 	.word	0x00000400
 8000db4:	20000140 	.word	0x20000140
 8000db8:	200001a0 	.word	0x200001a0

08000dbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <SystemInit+0x20>)
 8000dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dc6:	4a05      	ldr	r2, [pc, #20]	; (8000ddc <SystemInit+0x20>)
 8000dc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000de0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de4:	480d      	ldr	r0, [pc, #52]	; (8000e1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000de6:	490e      	ldr	r1, [pc, #56]	; (8000e20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000de8:	4a0e      	ldr	r2, [pc, #56]	; (8000e24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dec:	e002      	b.n	8000df4 <LoopCopyDataInit>

08000dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df2:	3304      	adds	r3, #4

08000df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df8:	d3f9      	bcc.n	8000dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfa:	4a0b      	ldr	r2, [pc, #44]	; (8000e28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dfc:	4c0b      	ldr	r4, [pc, #44]	; (8000e2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e00:	e001      	b.n	8000e06 <LoopFillZerobss>

08000e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e04:	3204      	adds	r2, #4

08000e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e08:	d3fb      	bcc.n	8000e02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e0a:	f7ff ffd7 	bl	8000dbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e0e:	f005 f8f7 	bl	8006000 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e12:	f7ff fbc9 	bl	80005a8 <main>
  bx  lr    
 8000e16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e20:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000e24:	080073ac 	.word	0x080073ac
  ldr r2, =_sbss
 8000e28:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000e2c:	200001a0 	.word	0x200001a0

08000e30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e30:	e7fe      	b.n	8000e30 <ADC_IRQHandler>
	...

08000e34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e38:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <HAL_Init+0x40>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	; (8000e74 <HAL_Init+0x40>)
 8000e3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e44:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <HAL_Init+0x40>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <HAL_Init+0x40>)
 8000e4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <HAL_Init+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a07      	ldr	r2, [pc, #28]	; (8000e74 <HAL_Init+0x40>)
 8000e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e5c:	2003      	movs	r0, #3
 8000e5e:	f000 f931 	bl	80010c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e62:	2000      	movs	r0, #0
 8000e64:	f000 f808 	bl	8000e78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e68:	f7ff fe10 	bl	8000a8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40023c00 	.word	0x40023c00

08000e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_InitTick+0x54>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <HAL_InitTick+0x58>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f93b 	bl	8001112 <HAL_SYSTICK_Config>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e00e      	b.n	8000ec4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b0f      	cmp	r3, #15
 8000eaa:	d80a      	bhi.n	8000ec2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eac:	2200      	movs	r2, #0
 8000eae:	6879      	ldr	r1, [r7, #4]
 8000eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb4:	f000 f911 	bl	80010da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb8:	4a06      	ldr	r2, [pc, #24]	; (8000ed4 <HAL_InitTick+0x5c>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	e000      	b.n	8000ec4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000000 	.word	0x20000000
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	20000004 	.word	0x20000004

08000ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_IncTick+0x20>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_IncTick+0x24>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	4a04      	ldr	r2, [pc, #16]	; (8000efc <HAL_IncTick+0x24>)
 8000eea:	6013      	str	r3, [r2, #0]
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000008 	.word	0x20000008
 8000efc:	20000144 	.word	0x20000144

08000f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return uwTick;
 8000f04:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <HAL_GetTick+0x14>)
 8000f06:	681b      	ldr	r3, [r3, #0]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000144 	.word	0x20000144

08000f18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f20:	f7ff ffee 	bl	8000f00 <HAL_GetTick>
 8000f24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f30:	d005      	beq.n	8000f3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <HAL_Delay+0x44>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	461a      	mov	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f3e:	bf00      	nop
 8000f40:	f7ff ffde 	bl	8000f00 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d8f7      	bhi.n	8000f40 <HAL_Delay+0x28>
  {
  }
}
 8000f50:	bf00      	nop
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000008 	.word	0x20000008

08000f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f92:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	60d3      	str	r3, [r2, #12]
}
 8000f98:	bf00      	nop
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fac:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	0a1b      	lsrs	r3, r3, #8
 8000fb2:	f003 0307 	and.w	r3, r3, #7
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	6039      	str	r1, [r7, #0]
 8000fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	db0a      	blt.n	8000fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	490c      	ldr	r1, [pc, #48]	; (8001010 <__NVIC_SetPriority+0x4c>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	0112      	lsls	r2, r2, #4
 8000fe4:	b2d2      	uxtb	r2, r2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fec:	e00a      	b.n	8001004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4908      	ldr	r1, [pc, #32]	; (8001014 <__NVIC_SetPriority+0x50>)
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f003 030f 	and.w	r3, r3, #15
 8000ffa:	3b04      	subs	r3, #4
 8000ffc:	0112      	lsls	r2, r2, #4
 8000ffe:	b2d2      	uxtb	r2, r2
 8001000:	440b      	add	r3, r1
 8001002:	761a      	strb	r2, [r3, #24]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000e100 	.word	0xe000e100
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001018:	b480      	push	{r7}
 800101a:	b089      	sub	sp, #36	; 0x24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f1c3 0307 	rsb	r3, r3, #7
 8001032:	2b04      	cmp	r3, #4
 8001034:	bf28      	it	cs
 8001036:	2304      	movcs	r3, #4
 8001038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3304      	adds	r3, #4
 800103e:	2b06      	cmp	r3, #6
 8001040:	d902      	bls.n	8001048 <NVIC_EncodePriority+0x30>
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3b03      	subs	r3, #3
 8001046:	e000      	b.n	800104a <NVIC_EncodePriority+0x32>
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	f04f 32ff 	mov.w	r2, #4294967295
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43da      	mvns	r2, r3
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	401a      	ands	r2, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001060:	f04f 31ff 	mov.w	r1, #4294967295
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	fa01 f303 	lsl.w	r3, r1, r3
 800106a:	43d9      	mvns	r1, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	4313      	orrs	r3, r2
         );
}
 8001072:	4618      	mov	r0, r3
 8001074:	3724      	adds	r7, #36	; 0x24
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001090:	d301      	bcc.n	8001096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001092:	2301      	movs	r3, #1
 8001094:	e00f      	b.n	80010b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001096:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <SysTick_Config+0x40>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109e:	210f      	movs	r1, #15
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295
 80010a4:	f7ff ff8e 	bl	8000fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <SysTick_Config+0x40>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ae:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <SysTick_Config+0x40>)
 80010b0:	2207      	movs	r2, #7
 80010b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	e000e010 	.word	0xe000e010

080010c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff47 	bl	8000f60 <__NVIC_SetPriorityGrouping>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010da:	b580      	push	{r7, lr}
 80010dc:	b086      	sub	sp, #24
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
 80010e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ec:	f7ff ff5c 	bl	8000fa8 <__NVIC_GetPriorityGrouping>
 80010f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	68b9      	ldr	r1, [r7, #8]
 80010f6:	6978      	ldr	r0, [r7, #20]
 80010f8:	f7ff ff8e 	bl	8001018 <NVIC_EncodePriority>
 80010fc:	4602      	mov	r2, r0
 80010fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001102:	4611      	mov	r1, r2
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff5d 	bl	8000fc4 <__NVIC_SetPriority>
}
 800110a:	bf00      	nop
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ffb0 	bl	8001080 <SysTick_Config>
 8001120:	4603      	mov	r3, r0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800112c:	b480      	push	{r7}
 800112e:	b089      	sub	sp, #36	; 0x24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800113e:	2300      	movs	r3, #0
 8001140:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
 8001146:	e159      	b.n	80013fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001148:	2201      	movs	r2, #1
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	429a      	cmp	r2, r3
 8001162:	f040 8148 	bne.w	80013f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	2b01      	cmp	r3, #1
 8001170:	d005      	beq.n	800117e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800117a:	2b02      	cmp	r3, #2
 800117c:	d130      	bne.n	80011e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	2203      	movs	r2, #3
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	68da      	ldr	r2, [r3, #12]
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011b4:	2201      	movs	r2, #1
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	091b      	lsrs	r3, r3, #4
 80011ca:	f003 0201 	and.w	r2, r3, #1
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0303 	and.w	r3, r3, #3
 80011e8:	2b03      	cmp	r3, #3
 80011ea:	d017      	beq.n	800121c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	2203      	movs	r2, #3
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d123      	bne.n	8001270 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	08da      	lsrs	r2, r3, #3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3208      	adds	r2, #8
 8001230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001234:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	f003 0307 	and.w	r3, r3, #7
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	220f      	movs	r2, #15
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	691a      	ldr	r2, [r3, #16]
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	08da      	lsrs	r2, r3, #3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3208      	adds	r2, #8
 800126a:	69b9      	ldr	r1, [r7, #24]
 800126c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	2203      	movs	r2, #3
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0203 	and.w	r2, r3, #3
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f000 80a2 	beq.w	80013f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	4b57      	ldr	r3, [pc, #348]	; (8001414 <HAL_GPIO_Init+0x2e8>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	4a56      	ldr	r2, [pc, #344]	; (8001414 <HAL_GPIO_Init+0x2e8>)
 80012bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c0:	6453      	str	r3, [r2, #68]	; 0x44
 80012c2:	4b54      	ldr	r3, [pc, #336]	; (8001414 <HAL_GPIO_Init+0x2e8>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ce:	4a52      	ldr	r2, [pc, #328]	; (8001418 <HAL_GPIO_Init+0x2ec>)
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	089b      	lsrs	r3, r3, #2
 80012d4:	3302      	adds	r3, #2
 80012d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	f003 0303 	and.w	r3, r3, #3
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	220f      	movs	r2, #15
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4013      	ands	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a49      	ldr	r2, [pc, #292]	; (800141c <HAL_GPIO_Init+0x2f0>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d019      	beq.n	800132e <HAL_GPIO_Init+0x202>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a48      	ldr	r2, [pc, #288]	; (8001420 <HAL_GPIO_Init+0x2f4>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d013      	beq.n	800132a <HAL_GPIO_Init+0x1fe>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a47      	ldr	r2, [pc, #284]	; (8001424 <HAL_GPIO_Init+0x2f8>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d00d      	beq.n	8001326 <HAL_GPIO_Init+0x1fa>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a46      	ldr	r2, [pc, #280]	; (8001428 <HAL_GPIO_Init+0x2fc>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d007      	beq.n	8001322 <HAL_GPIO_Init+0x1f6>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a45      	ldr	r2, [pc, #276]	; (800142c <HAL_GPIO_Init+0x300>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d101      	bne.n	800131e <HAL_GPIO_Init+0x1f2>
 800131a:	2304      	movs	r3, #4
 800131c:	e008      	b.n	8001330 <HAL_GPIO_Init+0x204>
 800131e:	2307      	movs	r3, #7
 8001320:	e006      	b.n	8001330 <HAL_GPIO_Init+0x204>
 8001322:	2303      	movs	r3, #3
 8001324:	e004      	b.n	8001330 <HAL_GPIO_Init+0x204>
 8001326:	2302      	movs	r3, #2
 8001328:	e002      	b.n	8001330 <HAL_GPIO_Init+0x204>
 800132a:	2301      	movs	r3, #1
 800132c:	e000      	b.n	8001330 <HAL_GPIO_Init+0x204>
 800132e:	2300      	movs	r3, #0
 8001330:	69fa      	ldr	r2, [r7, #28]
 8001332:	f002 0203 	and.w	r2, r2, #3
 8001336:	0092      	lsls	r2, r2, #2
 8001338:	4093      	lsls	r3, r2
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001340:	4935      	ldr	r1, [pc, #212]	; (8001418 <HAL_GPIO_Init+0x2ec>)
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	089b      	lsrs	r3, r3, #2
 8001346:	3302      	adds	r3, #2
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800134e:	4b38      	ldr	r3, [pc, #224]	; (8001430 <HAL_GPIO_Init+0x304>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	43db      	mvns	r3, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4013      	ands	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001372:	4a2f      	ldr	r2, [pc, #188]	; (8001430 <HAL_GPIO_Init+0x304>)
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001378:	4b2d      	ldr	r3, [pc, #180]	; (8001430 <HAL_GPIO_Init+0x304>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	43db      	mvns	r3, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800139c:	4a24      	ldr	r2, [pc, #144]	; (8001430 <HAL_GPIO_Init+0x304>)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013a2:	4b23      	ldr	r3, [pc, #140]	; (8001430 <HAL_GPIO_Init+0x304>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4013      	ands	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013c6:	4a1a      	ldr	r2, [pc, #104]	; (8001430 <HAL_GPIO_Init+0x304>)
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013cc:	4b18      	ldr	r3, [pc, #96]	; (8001430 <HAL_GPIO_Init+0x304>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013f0:	4a0f      	ldr	r2, [pc, #60]	; (8001430 <HAL_GPIO_Init+0x304>)
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	3301      	adds	r3, #1
 80013fa:	61fb      	str	r3, [r7, #28]
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	2b0f      	cmp	r3, #15
 8001400:	f67f aea2 	bls.w	8001148 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001404:	bf00      	nop
 8001406:	bf00      	nop
 8001408:	3724      	adds	r7, #36	; 0x24
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	40023800 	.word	0x40023800
 8001418:	40013800 	.word	0x40013800
 800141c:	40020000 	.word	0x40020000
 8001420:	40020400 	.word	0x40020400
 8001424:	40020800 	.word	0x40020800
 8001428:	40020c00 	.word	0x40020c00
 800142c:	40021000 	.word	0x40021000
 8001430:	40013c00 	.word	0x40013c00

08001434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	807b      	strh	r3, [r7, #2]
 8001440:	4613      	mov	r3, r2
 8001442:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001444:	787b      	ldrb	r3, [r7, #1]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800144a:	887a      	ldrh	r2, [r7, #2]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001450:	e003      	b.n	800145a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001452:	887b      	ldrh	r3, [r7, #2]
 8001454:	041a      	lsls	r2, r3, #16
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	619a      	str	r2, [r3, #24]
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e267      	b.n	800194a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	2b00      	cmp	r3, #0
 8001484:	d075      	beq.n	8001572 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001486:	4b88      	ldr	r3, [pc, #544]	; (80016a8 <HAL_RCC_OscConfig+0x240>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f003 030c 	and.w	r3, r3, #12
 800148e:	2b04      	cmp	r3, #4
 8001490:	d00c      	beq.n	80014ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001492:	4b85      	ldr	r3, [pc, #532]	; (80016a8 <HAL_RCC_OscConfig+0x240>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800149a:	2b08      	cmp	r3, #8
 800149c:	d112      	bne.n	80014c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800149e:	4b82      	ldr	r3, [pc, #520]	; (80016a8 <HAL_RCC_OscConfig+0x240>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014aa:	d10b      	bne.n	80014c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ac:	4b7e      	ldr	r3, [pc, #504]	; (80016a8 <HAL_RCC_OscConfig+0x240>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d05b      	beq.n	8001570 <HAL_RCC_OscConfig+0x108>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d157      	bne.n	8001570 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e242      	b.n	800194a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014cc:	d106      	bne.n	80014dc <HAL_RCC_OscConfig+0x74>
 80014ce:	4b76      	ldr	r3, [pc, #472]	; (80016a8 <HAL_RCC_OscConfig+0x240>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a75      	ldr	r2, [pc, #468]	; (80016a8 <HAL_RCC_OscConfig+0x240>)
 80014d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	e01d      	b.n	8001518 <HAL_RCC_OscConfig+0xb0>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014e4:	d10c      	bne.n	8001500 <HAL_RCC_OscConfig+0x98>
 80014e6:	4b70      	ldr	r3, [pc, #448]	; (80016a8 <HAL_RCC_OscConfig+0x240>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a6f      	ldr	r2, [pc, #444]	; (80016a8 <HAL_RCC_OscConfig+0x240>)
 80014ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	4b6d      	ldr	r3, [pc, #436]	; (80016a8 <HAL_RCC_OscConfig+0x240>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a6c      	ldr	r2, [pc, #432]	; (80016a8 <HAL_RCC_OscConfig+0x240>)
 80014f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	e00b      	b.n	8001518 <HAL_RCC_OscConfig+0xb0>
 8001500:	4b69      	ldr	r3, [pc, #420]	; (80016a8 <HAL_RCC_OscConfig+0x240>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a68      	ldr	r2, [pc, #416]	; (80016a8 <HAL_RCC_OscConfig+0x240>)
 8001506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800150a:	6013      	str	r3, [r2, #0]
 800150c:	4b66      	ldr	r3, [pc, #408]	; (80016a8 <HAL_RCC_OscConfig+0x240>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a65      	ldr	r2, [pc, #404]	; (80016a8 <HAL_RCC_OscConfig+0x240>)
 8001512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001516:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d013      	beq.n	8001548 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001520:	f7ff fcee 	bl	8000f00 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001528:	f7ff fcea 	bl	8000f00 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b64      	cmp	r3, #100	; 0x64
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e207      	b.n	800194a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800153a:	4b5b      	ldr	r3, [pc, #364]	; (80016a8 <HAL_RCC_OscConfig+0x240>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0f0      	beq.n	8001528 <HAL_RCC_OscConfig+0xc0>
 8001546:	e014      	b.n	8001572 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001548:	f7ff fcda 	bl	8000f00 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001550:	f7ff fcd6 	bl	8000f00 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b64      	cmp	r3, #100	; 0x64
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e1f3      	b.n	800194a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001562:	4b51      	ldr	r3, [pc, #324]	; (80016a8 <HAL_RCC_OscConfig+0x240>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1f0      	bne.n	8001550 <HAL_RCC_OscConfig+0xe8>
 800156e:	e000      	b.n	8001572 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d063      	beq.n	8001646 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800157e:	4b4a      	ldr	r3, [pc, #296]	; (80016a8 <HAL_RCC_OscConfig+0x240>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f003 030c 	and.w	r3, r3, #12
 8001586:	2b00      	cmp	r3, #0
 8001588:	d00b      	beq.n	80015a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800158a:	4b47      	ldr	r3, [pc, #284]	; (80016a8 <HAL_RCC_OscConfig+0x240>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001592:	2b08      	cmp	r3, #8
 8001594:	d11c      	bne.n	80015d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001596:	4b44      	ldr	r3, [pc, #272]	; (80016a8 <HAL_RCC_OscConfig+0x240>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d116      	bne.n	80015d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015a2:	4b41      	ldr	r3, [pc, #260]	; (80016a8 <HAL_RCC_OscConfig+0x240>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d005      	beq.n	80015ba <HAL_RCC_OscConfig+0x152>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d001      	beq.n	80015ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e1c7      	b.n	800194a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ba:	4b3b      	ldr	r3, [pc, #236]	; (80016a8 <HAL_RCC_OscConfig+0x240>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	691b      	ldr	r3, [r3, #16]
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	4937      	ldr	r1, [pc, #220]	; (80016a8 <HAL_RCC_OscConfig+0x240>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ce:	e03a      	b.n	8001646 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d020      	beq.n	800161a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d8:	4b34      	ldr	r3, [pc, #208]	; (80016ac <HAL_RCC_OscConfig+0x244>)
 80015da:	2201      	movs	r2, #1
 80015dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015de:	f7ff fc8f 	bl	8000f00 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015e6:	f7ff fc8b 	bl	8000f00 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e1a8      	b.n	800194a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f8:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <HAL_RCC_OscConfig+0x240>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0f0      	beq.n	80015e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001604:	4b28      	ldr	r3, [pc, #160]	; (80016a8 <HAL_RCC_OscConfig+0x240>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	4925      	ldr	r1, [pc, #148]	; (80016a8 <HAL_RCC_OscConfig+0x240>)
 8001614:	4313      	orrs	r3, r2
 8001616:	600b      	str	r3, [r1, #0]
 8001618:	e015      	b.n	8001646 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800161a:	4b24      	ldr	r3, [pc, #144]	; (80016ac <HAL_RCC_OscConfig+0x244>)
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001620:	f7ff fc6e 	bl	8000f00 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001628:	f7ff fc6a 	bl	8000f00 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e187      	b.n	800194a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800163a:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <HAL_RCC_OscConfig+0x240>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f0      	bne.n	8001628 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	2b00      	cmp	r3, #0
 8001650:	d036      	beq.n	80016c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d016      	beq.n	8001688 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <HAL_RCC_OscConfig+0x248>)
 800165c:	2201      	movs	r2, #1
 800165e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001660:	f7ff fc4e 	bl	8000f00 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001668:	f7ff fc4a 	bl	8000f00 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e167      	b.n	800194a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800167a:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <HAL_RCC_OscConfig+0x240>)
 800167c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0f0      	beq.n	8001668 <HAL_RCC_OscConfig+0x200>
 8001686:	e01b      	b.n	80016c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <HAL_RCC_OscConfig+0x248>)
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168e:	f7ff fc37 	bl	8000f00 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001694:	e00e      	b.n	80016b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001696:	f7ff fc33 	bl	8000f00 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d907      	bls.n	80016b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e150      	b.n	800194a <HAL_RCC_OscConfig+0x4e2>
 80016a8:	40023800 	.word	0x40023800
 80016ac:	42470000 	.word	0x42470000
 80016b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b4:	4b88      	ldr	r3, [pc, #544]	; (80018d8 <HAL_RCC_OscConfig+0x470>)
 80016b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1ea      	bne.n	8001696 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f000 8097 	beq.w	80017fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ce:	2300      	movs	r3, #0
 80016d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016d2:	4b81      	ldr	r3, [pc, #516]	; (80018d8 <HAL_RCC_OscConfig+0x470>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10f      	bne.n	80016fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	4b7d      	ldr	r3, [pc, #500]	; (80018d8 <HAL_RCC_OscConfig+0x470>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	4a7c      	ldr	r2, [pc, #496]	; (80018d8 <HAL_RCC_OscConfig+0x470>)
 80016e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ec:	6413      	str	r3, [r2, #64]	; 0x40
 80016ee:	4b7a      	ldr	r3, [pc, #488]	; (80018d8 <HAL_RCC_OscConfig+0x470>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016fa:	2301      	movs	r3, #1
 80016fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fe:	4b77      	ldr	r3, [pc, #476]	; (80018dc <HAL_RCC_OscConfig+0x474>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001706:	2b00      	cmp	r3, #0
 8001708:	d118      	bne.n	800173c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800170a:	4b74      	ldr	r3, [pc, #464]	; (80018dc <HAL_RCC_OscConfig+0x474>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a73      	ldr	r2, [pc, #460]	; (80018dc <HAL_RCC_OscConfig+0x474>)
 8001710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001714:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001716:	f7ff fbf3 	bl	8000f00 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800171e:	f7ff fbef 	bl	8000f00 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e10c      	b.n	800194a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001730:	4b6a      	ldr	r3, [pc, #424]	; (80018dc <HAL_RCC_OscConfig+0x474>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0f0      	beq.n	800171e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d106      	bne.n	8001752 <HAL_RCC_OscConfig+0x2ea>
 8001744:	4b64      	ldr	r3, [pc, #400]	; (80018d8 <HAL_RCC_OscConfig+0x470>)
 8001746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001748:	4a63      	ldr	r2, [pc, #396]	; (80018d8 <HAL_RCC_OscConfig+0x470>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	6713      	str	r3, [r2, #112]	; 0x70
 8001750:	e01c      	b.n	800178c <HAL_RCC_OscConfig+0x324>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	2b05      	cmp	r3, #5
 8001758:	d10c      	bne.n	8001774 <HAL_RCC_OscConfig+0x30c>
 800175a:	4b5f      	ldr	r3, [pc, #380]	; (80018d8 <HAL_RCC_OscConfig+0x470>)
 800175c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175e:	4a5e      	ldr	r2, [pc, #376]	; (80018d8 <HAL_RCC_OscConfig+0x470>)
 8001760:	f043 0304 	orr.w	r3, r3, #4
 8001764:	6713      	str	r3, [r2, #112]	; 0x70
 8001766:	4b5c      	ldr	r3, [pc, #368]	; (80018d8 <HAL_RCC_OscConfig+0x470>)
 8001768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176a:	4a5b      	ldr	r2, [pc, #364]	; (80018d8 <HAL_RCC_OscConfig+0x470>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	6713      	str	r3, [r2, #112]	; 0x70
 8001772:	e00b      	b.n	800178c <HAL_RCC_OscConfig+0x324>
 8001774:	4b58      	ldr	r3, [pc, #352]	; (80018d8 <HAL_RCC_OscConfig+0x470>)
 8001776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001778:	4a57      	ldr	r2, [pc, #348]	; (80018d8 <HAL_RCC_OscConfig+0x470>)
 800177a:	f023 0301 	bic.w	r3, r3, #1
 800177e:	6713      	str	r3, [r2, #112]	; 0x70
 8001780:	4b55      	ldr	r3, [pc, #340]	; (80018d8 <HAL_RCC_OscConfig+0x470>)
 8001782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001784:	4a54      	ldr	r2, [pc, #336]	; (80018d8 <HAL_RCC_OscConfig+0x470>)
 8001786:	f023 0304 	bic.w	r3, r3, #4
 800178a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d015      	beq.n	80017c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001794:	f7ff fbb4 	bl	8000f00 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800179a:	e00a      	b.n	80017b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800179c:	f7ff fbb0 	bl	8000f00 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e0cb      	b.n	800194a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b2:	4b49      	ldr	r3, [pc, #292]	; (80018d8 <HAL_RCC_OscConfig+0x470>)
 80017b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0ee      	beq.n	800179c <HAL_RCC_OscConfig+0x334>
 80017be:	e014      	b.n	80017ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c0:	f7ff fb9e 	bl	8000f00 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c6:	e00a      	b.n	80017de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017c8:	f7ff fb9a 	bl	8000f00 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e0b5      	b.n	800194a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017de:	4b3e      	ldr	r3, [pc, #248]	; (80018d8 <HAL_RCC_OscConfig+0x470>)
 80017e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1ee      	bne.n	80017c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017ea:	7dfb      	ldrb	r3, [r7, #23]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d105      	bne.n	80017fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f0:	4b39      	ldr	r3, [pc, #228]	; (80018d8 <HAL_RCC_OscConfig+0x470>)
 80017f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f4:	4a38      	ldr	r2, [pc, #224]	; (80018d8 <HAL_RCC_OscConfig+0x470>)
 80017f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	2b00      	cmp	r3, #0
 8001802:	f000 80a1 	beq.w	8001948 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001806:	4b34      	ldr	r3, [pc, #208]	; (80018d8 <HAL_RCC_OscConfig+0x470>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f003 030c 	and.w	r3, r3, #12
 800180e:	2b08      	cmp	r3, #8
 8001810:	d05c      	beq.n	80018cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d141      	bne.n	800189e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800181a:	4b31      	ldr	r3, [pc, #196]	; (80018e0 <HAL_RCC_OscConfig+0x478>)
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001820:	f7ff fb6e 	bl	8000f00 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001828:	f7ff fb6a 	bl	8000f00 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e087      	b.n	800194a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800183a:	4b27      	ldr	r3, [pc, #156]	; (80018d8 <HAL_RCC_OscConfig+0x470>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f0      	bne.n	8001828 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69da      	ldr	r2, [r3, #28]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a1b      	ldr	r3, [r3, #32]
 800184e:	431a      	orrs	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	019b      	lsls	r3, r3, #6
 8001856:	431a      	orrs	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185c:	085b      	lsrs	r3, r3, #1
 800185e:	3b01      	subs	r3, #1
 8001860:	041b      	lsls	r3, r3, #16
 8001862:	431a      	orrs	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001868:	061b      	lsls	r3, r3, #24
 800186a:	491b      	ldr	r1, [pc, #108]	; (80018d8 <HAL_RCC_OscConfig+0x470>)
 800186c:	4313      	orrs	r3, r2
 800186e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001870:	4b1b      	ldr	r3, [pc, #108]	; (80018e0 <HAL_RCC_OscConfig+0x478>)
 8001872:	2201      	movs	r2, #1
 8001874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001876:	f7ff fb43 	bl	8000f00 <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800187e:	f7ff fb3f 	bl	8000f00 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e05c      	b.n	800194a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001890:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <HAL_RCC_OscConfig+0x470>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0f0      	beq.n	800187e <HAL_RCC_OscConfig+0x416>
 800189c:	e054      	b.n	8001948 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800189e:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <HAL_RCC_OscConfig+0x478>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a4:	f7ff fb2c 	bl	8000f00 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ac:	f7ff fb28 	bl	8000f00 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e045      	b.n	800194a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_RCC_OscConfig+0x470>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f0      	bne.n	80018ac <HAL_RCC_OscConfig+0x444>
 80018ca:	e03d      	b.n	8001948 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d107      	bne.n	80018e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e038      	b.n	800194a <HAL_RCC_OscConfig+0x4e2>
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40007000 	.word	0x40007000
 80018e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018e4:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <HAL_RCC_OscConfig+0x4ec>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d028      	beq.n	8001944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d121      	bne.n	8001944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800190a:	429a      	cmp	r2, r3
 800190c:	d11a      	bne.n	8001944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001914:	4013      	ands	r3, r2
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800191a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800191c:	4293      	cmp	r3, r2
 800191e:	d111      	bne.n	8001944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192a:	085b      	lsrs	r3, r3, #1
 800192c:	3b01      	subs	r3, #1
 800192e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001930:	429a      	cmp	r2, r3
 8001932:	d107      	bne.n	8001944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001940:	429a      	cmp	r2, r3
 8001942:	d001      	beq.n	8001948 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e000      	b.n	800194a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40023800 	.word	0x40023800

08001958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e0cc      	b.n	8001b06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800196c:	4b68      	ldr	r3, [pc, #416]	; (8001b10 <HAL_RCC_ClockConfig+0x1b8>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d90c      	bls.n	8001994 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197a:	4b65      	ldr	r3, [pc, #404]	; (8001b10 <HAL_RCC_ClockConfig+0x1b8>)
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001982:	4b63      	ldr	r3, [pc, #396]	; (8001b10 <HAL_RCC_ClockConfig+0x1b8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	429a      	cmp	r2, r3
 800198e:	d001      	beq.n	8001994 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e0b8      	b.n	8001b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d020      	beq.n	80019e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d005      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019ac:	4b59      	ldr	r3, [pc, #356]	; (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	4a58      	ldr	r2, [pc, #352]	; (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 80019b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0308 	and.w	r3, r3, #8
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d005      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019c4:	4b53      	ldr	r3, [pc, #332]	; (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	4a52      	ldr	r2, [pc, #328]	; (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019d0:	4b50      	ldr	r3, [pc, #320]	; (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	494d      	ldr	r1, [pc, #308]	; (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d044      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d107      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f6:	4b47      	ldr	r3, [pc, #284]	; (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d119      	bne.n	8001a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e07f      	b.n	8001b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d003      	beq.n	8001a16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	d107      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a16:	4b3f      	ldr	r3, [pc, #252]	; (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d109      	bne.n	8001a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e06f      	b.n	8001b06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a26:	4b3b      	ldr	r3, [pc, #236]	; (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e067      	b.n	8001b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a36:	4b37      	ldr	r3, [pc, #220]	; (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f023 0203 	bic.w	r2, r3, #3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	4934      	ldr	r1, [pc, #208]	; (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a48:	f7ff fa5a 	bl	8000f00 <HAL_GetTick>
 8001a4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4e:	e00a      	b.n	8001a66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a50:	f7ff fa56 	bl	8000f00 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e04f      	b.n	8001b06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a66:	4b2b      	ldr	r3, [pc, #172]	; (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 020c 	and.w	r2, r3, #12
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d1eb      	bne.n	8001a50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a78:	4b25      	ldr	r3, [pc, #148]	; (8001b10 <HAL_RCC_ClockConfig+0x1b8>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d20c      	bcs.n	8001aa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a86:	4b22      	ldr	r3, [pc, #136]	; (8001b10 <HAL_RCC_ClockConfig+0x1b8>)
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	b2d2      	uxtb	r2, r2
 8001a8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8e:	4b20      	ldr	r3, [pc, #128]	; (8001b10 <HAL_RCC_ClockConfig+0x1b8>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d001      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e032      	b.n	8001b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d008      	beq.n	8001abe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aac:	4b19      	ldr	r3, [pc, #100]	; (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	4916      	ldr	r1, [pc, #88]	; (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0308 	and.w	r3, r3, #8
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d009      	beq.n	8001ade <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aca:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	490e      	ldr	r1, [pc, #56]	; (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ade:	f000 f821 	bl	8001b24 <HAL_RCC_GetSysClockFreq>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	091b      	lsrs	r3, r3, #4
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	490a      	ldr	r1, [pc, #40]	; (8001b18 <HAL_RCC_ClockConfig+0x1c0>)
 8001af0:	5ccb      	ldrb	r3, [r1, r3]
 8001af2:	fa22 f303 	lsr.w	r3, r2, r3
 8001af6:	4a09      	ldr	r2, [pc, #36]	; (8001b1c <HAL_RCC_ClockConfig+0x1c4>)
 8001af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <HAL_RCC_ClockConfig+0x1c8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff f9ba 	bl	8000e78 <HAL_InitTick>

  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40023c00 	.word	0x40023c00
 8001b14:	40023800 	.word	0x40023800
 8001b18:	0800726c 	.word	0x0800726c
 8001b1c:	20000000 	.word	0x20000000
 8001b20:	20000004 	.word	0x20000004

08001b24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b28:	b094      	sub	sp, #80	; 0x50
 8001b2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	647b      	str	r3, [r7, #68]	; 0x44
 8001b30:	2300      	movs	r3, #0
 8001b32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b34:	2300      	movs	r3, #0
 8001b36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b3c:	4b79      	ldr	r3, [pc, #484]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 030c 	and.w	r3, r3, #12
 8001b44:	2b08      	cmp	r3, #8
 8001b46:	d00d      	beq.n	8001b64 <HAL_RCC_GetSysClockFreq+0x40>
 8001b48:	2b08      	cmp	r3, #8
 8001b4a:	f200 80e1 	bhi.w	8001d10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d002      	beq.n	8001b58 <HAL_RCC_GetSysClockFreq+0x34>
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d003      	beq.n	8001b5e <HAL_RCC_GetSysClockFreq+0x3a>
 8001b56:	e0db      	b.n	8001d10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b58:	4b73      	ldr	r3, [pc, #460]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b5a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b5c:	e0db      	b.n	8001d16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b5e:	4b73      	ldr	r3, [pc, #460]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x208>)
 8001b60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b62:	e0d8      	b.n	8001d16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b64:	4b6f      	ldr	r3, [pc, #444]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b6c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b6e:	4b6d      	ldr	r3, [pc, #436]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d063      	beq.n	8001c42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b7a:	4b6a      	ldr	r3, [pc, #424]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	099b      	lsrs	r3, r3, #6
 8001b80:	2200      	movs	r2, #0
 8001b82:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b8c:	633b      	str	r3, [r7, #48]	; 0x30
 8001b8e:	2300      	movs	r3, #0
 8001b90:	637b      	str	r3, [r7, #52]	; 0x34
 8001b92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b96:	4622      	mov	r2, r4
 8001b98:	462b      	mov	r3, r5
 8001b9a:	f04f 0000 	mov.w	r0, #0
 8001b9e:	f04f 0100 	mov.w	r1, #0
 8001ba2:	0159      	lsls	r1, r3, #5
 8001ba4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ba8:	0150      	lsls	r0, r2, #5
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	4621      	mov	r1, r4
 8001bb0:	1a51      	subs	r1, r2, r1
 8001bb2:	6139      	str	r1, [r7, #16]
 8001bb4:	4629      	mov	r1, r5
 8001bb6:	eb63 0301 	sbc.w	r3, r3, r1
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	f04f 0300 	mov.w	r3, #0
 8001bc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001bc8:	4659      	mov	r1, fp
 8001bca:	018b      	lsls	r3, r1, #6
 8001bcc:	4651      	mov	r1, sl
 8001bce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bd2:	4651      	mov	r1, sl
 8001bd4:	018a      	lsls	r2, r1, #6
 8001bd6:	4651      	mov	r1, sl
 8001bd8:	ebb2 0801 	subs.w	r8, r2, r1
 8001bdc:	4659      	mov	r1, fp
 8001bde:	eb63 0901 	sbc.w	r9, r3, r1
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	f04f 0300 	mov.w	r3, #0
 8001bea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bf6:	4690      	mov	r8, r2
 8001bf8:	4699      	mov	r9, r3
 8001bfa:	4623      	mov	r3, r4
 8001bfc:	eb18 0303 	adds.w	r3, r8, r3
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	462b      	mov	r3, r5
 8001c04:	eb49 0303 	adc.w	r3, r9, r3
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	f04f 0300 	mov.w	r3, #0
 8001c12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c16:	4629      	mov	r1, r5
 8001c18:	024b      	lsls	r3, r1, #9
 8001c1a:	4621      	mov	r1, r4
 8001c1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c20:	4621      	mov	r1, r4
 8001c22:	024a      	lsls	r2, r1, #9
 8001c24:	4610      	mov	r0, r2
 8001c26:	4619      	mov	r1, r3
 8001c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c34:	f7fe fb24 	bl	8000280 <__aeabi_uldivmod>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c40:	e058      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c42:	4b38      	ldr	r3, [pc, #224]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	099b      	lsrs	r3, r3, #6
 8001c48:	2200      	movs	r2, #0
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	4611      	mov	r1, r2
 8001c4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c52:	623b      	str	r3, [r7, #32]
 8001c54:	2300      	movs	r3, #0
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
 8001c58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c5c:	4642      	mov	r2, r8
 8001c5e:	464b      	mov	r3, r9
 8001c60:	f04f 0000 	mov.w	r0, #0
 8001c64:	f04f 0100 	mov.w	r1, #0
 8001c68:	0159      	lsls	r1, r3, #5
 8001c6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c6e:	0150      	lsls	r0, r2, #5
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	4641      	mov	r1, r8
 8001c76:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c7a:	4649      	mov	r1, r9
 8001c7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c80:	f04f 0200 	mov.w	r2, #0
 8001c84:	f04f 0300 	mov.w	r3, #0
 8001c88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c94:	ebb2 040a 	subs.w	r4, r2, sl
 8001c98:	eb63 050b 	sbc.w	r5, r3, fp
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	f04f 0300 	mov.w	r3, #0
 8001ca4:	00eb      	lsls	r3, r5, #3
 8001ca6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001caa:	00e2      	lsls	r2, r4, #3
 8001cac:	4614      	mov	r4, r2
 8001cae:	461d      	mov	r5, r3
 8001cb0:	4643      	mov	r3, r8
 8001cb2:	18e3      	adds	r3, r4, r3
 8001cb4:	603b      	str	r3, [r7, #0]
 8001cb6:	464b      	mov	r3, r9
 8001cb8:	eb45 0303 	adc.w	r3, r5, r3
 8001cbc:	607b      	str	r3, [r7, #4]
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	f04f 0300 	mov.w	r3, #0
 8001cc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cca:	4629      	mov	r1, r5
 8001ccc:	028b      	lsls	r3, r1, #10
 8001cce:	4621      	mov	r1, r4
 8001cd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cd4:	4621      	mov	r1, r4
 8001cd6:	028a      	lsls	r2, r1, #10
 8001cd8:	4610      	mov	r0, r2
 8001cda:	4619      	mov	r1, r3
 8001cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cde:	2200      	movs	r2, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
 8001ce2:	61fa      	str	r2, [r7, #28]
 8001ce4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ce8:	f7fe faca 	bl	8000280 <__aeabi_uldivmod>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	0c1b      	lsrs	r3, r3, #16
 8001cfa:	f003 0303 	and.w	r3, r3, #3
 8001cfe:	3301      	adds	r3, #1
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001d04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d0e:	e002      	b.n	8001d16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3750      	adds	r7, #80	; 0x50
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d22:	bf00      	nop
 8001d24:	40023800 	.word	0x40023800
 8001d28:	00f42400 	.word	0x00f42400
 8001d2c:	007a1200 	.word	0x007a1200

08001d30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d34:	4b03      	ldr	r3, [pc, #12]	; (8001d44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d36:	681b      	ldr	r3, [r3, #0]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	20000000 	.word	0x20000000

08001d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d4c:	f7ff fff0 	bl	8001d30 <HAL_RCC_GetHCLKFreq>
 8001d50:	4602      	mov	r2, r0
 8001d52:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	0a9b      	lsrs	r3, r3, #10
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	4903      	ldr	r1, [pc, #12]	; (8001d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d5e:	5ccb      	ldrb	r3, [r1, r3]
 8001d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	0800727c 	.word	0x0800727c

08001d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d74:	f7ff ffdc 	bl	8001d30 <HAL_RCC_GetHCLKFreq>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	0b5b      	lsrs	r3, r3, #13
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	4903      	ldr	r1, [pc, #12]	; (8001d94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d86:	5ccb      	ldrb	r3, [r1, r3]
 8001d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40023800 	.word	0x40023800
 8001d94:	0800727c 	.word	0x0800727c

08001d98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e07b      	b.n	8001ea2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d108      	bne.n	8001dc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001dba:	d009      	beq.n	8001dd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	61da      	str	r2, [r3, #28]
 8001dc2:	e005      	b.n	8001dd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d106      	bne.n	8001df0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7fe fe76 	bl	8000adc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2202      	movs	r2, #2
 8001df4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e22:	431a      	orrs	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e40:	431a      	orrs	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e54:	ea42 0103 	orr.w	r1, r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	0c1b      	lsrs	r3, r3, #16
 8001e6e:	f003 0104 	and.w	r1, r3, #4
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e76:	f003 0210 	and.w	r2, r3, #16
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	69da      	ldr	r2, [r3, #28]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b088      	sub	sp, #32
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	60f8      	str	r0, [r7, #12]
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	603b      	str	r3, [r7, #0]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d101      	bne.n	8001ecc <HAL_SPI_Transmit+0x22>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	e126      	b.n	800211a <HAL_SPI_Transmit+0x270>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ed4:	f7ff f814 	bl	8000f00 <HAL_GetTick>
 8001ed8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d002      	beq.n	8001ef0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001eea:	2302      	movs	r3, #2
 8001eec:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001eee:	e10b      	b.n	8002108 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <HAL_SPI_Transmit+0x52>
 8001ef6:	88fb      	ldrh	r3, [r7, #6]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d102      	bne.n	8001f02 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f00:	e102      	b.n	8002108 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2203      	movs	r2, #3
 8001f06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	88fa      	ldrh	r2, [r7, #6]
 8001f1a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	88fa      	ldrh	r2, [r7, #6]
 8001f20:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f48:	d10f      	bne.n	8001f6a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f68:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f74:	2b40      	cmp	r3, #64	; 0x40
 8001f76:	d007      	beq.n	8001f88 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f90:	d14b      	bne.n	800202a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d002      	beq.n	8001fa0 <HAL_SPI_Transmit+0xf6>
 8001f9a:	8afb      	ldrh	r3, [r7, #22]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d13e      	bne.n	800201e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa4:	881a      	ldrh	r2, [r3, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb0:	1c9a      	adds	r2, r3, #2
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001fc4:	e02b      	b.n	800201e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d112      	bne.n	8001ffa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd8:	881a      	ldrh	r2, [r3, #0]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe4:	1c9a      	adds	r2, r3, #2
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	86da      	strh	r2, [r3, #54]	; 0x36
 8001ff8:	e011      	b.n	800201e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ffa:	f7fe ff81 	bl	8000f00 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d803      	bhi.n	8002012 <HAL_SPI_Transmit+0x168>
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002010:	d102      	bne.n	8002018 <HAL_SPI_Transmit+0x16e>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d102      	bne.n	800201e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800201c:	e074      	b.n	8002108 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002022:	b29b      	uxth	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1ce      	bne.n	8001fc6 <HAL_SPI_Transmit+0x11c>
 8002028:	e04c      	b.n	80020c4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d002      	beq.n	8002038 <HAL_SPI_Transmit+0x18e>
 8002032:	8afb      	ldrh	r3, [r7, #22]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d140      	bne.n	80020ba <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	330c      	adds	r3, #12
 8002042:	7812      	ldrb	r2, [r2, #0]
 8002044:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	1c5a      	adds	r2, r3, #1
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002054:	b29b      	uxth	r3, r3
 8002056:	3b01      	subs	r3, #1
 8002058:	b29a      	uxth	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800205e:	e02c      	b.n	80020ba <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b02      	cmp	r3, #2
 800206c:	d113      	bne.n	8002096 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	330c      	adds	r3, #12
 8002078:	7812      	ldrb	r2, [r2, #0]
 800207a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002080:	1c5a      	adds	r2, r3, #1
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800208a:	b29b      	uxth	r3, r3
 800208c:	3b01      	subs	r3, #1
 800208e:	b29a      	uxth	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	86da      	strh	r2, [r3, #54]	; 0x36
 8002094:	e011      	b.n	80020ba <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002096:	f7fe ff33 	bl	8000f00 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d803      	bhi.n	80020ae <HAL_SPI_Transmit+0x204>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ac:	d102      	bne.n	80020b4 <HAL_SPI_Transmit+0x20a>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d102      	bne.n	80020ba <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80020b8:	e026      	b.n	8002108 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020be:	b29b      	uxth	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1cd      	bne.n	8002060 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	6839      	ldr	r1, [r7, #0]
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f000 fa55 	bl	8002578 <SPI_EndRxTxTransaction>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d002      	beq.n	80020da <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2220      	movs	r2, #32
 80020d8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10a      	bne.n	80020f8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80020e2:	2300      	movs	r3, #0
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d002      	beq.n	8002106 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	77fb      	strb	r3, [r7, #31]
 8002104:	e000      	b.n	8002108 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002106:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002118:	7ffb      	ldrb	r3, [r7, #31]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3720      	adds	r7, #32
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b08c      	sub	sp, #48	; 0x30
 8002126:	af00      	add	r7, sp, #0
 8002128:	60f8      	str	r0, [r7, #12]
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
 800212e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002130:	2301      	movs	r3, #1
 8002132:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002134:	2300      	movs	r3, #0
 8002136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002140:	2b01      	cmp	r3, #1
 8002142:	d101      	bne.n	8002148 <HAL_SPI_TransmitReceive+0x26>
 8002144:	2302      	movs	r3, #2
 8002146:	e18a      	b.n	800245e <HAL_SPI_TransmitReceive+0x33c>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002150:	f7fe fed6 	bl	8000f00 <HAL_GetTick>
 8002154:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800215c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002166:	887b      	ldrh	r3, [r7, #2]
 8002168:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800216a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800216e:	2b01      	cmp	r3, #1
 8002170:	d00f      	beq.n	8002192 <HAL_SPI_TransmitReceive+0x70>
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002178:	d107      	bne.n	800218a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d103      	bne.n	800218a <HAL_SPI_TransmitReceive+0x68>
 8002182:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002186:	2b04      	cmp	r3, #4
 8002188:	d003      	beq.n	8002192 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800218a:	2302      	movs	r3, #2
 800218c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002190:	e15b      	b.n	800244a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d005      	beq.n	80021a4 <HAL_SPI_TransmitReceive+0x82>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d002      	beq.n	80021a4 <HAL_SPI_TransmitReceive+0x82>
 800219e:	887b      	ldrh	r3, [r7, #2]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d103      	bne.n	80021ac <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80021aa:	e14e      	b.n	800244a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b04      	cmp	r3, #4
 80021b6:	d003      	beq.n	80021c0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2205      	movs	r2, #5
 80021bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	887a      	ldrh	r2, [r7, #2]
 80021d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	887a      	ldrh	r2, [r7, #2]
 80021d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	887a      	ldrh	r2, [r7, #2]
 80021e2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	887a      	ldrh	r2, [r7, #2]
 80021e8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002200:	2b40      	cmp	r3, #64	; 0x40
 8002202:	d007      	beq.n	8002214 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002212:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800221c:	d178      	bne.n	8002310 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d002      	beq.n	800222c <HAL_SPI_TransmitReceive+0x10a>
 8002226:	8b7b      	ldrh	r3, [r7, #26]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d166      	bne.n	80022fa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002230:	881a      	ldrh	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223c:	1c9a      	adds	r2, r3, #2
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002246:	b29b      	uxth	r3, r3
 8002248:	3b01      	subs	r3, #1
 800224a:	b29a      	uxth	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002250:	e053      	b.n	80022fa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b02      	cmp	r3, #2
 800225e:	d11b      	bne.n	8002298 <HAL_SPI_TransmitReceive+0x176>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002264:	b29b      	uxth	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d016      	beq.n	8002298 <HAL_SPI_TransmitReceive+0x176>
 800226a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226c:	2b01      	cmp	r3, #1
 800226e:	d113      	bne.n	8002298 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002274:	881a      	ldrh	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002280:	1c9a      	adds	r2, r3, #2
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800228a:	b29b      	uxth	r3, r3
 800228c:	3b01      	subs	r3, #1
 800228e:	b29a      	uxth	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d119      	bne.n	80022da <HAL_SPI_TransmitReceive+0x1b8>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d014      	beq.n	80022da <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ba:	b292      	uxth	r2, r2
 80022bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c2:	1c9a      	adds	r2, r3, #2
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	3b01      	subs	r3, #1
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80022d6:	2301      	movs	r3, #1
 80022d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80022da:	f7fe fe11 	bl	8000f00 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d807      	bhi.n	80022fa <HAL_SPI_TransmitReceive+0x1d8>
 80022ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f0:	d003      	beq.n	80022fa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80022f8:	e0a7      	b.n	800244a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022fe:	b29b      	uxth	r3, r3
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1a6      	bne.n	8002252 <HAL_SPI_TransmitReceive+0x130>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002308:	b29b      	uxth	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1a1      	bne.n	8002252 <HAL_SPI_TransmitReceive+0x130>
 800230e:	e07c      	b.n	800240a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d002      	beq.n	800231e <HAL_SPI_TransmitReceive+0x1fc>
 8002318:	8b7b      	ldrh	r3, [r7, #26]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d16b      	bne.n	80023f6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	330c      	adds	r3, #12
 8002328:	7812      	ldrb	r2, [r2, #0]
 800232a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002330:	1c5a      	adds	r2, r3, #1
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800233a:	b29b      	uxth	r3, r3
 800233c:	3b01      	subs	r3, #1
 800233e:	b29a      	uxth	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002344:	e057      	b.n	80023f6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b02      	cmp	r3, #2
 8002352:	d11c      	bne.n	800238e <HAL_SPI_TransmitReceive+0x26c>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002358:	b29b      	uxth	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d017      	beq.n	800238e <HAL_SPI_TransmitReceive+0x26c>
 800235e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002360:	2b01      	cmp	r3, #1
 8002362:	d114      	bne.n	800238e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	330c      	adds	r3, #12
 800236e:	7812      	ldrb	r2, [r2, #0]
 8002370:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	1c5a      	adds	r2, r3, #1
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002380:	b29b      	uxth	r3, r3
 8002382:	3b01      	subs	r3, #1
 8002384:	b29a      	uxth	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b01      	cmp	r3, #1
 800239a:	d119      	bne.n	80023d0 <HAL_SPI_TransmitReceive+0x2ae>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d014      	beq.n	80023d0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b8:	1c5a      	adds	r2, r3, #1
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80023cc:	2301      	movs	r3, #1
 80023ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80023d0:	f7fe fd96 	bl	8000f00 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023dc:	429a      	cmp	r2, r3
 80023de:	d803      	bhi.n	80023e8 <HAL_SPI_TransmitReceive+0x2c6>
 80023e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e6:	d102      	bne.n	80023ee <HAL_SPI_TransmitReceive+0x2cc>
 80023e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d103      	bne.n	80023f6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80023f4:	e029      	b.n	800244a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1a2      	bne.n	8002346 <HAL_SPI_TransmitReceive+0x224>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002404:	b29b      	uxth	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d19d      	bne.n	8002346 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800240a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800240c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 f8b2 	bl	8002578 <SPI_EndRxTxTransaction>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d006      	beq.n	8002428 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2220      	movs	r2, #32
 8002424:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002426:	e010      	b.n	800244a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10b      	bne.n	8002448 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	617b      	str	r3, [r7, #20]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	e000      	b.n	800244a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002448:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800245a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800245e:	4618      	mov	r0, r3
 8002460:	3730      	adds	r7, #48	; 0x30
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b088      	sub	sp, #32
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	603b      	str	r3, [r7, #0]
 8002474:	4613      	mov	r3, r2
 8002476:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002478:	f7fe fd42 	bl	8000f00 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002480:	1a9b      	subs	r3, r3, r2
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	4413      	add	r3, r2
 8002486:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002488:	f7fe fd3a 	bl	8000f00 <HAL_GetTick>
 800248c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800248e:	4b39      	ldr	r3, [pc, #228]	; (8002574 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	015b      	lsls	r3, r3, #5
 8002494:	0d1b      	lsrs	r3, r3, #20
 8002496:	69fa      	ldr	r2, [r7, #28]
 8002498:	fb02 f303 	mul.w	r3, r2, r3
 800249c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800249e:	e054      	b.n	800254a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a6:	d050      	beq.n	800254a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80024a8:	f7fe fd2a 	bl	8000f00 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	69fa      	ldr	r2, [r7, #28]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d902      	bls.n	80024be <SPI_WaitFlagStateUntilTimeout+0x56>
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d13d      	bne.n	800253a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80024cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024d6:	d111      	bne.n	80024fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024e0:	d004      	beq.n	80024ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ea:	d107      	bne.n	80024fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002500:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002504:	d10f      	bne.n	8002526 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002524:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e017      	b.n	800256a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	3b01      	subs	r3, #1
 8002548:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	4013      	ands	r3, r2
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	429a      	cmp	r2, r3
 8002558:	bf0c      	ite	eq
 800255a:	2301      	moveq	r3, #1
 800255c:	2300      	movne	r3, #0
 800255e:	b2db      	uxtb	r3, r3
 8002560:	461a      	mov	r2, r3
 8002562:	79fb      	ldrb	r3, [r7, #7]
 8002564:	429a      	cmp	r2, r3
 8002566:	d19b      	bne.n	80024a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3720      	adds	r7, #32
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20000000 	.word	0x20000000

08002578 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b088      	sub	sp, #32
 800257c:	af02      	add	r7, sp, #8
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002584:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <SPI_EndRxTxTransaction+0x7c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a1b      	ldr	r2, [pc, #108]	; (80025f8 <SPI_EndRxTxTransaction+0x80>)
 800258a:	fba2 2303 	umull	r2, r3, r2, r3
 800258e:	0d5b      	lsrs	r3, r3, #21
 8002590:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002594:	fb02 f303 	mul.w	r3, r2, r3
 8002598:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025a2:	d112      	bne.n	80025ca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	2200      	movs	r2, #0
 80025ac:	2180      	movs	r1, #128	; 0x80
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f7ff ff5a 	bl	8002468 <SPI_WaitFlagStateUntilTimeout>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d016      	beq.n	80025e8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025be:	f043 0220 	orr.w	r2, r3, #32
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e00f      	b.n	80025ea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00a      	beq.n	80025e6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e0:	2b80      	cmp	r3, #128	; 0x80
 80025e2:	d0f2      	beq.n	80025ca <SPI_EndRxTxTransaction+0x52>
 80025e4:	e000      	b.n	80025e8 <SPI_EndRxTxTransaction+0x70>
        break;
 80025e6:	bf00      	nop
  }

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000000 	.word	0x20000000
 80025f8:	165e9f81 	.word	0x165e9f81

080025fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e03f      	b.n	800268e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d106      	bne.n	8002628 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7fe fab4 	bl	8000b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2224      	movs	r2, #36	; 0x24
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800263e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f929 	bl	8002898 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002654:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	695a      	ldr	r2, [r3, #20]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002664:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68da      	ldr	r2, [r3, #12]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002674:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2220      	movs	r2, #32
 8002680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2220      	movs	r2, #32
 8002688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b08a      	sub	sp, #40	; 0x28
 800269a:	af02      	add	r7, sp, #8
 800269c:	60f8      	str	r0, [r7, #12]
 800269e:	60b9      	str	r1, [r7, #8]
 80026a0:	603b      	str	r3, [r7, #0]
 80026a2:	4613      	mov	r3, r2
 80026a4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b20      	cmp	r3, #32
 80026b4:	d17c      	bne.n	80027b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d002      	beq.n	80026c2 <HAL_UART_Transmit+0x2c>
 80026bc:	88fb      	ldrh	r3, [r7, #6]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e075      	b.n	80027b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d101      	bne.n	80026d4 <HAL_UART_Transmit+0x3e>
 80026d0:	2302      	movs	r3, #2
 80026d2:	e06e      	b.n	80027b2 <HAL_UART_Transmit+0x11c>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2221      	movs	r2, #33	; 0x21
 80026e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026ea:	f7fe fc09 	bl	8000f00 <HAL_GetTick>
 80026ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	88fa      	ldrh	r2, [r7, #6]
 80026f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	88fa      	ldrh	r2, [r7, #6]
 80026fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002704:	d108      	bne.n	8002718 <HAL_UART_Transmit+0x82>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d104      	bne.n	8002718 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800270e:	2300      	movs	r3, #0
 8002710:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	61bb      	str	r3, [r7, #24]
 8002716:	e003      	b.n	8002720 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800271c:	2300      	movs	r3, #0
 800271e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002728:	e02a      	b.n	8002780 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2200      	movs	r2, #0
 8002732:	2180      	movs	r1, #128	; 0x80
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 f840 	bl	80027ba <UART_WaitOnFlagUntilTimeout>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e036      	b.n	80027b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10b      	bne.n	8002762 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002758:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	3302      	adds	r3, #2
 800275e:	61bb      	str	r3, [r7, #24]
 8002760:	e007      	b.n	8002772 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	781a      	ldrb	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	3301      	adds	r3, #1
 8002770:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002776:	b29b      	uxth	r3, r3
 8002778:	3b01      	subs	r3, #1
 800277a:	b29a      	uxth	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002784:	b29b      	uxth	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1cf      	bne.n	800272a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	2200      	movs	r2, #0
 8002792:	2140      	movs	r1, #64	; 0x40
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f000 f810 	bl	80027ba <UART_WaitOnFlagUntilTimeout>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e006      	b.n	80027b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2220      	movs	r2, #32
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	e000      	b.n	80027b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80027b0:	2302      	movs	r3, #2
  }
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3720      	adds	r7, #32
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b090      	sub	sp, #64	; 0x40
 80027be:	af00      	add	r7, sp, #0
 80027c0:	60f8      	str	r0, [r7, #12]
 80027c2:	60b9      	str	r1, [r7, #8]
 80027c4:	603b      	str	r3, [r7, #0]
 80027c6:	4613      	mov	r3, r2
 80027c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027ca:	e050      	b.n	800286e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d2:	d04c      	beq.n	800286e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80027d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d007      	beq.n	80027ea <UART_WaitOnFlagUntilTimeout+0x30>
 80027da:	f7fe fb91 	bl	8000f00 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d241      	bcs.n	800286e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	330c      	adds	r3, #12
 80027f0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f4:	e853 3f00 	ldrex	r3, [r3]
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002800:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	330c      	adds	r3, #12
 8002808:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800280a:	637a      	str	r2, [r7, #52]	; 0x34
 800280c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800280e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002810:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002812:	e841 2300 	strex	r3, r2, [r1]
 8002816:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1e5      	bne.n	80027ea <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	3314      	adds	r3, #20
 8002824:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	e853 3f00 	ldrex	r3, [r3]
 800282c:	613b      	str	r3, [r7, #16]
   return(result);
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	f023 0301 	bic.w	r3, r3, #1
 8002834:	63bb      	str	r3, [r7, #56]	; 0x38
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	3314      	adds	r3, #20
 800283c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800283e:	623a      	str	r2, [r7, #32]
 8002840:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002842:	69f9      	ldr	r1, [r7, #28]
 8002844:	6a3a      	ldr	r2, [r7, #32]
 8002846:	e841 2300 	strex	r3, r2, [r1]
 800284a:	61bb      	str	r3, [r7, #24]
   return(result);
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1e5      	bne.n	800281e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2220      	movs	r2, #32
 8002856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2220      	movs	r2, #32
 800285e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e00f      	b.n	800288e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	4013      	ands	r3, r2
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	429a      	cmp	r2, r3
 800287c:	bf0c      	ite	eq
 800287e:	2301      	moveq	r3, #1
 8002880:	2300      	movne	r3, #0
 8002882:	b2db      	uxtb	r3, r3
 8002884:	461a      	mov	r2, r3
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	429a      	cmp	r2, r3
 800288a:	d09f      	beq.n	80027cc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3740      	adds	r7, #64	; 0x40
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
	...

08002898 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800289c:	b0c0      	sub	sp, #256	; 0x100
 800289e:	af00      	add	r7, sp, #0
 80028a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80028b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028b4:	68d9      	ldr	r1, [r3, #12]
 80028b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	ea40 0301 	orr.w	r3, r0, r1
 80028c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	431a      	orrs	r2, r3
 80028d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	431a      	orrs	r2, r3
 80028d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80028e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80028f0:	f021 010c 	bic.w	r1, r1, #12
 80028f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80028fe:	430b      	orrs	r3, r1
 8002900:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800290e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002912:	6999      	ldr	r1, [r3, #24]
 8002914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	ea40 0301 	orr.w	r3, r0, r1
 800291e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	4b8f      	ldr	r3, [pc, #572]	; (8002b64 <UART_SetConfig+0x2cc>)
 8002928:	429a      	cmp	r2, r3
 800292a:	d005      	beq.n	8002938 <UART_SetConfig+0xa0>
 800292c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	4b8d      	ldr	r3, [pc, #564]	; (8002b68 <UART_SetConfig+0x2d0>)
 8002934:	429a      	cmp	r2, r3
 8002936:	d104      	bne.n	8002942 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002938:	f7ff fa1a 	bl	8001d70 <HAL_RCC_GetPCLK2Freq>
 800293c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002940:	e003      	b.n	800294a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002942:	f7ff fa01 	bl	8001d48 <HAL_RCC_GetPCLK1Freq>
 8002946:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800294a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002954:	f040 810c 	bne.w	8002b70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002958:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800295c:	2200      	movs	r2, #0
 800295e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002962:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002966:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800296a:	4622      	mov	r2, r4
 800296c:	462b      	mov	r3, r5
 800296e:	1891      	adds	r1, r2, r2
 8002970:	65b9      	str	r1, [r7, #88]	; 0x58
 8002972:	415b      	adcs	r3, r3
 8002974:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002976:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800297a:	4621      	mov	r1, r4
 800297c:	eb12 0801 	adds.w	r8, r2, r1
 8002980:	4629      	mov	r1, r5
 8002982:	eb43 0901 	adc.w	r9, r3, r1
 8002986:	f04f 0200 	mov.w	r2, #0
 800298a:	f04f 0300 	mov.w	r3, #0
 800298e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002992:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002996:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800299a:	4690      	mov	r8, r2
 800299c:	4699      	mov	r9, r3
 800299e:	4623      	mov	r3, r4
 80029a0:	eb18 0303 	adds.w	r3, r8, r3
 80029a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80029a8:	462b      	mov	r3, r5
 80029aa:	eb49 0303 	adc.w	r3, r9, r3
 80029ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80029b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80029be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80029c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80029c6:	460b      	mov	r3, r1
 80029c8:	18db      	adds	r3, r3, r3
 80029ca:	653b      	str	r3, [r7, #80]	; 0x50
 80029cc:	4613      	mov	r3, r2
 80029ce:	eb42 0303 	adc.w	r3, r2, r3
 80029d2:	657b      	str	r3, [r7, #84]	; 0x54
 80029d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80029d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80029dc:	f7fd fc50 	bl	8000280 <__aeabi_uldivmod>
 80029e0:	4602      	mov	r2, r0
 80029e2:	460b      	mov	r3, r1
 80029e4:	4b61      	ldr	r3, [pc, #388]	; (8002b6c <UART_SetConfig+0x2d4>)
 80029e6:	fba3 2302 	umull	r2, r3, r3, r2
 80029ea:	095b      	lsrs	r3, r3, #5
 80029ec:	011c      	lsls	r4, r3, #4
 80029ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029f2:	2200      	movs	r2, #0
 80029f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80029f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80029fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002a00:	4642      	mov	r2, r8
 8002a02:	464b      	mov	r3, r9
 8002a04:	1891      	adds	r1, r2, r2
 8002a06:	64b9      	str	r1, [r7, #72]	; 0x48
 8002a08:	415b      	adcs	r3, r3
 8002a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a10:	4641      	mov	r1, r8
 8002a12:	eb12 0a01 	adds.w	sl, r2, r1
 8002a16:	4649      	mov	r1, r9
 8002a18:	eb43 0b01 	adc.w	fp, r3, r1
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	f04f 0300 	mov.w	r3, #0
 8002a24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a30:	4692      	mov	sl, r2
 8002a32:	469b      	mov	fp, r3
 8002a34:	4643      	mov	r3, r8
 8002a36:	eb1a 0303 	adds.w	r3, sl, r3
 8002a3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a3e:	464b      	mov	r3, r9
 8002a40:	eb4b 0303 	adc.w	r3, fp, r3
 8002a44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a54:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002a58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	18db      	adds	r3, r3, r3
 8002a60:	643b      	str	r3, [r7, #64]	; 0x40
 8002a62:	4613      	mov	r3, r2
 8002a64:	eb42 0303 	adc.w	r3, r2, r3
 8002a68:	647b      	str	r3, [r7, #68]	; 0x44
 8002a6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002a72:	f7fd fc05 	bl	8000280 <__aeabi_uldivmod>
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4611      	mov	r1, r2
 8002a7c:	4b3b      	ldr	r3, [pc, #236]	; (8002b6c <UART_SetConfig+0x2d4>)
 8002a7e:	fba3 2301 	umull	r2, r3, r3, r1
 8002a82:	095b      	lsrs	r3, r3, #5
 8002a84:	2264      	movs	r2, #100	; 0x64
 8002a86:	fb02 f303 	mul.w	r3, r2, r3
 8002a8a:	1acb      	subs	r3, r1, r3
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002a92:	4b36      	ldr	r3, [pc, #216]	; (8002b6c <UART_SetConfig+0x2d4>)
 8002a94:	fba3 2302 	umull	r2, r3, r3, r2
 8002a98:	095b      	lsrs	r3, r3, #5
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002aa0:	441c      	add	r4, r3
 8002aa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002aac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002ab0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002ab4:	4642      	mov	r2, r8
 8002ab6:	464b      	mov	r3, r9
 8002ab8:	1891      	adds	r1, r2, r2
 8002aba:	63b9      	str	r1, [r7, #56]	; 0x38
 8002abc:	415b      	adcs	r3, r3
 8002abe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ac0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ac4:	4641      	mov	r1, r8
 8002ac6:	1851      	adds	r1, r2, r1
 8002ac8:	6339      	str	r1, [r7, #48]	; 0x30
 8002aca:	4649      	mov	r1, r9
 8002acc:	414b      	adcs	r3, r1
 8002ace:	637b      	str	r3, [r7, #52]	; 0x34
 8002ad0:	f04f 0200 	mov.w	r2, #0
 8002ad4:	f04f 0300 	mov.w	r3, #0
 8002ad8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002adc:	4659      	mov	r1, fp
 8002ade:	00cb      	lsls	r3, r1, #3
 8002ae0:	4651      	mov	r1, sl
 8002ae2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ae6:	4651      	mov	r1, sl
 8002ae8:	00ca      	lsls	r2, r1, #3
 8002aea:	4610      	mov	r0, r2
 8002aec:	4619      	mov	r1, r3
 8002aee:	4603      	mov	r3, r0
 8002af0:	4642      	mov	r2, r8
 8002af2:	189b      	adds	r3, r3, r2
 8002af4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002af8:	464b      	mov	r3, r9
 8002afa:	460a      	mov	r2, r1
 8002afc:	eb42 0303 	adc.w	r3, r2, r3
 8002b00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002b10:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002b14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002b18:	460b      	mov	r3, r1
 8002b1a:	18db      	adds	r3, r3, r3
 8002b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b1e:	4613      	mov	r3, r2
 8002b20:	eb42 0303 	adc.w	r3, r2, r3
 8002b24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002b2e:	f7fd fba7 	bl	8000280 <__aeabi_uldivmod>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	4b0d      	ldr	r3, [pc, #52]	; (8002b6c <UART_SetConfig+0x2d4>)
 8002b38:	fba3 1302 	umull	r1, r3, r3, r2
 8002b3c:	095b      	lsrs	r3, r3, #5
 8002b3e:	2164      	movs	r1, #100	; 0x64
 8002b40:	fb01 f303 	mul.w	r3, r1, r3
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	3332      	adds	r3, #50	; 0x32
 8002b4a:	4a08      	ldr	r2, [pc, #32]	; (8002b6c <UART_SetConfig+0x2d4>)
 8002b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b50:	095b      	lsrs	r3, r3, #5
 8002b52:	f003 0207 	and.w	r2, r3, #7
 8002b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4422      	add	r2, r4
 8002b5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b60:	e105      	b.n	8002d6e <UART_SetConfig+0x4d6>
 8002b62:	bf00      	nop
 8002b64:	40011000 	.word	0x40011000
 8002b68:	40011400 	.word	0x40011400
 8002b6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b74:	2200      	movs	r2, #0
 8002b76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002b7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002b7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002b82:	4642      	mov	r2, r8
 8002b84:	464b      	mov	r3, r9
 8002b86:	1891      	adds	r1, r2, r2
 8002b88:	6239      	str	r1, [r7, #32]
 8002b8a:	415b      	adcs	r3, r3
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b92:	4641      	mov	r1, r8
 8002b94:	1854      	adds	r4, r2, r1
 8002b96:	4649      	mov	r1, r9
 8002b98:	eb43 0501 	adc.w	r5, r3, r1
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	f04f 0300 	mov.w	r3, #0
 8002ba4:	00eb      	lsls	r3, r5, #3
 8002ba6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002baa:	00e2      	lsls	r2, r4, #3
 8002bac:	4614      	mov	r4, r2
 8002bae:	461d      	mov	r5, r3
 8002bb0:	4643      	mov	r3, r8
 8002bb2:	18e3      	adds	r3, r4, r3
 8002bb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002bb8:	464b      	mov	r3, r9
 8002bba:	eb45 0303 	adc.w	r3, r5, r3
 8002bbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002bce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	f04f 0300 	mov.w	r3, #0
 8002bda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002bde:	4629      	mov	r1, r5
 8002be0:	008b      	lsls	r3, r1, #2
 8002be2:	4621      	mov	r1, r4
 8002be4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002be8:	4621      	mov	r1, r4
 8002bea:	008a      	lsls	r2, r1, #2
 8002bec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002bf0:	f7fd fb46 	bl	8000280 <__aeabi_uldivmod>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	4b60      	ldr	r3, [pc, #384]	; (8002d7c <UART_SetConfig+0x4e4>)
 8002bfa:	fba3 2302 	umull	r2, r3, r3, r2
 8002bfe:	095b      	lsrs	r3, r3, #5
 8002c00:	011c      	lsls	r4, r3, #4
 8002c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c06:	2200      	movs	r2, #0
 8002c08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002c10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002c14:	4642      	mov	r2, r8
 8002c16:	464b      	mov	r3, r9
 8002c18:	1891      	adds	r1, r2, r2
 8002c1a:	61b9      	str	r1, [r7, #24]
 8002c1c:	415b      	adcs	r3, r3
 8002c1e:	61fb      	str	r3, [r7, #28]
 8002c20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c24:	4641      	mov	r1, r8
 8002c26:	1851      	adds	r1, r2, r1
 8002c28:	6139      	str	r1, [r7, #16]
 8002c2a:	4649      	mov	r1, r9
 8002c2c:	414b      	adcs	r3, r1
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	f04f 0300 	mov.w	r3, #0
 8002c38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c3c:	4659      	mov	r1, fp
 8002c3e:	00cb      	lsls	r3, r1, #3
 8002c40:	4651      	mov	r1, sl
 8002c42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c46:	4651      	mov	r1, sl
 8002c48:	00ca      	lsls	r2, r1, #3
 8002c4a:	4610      	mov	r0, r2
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4603      	mov	r3, r0
 8002c50:	4642      	mov	r2, r8
 8002c52:	189b      	adds	r3, r3, r2
 8002c54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c58:	464b      	mov	r3, r9
 8002c5a:	460a      	mov	r2, r1
 8002c5c:	eb42 0303 	adc.w	r3, r2, r3
 8002c60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	f04f 0300 	mov.w	r3, #0
 8002c78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002c7c:	4649      	mov	r1, r9
 8002c7e:	008b      	lsls	r3, r1, #2
 8002c80:	4641      	mov	r1, r8
 8002c82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c86:	4641      	mov	r1, r8
 8002c88:	008a      	lsls	r2, r1, #2
 8002c8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002c8e:	f7fd faf7 	bl	8000280 <__aeabi_uldivmod>
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	4b39      	ldr	r3, [pc, #228]	; (8002d7c <UART_SetConfig+0x4e4>)
 8002c98:	fba3 1302 	umull	r1, r3, r3, r2
 8002c9c:	095b      	lsrs	r3, r3, #5
 8002c9e:	2164      	movs	r1, #100	; 0x64
 8002ca0:	fb01 f303 	mul.w	r3, r1, r3
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	3332      	adds	r3, #50	; 0x32
 8002caa:	4a34      	ldr	r2, [pc, #208]	; (8002d7c <UART_SetConfig+0x4e4>)
 8002cac:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb0:	095b      	lsrs	r3, r3, #5
 8002cb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cb6:	441c      	add	r4, r3
 8002cb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	673b      	str	r3, [r7, #112]	; 0x70
 8002cc0:	677a      	str	r2, [r7, #116]	; 0x74
 8002cc2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002cc6:	4642      	mov	r2, r8
 8002cc8:	464b      	mov	r3, r9
 8002cca:	1891      	adds	r1, r2, r2
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	415b      	adcs	r3, r3
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cd6:	4641      	mov	r1, r8
 8002cd8:	1851      	adds	r1, r2, r1
 8002cda:	6039      	str	r1, [r7, #0]
 8002cdc:	4649      	mov	r1, r9
 8002cde:	414b      	adcs	r3, r1
 8002ce0:	607b      	str	r3, [r7, #4]
 8002ce2:	f04f 0200 	mov.w	r2, #0
 8002ce6:	f04f 0300 	mov.w	r3, #0
 8002cea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002cee:	4659      	mov	r1, fp
 8002cf0:	00cb      	lsls	r3, r1, #3
 8002cf2:	4651      	mov	r1, sl
 8002cf4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cf8:	4651      	mov	r1, sl
 8002cfa:	00ca      	lsls	r2, r1, #3
 8002cfc:	4610      	mov	r0, r2
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4603      	mov	r3, r0
 8002d02:	4642      	mov	r2, r8
 8002d04:	189b      	adds	r3, r3, r2
 8002d06:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d08:	464b      	mov	r3, r9
 8002d0a:	460a      	mov	r2, r1
 8002d0c:	eb42 0303 	adc.w	r3, r2, r3
 8002d10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	663b      	str	r3, [r7, #96]	; 0x60
 8002d1c:	667a      	str	r2, [r7, #100]	; 0x64
 8002d1e:	f04f 0200 	mov.w	r2, #0
 8002d22:	f04f 0300 	mov.w	r3, #0
 8002d26:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002d2a:	4649      	mov	r1, r9
 8002d2c:	008b      	lsls	r3, r1, #2
 8002d2e:	4641      	mov	r1, r8
 8002d30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d34:	4641      	mov	r1, r8
 8002d36:	008a      	lsls	r2, r1, #2
 8002d38:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002d3c:	f7fd faa0 	bl	8000280 <__aeabi_uldivmod>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	4b0d      	ldr	r3, [pc, #52]	; (8002d7c <UART_SetConfig+0x4e4>)
 8002d46:	fba3 1302 	umull	r1, r3, r3, r2
 8002d4a:	095b      	lsrs	r3, r3, #5
 8002d4c:	2164      	movs	r1, #100	; 0x64
 8002d4e:	fb01 f303 	mul.w	r3, r1, r3
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	3332      	adds	r3, #50	; 0x32
 8002d58:	4a08      	ldr	r2, [pc, #32]	; (8002d7c <UART_SetConfig+0x4e4>)
 8002d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5e:	095b      	lsrs	r3, r3, #5
 8002d60:	f003 020f 	and.w	r2, r3, #15
 8002d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4422      	add	r2, r4
 8002d6c:	609a      	str	r2, [r3, #8]
}
 8002d6e:	bf00      	nop
 8002d70:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002d74:	46bd      	mov	sp, r7
 8002d76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d7a:	bf00      	nop
 8002d7c:	51eb851f 	.word	0x51eb851f

08002d80 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002d84:	4904      	ldr	r1, [pc, #16]	; (8002d98 <MX_FATFS_Init+0x18>)
 8002d86:	4805      	ldr	r0, [pc, #20]	; (8002d9c <MX_FATFS_Init+0x1c>)
 8002d88:	f003 f924 	bl	8005fd4 <FATFS_LinkDriver>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	461a      	mov	r2, r3
 8002d90:	4b03      	ldr	r3, [pc, #12]	; (8002da0 <MX_FATFS_Init+0x20>)
 8002d92:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002d94:	bf00      	nop
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	2000014c 	.word	0x2000014c
 8002d9c:	2000000c 	.word	0x2000000c
 8002da0:	20000148 	.word	0x20000148

08002da4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002da8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8002dbe:	79fb      	ldrb	r3, [r7, #7]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f000 f9d7 	bl	8003174 <USER_SPI_initialize>
 8002dc6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8002dda:	79fb      	ldrb	r3, [r7, #7]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 fab5 	bl	800334c <USER_SPI_status>
 8002de2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60b9      	str	r1, [r7, #8]
 8002df4:	607a      	str	r2, [r7, #4]
 8002df6:	603b      	str	r3, [r7, #0]
 8002df8:	4603      	mov	r3, r0
 8002dfa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8002dfc:	7bf8      	ldrb	r0, [r7, #15]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	68b9      	ldr	r1, [r7, #8]
 8002e04:	f000 fab8 	bl	8003378 <USER_SPI_read>
 8002e08:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b084      	sub	sp, #16
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
 8002e1c:	603b      	str	r3, [r7, #0]
 8002e1e:	4603      	mov	r3, r0
 8002e20:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 8002e22:	7bf8      	ldrb	r0, [r7, #15]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	68b9      	ldr	r1, [r7, #8]
 8002e2a:	f000 fb0b 	bl	8003444 <USER_SPI_write>
 8002e2e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4603      	mov	r3, r0
 8002e40:	603a      	str	r2, [r7, #0]
 8002e42:	71fb      	strb	r3, [r7, #7]
 8002e44:	460b      	mov	r3, r1
 8002e46:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8002e48:	79b9      	ldrb	r1, [r7, #6]
 8002e4a:	79fb      	ldrb	r3, [r7, #7]
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 fb74 	bl	800353c <USER_SPI_ioctl>
 8002e54:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
	...

08002e60 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8002e68:	f7fe f84a 	bl	8000f00 <HAL_GetTick>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	4a04      	ldr	r2, [pc, #16]	; (8002e80 <SPI_Timer_On+0x20>)
 8002e70:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8002e72:	4a04      	ldr	r2, [pc, #16]	; (8002e84 <SPI_Timer_On+0x24>)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6013      	str	r3, [r2, #0]
}
 8002e78:	bf00      	nop
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	20000154 	.word	0x20000154
 8002e84:	20000158 	.word	0x20000158

08002e88 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8002e8c:	f7fe f838 	bl	8000f00 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	4b06      	ldr	r3, [pc, #24]	; (8002eac <SPI_Timer_Status+0x24>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	1ad2      	subs	r2, r2, r3
 8002e98:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <SPI_Timer_Status+0x28>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	bf34      	ite	cc
 8002ea0:	2301      	movcc	r3, #1
 8002ea2:	2300      	movcs	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	20000154 	.word	0x20000154
 8002eb0:	20000158 	.word	0x20000158

08002eb4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af02      	add	r7, sp, #8
 8002eba:	4603      	mov	r3, r0
 8002ebc:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8002ebe:	f107 020f 	add.w	r2, r7, #15
 8002ec2:	1df9      	adds	r1, r7, #7
 8002ec4:	2332      	movs	r3, #50	; 0x32
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	2301      	movs	r3, #1
 8002eca:	4804      	ldr	r0, [pc, #16]	; (8002edc <xchg_spi+0x28>)
 8002ecc:	f7ff f929 	bl	8002122 <HAL_SPI_TransmitReceive>
    return rxDat;
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	200000a4 	.word	0x200000a4

08002ee0 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8002ee0:	b590      	push	{r4, r7, lr}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8002eea:	2300      	movs	r3, #0
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	e00a      	b.n	8002f06 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	18d4      	adds	r4, r2, r3
 8002ef6:	20ff      	movs	r0, #255	; 0xff
 8002ef8:	f7ff ffdc 	bl	8002eb4 <xchg_spi>
 8002efc:	4603      	mov	r3, r0
 8002efe:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	3301      	adds	r3, #1
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d3f0      	bcc.n	8002ef0 <rcvr_spi_multi+0x10>
	}
}
 8002f0e:	bf00      	nop
 8002f10:	bf00      	nop
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd90      	pop	{r4, r7, pc}

08002f18 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	f04f 33ff 	mov.w	r3, #4294967295
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	4803      	ldr	r0, [pc, #12]	; (8002f3c <xmit_spi_multi+0x24>)
 8002f2e:	f7fe ffbc 	bl	8001eaa <HAL_SPI_Transmit>
}
 8002f32:	bf00      	nop
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	200000a4 	.word	0x200000a4

08002f40 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8002f48:	f7fd ffda 	bl	8000f00 <HAL_GetTick>
 8002f4c:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8002f52:	20ff      	movs	r0, #255	; 0xff
 8002f54:	f7ff ffae 	bl	8002eb4 <xchg_spi>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
 8002f5e:	2bff      	cmp	r3, #255	; 0xff
 8002f60:	d007      	beq.n	8002f72 <wait_ready+0x32>
 8002f62:	f7fd ffcd 	bl	8000f00 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d8ef      	bhi.n	8002f52 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
 8002f74:	2bff      	cmp	r3, #255	; 0xff
 8002f76:	bf0c      	ite	eq
 8002f78:	2301      	moveq	r3, #1
 8002f7a:	2300      	movne	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f92:	4804      	ldr	r0, [pc, #16]	; (8002fa4 <despiselect+0x1c>)
 8002f94:	f7fe fa4e 	bl	8001434 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8002f98:	20ff      	movs	r0, #255	; 0xff
 8002f9a:	f7ff ff8b 	bl	8002eb4 <xchg_spi>

}
 8002f9e:	bf00      	nop
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40020400 	.word	0x40020400

08002fa8 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8002fac:	2200      	movs	r2, #0
 8002fae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002fb2:	480a      	ldr	r0, [pc, #40]	; (8002fdc <spiselect+0x34>)
 8002fb4:	f7fe fa3e 	bl	8001434 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8002fb8:	20ff      	movs	r0, #255	; 0xff
 8002fba:	f7ff ff7b 	bl	8002eb4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8002fbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002fc2:	f7ff ffbd 	bl	8002f40 <wait_ready>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <spiselect+0x28>
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e002      	b.n	8002fd6 <spiselect+0x2e>

	despiselect();
 8002fd0:	f7ff ffda 	bl	8002f88 <despiselect>
	return 0;	/* Timeout */
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40020400 	.word	0x40020400

08002fe0 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8002fea:	20c8      	movs	r0, #200	; 0xc8
 8002fec:	f7ff ff38 	bl	8002e60 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8002ff0:	20ff      	movs	r0, #255	; 0xff
 8002ff2:	f7ff ff5f 	bl	8002eb4 <xchg_spi>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8002ffa:	7bfb      	ldrb	r3, [r7, #15]
 8002ffc:	2bff      	cmp	r3, #255	; 0xff
 8002ffe:	d104      	bne.n	800300a <rcvr_datablock+0x2a>
 8003000:	f7ff ff42 	bl	8002e88 <SPI_Timer_Status>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f2      	bne.n	8002ff0 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800300a:	7bfb      	ldrb	r3, [r7, #15]
 800300c:	2bfe      	cmp	r3, #254	; 0xfe
 800300e:	d001      	beq.n	8003014 <rcvr_datablock+0x34>
 8003010:	2300      	movs	r3, #0
 8003012:	e00a      	b.n	800302a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8003014:	6839      	ldr	r1, [r7, #0]
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7ff ff62 	bl	8002ee0 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800301c:	20ff      	movs	r0, #255	; 0xff
 800301e:	f7ff ff49 	bl	8002eb4 <xchg_spi>
 8003022:	20ff      	movs	r0, #255	; 0xff
 8003024:	f7ff ff46 	bl	8002eb4 <xchg_spi>

	return 1;						/* Function succeeded */
 8003028:	2301      	movs	r3, #1
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b084      	sub	sp, #16
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	460b      	mov	r3, r1
 800303c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800303e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003042:	f7ff ff7d 	bl	8002f40 <wait_ready>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <xmit_datablock+0x1e>
 800304c:	2300      	movs	r3, #0
 800304e:	e01e      	b.n	800308e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8003050:	78fb      	ldrb	r3, [r7, #3]
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff ff2e 	bl	8002eb4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003058:	78fb      	ldrb	r3, [r7, #3]
 800305a:	2bfd      	cmp	r3, #253	; 0xfd
 800305c:	d016      	beq.n	800308c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800305e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7ff ff58 	bl	8002f18 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8003068:	20ff      	movs	r0, #255	; 0xff
 800306a:	f7ff ff23 	bl	8002eb4 <xchg_spi>
 800306e:	20ff      	movs	r0, #255	; 0xff
 8003070:	f7ff ff20 	bl	8002eb4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8003074:	20ff      	movs	r0, #255	; 0xff
 8003076:	f7ff ff1d 	bl	8002eb4 <xchg_spi>
 800307a:	4603      	mov	r3, r0
 800307c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800307e:	7bfb      	ldrb	r3, [r7, #15]
 8003080:	f003 031f 	and.w	r3, r3, #31
 8003084:	2b05      	cmp	r3, #5
 8003086:	d001      	beq.n	800308c <xmit_datablock+0x5a>
 8003088:	2300      	movs	r3, #0
 800308a:	e000      	b.n	800308e <xmit_datablock+0x5c>
	}
	return 1;
 800308c:	2301      	movs	r3, #1
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b084      	sub	sp, #16
 800309a:	af00      	add	r7, sp, #0
 800309c:	4603      	mov	r3, r0
 800309e:	6039      	str	r1, [r7, #0]
 80030a0:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80030a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	da0e      	bge.n	80030c8 <send_cmd+0x32>
		cmd &= 0x7F;
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030b0:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80030b2:	2100      	movs	r1, #0
 80030b4:	2037      	movs	r0, #55	; 0x37
 80030b6:	f7ff ffee 	bl	8003096 <send_cmd>
 80030ba:	4603      	mov	r3, r0
 80030bc:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80030be:	7bbb      	ldrb	r3, [r7, #14]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d901      	bls.n	80030c8 <send_cmd+0x32>
 80030c4:	7bbb      	ldrb	r3, [r7, #14]
 80030c6:	e051      	b.n	800316c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80030c8:	79fb      	ldrb	r3, [r7, #7]
 80030ca:	2b0c      	cmp	r3, #12
 80030cc:	d008      	beq.n	80030e0 <send_cmd+0x4a>
		despiselect();
 80030ce:	f7ff ff5b 	bl	8002f88 <despiselect>
		if (!spiselect()) return 0xFF;
 80030d2:	f7ff ff69 	bl	8002fa8 <spiselect>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <send_cmd+0x4a>
 80030dc:	23ff      	movs	r3, #255	; 0xff
 80030de:	e045      	b.n	800316c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80030e0:	79fb      	ldrb	r3, [r7, #7]
 80030e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff fee3 	bl	8002eb4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	0e1b      	lsrs	r3, r3, #24
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff fedd 	bl	8002eb4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	0c1b      	lsrs	r3, r3, #16
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff fed7 	bl	8002eb4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	0a1b      	lsrs	r3, r3, #8
 800310a:	b2db      	uxtb	r3, r3
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff fed1 	bl	8002eb4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	b2db      	uxtb	r3, r3
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff fecc 	bl	8002eb4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800311c:	2301      	movs	r3, #1
 800311e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8003120:	79fb      	ldrb	r3, [r7, #7]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <send_cmd+0x94>
 8003126:	2395      	movs	r3, #149	; 0x95
 8003128:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800312a:	79fb      	ldrb	r3, [r7, #7]
 800312c:	2b08      	cmp	r3, #8
 800312e:	d101      	bne.n	8003134 <send_cmd+0x9e>
 8003130:	2387      	movs	r3, #135	; 0x87
 8003132:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8003134:	7bfb      	ldrb	r3, [r7, #15]
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff febc 	bl	8002eb4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800313c:	79fb      	ldrb	r3, [r7, #7]
 800313e:	2b0c      	cmp	r3, #12
 8003140:	d102      	bne.n	8003148 <send_cmd+0xb2>
 8003142:	20ff      	movs	r0, #255	; 0xff
 8003144:	f7ff feb6 	bl	8002eb4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8003148:	230a      	movs	r3, #10
 800314a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800314c:	20ff      	movs	r0, #255	; 0xff
 800314e:	f7ff feb1 	bl	8002eb4 <xchg_spi>
 8003152:	4603      	mov	r3, r0
 8003154:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8003156:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800315a:	2b00      	cmp	r3, #0
 800315c:	da05      	bge.n	800316a <send_cmd+0xd4>
 800315e:	7bfb      	ldrb	r3, [r7, #15]
 8003160:	3b01      	subs	r3, #1
 8003162:	73fb      	strb	r3, [r7, #15]
 8003164:	7bfb      	ldrb	r3, [r7, #15]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <send_cmd+0xb6>

	return res;							/* Return received response */
 800316a:	7bbb      	ldrb	r3, [r7, #14]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003174:	b590      	push	{r4, r7, lr}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	4603      	mov	r3, r0
 800317c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800317e:	79fb      	ldrb	r3, [r7, #7]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <USER_SPI_initialize+0x14>
 8003184:	2301      	movs	r3, #1
 8003186:	e0d6      	b.n	8003336 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8003188:	4b6d      	ldr	r3, [pc, #436]	; (8003340 <USER_SPI_initialize+0x1cc>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	b2db      	uxtb	r3, r3
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <USER_SPI_initialize+0x2a>
 8003196:	4b6a      	ldr	r3, [pc, #424]	; (8003340 <USER_SPI_initialize+0x1cc>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	b2db      	uxtb	r3, r3
 800319c:	e0cb      	b.n	8003336 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800319e:	4b69      	ldr	r3, [pc, #420]	; (8003344 <USER_SPI_initialize+0x1d0>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80031a8:	4b66      	ldr	r3, [pc, #408]	; (8003344 <USER_SPI_initialize+0x1d0>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80031b0:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80031b2:	230a      	movs	r3, #10
 80031b4:	73fb      	strb	r3, [r7, #15]
 80031b6:	e005      	b.n	80031c4 <USER_SPI_initialize+0x50>
 80031b8:	20ff      	movs	r0, #255	; 0xff
 80031ba:	f7ff fe7b 	bl	8002eb4 <xchg_spi>
 80031be:	7bfb      	ldrb	r3, [r7, #15]
 80031c0:	3b01      	subs	r3, #1
 80031c2:	73fb      	strb	r3, [r7, #15]
 80031c4:	7bfb      	ldrb	r3, [r7, #15]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f6      	bne.n	80031b8 <USER_SPI_initialize+0x44>

	ty = 0;
 80031ca:	2300      	movs	r3, #0
 80031cc:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80031ce:	2100      	movs	r1, #0
 80031d0:	2000      	movs	r0, #0
 80031d2:	f7ff ff60 	bl	8003096 <send_cmd>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b01      	cmp	r3, #1
 80031da:	f040 808b 	bne.w	80032f4 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80031de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80031e2:	f7ff fe3d 	bl	8002e60 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80031e6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80031ea:	2008      	movs	r0, #8
 80031ec:	f7ff ff53 	bl	8003096 <send_cmd>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d151      	bne.n	800329a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80031f6:	2300      	movs	r3, #0
 80031f8:	73fb      	strb	r3, [r7, #15]
 80031fa:	e00d      	b.n	8003218 <USER_SPI_initialize+0xa4>
 80031fc:	7bfc      	ldrb	r4, [r7, #15]
 80031fe:	20ff      	movs	r0, #255	; 0xff
 8003200:	f7ff fe58 	bl	8002eb4 <xchg_spi>
 8003204:	4603      	mov	r3, r0
 8003206:	461a      	mov	r2, r3
 8003208:	f104 0310 	add.w	r3, r4, #16
 800320c:	443b      	add	r3, r7
 800320e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003212:	7bfb      	ldrb	r3, [r7, #15]
 8003214:	3301      	adds	r3, #1
 8003216:	73fb      	strb	r3, [r7, #15]
 8003218:	7bfb      	ldrb	r3, [r7, #15]
 800321a:	2b03      	cmp	r3, #3
 800321c:	d9ee      	bls.n	80031fc <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800321e:	7abb      	ldrb	r3, [r7, #10]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d167      	bne.n	80032f4 <USER_SPI_initialize+0x180>
 8003224:	7afb      	ldrb	r3, [r7, #11]
 8003226:	2baa      	cmp	r3, #170	; 0xaa
 8003228:	d164      	bne.n	80032f4 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800322a:	bf00      	nop
 800322c:	f7ff fe2c 	bl	8002e88 <SPI_Timer_Status>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d007      	beq.n	8003246 <USER_SPI_initialize+0xd2>
 8003236:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800323a:	20a9      	movs	r0, #169	; 0xa9
 800323c:	f7ff ff2b 	bl	8003096 <send_cmd>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f2      	bne.n	800322c <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8003246:	f7ff fe1f 	bl	8002e88 <SPI_Timer_Status>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d051      	beq.n	80032f4 <USER_SPI_initialize+0x180>
 8003250:	2100      	movs	r1, #0
 8003252:	203a      	movs	r0, #58	; 0x3a
 8003254:	f7ff ff1f 	bl	8003096 <send_cmd>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d14a      	bne.n	80032f4 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800325e:	2300      	movs	r3, #0
 8003260:	73fb      	strb	r3, [r7, #15]
 8003262:	e00d      	b.n	8003280 <USER_SPI_initialize+0x10c>
 8003264:	7bfc      	ldrb	r4, [r7, #15]
 8003266:	20ff      	movs	r0, #255	; 0xff
 8003268:	f7ff fe24 	bl	8002eb4 <xchg_spi>
 800326c:	4603      	mov	r3, r0
 800326e:	461a      	mov	r2, r3
 8003270:	f104 0310 	add.w	r3, r4, #16
 8003274:	443b      	add	r3, r7
 8003276:	f803 2c08 	strb.w	r2, [r3, #-8]
 800327a:	7bfb      	ldrb	r3, [r7, #15]
 800327c:	3301      	adds	r3, #1
 800327e:	73fb      	strb	r3, [r7, #15]
 8003280:	7bfb      	ldrb	r3, [r7, #15]
 8003282:	2b03      	cmp	r3, #3
 8003284:	d9ee      	bls.n	8003264 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8003286:	7a3b      	ldrb	r3, [r7, #8]
 8003288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <USER_SPI_initialize+0x120>
 8003290:	230c      	movs	r3, #12
 8003292:	e000      	b.n	8003296 <USER_SPI_initialize+0x122>
 8003294:	2304      	movs	r3, #4
 8003296:	737b      	strb	r3, [r7, #13]
 8003298:	e02c      	b.n	80032f4 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800329a:	2100      	movs	r1, #0
 800329c:	20a9      	movs	r0, #169	; 0xa9
 800329e:	f7ff fefa 	bl	8003096 <send_cmd>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d804      	bhi.n	80032b2 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80032a8:	2302      	movs	r3, #2
 80032aa:	737b      	strb	r3, [r7, #13]
 80032ac:	23a9      	movs	r3, #169	; 0xa9
 80032ae:	73bb      	strb	r3, [r7, #14]
 80032b0:	e003      	b.n	80032ba <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80032b2:	2301      	movs	r3, #1
 80032b4:	737b      	strb	r3, [r7, #13]
 80032b6:	2301      	movs	r3, #1
 80032b8:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80032ba:	bf00      	nop
 80032bc:	f7ff fde4 	bl	8002e88 <SPI_Timer_Status>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d007      	beq.n	80032d6 <USER_SPI_initialize+0x162>
 80032c6:	7bbb      	ldrb	r3, [r7, #14]
 80032c8:	2100      	movs	r1, #0
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff fee3 	bl	8003096 <send_cmd>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1f2      	bne.n	80032bc <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80032d6:	f7ff fdd7 	bl	8002e88 <SPI_Timer_Status>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d007      	beq.n	80032f0 <USER_SPI_initialize+0x17c>
 80032e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032e4:	2010      	movs	r0, #16
 80032e6:	f7ff fed6 	bl	8003096 <send_cmd>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <USER_SPI_initialize+0x180>
				ty = 0;
 80032f0:	2300      	movs	r3, #0
 80032f2:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80032f4:	4a14      	ldr	r2, [pc, #80]	; (8003348 <USER_SPI_initialize+0x1d4>)
 80032f6:	7b7b      	ldrb	r3, [r7, #13]
 80032f8:	7013      	strb	r3, [r2, #0]
	despiselect();
 80032fa:	f7ff fe45 	bl	8002f88 <despiselect>

	if (ty) {			/* OK */
 80032fe:	7b7b      	ldrb	r3, [r7, #13]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d012      	beq.n	800332a <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8003304:	4b0f      	ldr	r3, [pc, #60]	; (8003344 <USER_SPI_initialize+0x1d0>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800330e:	4b0d      	ldr	r3, [pc, #52]	; (8003344 <USER_SPI_initialize+0x1d0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0210 	orr.w	r2, r2, #16
 8003316:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003318:	4b09      	ldr	r3, [pc, #36]	; (8003340 <USER_SPI_initialize+0x1cc>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	b2db      	uxtb	r3, r3
 800331e:	f023 0301 	bic.w	r3, r3, #1
 8003322:	b2da      	uxtb	r2, r3
 8003324:	4b06      	ldr	r3, [pc, #24]	; (8003340 <USER_SPI_initialize+0x1cc>)
 8003326:	701a      	strb	r2, [r3, #0]
 8003328:	e002      	b.n	8003330 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800332a:	4b05      	ldr	r3, [pc, #20]	; (8003340 <USER_SPI_initialize+0x1cc>)
 800332c:	2201      	movs	r2, #1
 800332e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8003330:	4b03      	ldr	r3, [pc, #12]	; (8003340 <USER_SPI_initialize+0x1cc>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	b2db      	uxtb	r3, r3
}
 8003336:	4618      	mov	r0, r3
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	bd90      	pop	{r4, r7, pc}
 800333e:	bf00      	nop
 8003340:	20000020 	.word	0x20000020
 8003344:	200000a4 	.word	0x200000a4
 8003348:	20000150 	.word	0x20000150

0800334c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	4603      	mov	r3, r0
 8003354:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8003356:	79fb      	ldrb	r3, [r7, #7]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <USER_SPI_status+0x14>
 800335c:	2301      	movs	r3, #1
 800335e:	e002      	b.n	8003366 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8003360:	4b04      	ldr	r3, [pc, #16]	; (8003374 <USER_SPI_status+0x28>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	b2db      	uxtb	r3, r3
}
 8003366:	4618      	mov	r0, r3
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	20000020 	.word	0x20000020

08003378 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	60b9      	str	r1, [r7, #8]
 8003380:	607a      	str	r2, [r7, #4]
 8003382:	603b      	str	r3, [r7, #0]
 8003384:	4603      	mov	r3, r0
 8003386:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003388:	7bfb      	ldrb	r3, [r7, #15]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d102      	bne.n	8003394 <USER_SPI_read+0x1c>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <USER_SPI_read+0x20>
 8003394:	2304      	movs	r3, #4
 8003396:	e04d      	b.n	8003434 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003398:	4b28      	ldr	r3, [pc, #160]	; (800343c <USER_SPI_read+0xc4>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	b2db      	uxtb	r3, r3
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <USER_SPI_read+0x32>
 80033a6:	2303      	movs	r3, #3
 80033a8:	e044      	b.n	8003434 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80033aa:	4b25      	ldr	r3, [pc, #148]	; (8003440 <USER_SPI_read+0xc8>)
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	f003 0308 	and.w	r3, r3, #8
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d102      	bne.n	80033bc <USER_SPI_read+0x44>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	025b      	lsls	r3, r3, #9
 80033ba:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d111      	bne.n	80033e6 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	2011      	movs	r0, #17
 80033c6:	f7ff fe66 	bl	8003096 <send_cmd>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d129      	bne.n	8003424 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80033d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033d4:	68b8      	ldr	r0, [r7, #8]
 80033d6:	f7ff fe03 	bl	8002fe0 <rcvr_datablock>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d021      	beq.n	8003424 <USER_SPI_read+0xac>
			count = 0;
 80033e0:	2300      	movs	r3, #0
 80033e2:	603b      	str	r3, [r7, #0]
 80033e4:	e01e      	b.n	8003424 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80033e6:	6879      	ldr	r1, [r7, #4]
 80033e8:	2012      	movs	r0, #18
 80033ea:	f7ff fe54 	bl	8003096 <send_cmd>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d117      	bne.n	8003424 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80033f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033f8:	68b8      	ldr	r0, [r7, #8]
 80033fa:	f7ff fdf1 	bl	8002fe0 <rcvr_datablock>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00a      	beq.n	800341a <USER_SPI_read+0xa2>
				buff += 512;
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800340a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	3b01      	subs	r3, #1
 8003410:	603b      	str	r3, [r7, #0]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1ed      	bne.n	80033f4 <USER_SPI_read+0x7c>
 8003418:	e000      	b.n	800341c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800341a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800341c:	2100      	movs	r1, #0
 800341e:	200c      	movs	r0, #12
 8003420:	f7ff fe39 	bl	8003096 <send_cmd>
		}
	}
	despiselect();
 8003424:	f7ff fdb0 	bl	8002f88 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	bf14      	ite	ne
 800342e:	2301      	movne	r3, #1
 8003430:	2300      	moveq	r3, #0
 8003432:	b2db      	uxtb	r3, r3
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	20000020 	.word	0x20000020
 8003440:	20000150 	.word	0x20000150

08003444 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	60b9      	str	r1, [r7, #8]
 800344c:	607a      	str	r2, [r7, #4]
 800344e:	603b      	str	r3, [r7, #0]
 8003450:	4603      	mov	r3, r0
 8003452:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003454:	7bfb      	ldrb	r3, [r7, #15]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d102      	bne.n	8003460 <USER_SPI_write+0x1c>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <USER_SPI_write+0x20>
 8003460:	2304      	movs	r3, #4
 8003462:	e063      	b.n	800352c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8003464:	4b33      	ldr	r3, [pc, #204]	; (8003534 <USER_SPI_write+0xf0>)
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	b2db      	uxtb	r3, r3
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <USER_SPI_write+0x32>
 8003472:	2303      	movs	r3, #3
 8003474:	e05a      	b.n	800352c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8003476:	4b2f      	ldr	r3, [pc, #188]	; (8003534 <USER_SPI_write+0xf0>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	b2db      	uxtb	r3, r3
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <USER_SPI_write+0x44>
 8003484:	2302      	movs	r3, #2
 8003486:	e051      	b.n	800352c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8003488:	4b2b      	ldr	r3, [pc, #172]	; (8003538 <USER_SPI_write+0xf4>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	f003 0308 	and.w	r3, r3, #8
 8003490:	2b00      	cmp	r3, #0
 8003492:	d102      	bne.n	800349a <USER_SPI_write+0x56>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	025b      	lsls	r3, r3, #9
 8003498:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d110      	bne.n	80034c2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	2018      	movs	r0, #24
 80034a4:	f7ff fdf7 	bl	8003096 <send_cmd>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d136      	bne.n	800351c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80034ae:	21fe      	movs	r1, #254	; 0xfe
 80034b0:	68b8      	ldr	r0, [r7, #8]
 80034b2:	f7ff fdbe 	bl	8003032 <xmit_datablock>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d02f      	beq.n	800351c <USER_SPI_write+0xd8>
			count = 0;
 80034bc:	2300      	movs	r3, #0
 80034be:	603b      	str	r3, [r7, #0]
 80034c0:	e02c      	b.n	800351c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80034c2:	4b1d      	ldr	r3, [pc, #116]	; (8003538 <USER_SPI_write+0xf4>)
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	f003 0306 	and.w	r3, r3, #6
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <USER_SPI_write+0x92>
 80034ce:	6839      	ldr	r1, [r7, #0]
 80034d0:	2097      	movs	r0, #151	; 0x97
 80034d2:	f7ff fde0 	bl	8003096 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	2019      	movs	r0, #25
 80034da:	f7ff fddc 	bl	8003096 <send_cmd>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d11b      	bne.n	800351c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80034e4:	21fc      	movs	r1, #252	; 0xfc
 80034e6:	68b8      	ldr	r0, [r7, #8]
 80034e8:	f7ff fda3 	bl	8003032 <xmit_datablock>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00a      	beq.n	8003508 <USER_SPI_write+0xc4>
				buff += 512;
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80034f8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	3b01      	subs	r3, #1
 80034fe:	603b      	str	r3, [r7, #0]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1ee      	bne.n	80034e4 <USER_SPI_write+0xa0>
 8003506:	e000      	b.n	800350a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8003508:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800350a:	21fd      	movs	r1, #253	; 0xfd
 800350c:	2000      	movs	r0, #0
 800350e:	f7ff fd90 	bl	8003032 <xmit_datablock>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <USER_SPI_write+0xd8>
 8003518:	2301      	movs	r3, #1
 800351a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800351c:	f7ff fd34 	bl	8002f88 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	bf14      	ite	ne
 8003526:	2301      	movne	r3, #1
 8003528:	2300      	moveq	r3, #0
 800352a:	b2db      	uxtb	r3, r3
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	20000020 	.word	0x20000020
 8003538:	20000150 	.word	0x20000150

0800353c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b08c      	sub	sp, #48	; 0x30
 8003540:	af00      	add	r7, sp, #0
 8003542:	4603      	mov	r3, r0
 8003544:	603a      	str	r2, [r7, #0]
 8003546:	71fb      	strb	r3, [r7, #7]
 8003548:	460b      	mov	r3, r1
 800354a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800354c:	79fb      	ldrb	r3, [r7, #7]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <USER_SPI_ioctl+0x1a>
 8003552:	2304      	movs	r3, #4
 8003554:	e15a      	b.n	800380c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003556:	4baf      	ldr	r3, [pc, #700]	; (8003814 <USER_SPI_ioctl+0x2d8>)
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	b2db      	uxtb	r3, r3
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <USER_SPI_ioctl+0x2c>
 8003564:	2303      	movs	r3, #3
 8003566:	e151      	b.n	800380c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800356e:	79bb      	ldrb	r3, [r7, #6]
 8003570:	2b04      	cmp	r3, #4
 8003572:	f200 8136 	bhi.w	80037e2 <USER_SPI_ioctl+0x2a6>
 8003576:	a201      	add	r2, pc, #4	; (adr r2, 800357c <USER_SPI_ioctl+0x40>)
 8003578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357c:	08003591 	.word	0x08003591
 8003580:	080035a5 	.word	0x080035a5
 8003584:	080037e3 	.word	0x080037e3
 8003588:	08003651 	.word	0x08003651
 800358c:	08003747 	.word	0x08003747
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8003590:	f7ff fd0a 	bl	8002fa8 <spiselect>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 8127 	beq.w	80037ea <USER_SPI_ioctl+0x2ae>
 800359c:	2300      	movs	r3, #0
 800359e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80035a2:	e122      	b.n	80037ea <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80035a4:	2100      	movs	r1, #0
 80035a6:	2009      	movs	r0, #9
 80035a8:	f7ff fd75 	bl	8003096 <send_cmd>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f040 811d 	bne.w	80037ee <USER_SPI_ioctl+0x2b2>
 80035b4:	f107 030c 	add.w	r3, r7, #12
 80035b8:	2110      	movs	r1, #16
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff fd10 	bl	8002fe0 <rcvr_datablock>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 8113 	beq.w	80037ee <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80035c8:	7b3b      	ldrb	r3, [r7, #12]
 80035ca:	099b      	lsrs	r3, r3, #6
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d111      	bne.n	80035f6 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80035d2:	7d7b      	ldrb	r3, [r7, #21]
 80035d4:	461a      	mov	r2, r3
 80035d6:	7d3b      	ldrb	r3, [r7, #20]
 80035d8:	021b      	lsls	r3, r3, #8
 80035da:	4413      	add	r3, r2
 80035dc:	461a      	mov	r2, r3
 80035de:	7cfb      	ldrb	r3, [r7, #19]
 80035e0:	041b      	lsls	r3, r3, #16
 80035e2:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80035e6:	4413      	add	r3, r2
 80035e8:	3301      	adds	r3, #1
 80035ea:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	029a      	lsls	r2, r3, #10
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	e028      	b.n	8003648 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80035f6:	7c7b      	ldrb	r3, [r7, #17]
 80035f8:	f003 030f 	and.w	r3, r3, #15
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	7dbb      	ldrb	r3, [r7, #22]
 8003600:	09db      	lsrs	r3, r3, #7
 8003602:	b2db      	uxtb	r3, r3
 8003604:	4413      	add	r3, r2
 8003606:	b2da      	uxtb	r2, r3
 8003608:	7d7b      	ldrb	r3, [r7, #21]
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	b2db      	uxtb	r3, r3
 800360e:	f003 0306 	and.w	r3, r3, #6
 8003612:	b2db      	uxtb	r3, r3
 8003614:	4413      	add	r3, r2
 8003616:	b2db      	uxtb	r3, r3
 8003618:	3302      	adds	r3, #2
 800361a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800361e:	7d3b      	ldrb	r3, [r7, #20]
 8003620:	099b      	lsrs	r3, r3, #6
 8003622:	b2db      	uxtb	r3, r3
 8003624:	461a      	mov	r2, r3
 8003626:	7cfb      	ldrb	r3, [r7, #19]
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	441a      	add	r2, r3
 800362c:	7cbb      	ldrb	r3, [r7, #18]
 800362e:	029b      	lsls	r3, r3, #10
 8003630:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003634:	4413      	add	r3, r2
 8003636:	3301      	adds	r3, #1
 8003638:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800363a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800363e:	3b09      	subs	r3, #9
 8003640:	69fa      	ldr	r2, [r7, #28]
 8003642:	409a      	lsls	r2, r3
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8003648:	2300      	movs	r3, #0
 800364a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800364e:	e0ce      	b.n	80037ee <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8003650:	4b71      	ldr	r3, [pc, #452]	; (8003818 <USER_SPI_ioctl+0x2dc>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	d031      	beq.n	80036c0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800365c:	2100      	movs	r1, #0
 800365e:	208d      	movs	r0, #141	; 0x8d
 8003660:	f7ff fd19 	bl	8003096 <send_cmd>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	f040 80c3 	bne.w	80037f2 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800366c:	20ff      	movs	r0, #255	; 0xff
 800366e:	f7ff fc21 	bl	8002eb4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8003672:	f107 030c 	add.w	r3, r7, #12
 8003676:	2110      	movs	r1, #16
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff fcb1 	bl	8002fe0 <rcvr_datablock>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 80b6 	beq.w	80037f2 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8003686:	2330      	movs	r3, #48	; 0x30
 8003688:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800368c:	e007      	b.n	800369e <USER_SPI_ioctl+0x162>
 800368e:	20ff      	movs	r0, #255	; 0xff
 8003690:	f7ff fc10 	bl	8002eb4 <xchg_spi>
 8003694:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003698:	3b01      	subs	r3, #1
 800369a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800369e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f3      	bne.n	800368e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80036a6:	7dbb      	ldrb	r3, [r7, #22]
 80036a8:	091b      	lsrs	r3, r3, #4
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	461a      	mov	r2, r3
 80036ae:	2310      	movs	r3, #16
 80036b0:	fa03 f202 	lsl.w	r2, r3, r2
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80036be:	e098      	b.n	80037f2 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80036c0:	2100      	movs	r1, #0
 80036c2:	2009      	movs	r0, #9
 80036c4:	f7ff fce7 	bl	8003096 <send_cmd>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f040 8091 	bne.w	80037f2 <USER_SPI_ioctl+0x2b6>
 80036d0:	f107 030c 	add.w	r3, r7, #12
 80036d4:	2110      	movs	r1, #16
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff fc82 	bl	8002fe0 <rcvr_datablock>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 8087 	beq.w	80037f2 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80036e4:	4b4c      	ldr	r3, [pc, #304]	; (8003818 <USER_SPI_ioctl+0x2dc>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d012      	beq.n	8003716 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80036f0:	7dbb      	ldrb	r3, [r7, #22]
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80036f8:	7dfa      	ldrb	r2, [r7, #23]
 80036fa:	09d2      	lsrs	r2, r2, #7
 80036fc:	b2d2      	uxtb	r2, r2
 80036fe:	4413      	add	r3, r2
 8003700:	1c5a      	adds	r2, r3, #1
 8003702:	7e7b      	ldrb	r3, [r7, #25]
 8003704:	099b      	lsrs	r3, r3, #6
 8003706:	b2db      	uxtb	r3, r3
 8003708:	3b01      	subs	r3, #1
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	461a      	mov	r2, r3
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	e013      	b.n	800373e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8003716:	7dbb      	ldrb	r3, [r7, #22]
 8003718:	109b      	asrs	r3, r3, #2
 800371a:	b29b      	uxth	r3, r3
 800371c:	f003 031f 	and.w	r3, r3, #31
 8003720:	3301      	adds	r3, #1
 8003722:	7dfa      	ldrb	r2, [r7, #23]
 8003724:	00d2      	lsls	r2, r2, #3
 8003726:	f002 0218 	and.w	r2, r2, #24
 800372a:	7df9      	ldrb	r1, [r7, #23]
 800372c:	0949      	lsrs	r1, r1, #5
 800372e:	b2c9      	uxtb	r1, r1
 8003730:	440a      	add	r2, r1
 8003732:	3201      	adds	r2, #1
 8003734:	fb02 f303 	mul.w	r3, r2, r3
 8003738:	461a      	mov	r2, r3
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800373e:	2300      	movs	r3, #0
 8003740:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8003744:	e055      	b.n	80037f2 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8003746:	4b34      	ldr	r3, [pc, #208]	; (8003818 <USER_SPI_ioctl+0x2dc>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	f003 0306 	and.w	r3, r3, #6
 800374e:	2b00      	cmp	r3, #0
 8003750:	d051      	beq.n	80037f6 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003752:	f107 020c 	add.w	r2, r7, #12
 8003756:	79fb      	ldrb	r3, [r7, #7]
 8003758:	210b      	movs	r1, #11
 800375a:	4618      	mov	r0, r3
 800375c:	f7ff feee 	bl	800353c <USER_SPI_ioctl>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d149      	bne.n	80037fa <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003766:	7b3b      	ldrb	r3, [r7, #12]
 8003768:	099b      	lsrs	r3, r3, #6
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	d104      	bne.n	800377a <USER_SPI_ioctl+0x23e>
 8003770:	7dbb      	ldrb	r3, [r7, #22]
 8003772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003776:	2b00      	cmp	r3, #0
 8003778:	d041      	beq.n	80037fe <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	623b      	str	r3, [r7, #32]
 800377e:	6a3b      	ldr	r3, [r7, #32]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	62bb      	str	r3, [r7, #40]	; 0x28
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800378a:	4b23      	ldr	r3, [pc, #140]	; (8003818 <USER_SPI_ioctl+0x2dc>)
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	2b00      	cmp	r3, #0
 8003794:	d105      	bne.n	80037a2 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8003796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003798:	025b      	lsls	r3, r3, #9
 800379a:	62bb      	str	r3, [r7, #40]	; 0x28
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	025b      	lsls	r3, r3, #9
 80037a0:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80037a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037a4:	2020      	movs	r0, #32
 80037a6:	f7ff fc76 	bl	8003096 <send_cmd>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d128      	bne.n	8003802 <USER_SPI_ioctl+0x2c6>
 80037b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037b2:	2021      	movs	r0, #33	; 0x21
 80037b4:	f7ff fc6f 	bl	8003096 <send_cmd>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d121      	bne.n	8003802 <USER_SPI_ioctl+0x2c6>
 80037be:	2100      	movs	r1, #0
 80037c0:	2026      	movs	r0, #38	; 0x26
 80037c2:	f7ff fc68 	bl	8003096 <send_cmd>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d11a      	bne.n	8003802 <USER_SPI_ioctl+0x2c6>
 80037cc:	f247 5030 	movw	r0, #30000	; 0x7530
 80037d0:	f7ff fbb6 	bl	8002f40 <wait_ready>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d013      	beq.n	8003802 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80037da:	2300      	movs	r3, #0
 80037dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80037e0:	e00f      	b.n	8003802 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80037e2:	2304      	movs	r3, #4
 80037e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80037e8:	e00c      	b.n	8003804 <USER_SPI_ioctl+0x2c8>
		break;
 80037ea:	bf00      	nop
 80037ec:	e00a      	b.n	8003804 <USER_SPI_ioctl+0x2c8>
		break;
 80037ee:	bf00      	nop
 80037f0:	e008      	b.n	8003804 <USER_SPI_ioctl+0x2c8>
		break;
 80037f2:	bf00      	nop
 80037f4:	e006      	b.n	8003804 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80037f6:	bf00      	nop
 80037f8:	e004      	b.n	8003804 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80037fa:	bf00      	nop
 80037fc:	e002      	b.n	8003804 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80037fe:	bf00      	nop
 8003800:	e000      	b.n	8003804 <USER_SPI_ioctl+0x2c8>
		break;
 8003802:	bf00      	nop
	}

	despiselect();
 8003804:	f7ff fbc0 	bl	8002f88 <despiselect>

	return res;
 8003808:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800380c:	4618      	mov	r0, r3
 800380e:	3730      	adds	r7, #48	; 0x30
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	20000020 	.word	0x20000020
 8003818:	20000150 	.word	0x20000150

0800381c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	4603      	mov	r3, r0
 8003824:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003826:	79fb      	ldrb	r3, [r7, #7]
 8003828:	4a08      	ldr	r2, [pc, #32]	; (800384c <disk_status+0x30>)
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	79fa      	ldrb	r2, [r7, #7]
 8003834:	4905      	ldr	r1, [pc, #20]	; (800384c <disk_status+0x30>)
 8003836:	440a      	add	r2, r1
 8003838:	7a12      	ldrb	r2, [r2, #8]
 800383a:	4610      	mov	r0, r2
 800383c:	4798      	blx	r3
 800383e:	4603      	mov	r3, r0
 8003840:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003842:	7bfb      	ldrb	r3, [r7, #15]
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	20000184 	.word	0x20000184

08003850 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	4603      	mov	r3, r0
 8003858:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800385a:	2300      	movs	r3, #0
 800385c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800385e:	79fb      	ldrb	r3, [r7, #7]
 8003860:	4a0d      	ldr	r2, [pc, #52]	; (8003898 <disk_initialize+0x48>)
 8003862:	5cd3      	ldrb	r3, [r2, r3]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d111      	bne.n	800388c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003868:	79fb      	ldrb	r3, [r7, #7]
 800386a:	4a0b      	ldr	r2, [pc, #44]	; (8003898 <disk_initialize+0x48>)
 800386c:	2101      	movs	r1, #1
 800386e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003870:	79fb      	ldrb	r3, [r7, #7]
 8003872:	4a09      	ldr	r2, [pc, #36]	; (8003898 <disk_initialize+0x48>)
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4413      	add	r3, r2
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	79fa      	ldrb	r2, [r7, #7]
 800387e:	4906      	ldr	r1, [pc, #24]	; (8003898 <disk_initialize+0x48>)
 8003880:	440a      	add	r2, r1
 8003882:	7a12      	ldrb	r2, [r2, #8]
 8003884:	4610      	mov	r0, r2
 8003886:	4798      	blx	r3
 8003888:	4603      	mov	r3, r0
 800388a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800388c:	7bfb      	ldrb	r3, [r7, #15]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	20000184 	.word	0x20000184

0800389c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800389c:	b590      	push	{r4, r7, lr}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60b9      	str	r1, [r7, #8]
 80038a4:	607a      	str	r2, [r7, #4]
 80038a6:	603b      	str	r3, [r7, #0]
 80038a8:	4603      	mov	r3, r0
 80038aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80038ac:	7bfb      	ldrb	r3, [r7, #15]
 80038ae:	4a0a      	ldr	r2, [pc, #40]	; (80038d8 <disk_read+0x3c>)
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4413      	add	r3, r2
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	689c      	ldr	r4, [r3, #8]
 80038b8:	7bfb      	ldrb	r3, [r7, #15]
 80038ba:	4a07      	ldr	r2, [pc, #28]	; (80038d8 <disk_read+0x3c>)
 80038bc:	4413      	add	r3, r2
 80038be:	7a18      	ldrb	r0, [r3, #8]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	68b9      	ldr	r1, [r7, #8]
 80038c6:	47a0      	blx	r4
 80038c8:	4603      	mov	r3, r0
 80038ca:	75fb      	strb	r3, [r7, #23]
  return res;
 80038cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	371c      	adds	r7, #28
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd90      	pop	{r4, r7, pc}
 80038d6:	bf00      	nop
 80038d8:	20000184 	.word	0x20000184

080038dc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80038dc:	b590      	push	{r4, r7, lr}
 80038de:	b087      	sub	sp, #28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60b9      	str	r1, [r7, #8]
 80038e4:	607a      	str	r2, [r7, #4]
 80038e6:	603b      	str	r3, [r7, #0]
 80038e8:	4603      	mov	r3, r0
 80038ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
 80038ee:	4a0a      	ldr	r2, [pc, #40]	; (8003918 <disk_write+0x3c>)
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	68dc      	ldr	r4, [r3, #12]
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
 80038fa:	4a07      	ldr	r2, [pc, #28]	; (8003918 <disk_write+0x3c>)
 80038fc:	4413      	add	r3, r2
 80038fe:	7a18      	ldrb	r0, [r3, #8]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	68b9      	ldr	r1, [r7, #8]
 8003906:	47a0      	blx	r4
 8003908:	4603      	mov	r3, r0
 800390a:	75fb      	strb	r3, [r7, #23]
  return res;
 800390c:	7dfb      	ldrb	r3, [r7, #23]
}
 800390e:	4618      	mov	r0, r3
 8003910:	371c      	adds	r7, #28
 8003912:	46bd      	mov	sp, r7
 8003914:	bd90      	pop	{r4, r7, pc}
 8003916:	bf00      	nop
 8003918:	20000184 	.word	0x20000184

0800391c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	4603      	mov	r3, r0
 8003924:	603a      	str	r2, [r7, #0]
 8003926:	71fb      	strb	r3, [r7, #7]
 8003928:	460b      	mov	r3, r1
 800392a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800392c:	79fb      	ldrb	r3, [r7, #7]
 800392e:	4a09      	ldr	r2, [pc, #36]	; (8003954 <disk_ioctl+0x38>)
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	79fa      	ldrb	r2, [r7, #7]
 800393a:	4906      	ldr	r1, [pc, #24]	; (8003954 <disk_ioctl+0x38>)
 800393c:	440a      	add	r2, r1
 800393e:	7a10      	ldrb	r0, [r2, #8]
 8003940:	79b9      	ldrb	r1, [r7, #6]
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	4798      	blx	r3
 8003946:	4603      	mov	r3, r0
 8003948:	73fb      	strb	r3, [r7, #15]
  return res;
 800394a:	7bfb      	ldrb	r3, [r7, #15]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	20000184 	.word	0x20000184

08003958 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3301      	adds	r3, #1
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003968:	89fb      	ldrh	r3, [r7, #14]
 800396a:	021b      	lsls	r3, r3, #8
 800396c:	b21a      	sxth	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	b21b      	sxth	r3, r3
 8003974:	4313      	orrs	r3, r2
 8003976:	b21b      	sxth	r3, r3
 8003978:	81fb      	strh	r3, [r7, #14]
	return rv;
 800397a:	89fb      	ldrh	r3, [r7, #14]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3303      	adds	r3, #3
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	021b      	lsls	r3, r3, #8
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	3202      	adds	r2, #2
 80039a0:	7812      	ldrb	r2, [r2, #0]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	021b      	lsls	r3, r3, #8
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	3201      	adds	r2, #1
 80039ae:	7812      	ldrb	r2, [r2, #0]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	021b      	lsls	r3, r3, #8
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	7812      	ldrb	r2, [r2, #0]
 80039bc:	4313      	orrs	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]
	return rv;
 80039c0:	68fb      	ldr	r3, [r7, #12]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
 80039d6:	460b      	mov	r3, r1
 80039d8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	1c5a      	adds	r2, r3, #1
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	887a      	ldrh	r2, [r7, #2]
 80039e2:	b2d2      	uxtb	r2, r2
 80039e4:	701a      	strb	r2, [r3, #0]
 80039e6:	887b      	ldrh	r3, [r7, #2]
 80039e8:	0a1b      	lsrs	r3, r3, #8
 80039ea:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	1c5a      	adds	r2, r3, #1
 80039f0:	607a      	str	r2, [r7, #4]
 80039f2:	887a      	ldrh	r2, [r7, #2]
 80039f4:	b2d2      	uxtb	r2, r2
 80039f6:	701a      	strb	r2, [r3, #0]
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	607a      	str	r2, [r7, #4]
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	701a      	strb	r2, [r3, #0]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	0a1b      	lsrs	r3, r3, #8
 8003a1e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	1c5a      	adds	r2, r3, #1
 8003a24:	607a      	str	r2, [r7, #4]
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	b2d2      	uxtb	r2, r2
 8003a2a:	701a      	strb	r2, [r3, #0]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	0a1b      	lsrs	r3, r3, #8
 8003a30:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	607a      	str	r2, [r7, #4]
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	701a      	strb	r2, [r3, #0]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	0a1b      	lsrs	r3, r3, #8
 8003a42:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	607a      	str	r2, [r7, #4]
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	701a      	strb	r2, [r3, #0]
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003a5c:	b480      	push	{r7}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00d      	beq.n	8003a92 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	1c53      	adds	r3, r2, #1
 8003a7a:	613b      	str	r3, [r7, #16]
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	1c59      	adds	r1, r3, #1
 8003a80:	6179      	str	r1, [r7, #20]
 8003a82:	7812      	ldrb	r2, [r2, #0]
 8003a84:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	607b      	str	r3, [r7, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1f1      	bne.n	8003a76 <mem_cpy+0x1a>
	}
}
 8003a92:	bf00      	nop
 8003a94:	371c      	adds	r7, #28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003a9e:	b480      	push	{r7}
 8003aa0:	b087      	sub	sp, #28
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	60f8      	str	r0, [r7, #12]
 8003aa6:	60b9      	str	r1, [r7, #8]
 8003aa8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	1c5a      	adds	r2, r3, #1
 8003ab2:	617a      	str	r2, [r7, #20]
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	3b01      	subs	r3, #1
 8003abe:	607b      	str	r3, [r7, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f3      	bne.n	8003aae <mem_set+0x10>
}
 8003ac6:	bf00      	nop
 8003ac8:	bf00      	nop
 8003aca:	371c      	adds	r7, #28
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003ad4:	b480      	push	{r7}
 8003ad6:	b089      	sub	sp, #36	; 0x24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	61fb      	str	r3, [r7, #28]
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	1c5a      	adds	r2, r3, #1
 8003af0:	61fa      	str	r2, [r7, #28]
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	4619      	mov	r1, r3
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	1c5a      	adds	r2, r3, #1
 8003afa:	61ba      	str	r2, [r7, #24]
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	1acb      	subs	r3, r1, r3
 8003b00:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	3b01      	subs	r3, #1
 8003b06:	607b      	str	r3, [r7, #4]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d002      	beq.n	8003b14 <mem_cmp+0x40>
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0eb      	beq.n	8003aec <mem_cmp+0x18>

	return r;
 8003b14:	697b      	ldr	r3, [r7, #20]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3724      	adds	r7, #36	; 0x24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003b22:	b480      	push	{r7}
 8003b24:	b083      	sub	sp, #12
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
 8003b2a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003b2c:	e002      	b.n	8003b34 <chk_chr+0x12>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	3301      	adds	r3, #1
 8003b32:	607b      	str	r3, [r7, #4]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d005      	beq.n	8003b48 <chk_chr+0x26>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	461a      	mov	r2, r3
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d1f2      	bne.n	8003b2e <chk_chr+0xc>
	return *str;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	781b      	ldrb	r3, [r3, #0]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003b62:	2300      	movs	r3, #0
 8003b64:	60bb      	str	r3, [r7, #8]
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	e029      	b.n	8003bc0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003b6c:	4a27      	ldr	r2, [pc, #156]	; (8003c0c <chk_lock+0xb4>)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	4413      	add	r3, r2
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d01d      	beq.n	8003bb6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003b7a:	4a24      	ldr	r2, [pc, #144]	; (8003c0c <chk_lock+0xb4>)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	011b      	lsls	r3, r3, #4
 8003b80:	4413      	add	r3, r2
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d116      	bne.n	8003bba <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003b8c:	4a1f      	ldr	r2, [pc, #124]	; (8003c0c <chk_lock+0xb4>)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	011b      	lsls	r3, r3, #4
 8003b92:	4413      	add	r3, r2
 8003b94:	3304      	adds	r3, #4
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d10c      	bne.n	8003bba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003ba0:	4a1a      	ldr	r2, [pc, #104]	; (8003c0c <chk_lock+0xb4>)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	4413      	add	r3, r2
 8003ba8:	3308      	adds	r3, #8
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d102      	bne.n	8003bba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003bb4:	e007      	b.n	8003bc6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d9d2      	bls.n	8003b6c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d109      	bne.n	8003be0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d102      	bne.n	8003bd8 <chk_lock+0x80>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d101      	bne.n	8003bdc <chk_lock+0x84>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	e010      	b.n	8003bfe <chk_lock+0xa6>
 8003bdc:	2312      	movs	r3, #18
 8003bde:	e00e      	b.n	8003bfe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d108      	bne.n	8003bf8 <chk_lock+0xa0>
 8003be6:	4a09      	ldr	r2, [pc, #36]	; (8003c0c <chk_lock+0xb4>)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	011b      	lsls	r3, r3, #4
 8003bec:	4413      	add	r3, r2
 8003bee:	330c      	adds	r3, #12
 8003bf0:	881b      	ldrh	r3, [r3, #0]
 8003bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bf6:	d101      	bne.n	8003bfc <chk_lock+0xa4>
 8003bf8:	2310      	movs	r3, #16
 8003bfa:	e000      	b.n	8003bfe <chk_lock+0xa6>
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3714      	adds	r7, #20
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	20000164 	.word	0x20000164

08003c10 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003c16:	2300      	movs	r3, #0
 8003c18:	607b      	str	r3, [r7, #4]
 8003c1a:	e002      	b.n	8003c22 <enq_lock+0x12>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	607b      	str	r3, [r7, #4]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d806      	bhi.n	8003c36 <enq_lock+0x26>
 8003c28:	4a09      	ldr	r2, [pc, #36]	; (8003c50 <enq_lock+0x40>)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	4413      	add	r3, r2
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1f2      	bne.n	8003c1c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	bf14      	ite	ne
 8003c3c:	2301      	movne	r3, #1
 8003c3e:	2300      	moveq	r3, #0
 8003c40:	b2db      	uxtb	r3, r3
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	20000164 	.word	0x20000164

08003c54 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	e01f      	b.n	8003ca4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003c64:	4a41      	ldr	r2, [pc, #260]	; (8003d6c <inc_lock+0x118>)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	4413      	add	r3, r2
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d113      	bne.n	8003c9e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003c76:	4a3d      	ldr	r2, [pc, #244]	; (8003d6c <inc_lock+0x118>)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	4413      	add	r3, r2
 8003c7e:	3304      	adds	r3, #4
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d109      	bne.n	8003c9e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003c8a:	4a38      	ldr	r2, [pc, #224]	; (8003d6c <inc_lock+0x118>)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	4413      	add	r3, r2
 8003c92:	3308      	adds	r3, #8
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d006      	beq.n	8003cac <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d9dc      	bls.n	8003c64 <inc_lock+0x10>
 8003caa:	e000      	b.n	8003cae <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003cac:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d132      	bne.n	8003d1a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	e002      	b.n	8003cc0 <inc_lock+0x6c>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d806      	bhi.n	8003cd4 <inc_lock+0x80>
 8003cc6:	4a29      	ldr	r2, [pc, #164]	; (8003d6c <inc_lock+0x118>)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	011b      	lsls	r3, r3, #4
 8003ccc:	4413      	add	r3, r2
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1f2      	bne.n	8003cba <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d101      	bne.n	8003cde <inc_lock+0x8a>
 8003cda:	2300      	movs	r3, #0
 8003cdc:	e040      	b.n	8003d60 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	4922      	ldr	r1, [pc, #136]	; (8003d6c <inc_lock+0x118>)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	440b      	add	r3, r1
 8003cea:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	491e      	ldr	r1, [pc, #120]	; (8003d6c <inc_lock+0x118>)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	011b      	lsls	r3, r3, #4
 8003cf6:	440b      	add	r3, r1
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	695a      	ldr	r2, [r3, #20]
 8003d00:	491a      	ldr	r1, [pc, #104]	; (8003d6c <inc_lock+0x118>)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	440b      	add	r3, r1
 8003d08:	3308      	adds	r3, #8
 8003d0a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003d0c:	4a17      	ldr	r2, [pc, #92]	; (8003d6c <inc_lock+0x118>)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	011b      	lsls	r3, r3, #4
 8003d12:	4413      	add	r3, r2
 8003d14:	330c      	adds	r3, #12
 8003d16:	2200      	movs	r2, #0
 8003d18:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d009      	beq.n	8003d34 <inc_lock+0xe0>
 8003d20:	4a12      	ldr	r2, [pc, #72]	; (8003d6c <inc_lock+0x118>)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	011b      	lsls	r3, r3, #4
 8003d26:	4413      	add	r3, r2
 8003d28:	330c      	adds	r3, #12
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <inc_lock+0xe0>
 8003d30:	2300      	movs	r3, #0
 8003d32:	e015      	b.n	8003d60 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d108      	bne.n	8003d4c <inc_lock+0xf8>
 8003d3a:	4a0c      	ldr	r2, [pc, #48]	; (8003d6c <inc_lock+0x118>)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	4413      	add	r3, r2
 8003d42:	330c      	adds	r3, #12
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	3301      	adds	r3, #1
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	e001      	b.n	8003d50 <inc_lock+0xfc>
 8003d4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d50:	4906      	ldr	r1, [pc, #24]	; (8003d6c <inc_lock+0x118>)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	011b      	lsls	r3, r3, #4
 8003d56:	440b      	add	r3, r1
 8003d58:	330c      	adds	r3, #12
 8003d5a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	3301      	adds	r3, #1
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr
 8003d6c:	20000164 	.word	0x20000164

08003d70 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	607b      	str	r3, [r7, #4]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d825      	bhi.n	8003dd0 <dec_lock+0x60>
		n = Files[i].ctr;
 8003d84:	4a17      	ldr	r2, [pc, #92]	; (8003de4 <dec_lock+0x74>)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	011b      	lsls	r3, r3, #4
 8003d8a:	4413      	add	r3, r2
 8003d8c:	330c      	adds	r3, #12
 8003d8e:	881b      	ldrh	r3, [r3, #0]
 8003d90:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003d92:	89fb      	ldrh	r3, [r7, #14]
 8003d94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d98:	d101      	bne.n	8003d9e <dec_lock+0x2e>
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8003d9e:	89fb      	ldrh	r3, [r7, #14]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d002      	beq.n	8003daa <dec_lock+0x3a>
 8003da4:	89fb      	ldrh	r3, [r7, #14]
 8003da6:	3b01      	subs	r3, #1
 8003da8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003daa:	4a0e      	ldr	r2, [pc, #56]	; (8003de4 <dec_lock+0x74>)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	4413      	add	r3, r2
 8003db2:	330c      	adds	r3, #12
 8003db4:	89fa      	ldrh	r2, [r7, #14]
 8003db6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003db8:	89fb      	ldrh	r3, [r7, #14]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d105      	bne.n	8003dca <dec_lock+0x5a>
 8003dbe:	4a09      	ldr	r2, [pc, #36]	; (8003de4 <dec_lock+0x74>)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	4413      	add	r3, r2
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	737b      	strb	r3, [r7, #13]
 8003dce:	e001      	b.n	8003dd4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003dd4:	7b7b      	ldrb	r3, [r7, #13]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3714      	adds	r7, #20
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	20000164 	.word	0x20000164

08003de8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003df0:	2300      	movs	r3, #0
 8003df2:	60fb      	str	r3, [r7, #12]
 8003df4:	e010      	b.n	8003e18 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003df6:	4a0d      	ldr	r2, [pc, #52]	; (8003e2c <clear_lock+0x44>)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	4413      	add	r3, r2
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d105      	bne.n	8003e12 <clear_lock+0x2a>
 8003e06:	4a09      	ldr	r2, [pc, #36]	; (8003e2c <clear_lock+0x44>)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	011b      	lsls	r3, r3, #4
 8003e0c:	4413      	add	r3, r2
 8003e0e:	2200      	movs	r2, #0
 8003e10:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	3301      	adds	r3, #1
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d9eb      	bls.n	8003df6 <clear_lock+0xe>
	}
}
 8003e1e:	bf00      	nop
 8003e20:	bf00      	nop
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	20000164 	.word	0x20000164

08003e30 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	78db      	ldrb	r3, [r3, #3]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d034      	beq.n	8003eae <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e48:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	7858      	ldrb	r0, [r3, #1]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003e54:	2301      	movs	r3, #1
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	f7ff fd40 	bl	80038dc <disk_write>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d002      	beq.n	8003e68 <sync_window+0x38>
			res = FR_DISK_ERR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	73fb      	strb	r3, [r7, #15]
 8003e66:	e022      	b.n	8003eae <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	1ad2      	subs	r2, r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d217      	bcs.n	8003eae <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	789b      	ldrb	r3, [r3, #2]
 8003e82:	613b      	str	r3, [r7, #16]
 8003e84:	e010      	b.n	8003ea8 <sync_window+0x78>
					wsect += fs->fsize;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	7858      	ldrb	r0, [r3, #1]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	f7ff fd1d 	bl	80038dc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	613b      	str	r3, [r7, #16]
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d8eb      	bhi.n	8003e86 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3718      	adds	r7, #24
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d01b      	beq.n	8003f08 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f7ff ffad 	bl	8003e30 <sync_window>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d113      	bne.n	8003f08 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	7858      	ldrb	r0, [r3, #1]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003eea:	2301      	movs	r3, #1
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	f7ff fcd5 	bl	800389c <disk_read>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d004      	beq.n	8003f02 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8003efc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8003f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
	...

08003f14 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7ff ff87 	bl	8003e30 <sync_window>
 8003f22:	4603      	mov	r3, r0
 8003f24:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003f26:	7bfb      	ldrb	r3, [r7, #15]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d158      	bne.n	8003fde <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	2b03      	cmp	r3, #3
 8003f32:	d148      	bne.n	8003fc6 <sync_fs+0xb2>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	791b      	ldrb	r3, [r3, #4]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d144      	bne.n	8003fc6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3330      	adds	r3, #48	; 0x30
 8003f40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f44:	2100      	movs	r1, #0
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7ff fda9 	bl	8003a9e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3330      	adds	r3, #48	; 0x30
 8003f50:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003f54:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff fd38 	bl	80039ce <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	3330      	adds	r3, #48	; 0x30
 8003f62:	4921      	ldr	r1, [pc, #132]	; (8003fe8 <sync_fs+0xd4>)
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7ff fd4d 	bl	8003a04 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	3330      	adds	r3, #48	; 0x30
 8003f6e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003f72:	491e      	ldr	r1, [pc, #120]	; (8003fec <sync_fs+0xd8>)
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff fd45 	bl	8003a04 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	3330      	adds	r3, #48	; 0x30
 8003f7e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	4619      	mov	r1, r3
 8003f88:	4610      	mov	r0, r2
 8003f8a:	f7ff fd3b 	bl	8003a04 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	3330      	adds	r3, #48	; 0x30
 8003f92:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	f7ff fd31 	bl	8003a04 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	7858      	ldrb	r0, [r3, #1]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fba:	2301      	movs	r3, #1
 8003fbc:	f7ff fc8e 	bl	80038dc <disk_write>
			fs->fsi_flag = 0;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	785b      	ldrb	r3, [r3, #1]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	2100      	movs	r1, #0
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7ff fca4 	bl	800391c <disk_ioctl>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <sync_fs+0xca>
 8003fda:	2301      	movs	r3, #1
 8003fdc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	41615252 	.word	0x41615252
 8003fec:	61417272 	.word	0x61417272

08003ff0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	3b02      	subs	r3, #2
 8003ffe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	3b02      	subs	r3, #2
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	429a      	cmp	r2, r3
 800400a:	d301      	bcc.n	8004010 <clust2sect+0x20>
 800400c:	2300      	movs	r3, #0
 800400e:	e008      	b.n	8004022 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	895b      	ldrh	r3, [r3, #10]
 8004014:	461a      	mov	r2, r3
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	fb03 f202 	mul.w	r2, r3, r2
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004020:	4413      	add	r3, r2
}
 8004022:	4618      	mov	r0, r3
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b086      	sub	sp, #24
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
 8004036:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d904      	bls.n	800404e <get_fat+0x20>
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	429a      	cmp	r2, r3
 800404c:	d302      	bcc.n	8004054 <get_fat+0x26>
		val = 1;	/* Internal error */
 800404e:	2301      	movs	r3, #1
 8004050:	617b      	str	r3, [r7, #20]
 8004052:	e08f      	b.n	8004174 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004054:	f04f 33ff 	mov.w	r3, #4294967295
 8004058:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	2b03      	cmp	r3, #3
 8004060:	d062      	beq.n	8004128 <get_fat+0xfa>
 8004062:	2b03      	cmp	r3, #3
 8004064:	dc7c      	bgt.n	8004160 <get_fat+0x132>
 8004066:	2b01      	cmp	r3, #1
 8004068:	d002      	beq.n	8004070 <get_fat+0x42>
 800406a:	2b02      	cmp	r3, #2
 800406c:	d042      	beq.n	80040f4 <get_fat+0xc6>
 800406e:	e077      	b.n	8004160 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	085b      	lsrs	r3, r3, #1
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	4413      	add	r3, r2
 800407c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	6a1a      	ldr	r2, [r3, #32]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	0a5b      	lsrs	r3, r3, #9
 8004086:	4413      	add	r3, r2
 8004088:	4619      	mov	r1, r3
 800408a:	6938      	ldr	r0, [r7, #16]
 800408c:	f7ff ff14 	bl	8003eb8 <move_window>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d167      	bne.n	8004166 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	1c5a      	adds	r2, r3, #1
 800409a:	60fa      	str	r2, [r7, #12]
 800409c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	4413      	add	r3, r2
 80040a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040a8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	6a1a      	ldr	r2, [r3, #32]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	0a5b      	lsrs	r3, r3, #9
 80040b2:	4413      	add	r3, r2
 80040b4:	4619      	mov	r1, r3
 80040b6:	6938      	ldr	r0, [r7, #16]
 80040b8:	f7ff fefe 	bl	8003eb8 <move_window>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d153      	bne.n	800416a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	4413      	add	r3, r2
 80040cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040d0:	021b      	lsls	r3, r3, #8
 80040d2:	461a      	mov	r2, r3
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d002      	beq.n	80040ea <get_fat+0xbc>
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	091b      	lsrs	r3, r3, #4
 80040e8:	e002      	b.n	80040f0 <get_fat+0xc2>
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040f0:	617b      	str	r3, [r7, #20]
			break;
 80040f2:	e03f      	b.n	8004174 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	6a1a      	ldr	r2, [r3, #32]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	0a1b      	lsrs	r3, r3, #8
 80040fc:	4413      	add	r3, r2
 80040fe:	4619      	mov	r1, r3
 8004100:	6938      	ldr	r0, [r7, #16]
 8004102:	f7ff fed9 	bl	8003eb8 <move_window>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d130      	bne.n	800416e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800411a:	4413      	add	r3, r2
 800411c:	4618      	mov	r0, r3
 800411e:	f7ff fc1b 	bl	8003958 <ld_word>
 8004122:	4603      	mov	r3, r0
 8004124:	617b      	str	r3, [r7, #20]
			break;
 8004126:	e025      	b.n	8004174 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	6a1a      	ldr	r2, [r3, #32]
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	09db      	lsrs	r3, r3, #7
 8004130:	4413      	add	r3, r2
 8004132:	4619      	mov	r1, r3
 8004134:	6938      	ldr	r0, [r7, #16]
 8004136:	f7ff febf 	bl	8003eb8 <move_window>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d118      	bne.n	8004172 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800414e:	4413      	add	r3, r2
 8004150:	4618      	mov	r0, r3
 8004152:	f7ff fc19 	bl	8003988 <ld_dword>
 8004156:	4603      	mov	r3, r0
 8004158:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800415c:	617b      	str	r3, [r7, #20]
			break;
 800415e:	e009      	b.n	8004174 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004160:	2301      	movs	r3, #1
 8004162:	617b      	str	r3, [r7, #20]
 8004164:	e006      	b.n	8004174 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004166:	bf00      	nop
 8004168:	e004      	b.n	8004174 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800416a:	bf00      	nop
 800416c:	e002      	b.n	8004174 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800416e:	bf00      	nop
 8004170:	e000      	b.n	8004174 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004172:	bf00      	nop
		}
	}

	return val;
 8004174:	697b      	ldr	r3, [r7, #20]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800417e:	b590      	push	{r4, r7, lr}
 8004180:	b089      	sub	sp, #36	; 0x24
 8004182:	af00      	add	r7, sp, #0
 8004184:	60f8      	str	r0, [r7, #12]
 8004186:	60b9      	str	r1, [r7, #8]
 8004188:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800418a:	2302      	movs	r3, #2
 800418c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	2b01      	cmp	r3, #1
 8004192:	f240 80d2 	bls.w	800433a <put_fat+0x1bc>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	429a      	cmp	r2, r3
 800419e:	f080 80cc 	bcs.w	800433a <put_fat+0x1bc>
		switch (fs->fs_type) {
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	2b03      	cmp	r3, #3
 80041a8:	f000 8096 	beq.w	80042d8 <put_fat+0x15a>
 80041ac:	2b03      	cmp	r3, #3
 80041ae:	f300 80cd 	bgt.w	800434c <put_fat+0x1ce>
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d002      	beq.n	80041bc <put_fat+0x3e>
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d06e      	beq.n	8004298 <put_fat+0x11a>
 80041ba:	e0c7      	b.n	800434c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	61bb      	str	r3, [r7, #24]
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	085b      	lsrs	r3, r3, #1
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	4413      	add	r3, r2
 80041c8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6a1a      	ldr	r2, [r3, #32]
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	0a5b      	lsrs	r3, r3, #9
 80041d2:	4413      	add	r3, r2
 80041d4:	4619      	mov	r1, r3
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f7ff fe6e 	bl	8003eb8 <move_window>
 80041dc:	4603      	mov	r3, r0
 80041de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80041e0:	7ffb      	ldrb	r3, [r7, #31]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f040 80ab 	bne.w	800433e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	1c59      	adds	r1, r3, #1
 80041f2:	61b9      	str	r1, [r7, #24]
 80041f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041f8:	4413      	add	r3, r2
 80041fa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00d      	beq.n	8004222 <put_fat+0xa4>
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	b25b      	sxtb	r3, r3
 800420c:	f003 030f 	and.w	r3, r3, #15
 8004210:	b25a      	sxtb	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	b2db      	uxtb	r3, r3
 8004216:	011b      	lsls	r3, r3, #4
 8004218:	b25b      	sxtb	r3, r3
 800421a:	4313      	orrs	r3, r2
 800421c:	b25b      	sxtb	r3, r3
 800421e:	b2db      	uxtb	r3, r3
 8004220:	e001      	b.n	8004226 <put_fat+0xa8>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	b2db      	uxtb	r3, r3
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2201      	movs	r2, #1
 800422e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6a1a      	ldr	r2, [r3, #32]
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	0a5b      	lsrs	r3, r3, #9
 8004238:	4413      	add	r3, r2
 800423a:	4619      	mov	r1, r3
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f7ff fe3b 	bl	8003eb8 <move_window>
 8004242:	4603      	mov	r3, r0
 8004244:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004246:	7ffb      	ldrb	r3, [r7, #31]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d17a      	bne.n	8004342 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004258:	4413      	add	r3, r2
 800425a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <put_fat+0xf0>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	091b      	lsrs	r3, r3, #4
 800426a:	b2db      	uxtb	r3, r3
 800426c:	e00e      	b.n	800428c <put_fat+0x10e>
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	b25b      	sxtb	r3, r3
 8004274:	f023 030f 	bic.w	r3, r3, #15
 8004278:	b25a      	sxtb	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	0a1b      	lsrs	r3, r3, #8
 800427e:	b25b      	sxtb	r3, r3
 8004280:	f003 030f 	and.w	r3, r3, #15
 8004284:	b25b      	sxtb	r3, r3
 8004286:	4313      	orrs	r3, r2
 8004288:	b25b      	sxtb	r3, r3
 800428a:	b2db      	uxtb	r3, r3
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2201      	movs	r2, #1
 8004294:	70da      	strb	r2, [r3, #3]
			break;
 8004296:	e059      	b.n	800434c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6a1a      	ldr	r2, [r3, #32]
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	0a1b      	lsrs	r3, r3, #8
 80042a0:	4413      	add	r3, r2
 80042a2:	4619      	mov	r1, r3
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f7ff fe07 	bl	8003eb8 <move_window>
 80042aa:	4603      	mov	r3, r0
 80042ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80042ae:	7ffb      	ldrb	r3, [r7, #31]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d148      	bne.n	8004346 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80042c2:	4413      	add	r3, r2
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	b292      	uxth	r2, r2
 80042c8:	4611      	mov	r1, r2
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7ff fb7f 	bl	80039ce <st_word>
			fs->wflag = 1;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2201      	movs	r2, #1
 80042d4:	70da      	strb	r2, [r3, #3]
			break;
 80042d6:	e039      	b.n	800434c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a1a      	ldr	r2, [r3, #32]
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	09db      	lsrs	r3, r3, #7
 80042e0:	4413      	add	r3, r2
 80042e2:	4619      	mov	r1, r3
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f7ff fde7 	bl	8003eb8 <move_window>
 80042ea:	4603      	mov	r3, r0
 80042ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80042ee:	7ffb      	ldrb	r3, [r7, #31]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d12a      	bne.n	800434a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004308:	4413      	add	r3, r2
 800430a:	4618      	mov	r0, r3
 800430c:	f7ff fb3c 	bl	8003988 <ld_dword>
 8004310:	4603      	mov	r3, r0
 8004312:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004316:	4323      	orrs	r3, r4
 8004318:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004328:	4413      	add	r3, r2
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff fb69 	bl	8003a04 <st_dword>
			fs->wflag = 1;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2201      	movs	r2, #1
 8004336:	70da      	strb	r2, [r3, #3]
			break;
 8004338:	e008      	b.n	800434c <put_fat+0x1ce>
		}
	}
 800433a:	bf00      	nop
 800433c:	e006      	b.n	800434c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800433e:	bf00      	nop
 8004340:	e004      	b.n	800434c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004342:	bf00      	nop
 8004344:	e002      	b.n	800434c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004346:	bf00      	nop
 8004348:	e000      	b.n	800434c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800434a:	bf00      	nop
	return res;
 800434c:	7ffb      	ldrb	r3, [r7, #31]
}
 800434e:	4618      	mov	r0, r3
 8004350:	3724      	adds	r7, #36	; 0x24
 8004352:	46bd      	mov	sp, r7
 8004354:	bd90      	pop	{r4, r7, pc}

08004356 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b088      	sub	sp, #32
 800435a:	af00      	add	r7, sp, #0
 800435c:	60f8      	str	r0, [r7, #12]
 800435e:	60b9      	str	r1, [r7, #8]
 8004360:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d904      	bls.n	800437c <remove_chain+0x26>
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	429a      	cmp	r2, r3
 800437a:	d301      	bcc.n	8004380 <remove_chain+0x2a>
 800437c:	2302      	movs	r3, #2
 800437e:	e04b      	b.n	8004418 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00c      	beq.n	80043a0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004386:	f04f 32ff 	mov.w	r2, #4294967295
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	69b8      	ldr	r0, [r7, #24]
 800438e:	f7ff fef6 	bl	800417e <put_fat>
 8004392:	4603      	mov	r3, r0
 8004394:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004396:	7ffb      	ldrb	r3, [r7, #31]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <remove_chain+0x4a>
 800439c:	7ffb      	ldrb	r3, [r7, #31]
 800439e:	e03b      	b.n	8004418 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80043a0:	68b9      	ldr	r1, [r7, #8]
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f7ff fe43 	bl	800402e <get_fat>
 80043a8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d031      	beq.n	8004414 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d101      	bne.n	80043ba <remove_chain+0x64>
 80043b6:	2302      	movs	r3, #2
 80043b8:	e02e      	b.n	8004418 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c0:	d101      	bne.n	80043c6 <remove_chain+0x70>
 80043c2:	2301      	movs	r3, #1
 80043c4:	e028      	b.n	8004418 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80043c6:	2200      	movs	r2, #0
 80043c8:	68b9      	ldr	r1, [r7, #8]
 80043ca:	69b8      	ldr	r0, [r7, #24]
 80043cc:	f7ff fed7 	bl	800417e <put_fat>
 80043d0:	4603      	mov	r3, r0
 80043d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80043d4:	7ffb      	ldrb	r3, [r7, #31]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <remove_chain+0x88>
 80043da:	7ffb      	ldrb	r3, [r7, #31]
 80043dc:	e01c      	b.n	8004418 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	691a      	ldr	r2, [r3, #16]
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	3b02      	subs	r3, #2
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d20b      	bcs.n	8004404 <remove_chain+0xae>
			fs->free_clst++;
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	1c5a      	adds	r2, r3, #1
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	791b      	ldrb	r3, [r3, #4]
 80043fa:	f043 0301 	orr.w	r3, r3, #1
 80043fe:	b2da      	uxtb	r2, r3
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	429a      	cmp	r2, r3
 8004410:	d3c6      	bcc.n	80043a0 <remove_chain+0x4a>
 8004412:	e000      	b.n	8004416 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004414:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3720      	adds	r7, #32
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b088      	sub	sp, #32
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10d      	bne.n	8004452 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d004      	beq.n	800444c <create_chain+0x2c>
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	429a      	cmp	r2, r3
 800444a:	d31b      	bcc.n	8004484 <create_chain+0x64>
 800444c:	2301      	movs	r3, #1
 800444e:	61bb      	str	r3, [r7, #24]
 8004450:	e018      	b.n	8004484 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004452:	6839      	ldr	r1, [r7, #0]
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7ff fdea 	bl	800402e <get_fat>
 800445a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d801      	bhi.n	8004466 <create_chain+0x46>
 8004462:	2301      	movs	r3, #1
 8004464:	e070      	b.n	8004548 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800446c:	d101      	bne.n	8004472 <create_chain+0x52>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	e06a      	b.n	8004548 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	429a      	cmp	r2, r3
 800447a:	d201      	bcs.n	8004480 <create_chain+0x60>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	e063      	b.n	8004548 <create_chain+0x128>
		scl = clst;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	3301      	adds	r3, #1
 800448c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	69fa      	ldr	r2, [r7, #28]
 8004494:	429a      	cmp	r2, r3
 8004496:	d307      	bcc.n	80044a8 <create_chain+0x88>
				ncl = 2;
 8004498:	2302      	movs	r3, #2
 800449a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800449c:	69fa      	ldr	r2, [r7, #28]
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d901      	bls.n	80044a8 <create_chain+0x88>
 80044a4:	2300      	movs	r3, #0
 80044a6:	e04f      	b.n	8004548 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80044a8:	69f9      	ldr	r1, [r7, #28]
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7ff fdbf 	bl	800402e <get_fat>
 80044b0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00e      	beq.n	80044d6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d003      	beq.n	80044c6 <create_chain+0xa6>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c4:	d101      	bne.n	80044ca <create_chain+0xaa>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	e03e      	b.n	8004548 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80044ca:	69fa      	ldr	r2, [r7, #28]
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d1da      	bne.n	8004488 <create_chain+0x68>
 80044d2:	2300      	movs	r3, #0
 80044d4:	e038      	b.n	8004548 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80044d6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80044d8:	f04f 32ff 	mov.w	r2, #4294967295
 80044dc:	69f9      	ldr	r1, [r7, #28]
 80044de:	6938      	ldr	r0, [r7, #16]
 80044e0:	f7ff fe4d 	bl	800417e <put_fat>
 80044e4:	4603      	mov	r3, r0
 80044e6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80044e8:	7dfb      	ldrb	r3, [r7, #23]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d109      	bne.n	8004502 <create_chain+0xe2>
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d006      	beq.n	8004502 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80044f4:	69fa      	ldr	r2, [r7, #28]
 80044f6:	6839      	ldr	r1, [r7, #0]
 80044f8:	6938      	ldr	r0, [r7, #16]
 80044fa:	f7ff fe40 	bl	800417e <put_fat>
 80044fe:	4603      	mov	r3, r0
 8004500:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004502:	7dfb      	ldrb	r3, [r7, #23]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d116      	bne.n	8004536 <create_chain+0x116>
		fs->last_clst = ncl;
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	69fa      	ldr	r2, [r7, #28]
 800450c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	691a      	ldr	r2, [r3, #16]
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	3b02      	subs	r3, #2
 8004518:	429a      	cmp	r2, r3
 800451a:	d804      	bhi.n	8004526 <create_chain+0x106>
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	1e5a      	subs	r2, r3, #1
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	791b      	ldrb	r3, [r3, #4]
 800452a:	f043 0301 	orr.w	r3, r3, #1
 800452e:	b2da      	uxtb	r2, r3
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	711a      	strb	r2, [r3, #4]
 8004534:	e007      	b.n	8004546 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004536:	7dfb      	ldrb	r3, [r7, #23]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d102      	bne.n	8004542 <create_chain+0x122>
 800453c:	f04f 33ff 	mov.w	r3, #4294967295
 8004540:	e000      	b.n	8004544 <create_chain+0x124>
 8004542:	2301      	movs	r3, #1
 8004544:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004546:	69fb      	ldr	r3, [r7, #28]
}
 8004548:	4618      	mov	r0, r3
 800454a:	3720      	adds	r7, #32
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004550:	b480      	push	{r7}
 8004552:	b087      	sub	sp, #28
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004564:	3304      	adds	r3, #4
 8004566:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	0a5b      	lsrs	r3, r3, #9
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	8952      	ldrh	r2, [r2, #10]
 8004570:	fbb3 f3f2 	udiv	r3, r3, r2
 8004574:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1d1a      	adds	r2, r3, #4
 800457a:	613a      	str	r2, [r7, #16]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <clmt_clust+0x3a>
 8004586:	2300      	movs	r3, #0
 8004588:	e010      	b.n	80045ac <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	429a      	cmp	r2, r3
 8004590:	d307      	bcc.n	80045a2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	617b      	str	r3, [r7, #20]
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	3304      	adds	r3, #4
 800459e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80045a0:	e7e9      	b.n	8004576 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80045a2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	4413      	add	r3, r2
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	371c      	adds	r7, #28
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045ce:	d204      	bcs.n	80045da <dir_sdi+0x22>
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	f003 031f 	and.w	r3, r3, #31
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <dir_sdi+0x26>
		return FR_INT_ERR;
 80045da:	2302      	movs	r3, #2
 80045dc:	e063      	b.n	80046a6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d106      	bne.n	80045fe <dir_sdi+0x46>
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d902      	bls.n	80045fe <dir_sdi+0x46>
		clst = fs->dirbase;
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10c      	bne.n	800461e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	095b      	lsrs	r3, r3, #5
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	8912      	ldrh	r2, [r2, #8]
 800460c:	4293      	cmp	r3, r2
 800460e:	d301      	bcc.n	8004614 <dir_sdi+0x5c>
 8004610:	2302      	movs	r3, #2
 8004612:	e048      	b.n	80046a6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	61da      	str	r2, [r3, #28]
 800461c:	e029      	b.n	8004672 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	895b      	ldrh	r3, [r3, #10]
 8004622:	025b      	lsls	r3, r3, #9
 8004624:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004626:	e019      	b.n	800465c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6979      	ldr	r1, [r7, #20]
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff fcfe 	bl	800402e <get_fat>
 8004632:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800463a:	d101      	bne.n	8004640 <dir_sdi+0x88>
 800463c:	2301      	movs	r3, #1
 800463e:	e032      	b.n	80046a6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d904      	bls.n	8004650 <dir_sdi+0x98>
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	429a      	cmp	r2, r3
 800464e:	d301      	bcc.n	8004654 <dir_sdi+0x9c>
 8004650:	2302      	movs	r3, #2
 8004652:	e028      	b.n	80046a6 <dir_sdi+0xee>
			ofs -= csz;
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	429a      	cmp	r2, r3
 8004662:	d2e1      	bcs.n	8004628 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8004664:	6979      	ldr	r1, [r7, #20]
 8004666:	6938      	ldr	r0, [r7, #16]
 8004668:	f7ff fcc2 	bl	8003ff0 <clust2sect>
 800466c:	4602      	mov	r2, r0
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	69db      	ldr	r3, [r3, #28]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <dir_sdi+0xcc>
 8004680:	2302      	movs	r3, #2
 8004682:	e010      	b.n	80046a6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	69da      	ldr	r2, [r3, #28]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	0a5b      	lsrs	r3, r3, #9
 800468c:	441a      	add	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800469e:	441a      	add	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3718      	adds	r7, #24
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b086      	sub	sp, #24
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
 80046b6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	3320      	adds	r3, #32
 80046c4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <dir_next+0x28>
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046d4:	d301      	bcc.n	80046da <dir_next+0x2c>
 80046d6:	2304      	movs	r3, #4
 80046d8:	e0aa      	b.n	8004830 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f040 8098 	bne.w	8004816 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10b      	bne.n	8004710 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	095b      	lsrs	r3, r3, #5
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	8912      	ldrh	r2, [r2, #8]
 8004700:	4293      	cmp	r3, r2
 8004702:	f0c0 8088 	bcc.w	8004816 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	61da      	str	r2, [r3, #28]
 800470c:	2304      	movs	r3, #4
 800470e:	e08f      	b.n	8004830 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	0a5b      	lsrs	r3, r3, #9
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	8952      	ldrh	r2, [r2, #10]
 8004718:	3a01      	subs	r2, #1
 800471a:	4013      	ands	r3, r2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d17a      	bne.n	8004816 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	4619      	mov	r1, r3
 8004728:	4610      	mov	r0, r2
 800472a:	f7ff fc80 	bl	800402e <get_fat>
 800472e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d801      	bhi.n	800473a <dir_next+0x8c>
 8004736:	2302      	movs	r3, #2
 8004738:	e07a      	b.n	8004830 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004740:	d101      	bne.n	8004746 <dir_next+0x98>
 8004742:	2301      	movs	r3, #1
 8004744:	e074      	b.n	8004830 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	429a      	cmp	r2, r3
 800474e:	d358      	bcc.n	8004802 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d104      	bne.n	8004760 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	61da      	str	r2, [r3, #28]
 800475c:	2304      	movs	r3, #4
 800475e:	e067      	b.n	8004830 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	4619      	mov	r1, r3
 8004768:	4610      	mov	r0, r2
 800476a:	f7ff fe59 	bl	8004420 <create_chain>
 800476e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <dir_next+0xcc>
 8004776:	2307      	movs	r3, #7
 8004778:	e05a      	b.n	8004830 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d101      	bne.n	8004784 <dir_next+0xd6>
 8004780:	2302      	movs	r3, #2
 8004782:	e055      	b.n	8004830 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800478a:	d101      	bne.n	8004790 <dir_next+0xe2>
 800478c:	2301      	movs	r3, #1
 800478e:	e04f      	b.n	8004830 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f7ff fb4d 	bl	8003e30 <sync_window>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d001      	beq.n	80047a0 <dir_next+0xf2>
 800479c:	2301      	movs	r3, #1
 800479e:	e047      	b.n	8004830 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	3330      	adds	r3, #48	; 0x30
 80047a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047a8:	2100      	movs	r1, #0
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7ff f977 	bl	8003a9e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80047b0:	2300      	movs	r3, #0
 80047b2:	613b      	str	r3, [r7, #16]
 80047b4:	6979      	ldr	r1, [r7, #20]
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f7ff fc1a 	bl	8003ff0 <clust2sect>
 80047bc:	4602      	mov	r2, r0
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80047c2:	e012      	b.n	80047ea <dir_next+0x13c>
						fs->wflag = 1;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2201      	movs	r2, #1
 80047c8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f7ff fb30 	bl	8003e30 <sync_window>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <dir_next+0x12c>
 80047d6:	2301      	movs	r3, #1
 80047d8:	e02a      	b.n	8004830 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	3301      	adds	r3, #1
 80047de:	613b      	str	r3, [r7, #16]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	895b      	ldrh	r3, [r3, #10]
 80047ee:	461a      	mov	r2, r3
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d3e6      	bcc.n	80047c4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad2      	subs	r2, r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004808:	6979      	ldr	r1, [r7, #20]
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f7ff fbf0 	bl	8003ff0 <clust2sect>
 8004810:	4602      	mov	r2, r0
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004828:	441a      	add	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3718      	adds	r7, #24
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004848:	2100      	movs	r1, #0
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7ff feb4 	bl	80045b8 <dir_sdi>
 8004850:	4603      	mov	r3, r0
 8004852:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004854:	7dfb      	ldrb	r3, [r7, #23]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d12b      	bne.n	80048b2 <dir_alloc+0x7a>
		n = 0;
 800485a:	2300      	movs	r3, #0
 800485c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	69db      	ldr	r3, [r3, #28]
 8004862:	4619      	mov	r1, r3
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f7ff fb27 	bl	8003eb8 <move_window>
 800486a:	4603      	mov	r3, r0
 800486c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800486e:	7dfb      	ldrb	r3, [r7, #23]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d11d      	bne.n	80048b0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	2be5      	cmp	r3, #229	; 0xe5
 800487c:	d004      	beq.n	8004888 <dir_alloc+0x50>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d107      	bne.n	8004898 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	3301      	adds	r3, #1
 800488c:	613b      	str	r3, [r7, #16]
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	429a      	cmp	r2, r3
 8004894:	d102      	bne.n	800489c <dir_alloc+0x64>
 8004896:	e00c      	b.n	80048b2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004898:	2300      	movs	r3, #0
 800489a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800489c:	2101      	movs	r1, #1
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7ff ff05 	bl	80046ae <dir_next>
 80048a4:	4603      	mov	r3, r0
 80048a6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80048a8:	7dfb      	ldrb	r3, [r7, #23]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d0d7      	beq.n	800485e <dir_alloc+0x26>
 80048ae:	e000      	b.n	80048b2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80048b0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80048b2:	7dfb      	ldrb	r3, [r7, #23]
 80048b4:	2b04      	cmp	r3, #4
 80048b6:	d101      	bne.n	80048bc <dir_alloc+0x84>
 80048b8:	2307      	movs	r3, #7
 80048ba:	75fb      	strb	r3, [r7, #23]
	return res;
 80048bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3718      	adds	r7, #24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b084      	sub	sp, #16
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
 80048ce:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	331a      	adds	r3, #26
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7ff f83f 	bl	8003958 <ld_word>
 80048da:	4603      	mov	r3, r0
 80048dc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	2b03      	cmp	r3, #3
 80048e4:	d109      	bne.n	80048fa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	3314      	adds	r3, #20
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7ff f834 	bl	8003958 <ld_word>
 80048f0:	4603      	mov	r3, r0
 80048f2:	041b      	lsls	r3, r3, #16
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80048fa:	68fb      	ldr	r3, [r7, #12]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	331a      	adds	r3, #26
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	b292      	uxth	r2, r2
 8004918:	4611      	mov	r1, r2
 800491a:	4618      	mov	r0, r3
 800491c:	f7ff f857 	bl	80039ce <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	2b03      	cmp	r3, #3
 8004926:	d109      	bne.n	800493c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	f103 0214 	add.w	r2, r3, #20
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	0c1b      	lsrs	r3, r3, #16
 8004932:	b29b      	uxth	r3, r3
 8004934:	4619      	mov	r1, r3
 8004936:	4610      	mov	r0, r2
 8004938:	f7ff f849 	bl	80039ce <st_word>
	}
}
 800493c:	bf00      	nop
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004952:	2100      	movs	r1, #0
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f7ff fe2f 	bl	80045b8 <dir_sdi>
 800495a:	4603      	mov	r3, r0
 800495c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800495e:	7dfb      	ldrb	r3, [r7, #23]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <dir_find+0x24>
 8004964:	7dfb      	ldrb	r3, [r7, #23]
 8004966:	e03e      	b.n	80049e6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	69db      	ldr	r3, [r3, #28]
 800496c:	4619      	mov	r1, r3
 800496e:	6938      	ldr	r0, [r7, #16]
 8004970:	f7ff faa2 	bl	8003eb8 <move_window>
 8004974:	4603      	mov	r3, r0
 8004976:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004978:	7dfb      	ldrb	r3, [r7, #23]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d12f      	bne.n	80049de <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004986:	7bfb      	ldrb	r3, [r7, #15]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d102      	bne.n	8004992 <dir_find+0x4e>
 800498c:	2304      	movs	r3, #4
 800498e:	75fb      	strb	r3, [r7, #23]
 8004990:	e028      	b.n	80049e4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	330b      	adds	r3, #11
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800499e:	b2da      	uxtb	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	330b      	adds	r3, #11
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	f003 0308 	and.w	r3, r3, #8
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d10a      	bne.n	80049ca <dir_find+0x86>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a18      	ldr	r0, [r3, #32]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	3324      	adds	r3, #36	; 0x24
 80049bc:	220b      	movs	r2, #11
 80049be:	4619      	mov	r1, r3
 80049c0:	f7ff f888 	bl	8003ad4 <mem_cmp>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00b      	beq.n	80049e2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80049ca:	2100      	movs	r1, #0
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f7ff fe6e 	bl	80046ae <dir_next>
 80049d2:	4603      	mov	r3, r0
 80049d4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80049d6:	7dfb      	ldrb	r3, [r7, #23]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d0c5      	beq.n	8004968 <dir_find+0x24>
 80049dc:	e002      	b.n	80049e4 <dir_find+0xa0>
		if (res != FR_OK) break;
 80049de:	bf00      	nop
 80049e0:	e000      	b.n	80049e4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80049e2:	bf00      	nop

	return res;
 80049e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3718      	adds	r7, #24
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b084      	sub	sp, #16
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80049fc:	2101      	movs	r1, #1
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7ff ff1a 	bl	8004838 <dir_alloc>
 8004a04:	4603      	mov	r3, r0
 8004a06:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d11c      	bne.n	8004a48 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	69db      	ldr	r3, [r3, #28]
 8004a12:	4619      	mov	r1, r3
 8004a14:	68b8      	ldr	r0, [r7, #8]
 8004a16:	f7ff fa4f 	bl	8003eb8 <move_window>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004a1e:	7bfb      	ldrb	r3, [r7, #15]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d111      	bne.n	8004a48 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7ff f836 	bl	8003a9e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a18      	ldr	r0, [r3, #32]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	3324      	adds	r3, #36	; 0x24
 8004a3a:	220b      	movs	r2, #11
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	f7ff f80d 	bl	8003a5c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	2201      	movs	r2, #1
 8004a46:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
	...

08004a54 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b088      	sub	sp, #32
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	60fb      	str	r3, [r7, #12]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	3324      	adds	r3, #36	; 0x24
 8004a68:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8004a6a:	220b      	movs	r2, #11
 8004a6c:	2120      	movs	r1, #32
 8004a6e:	68b8      	ldr	r0, [r7, #8]
 8004a70:	f7ff f815 	bl	8003a9e <mem_set>
	si = i = 0; ni = 8;
 8004a74:	2300      	movs	r3, #0
 8004a76:	613b      	str	r3, [r7, #16]
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	61fb      	str	r3, [r7, #28]
 8004a7c:	2308      	movs	r3, #8
 8004a7e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	1c5a      	adds	r2, r3, #1
 8004a84:	61fa      	str	r2, [r7, #28]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	4413      	add	r3, r2
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004a8e:	7efb      	ldrb	r3, [r7, #27]
 8004a90:	2b20      	cmp	r3, #32
 8004a92:	d94e      	bls.n	8004b32 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8004a94:	7efb      	ldrb	r3, [r7, #27]
 8004a96:	2b2f      	cmp	r3, #47	; 0x2f
 8004a98:	d006      	beq.n	8004aa8 <create_name+0x54>
 8004a9a:	7efb      	ldrb	r3, [r7, #27]
 8004a9c:	2b5c      	cmp	r3, #92	; 0x5c
 8004a9e:	d110      	bne.n	8004ac2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004aa0:	e002      	b.n	8004aa8 <create_name+0x54>
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	61fb      	str	r3, [r7, #28]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	4413      	add	r3, r2
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	2b2f      	cmp	r3, #47	; 0x2f
 8004ab2:	d0f6      	beq.n	8004aa2 <create_name+0x4e>
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	4413      	add	r3, r2
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	2b5c      	cmp	r3, #92	; 0x5c
 8004abe:	d0f0      	beq.n	8004aa2 <create_name+0x4e>
			break;
 8004ac0:	e038      	b.n	8004b34 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8004ac2:	7efb      	ldrb	r3, [r7, #27]
 8004ac4:	2b2e      	cmp	r3, #46	; 0x2e
 8004ac6:	d003      	beq.n	8004ad0 <create_name+0x7c>
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d30c      	bcc.n	8004aea <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	2b0b      	cmp	r3, #11
 8004ad4:	d002      	beq.n	8004adc <create_name+0x88>
 8004ad6:	7efb      	ldrb	r3, [r7, #27]
 8004ad8:	2b2e      	cmp	r3, #46	; 0x2e
 8004ada:	d001      	beq.n	8004ae0 <create_name+0x8c>
 8004adc:	2306      	movs	r3, #6
 8004ade:	e044      	b.n	8004b6a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8004ae0:	2308      	movs	r3, #8
 8004ae2:	613b      	str	r3, [r7, #16]
 8004ae4:	230b      	movs	r3, #11
 8004ae6:	617b      	str	r3, [r7, #20]
			continue;
 8004ae8:	e022      	b.n	8004b30 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8004aea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	da04      	bge.n	8004afc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004af2:	7efb      	ldrb	r3, [r7, #27]
 8004af4:	3b80      	subs	r3, #128	; 0x80
 8004af6:	4a1f      	ldr	r2, [pc, #124]	; (8004b74 <create_name+0x120>)
 8004af8:	5cd3      	ldrb	r3, [r2, r3]
 8004afa:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8004afc:	7efb      	ldrb	r3, [r7, #27]
 8004afe:	4619      	mov	r1, r3
 8004b00:	481d      	ldr	r0, [pc, #116]	; (8004b78 <create_name+0x124>)
 8004b02:	f7ff f80e 	bl	8003b22 <chk_chr>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d001      	beq.n	8004b10 <create_name+0xbc>
 8004b0c:	2306      	movs	r3, #6
 8004b0e:	e02c      	b.n	8004b6a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8004b10:	7efb      	ldrb	r3, [r7, #27]
 8004b12:	2b60      	cmp	r3, #96	; 0x60
 8004b14:	d905      	bls.n	8004b22 <create_name+0xce>
 8004b16:	7efb      	ldrb	r3, [r7, #27]
 8004b18:	2b7a      	cmp	r3, #122	; 0x7a
 8004b1a:	d802      	bhi.n	8004b22 <create_name+0xce>
 8004b1c:	7efb      	ldrb	r3, [r7, #27]
 8004b1e:	3b20      	subs	r3, #32
 8004b20:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	613a      	str	r2, [r7, #16]
 8004b28:	68ba      	ldr	r2, [r7, #8]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	7efa      	ldrb	r2, [r7, #27]
 8004b2e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004b30:	e7a6      	b.n	8004a80 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004b32:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	441a      	add	r2, r3
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <create_name+0xf4>
 8004b44:	2306      	movs	r3, #6
 8004b46:	e010      	b.n	8004b6a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	2be5      	cmp	r3, #229	; 0xe5
 8004b4e:	d102      	bne.n	8004b56 <create_name+0x102>
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2205      	movs	r2, #5
 8004b54:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004b56:	7efb      	ldrb	r3, [r7, #27]
 8004b58:	2b20      	cmp	r3, #32
 8004b5a:	d801      	bhi.n	8004b60 <create_name+0x10c>
 8004b5c:	2204      	movs	r2, #4
 8004b5e:	e000      	b.n	8004b62 <create_name+0x10e>
 8004b60:	2200      	movs	r2, #0
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	330b      	adds	r3, #11
 8004b66:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004b68:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3720      	adds	r7, #32
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	08007284 	.word	0x08007284
 8004b78:	08007228 	.word	0x08007228

08004b7c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004b90:	e002      	b.n	8004b98 <follow_path+0x1c>
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	3301      	adds	r3, #1
 8004b96:	603b      	str	r3, [r7, #0]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	2b2f      	cmp	r3, #47	; 0x2f
 8004b9e:	d0f8      	beq.n	8004b92 <follow_path+0x16>
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	2b5c      	cmp	r3, #92	; 0x5c
 8004ba6:	d0f4      	beq.n	8004b92 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	2200      	movs	r2, #0
 8004bac:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	2b1f      	cmp	r3, #31
 8004bb4:	d80a      	bhi.n	8004bcc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2280      	movs	r2, #128	; 0x80
 8004bba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f7ff fcf9 	bl	80045b8 <dir_sdi>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	75fb      	strb	r3, [r7, #23]
 8004bca:	e043      	b.n	8004c54 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004bcc:	463b      	mov	r3, r7
 8004bce:	4619      	mov	r1, r3
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f7ff ff3f 	bl	8004a54 <create_name>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004bda:	7dfb      	ldrb	r3, [r7, #23]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d134      	bne.n	8004c4a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f7ff feaf 	bl	8004944 <dir_find>
 8004be6:	4603      	mov	r3, r0
 8004be8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004bf0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004bf2:	7dfb      	ldrb	r3, [r7, #23]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00a      	beq.n	8004c0e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004bf8:	7dfb      	ldrb	r3, [r7, #23]
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	d127      	bne.n	8004c4e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004bfe:	7afb      	ldrb	r3, [r7, #11]
 8004c00:	f003 0304 	and.w	r3, r3, #4
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d122      	bne.n	8004c4e <follow_path+0xd2>
 8004c08:	2305      	movs	r3, #5
 8004c0a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8004c0c:	e01f      	b.n	8004c4e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004c0e:	7afb      	ldrb	r3, [r7, #11]
 8004c10:	f003 0304 	and.w	r3, r3, #4
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d11c      	bne.n	8004c52 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	799b      	ldrb	r3, [r3, #6]
 8004c1c:	f003 0310 	and.w	r3, r3, #16
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d102      	bne.n	8004c2a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004c24:	2305      	movs	r3, #5
 8004c26:	75fb      	strb	r3, [r7, #23]
 8004c28:	e014      	b.n	8004c54 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c38:	4413      	add	r3, r2
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f7ff fe42 	bl	80048c6 <ld_clust>
 8004c42:	4602      	mov	r2, r0
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004c48:	e7c0      	b.n	8004bcc <follow_path+0x50>
			if (res != FR_OK) break;
 8004c4a:	bf00      	nop
 8004c4c:	e002      	b.n	8004c54 <follow_path+0xd8>
				break;
 8004c4e:	bf00      	nop
 8004c50:	e000      	b.n	8004c54 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004c52:	bf00      	nop
			}
		}
	}

	return res;
 8004c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3718      	adds	r7, #24
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b087      	sub	sp, #28
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004c66:	f04f 33ff 	mov.w	r3, #4294967295
 8004c6a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d031      	beq.n	8004cd8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	617b      	str	r3, [r7, #20]
 8004c7a:	e002      	b.n	8004c82 <get_ldnumber+0x24>
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	617b      	str	r3, [r7, #20]
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	2b20      	cmp	r3, #32
 8004c88:	d903      	bls.n	8004c92 <get_ldnumber+0x34>
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	2b3a      	cmp	r3, #58	; 0x3a
 8004c90:	d1f4      	bne.n	8004c7c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	2b3a      	cmp	r3, #58	; 0x3a
 8004c98:	d11c      	bne.n	8004cd4 <get_ldnumber+0x76>
			tp = *path;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	1c5a      	adds	r2, r3, #1
 8004ca4:	60fa      	str	r2, [r7, #12]
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	3b30      	subs	r3, #48	; 0x30
 8004caa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	2b09      	cmp	r3, #9
 8004cb0:	d80e      	bhi.n	8004cd0 <get_ldnumber+0x72>
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d10a      	bne.n	8004cd0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d107      	bne.n	8004cd0 <get_ldnumber+0x72>
					vol = (int)i;
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	617b      	str	r3, [r7, #20]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	697a      	ldr	r2, [r7, #20]
 8004cce:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	e002      	b.n	8004cda <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004cd8:	693b      	ldr	r3, [r7, #16]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	371c      	adds	r7, #28
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
	...

08004ce8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	70da      	strb	r2, [r3, #3]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8004cfe:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004d00:	6839      	ldr	r1, [r7, #0]
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7ff f8d8 	bl	8003eb8 <move_window>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <check_fs+0x2a>
 8004d0e:	2304      	movs	r3, #4
 8004d10:	e038      	b.n	8004d84 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	3330      	adds	r3, #48	; 0x30
 8004d16:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7fe fe1c 	bl	8003958 <ld_word>
 8004d20:	4603      	mov	r3, r0
 8004d22:	461a      	mov	r2, r3
 8004d24:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d001      	beq.n	8004d30 <check_fs+0x48>
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e029      	b.n	8004d84 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d36:	2be9      	cmp	r3, #233	; 0xe9
 8004d38:	d009      	beq.n	8004d4e <check_fs+0x66>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d40:	2beb      	cmp	r3, #235	; 0xeb
 8004d42:	d11e      	bne.n	8004d82 <check_fs+0x9a>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004d4a:	2b90      	cmp	r3, #144	; 0x90
 8004d4c:	d119      	bne.n	8004d82 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	3330      	adds	r3, #48	; 0x30
 8004d52:	3336      	adds	r3, #54	; 0x36
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7fe fe17 	bl	8003988 <ld_dword>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004d60:	4a0a      	ldr	r2, [pc, #40]	; (8004d8c <check_fs+0xa4>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d101      	bne.n	8004d6a <check_fs+0x82>
 8004d66:	2300      	movs	r3, #0
 8004d68:	e00c      	b.n	8004d84 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	3330      	adds	r3, #48	; 0x30
 8004d6e:	3352      	adds	r3, #82	; 0x52
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7fe fe09 	bl	8003988 <ld_dword>
 8004d76:	4603      	mov	r3, r0
 8004d78:	4a05      	ldr	r2, [pc, #20]	; (8004d90 <check_fs+0xa8>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d101      	bne.n	8004d82 <check_fs+0x9a>
 8004d7e:	2300      	movs	r3, #0
 8004d80:	e000      	b.n	8004d84 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004d82:	2302      	movs	r3, #2
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	00544146 	.word	0x00544146
 8004d90:	33544146 	.word	0x33544146

08004d94 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b096      	sub	sp, #88	; 0x58
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	2200      	movs	r2, #0
 8004da6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f7ff ff58 	bl	8004c5e <get_ldnumber>
 8004dae:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	da01      	bge.n	8004dba <find_volume+0x26>
 8004db6:	230b      	movs	r3, #11
 8004db8:	e22d      	b.n	8005216 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004dba:	4aa1      	ldr	r2, [pc, #644]	; (8005040 <find_volume+0x2ac>)
 8004dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dc2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <find_volume+0x3a>
 8004dca:	230c      	movs	r3, #12
 8004dcc:	e223      	b.n	8005216 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dd2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004dd4:	79fb      	ldrb	r3, [r7, #7]
 8004dd6:	f023 0301 	bic.w	r3, r3, #1
 8004dda:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d01a      	beq.n	8004e1a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de6:	785b      	ldrb	r3, [r3, #1]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7fe fd17 	bl	800381c <disk_status>
 8004dee:	4603      	mov	r3, r0
 8004df0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004df4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d10c      	bne.n	8004e1a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004e00:	79fb      	ldrb	r3, [r7, #7]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d007      	beq.n	8004e16 <find_volume+0x82>
 8004e06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004e0a:	f003 0304 	and.w	r3, r3, #4
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004e12:	230a      	movs	r3, #10
 8004e14:	e1ff      	b.n	8005216 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8004e16:	2300      	movs	r3, #0
 8004e18:	e1fd      	b.n	8005216 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e22:	b2da      	uxtb	r2, r3
 8004e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e26:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2a:	785b      	ldrb	r3, [r3, #1]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7fe fd0f 	bl	8003850 <disk_initialize>
 8004e32:	4603      	mov	r3, r0
 8004e34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004e38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d001      	beq.n	8004e48 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004e44:	2303      	movs	r3, #3
 8004e46:	e1e6      	b.n	8005216 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004e48:	79fb      	ldrb	r3, [r7, #7]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d007      	beq.n	8004e5e <find_volume+0xca>
 8004e4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004e52:	f003 0304 	and.w	r3, r3, #4
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8004e5a:	230a      	movs	r3, #10
 8004e5c:	e1db      	b.n	8005216 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004e62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004e64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004e66:	f7ff ff3f 	bl	8004ce8 <check_fs>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004e70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d149      	bne.n	8004f0c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004e78:	2300      	movs	r3, #0
 8004e7a:	643b      	str	r3, [r7, #64]	; 0x40
 8004e7c:	e01e      	b.n	8004ebc <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e80:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004e84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e86:	011b      	lsls	r3, r3, #4
 8004e88:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8004e8c:	4413      	add	r3, r2
 8004e8e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e92:	3304      	adds	r3, #4
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d006      	beq.n	8004ea8 <find_volume+0x114>
 8004e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9c:	3308      	adds	r3, #8
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7fe fd72 	bl	8003988 <ld_dword>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	e000      	b.n	8004eaa <find_volume+0x116>
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	3358      	adds	r3, #88	; 0x58
 8004eb0:	443b      	add	r3, r7
 8004eb2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004eb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eb8:	3301      	adds	r3, #1
 8004eba:	643b      	str	r3, [r7, #64]	; 0x40
 8004ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ebe:	2b03      	cmp	r3, #3
 8004ec0:	d9dd      	bls.n	8004e7e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8004ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d002      	beq.n	8004ed2 <find_volume+0x13e>
 8004ecc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8004ed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	3358      	adds	r3, #88	; 0x58
 8004ed8:	443b      	add	r3, r7
 8004eda:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004ede:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d005      	beq.n	8004ef2 <find_volume+0x15e>
 8004ee6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004ee8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004eea:	f7ff fefd 	bl	8004ce8 <check_fs>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	e000      	b.n	8004ef4 <find_volume+0x160>
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004ef8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d905      	bls.n	8004f0c <find_volume+0x178>
 8004f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f02:	3301      	adds	r3, #1
 8004f04:	643b      	str	r3, [r7, #64]	; 0x40
 8004f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f08:	2b03      	cmp	r3, #3
 8004f0a:	d9e2      	bls.n	8004ed2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004f0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f10:	2b04      	cmp	r3, #4
 8004f12:	d101      	bne.n	8004f18 <find_volume+0x184>
 8004f14:	2301      	movs	r3, #1
 8004f16:	e17e      	b.n	8005216 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004f18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d901      	bls.n	8004f24 <find_volume+0x190>
 8004f20:	230d      	movs	r3, #13
 8004f22:	e178      	b.n	8005216 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f26:	3330      	adds	r3, #48	; 0x30
 8004f28:	330b      	adds	r3, #11
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7fe fd14 	bl	8003958 <ld_word>
 8004f30:	4603      	mov	r3, r0
 8004f32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f36:	d001      	beq.n	8004f3c <find_volume+0x1a8>
 8004f38:	230d      	movs	r3, #13
 8004f3a:	e16c      	b.n	8005216 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3e:	3330      	adds	r3, #48	; 0x30
 8004f40:	3316      	adds	r3, #22
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7fe fd08 	bl	8003958 <ld_word>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d106      	bne.n	8004f60 <find_volume+0x1cc>
 8004f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f54:	3330      	adds	r3, #48	; 0x30
 8004f56:	3324      	adds	r3, #36	; 0x24
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7fe fd15 	bl	8003988 <ld_dword>
 8004f5e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8004f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f64:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f68:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8004f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f72:	789b      	ldrb	r3, [r3, #2]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d005      	beq.n	8004f84 <find_volume+0x1f0>
 8004f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7a:	789b      	ldrb	r3, [r3, #2]
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d001      	beq.n	8004f84 <find_volume+0x1f0>
 8004f80:	230d      	movs	r3, #13
 8004f82:	e148      	b.n	8005216 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f86:	789b      	ldrb	r3, [r3, #2]
 8004f88:	461a      	mov	r2, r3
 8004f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f8c:	fb02 f303 	mul.w	r3, r2, r3
 8004f90:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa0:	895b      	ldrh	r3, [r3, #10]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d008      	beq.n	8004fb8 <find_volume+0x224>
 8004fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa8:	895b      	ldrh	r3, [r3, #10]
 8004faa:	461a      	mov	r2, r3
 8004fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fae:	895b      	ldrh	r3, [r3, #10]
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d001      	beq.n	8004fbc <find_volume+0x228>
 8004fb8:	230d      	movs	r3, #13
 8004fba:	e12c      	b.n	8005216 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fbe:	3330      	adds	r3, #48	; 0x30
 8004fc0:	3311      	adds	r3, #17
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7fe fcc8 	bl	8003958 <ld_word>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	461a      	mov	r2, r3
 8004fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fce:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd2:	891b      	ldrh	r3, [r3, #8]
 8004fd4:	f003 030f 	and.w	r3, r3, #15
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <find_volume+0x24e>
 8004fde:	230d      	movs	r3, #13
 8004fe0:	e119      	b.n	8005216 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe4:	3330      	adds	r3, #48	; 0x30
 8004fe6:	3313      	adds	r3, #19
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7fe fcb5 	bl	8003958 <ld_word>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d106      	bne.n	8005006 <find_volume+0x272>
 8004ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffa:	3330      	adds	r3, #48	; 0x30
 8004ffc:	3320      	adds	r3, #32
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fe fcc2 	bl	8003988 <ld_dword>
 8005004:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005008:	3330      	adds	r3, #48	; 0x30
 800500a:	330e      	adds	r3, #14
 800500c:	4618      	mov	r0, r3
 800500e:	f7fe fca3 	bl	8003958 <ld_word>
 8005012:	4603      	mov	r3, r0
 8005014:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005016:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <find_volume+0x28c>
 800501c:	230d      	movs	r3, #13
 800501e:	e0fa      	b.n	8005216 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005020:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005024:	4413      	add	r3, r2
 8005026:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005028:	8912      	ldrh	r2, [r2, #8]
 800502a:	0912      	lsrs	r2, r2, #4
 800502c:	b292      	uxth	r2, r2
 800502e:	4413      	add	r3, r2
 8005030:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005032:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005036:	429a      	cmp	r2, r3
 8005038:	d204      	bcs.n	8005044 <find_volume+0x2b0>
 800503a:	230d      	movs	r3, #13
 800503c:	e0eb      	b.n	8005216 <find_volume+0x482>
 800503e:	bf00      	nop
 8005040:	2000015c 	.word	0x2000015c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005044:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800504c:	8952      	ldrh	r2, [r2, #10]
 800504e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005052:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <find_volume+0x2ca>
 800505a:	230d      	movs	r3, #13
 800505c:	e0db      	b.n	8005216 <find_volume+0x482>
		fmt = FS_FAT32;
 800505e:	2303      	movs	r3, #3
 8005060:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005066:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800506a:	4293      	cmp	r3, r2
 800506c:	d802      	bhi.n	8005074 <find_volume+0x2e0>
 800506e:	2302      	movs	r3, #2
 8005070:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	f640 72f5 	movw	r2, #4085	; 0xff5
 800507a:	4293      	cmp	r3, r2
 800507c:	d802      	bhi.n	8005084 <find_volume+0x2f0>
 800507e:	2301      	movs	r3, #1
 8005080:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	1c9a      	adds	r2, r3, #2
 8005088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800508c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005090:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005092:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005096:	441a      	add	r2, r3
 8005098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800509a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800509c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800509e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a0:	441a      	add	r2, r3
 80050a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a4:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80050a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80050aa:	2b03      	cmp	r3, #3
 80050ac:	d11e      	bne.n	80050ec <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80050ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b0:	3330      	adds	r3, #48	; 0x30
 80050b2:	332a      	adds	r3, #42	; 0x2a
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7fe fc4f 	bl	8003958 <ld_word>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d001      	beq.n	80050c4 <find_volume+0x330>
 80050c0:	230d      	movs	r3, #13
 80050c2:	e0a8      	b.n	8005216 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80050c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c6:	891b      	ldrh	r3, [r3, #8]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d001      	beq.n	80050d0 <find_volume+0x33c>
 80050cc:	230d      	movs	r3, #13
 80050ce:	e0a2      	b.n	8005216 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80050d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d2:	3330      	adds	r3, #48	; 0x30
 80050d4:	332c      	adds	r3, #44	; 0x2c
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7fe fc56 	bl	8003988 <ld_dword>
 80050dc:	4602      	mov	r2, r0
 80050de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80050e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	647b      	str	r3, [r7, #68]	; 0x44
 80050ea:	e01f      	b.n	800512c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80050ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ee:	891b      	ldrh	r3, [r3, #8]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d101      	bne.n	80050f8 <find_volume+0x364>
 80050f4:	230d      	movs	r3, #13
 80050f6:	e08e      	b.n	8005216 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80050f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fa:	6a1a      	ldr	r2, [r3, #32]
 80050fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050fe:	441a      	add	r2, r3
 8005100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005102:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005104:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005108:	2b02      	cmp	r3, #2
 800510a:	d103      	bne.n	8005114 <find_volume+0x380>
 800510c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	005b      	lsls	r3, r3, #1
 8005112:	e00a      	b.n	800512a <find_volume+0x396>
 8005114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005116:	695a      	ldr	r2, [r3, #20]
 8005118:	4613      	mov	r3, r2
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	4413      	add	r3, r2
 800511e:	085a      	lsrs	r2, r3, #1
 8005120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800512a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800512c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512e:	699a      	ldr	r2, [r3, #24]
 8005130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005132:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005136:	0a5b      	lsrs	r3, r3, #9
 8005138:	429a      	cmp	r2, r3
 800513a:	d201      	bcs.n	8005140 <find_volume+0x3ac>
 800513c:	230d      	movs	r3, #13
 800513e:	e06a      	b.n	8005216 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005142:	f04f 32ff 	mov.w	r2, #4294967295
 8005146:	611a      	str	r2, [r3, #16]
 8005148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514a:	691a      	ldr	r2, [r3, #16]
 800514c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8005150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005152:	2280      	movs	r2, #128	; 0x80
 8005154:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005156:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800515a:	2b03      	cmp	r3, #3
 800515c:	d149      	bne.n	80051f2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800515e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005160:	3330      	adds	r3, #48	; 0x30
 8005162:	3330      	adds	r3, #48	; 0x30
 8005164:	4618      	mov	r0, r3
 8005166:	f7fe fbf7 	bl	8003958 <ld_word>
 800516a:	4603      	mov	r3, r0
 800516c:	2b01      	cmp	r3, #1
 800516e:	d140      	bne.n	80051f2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005172:	3301      	adds	r3, #1
 8005174:	4619      	mov	r1, r3
 8005176:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005178:	f7fe fe9e 	bl	8003eb8 <move_window>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d137      	bne.n	80051f2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8005182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005184:	2200      	movs	r2, #0
 8005186:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518a:	3330      	adds	r3, #48	; 0x30
 800518c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005190:	4618      	mov	r0, r3
 8005192:	f7fe fbe1 	bl	8003958 <ld_word>
 8005196:	4603      	mov	r3, r0
 8005198:	461a      	mov	r2, r3
 800519a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800519e:	429a      	cmp	r2, r3
 80051a0:	d127      	bne.n	80051f2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80051a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a4:	3330      	adds	r3, #48	; 0x30
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7fe fbee 	bl	8003988 <ld_dword>
 80051ac:	4603      	mov	r3, r0
 80051ae:	4a1c      	ldr	r2, [pc, #112]	; (8005220 <find_volume+0x48c>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d11e      	bne.n	80051f2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80051b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b6:	3330      	adds	r3, #48	; 0x30
 80051b8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80051bc:	4618      	mov	r0, r3
 80051be:	f7fe fbe3 	bl	8003988 <ld_dword>
 80051c2:	4603      	mov	r3, r0
 80051c4:	4a17      	ldr	r2, [pc, #92]	; (8005224 <find_volume+0x490>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d113      	bne.n	80051f2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80051ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051cc:	3330      	adds	r3, #48	; 0x30
 80051ce:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7fe fbd8 	bl	8003988 <ld_dword>
 80051d8:	4602      	mov	r2, r0
 80051da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051dc:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80051de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e0:	3330      	adds	r3, #48	; 0x30
 80051e2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7fe fbce 	bl	8003988 <ld_dword>
 80051ec:	4602      	mov	r2, r0
 80051ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80051f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80051f8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80051fa:	4b0b      	ldr	r3, [pc, #44]	; (8005228 <find_volume+0x494>)
 80051fc:	881b      	ldrh	r3, [r3, #0]
 80051fe:	3301      	adds	r3, #1
 8005200:	b29a      	uxth	r2, r3
 8005202:	4b09      	ldr	r3, [pc, #36]	; (8005228 <find_volume+0x494>)
 8005204:	801a      	strh	r2, [r3, #0]
 8005206:	4b08      	ldr	r3, [pc, #32]	; (8005228 <find_volume+0x494>)
 8005208:	881a      	ldrh	r2, [r3, #0]
 800520a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800520e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005210:	f7fe fdea 	bl	8003de8 <clear_lock>
#endif
	return FR_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3758      	adds	r7, #88	; 0x58
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	41615252 	.word	0x41615252
 8005224:	61417272 	.word	0x61417272
 8005228:	20000160 	.word	0x20000160

0800522c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005236:	2309      	movs	r3, #9
 8005238:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d01c      	beq.n	800527a <validate+0x4e>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d018      	beq.n	800527a <validate+0x4e>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d013      	beq.n	800527a <validate+0x4e>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	889a      	ldrh	r2, [r3, #4]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	88db      	ldrh	r3, [r3, #6]
 800525c:	429a      	cmp	r2, r3
 800525e:	d10c      	bne.n	800527a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	785b      	ldrb	r3, [r3, #1]
 8005266:	4618      	mov	r0, r3
 8005268:	f7fe fad8 	bl	800381c <disk_status>
 800526c:	4603      	mov	r3, r0
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <validate+0x4e>
			res = FR_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800527a:	7bfb      	ldrb	r3, [r7, #15]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d102      	bne.n	8005286 <validate+0x5a>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	e000      	b.n	8005288 <validate+0x5c>
 8005286:	2300      	movs	r3, #0
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	6013      	str	r3, [r2, #0]
	return res;
 800528c:	7bfb      	ldrb	r3, [r7, #15]
}
 800528e:	4618      	mov	r0, r3
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
	...

08005298 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b088      	sub	sp, #32
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	4613      	mov	r3, r2
 80052a4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80052aa:	f107 0310 	add.w	r3, r7, #16
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7ff fcd5 	bl	8004c5e <get_ldnumber>
 80052b4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	da01      	bge.n	80052c0 <f_mount+0x28>
 80052bc:	230b      	movs	r3, #11
 80052be:	e02b      	b.n	8005318 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80052c0:	4a17      	ldr	r2, [pc, #92]	; (8005320 <f_mount+0x88>)
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052c8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d005      	beq.n	80052dc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80052d0:	69b8      	ldr	r0, [r7, #24]
 80052d2:	f7fe fd89 	bl	8003de8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	2200      	movs	r2, #0
 80052da:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d002      	beq.n	80052e8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	490d      	ldr	r1, [pc, #52]	; (8005320 <f_mount+0x88>)
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d002      	beq.n	80052fe <f_mount+0x66>
 80052f8:	79fb      	ldrb	r3, [r7, #7]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d001      	beq.n	8005302 <f_mount+0x6a>
 80052fe:	2300      	movs	r3, #0
 8005300:	e00a      	b.n	8005318 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005302:	f107 010c 	add.w	r1, r7, #12
 8005306:	f107 0308 	add.w	r3, r7, #8
 800530a:	2200      	movs	r2, #0
 800530c:	4618      	mov	r0, r3
 800530e:	f7ff fd41 	bl	8004d94 <find_volume>
 8005312:	4603      	mov	r3, r0
 8005314:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005316:	7dfb      	ldrb	r3, [r7, #23]
}
 8005318:	4618      	mov	r0, r3
 800531a:	3720      	adds	r7, #32
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	2000015c 	.word	0x2000015c

08005324 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b098      	sub	sp, #96	; 0x60
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	4613      	mov	r3, r2
 8005330:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d101      	bne.n	800533c <f_open+0x18>
 8005338:	2309      	movs	r3, #9
 800533a:	e1ad      	b.n	8005698 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800533c:	79fb      	ldrb	r3, [r7, #7]
 800533e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005342:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005344:	79fa      	ldrb	r2, [r7, #7]
 8005346:	f107 0110 	add.w	r1, r7, #16
 800534a:	f107 0308 	add.w	r3, r7, #8
 800534e:	4618      	mov	r0, r3
 8005350:	f7ff fd20 	bl	8004d94 <find_volume>
 8005354:	4603      	mov	r3, r0
 8005356:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800535a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800535e:	2b00      	cmp	r3, #0
 8005360:	f040 8191 	bne.w	8005686 <f_open+0x362>
		dj.obj.fs = fs;
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	f107 0314 	add.w	r3, r7, #20
 800536e:	4611      	mov	r1, r2
 8005370:	4618      	mov	r0, r3
 8005372:	f7ff fc03 	bl	8004b7c <follow_path>
 8005376:	4603      	mov	r3, r0
 8005378:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800537c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005380:	2b00      	cmp	r3, #0
 8005382:	d11a      	bne.n	80053ba <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005384:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005388:	b25b      	sxtb	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	da03      	bge.n	8005396 <f_open+0x72>
				res = FR_INVALID_NAME;
 800538e:	2306      	movs	r3, #6
 8005390:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005394:	e011      	b.n	80053ba <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005396:	79fb      	ldrb	r3, [r7, #7]
 8005398:	f023 0301 	bic.w	r3, r3, #1
 800539c:	2b00      	cmp	r3, #0
 800539e:	bf14      	ite	ne
 80053a0:	2301      	movne	r3, #1
 80053a2:	2300      	moveq	r3, #0
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	461a      	mov	r2, r3
 80053a8:	f107 0314 	add.w	r3, r7, #20
 80053ac:	4611      	mov	r1, r2
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7fe fbd2 	bl	8003b58 <chk_lock>
 80053b4:	4603      	mov	r3, r0
 80053b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80053ba:	79fb      	ldrb	r3, [r7, #7]
 80053bc:	f003 031c 	and.w	r3, r3, #28
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d07f      	beq.n	80054c4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80053c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d017      	beq.n	80053fc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80053cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80053d0:	2b04      	cmp	r3, #4
 80053d2:	d10e      	bne.n	80053f2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80053d4:	f7fe fc1c 	bl	8003c10 <enq_lock>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d006      	beq.n	80053ec <f_open+0xc8>
 80053de:	f107 0314 	add.w	r3, r7, #20
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7ff fb03 	bl	80049ee <dir_register>
 80053e8:	4603      	mov	r3, r0
 80053ea:	e000      	b.n	80053ee <f_open+0xca>
 80053ec:	2312      	movs	r3, #18
 80053ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80053f2:	79fb      	ldrb	r3, [r7, #7]
 80053f4:	f043 0308 	orr.w	r3, r3, #8
 80053f8:	71fb      	strb	r3, [r7, #7]
 80053fa:	e010      	b.n	800541e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80053fc:	7ebb      	ldrb	r3, [r7, #26]
 80053fe:	f003 0311 	and.w	r3, r3, #17
 8005402:	2b00      	cmp	r3, #0
 8005404:	d003      	beq.n	800540e <f_open+0xea>
					res = FR_DENIED;
 8005406:	2307      	movs	r3, #7
 8005408:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800540c:	e007      	b.n	800541e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800540e:	79fb      	ldrb	r3, [r7, #7]
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b00      	cmp	r3, #0
 8005416:	d002      	beq.n	800541e <f_open+0xfa>
 8005418:	2308      	movs	r3, #8
 800541a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800541e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005422:	2b00      	cmp	r3, #0
 8005424:	d168      	bne.n	80054f8 <f_open+0x1d4>
 8005426:	79fb      	ldrb	r3, [r7, #7]
 8005428:	f003 0308 	and.w	r3, r3, #8
 800542c:	2b00      	cmp	r3, #0
 800542e:	d063      	beq.n	80054f8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8005430:	f7fd fcb8 	bl	8002da4 <get_fattime>
 8005434:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005438:	330e      	adds	r3, #14
 800543a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800543c:	4618      	mov	r0, r3
 800543e:	f7fe fae1 	bl	8003a04 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005444:	3316      	adds	r3, #22
 8005446:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005448:	4618      	mov	r0, r3
 800544a:	f7fe fadb 	bl	8003a04 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800544e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005450:	330b      	adds	r3, #11
 8005452:	2220      	movs	r2, #32
 8005454:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800545a:	4611      	mov	r1, r2
 800545c:	4618      	mov	r0, r3
 800545e:	f7ff fa32 	bl	80048c6 <ld_clust>
 8005462:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005468:	2200      	movs	r2, #0
 800546a:	4618      	mov	r0, r3
 800546c:	f7ff fa4a 	bl	8004904 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005472:	331c      	adds	r3, #28
 8005474:	2100      	movs	r1, #0
 8005476:	4618      	mov	r0, r3
 8005478:	f7fe fac4 	bl	8003a04 <st_dword>
					fs->wflag = 1;
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	2201      	movs	r2, #1
 8005480:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005484:	2b00      	cmp	r3, #0
 8005486:	d037      	beq.n	80054f8 <f_open+0x1d4>
						dw = fs->winsect;
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800548e:	f107 0314 	add.w	r3, r7, #20
 8005492:	2200      	movs	r2, #0
 8005494:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005496:	4618      	mov	r0, r3
 8005498:	f7fe ff5d 	bl	8004356 <remove_chain>
 800549c:	4603      	mov	r3, r0
 800549e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80054a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d126      	bne.n	80054f8 <f_open+0x1d4>
							res = move_window(fs, dw);
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7fe fd02 	bl	8003eb8 <move_window>
 80054b4:	4603      	mov	r3, r0
 80054b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054be:	3a01      	subs	r2, #1
 80054c0:	60da      	str	r2, [r3, #12]
 80054c2:	e019      	b.n	80054f8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80054c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d115      	bne.n	80054f8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80054cc:	7ebb      	ldrb	r3, [r7, #26]
 80054ce:	f003 0310 	and.w	r3, r3, #16
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <f_open+0x1ba>
					res = FR_NO_FILE;
 80054d6:	2304      	movs	r3, #4
 80054d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80054dc:	e00c      	b.n	80054f8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80054de:	79fb      	ldrb	r3, [r7, #7]
 80054e0:	f003 0302 	and.w	r3, r3, #2
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d007      	beq.n	80054f8 <f_open+0x1d4>
 80054e8:	7ebb      	ldrb	r3, [r7, #26]
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <f_open+0x1d4>
						res = FR_DENIED;
 80054f2:	2307      	movs	r3, #7
 80054f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80054f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d128      	bne.n	8005552 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005500:	79fb      	ldrb	r3, [r7, #7]
 8005502:	f003 0308 	and.w	r3, r3, #8
 8005506:	2b00      	cmp	r3, #0
 8005508:	d003      	beq.n	8005512 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800550a:	79fb      	ldrb	r3, [r7, #7]
 800550c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005510:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800551a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005520:	79fb      	ldrb	r3, [r7, #7]
 8005522:	f023 0301 	bic.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	bf14      	ite	ne
 800552a:	2301      	movne	r3, #1
 800552c:	2300      	moveq	r3, #0
 800552e:	b2db      	uxtb	r3, r3
 8005530:	461a      	mov	r2, r3
 8005532:	f107 0314 	add.w	r3, r7, #20
 8005536:	4611      	mov	r1, r2
 8005538:	4618      	mov	r0, r3
 800553a:	f7fe fb8b 	bl	8003c54 <inc_lock>
 800553e:	4602      	mov	r2, r0
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d102      	bne.n	8005552 <f_open+0x22e>
 800554c:	2302      	movs	r3, #2
 800554e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005552:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005556:	2b00      	cmp	r3, #0
 8005558:	f040 8095 	bne.w	8005686 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005560:	4611      	mov	r1, r2
 8005562:	4618      	mov	r0, r3
 8005564:	f7ff f9af 	bl	80048c6 <ld_clust>
 8005568:	4602      	mov	r2, r0
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800556e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005570:	331c      	adds	r3, #28
 8005572:	4618      	mov	r0, r3
 8005574:	f7fe fa08 	bl	8003988 <ld_dword>
 8005578:	4602      	mov	r2, r0
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	88da      	ldrh	r2, [r3, #6]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	79fa      	ldrb	r2, [r7, #7]
 8005596:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	3330      	adds	r3, #48	; 0x30
 80055ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055b2:	2100      	movs	r1, #0
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7fe fa72 	bl	8003a9e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80055ba:	79fb      	ldrb	r3, [r7, #7]
 80055bc:	f003 0320 	and.w	r3, r3, #32
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d060      	beq.n	8005686 <f_open+0x362>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d05c      	beq.n	8005686 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	68da      	ldr	r2, [r3, #12]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	895b      	ldrh	r3, [r3, #10]
 80055d8:	025b      	lsls	r3, r3, #9
 80055da:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	657b      	str	r3, [r7, #84]	; 0x54
 80055e8:	e016      	b.n	8005618 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7fe fd1d 	bl	800402e <get_fat>
 80055f4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80055f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d802      	bhi.n	8005602 <f_open+0x2de>
 80055fc:	2302      	movs	r3, #2
 80055fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005602:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005608:	d102      	bne.n	8005610 <f_open+0x2ec>
 800560a:	2301      	movs	r3, #1
 800560c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005610:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	657b      	str	r3, [r7, #84]	; 0x54
 8005618:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800561c:	2b00      	cmp	r3, #0
 800561e:	d103      	bne.n	8005628 <f_open+0x304>
 8005620:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005624:	429a      	cmp	r2, r3
 8005626:	d8e0      	bhi.n	80055ea <f_open+0x2c6>
				}
				fp->clust = clst;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800562c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800562e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005632:	2b00      	cmp	r3, #0
 8005634:	d127      	bne.n	8005686 <f_open+0x362>
 8005636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800563c:	2b00      	cmp	r3, #0
 800563e:	d022      	beq.n	8005686 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005644:	4618      	mov	r0, r3
 8005646:	f7fe fcd3 	bl	8003ff0 <clust2sect>
 800564a:	6478      	str	r0, [r7, #68]	; 0x44
 800564c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800564e:	2b00      	cmp	r3, #0
 8005650:	d103      	bne.n	800565a <f_open+0x336>
						res = FR_INT_ERR;
 8005652:	2302      	movs	r3, #2
 8005654:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005658:	e015      	b.n	8005686 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800565a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800565c:	0a5a      	lsrs	r2, r3, #9
 800565e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005660:	441a      	add	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	7858      	ldrb	r0, [r3, #1]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6a1a      	ldr	r2, [r3, #32]
 8005674:	2301      	movs	r3, #1
 8005676:	f7fe f911 	bl	800389c <disk_read>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <f_open+0x362>
 8005680:	2301      	movs	r3, #1
 8005682:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005686:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800568a:	2b00      	cmp	r3, #0
 800568c:	d002      	beq.n	8005694 <f_open+0x370>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005694:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8005698:	4618      	mov	r0, r3
 800569a:	3760      	adds	r7, #96	; 0x60
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b08e      	sub	sp, #56	; 0x38
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
 80056ac:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	2200      	movs	r2, #0
 80056b6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f107 0214 	add.w	r2, r7, #20
 80056be:	4611      	mov	r1, r2
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7ff fdb3 	bl	800522c <validate>
 80056c6:	4603      	mov	r3, r0
 80056c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80056cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d107      	bne.n	80056e4 <f_read+0x44>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	7d5b      	ldrb	r3, [r3, #21]
 80056d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80056dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d002      	beq.n	80056ea <f_read+0x4a>
 80056e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80056e8:	e115      	b.n	8005916 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	7d1b      	ldrb	r3, [r3, #20]
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <f_read+0x5a>
 80056f6:	2307      	movs	r3, #7
 80056f8:	e10d      	b.n	8005916 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	68da      	ldr	r2, [r3, #12]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	429a      	cmp	r2, r3
 800570c:	f240 80fe 	bls.w	800590c <f_read+0x26c>
 8005710:	6a3b      	ldr	r3, [r7, #32]
 8005712:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005714:	e0fa      	b.n	800590c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800571e:	2b00      	cmp	r3, #0
 8005720:	f040 80c6 	bne.w	80058b0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	0a5b      	lsrs	r3, r3, #9
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	8952      	ldrh	r2, [r2, #10]
 800572e:	3a01      	subs	r2, #1
 8005730:	4013      	ands	r3, r2
 8005732:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d12f      	bne.n	800579a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d103      	bne.n	800574a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	633b      	str	r3, [r7, #48]	; 0x30
 8005748:	e013      	b.n	8005772 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574e:	2b00      	cmp	r3, #0
 8005750:	d007      	beq.n	8005762 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	4619      	mov	r1, r3
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f7fe fef9 	bl	8004550 <clmt_clust>
 800575e:	6338      	str	r0, [r7, #48]	; 0x30
 8005760:	e007      	b.n	8005772 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	69db      	ldr	r3, [r3, #28]
 8005768:	4619      	mov	r1, r3
 800576a:	4610      	mov	r0, r2
 800576c:	f7fe fc5f 	bl	800402e <get_fat>
 8005770:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8005772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005774:	2b01      	cmp	r3, #1
 8005776:	d804      	bhi.n	8005782 <f_read+0xe2>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2202      	movs	r2, #2
 800577c:	755a      	strb	r2, [r3, #21]
 800577e:	2302      	movs	r3, #2
 8005780:	e0c9      	b.n	8005916 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005788:	d104      	bne.n	8005794 <f_read+0xf4>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2201      	movs	r2, #1
 800578e:	755a      	strb	r2, [r3, #21]
 8005790:	2301      	movs	r3, #1
 8005792:	e0c0      	b.n	8005916 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005798:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	69db      	ldr	r3, [r3, #28]
 80057a0:	4619      	mov	r1, r3
 80057a2:	4610      	mov	r0, r2
 80057a4:	f7fe fc24 	bl	8003ff0 <clust2sect>
 80057a8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d104      	bne.n	80057ba <f_read+0x11a>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2202      	movs	r2, #2
 80057b4:	755a      	strb	r2, [r3, #21]
 80057b6:	2302      	movs	r3, #2
 80057b8:	e0ad      	b.n	8005916 <f_read+0x276>
			sect += csect;
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	4413      	add	r3, r2
 80057c0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	0a5b      	lsrs	r3, r3, #9
 80057c6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80057c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d039      	beq.n	8005842 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80057ce:	69fa      	ldr	r2, [r7, #28]
 80057d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d2:	4413      	add	r3, r2
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	8952      	ldrh	r2, [r2, #10]
 80057d8:	4293      	cmp	r3, r2
 80057da:	d905      	bls.n	80057e8 <f_read+0x148>
					cc = fs->csize - csect;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	895b      	ldrh	r3, [r3, #10]
 80057e0:	461a      	mov	r2, r3
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	7858      	ldrb	r0, [r3, #1]
 80057ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ee:	69ba      	ldr	r2, [r7, #24]
 80057f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80057f2:	f7fe f853 	bl	800389c <disk_read>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d004      	beq.n	8005806 <f_read+0x166>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2201      	movs	r2, #1
 8005800:	755a      	strb	r2, [r3, #21]
 8005802:	2301      	movs	r3, #1
 8005804:	e087      	b.n	8005916 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	7d1b      	ldrb	r3, [r3, #20]
 800580a:	b25b      	sxtb	r3, r3
 800580c:	2b00      	cmp	r3, #0
 800580e:	da14      	bge.n	800583a <f_read+0x19a>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6a1a      	ldr	r2, [r3, #32]
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800581a:	429a      	cmp	r2, r3
 800581c:	d90d      	bls.n	800583a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6a1a      	ldr	r2, [r3, #32]
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	025b      	lsls	r3, r3, #9
 8005828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800582a:	18d0      	adds	r0, r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	3330      	adds	r3, #48	; 0x30
 8005830:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005834:	4619      	mov	r1, r3
 8005836:	f7fe f911 	bl	8003a5c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800583a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583c:	025b      	lsls	r3, r3, #9
 800583e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8005840:	e050      	b.n	80058e4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	69ba      	ldr	r2, [r7, #24]
 8005848:	429a      	cmp	r2, r3
 800584a:	d02e      	beq.n	80058aa <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	7d1b      	ldrb	r3, [r3, #20]
 8005850:	b25b      	sxtb	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	da18      	bge.n	8005888 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	7858      	ldrb	r0, [r3, #1]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6a1a      	ldr	r2, [r3, #32]
 8005864:	2301      	movs	r3, #1
 8005866:	f7fe f839 	bl	80038dc <disk_write>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d004      	beq.n	800587a <f_read+0x1da>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2201      	movs	r2, #1
 8005874:	755a      	strb	r2, [r3, #21]
 8005876:	2301      	movs	r3, #1
 8005878:	e04d      	b.n	8005916 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	7d1b      	ldrb	r3, [r3, #20]
 800587e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005882:	b2da      	uxtb	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	7858      	ldrb	r0, [r3, #1]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005892:	2301      	movs	r3, #1
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	f7fe f801 	bl	800389c <disk_read>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d004      	beq.n	80058aa <f_read+0x20a>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2201      	movs	r2, #1
 80058a4:	755a      	strb	r2, [r3, #21]
 80058a6:	2301      	movs	r3, #1
 80058a8:	e035      	b.n	8005916 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	69ba      	ldr	r2, [r7, #24]
 80058ae:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058b8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80058bc:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80058be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d901      	bls.n	80058ca <f_read+0x22a>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058d8:	4413      	add	r3, r2
 80058da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058dc:	4619      	mov	r1, r3
 80058de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058e0:	f7fe f8bc 	bl	8003a5c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80058e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e8:	4413      	add	r3, r2
 80058ea:	627b      	str	r3, [r7, #36]	; 0x24
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	699a      	ldr	r2, [r3, #24]
 80058f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f2:	441a      	add	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	619a      	str	r2, [r3, #24]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058fe:	441a      	add	r2, r3
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	601a      	str	r2, [r3, #0]
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	f47f af01 	bne.w	8005716 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3738      	adds	r7, #56	; 0x38
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b08c      	sub	sp, #48	; 0x30
 8005922:	af00      	add	r7, sp, #0
 8005924:	60f8      	str	r0, [r7, #12]
 8005926:	60b9      	str	r1, [r7, #8]
 8005928:	607a      	str	r2, [r7, #4]
 800592a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	2200      	movs	r2, #0
 8005934:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f107 0210 	add.w	r2, r7, #16
 800593c:	4611      	mov	r1, r2
 800593e:	4618      	mov	r0, r3
 8005940:	f7ff fc74 	bl	800522c <validate>
 8005944:	4603      	mov	r3, r0
 8005946:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800594a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800594e:	2b00      	cmp	r3, #0
 8005950:	d107      	bne.n	8005962 <f_write+0x44>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	7d5b      	ldrb	r3, [r3, #21]
 8005956:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800595a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800595e:	2b00      	cmp	r3, #0
 8005960:	d002      	beq.n	8005968 <f_write+0x4a>
 8005962:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005966:	e14b      	b.n	8005c00 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	7d1b      	ldrb	r3, [r3, #20]
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	2b00      	cmp	r3, #0
 8005972:	d101      	bne.n	8005978 <f_write+0x5a>
 8005974:	2307      	movs	r3, #7
 8005976:	e143      	b.n	8005c00 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	699a      	ldr	r2, [r3, #24]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	441a      	add	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	429a      	cmp	r2, r3
 8005986:	f080 812d 	bcs.w	8005be4 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	43db      	mvns	r3, r3
 8005990:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005992:	e127      	b.n	8005be4 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800599c:	2b00      	cmp	r3, #0
 800599e:	f040 80e3 	bne.w	8005b68 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	0a5b      	lsrs	r3, r3, #9
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	8952      	ldrh	r2, [r2, #10]
 80059ac:	3a01      	subs	r2, #1
 80059ae:	4013      	ands	r3, r2
 80059b0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d143      	bne.n	8005a40 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10c      	bne.n	80059da <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80059c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d11a      	bne.n	8005a02 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2100      	movs	r1, #0
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7fe fd25 	bl	8004420 <create_chain>
 80059d6:	62b8      	str	r0, [r7, #40]	; 0x28
 80059d8:	e013      	b.n	8005a02 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d007      	beq.n	80059f2 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	4619      	mov	r1, r3
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f7fe fdb1 	bl	8004550 <clmt_clust>
 80059ee:	62b8      	str	r0, [r7, #40]	; 0x28
 80059f0:	e007      	b.n	8005a02 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	69db      	ldr	r3, [r3, #28]
 80059f8:	4619      	mov	r1, r3
 80059fa:	4610      	mov	r0, r2
 80059fc:	f7fe fd10 	bl	8004420 <create_chain>
 8005a00:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f000 80f2 	beq.w	8005bee <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d104      	bne.n	8005a1a <f_write+0xfc>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2202      	movs	r2, #2
 8005a14:	755a      	strb	r2, [r3, #21]
 8005a16:	2302      	movs	r3, #2
 8005a18:	e0f2      	b.n	8005c00 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a20:	d104      	bne.n	8005a2c <f_write+0x10e>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2201      	movs	r2, #1
 8005a26:	755a      	strb	r2, [r3, #21]
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e0e9      	b.n	8005c00 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a30:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d102      	bne.n	8005a40 <f_write+0x122>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a3e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	7d1b      	ldrb	r3, [r3, #20]
 8005a44:	b25b      	sxtb	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	da18      	bge.n	8005a7c <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	7858      	ldrb	r0, [r3, #1]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6a1a      	ldr	r2, [r3, #32]
 8005a58:	2301      	movs	r3, #1
 8005a5a:	f7fd ff3f 	bl	80038dc <disk_write>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d004      	beq.n	8005a6e <f_write+0x150>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2201      	movs	r2, #1
 8005a68:	755a      	strb	r2, [r3, #21]
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e0c8      	b.n	8005c00 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	7d1b      	ldrb	r3, [r3, #20]
 8005a72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a76:	b2da      	uxtb	r2, r3
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	4619      	mov	r1, r3
 8005a84:	4610      	mov	r0, r2
 8005a86:	f7fe fab3 	bl	8003ff0 <clust2sect>
 8005a8a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d104      	bne.n	8005a9c <f_write+0x17e>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2202      	movs	r2, #2
 8005a96:	755a      	strb	r2, [r3, #21]
 8005a98:	2302      	movs	r3, #2
 8005a9a:	e0b1      	b.n	8005c00 <f_write+0x2e2>
			sect += csect;
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	0a5b      	lsrs	r3, r3, #9
 8005aa8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005aaa:	6a3b      	ldr	r3, [r7, #32]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d03c      	beq.n	8005b2a <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005ab0:	69ba      	ldr	r2, [r7, #24]
 8005ab2:	6a3b      	ldr	r3, [r7, #32]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	8952      	ldrh	r2, [r2, #10]
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d905      	bls.n	8005aca <f_write+0x1ac>
					cc = fs->csize - csect;
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	895b      	ldrh	r3, [r3, #10]
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	7858      	ldrb	r0, [r3, #1]
 8005ace:	6a3b      	ldr	r3, [r7, #32]
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	69f9      	ldr	r1, [r7, #28]
 8005ad4:	f7fd ff02 	bl	80038dc <disk_write>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d004      	beq.n	8005ae8 <f_write+0x1ca>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	755a      	strb	r2, [r3, #21]
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e08b      	b.n	8005c00 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6a1a      	ldr	r2, [r3, #32]
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	6a3a      	ldr	r2, [r7, #32]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d915      	bls.n	8005b22 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6a1a      	ldr	r2, [r3, #32]
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	025b      	lsls	r3, r3, #9
 8005b06:	69fa      	ldr	r2, [r7, #28]
 8005b08:	4413      	add	r3, r2
 8005b0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b0e:	4619      	mov	r1, r3
 8005b10:	f7fd ffa4 	bl	8003a5c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	7d1b      	ldrb	r3, [r3, #20]
 8005b18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005b22:	6a3b      	ldr	r3, [r7, #32]
 8005b24:	025b      	lsls	r3, r3, #9
 8005b26:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8005b28:	e03f      	b.n	8005baa <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d016      	beq.n	8005b62 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	699a      	ldr	r2, [r3, #24]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d210      	bcs.n	8005b62 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	7858      	ldrb	r0, [r3, #1]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	f7fd fea5 	bl	800389c <disk_read>
 8005b52:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d004      	beq.n	8005b62 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	755a      	strb	r2, [r3, #21]
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e04e      	b.n	8005c00 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b70:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005b74:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8005b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d901      	bls.n	8005b82 <f_write+0x264>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b90:	4413      	add	r3, r2
 8005b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b94:	69f9      	ldr	r1, [r7, #28]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7fd ff60 	bl	8003a5c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	7d1b      	ldrb	r3, [r3, #20]
 8005ba0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8005baa:	69fa      	ldr	r2, [r7, #28]
 8005bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bae:	4413      	add	r3, r2
 8005bb0:	61fb      	str	r3, [r7, #28]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	699a      	ldr	r2, [r3, #24]
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb8:	441a      	add	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	619a      	str	r2, [r3, #24]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	68da      	ldr	r2, [r3, #12]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	bf38      	it	cc
 8005bca:	461a      	movcc	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	60da      	str	r2, [r3, #12]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	441a      	add	r2, r3
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	601a      	str	r2, [r3, #0]
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f47f aed4 	bne.w	8005994 <f_write+0x76>
 8005bec:	e000      	b.n	8005bf0 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005bee:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	7d1b      	ldrb	r3, [r3, #20]
 8005bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3730      	adds	r7, #48	; 0x30
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f107 0208 	add.w	r2, r7, #8
 8005c16:	4611      	mov	r1, r2
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f7ff fb07 	bl	800522c <validate>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005c22:	7dfb      	ldrb	r3, [r7, #23]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d168      	bne.n	8005cfa <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	7d1b      	ldrb	r3, [r3, #20]
 8005c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d062      	beq.n	8005cfa <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	7d1b      	ldrb	r3, [r3, #20]
 8005c38:	b25b      	sxtb	r3, r3
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	da15      	bge.n	8005c6a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	7858      	ldrb	r0, [r3, #1]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a1a      	ldr	r2, [r3, #32]
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	f7fd fe45 	bl	80038dc <disk_write>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <f_sync+0x54>
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e04f      	b.n	8005cfc <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	7d1b      	ldrb	r3, [r3, #20]
 8005c60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8005c6a:	f7fd f89b 	bl	8002da4 <get_fattime>
 8005c6e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8005c70:	68ba      	ldr	r2, [r7, #8]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c76:	4619      	mov	r1, r3
 8005c78:	4610      	mov	r0, r2
 8005c7a:	f7fe f91d 	bl	8003eb8 <move_window>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8005c82:	7dfb      	ldrb	r3, [r7, #23]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d138      	bne.n	8005cfa <f_sync+0xf2>
					dir = fp->dir_ptr;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	330b      	adds	r3, #11
 8005c92:	781a      	ldrb	r2, [r3, #0]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	330b      	adds	r3, #11
 8005c98:	f042 0220 	orr.w	r2, r2, #32
 8005c9c:	b2d2      	uxtb	r2, r2
 8005c9e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6818      	ldr	r0, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	461a      	mov	r2, r3
 8005caa:	68f9      	ldr	r1, [r7, #12]
 8005cac:	f7fe fe2a 	bl	8004904 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f103 021c 	add.w	r2, r3, #28
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	4619      	mov	r1, r3
 8005cbc:	4610      	mov	r0, r2
 8005cbe:	f7fd fea1 	bl	8003a04 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	3316      	adds	r3, #22
 8005cc6:	6939      	ldr	r1, [r7, #16]
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7fd fe9b 	bl	8003a04 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	3312      	adds	r3, #18
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7fd fe7a 	bl	80039ce <st_word>
					fs->wflag = 1;
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7fe f916 	bl	8003f14 <sync_fs>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	7d1b      	ldrb	r3, [r3, #20]
 8005cf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cf4:	b2da      	uxtb	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3718      	adds	r7, #24
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f7ff ff7b 	bl	8005c08 <f_sync>
 8005d12:	4603      	mov	r3, r0
 8005d14:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005d16:	7bfb      	ldrb	r3, [r7, #15]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d118      	bne.n	8005d4e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f107 0208 	add.w	r2, r7, #8
 8005d22:	4611      	mov	r1, r2
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7ff fa81 	bl	800522c <validate>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005d2e:	7bfb      	ldrb	r3, [r7, #15]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10c      	bne.n	8005d4e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7fe f819 	bl	8003d70 <dec_lock>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005d42:	7bfb      	ldrb	r3, [r7, #15]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d102      	bne.n	8005d4e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b092      	sub	sp, #72	; 0x48
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8005d64:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005d68:	f107 030c 	add.w	r3, r7, #12
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7ff f810 	bl	8004d94 <find_volume>
 8005d74:	4603      	mov	r3, r0
 8005d76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8005d7a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f040 8099 	bne.w	8005eb6 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8005d84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8005d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8c:	691a      	ldr	r2, [r3, #16]
 8005d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	3b02      	subs	r3, #2
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d804      	bhi.n	8005da2 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8005d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9a:	691a      	ldr	r2, [r3, #16]
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	e089      	b.n	8005eb6 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8005da2:	2300      	movs	r3, #0
 8005da4:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8005da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d128      	bne.n	8005e00 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8005dae:	2302      	movs	r3, #2
 8005db0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db4:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8005db6:	f107 0314 	add.w	r3, r7, #20
 8005dba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7fe f936 	bl	800402e <get_fat>
 8005dc2:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8005dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dca:	d103      	bne.n	8005dd4 <f_getfree+0x7c>
 8005dcc:	2301      	movs	r3, #1
 8005dce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005dd2:	e063      	b.n	8005e9c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8005dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d103      	bne.n	8005de2 <f_getfree+0x8a>
 8005dda:	2302      	movs	r3, #2
 8005ddc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005de0:	e05c      	b.n	8005e9c <f_getfree+0x144>
					if (stat == 0) nfree++;
 8005de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d102      	bne.n	8005dee <f_getfree+0x96>
 8005de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dea:	3301      	adds	r3, #1
 8005dec:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8005dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005df0:	3301      	adds	r3, #1
 8005df2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df6:	695b      	ldr	r3, [r3, #20]
 8005df8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d3db      	bcc.n	8005db6 <f_getfree+0x5e>
 8005dfe:	e04d      	b.n	8005e9c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8005e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e02:	695b      	ldr	r3, [r3, #20]
 8005e04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	637b      	str	r3, [r7, #52]	; 0x34
 8005e10:	2300      	movs	r3, #0
 8005e12:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8005e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d113      	bne.n	8005e42 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8005e1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1e:	1c5a      	adds	r2, r3, #1
 8005e20:	63ba      	str	r2, [r7, #56]	; 0x38
 8005e22:	4619      	mov	r1, r3
 8005e24:	f7fe f848 	bl	8003eb8 <move_window>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8005e2e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d131      	bne.n	8005e9a <f_getfree+0x142>
							p = fs->win;
 8005e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e38:	3330      	adds	r3, #48	; 0x30
 8005e3a:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8005e3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e40:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8005e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d10f      	bne.n	8005e6a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8005e4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e4c:	f7fd fd84 	bl	8003958 <ld_word>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d102      	bne.n	8005e5c <f_getfree+0x104>
 8005e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e58:	3301      	adds	r3, #1
 8005e5a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8005e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5e:	3302      	adds	r3, #2
 8005e60:	633b      	str	r3, [r7, #48]	; 0x30
 8005e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e64:	3b02      	subs	r3, #2
 8005e66:	637b      	str	r3, [r7, #52]	; 0x34
 8005e68:	e010      	b.n	8005e8c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8005e6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e6c:	f7fd fd8c 	bl	8003988 <ld_dword>
 8005e70:	4603      	mov	r3, r0
 8005e72:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d102      	bne.n	8005e80 <f_getfree+0x128>
 8005e7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8005e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e82:	3304      	adds	r3, #4
 8005e84:	633b      	str	r3, [r7, #48]	; 0x30
 8005e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e88:	3b04      	subs	r3, #4
 8005e8a:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8005e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1bd      	bne.n	8005e14 <f_getfree+0xbc>
 8005e98:	e000      	b.n	8005e9c <f_getfree+0x144>
							if (res != FR_OK) break;
 8005e9a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ea0:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8005ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ea6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8005ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eaa:	791a      	ldrb	r2, [r3, #4]
 8005eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eae:	f042 0201 	orr.w	r2, r2, #1
 8005eb2:	b2d2      	uxtb	r2, r2
 8005eb4:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8005eb6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3748      	adds	r7, #72	; 0x48
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b088      	sub	sp, #32
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	60f8      	str	r0, [r7, #12]
 8005eca:	60b9      	str	r1, [r7, #8]
 8005ecc:	607a      	str	r2, [r7, #4]
	int n = 0;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8005ed6:	e01b      	b.n	8005f10 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8005ed8:	f107 0310 	add.w	r3, r7, #16
 8005edc:	f107 0114 	add.w	r1, r7, #20
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7ff fbdc 	bl	80056a0 <f_read>
		if (rc != 1) break;
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d116      	bne.n	8005f1c <f_gets+0x5a>
		c = s[0];
 8005eee:	7d3b      	ldrb	r3, [r7, #20]
 8005ef0:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8005ef2:	7dfb      	ldrb	r3, [r7, #23]
 8005ef4:	2b0d      	cmp	r3, #13
 8005ef6:	d100      	bne.n	8005efa <f_gets+0x38>
 8005ef8:	e00a      	b.n	8005f10 <f_gets+0x4e>
		*p++ = c;
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	1c5a      	adds	r2, r3, #1
 8005efe:	61ba      	str	r2, [r7, #24]
 8005f00:	7dfa      	ldrb	r2, [r7, #23]
 8005f02:	701a      	strb	r2, [r3, #0]
		n++;
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	3301      	adds	r3, #1
 8005f08:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8005f0a:	7dfb      	ldrb	r3, [r7, #23]
 8005f0c:	2b0a      	cmp	r3, #10
 8005f0e:	d007      	beq.n	8005f20 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	3b01      	subs	r3, #1
 8005f14:	69fa      	ldr	r2, [r7, #28]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	dbde      	blt.n	8005ed8 <f_gets+0x16>
 8005f1a:	e002      	b.n	8005f22 <f_gets+0x60>
		if (rc != 1) break;
 8005f1c:	bf00      	nop
 8005f1e:	e000      	b.n	8005f22 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8005f20:	bf00      	nop
	}
	*p = 0;
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	2200      	movs	r2, #0
 8005f26:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d001      	beq.n	8005f32 <f_gets+0x70>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	e000      	b.n	8005f34 <f_gets+0x72>
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3720      	adds	r7, #32
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b087      	sub	sp, #28
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	4613      	mov	r3, r2
 8005f48:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005f52:	4b1f      	ldr	r3, [pc, #124]	; (8005fd0 <FATFS_LinkDriverEx+0x94>)
 8005f54:	7a5b      	ldrb	r3, [r3, #9]
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d131      	bne.n	8005fc0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005f5c:	4b1c      	ldr	r3, [pc, #112]	; (8005fd0 <FATFS_LinkDriverEx+0x94>)
 8005f5e:	7a5b      	ldrb	r3, [r3, #9]
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	461a      	mov	r2, r3
 8005f64:	4b1a      	ldr	r3, [pc, #104]	; (8005fd0 <FATFS_LinkDriverEx+0x94>)
 8005f66:	2100      	movs	r1, #0
 8005f68:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005f6a:	4b19      	ldr	r3, [pc, #100]	; (8005fd0 <FATFS_LinkDriverEx+0x94>)
 8005f6c:	7a5b      	ldrb	r3, [r3, #9]
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	4a17      	ldr	r2, [pc, #92]	; (8005fd0 <FATFS_LinkDriverEx+0x94>)
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	4413      	add	r3, r2
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005f7a:	4b15      	ldr	r3, [pc, #84]	; (8005fd0 <FATFS_LinkDriverEx+0x94>)
 8005f7c:	7a5b      	ldrb	r3, [r3, #9]
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	461a      	mov	r2, r3
 8005f82:	4b13      	ldr	r3, [pc, #76]	; (8005fd0 <FATFS_LinkDriverEx+0x94>)
 8005f84:	4413      	add	r3, r2
 8005f86:	79fa      	ldrb	r2, [r7, #7]
 8005f88:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005f8a:	4b11      	ldr	r3, [pc, #68]	; (8005fd0 <FATFS_LinkDriverEx+0x94>)
 8005f8c:	7a5b      	ldrb	r3, [r3, #9]
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	1c5a      	adds	r2, r3, #1
 8005f92:	b2d1      	uxtb	r1, r2
 8005f94:	4a0e      	ldr	r2, [pc, #56]	; (8005fd0 <FATFS_LinkDriverEx+0x94>)
 8005f96:	7251      	strb	r1, [r2, #9]
 8005f98:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005f9a:	7dbb      	ldrb	r3, [r7, #22]
 8005f9c:	3330      	adds	r3, #48	; 0x30
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	223a      	movs	r2, #58	; 0x3a
 8005faa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	3302      	adds	r3, #2
 8005fb0:	222f      	movs	r2, #47	; 0x2f
 8005fb2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	3303      	adds	r3, #3
 8005fb8:	2200      	movs	r2, #0
 8005fba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	371c      	adds	r7, #28
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	20000184 	.word	0x20000184

08005fd4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005fde:	2200      	movs	r2, #0
 8005fe0:	6839      	ldr	r1, [r7, #0]
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f7ff ffaa 	bl	8005f3c <FATFS_LinkDriverEx>
 8005fe8:	4603      	mov	r3, r0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3708      	adds	r7, #8
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
	...

08005ff4 <__errno>:
 8005ff4:	4b01      	ldr	r3, [pc, #4]	; (8005ffc <__errno+0x8>)
 8005ff6:	6818      	ldr	r0, [r3, #0]
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	20000024 	.word	0x20000024

08006000 <__libc_init_array>:
 8006000:	b570      	push	{r4, r5, r6, lr}
 8006002:	4d0d      	ldr	r5, [pc, #52]	; (8006038 <__libc_init_array+0x38>)
 8006004:	4c0d      	ldr	r4, [pc, #52]	; (800603c <__libc_init_array+0x3c>)
 8006006:	1b64      	subs	r4, r4, r5
 8006008:	10a4      	asrs	r4, r4, #2
 800600a:	2600      	movs	r6, #0
 800600c:	42a6      	cmp	r6, r4
 800600e:	d109      	bne.n	8006024 <__libc_init_array+0x24>
 8006010:	4d0b      	ldr	r5, [pc, #44]	; (8006040 <__libc_init_array+0x40>)
 8006012:	4c0c      	ldr	r4, [pc, #48]	; (8006044 <__libc_init_array+0x44>)
 8006014:	f001 f824 	bl	8007060 <_init>
 8006018:	1b64      	subs	r4, r4, r5
 800601a:	10a4      	asrs	r4, r4, #2
 800601c:	2600      	movs	r6, #0
 800601e:	42a6      	cmp	r6, r4
 8006020:	d105      	bne.n	800602e <__libc_init_array+0x2e>
 8006022:	bd70      	pop	{r4, r5, r6, pc}
 8006024:	f855 3b04 	ldr.w	r3, [r5], #4
 8006028:	4798      	blx	r3
 800602a:	3601      	adds	r6, #1
 800602c:	e7ee      	b.n	800600c <__libc_init_array+0xc>
 800602e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006032:	4798      	blx	r3
 8006034:	3601      	adds	r6, #1
 8006036:	e7f2      	b.n	800601e <__libc_init_array+0x1e>
 8006038:	080073a4 	.word	0x080073a4
 800603c:	080073a4 	.word	0x080073a4
 8006040:	080073a4 	.word	0x080073a4
 8006044:	080073a8 	.word	0x080073a8

08006048 <memset>:
 8006048:	4402      	add	r2, r0
 800604a:	4603      	mov	r3, r0
 800604c:	4293      	cmp	r3, r2
 800604e:	d100      	bne.n	8006052 <memset+0xa>
 8006050:	4770      	bx	lr
 8006052:	f803 1b01 	strb.w	r1, [r3], #1
 8006056:	e7f9      	b.n	800604c <memset+0x4>

08006058 <iprintf>:
 8006058:	b40f      	push	{r0, r1, r2, r3}
 800605a:	4b0a      	ldr	r3, [pc, #40]	; (8006084 <iprintf+0x2c>)
 800605c:	b513      	push	{r0, r1, r4, lr}
 800605e:	681c      	ldr	r4, [r3, #0]
 8006060:	b124      	cbz	r4, 800606c <iprintf+0x14>
 8006062:	69a3      	ldr	r3, [r4, #24]
 8006064:	b913      	cbnz	r3, 800606c <iprintf+0x14>
 8006066:	4620      	mov	r0, r4
 8006068:	f000 fa5e 	bl	8006528 <__sinit>
 800606c:	ab05      	add	r3, sp, #20
 800606e:	9a04      	ldr	r2, [sp, #16]
 8006070:	68a1      	ldr	r1, [r4, #8]
 8006072:	9301      	str	r3, [sp, #4]
 8006074:	4620      	mov	r0, r4
 8006076:	f000 fc67 	bl	8006948 <_vfiprintf_r>
 800607a:	b002      	add	sp, #8
 800607c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006080:	b004      	add	sp, #16
 8006082:	4770      	bx	lr
 8006084:	20000024 	.word	0x20000024

08006088 <_puts_r>:
 8006088:	b570      	push	{r4, r5, r6, lr}
 800608a:	460e      	mov	r6, r1
 800608c:	4605      	mov	r5, r0
 800608e:	b118      	cbz	r0, 8006098 <_puts_r+0x10>
 8006090:	6983      	ldr	r3, [r0, #24]
 8006092:	b90b      	cbnz	r3, 8006098 <_puts_r+0x10>
 8006094:	f000 fa48 	bl	8006528 <__sinit>
 8006098:	69ab      	ldr	r3, [r5, #24]
 800609a:	68ac      	ldr	r4, [r5, #8]
 800609c:	b913      	cbnz	r3, 80060a4 <_puts_r+0x1c>
 800609e:	4628      	mov	r0, r5
 80060a0:	f000 fa42 	bl	8006528 <__sinit>
 80060a4:	4b2c      	ldr	r3, [pc, #176]	; (8006158 <_puts_r+0xd0>)
 80060a6:	429c      	cmp	r4, r3
 80060a8:	d120      	bne.n	80060ec <_puts_r+0x64>
 80060aa:	686c      	ldr	r4, [r5, #4]
 80060ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060ae:	07db      	lsls	r3, r3, #31
 80060b0:	d405      	bmi.n	80060be <_puts_r+0x36>
 80060b2:	89a3      	ldrh	r3, [r4, #12]
 80060b4:	0598      	lsls	r0, r3, #22
 80060b6:	d402      	bmi.n	80060be <_puts_r+0x36>
 80060b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060ba:	f000 fad3 	bl	8006664 <__retarget_lock_acquire_recursive>
 80060be:	89a3      	ldrh	r3, [r4, #12]
 80060c0:	0719      	lsls	r1, r3, #28
 80060c2:	d51d      	bpl.n	8006100 <_puts_r+0x78>
 80060c4:	6923      	ldr	r3, [r4, #16]
 80060c6:	b1db      	cbz	r3, 8006100 <_puts_r+0x78>
 80060c8:	3e01      	subs	r6, #1
 80060ca:	68a3      	ldr	r3, [r4, #8]
 80060cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80060d0:	3b01      	subs	r3, #1
 80060d2:	60a3      	str	r3, [r4, #8]
 80060d4:	bb39      	cbnz	r1, 8006126 <_puts_r+0x9e>
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	da38      	bge.n	800614c <_puts_r+0xc4>
 80060da:	4622      	mov	r2, r4
 80060dc:	210a      	movs	r1, #10
 80060de:	4628      	mov	r0, r5
 80060e0:	f000 f848 	bl	8006174 <__swbuf_r>
 80060e4:	3001      	adds	r0, #1
 80060e6:	d011      	beq.n	800610c <_puts_r+0x84>
 80060e8:	250a      	movs	r5, #10
 80060ea:	e011      	b.n	8006110 <_puts_r+0x88>
 80060ec:	4b1b      	ldr	r3, [pc, #108]	; (800615c <_puts_r+0xd4>)
 80060ee:	429c      	cmp	r4, r3
 80060f0:	d101      	bne.n	80060f6 <_puts_r+0x6e>
 80060f2:	68ac      	ldr	r4, [r5, #8]
 80060f4:	e7da      	b.n	80060ac <_puts_r+0x24>
 80060f6:	4b1a      	ldr	r3, [pc, #104]	; (8006160 <_puts_r+0xd8>)
 80060f8:	429c      	cmp	r4, r3
 80060fa:	bf08      	it	eq
 80060fc:	68ec      	ldreq	r4, [r5, #12]
 80060fe:	e7d5      	b.n	80060ac <_puts_r+0x24>
 8006100:	4621      	mov	r1, r4
 8006102:	4628      	mov	r0, r5
 8006104:	f000 f888 	bl	8006218 <__swsetup_r>
 8006108:	2800      	cmp	r0, #0
 800610a:	d0dd      	beq.n	80060c8 <_puts_r+0x40>
 800610c:	f04f 35ff 	mov.w	r5, #4294967295
 8006110:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006112:	07da      	lsls	r2, r3, #31
 8006114:	d405      	bmi.n	8006122 <_puts_r+0x9a>
 8006116:	89a3      	ldrh	r3, [r4, #12]
 8006118:	059b      	lsls	r3, r3, #22
 800611a:	d402      	bmi.n	8006122 <_puts_r+0x9a>
 800611c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800611e:	f000 faa2 	bl	8006666 <__retarget_lock_release_recursive>
 8006122:	4628      	mov	r0, r5
 8006124:	bd70      	pop	{r4, r5, r6, pc}
 8006126:	2b00      	cmp	r3, #0
 8006128:	da04      	bge.n	8006134 <_puts_r+0xac>
 800612a:	69a2      	ldr	r2, [r4, #24]
 800612c:	429a      	cmp	r2, r3
 800612e:	dc06      	bgt.n	800613e <_puts_r+0xb6>
 8006130:	290a      	cmp	r1, #10
 8006132:	d004      	beq.n	800613e <_puts_r+0xb6>
 8006134:	6823      	ldr	r3, [r4, #0]
 8006136:	1c5a      	adds	r2, r3, #1
 8006138:	6022      	str	r2, [r4, #0]
 800613a:	7019      	strb	r1, [r3, #0]
 800613c:	e7c5      	b.n	80060ca <_puts_r+0x42>
 800613e:	4622      	mov	r2, r4
 8006140:	4628      	mov	r0, r5
 8006142:	f000 f817 	bl	8006174 <__swbuf_r>
 8006146:	3001      	adds	r0, #1
 8006148:	d1bf      	bne.n	80060ca <_puts_r+0x42>
 800614a:	e7df      	b.n	800610c <_puts_r+0x84>
 800614c:	6823      	ldr	r3, [r4, #0]
 800614e:	250a      	movs	r5, #10
 8006150:	1c5a      	adds	r2, r3, #1
 8006152:	6022      	str	r2, [r4, #0]
 8006154:	701d      	strb	r5, [r3, #0]
 8006156:	e7db      	b.n	8006110 <_puts_r+0x88>
 8006158:	08007328 	.word	0x08007328
 800615c:	08007348 	.word	0x08007348
 8006160:	08007308 	.word	0x08007308

08006164 <puts>:
 8006164:	4b02      	ldr	r3, [pc, #8]	; (8006170 <puts+0xc>)
 8006166:	4601      	mov	r1, r0
 8006168:	6818      	ldr	r0, [r3, #0]
 800616a:	f7ff bf8d 	b.w	8006088 <_puts_r>
 800616e:	bf00      	nop
 8006170:	20000024 	.word	0x20000024

08006174 <__swbuf_r>:
 8006174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006176:	460e      	mov	r6, r1
 8006178:	4614      	mov	r4, r2
 800617a:	4605      	mov	r5, r0
 800617c:	b118      	cbz	r0, 8006186 <__swbuf_r+0x12>
 800617e:	6983      	ldr	r3, [r0, #24]
 8006180:	b90b      	cbnz	r3, 8006186 <__swbuf_r+0x12>
 8006182:	f000 f9d1 	bl	8006528 <__sinit>
 8006186:	4b21      	ldr	r3, [pc, #132]	; (800620c <__swbuf_r+0x98>)
 8006188:	429c      	cmp	r4, r3
 800618a:	d12b      	bne.n	80061e4 <__swbuf_r+0x70>
 800618c:	686c      	ldr	r4, [r5, #4]
 800618e:	69a3      	ldr	r3, [r4, #24]
 8006190:	60a3      	str	r3, [r4, #8]
 8006192:	89a3      	ldrh	r3, [r4, #12]
 8006194:	071a      	lsls	r2, r3, #28
 8006196:	d52f      	bpl.n	80061f8 <__swbuf_r+0x84>
 8006198:	6923      	ldr	r3, [r4, #16]
 800619a:	b36b      	cbz	r3, 80061f8 <__swbuf_r+0x84>
 800619c:	6923      	ldr	r3, [r4, #16]
 800619e:	6820      	ldr	r0, [r4, #0]
 80061a0:	1ac0      	subs	r0, r0, r3
 80061a2:	6963      	ldr	r3, [r4, #20]
 80061a4:	b2f6      	uxtb	r6, r6
 80061a6:	4283      	cmp	r3, r0
 80061a8:	4637      	mov	r7, r6
 80061aa:	dc04      	bgt.n	80061b6 <__swbuf_r+0x42>
 80061ac:	4621      	mov	r1, r4
 80061ae:	4628      	mov	r0, r5
 80061b0:	f000 f926 	bl	8006400 <_fflush_r>
 80061b4:	bb30      	cbnz	r0, 8006204 <__swbuf_r+0x90>
 80061b6:	68a3      	ldr	r3, [r4, #8]
 80061b8:	3b01      	subs	r3, #1
 80061ba:	60a3      	str	r3, [r4, #8]
 80061bc:	6823      	ldr	r3, [r4, #0]
 80061be:	1c5a      	adds	r2, r3, #1
 80061c0:	6022      	str	r2, [r4, #0]
 80061c2:	701e      	strb	r6, [r3, #0]
 80061c4:	6963      	ldr	r3, [r4, #20]
 80061c6:	3001      	adds	r0, #1
 80061c8:	4283      	cmp	r3, r0
 80061ca:	d004      	beq.n	80061d6 <__swbuf_r+0x62>
 80061cc:	89a3      	ldrh	r3, [r4, #12]
 80061ce:	07db      	lsls	r3, r3, #31
 80061d0:	d506      	bpl.n	80061e0 <__swbuf_r+0x6c>
 80061d2:	2e0a      	cmp	r6, #10
 80061d4:	d104      	bne.n	80061e0 <__swbuf_r+0x6c>
 80061d6:	4621      	mov	r1, r4
 80061d8:	4628      	mov	r0, r5
 80061da:	f000 f911 	bl	8006400 <_fflush_r>
 80061de:	b988      	cbnz	r0, 8006204 <__swbuf_r+0x90>
 80061e0:	4638      	mov	r0, r7
 80061e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061e4:	4b0a      	ldr	r3, [pc, #40]	; (8006210 <__swbuf_r+0x9c>)
 80061e6:	429c      	cmp	r4, r3
 80061e8:	d101      	bne.n	80061ee <__swbuf_r+0x7a>
 80061ea:	68ac      	ldr	r4, [r5, #8]
 80061ec:	e7cf      	b.n	800618e <__swbuf_r+0x1a>
 80061ee:	4b09      	ldr	r3, [pc, #36]	; (8006214 <__swbuf_r+0xa0>)
 80061f0:	429c      	cmp	r4, r3
 80061f2:	bf08      	it	eq
 80061f4:	68ec      	ldreq	r4, [r5, #12]
 80061f6:	e7ca      	b.n	800618e <__swbuf_r+0x1a>
 80061f8:	4621      	mov	r1, r4
 80061fa:	4628      	mov	r0, r5
 80061fc:	f000 f80c 	bl	8006218 <__swsetup_r>
 8006200:	2800      	cmp	r0, #0
 8006202:	d0cb      	beq.n	800619c <__swbuf_r+0x28>
 8006204:	f04f 37ff 	mov.w	r7, #4294967295
 8006208:	e7ea      	b.n	80061e0 <__swbuf_r+0x6c>
 800620a:	bf00      	nop
 800620c:	08007328 	.word	0x08007328
 8006210:	08007348 	.word	0x08007348
 8006214:	08007308 	.word	0x08007308

08006218 <__swsetup_r>:
 8006218:	4b32      	ldr	r3, [pc, #200]	; (80062e4 <__swsetup_r+0xcc>)
 800621a:	b570      	push	{r4, r5, r6, lr}
 800621c:	681d      	ldr	r5, [r3, #0]
 800621e:	4606      	mov	r6, r0
 8006220:	460c      	mov	r4, r1
 8006222:	b125      	cbz	r5, 800622e <__swsetup_r+0x16>
 8006224:	69ab      	ldr	r3, [r5, #24]
 8006226:	b913      	cbnz	r3, 800622e <__swsetup_r+0x16>
 8006228:	4628      	mov	r0, r5
 800622a:	f000 f97d 	bl	8006528 <__sinit>
 800622e:	4b2e      	ldr	r3, [pc, #184]	; (80062e8 <__swsetup_r+0xd0>)
 8006230:	429c      	cmp	r4, r3
 8006232:	d10f      	bne.n	8006254 <__swsetup_r+0x3c>
 8006234:	686c      	ldr	r4, [r5, #4]
 8006236:	89a3      	ldrh	r3, [r4, #12]
 8006238:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800623c:	0719      	lsls	r1, r3, #28
 800623e:	d42c      	bmi.n	800629a <__swsetup_r+0x82>
 8006240:	06dd      	lsls	r5, r3, #27
 8006242:	d411      	bmi.n	8006268 <__swsetup_r+0x50>
 8006244:	2309      	movs	r3, #9
 8006246:	6033      	str	r3, [r6, #0]
 8006248:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800624c:	81a3      	strh	r3, [r4, #12]
 800624e:	f04f 30ff 	mov.w	r0, #4294967295
 8006252:	e03e      	b.n	80062d2 <__swsetup_r+0xba>
 8006254:	4b25      	ldr	r3, [pc, #148]	; (80062ec <__swsetup_r+0xd4>)
 8006256:	429c      	cmp	r4, r3
 8006258:	d101      	bne.n	800625e <__swsetup_r+0x46>
 800625a:	68ac      	ldr	r4, [r5, #8]
 800625c:	e7eb      	b.n	8006236 <__swsetup_r+0x1e>
 800625e:	4b24      	ldr	r3, [pc, #144]	; (80062f0 <__swsetup_r+0xd8>)
 8006260:	429c      	cmp	r4, r3
 8006262:	bf08      	it	eq
 8006264:	68ec      	ldreq	r4, [r5, #12]
 8006266:	e7e6      	b.n	8006236 <__swsetup_r+0x1e>
 8006268:	0758      	lsls	r0, r3, #29
 800626a:	d512      	bpl.n	8006292 <__swsetup_r+0x7a>
 800626c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800626e:	b141      	cbz	r1, 8006282 <__swsetup_r+0x6a>
 8006270:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006274:	4299      	cmp	r1, r3
 8006276:	d002      	beq.n	800627e <__swsetup_r+0x66>
 8006278:	4630      	mov	r0, r6
 800627a:	f000 fa5b 	bl	8006734 <_free_r>
 800627e:	2300      	movs	r3, #0
 8006280:	6363      	str	r3, [r4, #52]	; 0x34
 8006282:	89a3      	ldrh	r3, [r4, #12]
 8006284:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006288:	81a3      	strh	r3, [r4, #12]
 800628a:	2300      	movs	r3, #0
 800628c:	6063      	str	r3, [r4, #4]
 800628e:	6923      	ldr	r3, [r4, #16]
 8006290:	6023      	str	r3, [r4, #0]
 8006292:	89a3      	ldrh	r3, [r4, #12]
 8006294:	f043 0308 	orr.w	r3, r3, #8
 8006298:	81a3      	strh	r3, [r4, #12]
 800629a:	6923      	ldr	r3, [r4, #16]
 800629c:	b94b      	cbnz	r3, 80062b2 <__swsetup_r+0x9a>
 800629e:	89a3      	ldrh	r3, [r4, #12]
 80062a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80062a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062a8:	d003      	beq.n	80062b2 <__swsetup_r+0x9a>
 80062aa:	4621      	mov	r1, r4
 80062ac:	4630      	mov	r0, r6
 80062ae:	f000 fa01 	bl	80066b4 <__smakebuf_r>
 80062b2:	89a0      	ldrh	r0, [r4, #12]
 80062b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062b8:	f010 0301 	ands.w	r3, r0, #1
 80062bc:	d00a      	beq.n	80062d4 <__swsetup_r+0xbc>
 80062be:	2300      	movs	r3, #0
 80062c0:	60a3      	str	r3, [r4, #8]
 80062c2:	6963      	ldr	r3, [r4, #20]
 80062c4:	425b      	negs	r3, r3
 80062c6:	61a3      	str	r3, [r4, #24]
 80062c8:	6923      	ldr	r3, [r4, #16]
 80062ca:	b943      	cbnz	r3, 80062de <__swsetup_r+0xc6>
 80062cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80062d0:	d1ba      	bne.n	8006248 <__swsetup_r+0x30>
 80062d2:	bd70      	pop	{r4, r5, r6, pc}
 80062d4:	0781      	lsls	r1, r0, #30
 80062d6:	bf58      	it	pl
 80062d8:	6963      	ldrpl	r3, [r4, #20]
 80062da:	60a3      	str	r3, [r4, #8]
 80062dc:	e7f4      	b.n	80062c8 <__swsetup_r+0xb0>
 80062de:	2000      	movs	r0, #0
 80062e0:	e7f7      	b.n	80062d2 <__swsetup_r+0xba>
 80062e2:	bf00      	nop
 80062e4:	20000024 	.word	0x20000024
 80062e8:	08007328 	.word	0x08007328
 80062ec:	08007348 	.word	0x08007348
 80062f0:	08007308 	.word	0x08007308

080062f4 <__sflush_r>:
 80062f4:	898a      	ldrh	r2, [r1, #12]
 80062f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062fa:	4605      	mov	r5, r0
 80062fc:	0710      	lsls	r0, r2, #28
 80062fe:	460c      	mov	r4, r1
 8006300:	d458      	bmi.n	80063b4 <__sflush_r+0xc0>
 8006302:	684b      	ldr	r3, [r1, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	dc05      	bgt.n	8006314 <__sflush_r+0x20>
 8006308:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800630a:	2b00      	cmp	r3, #0
 800630c:	dc02      	bgt.n	8006314 <__sflush_r+0x20>
 800630e:	2000      	movs	r0, #0
 8006310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006314:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006316:	2e00      	cmp	r6, #0
 8006318:	d0f9      	beq.n	800630e <__sflush_r+0x1a>
 800631a:	2300      	movs	r3, #0
 800631c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006320:	682f      	ldr	r7, [r5, #0]
 8006322:	602b      	str	r3, [r5, #0]
 8006324:	d032      	beq.n	800638c <__sflush_r+0x98>
 8006326:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006328:	89a3      	ldrh	r3, [r4, #12]
 800632a:	075a      	lsls	r2, r3, #29
 800632c:	d505      	bpl.n	800633a <__sflush_r+0x46>
 800632e:	6863      	ldr	r3, [r4, #4]
 8006330:	1ac0      	subs	r0, r0, r3
 8006332:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006334:	b10b      	cbz	r3, 800633a <__sflush_r+0x46>
 8006336:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006338:	1ac0      	subs	r0, r0, r3
 800633a:	2300      	movs	r3, #0
 800633c:	4602      	mov	r2, r0
 800633e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006340:	6a21      	ldr	r1, [r4, #32]
 8006342:	4628      	mov	r0, r5
 8006344:	47b0      	blx	r6
 8006346:	1c43      	adds	r3, r0, #1
 8006348:	89a3      	ldrh	r3, [r4, #12]
 800634a:	d106      	bne.n	800635a <__sflush_r+0x66>
 800634c:	6829      	ldr	r1, [r5, #0]
 800634e:	291d      	cmp	r1, #29
 8006350:	d82c      	bhi.n	80063ac <__sflush_r+0xb8>
 8006352:	4a2a      	ldr	r2, [pc, #168]	; (80063fc <__sflush_r+0x108>)
 8006354:	40ca      	lsrs	r2, r1
 8006356:	07d6      	lsls	r6, r2, #31
 8006358:	d528      	bpl.n	80063ac <__sflush_r+0xb8>
 800635a:	2200      	movs	r2, #0
 800635c:	6062      	str	r2, [r4, #4]
 800635e:	04d9      	lsls	r1, r3, #19
 8006360:	6922      	ldr	r2, [r4, #16]
 8006362:	6022      	str	r2, [r4, #0]
 8006364:	d504      	bpl.n	8006370 <__sflush_r+0x7c>
 8006366:	1c42      	adds	r2, r0, #1
 8006368:	d101      	bne.n	800636e <__sflush_r+0x7a>
 800636a:	682b      	ldr	r3, [r5, #0]
 800636c:	b903      	cbnz	r3, 8006370 <__sflush_r+0x7c>
 800636e:	6560      	str	r0, [r4, #84]	; 0x54
 8006370:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006372:	602f      	str	r7, [r5, #0]
 8006374:	2900      	cmp	r1, #0
 8006376:	d0ca      	beq.n	800630e <__sflush_r+0x1a>
 8006378:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800637c:	4299      	cmp	r1, r3
 800637e:	d002      	beq.n	8006386 <__sflush_r+0x92>
 8006380:	4628      	mov	r0, r5
 8006382:	f000 f9d7 	bl	8006734 <_free_r>
 8006386:	2000      	movs	r0, #0
 8006388:	6360      	str	r0, [r4, #52]	; 0x34
 800638a:	e7c1      	b.n	8006310 <__sflush_r+0x1c>
 800638c:	6a21      	ldr	r1, [r4, #32]
 800638e:	2301      	movs	r3, #1
 8006390:	4628      	mov	r0, r5
 8006392:	47b0      	blx	r6
 8006394:	1c41      	adds	r1, r0, #1
 8006396:	d1c7      	bne.n	8006328 <__sflush_r+0x34>
 8006398:	682b      	ldr	r3, [r5, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d0c4      	beq.n	8006328 <__sflush_r+0x34>
 800639e:	2b1d      	cmp	r3, #29
 80063a0:	d001      	beq.n	80063a6 <__sflush_r+0xb2>
 80063a2:	2b16      	cmp	r3, #22
 80063a4:	d101      	bne.n	80063aa <__sflush_r+0xb6>
 80063a6:	602f      	str	r7, [r5, #0]
 80063a8:	e7b1      	b.n	800630e <__sflush_r+0x1a>
 80063aa:	89a3      	ldrh	r3, [r4, #12]
 80063ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063b0:	81a3      	strh	r3, [r4, #12]
 80063b2:	e7ad      	b.n	8006310 <__sflush_r+0x1c>
 80063b4:	690f      	ldr	r7, [r1, #16]
 80063b6:	2f00      	cmp	r7, #0
 80063b8:	d0a9      	beq.n	800630e <__sflush_r+0x1a>
 80063ba:	0793      	lsls	r3, r2, #30
 80063bc:	680e      	ldr	r6, [r1, #0]
 80063be:	bf08      	it	eq
 80063c0:	694b      	ldreq	r3, [r1, #20]
 80063c2:	600f      	str	r7, [r1, #0]
 80063c4:	bf18      	it	ne
 80063c6:	2300      	movne	r3, #0
 80063c8:	eba6 0807 	sub.w	r8, r6, r7
 80063cc:	608b      	str	r3, [r1, #8]
 80063ce:	f1b8 0f00 	cmp.w	r8, #0
 80063d2:	dd9c      	ble.n	800630e <__sflush_r+0x1a>
 80063d4:	6a21      	ldr	r1, [r4, #32]
 80063d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80063d8:	4643      	mov	r3, r8
 80063da:	463a      	mov	r2, r7
 80063dc:	4628      	mov	r0, r5
 80063de:	47b0      	blx	r6
 80063e0:	2800      	cmp	r0, #0
 80063e2:	dc06      	bgt.n	80063f2 <__sflush_r+0xfe>
 80063e4:	89a3      	ldrh	r3, [r4, #12]
 80063e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063ea:	81a3      	strh	r3, [r4, #12]
 80063ec:	f04f 30ff 	mov.w	r0, #4294967295
 80063f0:	e78e      	b.n	8006310 <__sflush_r+0x1c>
 80063f2:	4407      	add	r7, r0
 80063f4:	eba8 0800 	sub.w	r8, r8, r0
 80063f8:	e7e9      	b.n	80063ce <__sflush_r+0xda>
 80063fa:	bf00      	nop
 80063fc:	20400001 	.word	0x20400001

08006400 <_fflush_r>:
 8006400:	b538      	push	{r3, r4, r5, lr}
 8006402:	690b      	ldr	r3, [r1, #16]
 8006404:	4605      	mov	r5, r0
 8006406:	460c      	mov	r4, r1
 8006408:	b913      	cbnz	r3, 8006410 <_fflush_r+0x10>
 800640a:	2500      	movs	r5, #0
 800640c:	4628      	mov	r0, r5
 800640e:	bd38      	pop	{r3, r4, r5, pc}
 8006410:	b118      	cbz	r0, 800641a <_fflush_r+0x1a>
 8006412:	6983      	ldr	r3, [r0, #24]
 8006414:	b90b      	cbnz	r3, 800641a <_fflush_r+0x1a>
 8006416:	f000 f887 	bl	8006528 <__sinit>
 800641a:	4b14      	ldr	r3, [pc, #80]	; (800646c <_fflush_r+0x6c>)
 800641c:	429c      	cmp	r4, r3
 800641e:	d11b      	bne.n	8006458 <_fflush_r+0x58>
 8006420:	686c      	ldr	r4, [r5, #4]
 8006422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d0ef      	beq.n	800640a <_fflush_r+0xa>
 800642a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800642c:	07d0      	lsls	r0, r2, #31
 800642e:	d404      	bmi.n	800643a <_fflush_r+0x3a>
 8006430:	0599      	lsls	r1, r3, #22
 8006432:	d402      	bmi.n	800643a <_fflush_r+0x3a>
 8006434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006436:	f000 f915 	bl	8006664 <__retarget_lock_acquire_recursive>
 800643a:	4628      	mov	r0, r5
 800643c:	4621      	mov	r1, r4
 800643e:	f7ff ff59 	bl	80062f4 <__sflush_r>
 8006442:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006444:	07da      	lsls	r2, r3, #31
 8006446:	4605      	mov	r5, r0
 8006448:	d4e0      	bmi.n	800640c <_fflush_r+0xc>
 800644a:	89a3      	ldrh	r3, [r4, #12]
 800644c:	059b      	lsls	r3, r3, #22
 800644e:	d4dd      	bmi.n	800640c <_fflush_r+0xc>
 8006450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006452:	f000 f908 	bl	8006666 <__retarget_lock_release_recursive>
 8006456:	e7d9      	b.n	800640c <_fflush_r+0xc>
 8006458:	4b05      	ldr	r3, [pc, #20]	; (8006470 <_fflush_r+0x70>)
 800645a:	429c      	cmp	r4, r3
 800645c:	d101      	bne.n	8006462 <_fflush_r+0x62>
 800645e:	68ac      	ldr	r4, [r5, #8]
 8006460:	e7df      	b.n	8006422 <_fflush_r+0x22>
 8006462:	4b04      	ldr	r3, [pc, #16]	; (8006474 <_fflush_r+0x74>)
 8006464:	429c      	cmp	r4, r3
 8006466:	bf08      	it	eq
 8006468:	68ec      	ldreq	r4, [r5, #12]
 800646a:	e7da      	b.n	8006422 <_fflush_r+0x22>
 800646c:	08007328 	.word	0x08007328
 8006470:	08007348 	.word	0x08007348
 8006474:	08007308 	.word	0x08007308

08006478 <std>:
 8006478:	2300      	movs	r3, #0
 800647a:	b510      	push	{r4, lr}
 800647c:	4604      	mov	r4, r0
 800647e:	e9c0 3300 	strd	r3, r3, [r0]
 8006482:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006486:	6083      	str	r3, [r0, #8]
 8006488:	8181      	strh	r1, [r0, #12]
 800648a:	6643      	str	r3, [r0, #100]	; 0x64
 800648c:	81c2      	strh	r2, [r0, #14]
 800648e:	6183      	str	r3, [r0, #24]
 8006490:	4619      	mov	r1, r3
 8006492:	2208      	movs	r2, #8
 8006494:	305c      	adds	r0, #92	; 0x5c
 8006496:	f7ff fdd7 	bl	8006048 <memset>
 800649a:	4b05      	ldr	r3, [pc, #20]	; (80064b0 <std+0x38>)
 800649c:	6263      	str	r3, [r4, #36]	; 0x24
 800649e:	4b05      	ldr	r3, [pc, #20]	; (80064b4 <std+0x3c>)
 80064a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80064a2:	4b05      	ldr	r3, [pc, #20]	; (80064b8 <std+0x40>)
 80064a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80064a6:	4b05      	ldr	r3, [pc, #20]	; (80064bc <std+0x44>)
 80064a8:	6224      	str	r4, [r4, #32]
 80064aa:	6323      	str	r3, [r4, #48]	; 0x30
 80064ac:	bd10      	pop	{r4, pc}
 80064ae:	bf00      	nop
 80064b0:	08006ef1 	.word	0x08006ef1
 80064b4:	08006f13 	.word	0x08006f13
 80064b8:	08006f4b 	.word	0x08006f4b
 80064bc:	08006f6f 	.word	0x08006f6f

080064c0 <_cleanup_r>:
 80064c0:	4901      	ldr	r1, [pc, #4]	; (80064c8 <_cleanup_r+0x8>)
 80064c2:	f000 b8af 	b.w	8006624 <_fwalk_reent>
 80064c6:	bf00      	nop
 80064c8:	08006401 	.word	0x08006401

080064cc <__sfmoreglue>:
 80064cc:	b570      	push	{r4, r5, r6, lr}
 80064ce:	2268      	movs	r2, #104	; 0x68
 80064d0:	1e4d      	subs	r5, r1, #1
 80064d2:	4355      	muls	r5, r2
 80064d4:	460e      	mov	r6, r1
 80064d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80064da:	f000 f997 	bl	800680c <_malloc_r>
 80064de:	4604      	mov	r4, r0
 80064e0:	b140      	cbz	r0, 80064f4 <__sfmoreglue+0x28>
 80064e2:	2100      	movs	r1, #0
 80064e4:	e9c0 1600 	strd	r1, r6, [r0]
 80064e8:	300c      	adds	r0, #12
 80064ea:	60a0      	str	r0, [r4, #8]
 80064ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80064f0:	f7ff fdaa 	bl	8006048 <memset>
 80064f4:	4620      	mov	r0, r4
 80064f6:	bd70      	pop	{r4, r5, r6, pc}

080064f8 <__sfp_lock_acquire>:
 80064f8:	4801      	ldr	r0, [pc, #4]	; (8006500 <__sfp_lock_acquire+0x8>)
 80064fa:	f000 b8b3 	b.w	8006664 <__retarget_lock_acquire_recursive>
 80064fe:	bf00      	nop
 8006500:	20000191 	.word	0x20000191

08006504 <__sfp_lock_release>:
 8006504:	4801      	ldr	r0, [pc, #4]	; (800650c <__sfp_lock_release+0x8>)
 8006506:	f000 b8ae 	b.w	8006666 <__retarget_lock_release_recursive>
 800650a:	bf00      	nop
 800650c:	20000191 	.word	0x20000191

08006510 <__sinit_lock_acquire>:
 8006510:	4801      	ldr	r0, [pc, #4]	; (8006518 <__sinit_lock_acquire+0x8>)
 8006512:	f000 b8a7 	b.w	8006664 <__retarget_lock_acquire_recursive>
 8006516:	bf00      	nop
 8006518:	20000192 	.word	0x20000192

0800651c <__sinit_lock_release>:
 800651c:	4801      	ldr	r0, [pc, #4]	; (8006524 <__sinit_lock_release+0x8>)
 800651e:	f000 b8a2 	b.w	8006666 <__retarget_lock_release_recursive>
 8006522:	bf00      	nop
 8006524:	20000192 	.word	0x20000192

08006528 <__sinit>:
 8006528:	b510      	push	{r4, lr}
 800652a:	4604      	mov	r4, r0
 800652c:	f7ff fff0 	bl	8006510 <__sinit_lock_acquire>
 8006530:	69a3      	ldr	r3, [r4, #24]
 8006532:	b11b      	cbz	r3, 800653c <__sinit+0x14>
 8006534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006538:	f7ff bff0 	b.w	800651c <__sinit_lock_release>
 800653c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006540:	6523      	str	r3, [r4, #80]	; 0x50
 8006542:	4b13      	ldr	r3, [pc, #76]	; (8006590 <__sinit+0x68>)
 8006544:	4a13      	ldr	r2, [pc, #76]	; (8006594 <__sinit+0x6c>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	62a2      	str	r2, [r4, #40]	; 0x28
 800654a:	42a3      	cmp	r3, r4
 800654c:	bf04      	itt	eq
 800654e:	2301      	moveq	r3, #1
 8006550:	61a3      	streq	r3, [r4, #24]
 8006552:	4620      	mov	r0, r4
 8006554:	f000 f820 	bl	8006598 <__sfp>
 8006558:	6060      	str	r0, [r4, #4]
 800655a:	4620      	mov	r0, r4
 800655c:	f000 f81c 	bl	8006598 <__sfp>
 8006560:	60a0      	str	r0, [r4, #8]
 8006562:	4620      	mov	r0, r4
 8006564:	f000 f818 	bl	8006598 <__sfp>
 8006568:	2200      	movs	r2, #0
 800656a:	60e0      	str	r0, [r4, #12]
 800656c:	2104      	movs	r1, #4
 800656e:	6860      	ldr	r0, [r4, #4]
 8006570:	f7ff ff82 	bl	8006478 <std>
 8006574:	68a0      	ldr	r0, [r4, #8]
 8006576:	2201      	movs	r2, #1
 8006578:	2109      	movs	r1, #9
 800657a:	f7ff ff7d 	bl	8006478 <std>
 800657e:	68e0      	ldr	r0, [r4, #12]
 8006580:	2202      	movs	r2, #2
 8006582:	2112      	movs	r1, #18
 8006584:	f7ff ff78 	bl	8006478 <std>
 8006588:	2301      	movs	r3, #1
 800658a:	61a3      	str	r3, [r4, #24]
 800658c:	e7d2      	b.n	8006534 <__sinit+0xc>
 800658e:	bf00      	nop
 8006590:	08007304 	.word	0x08007304
 8006594:	080064c1 	.word	0x080064c1

08006598 <__sfp>:
 8006598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800659a:	4607      	mov	r7, r0
 800659c:	f7ff ffac 	bl	80064f8 <__sfp_lock_acquire>
 80065a0:	4b1e      	ldr	r3, [pc, #120]	; (800661c <__sfp+0x84>)
 80065a2:	681e      	ldr	r6, [r3, #0]
 80065a4:	69b3      	ldr	r3, [r6, #24]
 80065a6:	b913      	cbnz	r3, 80065ae <__sfp+0x16>
 80065a8:	4630      	mov	r0, r6
 80065aa:	f7ff ffbd 	bl	8006528 <__sinit>
 80065ae:	3648      	adds	r6, #72	; 0x48
 80065b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80065b4:	3b01      	subs	r3, #1
 80065b6:	d503      	bpl.n	80065c0 <__sfp+0x28>
 80065b8:	6833      	ldr	r3, [r6, #0]
 80065ba:	b30b      	cbz	r3, 8006600 <__sfp+0x68>
 80065bc:	6836      	ldr	r6, [r6, #0]
 80065be:	e7f7      	b.n	80065b0 <__sfp+0x18>
 80065c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80065c4:	b9d5      	cbnz	r5, 80065fc <__sfp+0x64>
 80065c6:	4b16      	ldr	r3, [pc, #88]	; (8006620 <__sfp+0x88>)
 80065c8:	60e3      	str	r3, [r4, #12]
 80065ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80065ce:	6665      	str	r5, [r4, #100]	; 0x64
 80065d0:	f000 f847 	bl	8006662 <__retarget_lock_init_recursive>
 80065d4:	f7ff ff96 	bl	8006504 <__sfp_lock_release>
 80065d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80065dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80065e0:	6025      	str	r5, [r4, #0]
 80065e2:	61a5      	str	r5, [r4, #24]
 80065e4:	2208      	movs	r2, #8
 80065e6:	4629      	mov	r1, r5
 80065e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80065ec:	f7ff fd2c 	bl	8006048 <memset>
 80065f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80065f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80065f8:	4620      	mov	r0, r4
 80065fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065fc:	3468      	adds	r4, #104	; 0x68
 80065fe:	e7d9      	b.n	80065b4 <__sfp+0x1c>
 8006600:	2104      	movs	r1, #4
 8006602:	4638      	mov	r0, r7
 8006604:	f7ff ff62 	bl	80064cc <__sfmoreglue>
 8006608:	4604      	mov	r4, r0
 800660a:	6030      	str	r0, [r6, #0]
 800660c:	2800      	cmp	r0, #0
 800660e:	d1d5      	bne.n	80065bc <__sfp+0x24>
 8006610:	f7ff ff78 	bl	8006504 <__sfp_lock_release>
 8006614:	230c      	movs	r3, #12
 8006616:	603b      	str	r3, [r7, #0]
 8006618:	e7ee      	b.n	80065f8 <__sfp+0x60>
 800661a:	bf00      	nop
 800661c:	08007304 	.word	0x08007304
 8006620:	ffff0001 	.word	0xffff0001

08006624 <_fwalk_reent>:
 8006624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006628:	4606      	mov	r6, r0
 800662a:	4688      	mov	r8, r1
 800662c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006630:	2700      	movs	r7, #0
 8006632:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006636:	f1b9 0901 	subs.w	r9, r9, #1
 800663a:	d505      	bpl.n	8006648 <_fwalk_reent+0x24>
 800663c:	6824      	ldr	r4, [r4, #0]
 800663e:	2c00      	cmp	r4, #0
 8006640:	d1f7      	bne.n	8006632 <_fwalk_reent+0xe>
 8006642:	4638      	mov	r0, r7
 8006644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006648:	89ab      	ldrh	r3, [r5, #12]
 800664a:	2b01      	cmp	r3, #1
 800664c:	d907      	bls.n	800665e <_fwalk_reent+0x3a>
 800664e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006652:	3301      	adds	r3, #1
 8006654:	d003      	beq.n	800665e <_fwalk_reent+0x3a>
 8006656:	4629      	mov	r1, r5
 8006658:	4630      	mov	r0, r6
 800665a:	47c0      	blx	r8
 800665c:	4307      	orrs	r7, r0
 800665e:	3568      	adds	r5, #104	; 0x68
 8006660:	e7e9      	b.n	8006636 <_fwalk_reent+0x12>

08006662 <__retarget_lock_init_recursive>:
 8006662:	4770      	bx	lr

08006664 <__retarget_lock_acquire_recursive>:
 8006664:	4770      	bx	lr

08006666 <__retarget_lock_release_recursive>:
 8006666:	4770      	bx	lr

08006668 <__swhatbuf_r>:
 8006668:	b570      	push	{r4, r5, r6, lr}
 800666a:	460e      	mov	r6, r1
 800666c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006670:	2900      	cmp	r1, #0
 8006672:	b096      	sub	sp, #88	; 0x58
 8006674:	4614      	mov	r4, r2
 8006676:	461d      	mov	r5, r3
 8006678:	da08      	bge.n	800668c <__swhatbuf_r+0x24>
 800667a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	602a      	str	r2, [r5, #0]
 8006682:	061a      	lsls	r2, r3, #24
 8006684:	d410      	bmi.n	80066a8 <__swhatbuf_r+0x40>
 8006686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800668a:	e00e      	b.n	80066aa <__swhatbuf_r+0x42>
 800668c:	466a      	mov	r2, sp
 800668e:	f000 fc95 	bl	8006fbc <_fstat_r>
 8006692:	2800      	cmp	r0, #0
 8006694:	dbf1      	blt.n	800667a <__swhatbuf_r+0x12>
 8006696:	9a01      	ldr	r2, [sp, #4]
 8006698:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800669c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80066a0:	425a      	negs	r2, r3
 80066a2:	415a      	adcs	r2, r3
 80066a4:	602a      	str	r2, [r5, #0]
 80066a6:	e7ee      	b.n	8006686 <__swhatbuf_r+0x1e>
 80066a8:	2340      	movs	r3, #64	; 0x40
 80066aa:	2000      	movs	r0, #0
 80066ac:	6023      	str	r3, [r4, #0]
 80066ae:	b016      	add	sp, #88	; 0x58
 80066b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080066b4 <__smakebuf_r>:
 80066b4:	898b      	ldrh	r3, [r1, #12]
 80066b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80066b8:	079d      	lsls	r5, r3, #30
 80066ba:	4606      	mov	r6, r0
 80066bc:	460c      	mov	r4, r1
 80066be:	d507      	bpl.n	80066d0 <__smakebuf_r+0x1c>
 80066c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80066c4:	6023      	str	r3, [r4, #0]
 80066c6:	6123      	str	r3, [r4, #16]
 80066c8:	2301      	movs	r3, #1
 80066ca:	6163      	str	r3, [r4, #20]
 80066cc:	b002      	add	sp, #8
 80066ce:	bd70      	pop	{r4, r5, r6, pc}
 80066d0:	ab01      	add	r3, sp, #4
 80066d2:	466a      	mov	r2, sp
 80066d4:	f7ff ffc8 	bl	8006668 <__swhatbuf_r>
 80066d8:	9900      	ldr	r1, [sp, #0]
 80066da:	4605      	mov	r5, r0
 80066dc:	4630      	mov	r0, r6
 80066de:	f000 f895 	bl	800680c <_malloc_r>
 80066e2:	b948      	cbnz	r0, 80066f8 <__smakebuf_r+0x44>
 80066e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066e8:	059a      	lsls	r2, r3, #22
 80066ea:	d4ef      	bmi.n	80066cc <__smakebuf_r+0x18>
 80066ec:	f023 0303 	bic.w	r3, r3, #3
 80066f0:	f043 0302 	orr.w	r3, r3, #2
 80066f4:	81a3      	strh	r3, [r4, #12]
 80066f6:	e7e3      	b.n	80066c0 <__smakebuf_r+0xc>
 80066f8:	4b0d      	ldr	r3, [pc, #52]	; (8006730 <__smakebuf_r+0x7c>)
 80066fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80066fc:	89a3      	ldrh	r3, [r4, #12]
 80066fe:	6020      	str	r0, [r4, #0]
 8006700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006704:	81a3      	strh	r3, [r4, #12]
 8006706:	9b00      	ldr	r3, [sp, #0]
 8006708:	6163      	str	r3, [r4, #20]
 800670a:	9b01      	ldr	r3, [sp, #4]
 800670c:	6120      	str	r0, [r4, #16]
 800670e:	b15b      	cbz	r3, 8006728 <__smakebuf_r+0x74>
 8006710:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006714:	4630      	mov	r0, r6
 8006716:	f000 fc63 	bl	8006fe0 <_isatty_r>
 800671a:	b128      	cbz	r0, 8006728 <__smakebuf_r+0x74>
 800671c:	89a3      	ldrh	r3, [r4, #12]
 800671e:	f023 0303 	bic.w	r3, r3, #3
 8006722:	f043 0301 	orr.w	r3, r3, #1
 8006726:	81a3      	strh	r3, [r4, #12]
 8006728:	89a0      	ldrh	r0, [r4, #12]
 800672a:	4305      	orrs	r5, r0
 800672c:	81a5      	strh	r5, [r4, #12]
 800672e:	e7cd      	b.n	80066cc <__smakebuf_r+0x18>
 8006730:	080064c1 	.word	0x080064c1

08006734 <_free_r>:
 8006734:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006736:	2900      	cmp	r1, #0
 8006738:	d044      	beq.n	80067c4 <_free_r+0x90>
 800673a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800673e:	9001      	str	r0, [sp, #4]
 8006740:	2b00      	cmp	r3, #0
 8006742:	f1a1 0404 	sub.w	r4, r1, #4
 8006746:	bfb8      	it	lt
 8006748:	18e4      	addlt	r4, r4, r3
 800674a:	f000 fc6b 	bl	8007024 <__malloc_lock>
 800674e:	4a1e      	ldr	r2, [pc, #120]	; (80067c8 <_free_r+0x94>)
 8006750:	9801      	ldr	r0, [sp, #4]
 8006752:	6813      	ldr	r3, [r2, #0]
 8006754:	b933      	cbnz	r3, 8006764 <_free_r+0x30>
 8006756:	6063      	str	r3, [r4, #4]
 8006758:	6014      	str	r4, [r2, #0]
 800675a:	b003      	add	sp, #12
 800675c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006760:	f000 bc66 	b.w	8007030 <__malloc_unlock>
 8006764:	42a3      	cmp	r3, r4
 8006766:	d908      	bls.n	800677a <_free_r+0x46>
 8006768:	6825      	ldr	r5, [r4, #0]
 800676a:	1961      	adds	r1, r4, r5
 800676c:	428b      	cmp	r3, r1
 800676e:	bf01      	itttt	eq
 8006770:	6819      	ldreq	r1, [r3, #0]
 8006772:	685b      	ldreq	r3, [r3, #4]
 8006774:	1949      	addeq	r1, r1, r5
 8006776:	6021      	streq	r1, [r4, #0]
 8006778:	e7ed      	b.n	8006756 <_free_r+0x22>
 800677a:	461a      	mov	r2, r3
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	b10b      	cbz	r3, 8006784 <_free_r+0x50>
 8006780:	42a3      	cmp	r3, r4
 8006782:	d9fa      	bls.n	800677a <_free_r+0x46>
 8006784:	6811      	ldr	r1, [r2, #0]
 8006786:	1855      	adds	r5, r2, r1
 8006788:	42a5      	cmp	r5, r4
 800678a:	d10b      	bne.n	80067a4 <_free_r+0x70>
 800678c:	6824      	ldr	r4, [r4, #0]
 800678e:	4421      	add	r1, r4
 8006790:	1854      	adds	r4, r2, r1
 8006792:	42a3      	cmp	r3, r4
 8006794:	6011      	str	r1, [r2, #0]
 8006796:	d1e0      	bne.n	800675a <_free_r+0x26>
 8006798:	681c      	ldr	r4, [r3, #0]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	6053      	str	r3, [r2, #4]
 800679e:	4421      	add	r1, r4
 80067a0:	6011      	str	r1, [r2, #0]
 80067a2:	e7da      	b.n	800675a <_free_r+0x26>
 80067a4:	d902      	bls.n	80067ac <_free_r+0x78>
 80067a6:	230c      	movs	r3, #12
 80067a8:	6003      	str	r3, [r0, #0]
 80067aa:	e7d6      	b.n	800675a <_free_r+0x26>
 80067ac:	6825      	ldr	r5, [r4, #0]
 80067ae:	1961      	adds	r1, r4, r5
 80067b0:	428b      	cmp	r3, r1
 80067b2:	bf04      	itt	eq
 80067b4:	6819      	ldreq	r1, [r3, #0]
 80067b6:	685b      	ldreq	r3, [r3, #4]
 80067b8:	6063      	str	r3, [r4, #4]
 80067ba:	bf04      	itt	eq
 80067bc:	1949      	addeq	r1, r1, r5
 80067be:	6021      	streq	r1, [r4, #0]
 80067c0:	6054      	str	r4, [r2, #4]
 80067c2:	e7ca      	b.n	800675a <_free_r+0x26>
 80067c4:	b003      	add	sp, #12
 80067c6:	bd30      	pop	{r4, r5, pc}
 80067c8:	20000194 	.word	0x20000194

080067cc <sbrk_aligned>:
 80067cc:	b570      	push	{r4, r5, r6, lr}
 80067ce:	4e0e      	ldr	r6, [pc, #56]	; (8006808 <sbrk_aligned+0x3c>)
 80067d0:	460c      	mov	r4, r1
 80067d2:	6831      	ldr	r1, [r6, #0]
 80067d4:	4605      	mov	r5, r0
 80067d6:	b911      	cbnz	r1, 80067de <sbrk_aligned+0x12>
 80067d8:	f000 fb7a 	bl	8006ed0 <_sbrk_r>
 80067dc:	6030      	str	r0, [r6, #0]
 80067de:	4621      	mov	r1, r4
 80067e0:	4628      	mov	r0, r5
 80067e2:	f000 fb75 	bl	8006ed0 <_sbrk_r>
 80067e6:	1c43      	adds	r3, r0, #1
 80067e8:	d00a      	beq.n	8006800 <sbrk_aligned+0x34>
 80067ea:	1cc4      	adds	r4, r0, #3
 80067ec:	f024 0403 	bic.w	r4, r4, #3
 80067f0:	42a0      	cmp	r0, r4
 80067f2:	d007      	beq.n	8006804 <sbrk_aligned+0x38>
 80067f4:	1a21      	subs	r1, r4, r0
 80067f6:	4628      	mov	r0, r5
 80067f8:	f000 fb6a 	bl	8006ed0 <_sbrk_r>
 80067fc:	3001      	adds	r0, #1
 80067fe:	d101      	bne.n	8006804 <sbrk_aligned+0x38>
 8006800:	f04f 34ff 	mov.w	r4, #4294967295
 8006804:	4620      	mov	r0, r4
 8006806:	bd70      	pop	{r4, r5, r6, pc}
 8006808:	20000198 	.word	0x20000198

0800680c <_malloc_r>:
 800680c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006810:	1ccd      	adds	r5, r1, #3
 8006812:	f025 0503 	bic.w	r5, r5, #3
 8006816:	3508      	adds	r5, #8
 8006818:	2d0c      	cmp	r5, #12
 800681a:	bf38      	it	cc
 800681c:	250c      	movcc	r5, #12
 800681e:	2d00      	cmp	r5, #0
 8006820:	4607      	mov	r7, r0
 8006822:	db01      	blt.n	8006828 <_malloc_r+0x1c>
 8006824:	42a9      	cmp	r1, r5
 8006826:	d905      	bls.n	8006834 <_malloc_r+0x28>
 8006828:	230c      	movs	r3, #12
 800682a:	603b      	str	r3, [r7, #0]
 800682c:	2600      	movs	r6, #0
 800682e:	4630      	mov	r0, r6
 8006830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006834:	4e2e      	ldr	r6, [pc, #184]	; (80068f0 <_malloc_r+0xe4>)
 8006836:	f000 fbf5 	bl	8007024 <__malloc_lock>
 800683a:	6833      	ldr	r3, [r6, #0]
 800683c:	461c      	mov	r4, r3
 800683e:	bb34      	cbnz	r4, 800688e <_malloc_r+0x82>
 8006840:	4629      	mov	r1, r5
 8006842:	4638      	mov	r0, r7
 8006844:	f7ff ffc2 	bl	80067cc <sbrk_aligned>
 8006848:	1c43      	adds	r3, r0, #1
 800684a:	4604      	mov	r4, r0
 800684c:	d14d      	bne.n	80068ea <_malloc_r+0xde>
 800684e:	6834      	ldr	r4, [r6, #0]
 8006850:	4626      	mov	r6, r4
 8006852:	2e00      	cmp	r6, #0
 8006854:	d140      	bne.n	80068d8 <_malloc_r+0xcc>
 8006856:	6823      	ldr	r3, [r4, #0]
 8006858:	4631      	mov	r1, r6
 800685a:	4638      	mov	r0, r7
 800685c:	eb04 0803 	add.w	r8, r4, r3
 8006860:	f000 fb36 	bl	8006ed0 <_sbrk_r>
 8006864:	4580      	cmp	r8, r0
 8006866:	d13a      	bne.n	80068de <_malloc_r+0xd2>
 8006868:	6821      	ldr	r1, [r4, #0]
 800686a:	3503      	adds	r5, #3
 800686c:	1a6d      	subs	r5, r5, r1
 800686e:	f025 0503 	bic.w	r5, r5, #3
 8006872:	3508      	adds	r5, #8
 8006874:	2d0c      	cmp	r5, #12
 8006876:	bf38      	it	cc
 8006878:	250c      	movcc	r5, #12
 800687a:	4629      	mov	r1, r5
 800687c:	4638      	mov	r0, r7
 800687e:	f7ff ffa5 	bl	80067cc <sbrk_aligned>
 8006882:	3001      	adds	r0, #1
 8006884:	d02b      	beq.n	80068de <_malloc_r+0xd2>
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	442b      	add	r3, r5
 800688a:	6023      	str	r3, [r4, #0]
 800688c:	e00e      	b.n	80068ac <_malloc_r+0xa0>
 800688e:	6822      	ldr	r2, [r4, #0]
 8006890:	1b52      	subs	r2, r2, r5
 8006892:	d41e      	bmi.n	80068d2 <_malloc_r+0xc6>
 8006894:	2a0b      	cmp	r2, #11
 8006896:	d916      	bls.n	80068c6 <_malloc_r+0xba>
 8006898:	1961      	adds	r1, r4, r5
 800689a:	42a3      	cmp	r3, r4
 800689c:	6025      	str	r5, [r4, #0]
 800689e:	bf18      	it	ne
 80068a0:	6059      	strne	r1, [r3, #4]
 80068a2:	6863      	ldr	r3, [r4, #4]
 80068a4:	bf08      	it	eq
 80068a6:	6031      	streq	r1, [r6, #0]
 80068a8:	5162      	str	r2, [r4, r5]
 80068aa:	604b      	str	r3, [r1, #4]
 80068ac:	4638      	mov	r0, r7
 80068ae:	f104 060b 	add.w	r6, r4, #11
 80068b2:	f000 fbbd 	bl	8007030 <__malloc_unlock>
 80068b6:	f026 0607 	bic.w	r6, r6, #7
 80068ba:	1d23      	adds	r3, r4, #4
 80068bc:	1af2      	subs	r2, r6, r3
 80068be:	d0b6      	beq.n	800682e <_malloc_r+0x22>
 80068c0:	1b9b      	subs	r3, r3, r6
 80068c2:	50a3      	str	r3, [r4, r2]
 80068c4:	e7b3      	b.n	800682e <_malloc_r+0x22>
 80068c6:	6862      	ldr	r2, [r4, #4]
 80068c8:	42a3      	cmp	r3, r4
 80068ca:	bf0c      	ite	eq
 80068cc:	6032      	streq	r2, [r6, #0]
 80068ce:	605a      	strne	r2, [r3, #4]
 80068d0:	e7ec      	b.n	80068ac <_malloc_r+0xa0>
 80068d2:	4623      	mov	r3, r4
 80068d4:	6864      	ldr	r4, [r4, #4]
 80068d6:	e7b2      	b.n	800683e <_malloc_r+0x32>
 80068d8:	4634      	mov	r4, r6
 80068da:	6876      	ldr	r6, [r6, #4]
 80068dc:	e7b9      	b.n	8006852 <_malloc_r+0x46>
 80068de:	230c      	movs	r3, #12
 80068e0:	603b      	str	r3, [r7, #0]
 80068e2:	4638      	mov	r0, r7
 80068e4:	f000 fba4 	bl	8007030 <__malloc_unlock>
 80068e8:	e7a1      	b.n	800682e <_malloc_r+0x22>
 80068ea:	6025      	str	r5, [r4, #0]
 80068ec:	e7de      	b.n	80068ac <_malloc_r+0xa0>
 80068ee:	bf00      	nop
 80068f0:	20000194 	.word	0x20000194

080068f4 <__sfputc_r>:
 80068f4:	6893      	ldr	r3, [r2, #8]
 80068f6:	3b01      	subs	r3, #1
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	b410      	push	{r4}
 80068fc:	6093      	str	r3, [r2, #8]
 80068fe:	da08      	bge.n	8006912 <__sfputc_r+0x1e>
 8006900:	6994      	ldr	r4, [r2, #24]
 8006902:	42a3      	cmp	r3, r4
 8006904:	db01      	blt.n	800690a <__sfputc_r+0x16>
 8006906:	290a      	cmp	r1, #10
 8006908:	d103      	bne.n	8006912 <__sfputc_r+0x1e>
 800690a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800690e:	f7ff bc31 	b.w	8006174 <__swbuf_r>
 8006912:	6813      	ldr	r3, [r2, #0]
 8006914:	1c58      	adds	r0, r3, #1
 8006916:	6010      	str	r0, [r2, #0]
 8006918:	7019      	strb	r1, [r3, #0]
 800691a:	4608      	mov	r0, r1
 800691c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006920:	4770      	bx	lr

08006922 <__sfputs_r>:
 8006922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006924:	4606      	mov	r6, r0
 8006926:	460f      	mov	r7, r1
 8006928:	4614      	mov	r4, r2
 800692a:	18d5      	adds	r5, r2, r3
 800692c:	42ac      	cmp	r4, r5
 800692e:	d101      	bne.n	8006934 <__sfputs_r+0x12>
 8006930:	2000      	movs	r0, #0
 8006932:	e007      	b.n	8006944 <__sfputs_r+0x22>
 8006934:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006938:	463a      	mov	r2, r7
 800693a:	4630      	mov	r0, r6
 800693c:	f7ff ffda 	bl	80068f4 <__sfputc_r>
 8006940:	1c43      	adds	r3, r0, #1
 8006942:	d1f3      	bne.n	800692c <__sfputs_r+0xa>
 8006944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006948 <_vfiprintf_r>:
 8006948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800694c:	460d      	mov	r5, r1
 800694e:	b09d      	sub	sp, #116	; 0x74
 8006950:	4614      	mov	r4, r2
 8006952:	4698      	mov	r8, r3
 8006954:	4606      	mov	r6, r0
 8006956:	b118      	cbz	r0, 8006960 <_vfiprintf_r+0x18>
 8006958:	6983      	ldr	r3, [r0, #24]
 800695a:	b90b      	cbnz	r3, 8006960 <_vfiprintf_r+0x18>
 800695c:	f7ff fde4 	bl	8006528 <__sinit>
 8006960:	4b89      	ldr	r3, [pc, #548]	; (8006b88 <_vfiprintf_r+0x240>)
 8006962:	429d      	cmp	r5, r3
 8006964:	d11b      	bne.n	800699e <_vfiprintf_r+0x56>
 8006966:	6875      	ldr	r5, [r6, #4]
 8006968:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800696a:	07d9      	lsls	r1, r3, #31
 800696c:	d405      	bmi.n	800697a <_vfiprintf_r+0x32>
 800696e:	89ab      	ldrh	r3, [r5, #12]
 8006970:	059a      	lsls	r2, r3, #22
 8006972:	d402      	bmi.n	800697a <_vfiprintf_r+0x32>
 8006974:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006976:	f7ff fe75 	bl	8006664 <__retarget_lock_acquire_recursive>
 800697a:	89ab      	ldrh	r3, [r5, #12]
 800697c:	071b      	lsls	r3, r3, #28
 800697e:	d501      	bpl.n	8006984 <_vfiprintf_r+0x3c>
 8006980:	692b      	ldr	r3, [r5, #16]
 8006982:	b9eb      	cbnz	r3, 80069c0 <_vfiprintf_r+0x78>
 8006984:	4629      	mov	r1, r5
 8006986:	4630      	mov	r0, r6
 8006988:	f7ff fc46 	bl	8006218 <__swsetup_r>
 800698c:	b1c0      	cbz	r0, 80069c0 <_vfiprintf_r+0x78>
 800698e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006990:	07dc      	lsls	r4, r3, #31
 8006992:	d50e      	bpl.n	80069b2 <_vfiprintf_r+0x6a>
 8006994:	f04f 30ff 	mov.w	r0, #4294967295
 8006998:	b01d      	add	sp, #116	; 0x74
 800699a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800699e:	4b7b      	ldr	r3, [pc, #492]	; (8006b8c <_vfiprintf_r+0x244>)
 80069a0:	429d      	cmp	r5, r3
 80069a2:	d101      	bne.n	80069a8 <_vfiprintf_r+0x60>
 80069a4:	68b5      	ldr	r5, [r6, #8]
 80069a6:	e7df      	b.n	8006968 <_vfiprintf_r+0x20>
 80069a8:	4b79      	ldr	r3, [pc, #484]	; (8006b90 <_vfiprintf_r+0x248>)
 80069aa:	429d      	cmp	r5, r3
 80069ac:	bf08      	it	eq
 80069ae:	68f5      	ldreq	r5, [r6, #12]
 80069b0:	e7da      	b.n	8006968 <_vfiprintf_r+0x20>
 80069b2:	89ab      	ldrh	r3, [r5, #12]
 80069b4:	0598      	lsls	r0, r3, #22
 80069b6:	d4ed      	bmi.n	8006994 <_vfiprintf_r+0x4c>
 80069b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069ba:	f7ff fe54 	bl	8006666 <__retarget_lock_release_recursive>
 80069be:	e7e9      	b.n	8006994 <_vfiprintf_r+0x4c>
 80069c0:	2300      	movs	r3, #0
 80069c2:	9309      	str	r3, [sp, #36]	; 0x24
 80069c4:	2320      	movs	r3, #32
 80069c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80069ce:	2330      	movs	r3, #48	; 0x30
 80069d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006b94 <_vfiprintf_r+0x24c>
 80069d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069d8:	f04f 0901 	mov.w	r9, #1
 80069dc:	4623      	mov	r3, r4
 80069de:	469a      	mov	sl, r3
 80069e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069e4:	b10a      	cbz	r2, 80069ea <_vfiprintf_r+0xa2>
 80069e6:	2a25      	cmp	r2, #37	; 0x25
 80069e8:	d1f9      	bne.n	80069de <_vfiprintf_r+0x96>
 80069ea:	ebba 0b04 	subs.w	fp, sl, r4
 80069ee:	d00b      	beq.n	8006a08 <_vfiprintf_r+0xc0>
 80069f0:	465b      	mov	r3, fp
 80069f2:	4622      	mov	r2, r4
 80069f4:	4629      	mov	r1, r5
 80069f6:	4630      	mov	r0, r6
 80069f8:	f7ff ff93 	bl	8006922 <__sfputs_r>
 80069fc:	3001      	adds	r0, #1
 80069fe:	f000 80aa 	beq.w	8006b56 <_vfiprintf_r+0x20e>
 8006a02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a04:	445a      	add	r2, fp
 8006a06:	9209      	str	r2, [sp, #36]	; 0x24
 8006a08:	f89a 3000 	ldrb.w	r3, [sl]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f000 80a2 	beq.w	8006b56 <_vfiprintf_r+0x20e>
 8006a12:	2300      	movs	r3, #0
 8006a14:	f04f 32ff 	mov.w	r2, #4294967295
 8006a18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a1c:	f10a 0a01 	add.w	sl, sl, #1
 8006a20:	9304      	str	r3, [sp, #16]
 8006a22:	9307      	str	r3, [sp, #28]
 8006a24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a28:	931a      	str	r3, [sp, #104]	; 0x68
 8006a2a:	4654      	mov	r4, sl
 8006a2c:	2205      	movs	r2, #5
 8006a2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a32:	4858      	ldr	r0, [pc, #352]	; (8006b94 <_vfiprintf_r+0x24c>)
 8006a34:	f7f9 fbd4 	bl	80001e0 <memchr>
 8006a38:	9a04      	ldr	r2, [sp, #16]
 8006a3a:	b9d8      	cbnz	r0, 8006a74 <_vfiprintf_r+0x12c>
 8006a3c:	06d1      	lsls	r1, r2, #27
 8006a3e:	bf44      	itt	mi
 8006a40:	2320      	movmi	r3, #32
 8006a42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a46:	0713      	lsls	r3, r2, #28
 8006a48:	bf44      	itt	mi
 8006a4a:	232b      	movmi	r3, #43	; 0x2b
 8006a4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a50:	f89a 3000 	ldrb.w	r3, [sl]
 8006a54:	2b2a      	cmp	r3, #42	; 0x2a
 8006a56:	d015      	beq.n	8006a84 <_vfiprintf_r+0x13c>
 8006a58:	9a07      	ldr	r2, [sp, #28]
 8006a5a:	4654      	mov	r4, sl
 8006a5c:	2000      	movs	r0, #0
 8006a5e:	f04f 0c0a 	mov.w	ip, #10
 8006a62:	4621      	mov	r1, r4
 8006a64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a68:	3b30      	subs	r3, #48	; 0x30
 8006a6a:	2b09      	cmp	r3, #9
 8006a6c:	d94e      	bls.n	8006b0c <_vfiprintf_r+0x1c4>
 8006a6e:	b1b0      	cbz	r0, 8006a9e <_vfiprintf_r+0x156>
 8006a70:	9207      	str	r2, [sp, #28]
 8006a72:	e014      	b.n	8006a9e <_vfiprintf_r+0x156>
 8006a74:	eba0 0308 	sub.w	r3, r0, r8
 8006a78:	fa09 f303 	lsl.w	r3, r9, r3
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	9304      	str	r3, [sp, #16]
 8006a80:	46a2      	mov	sl, r4
 8006a82:	e7d2      	b.n	8006a2a <_vfiprintf_r+0xe2>
 8006a84:	9b03      	ldr	r3, [sp, #12]
 8006a86:	1d19      	adds	r1, r3, #4
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	9103      	str	r1, [sp, #12]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	bfbb      	ittet	lt
 8006a90:	425b      	neglt	r3, r3
 8006a92:	f042 0202 	orrlt.w	r2, r2, #2
 8006a96:	9307      	strge	r3, [sp, #28]
 8006a98:	9307      	strlt	r3, [sp, #28]
 8006a9a:	bfb8      	it	lt
 8006a9c:	9204      	strlt	r2, [sp, #16]
 8006a9e:	7823      	ldrb	r3, [r4, #0]
 8006aa0:	2b2e      	cmp	r3, #46	; 0x2e
 8006aa2:	d10c      	bne.n	8006abe <_vfiprintf_r+0x176>
 8006aa4:	7863      	ldrb	r3, [r4, #1]
 8006aa6:	2b2a      	cmp	r3, #42	; 0x2a
 8006aa8:	d135      	bne.n	8006b16 <_vfiprintf_r+0x1ce>
 8006aaa:	9b03      	ldr	r3, [sp, #12]
 8006aac:	1d1a      	adds	r2, r3, #4
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	9203      	str	r2, [sp, #12]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	bfb8      	it	lt
 8006ab6:	f04f 33ff 	movlt.w	r3, #4294967295
 8006aba:	3402      	adds	r4, #2
 8006abc:	9305      	str	r3, [sp, #20]
 8006abe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006ba4 <_vfiprintf_r+0x25c>
 8006ac2:	7821      	ldrb	r1, [r4, #0]
 8006ac4:	2203      	movs	r2, #3
 8006ac6:	4650      	mov	r0, sl
 8006ac8:	f7f9 fb8a 	bl	80001e0 <memchr>
 8006acc:	b140      	cbz	r0, 8006ae0 <_vfiprintf_r+0x198>
 8006ace:	2340      	movs	r3, #64	; 0x40
 8006ad0:	eba0 000a 	sub.w	r0, r0, sl
 8006ad4:	fa03 f000 	lsl.w	r0, r3, r0
 8006ad8:	9b04      	ldr	r3, [sp, #16]
 8006ada:	4303      	orrs	r3, r0
 8006adc:	3401      	adds	r4, #1
 8006ade:	9304      	str	r3, [sp, #16]
 8006ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ae4:	482c      	ldr	r0, [pc, #176]	; (8006b98 <_vfiprintf_r+0x250>)
 8006ae6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006aea:	2206      	movs	r2, #6
 8006aec:	f7f9 fb78 	bl	80001e0 <memchr>
 8006af0:	2800      	cmp	r0, #0
 8006af2:	d03f      	beq.n	8006b74 <_vfiprintf_r+0x22c>
 8006af4:	4b29      	ldr	r3, [pc, #164]	; (8006b9c <_vfiprintf_r+0x254>)
 8006af6:	bb1b      	cbnz	r3, 8006b40 <_vfiprintf_r+0x1f8>
 8006af8:	9b03      	ldr	r3, [sp, #12]
 8006afa:	3307      	adds	r3, #7
 8006afc:	f023 0307 	bic.w	r3, r3, #7
 8006b00:	3308      	adds	r3, #8
 8006b02:	9303      	str	r3, [sp, #12]
 8006b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b06:	443b      	add	r3, r7
 8006b08:	9309      	str	r3, [sp, #36]	; 0x24
 8006b0a:	e767      	b.n	80069dc <_vfiprintf_r+0x94>
 8006b0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b10:	460c      	mov	r4, r1
 8006b12:	2001      	movs	r0, #1
 8006b14:	e7a5      	b.n	8006a62 <_vfiprintf_r+0x11a>
 8006b16:	2300      	movs	r3, #0
 8006b18:	3401      	adds	r4, #1
 8006b1a:	9305      	str	r3, [sp, #20]
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	f04f 0c0a 	mov.w	ip, #10
 8006b22:	4620      	mov	r0, r4
 8006b24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b28:	3a30      	subs	r2, #48	; 0x30
 8006b2a:	2a09      	cmp	r2, #9
 8006b2c:	d903      	bls.n	8006b36 <_vfiprintf_r+0x1ee>
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d0c5      	beq.n	8006abe <_vfiprintf_r+0x176>
 8006b32:	9105      	str	r1, [sp, #20]
 8006b34:	e7c3      	b.n	8006abe <_vfiprintf_r+0x176>
 8006b36:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b3a:	4604      	mov	r4, r0
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e7f0      	b.n	8006b22 <_vfiprintf_r+0x1da>
 8006b40:	ab03      	add	r3, sp, #12
 8006b42:	9300      	str	r3, [sp, #0]
 8006b44:	462a      	mov	r2, r5
 8006b46:	4b16      	ldr	r3, [pc, #88]	; (8006ba0 <_vfiprintf_r+0x258>)
 8006b48:	a904      	add	r1, sp, #16
 8006b4a:	4630      	mov	r0, r6
 8006b4c:	f3af 8000 	nop.w
 8006b50:	4607      	mov	r7, r0
 8006b52:	1c78      	adds	r0, r7, #1
 8006b54:	d1d6      	bne.n	8006b04 <_vfiprintf_r+0x1bc>
 8006b56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b58:	07d9      	lsls	r1, r3, #31
 8006b5a:	d405      	bmi.n	8006b68 <_vfiprintf_r+0x220>
 8006b5c:	89ab      	ldrh	r3, [r5, #12]
 8006b5e:	059a      	lsls	r2, r3, #22
 8006b60:	d402      	bmi.n	8006b68 <_vfiprintf_r+0x220>
 8006b62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b64:	f7ff fd7f 	bl	8006666 <__retarget_lock_release_recursive>
 8006b68:	89ab      	ldrh	r3, [r5, #12]
 8006b6a:	065b      	lsls	r3, r3, #25
 8006b6c:	f53f af12 	bmi.w	8006994 <_vfiprintf_r+0x4c>
 8006b70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b72:	e711      	b.n	8006998 <_vfiprintf_r+0x50>
 8006b74:	ab03      	add	r3, sp, #12
 8006b76:	9300      	str	r3, [sp, #0]
 8006b78:	462a      	mov	r2, r5
 8006b7a:	4b09      	ldr	r3, [pc, #36]	; (8006ba0 <_vfiprintf_r+0x258>)
 8006b7c:	a904      	add	r1, sp, #16
 8006b7e:	4630      	mov	r0, r6
 8006b80:	f000 f880 	bl	8006c84 <_printf_i>
 8006b84:	e7e4      	b.n	8006b50 <_vfiprintf_r+0x208>
 8006b86:	bf00      	nop
 8006b88:	08007328 	.word	0x08007328
 8006b8c:	08007348 	.word	0x08007348
 8006b90:	08007308 	.word	0x08007308
 8006b94:	08007368 	.word	0x08007368
 8006b98:	08007372 	.word	0x08007372
 8006b9c:	00000000 	.word	0x00000000
 8006ba0:	08006923 	.word	0x08006923
 8006ba4:	0800736e 	.word	0x0800736e

08006ba8 <_printf_common>:
 8006ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bac:	4616      	mov	r6, r2
 8006bae:	4699      	mov	r9, r3
 8006bb0:	688a      	ldr	r2, [r1, #8]
 8006bb2:	690b      	ldr	r3, [r1, #16]
 8006bb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	bfb8      	it	lt
 8006bbc:	4613      	movlt	r3, r2
 8006bbe:	6033      	str	r3, [r6, #0]
 8006bc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006bc4:	4607      	mov	r7, r0
 8006bc6:	460c      	mov	r4, r1
 8006bc8:	b10a      	cbz	r2, 8006bce <_printf_common+0x26>
 8006bca:	3301      	adds	r3, #1
 8006bcc:	6033      	str	r3, [r6, #0]
 8006bce:	6823      	ldr	r3, [r4, #0]
 8006bd0:	0699      	lsls	r1, r3, #26
 8006bd2:	bf42      	ittt	mi
 8006bd4:	6833      	ldrmi	r3, [r6, #0]
 8006bd6:	3302      	addmi	r3, #2
 8006bd8:	6033      	strmi	r3, [r6, #0]
 8006bda:	6825      	ldr	r5, [r4, #0]
 8006bdc:	f015 0506 	ands.w	r5, r5, #6
 8006be0:	d106      	bne.n	8006bf0 <_printf_common+0x48>
 8006be2:	f104 0a19 	add.w	sl, r4, #25
 8006be6:	68e3      	ldr	r3, [r4, #12]
 8006be8:	6832      	ldr	r2, [r6, #0]
 8006bea:	1a9b      	subs	r3, r3, r2
 8006bec:	42ab      	cmp	r3, r5
 8006bee:	dc26      	bgt.n	8006c3e <_printf_common+0x96>
 8006bf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006bf4:	1e13      	subs	r3, r2, #0
 8006bf6:	6822      	ldr	r2, [r4, #0]
 8006bf8:	bf18      	it	ne
 8006bfa:	2301      	movne	r3, #1
 8006bfc:	0692      	lsls	r2, r2, #26
 8006bfe:	d42b      	bmi.n	8006c58 <_printf_common+0xb0>
 8006c00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c04:	4649      	mov	r1, r9
 8006c06:	4638      	mov	r0, r7
 8006c08:	47c0      	blx	r8
 8006c0a:	3001      	adds	r0, #1
 8006c0c:	d01e      	beq.n	8006c4c <_printf_common+0xa4>
 8006c0e:	6823      	ldr	r3, [r4, #0]
 8006c10:	68e5      	ldr	r5, [r4, #12]
 8006c12:	6832      	ldr	r2, [r6, #0]
 8006c14:	f003 0306 	and.w	r3, r3, #6
 8006c18:	2b04      	cmp	r3, #4
 8006c1a:	bf08      	it	eq
 8006c1c:	1aad      	subeq	r5, r5, r2
 8006c1e:	68a3      	ldr	r3, [r4, #8]
 8006c20:	6922      	ldr	r2, [r4, #16]
 8006c22:	bf0c      	ite	eq
 8006c24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c28:	2500      	movne	r5, #0
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	bfc4      	itt	gt
 8006c2e:	1a9b      	subgt	r3, r3, r2
 8006c30:	18ed      	addgt	r5, r5, r3
 8006c32:	2600      	movs	r6, #0
 8006c34:	341a      	adds	r4, #26
 8006c36:	42b5      	cmp	r5, r6
 8006c38:	d11a      	bne.n	8006c70 <_printf_common+0xc8>
 8006c3a:	2000      	movs	r0, #0
 8006c3c:	e008      	b.n	8006c50 <_printf_common+0xa8>
 8006c3e:	2301      	movs	r3, #1
 8006c40:	4652      	mov	r2, sl
 8006c42:	4649      	mov	r1, r9
 8006c44:	4638      	mov	r0, r7
 8006c46:	47c0      	blx	r8
 8006c48:	3001      	adds	r0, #1
 8006c4a:	d103      	bne.n	8006c54 <_printf_common+0xac>
 8006c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c54:	3501      	adds	r5, #1
 8006c56:	e7c6      	b.n	8006be6 <_printf_common+0x3e>
 8006c58:	18e1      	adds	r1, r4, r3
 8006c5a:	1c5a      	adds	r2, r3, #1
 8006c5c:	2030      	movs	r0, #48	; 0x30
 8006c5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c62:	4422      	add	r2, r4
 8006c64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c6c:	3302      	adds	r3, #2
 8006c6e:	e7c7      	b.n	8006c00 <_printf_common+0x58>
 8006c70:	2301      	movs	r3, #1
 8006c72:	4622      	mov	r2, r4
 8006c74:	4649      	mov	r1, r9
 8006c76:	4638      	mov	r0, r7
 8006c78:	47c0      	blx	r8
 8006c7a:	3001      	adds	r0, #1
 8006c7c:	d0e6      	beq.n	8006c4c <_printf_common+0xa4>
 8006c7e:	3601      	adds	r6, #1
 8006c80:	e7d9      	b.n	8006c36 <_printf_common+0x8e>
	...

08006c84 <_printf_i>:
 8006c84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c88:	7e0f      	ldrb	r7, [r1, #24]
 8006c8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c8c:	2f78      	cmp	r7, #120	; 0x78
 8006c8e:	4691      	mov	r9, r2
 8006c90:	4680      	mov	r8, r0
 8006c92:	460c      	mov	r4, r1
 8006c94:	469a      	mov	sl, r3
 8006c96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c9a:	d807      	bhi.n	8006cac <_printf_i+0x28>
 8006c9c:	2f62      	cmp	r7, #98	; 0x62
 8006c9e:	d80a      	bhi.n	8006cb6 <_printf_i+0x32>
 8006ca0:	2f00      	cmp	r7, #0
 8006ca2:	f000 80d8 	beq.w	8006e56 <_printf_i+0x1d2>
 8006ca6:	2f58      	cmp	r7, #88	; 0x58
 8006ca8:	f000 80a3 	beq.w	8006df2 <_printf_i+0x16e>
 8006cac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006cb4:	e03a      	b.n	8006d2c <_printf_i+0xa8>
 8006cb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006cba:	2b15      	cmp	r3, #21
 8006cbc:	d8f6      	bhi.n	8006cac <_printf_i+0x28>
 8006cbe:	a101      	add	r1, pc, #4	; (adr r1, 8006cc4 <_printf_i+0x40>)
 8006cc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006cc4:	08006d1d 	.word	0x08006d1d
 8006cc8:	08006d31 	.word	0x08006d31
 8006ccc:	08006cad 	.word	0x08006cad
 8006cd0:	08006cad 	.word	0x08006cad
 8006cd4:	08006cad 	.word	0x08006cad
 8006cd8:	08006cad 	.word	0x08006cad
 8006cdc:	08006d31 	.word	0x08006d31
 8006ce0:	08006cad 	.word	0x08006cad
 8006ce4:	08006cad 	.word	0x08006cad
 8006ce8:	08006cad 	.word	0x08006cad
 8006cec:	08006cad 	.word	0x08006cad
 8006cf0:	08006e3d 	.word	0x08006e3d
 8006cf4:	08006d61 	.word	0x08006d61
 8006cf8:	08006e1f 	.word	0x08006e1f
 8006cfc:	08006cad 	.word	0x08006cad
 8006d00:	08006cad 	.word	0x08006cad
 8006d04:	08006e5f 	.word	0x08006e5f
 8006d08:	08006cad 	.word	0x08006cad
 8006d0c:	08006d61 	.word	0x08006d61
 8006d10:	08006cad 	.word	0x08006cad
 8006d14:	08006cad 	.word	0x08006cad
 8006d18:	08006e27 	.word	0x08006e27
 8006d1c:	682b      	ldr	r3, [r5, #0]
 8006d1e:	1d1a      	adds	r2, r3, #4
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	602a      	str	r2, [r5, #0]
 8006d24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e0a3      	b.n	8006e78 <_printf_i+0x1f4>
 8006d30:	6820      	ldr	r0, [r4, #0]
 8006d32:	6829      	ldr	r1, [r5, #0]
 8006d34:	0606      	lsls	r6, r0, #24
 8006d36:	f101 0304 	add.w	r3, r1, #4
 8006d3a:	d50a      	bpl.n	8006d52 <_printf_i+0xce>
 8006d3c:	680e      	ldr	r6, [r1, #0]
 8006d3e:	602b      	str	r3, [r5, #0]
 8006d40:	2e00      	cmp	r6, #0
 8006d42:	da03      	bge.n	8006d4c <_printf_i+0xc8>
 8006d44:	232d      	movs	r3, #45	; 0x2d
 8006d46:	4276      	negs	r6, r6
 8006d48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d4c:	485e      	ldr	r0, [pc, #376]	; (8006ec8 <_printf_i+0x244>)
 8006d4e:	230a      	movs	r3, #10
 8006d50:	e019      	b.n	8006d86 <_printf_i+0x102>
 8006d52:	680e      	ldr	r6, [r1, #0]
 8006d54:	602b      	str	r3, [r5, #0]
 8006d56:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d5a:	bf18      	it	ne
 8006d5c:	b236      	sxthne	r6, r6
 8006d5e:	e7ef      	b.n	8006d40 <_printf_i+0xbc>
 8006d60:	682b      	ldr	r3, [r5, #0]
 8006d62:	6820      	ldr	r0, [r4, #0]
 8006d64:	1d19      	adds	r1, r3, #4
 8006d66:	6029      	str	r1, [r5, #0]
 8006d68:	0601      	lsls	r1, r0, #24
 8006d6a:	d501      	bpl.n	8006d70 <_printf_i+0xec>
 8006d6c:	681e      	ldr	r6, [r3, #0]
 8006d6e:	e002      	b.n	8006d76 <_printf_i+0xf2>
 8006d70:	0646      	lsls	r6, r0, #25
 8006d72:	d5fb      	bpl.n	8006d6c <_printf_i+0xe8>
 8006d74:	881e      	ldrh	r6, [r3, #0]
 8006d76:	4854      	ldr	r0, [pc, #336]	; (8006ec8 <_printf_i+0x244>)
 8006d78:	2f6f      	cmp	r7, #111	; 0x6f
 8006d7a:	bf0c      	ite	eq
 8006d7c:	2308      	moveq	r3, #8
 8006d7e:	230a      	movne	r3, #10
 8006d80:	2100      	movs	r1, #0
 8006d82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d86:	6865      	ldr	r5, [r4, #4]
 8006d88:	60a5      	str	r5, [r4, #8]
 8006d8a:	2d00      	cmp	r5, #0
 8006d8c:	bfa2      	ittt	ge
 8006d8e:	6821      	ldrge	r1, [r4, #0]
 8006d90:	f021 0104 	bicge.w	r1, r1, #4
 8006d94:	6021      	strge	r1, [r4, #0]
 8006d96:	b90e      	cbnz	r6, 8006d9c <_printf_i+0x118>
 8006d98:	2d00      	cmp	r5, #0
 8006d9a:	d04d      	beq.n	8006e38 <_printf_i+0x1b4>
 8006d9c:	4615      	mov	r5, r2
 8006d9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006da2:	fb03 6711 	mls	r7, r3, r1, r6
 8006da6:	5dc7      	ldrb	r7, [r0, r7]
 8006da8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006dac:	4637      	mov	r7, r6
 8006dae:	42bb      	cmp	r3, r7
 8006db0:	460e      	mov	r6, r1
 8006db2:	d9f4      	bls.n	8006d9e <_printf_i+0x11a>
 8006db4:	2b08      	cmp	r3, #8
 8006db6:	d10b      	bne.n	8006dd0 <_printf_i+0x14c>
 8006db8:	6823      	ldr	r3, [r4, #0]
 8006dba:	07de      	lsls	r6, r3, #31
 8006dbc:	d508      	bpl.n	8006dd0 <_printf_i+0x14c>
 8006dbe:	6923      	ldr	r3, [r4, #16]
 8006dc0:	6861      	ldr	r1, [r4, #4]
 8006dc2:	4299      	cmp	r1, r3
 8006dc4:	bfde      	ittt	le
 8006dc6:	2330      	movle	r3, #48	; 0x30
 8006dc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006dcc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006dd0:	1b52      	subs	r2, r2, r5
 8006dd2:	6122      	str	r2, [r4, #16]
 8006dd4:	f8cd a000 	str.w	sl, [sp]
 8006dd8:	464b      	mov	r3, r9
 8006dda:	aa03      	add	r2, sp, #12
 8006ddc:	4621      	mov	r1, r4
 8006dde:	4640      	mov	r0, r8
 8006de0:	f7ff fee2 	bl	8006ba8 <_printf_common>
 8006de4:	3001      	adds	r0, #1
 8006de6:	d14c      	bne.n	8006e82 <_printf_i+0x1fe>
 8006de8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dec:	b004      	add	sp, #16
 8006dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006df2:	4835      	ldr	r0, [pc, #212]	; (8006ec8 <_printf_i+0x244>)
 8006df4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006df8:	6829      	ldr	r1, [r5, #0]
 8006dfa:	6823      	ldr	r3, [r4, #0]
 8006dfc:	f851 6b04 	ldr.w	r6, [r1], #4
 8006e00:	6029      	str	r1, [r5, #0]
 8006e02:	061d      	lsls	r5, r3, #24
 8006e04:	d514      	bpl.n	8006e30 <_printf_i+0x1ac>
 8006e06:	07df      	lsls	r7, r3, #31
 8006e08:	bf44      	itt	mi
 8006e0a:	f043 0320 	orrmi.w	r3, r3, #32
 8006e0e:	6023      	strmi	r3, [r4, #0]
 8006e10:	b91e      	cbnz	r6, 8006e1a <_printf_i+0x196>
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	f023 0320 	bic.w	r3, r3, #32
 8006e18:	6023      	str	r3, [r4, #0]
 8006e1a:	2310      	movs	r3, #16
 8006e1c:	e7b0      	b.n	8006d80 <_printf_i+0xfc>
 8006e1e:	6823      	ldr	r3, [r4, #0]
 8006e20:	f043 0320 	orr.w	r3, r3, #32
 8006e24:	6023      	str	r3, [r4, #0]
 8006e26:	2378      	movs	r3, #120	; 0x78
 8006e28:	4828      	ldr	r0, [pc, #160]	; (8006ecc <_printf_i+0x248>)
 8006e2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e2e:	e7e3      	b.n	8006df8 <_printf_i+0x174>
 8006e30:	0659      	lsls	r1, r3, #25
 8006e32:	bf48      	it	mi
 8006e34:	b2b6      	uxthmi	r6, r6
 8006e36:	e7e6      	b.n	8006e06 <_printf_i+0x182>
 8006e38:	4615      	mov	r5, r2
 8006e3a:	e7bb      	b.n	8006db4 <_printf_i+0x130>
 8006e3c:	682b      	ldr	r3, [r5, #0]
 8006e3e:	6826      	ldr	r6, [r4, #0]
 8006e40:	6961      	ldr	r1, [r4, #20]
 8006e42:	1d18      	adds	r0, r3, #4
 8006e44:	6028      	str	r0, [r5, #0]
 8006e46:	0635      	lsls	r5, r6, #24
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	d501      	bpl.n	8006e50 <_printf_i+0x1cc>
 8006e4c:	6019      	str	r1, [r3, #0]
 8006e4e:	e002      	b.n	8006e56 <_printf_i+0x1d2>
 8006e50:	0670      	lsls	r0, r6, #25
 8006e52:	d5fb      	bpl.n	8006e4c <_printf_i+0x1c8>
 8006e54:	8019      	strh	r1, [r3, #0]
 8006e56:	2300      	movs	r3, #0
 8006e58:	6123      	str	r3, [r4, #16]
 8006e5a:	4615      	mov	r5, r2
 8006e5c:	e7ba      	b.n	8006dd4 <_printf_i+0x150>
 8006e5e:	682b      	ldr	r3, [r5, #0]
 8006e60:	1d1a      	adds	r2, r3, #4
 8006e62:	602a      	str	r2, [r5, #0]
 8006e64:	681d      	ldr	r5, [r3, #0]
 8006e66:	6862      	ldr	r2, [r4, #4]
 8006e68:	2100      	movs	r1, #0
 8006e6a:	4628      	mov	r0, r5
 8006e6c:	f7f9 f9b8 	bl	80001e0 <memchr>
 8006e70:	b108      	cbz	r0, 8006e76 <_printf_i+0x1f2>
 8006e72:	1b40      	subs	r0, r0, r5
 8006e74:	6060      	str	r0, [r4, #4]
 8006e76:	6863      	ldr	r3, [r4, #4]
 8006e78:	6123      	str	r3, [r4, #16]
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e80:	e7a8      	b.n	8006dd4 <_printf_i+0x150>
 8006e82:	6923      	ldr	r3, [r4, #16]
 8006e84:	462a      	mov	r2, r5
 8006e86:	4649      	mov	r1, r9
 8006e88:	4640      	mov	r0, r8
 8006e8a:	47d0      	blx	sl
 8006e8c:	3001      	adds	r0, #1
 8006e8e:	d0ab      	beq.n	8006de8 <_printf_i+0x164>
 8006e90:	6823      	ldr	r3, [r4, #0]
 8006e92:	079b      	lsls	r3, r3, #30
 8006e94:	d413      	bmi.n	8006ebe <_printf_i+0x23a>
 8006e96:	68e0      	ldr	r0, [r4, #12]
 8006e98:	9b03      	ldr	r3, [sp, #12]
 8006e9a:	4298      	cmp	r0, r3
 8006e9c:	bfb8      	it	lt
 8006e9e:	4618      	movlt	r0, r3
 8006ea0:	e7a4      	b.n	8006dec <_printf_i+0x168>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	4632      	mov	r2, r6
 8006ea6:	4649      	mov	r1, r9
 8006ea8:	4640      	mov	r0, r8
 8006eaa:	47d0      	blx	sl
 8006eac:	3001      	adds	r0, #1
 8006eae:	d09b      	beq.n	8006de8 <_printf_i+0x164>
 8006eb0:	3501      	adds	r5, #1
 8006eb2:	68e3      	ldr	r3, [r4, #12]
 8006eb4:	9903      	ldr	r1, [sp, #12]
 8006eb6:	1a5b      	subs	r3, r3, r1
 8006eb8:	42ab      	cmp	r3, r5
 8006eba:	dcf2      	bgt.n	8006ea2 <_printf_i+0x21e>
 8006ebc:	e7eb      	b.n	8006e96 <_printf_i+0x212>
 8006ebe:	2500      	movs	r5, #0
 8006ec0:	f104 0619 	add.w	r6, r4, #25
 8006ec4:	e7f5      	b.n	8006eb2 <_printf_i+0x22e>
 8006ec6:	bf00      	nop
 8006ec8:	08007379 	.word	0x08007379
 8006ecc:	0800738a 	.word	0x0800738a

08006ed0 <_sbrk_r>:
 8006ed0:	b538      	push	{r3, r4, r5, lr}
 8006ed2:	4d06      	ldr	r5, [pc, #24]	; (8006eec <_sbrk_r+0x1c>)
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	4604      	mov	r4, r0
 8006ed8:	4608      	mov	r0, r1
 8006eda:	602b      	str	r3, [r5, #0]
 8006edc:	f7f9 ff38 	bl	8000d50 <_sbrk>
 8006ee0:	1c43      	adds	r3, r0, #1
 8006ee2:	d102      	bne.n	8006eea <_sbrk_r+0x1a>
 8006ee4:	682b      	ldr	r3, [r5, #0]
 8006ee6:	b103      	cbz	r3, 8006eea <_sbrk_r+0x1a>
 8006ee8:	6023      	str	r3, [r4, #0]
 8006eea:	bd38      	pop	{r3, r4, r5, pc}
 8006eec:	2000019c 	.word	0x2000019c

08006ef0 <__sread>:
 8006ef0:	b510      	push	{r4, lr}
 8006ef2:	460c      	mov	r4, r1
 8006ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ef8:	f000 f8a0 	bl	800703c <_read_r>
 8006efc:	2800      	cmp	r0, #0
 8006efe:	bfab      	itete	ge
 8006f00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f02:	89a3      	ldrhlt	r3, [r4, #12]
 8006f04:	181b      	addge	r3, r3, r0
 8006f06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f0a:	bfac      	ite	ge
 8006f0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f0e:	81a3      	strhlt	r3, [r4, #12]
 8006f10:	bd10      	pop	{r4, pc}

08006f12 <__swrite>:
 8006f12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f16:	461f      	mov	r7, r3
 8006f18:	898b      	ldrh	r3, [r1, #12]
 8006f1a:	05db      	lsls	r3, r3, #23
 8006f1c:	4605      	mov	r5, r0
 8006f1e:	460c      	mov	r4, r1
 8006f20:	4616      	mov	r6, r2
 8006f22:	d505      	bpl.n	8006f30 <__swrite+0x1e>
 8006f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f28:	2302      	movs	r3, #2
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f000 f868 	bl	8007000 <_lseek_r>
 8006f30:	89a3      	ldrh	r3, [r4, #12]
 8006f32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f3a:	81a3      	strh	r3, [r4, #12]
 8006f3c:	4632      	mov	r2, r6
 8006f3e:	463b      	mov	r3, r7
 8006f40:	4628      	mov	r0, r5
 8006f42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f46:	f000 b817 	b.w	8006f78 <_write_r>

08006f4a <__sseek>:
 8006f4a:	b510      	push	{r4, lr}
 8006f4c:	460c      	mov	r4, r1
 8006f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f52:	f000 f855 	bl	8007000 <_lseek_r>
 8006f56:	1c43      	adds	r3, r0, #1
 8006f58:	89a3      	ldrh	r3, [r4, #12]
 8006f5a:	bf15      	itete	ne
 8006f5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f66:	81a3      	strheq	r3, [r4, #12]
 8006f68:	bf18      	it	ne
 8006f6a:	81a3      	strhne	r3, [r4, #12]
 8006f6c:	bd10      	pop	{r4, pc}

08006f6e <__sclose>:
 8006f6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f72:	f000 b813 	b.w	8006f9c <_close_r>
	...

08006f78 <_write_r>:
 8006f78:	b538      	push	{r3, r4, r5, lr}
 8006f7a:	4d07      	ldr	r5, [pc, #28]	; (8006f98 <_write_r+0x20>)
 8006f7c:	4604      	mov	r4, r0
 8006f7e:	4608      	mov	r0, r1
 8006f80:	4611      	mov	r1, r2
 8006f82:	2200      	movs	r2, #0
 8006f84:	602a      	str	r2, [r5, #0]
 8006f86:	461a      	mov	r2, r3
 8006f88:	f7f9 fe91 	bl	8000cae <_write>
 8006f8c:	1c43      	adds	r3, r0, #1
 8006f8e:	d102      	bne.n	8006f96 <_write_r+0x1e>
 8006f90:	682b      	ldr	r3, [r5, #0]
 8006f92:	b103      	cbz	r3, 8006f96 <_write_r+0x1e>
 8006f94:	6023      	str	r3, [r4, #0]
 8006f96:	bd38      	pop	{r3, r4, r5, pc}
 8006f98:	2000019c 	.word	0x2000019c

08006f9c <_close_r>:
 8006f9c:	b538      	push	{r3, r4, r5, lr}
 8006f9e:	4d06      	ldr	r5, [pc, #24]	; (8006fb8 <_close_r+0x1c>)
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	4604      	mov	r4, r0
 8006fa4:	4608      	mov	r0, r1
 8006fa6:	602b      	str	r3, [r5, #0]
 8006fa8:	f7f9 fe9d 	bl	8000ce6 <_close>
 8006fac:	1c43      	adds	r3, r0, #1
 8006fae:	d102      	bne.n	8006fb6 <_close_r+0x1a>
 8006fb0:	682b      	ldr	r3, [r5, #0]
 8006fb2:	b103      	cbz	r3, 8006fb6 <_close_r+0x1a>
 8006fb4:	6023      	str	r3, [r4, #0]
 8006fb6:	bd38      	pop	{r3, r4, r5, pc}
 8006fb8:	2000019c 	.word	0x2000019c

08006fbc <_fstat_r>:
 8006fbc:	b538      	push	{r3, r4, r5, lr}
 8006fbe:	4d07      	ldr	r5, [pc, #28]	; (8006fdc <_fstat_r+0x20>)
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	4604      	mov	r4, r0
 8006fc4:	4608      	mov	r0, r1
 8006fc6:	4611      	mov	r1, r2
 8006fc8:	602b      	str	r3, [r5, #0]
 8006fca:	f7f9 fe98 	bl	8000cfe <_fstat>
 8006fce:	1c43      	adds	r3, r0, #1
 8006fd0:	d102      	bne.n	8006fd8 <_fstat_r+0x1c>
 8006fd2:	682b      	ldr	r3, [r5, #0]
 8006fd4:	b103      	cbz	r3, 8006fd8 <_fstat_r+0x1c>
 8006fd6:	6023      	str	r3, [r4, #0]
 8006fd8:	bd38      	pop	{r3, r4, r5, pc}
 8006fda:	bf00      	nop
 8006fdc:	2000019c 	.word	0x2000019c

08006fe0 <_isatty_r>:
 8006fe0:	b538      	push	{r3, r4, r5, lr}
 8006fe2:	4d06      	ldr	r5, [pc, #24]	; (8006ffc <_isatty_r+0x1c>)
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	4604      	mov	r4, r0
 8006fe8:	4608      	mov	r0, r1
 8006fea:	602b      	str	r3, [r5, #0]
 8006fec:	f7f9 fe97 	bl	8000d1e <_isatty>
 8006ff0:	1c43      	adds	r3, r0, #1
 8006ff2:	d102      	bne.n	8006ffa <_isatty_r+0x1a>
 8006ff4:	682b      	ldr	r3, [r5, #0]
 8006ff6:	b103      	cbz	r3, 8006ffa <_isatty_r+0x1a>
 8006ff8:	6023      	str	r3, [r4, #0]
 8006ffa:	bd38      	pop	{r3, r4, r5, pc}
 8006ffc:	2000019c 	.word	0x2000019c

08007000 <_lseek_r>:
 8007000:	b538      	push	{r3, r4, r5, lr}
 8007002:	4d07      	ldr	r5, [pc, #28]	; (8007020 <_lseek_r+0x20>)
 8007004:	4604      	mov	r4, r0
 8007006:	4608      	mov	r0, r1
 8007008:	4611      	mov	r1, r2
 800700a:	2200      	movs	r2, #0
 800700c:	602a      	str	r2, [r5, #0]
 800700e:	461a      	mov	r2, r3
 8007010:	f7f9 fe90 	bl	8000d34 <_lseek>
 8007014:	1c43      	adds	r3, r0, #1
 8007016:	d102      	bne.n	800701e <_lseek_r+0x1e>
 8007018:	682b      	ldr	r3, [r5, #0]
 800701a:	b103      	cbz	r3, 800701e <_lseek_r+0x1e>
 800701c:	6023      	str	r3, [r4, #0]
 800701e:	bd38      	pop	{r3, r4, r5, pc}
 8007020:	2000019c 	.word	0x2000019c

08007024 <__malloc_lock>:
 8007024:	4801      	ldr	r0, [pc, #4]	; (800702c <__malloc_lock+0x8>)
 8007026:	f7ff bb1d 	b.w	8006664 <__retarget_lock_acquire_recursive>
 800702a:	bf00      	nop
 800702c:	20000190 	.word	0x20000190

08007030 <__malloc_unlock>:
 8007030:	4801      	ldr	r0, [pc, #4]	; (8007038 <__malloc_unlock+0x8>)
 8007032:	f7ff bb18 	b.w	8006666 <__retarget_lock_release_recursive>
 8007036:	bf00      	nop
 8007038:	20000190 	.word	0x20000190

0800703c <_read_r>:
 800703c:	b538      	push	{r3, r4, r5, lr}
 800703e:	4d07      	ldr	r5, [pc, #28]	; (800705c <_read_r+0x20>)
 8007040:	4604      	mov	r4, r0
 8007042:	4608      	mov	r0, r1
 8007044:	4611      	mov	r1, r2
 8007046:	2200      	movs	r2, #0
 8007048:	602a      	str	r2, [r5, #0]
 800704a:	461a      	mov	r2, r3
 800704c:	f7f9 fe12 	bl	8000c74 <_read>
 8007050:	1c43      	adds	r3, r0, #1
 8007052:	d102      	bne.n	800705a <_read_r+0x1e>
 8007054:	682b      	ldr	r3, [r5, #0]
 8007056:	b103      	cbz	r3, 800705a <_read_r+0x1e>
 8007058:	6023      	str	r3, [r4, #0]
 800705a:	bd38      	pop	{r3, r4, r5, pc}
 800705c:	2000019c 	.word	0x2000019c

08007060 <_init>:
 8007060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007062:	bf00      	nop
 8007064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007066:	bc08      	pop	{r3}
 8007068:	469e      	mov	lr, r3
 800706a:	4770      	bx	lr

0800706c <_fini>:
 800706c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800706e:	bf00      	nop
 8007070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007072:	bc08      	pop	{r3}
 8007074:	469e      	mov	lr, r3
 8007076:	4770      	bx	lr
