
battbaby_f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c38  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08004dd8  08004dd8  00014dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fc4  08004fc4  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08004fc4  08004fc4  00014fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fcc  08004fcc  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fcc  08004fcc  00014fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fd0  08004fd0  00014fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08004fd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  2000007c  08005050  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08005050  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b20d  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000189f  00000000  00000000  0002b2b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  0002cb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002d568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016aac  00000000  00000000  0002def8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c291  00000000  00000000  000449a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a2ea  00000000  00000000  00050c35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000daf1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000318c  00000000  00000000  000daf70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004dc0 	.word	0x08004dc0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08004dc0 	.word	0x08004dc0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800058c:	1d39      	adds	r1, r7, #4
 800058e:	f04f 33ff 	mov.w	r3, #4294967295
 8000592:	2201      	movs	r2, #1
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <__io_putchar+0x20>)
 8000596:	f003 f868 	bl	800366a <HAL_UART_Transmit>
  return ch;
 800059a:	687b      	ldr	r3, [r7, #4]
}
 800059c:	4618      	mov	r0, r3
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000130 	.word	0x20000130

080005a8 <BQ27441_i2cWriteBytes>:
 	returns HAL_OK if write successful
 	uint16_t memAddress: memory address within the BQ27441 where the data should start being written.
	uint8_t *pData: pointer to the array of data bytes that are to be written to the device.
	uint16_t Size:  number of bytes to write.
*/
HAL_StatusTypeDef BQ27441_i2cWriteBytes(uint16_t memAddress, uint8_t *pData, uint16_t Size) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af04      	add	r7, sp, #16
 80005ae:	4603      	mov	r3, r0
 80005b0:	6039      	str	r1, [r7, #0]
 80005b2:	80fb      	strh	r3, [r7, #6]
 80005b4:	4613      	mov	r3, r2
 80005b6:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Mem_Write(&hi2c3, BQ27441_I2C_ADDRESS << 1, memAddress, I2C_MEMADD_SIZE_8BIT, pData, Size, HAL_MAX_DELAY);
 80005b8:	88fa      	ldrh	r2, [r7, #6]
 80005ba:	f04f 33ff 	mov.w	r3, #4294967295
 80005be:	9302      	str	r3, [sp, #8]
 80005c0:	88bb      	ldrh	r3, [r7, #4]
 80005c2:	9301      	str	r3, [sp, #4]
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	2301      	movs	r3, #1
 80005ca:	21aa      	movs	r1, #170	; 0xaa
 80005cc:	4803      	ldr	r0, [pc, #12]	; (80005dc <BQ27441_i2cWriteBytes+0x34>)
 80005ce:	f001 fc1d 	bl	8001e0c <HAL_I2C_Mem_Write>
 80005d2:	4603      	mov	r3, r0
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000098 	.word	0x20000098

080005e0 <BQ27441_i2cReadBytes>:
 	returns HAL_OK if read successful
	uint16_t memAddress: memory address within the BQ27441 from which the data should start being read.
	uint8_t *pData: pointer to the buffer where the read data will be stored.
	uint16_t Size: number of bytes to read.
*/
HAL_StatusTypeDef BQ27441_i2cReadBytes(uint16_t memAddress, uint8_t *pData, uint16_t Size) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af04      	add	r7, sp, #16
 80005e6:	4603      	mov	r3, r0
 80005e8:	6039      	str	r1, [r7, #0]
 80005ea:	80fb      	strh	r3, [r7, #6]
 80005ec:	4613      	mov	r3, r2
 80005ee:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Mem_Read(&hi2c3, BQ27441_I2C_ADDRESS << 1, memAddress, I2C_MEMADD_SIZE_8BIT, pData, Size, HAL_MAX_DELAY);
 80005f0:	88fa      	ldrh	r2, [r7, #6]
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295
 80005f6:	9302      	str	r3, [sp, #8]
 80005f8:	88bb      	ldrh	r3, [r7, #4]
 80005fa:	9301      	str	r3, [sp, #4]
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2301      	movs	r3, #1
 8000602:	21aa      	movs	r1, #170	; 0xaa
 8000604:	4803      	ldr	r0, [pc, #12]	; (8000614 <BQ27441_i2cReadBytes+0x34>)
 8000606:	f001 fcfb 	bl	8002000 <HAL_I2C_Mem_Read>
 800060a:	4603      	mov	r3, r0
}
 800060c:	4618      	mov	r0, r3
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000098 	.word	0x20000098

08000618 <BQ27441_readWord>:
/*
	function uses BQ27441_i2cReadBytes to read strictly two bytes of data
	returns a combined 16 bit word.
	uint16_t subAddress: The sub-address or register address within the BQ27441 device from which the 16-bit word will be read.
*/
uint16_t BQ27441_readWord(uint16_t subAddress) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    BQ27441_i2cReadBytes(subAddress, data, 2);
 8000622:	f107 010c 	add.w	r1, r7, #12
 8000626:	88fb      	ldrh	r3, [r7, #6]
 8000628:	2202      	movs	r2, #2
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff ffd8 	bl	80005e0 <BQ27441_i2cReadBytes>
    return ((uint16_t) data[1] << 8) | data[0];
 8000630:	7b7b      	ldrb	r3, [r7, #13]
 8000632:	021b      	lsls	r3, r3, #8
 8000634:	b21a      	sxth	r2, r3
 8000636:	7b3b      	ldrb	r3, [r7, #12]
 8000638:	b21b      	sxth	r3, r3
 800063a:	4313      	orrs	r3, r2
 800063c:	b21b      	sxth	r3, r3
 800063e:	b29b      	uxth	r3, r3
}
 8000640:	4618      	mov	r0, r3
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <BQ27441_soc>:
/*
	function gets FILTERED/UNFILTERED SoC using BQ27441_readWord
	returns 16 bit SoC value.
	soc_measure type: enumeration value that specifies filtered or unfiltered SoC value should be read. (filtered is basically smoothed out value<-datasheet said so)
*/
uint16_t BQ27441_soc(soc_measure type) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
    //type = FILTERED;
    uint16_t socRet = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	81fb      	strh	r3, [r7, #14]
    switch (type) {
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d002      	beq.n	8000662 <BQ27441_soc+0x1a>
 800065c:	2b01      	cmp	r3, #1
 800065e:	d006      	beq.n	800066e <BQ27441_soc+0x26>
 8000660:	e00b      	b.n	800067a <BQ27441_soc+0x32>
        case FILTERED:
            socRet = BQ27441_readWord(BQ27441_COMMAND_SOC);
 8000662:	201c      	movs	r0, #28
 8000664:	f7ff ffd8 	bl	8000618 <BQ27441_readWord>
 8000668:	4603      	mov	r3, r0
 800066a:	81fb      	strh	r3, [r7, #14]
            break;
 800066c:	e005      	b.n	800067a <BQ27441_soc+0x32>
        case UNFILTERED:
            socRet = BQ27441_readWord(BQ27441_COMMAND_SOC_UNFL);
 800066e:	2030      	movs	r0, #48	; 0x30
 8000670:	f7ff ffd2 	bl	8000618 <BQ27441_readWord>
 8000674:	4603      	mov	r3, r0
 8000676:	81fb      	strh	r3, [r7, #14]
            break;
 8000678:	bf00      	nop
    }
    return socRet;
 800067a:	89fb      	ldrh	r3, [r7, #14]
}
 800067c:	4618      	mov	r0, r3
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <BQ27441_voltage>:
/*
	function gets Voltage using BQ27441_readWord
	returns 16 bit voltage value.
*/
uint16_t BQ27441_voltage(void) {
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
    return BQ27441_readWord(BQ27441_COMMAND_VOLTAGE);
 8000688:	2004      	movs	r0, #4
 800068a:	f7ff ffc5 	bl	8000618 <BQ27441_readWord>
 800068e:	4603      	mov	r3, r0
}
 8000690:	4618      	mov	r0, r3
 8000692:	bd80      	pop	{r7, pc}

08000694 <BQ27441_power>:
/*
	function gets power using BQ27441_readWord
	returns 16 bit power value.
*/
int16_t BQ27441_power(void) {
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
    return (int16_t) BQ27441_readWord(BQ27441_COMMAND_AVG_POWER);
 8000698:	2018      	movs	r0, #24
 800069a:	f7ff ffbd 	bl	8000618 <BQ27441_readWord>
 800069e:	4603      	mov	r3, r0
 80006a0:	b21b      	sxth	r3, r3
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <BQ27441_opconfig>:

int16_t BQ27441_opconfig(void) {
 80006a6:	b580      	push	{r7, lr}
 80006a8:	af00      	add	r7, sp, #0
    return (int16_t) BQ27441_readWord(BQ27441_EXTENDED_OPCONFIG);
 80006aa:	203a      	movs	r0, #58	; 0x3a
 80006ac:	f7ff ffb4 	bl	8000618 <BQ27441_readWord>
 80006b0:	4603      	mov	r3, r0
 80006b2:	b21b      	sxth	r3, r3
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <BQ27441_deviceType>:

uint16_t BQ27441_deviceType(void) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
	// command sent to slave to tell it master wants to know devicetype
	// 0xFF to get right 8 bits of BQ27441_CONTROL_DEVICE_TYPE
	// >>8 to get left 8 bits, discarding right 8 bits of BQ27441_CONTROL_DEVICE_TYPE
    uint8_t command[2] = {BQ27441_CONTROL_DEVICE_TYPE & 0xFF, BQ27441_CONTROL_DEVICE_TYPE >> 8};
 80006be:	2301      	movs	r3, #1
 80006c0:	80bb      	strh	r3, [r7, #4]
    uint8_t data[2];
    uint16_t deviceType = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	80fb      	strh	r3, [r7, #6]

    BQ27441_i2cWriteBytes(BQ27441_COMMAND_CONTROL, command, sizeof(command)); //write command to slave
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2202      	movs	r2, #2
 80006ca:	4619      	mov	r1, r3
 80006cc:	2000      	movs	r0, #0
 80006ce:	f7ff ff6b 	bl	80005a8 <BQ27441_i2cWriteBytes>

    HAL_Delay(10); //delay to ensure device is ready
 80006d2:	200a      	movs	r0, #10
 80006d4:	f000 fd44 	bl	8001160 <HAL_Delay>

    if (BQ27441_i2cReadBytes(BQ27441_COMMAND_CONTROL, data, sizeof(data)) == HAL_OK) { //read device type from control register
 80006d8:	463b      	mov	r3, r7
 80006da:	2202      	movs	r2, #2
 80006dc:	4619      	mov	r1, r3
 80006de:	2000      	movs	r0, #0
 80006e0:	f7ff ff7e 	bl	80005e0 <BQ27441_i2cReadBytes>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d107      	bne.n	80006fa <BQ27441_deviceType+0x42>
        deviceType = (data[1] << 8) | data[0];
 80006ea:	787b      	ldrb	r3, [r7, #1]
 80006ec:	021b      	lsls	r3, r3, #8
 80006ee:	b21a      	sxth	r2, r3
 80006f0:	783b      	ldrb	r3, [r7, #0]
 80006f2:	b21b      	sxth	r3, r3
 80006f4:	4313      	orrs	r3, r2
 80006f6:	b21b      	sxth	r3, r3
 80006f8:	80fb      	strh	r3, [r7, #6]
    }
    return deviceType;
 80006fa:	88fb      	ldrh	r3, [r7, #6]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <BQ27441_init>:
// function to initialize battery, check if device type matches
bool BQ27441_init(BQ27441_ctx_t *dev) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
    if (dev == NULL)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d101      	bne.n	8000716 <BQ27441_init+0x12>
        return false;
 8000712:	2300      	movs	r3, #0
 8000714:	e00a      	b.n	800072c <BQ27441_init+0x28>
//    ctx.read_reg = dev->read_reg;
//    ctx.write_reg = dev->write_reg;
//    ctx.BQ27441_i2c_address = dev->BQ27441_i2c_address;

    if (BQ27441_deviceType() == BQ27441_DEVICE_ID) {
 8000716:	f7ff ffcf 	bl	80006b8 <BQ27441_deviceType>
 800071a:	4603      	mov	r3, r0
 800071c:	461a      	mov	r2, r3
 800071e:	f240 4321 	movw	r3, #1057	; 0x421
 8000722:	429a      	cmp	r2, r3
 8000724:	d101      	bne.n	800072a <BQ27441_init+0x26>
        return true;
 8000726:	2301      	movs	r3, #1
 8000728:	e000      	b.n	800072c <BQ27441_init+0x28>
    } else
        return false;
 800072a:	2300      	movs	r3, #0
}
 800072c:	4618      	mov	r0, r3
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <check_charging>:
	if (bat_charging && charge < 99) {
		HAL_GPIO_WritePin(BAT_CE_GPIO_Port, BAT_CE_Pin, GPIO_PIN_RESET);
	}
}

void check_charging(void) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
	uint16_t pow = BQ27441_power();
 800073a:	f7ff ffab 	bl	8000694 <BQ27441_power>
 800073e:	4603      	mov	r3, r0
 8000740:	80fb      	strh	r3, [r7, #6]
//	printf("pow: %d\r\n", pow);
	if (pow > 12000) {
 8000742:	88fb      	ldrh	r3, [r7, #6]
 8000744:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000748:	4293      	cmp	r3, r2
 800074a:	d903      	bls.n	8000754 <check_charging+0x20>
		bat_charging = 0;
 800074c:	4b05      	ldr	r3, [pc, #20]	; (8000764 <check_charging+0x30>)
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
	}
	else {
		bat_charging = 1;
	}
}
 8000752:	e002      	b.n	800075a <check_charging+0x26>
		bat_charging = 1;
 8000754:	4b03      	ldr	r3, [pc, #12]	; (8000764 <check_charging+0x30>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000174 	.word	0x20000174

08000768 <updateBat>:

void updateBat(void) {
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	charge = BQ27441_soc(FILTERED);
 800076c:	2000      	movs	r0, #0
 800076e:	f7ff ff6b 	bl	8000648 <BQ27441_soc>
 8000772:	4603      	mov	r3, r0
 8000774:	b21a      	sxth	r2, r3
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <updateBat+0x4c>)
 8000778:	801a      	strh	r2, [r3, #0]
	printf("lcd charge: %d\r\n", charge);
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <updateBat+0x4c>)
 800077c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000780:	4619      	mov	r1, r3
 8000782:	480d      	ldr	r0, [pc, #52]	; (80007b8 <updateBat+0x50>)
 8000784:	f003 fb18 	bl	8003db8 <iprintf>
	if (bat_charging){
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <updateBat+0x54>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d00f      	beq.n	80007b0 <updateBat+0x48>
		if (charge >= 99) {
 8000790:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <updateBat+0x4c>)
 8000792:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000796:	2b62      	cmp	r3, #98	; 0x62
 8000798:	dd05      	ble.n	80007a6 <updateBat+0x3e>
			HAL_GPIO_WritePin(BAT_CE_GPIO_Port, BAT_CE_Pin, GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	2180      	movs	r1, #128	; 0x80
 800079e:	4808      	ldr	r0, [pc, #32]	; (80007c0 <updateBat+0x58>)
 80007a0:	f000 ff98 	bl	80016d4 <HAL_GPIO_WritePin>
		else {
			HAL_GPIO_WritePin(BAT_CE_GPIO_Port, BAT_CE_Pin, GPIO_PIN_RESET);
		}
	}

}
 80007a4:	e004      	b.n	80007b0 <updateBat+0x48>
			HAL_GPIO_WritePin(BAT_CE_GPIO_Port, BAT_CE_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2180      	movs	r1, #128	; 0x80
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <updateBat+0x58>)
 80007ac:	f000 ff92 	bl	80016d4 <HAL_GPIO_WritePin>
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000178 	.word	0x20000178
 80007b8:	08004dd8 	.word	0x08004dd8
 80007bc:	20000174 	.word	0x20000174
 80007c0:	40020800 	.word	0x40020800

080007c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ca:	f000 fc57 	bl	800107c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ce:	f000 f893 	bl	80008f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d2:	f000 f97b 	bl	8000acc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007d6:	f000 f94f 	bl	8000a78 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 80007da:	f000 f8f5 	bl	80009c8 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 80007de:	f000 f921 	bl	8000a24 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Making sure charging is disabled.
  HAL_GPIO_WritePin(BAT_CE_GPIO_Port, BAT_CE_Pin, GPIO_PIN_SET);
 80007e2:	2201      	movs	r2, #1
 80007e4:	2180      	movs	r1, #128	; 0x80
 80007e6:	4834      	ldr	r0, [pc, #208]	; (80008b8 <main+0xf4>)
 80007e8:	f000 ff74 	bl	80016d4 <HAL_GPIO_WritePin>
//  			printf(" - ");
//  			fflush(stdout);
//  		}
//  	}

  	printf("\r\n~*BATTBABY*~\r\n");
 80007ec:	4833      	ldr	r0, [pc, #204]	; (80008bc <main+0xf8>)
 80007ee:	f003 fb69 	bl	8003ec4 <puts>
  	// Checking for connection
  	HAL_StatusTypeDef res;
  	uint8_t receiveBuffer[1];
  	while (1) {
  		if (HAL_I2C_Master_Receive(&hi2c3, (uint16_t) BQ27441_I2C_ADDRESS << 1, receiveBuffer, sizeof(receiveBuffer), HAL_MAX_DELAY) == HAL_OK) {
 80007f2:	463a      	mov	r2, r7
 80007f4:	f04f 33ff 	mov.w	r3, #4294967295
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	2301      	movs	r3, #1
 80007fc:	21aa      	movs	r1, #170	; 0xaa
 80007fe:	4830      	ldr	r0, [pc, #192]	; (80008c0 <main+0xfc>)
 8000800:	f001 f8de 	bl	80019c0 <HAL_I2C_Master_Receive>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d1f3      	bne.n	80007f2 <main+0x2e>
  			printf("Device found\r\n");
 800080a:	482e      	ldr	r0, [pc, #184]	; (80008c4 <main+0x100>)
 800080c:	f003 fb5a 	bl	8003ec4 <puts>
  			break;
 8000810:	bf00      	nop
  		}
  	}

    printf("Attempting to read BQ27441 device type...\r\n");
 8000812:	482d      	ldr	r0, [pc, #180]	; (80008c8 <main+0x104>)
 8000814:	f003 fb56 	bl	8003ec4 <puts>
    uint16_t deviceType = BQ27441_deviceType();
 8000818:	f7ff ff4e 	bl	80006b8 <BQ27441_deviceType>
 800081c:	4603      	mov	r3, r0
 800081e:	80fb      	strh	r3, [r7, #6]
    if (deviceType != 0) {
 8000820:	88fb      	ldrh	r3, [r7, #6]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d005      	beq.n	8000832 <main+0x6e>
  	  printf("BQ27441 Device Type: 0x%04X\r\n", deviceType);
 8000826:	88fb      	ldrh	r3, [r7, #6]
 8000828:	4619      	mov	r1, r3
 800082a:	4828      	ldr	r0, [pc, #160]	; (80008cc <main+0x108>)
 800082c:	f003 fac4 	bl	8003db8 <iprintf>
 8000830:	e002      	b.n	8000838 <main+0x74>
    } else {
  	  printf("Failed to read BQ27441 device type.\r\n");
 8000832:	4827      	ldr	r0, [pc, #156]	; (80008d0 <main+0x10c>)
 8000834:	f003 fb46 	bl	8003ec4 <puts>
    }
    if (BQ27441_init(&BQ27441)) {
 8000838:	4826      	ldr	r0, [pc, #152]	; (80008d4 <main+0x110>)
 800083a:	f7ff ff63 	bl	8000704 <BQ27441_init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d023      	beq.n	800088c <main+0xc8>
    	HAL_Delay(100);
 8000844:	2064      	movs	r0, #100	; 0x64
 8000846:	f000 fc8b 	bl	8001160 <HAL_Delay>
  	  printf("BQ27441 initialization successful.\r\n");
 800084a:	4823      	ldr	r0, [pc, #140]	; (80008d8 <main+0x114>)
 800084c:	f003 fb3a 	bl	8003ec4 <puts>
  	  uint16_t socValue = BQ27441_soc(FILTERED);
 8000850:	2000      	movs	r0, #0
 8000852:	f7ff fef9 	bl	8000648 <BQ27441_soc>
 8000856:	4603      	mov	r3, r0
 8000858:	80bb      	strh	r3, [r7, #4]
  	    printf("State of Charge: %u%%\r\n", BQ27441_soc(UNFILTERED));
 800085a:	2001      	movs	r0, #1
 800085c:	f7ff fef4 	bl	8000648 <BQ27441_soc>
 8000860:	4603      	mov	r3, r0
 8000862:	4619      	mov	r1, r3
 8000864:	481d      	ldr	r0, [pc, #116]	; (80008dc <main+0x118>)
 8000866:	f003 faa7 	bl	8003db8 <iprintf>
  	    printf("Voltage: %dmV\r\n", BQ27441_voltage());
 800086a:	f7ff ff0b 	bl	8000684 <BQ27441_voltage>
 800086e:	4603      	mov	r3, r0
 8000870:	4619      	mov	r1, r3
 8000872:	481b      	ldr	r0, [pc, #108]	; (80008e0 <main+0x11c>)
 8000874:	f003 faa0 	bl	8003db8 <iprintf>
  	    uint16_t power = BQ27441_power();
 8000878:	f7ff ff0c 	bl	8000694 <BQ27441_power>
 800087c:	4603      	mov	r3, r0
 800087e:	807b      	strh	r3, [r7, #2]
  	    printf("Power: %umAh\r\n", power);
 8000880:	887b      	ldrh	r3, [r7, #2]
 8000882:	4619      	mov	r1, r3
 8000884:	4817      	ldr	r0, [pc, #92]	; (80008e4 <main+0x120>)
 8000886:	f003 fa97 	bl	8003db8 <iprintf>
 800088a:	e002      	b.n	8000892 <main+0xce>
    } else {
  	  printf("BQ27441 initialization failed.\r\n");
 800088c:	4816      	ldr	r0, [pc, #88]	; (80008e8 <main+0x124>)
 800088e:	f003 fb19 	bl	8003ec4 <puts>
    }
    check_charging();
 8000892:	f7ff ff4f 	bl	8000734 <check_charging>
    printf("Charging: %d\r\n", bat_charging);
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <main+0x128>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4619      	mov	r1, r3
 800089c:	4814      	ldr	r0, [pc, #80]	; (80008f0 <main+0x12c>)
 800089e:	f003 fa8b 	bl	8003db8 <iprintf>
    printf("%d\r\n", BQ27441_opconfig() & BQ27441_OPCONFIG_BATLOWEN);
 80008a2:	f7ff ff00 	bl	80006a6 <BQ27441_opconfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	f003 0304 	and.w	r3, r3, #4
 80008ae:	4619      	mov	r1, r3
 80008b0:	4810      	ldr	r0, [pc, #64]	; (80008f4 <main+0x130>)
 80008b2:	f003 fa81 	bl	8003db8 <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <main+0xf2>
 80008b8:	40020800 	.word	0x40020800
 80008bc:	08004dec 	.word	0x08004dec
 80008c0:	20000098 	.word	0x20000098
 80008c4:	08004dfc 	.word	0x08004dfc
 80008c8:	08004e0c 	.word	0x08004e0c
 80008cc:	08004e38 	.word	0x08004e38
 80008d0:	08004e58 	.word	0x08004e58
 80008d4:	20000000 	.word	0x20000000
 80008d8:	08004e80 	.word	0x08004e80
 80008dc:	08004ea4 	.word	0x08004ea4
 80008e0:	08004ebc 	.word	0x08004ebc
 80008e4:	08004ecc 	.word	0x08004ecc
 80008e8:	08004edc 	.word	0x08004edc
 80008ec:	20000174 	.word	0x20000174
 80008f0:	08004efc 	.word	0x08004efc
 80008f4:	08004f0c 	.word	0x08004f0c

080008f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b094      	sub	sp, #80	; 0x50
 80008fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fe:	f107 0320 	add.w	r3, r7, #32
 8000902:	2230      	movs	r2, #48	; 0x30
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f003 fa4e 	bl	8003da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800091c:	2300      	movs	r3, #0
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	4b27      	ldr	r3, [pc, #156]	; (80009c0 <SystemClock_Config+0xc8>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	4a26      	ldr	r2, [pc, #152]	; (80009c0 <SystemClock_Config+0xc8>)
 8000926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092a:	6413      	str	r3, [r2, #64]	; 0x40
 800092c:	4b24      	ldr	r3, [pc, #144]	; (80009c0 <SystemClock_Config+0xc8>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000938:	2300      	movs	r3, #0
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <SystemClock_Config+0xcc>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a20      	ldr	r2, [pc, #128]	; (80009c4 <SystemClock_Config+0xcc>)
 8000942:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000946:	6013      	str	r3, [r2, #0]
 8000948:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <SystemClock_Config+0xcc>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000954:	2301      	movs	r3, #1
 8000956:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000958:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095e:	2302      	movs	r3, #2
 8000960:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000962:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000966:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000968:	2304      	movs	r3, #4
 800096a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800096c:	2360      	movs	r3, #96	; 0x60
 800096e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000970:	2302      	movs	r3, #2
 8000972:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000974:	2304      	movs	r3, #4
 8000976:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000978:	f107 0320 	add.w	r3, r7, #32
 800097c:	4618      	mov	r0, r3
 800097e:	f002 f98f 	bl	8002ca0 <HAL_RCC_OscConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000988:	f000 f94b 	bl	8000c22 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098c:	230f      	movs	r3, #15
 800098e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000990:	2302      	movs	r3, #2
 8000992:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009a2:	f107 030c 	add.w	r3, r7, #12
 80009a6:	2103      	movs	r1, #3
 80009a8:	4618      	mov	r0, r3
 80009aa:	f002 fbf1 	bl	8003190 <HAL_RCC_ClockConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009b4:	f000 f935 	bl	8000c22 <Error_Handler>
  }
}
 80009b8:	bf00      	nop
 80009ba:	3750      	adds	r7, #80	; 0x50
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40007000 	.word	0x40007000

080009c8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <MX_I2C3_Init+0x50>)
 80009ce:	4a13      	ldr	r2, [pc, #76]	; (8000a1c <MX_I2C3_Init+0x54>)
 80009d0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80009d2:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <MX_I2C3_Init+0x50>)
 80009d4:	4a12      	ldr	r2, [pc, #72]	; (8000a20 <MX_I2C3_Init+0x58>)
 80009d6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <MX_I2C3_Init+0x50>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <MX_I2C3_Init+0x50>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <MX_I2C3_Init+0x50>)
 80009e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009ea:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009ec:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <MX_I2C3_Init+0x50>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <MX_I2C3_Init+0x50>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009f8:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <MX_I2C3_Init+0x50>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009fe:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <MX_I2C3_Init+0x50>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a04:	4804      	ldr	r0, [pc, #16]	; (8000a18 <MX_I2C3_Init+0x50>)
 8000a06:	f000 fe97 	bl	8001738 <HAL_I2C_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000a10:	f000 f907 	bl	8000c22 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000098 	.word	0x20000098
 8000a1c:	40005c00 	.word	0x40005c00
 8000a20:	00061a80 	.word	0x00061a80

08000a24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a28:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_USART1_UART_Init+0x4c>)
 8000a2a:	4a12      	ldr	r2, [pc, #72]	; (8000a74 <MX_USART1_UART_Init+0x50>)
 8000a2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <MX_USART1_UART_Init+0x4c>)
 8000a30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <MX_USART1_UART_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <MX_USART1_UART_Init+0x4c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <MX_USART1_UART_Init+0x4c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_USART1_UART_Init+0x4c>)
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <MX_USART1_UART_Init+0x4c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_USART1_UART_Init+0x4c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_USART1_UART_Init+0x4c>)
 8000a5c:	f002 fdb8 	bl	80035d0 <HAL_UART_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a66:	f000 f8dc 	bl	8000c22 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	200000ec 	.word	0x200000ec
 8000a74:	40011000 	.word	0x40011000

08000a78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_USART2_UART_Init+0x4c>)
 8000a7e:	4a12      	ldr	r2, [pc, #72]	; (8000ac8 <MX_USART2_UART_Init+0x50>)
 8000a80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <MX_USART2_UART_Init+0x4c>)
 8000a84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <MX_USART2_UART_Init+0x4c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_USART2_UART_Init+0x4c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <MX_USART2_UART_Init+0x4c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_USART2_UART_Init+0x4c>)
 8000a9e:	220c      	movs	r2, #12
 8000aa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <MX_USART2_UART_Init+0x4c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_USART2_UART_Init+0x4c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aae:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <MX_USART2_UART_Init+0x4c>)
 8000ab0:	f002 fd8e 	bl	80035d0 <HAL_UART_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000aba:	f000 f8b2 	bl	8000c22 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000130 	.word	0x20000130
 8000ac8:	40004400 	.word	0x40004400

08000acc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	; 0x28
 8000ad0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	4b46      	ldr	r3, [pc, #280]	; (8000c00 <MX_GPIO_Init+0x134>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a45      	ldr	r2, [pc, #276]	; (8000c00 <MX_GPIO_Init+0x134>)
 8000aec:	f043 0304 	orr.w	r3, r3, #4
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b43      	ldr	r3, [pc, #268]	; (8000c00 <MX_GPIO_Init+0x134>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0304 	and.w	r3, r3, #4
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	4b3f      	ldr	r3, [pc, #252]	; (8000c00 <MX_GPIO_Init+0x134>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a3e      	ldr	r2, [pc, #248]	; (8000c00 <MX_GPIO_Init+0x134>)
 8000b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b3c      	ldr	r3, [pc, #240]	; (8000c00 <MX_GPIO_Init+0x134>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	4b38      	ldr	r3, [pc, #224]	; (8000c00 <MX_GPIO_Init+0x134>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a37      	ldr	r2, [pc, #220]	; (8000c00 <MX_GPIO_Init+0x134>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b35      	ldr	r3, [pc, #212]	; (8000c00 <MX_GPIO_Init+0x134>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	60bb      	str	r3, [r7, #8]
 8000b34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	4b31      	ldr	r3, [pc, #196]	; (8000c00 <MX_GPIO_Init+0x134>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a30      	ldr	r2, [pc, #192]	; (8000c00 <MX_GPIO_Init+0x134>)
 8000b40:	f043 0302 	orr.w	r3, r3, #2
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b2e      	ldr	r3, [pc, #184]	; (8000c00 <MX_GPIO_Init+0x134>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0302 	and.w	r3, r3, #2
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2120      	movs	r1, #32
 8000b56:	482b      	ldr	r0, [pc, #172]	; (8000c04 <MX_GPIO_Init+0x138>)
 8000b58:	f000 fdbc 	bl	80016d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BAT_CE_GPIO_Port, BAT_CE_Pin, GPIO_PIN_RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2180      	movs	r1, #128	; 0x80
 8000b60:	4829      	ldr	r0, [pc, #164]	; (8000c08 <MX_GPIO_Init+0x13c>)
 8000b62:	f000 fdb7 	bl	80016d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b6c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4822      	ldr	r0, [pc, #136]	; (8000c08 <MX_GPIO_Init+0x13c>)
 8000b7e:	f000 fc25 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b82:	2320      	movs	r3, #32
 8000b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b86:	2301      	movs	r3, #1
 8000b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	481a      	ldr	r0, [pc, #104]	; (8000c04 <MX_GPIO_Init+0x138>)
 8000b9a:	f000 fc17 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pin : BAT_CE_Pin */
  GPIO_InitStruct.Pin = BAT_CE_Pin;
 8000b9e:	2380      	movs	r3, #128	; 0x80
 8000ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BAT_CE_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4814      	ldr	r0, [pc, #80]	; (8000c08 <MX_GPIO_Init+0x13c>)
 8000bb6:	f000 fc09 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pin : BAT_GPOUT_Pin */
  GPIO_InitStruct.Pin = BAT_GPOUT_Pin;
 8000bba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bc0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BAT_GPOUT_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 0314 	add.w	r3, r7, #20
 8000bce:	4619      	mov	r1, r3
 8000bd0:	480d      	ldr	r0, [pc, #52]	; (8000c08 <MX_GPIO_Init+0x13c>)
 8000bd2:	f000 fbfb 	bl	80013cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2100      	movs	r1, #0
 8000bda:	2017      	movs	r0, #23
 8000bdc:	f000 fbbf 	bl	800135e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000be0:	2017      	movs	r0, #23
 8000be2:	f000 fbd8 	bl	8001396 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2100      	movs	r1, #0
 8000bea:	2028      	movs	r0, #40	; 0x28
 8000bec:	f000 fbb7 	bl	800135e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bf0:	2028      	movs	r0, #40	; 0x28
 8000bf2:	f000 fbd0 	bl	8001396 <HAL_NVIC_EnableIRQ>

}
 8000bf6:	bf00      	nop
 8000bf8:	3728      	adds	r7, #40	; 0x28
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40020000 	.word	0x40020000
 8000c08:	40020800 	.word	0x40020800

08000c0c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	80fb      	strh	r3, [r7, #6]
	 if ((GPIO_Pin == B1_Pin || BAT_GPOUT_Pin)) {
		 updateBat();
 8000c16:	f7ff fda7 	bl	8000768 <updateBat>
	 }
	 else {
		 __NOP();
	 }
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c26:	b672      	cpsid	i
}
 8000c28:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <Error_Handler+0x8>

08000c2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	4a0f      	ldr	r2, [pc, #60]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c40:	6453      	str	r3, [r2, #68]	; 0x44
 8000c42:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	603b      	str	r3, [r7, #0]
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	4a08      	ldr	r2, [pc, #32]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c6a:	2007      	movs	r0, #7
 8000c6c:	f000 fb6c 	bl	8001348 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40023800 	.word	0x40023800

08000c7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08a      	sub	sp, #40	; 0x28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a29      	ldr	r2, [pc, #164]	; (8000d40 <HAL_I2C_MspInit+0xc4>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d14b      	bne.n	8000d36 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	4b28      	ldr	r3, [pc, #160]	; (8000d44 <HAL_I2C_MspInit+0xc8>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a27      	ldr	r2, [pc, #156]	; (8000d44 <HAL_I2C_MspInit+0xc8>)
 8000ca8:	f043 0304 	orr.w	r3, r3, #4
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b25      	ldr	r3, [pc, #148]	; (8000d44 <HAL_I2C_MspInit+0xc8>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0304 	and.w	r3, r3, #4
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	4b21      	ldr	r3, [pc, #132]	; (8000d44 <HAL_I2C_MspInit+0xc8>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a20      	ldr	r2, [pc, #128]	; (8000d44 <HAL_I2C_MspInit+0xc8>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b1e      	ldr	r3, [pc, #120]	; (8000d44 <HAL_I2C_MspInit+0xc8>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = BAT_SDA_Pin;
 8000cd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cdc:	2312      	movs	r3, #18
 8000cde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ce8:	2304      	movs	r3, #4
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BAT_SDA_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4815      	ldr	r0, [pc, #84]	; (8000d48 <HAL_I2C_MspInit+0xcc>)
 8000cf4:	f000 fb6a 	bl	80013cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BAT_SCL_Pin;
 8000cf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cfe:	2312      	movs	r3, #18
 8000d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d06:	2303      	movs	r3, #3
 8000d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d0a:	2304      	movs	r3, #4
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BAT_SCL_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	4619      	mov	r1, r3
 8000d14:	480d      	ldr	r0, [pc, #52]	; (8000d4c <HAL_I2C_MspInit+0xd0>)
 8000d16:	f000 fb59 	bl	80013cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <HAL_I2C_MspInit+0xc8>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	4a08      	ldr	r2, [pc, #32]	; (8000d44 <HAL_I2C_MspInit+0xc8>)
 8000d24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d28:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_I2C_MspInit+0xc8>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000d36:	bf00      	nop
 8000d38:	3728      	adds	r7, #40	; 0x28
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40005c00 	.word	0x40005c00
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020800 	.word	0x40020800
 8000d4c:	40020000 	.word	0x40020000

08000d50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08c      	sub	sp, #48	; 0x30
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 031c 	add.w	r3, r7, #28
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a32      	ldr	r2, [pc, #200]	; (8000e38 <HAL_UART_MspInit+0xe8>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d12d      	bne.n	8000dce <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	61bb      	str	r3, [r7, #24]
 8000d76:	4b31      	ldr	r3, [pc, #196]	; (8000e3c <HAL_UART_MspInit+0xec>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	4a30      	ldr	r2, [pc, #192]	; (8000e3c <HAL_UART_MspInit+0xec>)
 8000d7c:	f043 0310 	orr.w	r3, r3, #16
 8000d80:	6453      	str	r3, [r2, #68]	; 0x44
 8000d82:	4b2e      	ldr	r3, [pc, #184]	; (8000e3c <HAL_UART_MspInit+0xec>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d86:	f003 0310 	and.w	r3, r3, #16
 8000d8a:	61bb      	str	r3, [r7, #24]
 8000d8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
 8000d92:	4b2a      	ldr	r3, [pc, #168]	; (8000e3c <HAL_UART_MspInit+0xec>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a29      	ldr	r2, [pc, #164]	; (8000e3c <HAL_UART_MspInit+0xec>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b27      	ldr	r3, [pc, #156]	; (8000e3c <HAL_UART_MspInit+0xec>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
 8000daa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db0:	2302      	movs	r3, #2
 8000db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db8:	2303      	movs	r3, #3
 8000dba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dbc:	2307      	movs	r3, #7
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc0:	f107 031c 	add.w	r3, r7, #28
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	481e      	ldr	r0, [pc, #120]	; (8000e40 <HAL_UART_MspInit+0xf0>)
 8000dc8:	f000 fb00 	bl	80013cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dcc:	e030      	b.n	8000e30 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a1c      	ldr	r2, [pc, #112]	; (8000e44 <HAL_UART_MspInit+0xf4>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d12b      	bne.n	8000e30 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dd8:	2300      	movs	r3, #0
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <HAL_UART_MspInit+0xec>)
 8000dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de0:	4a16      	ldr	r2, [pc, #88]	; (8000e3c <HAL_UART_MspInit+0xec>)
 8000de2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de6:	6413      	str	r3, [r2, #64]	; 0x40
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <HAL_UART_MspInit+0xec>)
 8000dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <HAL_UART_MspInit+0xec>)
 8000dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfc:	4a0f      	ldr	r2, [pc, #60]	; (8000e3c <HAL_UART_MspInit+0xec>)
 8000dfe:	f043 0301 	orr.w	r3, r3, #1
 8000e02:	6313      	str	r3, [r2, #48]	; 0x30
 8000e04:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <HAL_UART_MspInit+0xec>)
 8000e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e10:	230c      	movs	r3, #12
 8000e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e20:	2307      	movs	r3, #7
 8000e22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e24:	f107 031c 	add.w	r3, r7, #28
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4805      	ldr	r0, [pc, #20]	; (8000e40 <HAL_UART_MspInit+0xf0>)
 8000e2c:	f000 face 	bl	80013cc <HAL_GPIO_Init>
}
 8000e30:	bf00      	nop
 8000e32:	3730      	adds	r7, #48	; 0x30
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40011000 	.word	0x40011000
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40020000 	.word	0x40020000
 8000e44:	40004400 	.word	0x40004400

08000e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <NMI_Handler+0x4>

08000e4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <HardFault_Handler+0x4>

08000e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <MemManage_Handler+0x4>

08000e5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <BusFault_Handler+0x4>

08000e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <UsageFault_Handler+0x4>

08000e66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e94:	f000 f944 	bl	8001120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BAT_GPOUT_Pin);
 8000ea0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000ea4:	f000 fc30 	bl	8001708 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000eb0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000eb4:	f000 fc28 	bl	8001708 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	e00a      	b.n	8000ee4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ece:	f3af 8000 	nop.w
 8000ed2:	4601      	mov	r1, r0
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	1c5a      	adds	r2, r3, #1
 8000ed8:	60ba      	str	r2, [r7, #8]
 8000eda:	b2ca      	uxtb	r2, r1
 8000edc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	697a      	ldr	r2, [r7, #20]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	dbf0      	blt.n	8000ece <_read+0x12>
  }

  return len;
 8000eec:	687b      	ldr	r3, [r7, #4]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b086      	sub	sp, #24
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	60f8      	str	r0, [r7, #12]
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	e009      	b.n	8000f1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	1c5a      	adds	r2, r3, #1
 8000f0c:	60ba      	str	r2, [r7, #8]
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fb37 	bl	8000584 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	697a      	ldr	r2, [r7, #20]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	dbf1      	blt.n	8000f08 <_write+0x12>
  }
  return len;
 8000f24:	687b      	ldr	r3, [r7, #4]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <_close>:

int _close(int file)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
 8000f4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f56:	605a      	str	r2, [r3, #4]
  return 0;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <_isatty>:

int _isatty(int file)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa0:	4a14      	ldr	r2, [pc, #80]	; (8000ff4 <_sbrk+0x5c>)
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <_sbrk+0x60>)
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fac:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <_sbrk+0x64>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d102      	bne.n	8000fba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb4:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <_sbrk+0x64>)
 8000fb6:	4a12      	ldr	r2, [pc, #72]	; (8001000 <_sbrk+0x68>)
 8000fb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fba:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <_sbrk+0x64>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d207      	bcs.n	8000fd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fc8:	f002 fec4 	bl	8003d54 <__errno>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	220c      	movs	r2, #12
 8000fd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd6:	e009      	b.n	8000fec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd8:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <_sbrk+0x64>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fde:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <_sbrk+0x64>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	4a05      	ldr	r2, [pc, #20]	; (8000ffc <_sbrk+0x64>)
 8000fe8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fea:	68fb      	ldr	r3, [r7, #12]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3718      	adds	r7, #24
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20020000 	.word	0x20020000
 8000ff8:	00000400 	.word	0x00000400
 8000ffc:	2000017c 	.word	0x2000017c
 8001000:	20000198 	.word	0x20000198

08001004 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <SystemInit+0x20>)
 800100a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800100e:	4a05      	ldr	r2, [pc, #20]	; (8001024 <SystemInit+0x20>)
 8001010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001014:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001028:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001060 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800102c:	480d      	ldr	r0, [pc, #52]	; (8001064 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800102e:	490e      	ldr	r1, [pc, #56]	; (8001068 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001030:	4a0e      	ldr	r2, [pc, #56]	; (800106c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001034:	e002      	b.n	800103c <LoopCopyDataInit>

08001036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103a:	3304      	adds	r3, #4

0800103c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800103c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001040:	d3f9      	bcc.n	8001036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001042:	4a0b      	ldr	r2, [pc, #44]	; (8001070 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001044:	4c0b      	ldr	r4, [pc, #44]	; (8001074 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001048:	e001      	b.n	800104e <LoopFillZerobss>

0800104a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800104c:	3204      	adds	r2, #4

0800104e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001050:	d3fb      	bcc.n	800104a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001052:	f7ff ffd7 	bl	8001004 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001056:	f002 fe83 	bl	8003d60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800105a:	f7ff fbb3 	bl	80007c4 <main>
  bx  lr    
 800105e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001060:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001068:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800106c:	08004fd4 	.word	0x08004fd4
  ldr r2, =_sbss
 8001070:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001074:	20000194 	.word	0x20000194

08001078 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001078:	e7fe      	b.n	8001078 <ADC_IRQHandler>
	...

0800107c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001080:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <HAL_Init+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0d      	ldr	r2, [pc, #52]	; (80010bc <HAL_Init+0x40>)
 8001086:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800108a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800108c:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <HAL_Init+0x40>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <HAL_Init+0x40>)
 8001092:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001096:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <HAL_Init+0x40>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a07      	ldr	r2, [pc, #28]	; (80010bc <HAL_Init+0x40>)
 800109e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a4:	2003      	movs	r0, #3
 80010a6:	f000 f94f 	bl	8001348 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010aa:	2000      	movs	r0, #0
 80010ac:	f000 f808 	bl	80010c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b0:	f7ff fdbc 	bl	8000c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40023c00 	.word	0x40023c00

080010c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <HAL_InitTick+0x54>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <HAL_InitTick+0x58>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	4619      	mov	r1, r3
 80010d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010da:	fbb2 f3f3 	udiv	r3, r2, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 f967 	bl	80013b2 <HAL_SYSTICK_Config>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e00e      	b.n	800110c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2b0f      	cmp	r3, #15
 80010f2:	d80a      	bhi.n	800110a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f4:	2200      	movs	r2, #0
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295
 80010fc:	f000 f92f 	bl	800135e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001100:	4a06      	ldr	r2, [pc, #24]	; (800111c <HAL_InitTick+0x5c>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001106:	2300      	movs	r3, #0
 8001108:	e000      	b.n	800110c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
}
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	2000000c 	.word	0x2000000c
 8001118:	20000014 	.word	0x20000014
 800111c:	20000010 	.word	0x20000010

08001120 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_IncTick+0x20>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_IncTick+0x24>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4413      	add	r3, r2
 8001130:	4a04      	ldr	r2, [pc, #16]	; (8001144 <HAL_IncTick+0x24>)
 8001132:	6013      	str	r3, [r2, #0]
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20000014 	.word	0x20000014
 8001144:	20000180 	.word	0x20000180

08001148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return uwTick;
 800114c:	4b03      	ldr	r3, [pc, #12]	; (800115c <HAL_GetTick+0x14>)
 800114e:	681b      	ldr	r3, [r3, #0]
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	20000180 	.word	0x20000180

08001160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001168:	f7ff ffee 	bl	8001148 <HAL_GetTick>
 800116c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001178:	d005      	beq.n	8001186 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <HAL_Delay+0x44>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4413      	add	r3, r2
 8001184:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001186:	bf00      	nop
 8001188:	f7ff ffde 	bl	8001148 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	429a      	cmp	r2, r3
 8001196:	d8f7      	bhi.n	8001188 <HAL_Delay+0x28>
  {
  }
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000014 	.word	0x20000014

080011a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <__NVIC_SetPriorityGrouping+0x44>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011c4:	4013      	ands	r3, r2
 80011c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011da:	4a04      	ldr	r2, [pc, #16]	; (80011ec <__NVIC_SetPriorityGrouping+0x44>)
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	60d3      	str	r3, [r2, #12]
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <__NVIC_GetPriorityGrouping+0x18>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	0a1b      	lsrs	r3, r3, #8
 80011fa:	f003 0307 	and.w	r3, r3, #7
}
 80011fe:	4618      	mov	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	2b00      	cmp	r3, #0
 800121c:	db0b      	blt.n	8001236 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	f003 021f 	and.w	r2, r3, #31
 8001224:	4907      	ldr	r1, [pc, #28]	; (8001244 <__NVIC_EnableIRQ+0x38>)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	095b      	lsrs	r3, r3, #5
 800122c:	2001      	movs	r0, #1
 800122e:	fa00 f202 	lsl.w	r2, r0, r2
 8001232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000e100 	.word	0xe000e100

08001248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001258:	2b00      	cmp	r3, #0
 800125a:	db0a      	blt.n	8001272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	b2da      	uxtb	r2, r3
 8001260:	490c      	ldr	r1, [pc, #48]	; (8001294 <__NVIC_SetPriority+0x4c>)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	0112      	lsls	r2, r2, #4
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	440b      	add	r3, r1
 800126c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001270:	e00a      	b.n	8001288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4908      	ldr	r1, [pc, #32]	; (8001298 <__NVIC_SetPriority+0x50>)
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	3b04      	subs	r3, #4
 8001280:	0112      	lsls	r2, r2, #4
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	440b      	add	r3, r1
 8001286:	761a      	strb	r2, [r3, #24]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000e100 	.word	0xe000e100
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129c:	b480      	push	{r7}
 800129e:	b089      	sub	sp, #36	; 0x24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f1c3 0307 	rsb	r3, r3, #7
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	bf28      	it	cs
 80012ba:	2304      	movcs	r3, #4
 80012bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3304      	adds	r3, #4
 80012c2:	2b06      	cmp	r3, #6
 80012c4:	d902      	bls.n	80012cc <NVIC_EncodePriority+0x30>
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3b03      	subs	r3, #3
 80012ca:	e000      	b.n	80012ce <NVIC_EncodePriority+0x32>
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	f04f 32ff 	mov.w	r2, #4294967295
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43da      	mvns	r2, r3
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	401a      	ands	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e4:	f04f 31ff 	mov.w	r1, #4294967295
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	fa01 f303 	lsl.w	r3, r1, r3
 80012ee:	43d9      	mvns	r1, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	4313      	orrs	r3, r2
         );
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3724      	adds	r7, #36	; 0x24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3b01      	subs	r3, #1
 8001310:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001314:	d301      	bcc.n	800131a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001316:	2301      	movs	r3, #1
 8001318:	e00f      	b.n	800133a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131a:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <SysTick_Config+0x40>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001322:	210f      	movs	r1, #15
 8001324:	f04f 30ff 	mov.w	r0, #4294967295
 8001328:	f7ff ff8e 	bl	8001248 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <SysTick_Config+0x40>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001332:	4b04      	ldr	r3, [pc, #16]	; (8001344 <SysTick_Config+0x40>)
 8001334:	2207      	movs	r2, #7
 8001336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	e000e010 	.word	0xe000e010

08001348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ff29 	bl	80011a8 <__NVIC_SetPriorityGrouping>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800135e:	b580      	push	{r7, lr}
 8001360:	b086      	sub	sp, #24
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
 800136a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001370:	f7ff ff3e 	bl	80011f0 <__NVIC_GetPriorityGrouping>
 8001374:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	68b9      	ldr	r1, [r7, #8]
 800137a:	6978      	ldr	r0, [r7, #20]
 800137c:	f7ff ff8e 	bl	800129c <NVIC_EncodePriority>
 8001380:	4602      	mov	r2, r0
 8001382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff5d 	bl	8001248 <__NVIC_SetPriority>
}
 800138e:	bf00      	nop
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff31 	bl	800120c <__NVIC_EnableIRQ>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff ffa2 	bl	8001304 <SysTick_Config>
 80013c0:	4603      	mov	r3, r0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b089      	sub	sp, #36	; 0x24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
 80013e6:	e159      	b.n	800169c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013e8:	2201      	movs	r2, #1
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	4013      	ands	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	429a      	cmp	r2, r3
 8001402:	f040 8148 	bne.w	8001696 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	2b01      	cmp	r3, #1
 8001410:	d005      	beq.n	800141e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800141a:	2b02      	cmp	r3, #2
 800141c:	d130      	bne.n	8001480 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	2203      	movs	r2, #3
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	68da      	ldr	r2, [r3, #12]
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001454:	2201      	movs	r2, #1
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	091b      	lsrs	r3, r3, #4
 800146a:	f003 0201 	and.w	r2, r3, #1
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	2b03      	cmp	r3, #3
 800148a:	d017      	beq.n	80014bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	2203      	movs	r2, #3
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d123      	bne.n	8001510 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	08da      	lsrs	r2, r3, #3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3208      	adds	r2, #8
 80014d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	f003 0307 	and.w	r3, r3, #7
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	220f      	movs	r2, #15
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	691a      	ldr	r2, [r3, #16]
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	08da      	lsrs	r2, r3, #3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3208      	adds	r2, #8
 800150a:	69b9      	ldr	r1, [r7, #24]
 800150c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	2203      	movs	r2, #3
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 0203 	and.w	r2, r3, #3
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 80a2 	beq.w	8001696 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	4b57      	ldr	r3, [pc, #348]	; (80016b4 <HAL_GPIO_Init+0x2e8>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	4a56      	ldr	r2, [pc, #344]	; (80016b4 <HAL_GPIO_Init+0x2e8>)
 800155c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001560:	6453      	str	r3, [r2, #68]	; 0x44
 8001562:	4b54      	ldr	r3, [pc, #336]	; (80016b4 <HAL_GPIO_Init+0x2e8>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800156e:	4a52      	ldr	r2, [pc, #328]	; (80016b8 <HAL_GPIO_Init+0x2ec>)
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	089b      	lsrs	r3, r3, #2
 8001574:	3302      	adds	r3, #2
 8001576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	220f      	movs	r2, #15
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a49      	ldr	r2, [pc, #292]	; (80016bc <HAL_GPIO_Init+0x2f0>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d019      	beq.n	80015ce <HAL_GPIO_Init+0x202>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a48      	ldr	r2, [pc, #288]	; (80016c0 <HAL_GPIO_Init+0x2f4>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d013      	beq.n	80015ca <HAL_GPIO_Init+0x1fe>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a47      	ldr	r2, [pc, #284]	; (80016c4 <HAL_GPIO_Init+0x2f8>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d00d      	beq.n	80015c6 <HAL_GPIO_Init+0x1fa>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a46      	ldr	r2, [pc, #280]	; (80016c8 <HAL_GPIO_Init+0x2fc>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d007      	beq.n	80015c2 <HAL_GPIO_Init+0x1f6>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a45      	ldr	r2, [pc, #276]	; (80016cc <HAL_GPIO_Init+0x300>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d101      	bne.n	80015be <HAL_GPIO_Init+0x1f2>
 80015ba:	2304      	movs	r3, #4
 80015bc:	e008      	b.n	80015d0 <HAL_GPIO_Init+0x204>
 80015be:	2307      	movs	r3, #7
 80015c0:	e006      	b.n	80015d0 <HAL_GPIO_Init+0x204>
 80015c2:	2303      	movs	r3, #3
 80015c4:	e004      	b.n	80015d0 <HAL_GPIO_Init+0x204>
 80015c6:	2302      	movs	r3, #2
 80015c8:	e002      	b.n	80015d0 <HAL_GPIO_Init+0x204>
 80015ca:	2301      	movs	r3, #1
 80015cc:	e000      	b.n	80015d0 <HAL_GPIO_Init+0x204>
 80015ce:	2300      	movs	r3, #0
 80015d0:	69fa      	ldr	r2, [r7, #28]
 80015d2:	f002 0203 	and.w	r2, r2, #3
 80015d6:	0092      	lsls	r2, r2, #2
 80015d8:	4093      	lsls	r3, r2
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4313      	orrs	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015e0:	4935      	ldr	r1, [pc, #212]	; (80016b8 <HAL_GPIO_Init+0x2ec>)
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	089b      	lsrs	r3, r3, #2
 80015e6:	3302      	adds	r3, #2
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015ee:	4b38      	ldr	r3, [pc, #224]	; (80016d0 <HAL_GPIO_Init+0x304>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	43db      	mvns	r3, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4013      	ands	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001612:	4a2f      	ldr	r2, [pc, #188]	; (80016d0 <HAL_GPIO_Init+0x304>)
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001618:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <HAL_GPIO_Init+0x304>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	43db      	mvns	r3, r3
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4013      	ands	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d003      	beq.n	800163c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	4313      	orrs	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800163c:	4a24      	ldr	r2, [pc, #144]	; (80016d0 <HAL_GPIO_Init+0x304>)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001642:	4b23      	ldr	r3, [pc, #140]	; (80016d0 <HAL_GPIO_Init+0x304>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	43db      	mvns	r3, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4013      	ands	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001666:	4a1a      	ldr	r2, [pc, #104]	; (80016d0 <HAL_GPIO_Init+0x304>)
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800166c:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <HAL_GPIO_Init+0x304>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	43db      	mvns	r3, r3
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4013      	ands	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	4313      	orrs	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001690:	4a0f      	ldr	r2, [pc, #60]	; (80016d0 <HAL_GPIO_Init+0x304>)
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3301      	adds	r3, #1
 800169a:	61fb      	str	r3, [r7, #28]
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	2b0f      	cmp	r3, #15
 80016a0:	f67f aea2 	bls.w	80013e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016a4:	bf00      	nop
 80016a6:	bf00      	nop
 80016a8:	3724      	adds	r7, #36	; 0x24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40013800 	.word	0x40013800
 80016bc:	40020000 	.word	0x40020000
 80016c0:	40020400 	.word	0x40020400
 80016c4:	40020800 	.word	0x40020800
 80016c8:	40020c00 	.word	0x40020c00
 80016cc:	40021000 	.word	0x40021000
 80016d0:	40013c00 	.word	0x40013c00

080016d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	807b      	strh	r3, [r7, #2]
 80016e0:	4613      	mov	r3, r2
 80016e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016e4:	787b      	ldrb	r3, [r7, #1]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ea:	887a      	ldrh	r2, [r7, #2]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016f0:	e003      	b.n	80016fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016f2:	887b      	ldrh	r3, [r7, #2]
 80016f4:	041a      	lsls	r2, r3, #16
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	619a      	str	r2, [r3, #24]
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
	...

08001708 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001712:	4b08      	ldr	r3, [pc, #32]	; (8001734 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001714:	695a      	ldr	r2, [r3, #20]
 8001716:	88fb      	ldrh	r3, [r7, #6]
 8001718:	4013      	ands	r3, r2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d006      	beq.n	800172c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800171e:	4a05      	ldr	r2, [pc, #20]	; (8001734 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001720:	88fb      	ldrh	r3, [r7, #6]
 8001722:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001724:	88fb      	ldrh	r3, [r7, #6]
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff fa70 	bl	8000c0c <HAL_GPIO_EXTI_Callback>
  }
}
 800172c:	bf00      	nop
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40013c00 	.word	0x40013c00

08001738 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e12b      	b.n	80019a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d106      	bne.n	8001764 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff fa8c 	bl	8000c7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2224      	movs	r2, #36	; 0x24
 8001768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f022 0201 	bic.w	r2, r2, #1
 800177a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800178a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800179a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800179c:	f001 fef0 	bl	8003580 <HAL_RCC_GetPCLK1Freq>
 80017a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	4a81      	ldr	r2, [pc, #516]	; (80019ac <HAL_I2C_Init+0x274>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d807      	bhi.n	80017bc <HAL_I2C_Init+0x84>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4a80      	ldr	r2, [pc, #512]	; (80019b0 <HAL_I2C_Init+0x278>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	bf94      	ite	ls
 80017b4:	2301      	movls	r3, #1
 80017b6:	2300      	movhi	r3, #0
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	e006      	b.n	80017ca <HAL_I2C_Init+0x92>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4a7d      	ldr	r2, [pc, #500]	; (80019b4 <HAL_I2C_Init+0x27c>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	bf94      	ite	ls
 80017c4:	2301      	movls	r3, #1
 80017c6:	2300      	movhi	r3, #0
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e0e7      	b.n	80019a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4a78      	ldr	r2, [pc, #480]	; (80019b8 <HAL_I2C_Init+0x280>)
 80017d6:	fba2 2303 	umull	r2, r3, r2, r3
 80017da:	0c9b      	lsrs	r3, r3, #18
 80017dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	68ba      	ldr	r2, [r7, #8]
 80017ee:	430a      	orrs	r2, r1
 80017f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	4a6a      	ldr	r2, [pc, #424]	; (80019ac <HAL_I2C_Init+0x274>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d802      	bhi.n	800180c <HAL_I2C_Init+0xd4>
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	3301      	adds	r3, #1
 800180a:	e009      	b.n	8001820 <HAL_I2C_Init+0xe8>
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001812:	fb02 f303 	mul.w	r3, r2, r3
 8001816:	4a69      	ldr	r2, [pc, #420]	; (80019bc <HAL_I2C_Init+0x284>)
 8001818:	fba2 2303 	umull	r2, r3, r2, r3
 800181c:	099b      	lsrs	r3, r3, #6
 800181e:	3301      	adds	r3, #1
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6812      	ldr	r2, [r2, #0]
 8001824:	430b      	orrs	r3, r1
 8001826:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001832:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	495c      	ldr	r1, [pc, #368]	; (80019ac <HAL_I2C_Init+0x274>)
 800183c:	428b      	cmp	r3, r1
 800183e:	d819      	bhi.n	8001874 <HAL_I2C_Init+0x13c>
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	1e59      	subs	r1, r3, #1
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	fbb1 f3f3 	udiv	r3, r1, r3
 800184e:	1c59      	adds	r1, r3, #1
 8001850:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001854:	400b      	ands	r3, r1
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00a      	beq.n	8001870 <HAL_I2C_Init+0x138>
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	1e59      	subs	r1, r3, #1
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	fbb1 f3f3 	udiv	r3, r1, r3
 8001868:	3301      	adds	r3, #1
 800186a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800186e:	e051      	b.n	8001914 <HAL_I2C_Init+0x1dc>
 8001870:	2304      	movs	r3, #4
 8001872:	e04f      	b.n	8001914 <HAL_I2C_Init+0x1dc>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d111      	bne.n	80018a0 <HAL_I2C_Init+0x168>
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	1e58      	subs	r0, r3, #1
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6859      	ldr	r1, [r3, #4]
 8001884:	460b      	mov	r3, r1
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	440b      	add	r3, r1
 800188a:	fbb0 f3f3 	udiv	r3, r0, r3
 800188e:	3301      	adds	r3, #1
 8001890:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001894:	2b00      	cmp	r3, #0
 8001896:	bf0c      	ite	eq
 8001898:	2301      	moveq	r3, #1
 800189a:	2300      	movne	r3, #0
 800189c:	b2db      	uxtb	r3, r3
 800189e:	e012      	b.n	80018c6 <HAL_I2C_Init+0x18e>
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	1e58      	subs	r0, r3, #1
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6859      	ldr	r1, [r3, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	440b      	add	r3, r1
 80018ae:	0099      	lsls	r1, r3, #2
 80018b0:	440b      	add	r3, r1
 80018b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80018b6:	3301      	adds	r3, #1
 80018b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018bc:	2b00      	cmp	r3, #0
 80018be:	bf0c      	ite	eq
 80018c0:	2301      	moveq	r3, #1
 80018c2:	2300      	movne	r3, #0
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <HAL_I2C_Init+0x196>
 80018ca:	2301      	movs	r3, #1
 80018cc:	e022      	b.n	8001914 <HAL_I2C_Init+0x1dc>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10e      	bne.n	80018f4 <HAL_I2C_Init+0x1bc>
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	1e58      	subs	r0, r3, #1
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6859      	ldr	r1, [r3, #4]
 80018de:	460b      	mov	r3, r1
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	440b      	add	r3, r1
 80018e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80018e8:	3301      	adds	r3, #1
 80018ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018f2:	e00f      	b.n	8001914 <HAL_I2C_Init+0x1dc>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	1e58      	subs	r0, r3, #1
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6859      	ldr	r1, [r3, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	0099      	lsls	r1, r3, #2
 8001904:	440b      	add	r3, r1
 8001906:	fbb0 f3f3 	udiv	r3, r0, r3
 800190a:	3301      	adds	r3, #1
 800190c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001910:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001914:	6879      	ldr	r1, [r7, #4]
 8001916:	6809      	ldr	r1, [r1, #0]
 8001918:	4313      	orrs	r3, r2
 800191a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69da      	ldr	r2, [r3, #28]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a1b      	ldr	r3, [r3, #32]
 800192e:	431a      	orrs	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001942:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6911      	ldr	r1, [r2, #16]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	68d2      	ldr	r2, [r2, #12]
 800194e:	4311      	orrs	r1, r2
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	6812      	ldr	r2, [r2, #0]
 8001954:	430b      	orrs	r3, r1
 8001956:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	695a      	ldr	r2, [r3, #20]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f042 0201 	orr.w	r2, r2, #1
 8001982:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2220      	movs	r2, #32
 800198e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	000186a0 	.word	0x000186a0
 80019b0:	001e847f 	.word	0x001e847f
 80019b4:	003d08ff 	.word	0x003d08ff
 80019b8:	431bde83 	.word	0x431bde83
 80019bc:	10624dd3 	.word	0x10624dd3

080019c0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08c      	sub	sp, #48	; 0x30
 80019c4:	af02      	add	r7, sp, #8
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	607a      	str	r2, [r7, #4]
 80019ca:	461a      	mov	r2, r3
 80019cc:	460b      	mov	r3, r1
 80019ce:	817b      	strh	r3, [r7, #10]
 80019d0:	4613      	mov	r3, r2
 80019d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019d4:	f7ff fbb8 	bl	8001148 <HAL_GetTick>
 80019d8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b20      	cmp	r3, #32
 80019e4:	f040 820b 	bne.w	8001dfe <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	2319      	movs	r3, #25
 80019ee:	2201      	movs	r2, #1
 80019f0:	497c      	ldr	r1, [pc, #496]	; (8001be4 <HAL_I2C_Master_Receive+0x224>)
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f000 ff76 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80019fe:	2302      	movs	r3, #2
 8001a00:	e1fe      	b.n	8001e00 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d101      	bne.n	8001a10 <HAL_I2C_Master_Receive+0x50>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e1f7      	b.n	8001e00 <HAL_I2C_Master_Receive+0x440>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d007      	beq.n	8001a36 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f042 0201 	orr.w	r2, r2, #1
 8001a34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2222      	movs	r2, #34	; 0x22
 8001a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2210      	movs	r2, #16
 8001a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	893a      	ldrh	r2, [r7, #8]
 8001a66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	4a5c      	ldr	r2, [pc, #368]	; (8001be8 <HAL_I2C_Master_Receive+0x228>)
 8001a76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a78:	8979      	ldrh	r1, [r7, #10]
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	f000 fce4 	bl	800244c <I2C_MasterRequestRead>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e1b8      	b.n	8001e00 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d113      	bne.n	8001abe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a96:	2300      	movs	r3, #0
 8001a98:	623b      	str	r3, [r7, #32]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	623b      	str	r3, [r7, #32]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	623b      	str	r3, [r7, #32]
 8001aaa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	e18c      	b.n	8001dd8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d11b      	bne.n	8001afe <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ad4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	61fb      	str	r3, [r7, #28]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	61fb      	str	r3, [r7, #28]
 8001aea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	e16c      	b.n	8001dd8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d11b      	bne.n	8001b3e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b14:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b26:	2300      	movs	r3, #0
 8001b28:	61bb      	str	r3, [r7, #24]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	695b      	ldr	r3, [r3, #20]
 8001b30:	61bb      	str	r3, [r7, #24]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	61bb      	str	r3, [r7, #24]
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	e14c      	b.n	8001dd8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	617b      	str	r3, [r7, #20]
 8001b62:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001b64:	e138      	b.n	8001dd8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	f200 80f1 	bhi.w	8001d52 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d123      	bne.n	8001bc0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b7c:	68f8      	ldr	r0, [r7, #12]
 8001b7e:	f001 f809 	bl	8002b94 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e139      	b.n	8001e00 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	691a      	ldr	r2, [r3, #16]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	1c5a      	adds	r2, r3, #1
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bbe:	e10b      	b.n	8001dd8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d14e      	bne.n	8001c66 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bce:	2200      	movs	r2, #0
 8001bd0:	4906      	ldr	r1, [pc, #24]	; (8001bec <HAL_I2C_Master_Receive+0x22c>)
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f000 fe86 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d008      	beq.n	8001bf0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e10e      	b.n	8001e00 <HAL_I2C_Master_Receive+0x440>
 8001be2:	bf00      	nop
 8001be4:	00100002 	.word	0x00100002
 8001be8:	ffff0000 	.word	0xffff0000
 8001bec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	691a      	ldr	r2, [r3, #16]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c12:	1c5a      	adds	r2, r3, #1
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	691a      	ldr	r2, [r3, #16]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c44:	1c5a      	adds	r2, r3, #1
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c64:	e0b8      	b.n	8001dd8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	4966      	ldr	r1, [pc, #408]	; (8001e08 <HAL_I2C_Master_Receive+0x448>)
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f000 fe37 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e0bf      	b.n	8001e00 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	691a      	ldr	r2, [r3, #16]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9a:	b2d2      	uxtb	r2, r2
 8001c9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cac:	3b01      	subs	r3, #1
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	9300      	str	r3, [sp, #0]
 8001cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc8:	2200      	movs	r2, #0
 8001cca:	494f      	ldr	r1, [pc, #316]	; (8001e08 <HAL_I2C_Master_Receive+0x448>)
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	f000 fe09 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e091      	b.n	8001e00 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	691a      	ldr	r2, [r3, #16]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfe:	1c5a      	adds	r2, r3, #1
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	3b01      	subs	r3, #1
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	691a      	ldr	r2, [r3, #16]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	1c5a      	adds	r2, r3, #1
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d50:	e042      	b.n	8001dd8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f000 ff1c 	bl	8002b94 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e04c      	b.n	8001e00 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	691a      	ldr	r2, [r3, #16]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	1c5a      	adds	r2, r3, #1
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d82:	3b01      	subs	r3, #1
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	3b01      	subs	r3, #1
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	f003 0304 	and.w	r3, r3, #4
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	d118      	bne.n	8001dd8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	691a      	ldr	r2, [r3, #16]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	1c5a      	adds	r2, r3, #1
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f47f aec2 	bne.w	8001b66 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2220      	movs	r2, #32
 8001de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	e000      	b.n	8001e00 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001dfe:	2302      	movs	r3, #2
  }
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3728      	adds	r7, #40	; 0x28
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	00010004 	.word	0x00010004

08001e0c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af02      	add	r7, sp, #8
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	4608      	mov	r0, r1
 8001e16:	4611      	mov	r1, r2
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	817b      	strh	r3, [r7, #10]
 8001e1e:	460b      	mov	r3, r1
 8001e20:	813b      	strh	r3, [r7, #8]
 8001e22:	4613      	mov	r3, r2
 8001e24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e26:	f7ff f98f 	bl	8001148 <HAL_GetTick>
 8001e2a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b20      	cmp	r3, #32
 8001e36:	f040 80d9 	bne.w	8001fec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	2319      	movs	r3, #25
 8001e40:	2201      	movs	r2, #1
 8001e42:	496d      	ldr	r1, [pc, #436]	; (8001ff8 <HAL_I2C_Mem_Write+0x1ec>)
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f000 fd4d 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001e50:	2302      	movs	r3, #2
 8001e52:	e0cc      	b.n	8001fee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d101      	bne.n	8001e62 <HAL_I2C_Mem_Write+0x56>
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e0c5      	b.n	8001fee <HAL_I2C_Mem_Write+0x1e2>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d007      	beq.n	8001e88 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 0201 	orr.w	r2, r2, #1
 8001e86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2221      	movs	r2, #33	; 0x21
 8001e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2240      	movs	r2, #64	; 0x40
 8001ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6a3a      	ldr	r2, [r7, #32]
 8001eb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001eb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4a4d      	ldr	r2, [pc, #308]	; (8001ffc <HAL_I2C_Mem_Write+0x1f0>)
 8001ec8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001eca:	88f8      	ldrh	r0, [r7, #6]
 8001ecc:	893a      	ldrh	r2, [r7, #8]
 8001ece:	8979      	ldrh	r1, [r7, #10]
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	9301      	str	r3, [sp, #4]
 8001ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	4603      	mov	r3, r0
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f000 fb84 	bl	80025e8 <I2C_RequestMemoryWrite>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d052      	beq.n	8001f8c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e081      	b.n	8001fee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f000 fdce 	bl	8002a90 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00d      	beq.n	8001f16 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	d107      	bne.n	8001f12 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e06b      	b.n	8001fee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	781a      	ldrb	r2, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	1c5a      	adds	r2, r3, #1
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f30:	3b01      	subs	r3, #1
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b04      	cmp	r3, #4
 8001f52:	d11b      	bne.n	8001f8c <HAL_I2C_Mem_Write+0x180>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d017      	beq.n	8001f8c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f60:	781a      	ldrb	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	1c5a      	adds	r2, r3, #1
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f76:	3b01      	subs	r3, #1
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	3b01      	subs	r3, #1
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1aa      	bne.n	8001eea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f98:	68f8      	ldr	r0, [r7, #12]
 8001f9a:	f000 fdba 	bl	8002b12 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00d      	beq.n	8001fc0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	2b04      	cmp	r3, #4
 8001faa:	d107      	bne.n	8001fbc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e016      	b.n	8001fee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	e000      	b.n	8001fee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001fec:	2302      	movs	r3, #2
  }
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	00100002 	.word	0x00100002
 8001ffc:	ffff0000 	.word	0xffff0000

08002000 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08c      	sub	sp, #48	; 0x30
 8002004:	af02      	add	r7, sp, #8
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	4608      	mov	r0, r1
 800200a:	4611      	mov	r1, r2
 800200c:	461a      	mov	r2, r3
 800200e:	4603      	mov	r3, r0
 8002010:	817b      	strh	r3, [r7, #10]
 8002012:	460b      	mov	r3, r1
 8002014:	813b      	strh	r3, [r7, #8]
 8002016:	4613      	mov	r3, r2
 8002018:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800201a:	f7ff f895 	bl	8001148 <HAL_GetTick>
 800201e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b20      	cmp	r3, #32
 800202a:	f040 8208 	bne.w	800243e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	2319      	movs	r3, #25
 8002034:	2201      	movs	r2, #1
 8002036:	497b      	ldr	r1, [pc, #492]	; (8002224 <HAL_I2C_Mem_Read+0x224>)
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f000 fc53 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002044:	2302      	movs	r3, #2
 8002046:	e1fb      	b.n	8002440 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800204e:	2b01      	cmp	r3, #1
 8002050:	d101      	bne.n	8002056 <HAL_I2C_Mem_Read+0x56>
 8002052:	2302      	movs	r3, #2
 8002054:	e1f4      	b.n	8002440 <HAL_I2C_Mem_Read+0x440>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b01      	cmp	r3, #1
 800206a:	d007      	beq.n	800207c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f042 0201 	orr.w	r2, r2, #1
 800207a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800208a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2222      	movs	r2, #34	; 0x22
 8002090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2240      	movs	r2, #64	; 0x40
 8002098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80020ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4a5b      	ldr	r2, [pc, #364]	; (8002228 <HAL_I2C_Mem_Read+0x228>)
 80020bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020be:	88f8      	ldrh	r0, [r7, #6]
 80020c0:	893a      	ldrh	r2, [r7, #8]
 80020c2:	8979      	ldrh	r1, [r7, #10]
 80020c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c6:	9301      	str	r3, [sp, #4]
 80020c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	4603      	mov	r3, r0
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 fb20 	bl	8002714 <I2C_RequestMemoryRead>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e1b0      	b.n	8002440 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d113      	bne.n	800210e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020e6:	2300      	movs	r3, #0
 80020e8:	623b      	str	r3, [r7, #32]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	623b      	str	r3, [r7, #32]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	623b      	str	r3, [r7, #32]
 80020fa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	e184      	b.n	8002418 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002112:	2b01      	cmp	r3, #1
 8002114:	d11b      	bne.n	800214e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002124:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	61fb      	str	r3, [r7, #28]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	61fb      	str	r3, [r7, #28]
 800213a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	e164      	b.n	8002418 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002152:	2b02      	cmp	r3, #2
 8002154:	d11b      	bne.n	800218e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002164:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002174:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002176:	2300      	movs	r3, #0
 8002178:	61bb      	str	r3, [r7, #24]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	61bb      	str	r3, [r7, #24]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	61bb      	str	r3, [r7, #24]
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	e144      	b.n	8002418 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	617b      	str	r3, [r7, #20]
 80021a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80021a4:	e138      	b.n	8002418 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021aa:	2b03      	cmp	r3, #3
 80021ac:	f200 80f1 	bhi.w	8002392 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d123      	bne.n	8002200 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f000 fce9 	bl	8002b94 <I2C_WaitOnRXNEFlagUntilTimeout>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e139      	b.n	8002440 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	691a      	ldr	r2, [r3, #16]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	1c5a      	adds	r2, r3, #1
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e8:	3b01      	subs	r3, #1
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	3b01      	subs	r3, #1
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021fe:	e10b      	b.n	8002418 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002204:	2b02      	cmp	r3, #2
 8002206:	d14e      	bne.n	80022a6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800220e:	2200      	movs	r2, #0
 8002210:	4906      	ldr	r1, [pc, #24]	; (800222c <HAL_I2C_Mem_Read+0x22c>)
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 fb66 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d008      	beq.n	8002230 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e10e      	b.n	8002440 <HAL_I2C_Mem_Read+0x440>
 8002222:	bf00      	nop
 8002224:	00100002 	.word	0x00100002
 8002228:	ffff0000 	.word	0xffff0000
 800222c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800223e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	691a      	ldr	r2, [r3, #16]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225c:	3b01      	subs	r3, #1
 800225e:	b29a      	uxth	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002268:	b29b      	uxth	r3, r3
 800226a:	3b01      	subs	r3, #1
 800226c:	b29a      	uxth	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	691a      	ldr	r2, [r3, #16]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227c:	b2d2      	uxtb	r2, r2
 800227e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	1c5a      	adds	r2, r3, #1
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228e:	3b01      	subs	r3, #1
 8002290:	b29a      	uxth	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229a:	b29b      	uxth	r3, r3
 800229c:	3b01      	subs	r3, #1
 800229e:	b29a      	uxth	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022a4:	e0b8      	b.n	8002418 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ac:	2200      	movs	r2, #0
 80022ae:	4966      	ldr	r1, [pc, #408]	; (8002448 <HAL_I2C_Mem_Read+0x448>)
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f000 fb17 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e0bf      	b.n	8002440 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691a      	ldr	r2, [r3, #16]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	1c5a      	adds	r2, r3, #1
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ec:	3b01      	subs	r3, #1
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002308:	2200      	movs	r2, #0
 800230a:	494f      	ldr	r1, [pc, #316]	; (8002448 <HAL_I2C_Mem_Read+0x448>)
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f000 fae9 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e091      	b.n	8002440 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800232a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	691a      	ldr	r2, [r3, #16]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	1c5a      	adds	r2, r3, #1
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002348:	3b01      	subs	r3, #1
 800234a:	b29a      	uxth	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002354:	b29b      	uxth	r3, r3
 8002356:	3b01      	subs	r3, #1
 8002358:	b29a      	uxth	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	691a      	ldr	r2, [r3, #16]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002370:	1c5a      	adds	r2, r3, #1
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237a:	3b01      	subs	r3, #1
 800237c:	b29a      	uxth	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002386:	b29b      	uxth	r3, r3
 8002388:	3b01      	subs	r3, #1
 800238a:	b29a      	uxth	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002390:	e042      	b.n	8002418 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002394:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 fbfc 	bl	8002b94 <I2C_WaitOnRXNEFlagUntilTimeout>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e04c      	b.n	8002440 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	691a      	ldr	r2, [r3, #16]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	1c5a      	adds	r2, r3, #1
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c2:	3b01      	subs	r3, #1
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	3b01      	subs	r3, #1
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	d118      	bne.n	8002418 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	691a      	ldr	r2, [r3, #16]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f8:	1c5a      	adds	r2, r3, #1
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002402:	3b01      	subs	r3, #1
 8002404:	b29a      	uxth	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240e:	b29b      	uxth	r3, r3
 8002410:	3b01      	subs	r3, #1
 8002412:	b29a      	uxth	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241c:	2b00      	cmp	r3, #0
 800241e:	f47f aec2 	bne.w	80021a6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2220      	movs	r2, #32
 8002426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800243a:	2300      	movs	r3, #0
 800243c:	e000      	b.n	8002440 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800243e:	2302      	movs	r3, #2
  }
}
 8002440:	4618      	mov	r0, r3
 8002442:	3728      	adds	r7, #40	; 0x28
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	00010004 	.word	0x00010004

0800244c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b088      	sub	sp, #32
 8002450:	af02      	add	r7, sp, #8
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	607a      	str	r2, [r7, #4]
 8002456:	603b      	str	r3, [r7, #0]
 8002458:	460b      	mov	r3, r1
 800245a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002460:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002470:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	2b08      	cmp	r3, #8
 8002476:	d006      	beq.n	8002486 <I2C_MasterRequestRead+0x3a>
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d003      	beq.n	8002486 <I2C_MasterRequestRead+0x3a>
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002484:	d108      	bne.n	8002498 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	e00b      	b.n	80024b0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249c:	2b11      	cmp	r3, #17
 800249e:	d107      	bne.n	80024b0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 fa11 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00d      	beq.n	80024e4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024d6:	d103      	bne.n	80024e0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e079      	b.n	80025d8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024ec:	d108      	bne.n	8002500 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80024ee:	897b      	ldrh	r3, [r7, #10]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	611a      	str	r2, [r3, #16]
 80024fe:	e05f      	b.n	80025c0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002500:	897b      	ldrh	r3, [r7, #10]
 8002502:	11db      	asrs	r3, r3, #7
 8002504:	b2db      	uxtb	r3, r3
 8002506:	f003 0306 	and.w	r3, r3, #6
 800250a:	b2db      	uxtb	r3, r3
 800250c:	f063 030f 	orn	r3, r3, #15
 8002510:	b2da      	uxtb	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	4930      	ldr	r1, [pc, #192]	; (80025e0 <I2C_MasterRequestRead+0x194>)
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f000 fa37 	bl	8002992 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e054      	b.n	80025d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800252e:	897b      	ldrh	r3, [r7, #10]
 8002530:	b2da      	uxtb	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	4929      	ldr	r1, [pc, #164]	; (80025e4 <I2C_MasterRequestRead+0x198>)
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 fa27 	bl	8002992 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e044      	b.n	80025d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800254e:	2300      	movs	r3, #0
 8002550:	613b      	str	r3, [r7, #16]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	613b      	str	r3, [r7, #16]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	613b      	str	r3, [r7, #16]
 8002562:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002572:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f000 f9af 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00d      	beq.n	80025a8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800259a:	d103      	bne.n	80025a4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025a2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e017      	b.n	80025d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80025a8:	897b      	ldrh	r3, [r7, #10]
 80025aa:	11db      	asrs	r3, r3, #7
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	f003 0306 	and.w	r3, r3, #6
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	f063 030e 	orn	r3, r3, #14
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	4907      	ldr	r1, [pc, #28]	; (80025e4 <I2C_MasterRequestRead+0x198>)
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 f9e3 	bl	8002992 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	00010008 	.word	0x00010008
 80025e4:	00010002 	.word	0x00010002

080025e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b088      	sub	sp, #32
 80025ec:	af02      	add	r7, sp, #8
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	4608      	mov	r0, r1
 80025f2:	4611      	mov	r1, r2
 80025f4:	461a      	mov	r2, r3
 80025f6:	4603      	mov	r3, r0
 80025f8:	817b      	strh	r3, [r7, #10]
 80025fa:	460b      	mov	r3, r1
 80025fc:	813b      	strh	r3, [r7, #8]
 80025fe:	4613      	mov	r3, r2
 8002600:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002610:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	6a3b      	ldr	r3, [r7, #32]
 8002618:	2200      	movs	r2, #0
 800261a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 f960 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00d      	beq.n	8002646 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002638:	d103      	bne.n	8002642 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002640:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e05f      	b.n	8002706 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002646:	897b      	ldrh	r3, [r7, #10]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	461a      	mov	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002654:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	6a3a      	ldr	r2, [r7, #32]
 800265a:	492d      	ldr	r1, [pc, #180]	; (8002710 <I2C_RequestMemoryWrite+0x128>)
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f000 f998 	bl	8002992 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e04c      	b.n	8002706 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002684:	6a39      	ldr	r1, [r7, #32]
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f000 fa02 	bl	8002a90 <I2C_WaitOnTXEFlagUntilTimeout>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00d      	beq.n	80026ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	2b04      	cmp	r3, #4
 8002698:	d107      	bne.n	80026aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e02b      	b.n	8002706 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026ae:	88fb      	ldrh	r3, [r7, #6]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d105      	bne.n	80026c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026b4:	893b      	ldrh	r3, [r7, #8]
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	611a      	str	r2, [r3, #16]
 80026be:	e021      	b.n	8002704 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80026c0:	893b      	ldrh	r3, [r7, #8]
 80026c2:	0a1b      	lsrs	r3, r3, #8
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d0:	6a39      	ldr	r1, [r7, #32]
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f000 f9dc 	bl	8002a90 <I2C_WaitOnTXEFlagUntilTimeout>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00d      	beq.n	80026fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d107      	bne.n	80026f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e005      	b.n	8002706 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026fa:	893b      	ldrh	r3, [r7, #8]
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	00010002 	.word	0x00010002

08002714 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b088      	sub	sp, #32
 8002718:	af02      	add	r7, sp, #8
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	4608      	mov	r0, r1
 800271e:	4611      	mov	r1, r2
 8002720:	461a      	mov	r2, r3
 8002722:	4603      	mov	r3, r0
 8002724:	817b      	strh	r3, [r7, #10]
 8002726:	460b      	mov	r3, r1
 8002728:	813b      	strh	r3, [r7, #8]
 800272a:	4613      	mov	r3, r2
 800272c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800273c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800274c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	2200      	movs	r2, #0
 8002756:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 f8c2 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00d      	beq.n	8002782 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002770:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002774:	d103      	bne.n	800277e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f44f 7200 	mov.w	r2, #512	; 0x200
 800277c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e0aa      	b.n	80028d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002782:	897b      	ldrh	r3, [r7, #10]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	461a      	mov	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002790:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	6a3a      	ldr	r2, [r7, #32]
 8002796:	4952      	ldr	r1, [pc, #328]	; (80028e0 <I2C_RequestMemoryRead+0x1cc>)
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 f8fa 	bl	8002992 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e097      	b.n	80028d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	617b      	str	r3, [r7, #20]
 80027bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c0:	6a39      	ldr	r1, [r7, #32]
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f000 f964 	bl	8002a90 <I2C_WaitOnTXEFlagUntilTimeout>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00d      	beq.n	80027ea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d107      	bne.n	80027e6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e076      	b.n	80028d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027ea:	88fb      	ldrh	r3, [r7, #6]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d105      	bne.n	80027fc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027f0:	893b      	ldrh	r3, [r7, #8]
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	611a      	str	r2, [r3, #16]
 80027fa:	e021      	b.n	8002840 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80027fc:	893b      	ldrh	r3, [r7, #8]
 80027fe:	0a1b      	lsrs	r3, r3, #8
 8002800:	b29b      	uxth	r3, r3
 8002802:	b2da      	uxtb	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800280a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280c:	6a39      	ldr	r1, [r7, #32]
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 f93e 	bl	8002a90 <I2C_WaitOnTXEFlagUntilTimeout>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00d      	beq.n	8002836 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	2b04      	cmp	r3, #4
 8002820:	d107      	bne.n	8002832 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002830:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e050      	b.n	80028d8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002836:	893b      	ldrh	r3, [r7, #8]
 8002838:	b2da      	uxtb	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002842:	6a39      	ldr	r1, [r7, #32]
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 f923 	bl	8002a90 <I2C_WaitOnTXEFlagUntilTimeout>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00d      	beq.n	800286c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	2b04      	cmp	r3, #4
 8002856:	d107      	bne.n	8002868 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002866:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e035      	b.n	80028d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800287a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	2200      	movs	r2, #0
 8002884:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 f82b 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00d      	beq.n	80028b0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028a2:	d103      	bne.n	80028ac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e013      	b.n	80028d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80028b0:	897b      	ldrh	r3, [r7, #10]
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	6a3a      	ldr	r2, [r7, #32]
 80028c4:	4906      	ldr	r1, [pc, #24]	; (80028e0 <I2C_RequestMemoryRead+0x1cc>)
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 f863 	bl	8002992 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e000      	b.n	80028d8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	00010002 	.word	0x00010002

080028e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	4613      	mov	r3, r2
 80028f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028f4:	e025      	b.n	8002942 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028fc:	d021      	beq.n	8002942 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028fe:	f7fe fc23 	bl	8001148 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d302      	bcc.n	8002914 <I2C_WaitOnFlagUntilTimeout+0x30>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d116      	bne.n	8002942 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2220      	movs	r2, #32
 800291e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	f043 0220 	orr.w	r2, r3, #32
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e023      	b.n	800298a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	0c1b      	lsrs	r3, r3, #16
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b01      	cmp	r3, #1
 800294a:	d10d      	bne.n	8002968 <I2C_WaitOnFlagUntilTimeout+0x84>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	43da      	mvns	r2, r3
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	4013      	ands	r3, r2
 8002958:	b29b      	uxth	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	bf0c      	ite	eq
 800295e:	2301      	moveq	r3, #1
 8002960:	2300      	movne	r3, #0
 8002962:	b2db      	uxtb	r3, r3
 8002964:	461a      	mov	r2, r3
 8002966:	e00c      	b.n	8002982 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	43da      	mvns	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	4013      	ands	r3, r2
 8002974:	b29b      	uxth	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	bf0c      	ite	eq
 800297a:	2301      	moveq	r3, #1
 800297c:	2300      	movne	r3, #0
 800297e:	b2db      	uxtb	r3, r3
 8002980:	461a      	mov	r2, r3
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	429a      	cmp	r2, r3
 8002986:	d0b6      	beq.n	80028f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b084      	sub	sp, #16
 8002996:	af00      	add	r7, sp, #0
 8002998:	60f8      	str	r0, [r7, #12]
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	607a      	str	r2, [r7, #4]
 800299e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029a0:	e051      	b.n	8002a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029b0:	d123      	bne.n	80029fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2220      	movs	r2, #32
 80029d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f043 0204 	orr.w	r2, r3, #4
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e046      	b.n	8002a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a00:	d021      	beq.n	8002a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a02:	f7fe fba1 	bl	8001148 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d302      	bcc.n	8002a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d116      	bne.n	8002a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2220      	movs	r2, #32
 8002a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	f043 0220 	orr.w	r2, r3, #32
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e020      	b.n	8002a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	0c1b      	lsrs	r3, r3, #16
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d10c      	bne.n	8002a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	43da      	mvns	r2, r3
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	bf14      	ite	ne
 8002a62:	2301      	movne	r3, #1
 8002a64:	2300      	moveq	r3, #0
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	e00b      	b.n	8002a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	43da      	mvns	r2, r3
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	4013      	ands	r3, r2
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	bf14      	ite	ne
 8002a7c:	2301      	movne	r3, #1
 8002a7e:	2300      	moveq	r3, #0
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d18d      	bne.n	80029a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a9c:	e02d      	b.n	8002afa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 f8ce 	bl	8002c40 <I2C_IsAcknowledgeFailed>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e02d      	b.n	8002b0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab4:	d021      	beq.n	8002afa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ab6:	f7fe fb47 	bl	8001148 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d302      	bcc.n	8002acc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d116      	bne.n	8002afa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	f043 0220 	orr.w	r2, r3, #32
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e007      	b.n	8002b0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b04:	2b80      	cmp	r3, #128	; 0x80
 8002b06:	d1ca      	bne.n	8002a9e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b084      	sub	sp, #16
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	60f8      	str	r0, [r7, #12]
 8002b1a:	60b9      	str	r1, [r7, #8]
 8002b1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b1e:	e02d      	b.n	8002b7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 f88d 	bl	8002c40 <I2C_IsAcknowledgeFailed>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e02d      	b.n	8002b8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b36:	d021      	beq.n	8002b7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b38:	f7fe fb06 	bl	8001148 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d302      	bcc.n	8002b4e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d116      	bne.n	8002b7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2220      	movs	r2, #32
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	f043 0220 	orr.w	r2, r3, #32
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e007      	b.n	8002b8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	f003 0304 	and.w	r3, r3, #4
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d1ca      	bne.n	8002b20 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ba0:	e042      	b.n	8002c28 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	f003 0310 	and.w	r3, r3, #16
 8002bac:	2b10      	cmp	r3, #16
 8002bae:	d119      	bne.n	8002be4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f06f 0210 	mvn.w	r2, #16
 8002bb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e029      	b.n	8002c38 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002be4:	f7fe fab0 	bl	8001148 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	68ba      	ldr	r2, [r7, #8]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d302      	bcc.n	8002bfa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d116      	bne.n	8002c28 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2220      	movs	r2, #32
 8002c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	f043 0220 	orr.w	r2, r3, #32
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e007      	b.n	8002c38 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c32:	2b40      	cmp	r3, #64	; 0x40
 8002c34:	d1b5      	bne.n	8002ba2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c56:	d11b      	bne.n	8002c90 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c60:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	f043 0204 	orr.w	r2, r3, #4
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e000      	b.n	8002c92 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
	...

08002ca0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e267      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d075      	beq.n	8002daa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cbe:	4b88      	ldr	r3, [pc, #544]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d00c      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cca:	4b85      	ldr	r3, [pc, #532]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cd2:	2b08      	cmp	r3, #8
 8002cd4:	d112      	bne.n	8002cfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cd6:	4b82      	ldr	r3, [pc, #520]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ce2:	d10b      	bne.n	8002cfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce4:	4b7e      	ldr	r3, [pc, #504]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d05b      	beq.n	8002da8 <HAL_RCC_OscConfig+0x108>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d157      	bne.n	8002da8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e242      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d04:	d106      	bne.n	8002d14 <HAL_RCC_OscConfig+0x74>
 8002d06:	4b76      	ldr	r3, [pc, #472]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a75      	ldr	r2, [pc, #468]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	e01d      	b.n	8002d50 <HAL_RCC_OscConfig+0xb0>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d1c:	d10c      	bne.n	8002d38 <HAL_RCC_OscConfig+0x98>
 8002d1e:	4b70      	ldr	r3, [pc, #448]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a6f      	ldr	r2, [pc, #444]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	4b6d      	ldr	r3, [pc, #436]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a6c      	ldr	r2, [pc, #432]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	e00b      	b.n	8002d50 <HAL_RCC_OscConfig+0xb0>
 8002d38:	4b69      	ldr	r3, [pc, #420]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a68      	ldr	r2, [pc, #416]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d42:	6013      	str	r3, [r2, #0]
 8002d44:	4b66      	ldr	r3, [pc, #408]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a65      	ldr	r2, [pc, #404]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d013      	beq.n	8002d80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d58:	f7fe f9f6 	bl	8001148 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d60:	f7fe f9f2 	bl	8001148 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b64      	cmp	r3, #100	; 0x64
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e207      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d72:	4b5b      	ldr	r3, [pc, #364]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0f0      	beq.n	8002d60 <HAL_RCC_OscConfig+0xc0>
 8002d7e:	e014      	b.n	8002daa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d80:	f7fe f9e2 	bl	8001148 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d88:	f7fe f9de 	bl	8001148 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b64      	cmp	r3, #100	; 0x64
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e1f3      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d9a:	4b51      	ldr	r3, [pc, #324]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0xe8>
 8002da6:	e000      	b.n	8002daa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d063      	beq.n	8002e7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002db6:	4b4a      	ldr	r3, [pc, #296]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 030c 	and.w	r3, r3, #12
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00b      	beq.n	8002dda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dc2:	4b47      	ldr	r3, [pc, #284]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dca:	2b08      	cmp	r3, #8
 8002dcc:	d11c      	bne.n	8002e08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dce:	4b44      	ldr	r3, [pc, #272]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d116      	bne.n	8002e08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dda:	4b41      	ldr	r3, [pc, #260]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d005      	beq.n	8002df2 <HAL_RCC_OscConfig+0x152>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d001      	beq.n	8002df2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e1c7      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df2:	4b3b      	ldr	r3, [pc, #236]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	4937      	ldr	r1, [pc, #220]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e06:	e03a      	b.n	8002e7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d020      	beq.n	8002e52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e10:	4b34      	ldr	r3, [pc, #208]	; (8002ee4 <HAL_RCC_OscConfig+0x244>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e16:	f7fe f997 	bl	8001148 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e1e:	f7fe f993 	bl	8001148 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e1a8      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e30:	4b2b      	ldr	r3, [pc, #172]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0f0      	beq.n	8002e1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3c:	4b28      	ldr	r3, [pc, #160]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	4925      	ldr	r1, [pc, #148]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	600b      	str	r3, [r1, #0]
 8002e50:	e015      	b.n	8002e7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e52:	4b24      	ldr	r3, [pc, #144]	; (8002ee4 <HAL_RCC_OscConfig+0x244>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e58:	f7fe f976 	bl	8001148 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e60:	f7fe f972 	bl	8001148 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e187      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e72:	4b1b      	ldr	r3, [pc, #108]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d036      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d016      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e92:	4b15      	ldr	r3, [pc, #84]	; (8002ee8 <HAL_RCC_OscConfig+0x248>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e98:	f7fe f956 	bl	8001148 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ea0:	f7fe f952 	bl	8001148 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e167      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb2:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f0      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x200>
 8002ebe:	e01b      	b.n	8002ef8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ec0:	4b09      	ldr	r3, [pc, #36]	; (8002ee8 <HAL_RCC_OscConfig+0x248>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec6:	f7fe f93f 	bl	8001148 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ecc:	e00e      	b.n	8002eec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ece:	f7fe f93b 	bl	8001148 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d907      	bls.n	8002eec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e150      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	42470000 	.word	0x42470000
 8002ee8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eec:	4b88      	ldr	r3, [pc, #544]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1ea      	bne.n	8002ece <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 8097 	beq.w	8003034 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f06:	2300      	movs	r3, #0
 8002f08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f0a:	4b81      	ldr	r3, [pc, #516]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10f      	bne.n	8002f36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f16:	2300      	movs	r3, #0
 8002f18:	60bb      	str	r3, [r7, #8]
 8002f1a:	4b7d      	ldr	r3, [pc, #500]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	4a7c      	ldr	r2, [pc, #496]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f24:	6413      	str	r3, [r2, #64]	; 0x40
 8002f26:	4b7a      	ldr	r3, [pc, #488]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2e:	60bb      	str	r3, [r7, #8]
 8002f30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f32:	2301      	movs	r3, #1
 8002f34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f36:	4b77      	ldr	r3, [pc, #476]	; (8003114 <HAL_RCC_OscConfig+0x474>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d118      	bne.n	8002f74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f42:	4b74      	ldr	r3, [pc, #464]	; (8003114 <HAL_RCC_OscConfig+0x474>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a73      	ldr	r2, [pc, #460]	; (8003114 <HAL_RCC_OscConfig+0x474>)
 8002f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f4e:	f7fe f8fb 	bl	8001148 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f56:	f7fe f8f7 	bl	8001148 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e10c      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f68:	4b6a      	ldr	r3, [pc, #424]	; (8003114 <HAL_RCC_OscConfig+0x474>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0f0      	beq.n	8002f56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d106      	bne.n	8002f8a <HAL_RCC_OscConfig+0x2ea>
 8002f7c:	4b64      	ldr	r3, [pc, #400]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f80:	4a63      	ldr	r2, [pc, #396]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002f82:	f043 0301 	orr.w	r3, r3, #1
 8002f86:	6713      	str	r3, [r2, #112]	; 0x70
 8002f88:	e01c      	b.n	8002fc4 <HAL_RCC_OscConfig+0x324>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b05      	cmp	r3, #5
 8002f90:	d10c      	bne.n	8002fac <HAL_RCC_OscConfig+0x30c>
 8002f92:	4b5f      	ldr	r3, [pc, #380]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f96:	4a5e      	ldr	r2, [pc, #376]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002f98:	f043 0304 	orr.w	r3, r3, #4
 8002f9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f9e:	4b5c      	ldr	r3, [pc, #368]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa2:	4a5b      	ldr	r2, [pc, #364]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8002faa:	e00b      	b.n	8002fc4 <HAL_RCC_OscConfig+0x324>
 8002fac:	4b58      	ldr	r3, [pc, #352]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb0:	4a57      	ldr	r2, [pc, #348]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002fb2:	f023 0301 	bic.w	r3, r3, #1
 8002fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb8:	4b55      	ldr	r3, [pc, #340]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbc:	4a54      	ldr	r2, [pc, #336]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002fbe:	f023 0304 	bic.w	r3, r3, #4
 8002fc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d015      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fcc:	f7fe f8bc 	bl	8001148 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd2:	e00a      	b.n	8002fea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fd4:	f7fe f8b8 	bl	8001148 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e0cb      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fea:	4b49      	ldr	r3, [pc, #292]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0ee      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x334>
 8002ff6:	e014      	b.n	8003022 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff8:	f7fe f8a6 	bl	8001148 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ffe:	e00a      	b.n	8003016 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003000:	f7fe f8a2 	bl	8001148 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	f241 3288 	movw	r2, #5000	; 0x1388
 800300e:	4293      	cmp	r3, r2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e0b5      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003016:	4b3e      	ldr	r3, [pc, #248]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8003018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1ee      	bne.n	8003000 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003022:	7dfb      	ldrb	r3, [r7, #23]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d105      	bne.n	8003034 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003028:	4b39      	ldr	r3, [pc, #228]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	4a38      	ldr	r2, [pc, #224]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 800302e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003032:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 80a1 	beq.w	8003180 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800303e:	4b34      	ldr	r3, [pc, #208]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 030c 	and.w	r3, r3, #12
 8003046:	2b08      	cmp	r3, #8
 8003048:	d05c      	beq.n	8003104 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	2b02      	cmp	r3, #2
 8003050:	d141      	bne.n	80030d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003052:	4b31      	ldr	r3, [pc, #196]	; (8003118 <HAL_RCC_OscConfig+0x478>)
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003058:	f7fe f876 	bl	8001148 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003060:	f7fe f872 	bl	8001148 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e087      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003072:	4b27      	ldr	r3, [pc, #156]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f0      	bne.n	8003060 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69da      	ldr	r2, [r3, #28]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	019b      	lsls	r3, r3, #6
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003094:	085b      	lsrs	r3, r3, #1
 8003096:	3b01      	subs	r3, #1
 8003098:	041b      	lsls	r3, r3, #16
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a0:	061b      	lsls	r3, r3, #24
 80030a2:	491b      	ldr	r1, [pc, #108]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030a8:	4b1b      	ldr	r3, [pc, #108]	; (8003118 <HAL_RCC_OscConfig+0x478>)
 80030aa:	2201      	movs	r2, #1
 80030ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ae:	f7fe f84b 	bl	8001148 <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030b6:	f7fe f847 	bl	8001148 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e05c      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c8:	4b11      	ldr	r3, [pc, #68]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0f0      	beq.n	80030b6 <HAL_RCC_OscConfig+0x416>
 80030d4:	e054      	b.n	8003180 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d6:	4b10      	ldr	r3, [pc, #64]	; (8003118 <HAL_RCC_OscConfig+0x478>)
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030dc:	f7fe f834 	bl	8001148 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e4:	f7fe f830 	bl	8001148 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e045      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f6:	4b06      	ldr	r3, [pc, #24]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f0      	bne.n	80030e4 <HAL_RCC_OscConfig+0x444>
 8003102:	e03d      	b.n	8003180 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d107      	bne.n	800311c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e038      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
 8003110:	40023800 	.word	0x40023800
 8003114:	40007000 	.word	0x40007000
 8003118:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800311c:	4b1b      	ldr	r3, [pc, #108]	; (800318c <HAL_RCC_OscConfig+0x4ec>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d028      	beq.n	800317c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003134:	429a      	cmp	r2, r3
 8003136:	d121      	bne.n	800317c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003142:	429a      	cmp	r2, r3
 8003144:	d11a      	bne.n	800317c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800314c:	4013      	ands	r3, r2
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003152:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003154:	4293      	cmp	r3, r2
 8003156:	d111      	bne.n	800317c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003162:	085b      	lsrs	r3, r3, #1
 8003164:	3b01      	subs	r3, #1
 8003166:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003168:	429a      	cmp	r2, r3
 800316a:	d107      	bne.n	800317c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003176:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003178:	429a      	cmp	r2, r3
 800317a:	d001      	beq.n	8003180 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e000      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3718      	adds	r7, #24
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	40023800 	.word	0x40023800

08003190 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e0cc      	b.n	800333e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031a4:	4b68      	ldr	r3, [pc, #416]	; (8003348 <HAL_RCC_ClockConfig+0x1b8>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d90c      	bls.n	80031cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b2:	4b65      	ldr	r3, [pc, #404]	; (8003348 <HAL_RCC_ClockConfig+0x1b8>)
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ba:	4b63      	ldr	r3, [pc, #396]	; (8003348 <HAL_RCC_ClockConfig+0x1b8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d001      	beq.n	80031cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e0b8      	b.n	800333e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d020      	beq.n	800321a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031e4:	4b59      	ldr	r3, [pc, #356]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	4a58      	ldr	r2, [pc, #352]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0308 	and.w	r3, r3, #8
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d005      	beq.n	8003208 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031fc:	4b53      	ldr	r3, [pc, #332]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	4a52      	ldr	r2, [pc, #328]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003206:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003208:	4b50      	ldr	r3, [pc, #320]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	494d      	ldr	r1, [pc, #308]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 8003216:	4313      	orrs	r3, r2
 8003218:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d044      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d107      	bne.n	800323e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800322e:	4b47      	ldr	r3, [pc, #284]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d119      	bne.n	800326e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e07f      	b.n	800333e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2b02      	cmp	r3, #2
 8003244:	d003      	beq.n	800324e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800324a:	2b03      	cmp	r3, #3
 800324c:	d107      	bne.n	800325e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324e:	4b3f      	ldr	r3, [pc, #252]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d109      	bne.n	800326e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e06f      	b.n	800333e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800325e:	4b3b      	ldr	r3, [pc, #236]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e067      	b.n	800333e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800326e:	4b37      	ldr	r3, [pc, #220]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f023 0203 	bic.w	r2, r3, #3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	4934      	ldr	r1, [pc, #208]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 800327c:	4313      	orrs	r3, r2
 800327e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003280:	f7fd ff62 	bl	8001148 <HAL_GetTick>
 8003284:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003286:	e00a      	b.n	800329e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003288:	f7fd ff5e 	bl	8001148 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	f241 3288 	movw	r2, #5000	; 0x1388
 8003296:	4293      	cmp	r3, r2
 8003298:	d901      	bls.n	800329e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e04f      	b.n	800333e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800329e:	4b2b      	ldr	r3, [pc, #172]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 020c 	and.w	r2, r3, #12
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d1eb      	bne.n	8003288 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032b0:	4b25      	ldr	r3, [pc, #148]	; (8003348 <HAL_RCC_ClockConfig+0x1b8>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d20c      	bcs.n	80032d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032be:	4b22      	ldr	r3, [pc, #136]	; (8003348 <HAL_RCC_ClockConfig+0x1b8>)
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c6:	4b20      	ldr	r3, [pc, #128]	; (8003348 <HAL_RCC_ClockConfig+0x1b8>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d001      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e032      	b.n	800333e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d008      	beq.n	80032f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032e4:	4b19      	ldr	r3, [pc, #100]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	4916      	ldr	r1, [pc, #88]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d009      	beq.n	8003316 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003302:	4b12      	ldr	r3, [pc, #72]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	490e      	ldr	r1, [pc, #56]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 8003312:	4313      	orrs	r3, r2
 8003314:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003316:	f000 f821 	bl	800335c <HAL_RCC_GetSysClockFreq>
 800331a:	4602      	mov	r2, r0
 800331c:	4b0b      	ldr	r3, [pc, #44]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	091b      	lsrs	r3, r3, #4
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	490a      	ldr	r1, [pc, #40]	; (8003350 <HAL_RCC_ClockConfig+0x1c0>)
 8003328:	5ccb      	ldrb	r3, [r1, r3]
 800332a:	fa22 f303 	lsr.w	r3, r2, r3
 800332e:	4a09      	ldr	r2, [pc, #36]	; (8003354 <HAL_RCC_ClockConfig+0x1c4>)
 8003330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003332:	4b09      	ldr	r3, [pc, #36]	; (8003358 <HAL_RCC_ClockConfig+0x1c8>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f7fd fec2 	bl	80010c0 <HAL_InitTick>

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40023c00 	.word	0x40023c00
 800334c:	40023800 	.word	0x40023800
 8003350:	08004f14 	.word	0x08004f14
 8003354:	2000000c 	.word	0x2000000c
 8003358:	20000010 	.word	0x20000010

0800335c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800335c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003360:	b094      	sub	sp, #80	; 0x50
 8003362:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003364:	2300      	movs	r3, #0
 8003366:	647b      	str	r3, [r7, #68]	; 0x44
 8003368:	2300      	movs	r3, #0
 800336a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800336c:	2300      	movs	r3, #0
 800336e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003374:	4b79      	ldr	r3, [pc, #484]	; (800355c <HAL_RCC_GetSysClockFreq+0x200>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 030c 	and.w	r3, r3, #12
 800337c:	2b08      	cmp	r3, #8
 800337e:	d00d      	beq.n	800339c <HAL_RCC_GetSysClockFreq+0x40>
 8003380:	2b08      	cmp	r3, #8
 8003382:	f200 80e1 	bhi.w	8003548 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003386:	2b00      	cmp	r3, #0
 8003388:	d002      	beq.n	8003390 <HAL_RCC_GetSysClockFreq+0x34>
 800338a:	2b04      	cmp	r3, #4
 800338c:	d003      	beq.n	8003396 <HAL_RCC_GetSysClockFreq+0x3a>
 800338e:	e0db      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003390:	4b73      	ldr	r3, [pc, #460]	; (8003560 <HAL_RCC_GetSysClockFreq+0x204>)
 8003392:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003394:	e0db      	b.n	800354e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003396:	4b73      	ldr	r3, [pc, #460]	; (8003564 <HAL_RCC_GetSysClockFreq+0x208>)
 8003398:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800339a:	e0d8      	b.n	800354e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800339c:	4b6f      	ldr	r3, [pc, #444]	; (800355c <HAL_RCC_GetSysClockFreq+0x200>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033a6:	4b6d      	ldr	r3, [pc, #436]	; (800355c <HAL_RCC_GetSysClockFreq+0x200>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d063      	beq.n	800347a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033b2:	4b6a      	ldr	r3, [pc, #424]	; (800355c <HAL_RCC_GetSysClockFreq+0x200>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	099b      	lsrs	r3, r3, #6
 80033b8:	2200      	movs	r2, #0
 80033ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80033bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033c4:	633b      	str	r3, [r7, #48]	; 0x30
 80033c6:	2300      	movs	r3, #0
 80033c8:	637b      	str	r3, [r7, #52]	; 0x34
 80033ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80033ce:	4622      	mov	r2, r4
 80033d0:	462b      	mov	r3, r5
 80033d2:	f04f 0000 	mov.w	r0, #0
 80033d6:	f04f 0100 	mov.w	r1, #0
 80033da:	0159      	lsls	r1, r3, #5
 80033dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033e0:	0150      	lsls	r0, r2, #5
 80033e2:	4602      	mov	r2, r0
 80033e4:	460b      	mov	r3, r1
 80033e6:	4621      	mov	r1, r4
 80033e8:	1a51      	subs	r1, r2, r1
 80033ea:	6139      	str	r1, [r7, #16]
 80033ec:	4629      	mov	r1, r5
 80033ee:	eb63 0301 	sbc.w	r3, r3, r1
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	f04f 0300 	mov.w	r3, #0
 80033fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003400:	4659      	mov	r1, fp
 8003402:	018b      	lsls	r3, r1, #6
 8003404:	4651      	mov	r1, sl
 8003406:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800340a:	4651      	mov	r1, sl
 800340c:	018a      	lsls	r2, r1, #6
 800340e:	4651      	mov	r1, sl
 8003410:	ebb2 0801 	subs.w	r8, r2, r1
 8003414:	4659      	mov	r1, fp
 8003416:	eb63 0901 	sbc.w	r9, r3, r1
 800341a:	f04f 0200 	mov.w	r2, #0
 800341e:	f04f 0300 	mov.w	r3, #0
 8003422:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003426:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800342a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800342e:	4690      	mov	r8, r2
 8003430:	4699      	mov	r9, r3
 8003432:	4623      	mov	r3, r4
 8003434:	eb18 0303 	adds.w	r3, r8, r3
 8003438:	60bb      	str	r3, [r7, #8]
 800343a:	462b      	mov	r3, r5
 800343c:	eb49 0303 	adc.w	r3, r9, r3
 8003440:	60fb      	str	r3, [r7, #12]
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	f04f 0300 	mov.w	r3, #0
 800344a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800344e:	4629      	mov	r1, r5
 8003450:	024b      	lsls	r3, r1, #9
 8003452:	4621      	mov	r1, r4
 8003454:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003458:	4621      	mov	r1, r4
 800345a:	024a      	lsls	r2, r1, #9
 800345c:	4610      	mov	r0, r2
 800345e:	4619      	mov	r1, r3
 8003460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003462:	2200      	movs	r2, #0
 8003464:	62bb      	str	r3, [r7, #40]	; 0x28
 8003466:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003468:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800346c:	f7fc ff08 	bl	8000280 <__aeabi_uldivmod>
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	4613      	mov	r3, r2
 8003476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003478:	e058      	b.n	800352c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800347a:	4b38      	ldr	r3, [pc, #224]	; (800355c <HAL_RCC_GetSysClockFreq+0x200>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	099b      	lsrs	r3, r3, #6
 8003480:	2200      	movs	r2, #0
 8003482:	4618      	mov	r0, r3
 8003484:	4611      	mov	r1, r2
 8003486:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800348a:	623b      	str	r3, [r7, #32]
 800348c:	2300      	movs	r3, #0
 800348e:	627b      	str	r3, [r7, #36]	; 0x24
 8003490:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003494:	4642      	mov	r2, r8
 8003496:	464b      	mov	r3, r9
 8003498:	f04f 0000 	mov.w	r0, #0
 800349c:	f04f 0100 	mov.w	r1, #0
 80034a0:	0159      	lsls	r1, r3, #5
 80034a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034a6:	0150      	lsls	r0, r2, #5
 80034a8:	4602      	mov	r2, r0
 80034aa:	460b      	mov	r3, r1
 80034ac:	4641      	mov	r1, r8
 80034ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80034b2:	4649      	mov	r1, r9
 80034b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80034b8:	f04f 0200 	mov.w	r2, #0
 80034bc:	f04f 0300 	mov.w	r3, #0
 80034c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034cc:	ebb2 040a 	subs.w	r4, r2, sl
 80034d0:	eb63 050b 	sbc.w	r5, r3, fp
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	00eb      	lsls	r3, r5, #3
 80034de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034e2:	00e2      	lsls	r2, r4, #3
 80034e4:	4614      	mov	r4, r2
 80034e6:	461d      	mov	r5, r3
 80034e8:	4643      	mov	r3, r8
 80034ea:	18e3      	adds	r3, r4, r3
 80034ec:	603b      	str	r3, [r7, #0]
 80034ee:	464b      	mov	r3, r9
 80034f0:	eb45 0303 	adc.w	r3, r5, r3
 80034f4:	607b      	str	r3, [r7, #4]
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	f04f 0300 	mov.w	r3, #0
 80034fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003502:	4629      	mov	r1, r5
 8003504:	028b      	lsls	r3, r1, #10
 8003506:	4621      	mov	r1, r4
 8003508:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800350c:	4621      	mov	r1, r4
 800350e:	028a      	lsls	r2, r1, #10
 8003510:	4610      	mov	r0, r2
 8003512:	4619      	mov	r1, r3
 8003514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003516:	2200      	movs	r2, #0
 8003518:	61bb      	str	r3, [r7, #24]
 800351a:	61fa      	str	r2, [r7, #28]
 800351c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003520:	f7fc feae 	bl	8000280 <__aeabi_uldivmod>
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	4613      	mov	r3, r2
 800352a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800352c:	4b0b      	ldr	r3, [pc, #44]	; (800355c <HAL_RCC_GetSysClockFreq+0x200>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	0c1b      	lsrs	r3, r3, #16
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	3301      	adds	r3, #1
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800353c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800353e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003540:	fbb2 f3f3 	udiv	r3, r2, r3
 8003544:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003546:	e002      	b.n	800354e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003548:	4b05      	ldr	r3, [pc, #20]	; (8003560 <HAL_RCC_GetSysClockFreq+0x204>)
 800354a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800354c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800354e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003550:	4618      	mov	r0, r3
 8003552:	3750      	adds	r7, #80	; 0x50
 8003554:	46bd      	mov	sp, r7
 8003556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800355a:	bf00      	nop
 800355c:	40023800 	.word	0x40023800
 8003560:	00f42400 	.word	0x00f42400
 8003564:	007a1200 	.word	0x007a1200

08003568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800356c:	4b03      	ldr	r3, [pc, #12]	; (800357c <HAL_RCC_GetHCLKFreq+0x14>)
 800356e:	681b      	ldr	r3, [r3, #0]
}
 8003570:	4618      	mov	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	2000000c 	.word	0x2000000c

08003580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003584:	f7ff fff0 	bl	8003568 <HAL_RCC_GetHCLKFreq>
 8003588:	4602      	mov	r2, r0
 800358a:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	0a9b      	lsrs	r3, r3, #10
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	4903      	ldr	r1, [pc, #12]	; (80035a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003596:	5ccb      	ldrb	r3, [r1, r3]
 8003598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800359c:	4618      	mov	r0, r3
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40023800 	.word	0x40023800
 80035a4:	08004f24 	.word	0x08004f24

080035a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035ac:	f7ff ffdc 	bl	8003568 <HAL_RCC_GetHCLKFreq>
 80035b0:	4602      	mov	r2, r0
 80035b2:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	0b5b      	lsrs	r3, r3, #13
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	4903      	ldr	r1, [pc, #12]	; (80035cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80035be:	5ccb      	ldrb	r3, [r1, r3]
 80035c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40023800 	.word	0x40023800
 80035cc:	08004f24 	.word	0x08004f24

080035d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e03f      	b.n	8003662 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d106      	bne.n	80035fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7fd fbaa 	bl	8000d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2224      	movs	r2, #36	; 0x24
 8003600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003612:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 f929 	bl	800386c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	691a      	ldr	r2, [r3, #16]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003628:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	695a      	ldr	r2, [r3, #20]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003638:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68da      	ldr	r2, [r3, #12]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003648:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2220      	movs	r2, #32
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b08a      	sub	sp, #40	; 0x28
 800366e:	af02      	add	r7, sp, #8
 8003670:	60f8      	str	r0, [r7, #12]
 8003672:	60b9      	str	r1, [r7, #8]
 8003674:	603b      	str	r3, [r7, #0]
 8003676:	4613      	mov	r3, r2
 8003678:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b20      	cmp	r3, #32
 8003688:	d17c      	bne.n	8003784 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d002      	beq.n	8003696 <HAL_UART_Transmit+0x2c>
 8003690:	88fb      	ldrh	r3, [r7, #6]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e075      	b.n	8003786 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d101      	bne.n	80036a8 <HAL_UART_Transmit+0x3e>
 80036a4:	2302      	movs	r3, #2
 80036a6:	e06e      	b.n	8003786 <HAL_UART_Transmit+0x11c>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2221      	movs	r2, #33	; 0x21
 80036ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036be:	f7fd fd43 	bl	8001148 <HAL_GetTick>
 80036c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	88fa      	ldrh	r2, [r7, #6]
 80036c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	88fa      	ldrh	r2, [r7, #6]
 80036ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d8:	d108      	bne.n	80036ec <HAL_UART_Transmit+0x82>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d104      	bne.n	80036ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80036e2:	2300      	movs	r3, #0
 80036e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	61bb      	str	r3, [r7, #24]
 80036ea:	e003      	b.n	80036f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036f0:	2300      	movs	r3, #0
 80036f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80036fc:	e02a      	b.n	8003754 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	2200      	movs	r2, #0
 8003706:	2180      	movs	r1, #128	; 0x80
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 f840 	bl	800378e <UART_WaitOnFlagUntilTimeout>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e036      	b.n	8003786 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10b      	bne.n	8003736 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	881b      	ldrh	r3, [r3, #0]
 8003722:	461a      	mov	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800372c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	3302      	adds	r3, #2
 8003732:	61bb      	str	r3, [r7, #24]
 8003734:	e007      	b.n	8003746 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	781a      	ldrb	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	3301      	adds	r3, #1
 8003744:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800374a:	b29b      	uxth	r3, r3
 800374c:	3b01      	subs	r3, #1
 800374e:	b29a      	uxth	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003758:	b29b      	uxth	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1cf      	bne.n	80036fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	2200      	movs	r2, #0
 8003766:	2140      	movs	r1, #64	; 0x40
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 f810 	bl	800378e <UART_WaitOnFlagUntilTimeout>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e006      	b.n	8003786 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003780:	2300      	movs	r3, #0
 8003782:	e000      	b.n	8003786 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003784:	2302      	movs	r3, #2
  }
}
 8003786:	4618      	mov	r0, r3
 8003788:	3720      	adds	r7, #32
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b090      	sub	sp, #64	; 0x40
 8003792:	af00      	add	r7, sp, #0
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	603b      	str	r3, [r7, #0]
 800379a:	4613      	mov	r3, r2
 800379c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800379e:	e050      	b.n	8003842 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a6:	d04c      	beq.n	8003842 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80037a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d007      	beq.n	80037be <UART_WaitOnFlagUntilTimeout+0x30>
 80037ae:	f7fd fccb 	bl	8001148 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d241      	bcs.n	8003842 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	330c      	adds	r3, #12
 80037c4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c8:	e853 3f00 	ldrex	r3, [r3]
 80037cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	330c      	adds	r3, #12
 80037dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037de:	637a      	str	r2, [r7, #52]	; 0x34
 80037e0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037e6:	e841 2300 	strex	r3, r2, [r1]
 80037ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1e5      	bne.n	80037be <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	3314      	adds	r3, #20
 80037f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	e853 3f00 	ldrex	r3, [r3]
 8003800:	613b      	str	r3, [r7, #16]
   return(result);
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	f023 0301 	bic.w	r3, r3, #1
 8003808:	63bb      	str	r3, [r7, #56]	; 0x38
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	3314      	adds	r3, #20
 8003810:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003812:	623a      	str	r2, [r7, #32]
 8003814:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003816:	69f9      	ldr	r1, [r7, #28]
 8003818:	6a3a      	ldr	r2, [r7, #32]
 800381a:	e841 2300 	strex	r3, r2, [r1]
 800381e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1e5      	bne.n	80037f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2220      	movs	r2, #32
 800382a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2220      	movs	r2, #32
 8003832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e00f      	b.n	8003862 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	4013      	ands	r3, r2
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	429a      	cmp	r2, r3
 8003850:	bf0c      	ite	eq
 8003852:	2301      	moveq	r3, #1
 8003854:	2300      	movne	r3, #0
 8003856:	b2db      	uxtb	r3, r3
 8003858:	461a      	mov	r2, r3
 800385a:	79fb      	ldrb	r3, [r7, #7]
 800385c:	429a      	cmp	r2, r3
 800385e:	d09f      	beq.n	80037a0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3740      	adds	r7, #64	; 0x40
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
	...

0800386c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800386c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003870:	b0c0      	sub	sp, #256	; 0x100
 8003872:	af00      	add	r7, sp, #0
 8003874:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003888:	68d9      	ldr	r1, [r3, #12]
 800388a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	ea40 0301 	orr.w	r3, r0, r1
 8003894:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	431a      	orrs	r2, r3
 80038a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	431a      	orrs	r2, r3
 80038ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80038b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80038c4:	f021 010c 	bic.w	r1, r1, #12
 80038c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80038d2:	430b      	orrs	r3, r1
 80038d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80038e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e6:	6999      	ldr	r1, [r3, #24]
 80038e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	ea40 0301 	orr.w	r3, r0, r1
 80038f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	4b8f      	ldr	r3, [pc, #572]	; (8003b38 <UART_SetConfig+0x2cc>)
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d005      	beq.n	800390c <UART_SetConfig+0xa0>
 8003900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	4b8d      	ldr	r3, [pc, #564]	; (8003b3c <UART_SetConfig+0x2d0>)
 8003908:	429a      	cmp	r2, r3
 800390a:	d104      	bne.n	8003916 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800390c:	f7ff fe4c 	bl	80035a8 <HAL_RCC_GetPCLK2Freq>
 8003910:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003914:	e003      	b.n	800391e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003916:	f7ff fe33 	bl	8003580 <HAL_RCC_GetPCLK1Freq>
 800391a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800391e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003922:	69db      	ldr	r3, [r3, #28]
 8003924:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003928:	f040 810c 	bne.w	8003b44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800392c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003930:	2200      	movs	r2, #0
 8003932:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003936:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800393a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800393e:	4622      	mov	r2, r4
 8003940:	462b      	mov	r3, r5
 8003942:	1891      	adds	r1, r2, r2
 8003944:	65b9      	str	r1, [r7, #88]	; 0x58
 8003946:	415b      	adcs	r3, r3
 8003948:	65fb      	str	r3, [r7, #92]	; 0x5c
 800394a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800394e:	4621      	mov	r1, r4
 8003950:	eb12 0801 	adds.w	r8, r2, r1
 8003954:	4629      	mov	r1, r5
 8003956:	eb43 0901 	adc.w	r9, r3, r1
 800395a:	f04f 0200 	mov.w	r2, #0
 800395e:	f04f 0300 	mov.w	r3, #0
 8003962:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003966:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800396a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800396e:	4690      	mov	r8, r2
 8003970:	4699      	mov	r9, r3
 8003972:	4623      	mov	r3, r4
 8003974:	eb18 0303 	adds.w	r3, r8, r3
 8003978:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800397c:	462b      	mov	r3, r5
 800397e:	eb49 0303 	adc.w	r3, r9, r3
 8003982:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003992:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003996:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800399a:	460b      	mov	r3, r1
 800399c:	18db      	adds	r3, r3, r3
 800399e:	653b      	str	r3, [r7, #80]	; 0x50
 80039a0:	4613      	mov	r3, r2
 80039a2:	eb42 0303 	adc.w	r3, r2, r3
 80039a6:	657b      	str	r3, [r7, #84]	; 0x54
 80039a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80039ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80039b0:	f7fc fc66 	bl	8000280 <__aeabi_uldivmod>
 80039b4:	4602      	mov	r2, r0
 80039b6:	460b      	mov	r3, r1
 80039b8:	4b61      	ldr	r3, [pc, #388]	; (8003b40 <UART_SetConfig+0x2d4>)
 80039ba:	fba3 2302 	umull	r2, r3, r3, r2
 80039be:	095b      	lsrs	r3, r3, #5
 80039c0:	011c      	lsls	r4, r3, #4
 80039c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039c6:	2200      	movs	r2, #0
 80039c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80039d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80039d4:	4642      	mov	r2, r8
 80039d6:	464b      	mov	r3, r9
 80039d8:	1891      	adds	r1, r2, r2
 80039da:	64b9      	str	r1, [r7, #72]	; 0x48
 80039dc:	415b      	adcs	r3, r3
 80039de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80039e4:	4641      	mov	r1, r8
 80039e6:	eb12 0a01 	adds.w	sl, r2, r1
 80039ea:	4649      	mov	r1, r9
 80039ec:	eb43 0b01 	adc.w	fp, r3, r1
 80039f0:	f04f 0200 	mov.w	r2, #0
 80039f4:	f04f 0300 	mov.w	r3, #0
 80039f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a04:	4692      	mov	sl, r2
 8003a06:	469b      	mov	fp, r3
 8003a08:	4643      	mov	r3, r8
 8003a0a:	eb1a 0303 	adds.w	r3, sl, r3
 8003a0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a12:	464b      	mov	r3, r9
 8003a14:	eb4b 0303 	adc.w	r3, fp, r3
 8003a18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a28:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a30:	460b      	mov	r3, r1
 8003a32:	18db      	adds	r3, r3, r3
 8003a34:	643b      	str	r3, [r7, #64]	; 0x40
 8003a36:	4613      	mov	r3, r2
 8003a38:	eb42 0303 	adc.w	r3, r2, r3
 8003a3c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a46:	f7fc fc1b 	bl	8000280 <__aeabi_uldivmod>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4611      	mov	r1, r2
 8003a50:	4b3b      	ldr	r3, [pc, #236]	; (8003b40 <UART_SetConfig+0x2d4>)
 8003a52:	fba3 2301 	umull	r2, r3, r3, r1
 8003a56:	095b      	lsrs	r3, r3, #5
 8003a58:	2264      	movs	r2, #100	; 0x64
 8003a5a:	fb02 f303 	mul.w	r3, r2, r3
 8003a5e:	1acb      	subs	r3, r1, r3
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a66:	4b36      	ldr	r3, [pc, #216]	; (8003b40 <UART_SetConfig+0x2d4>)
 8003a68:	fba3 2302 	umull	r2, r3, r3, r2
 8003a6c:	095b      	lsrs	r3, r3, #5
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a74:	441c      	add	r4, r3
 8003a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a80:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003a84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003a88:	4642      	mov	r2, r8
 8003a8a:	464b      	mov	r3, r9
 8003a8c:	1891      	adds	r1, r2, r2
 8003a8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a90:	415b      	adcs	r3, r3
 8003a92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a98:	4641      	mov	r1, r8
 8003a9a:	1851      	adds	r1, r2, r1
 8003a9c:	6339      	str	r1, [r7, #48]	; 0x30
 8003a9e:	4649      	mov	r1, r9
 8003aa0:	414b      	adcs	r3, r1
 8003aa2:	637b      	str	r3, [r7, #52]	; 0x34
 8003aa4:	f04f 0200 	mov.w	r2, #0
 8003aa8:	f04f 0300 	mov.w	r3, #0
 8003aac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003ab0:	4659      	mov	r1, fp
 8003ab2:	00cb      	lsls	r3, r1, #3
 8003ab4:	4651      	mov	r1, sl
 8003ab6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003aba:	4651      	mov	r1, sl
 8003abc:	00ca      	lsls	r2, r1, #3
 8003abe:	4610      	mov	r0, r2
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	4642      	mov	r2, r8
 8003ac6:	189b      	adds	r3, r3, r2
 8003ac8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003acc:	464b      	mov	r3, r9
 8003ace:	460a      	mov	r2, r1
 8003ad0:	eb42 0303 	adc.w	r3, r2, r3
 8003ad4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ae4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ae8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003aec:	460b      	mov	r3, r1
 8003aee:	18db      	adds	r3, r3, r3
 8003af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003af2:	4613      	mov	r3, r2
 8003af4:	eb42 0303 	adc.w	r3, r2, r3
 8003af8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003afa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003afe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b02:	f7fc fbbd 	bl	8000280 <__aeabi_uldivmod>
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4b0d      	ldr	r3, [pc, #52]	; (8003b40 <UART_SetConfig+0x2d4>)
 8003b0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b10:	095b      	lsrs	r3, r3, #5
 8003b12:	2164      	movs	r1, #100	; 0x64
 8003b14:	fb01 f303 	mul.w	r3, r1, r3
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	3332      	adds	r3, #50	; 0x32
 8003b1e:	4a08      	ldr	r2, [pc, #32]	; (8003b40 <UART_SetConfig+0x2d4>)
 8003b20:	fba2 2303 	umull	r2, r3, r2, r3
 8003b24:	095b      	lsrs	r3, r3, #5
 8003b26:	f003 0207 	and.w	r2, r3, #7
 8003b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4422      	add	r2, r4
 8003b32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b34:	e105      	b.n	8003d42 <UART_SetConfig+0x4d6>
 8003b36:	bf00      	nop
 8003b38:	40011000 	.word	0x40011000
 8003b3c:	40011400 	.word	0x40011400
 8003b40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b4e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003b56:	4642      	mov	r2, r8
 8003b58:	464b      	mov	r3, r9
 8003b5a:	1891      	adds	r1, r2, r2
 8003b5c:	6239      	str	r1, [r7, #32]
 8003b5e:	415b      	adcs	r3, r3
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24
 8003b62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b66:	4641      	mov	r1, r8
 8003b68:	1854      	adds	r4, r2, r1
 8003b6a:	4649      	mov	r1, r9
 8003b6c:	eb43 0501 	adc.w	r5, r3, r1
 8003b70:	f04f 0200 	mov.w	r2, #0
 8003b74:	f04f 0300 	mov.w	r3, #0
 8003b78:	00eb      	lsls	r3, r5, #3
 8003b7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b7e:	00e2      	lsls	r2, r4, #3
 8003b80:	4614      	mov	r4, r2
 8003b82:	461d      	mov	r5, r3
 8003b84:	4643      	mov	r3, r8
 8003b86:	18e3      	adds	r3, r4, r3
 8003b88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b8c:	464b      	mov	r3, r9
 8003b8e:	eb45 0303 	adc.w	r3, r5, r3
 8003b92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ba2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ba6:	f04f 0200 	mov.w	r2, #0
 8003baa:	f04f 0300 	mov.w	r3, #0
 8003bae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003bb2:	4629      	mov	r1, r5
 8003bb4:	008b      	lsls	r3, r1, #2
 8003bb6:	4621      	mov	r1, r4
 8003bb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bbc:	4621      	mov	r1, r4
 8003bbe:	008a      	lsls	r2, r1, #2
 8003bc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003bc4:	f7fc fb5c 	bl	8000280 <__aeabi_uldivmod>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	4b60      	ldr	r3, [pc, #384]	; (8003d50 <UART_SetConfig+0x4e4>)
 8003bce:	fba3 2302 	umull	r2, r3, r3, r2
 8003bd2:	095b      	lsrs	r3, r3, #5
 8003bd4:	011c      	lsls	r4, r3, #4
 8003bd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003be0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003be4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003be8:	4642      	mov	r2, r8
 8003bea:	464b      	mov	r3, r9
 8003bec:	1891      	adds	r1, r2, r2
 8003bee:	61b9      	str	r1, [r7, #24]
 8003bf0:	415b      	adcs	r3, r3
 8003bf2:	61fb      	str	r3, [r7, #28]
 8003bf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bf8:	4641      	mov	r1, r8
 8003bfa:	1851      	adds	r1, r2, r1
 8003bfc:	6139      	str	r1, [r7, #16]
 8003bfe:	4649      	mov	r1, r9
 8003c00:	414b      	adcs	r3, r1
 8003c02:	617b      	str	r3, [r7, #20]
 8003c04:	f04f 0200 	mov.w	r2, #0
 8003c08:	f04f 0300 	mov.w	r3, #0
 8003c0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c10:	4659      	mov	r1, fp
 8003c12:	00cb      	lsls	r3, r1, #3
 8003c14:	4651      	mov	r1, sl
 8003c16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c1a:	4651      	mov	r1, sl
 8003c1c:	00ca      	lsls	r2, r1, #3
 8003c1e:	4610      	mov	r0, r2
 8003c20:	4619      	mov	r1, r3
 8003c22:	4603      	mov	r3, r0
 8003c24:	4642      	mov	r2, r8
 8003c26:	189b      	adds	r3, r3, r2
 8003c28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c2c:	464b      	mov	r3, r9
 8003c2e:	460a      	mov	r2, r1
 8003c30:	eb42 0303 	adc.w	r3, r2, r3
 8003c34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c42:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c44:	f04f 0200 	mov.w	r2, #0
 8003c48:	f04f 0300 	mov.w	r3, #0
 8003c4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c50:	4649      	mov	r1, r9
 8003c52:	008b      	lsls	r3, r1, #2
 8003c54:	4641      	mov	r1, r8
 8003c56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c5a:	4641      	mov	r1, r8
 8003c5c:	008a      	lsls	r2, r1, #2
 8003c5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003c62:	f7fc fb0d 	bl	8000280 <__aeabi_uldivmod>
 8003c66:	4602      	mov	r2, r0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	4b39      	ldr	r3, [pc, #228]	; (8003d50 <UART_SetConfig+0x4e4>)
 8003c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c70:	095b      	lsrs	r3, r3, #5
 8003c72:	2164      	movs	r1, #100	; 0x64
 8003c74:	fb01 f303 	mul.w	r3, r1, r3
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	3332      	adds	r3, #50	; 0x32
 8003c7e:	4a34      	ldr	r2, [pc, #208]	; (8003d50 <UART_SetConfig+0x4e4>)
 8003c80:	fba2 2303 	umull	r2, r3, r2, r3
 8003c84:	095b      	lsrs	r3, r3, #5
 8003c86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c8a:	441c      	add	r4, r3
 8003c8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c90:	2200      	movs	r2, #0
 8003c92:	673b      	str	r3, [r7, #112]	; 0x70
 8003c94:	677a      	str	r2, [r7, #116]	; 0x74
 8003c96:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003c9a:	4642      	mov	r2, r8
 8003c9c:	464b      	mov	r3, r9
 8003c9e:	1891      	adds	r1, r2, r2
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	415b      	adcs	r3, r3
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003caa:	4641      	mov	r1, r8
 8003cac:	1851      	adds	r1, r2, r1
 8003cae:	6039      	str	r1, [r7, #0]
 8003cb0:	4649      	mov	r1, r9
 8003cb2:	414b      	adcs	r3, r1
 8003cb4:	607b      	str	r3, [r7, #4]
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	f04f 0300 	mov.w	r3, #0
 8003cbe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003cc2:	4659      	mov	r1, fp
 8003cc4:	00cb      	lsls	r3, r1, #3
 8003cc6:	4651      	mov	r1, sl
 8003cc8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ccc:	4651      	mov	r1, sl
 8003cce:	00ca      	lsls	r2, r1, #3
 8003cd0:	4610      	mov	r0, r2
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	4642      	mov	r2, r8
 8003cd8:	189b      	adds	r3, r3, r2
 8003cda:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cdc:	464b      	mov	r3, r9
 8003cde:	460a      	mov	r2, r1
 8003ce0:	eb42 0303 	adc.w	r3, r2, r3
 8003ce4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	663b      	str	r3, [r7, #96]	; 0x60
 8003cf0:	667a      	str	r2, [r7, #100]	; 0x64
 8003cf2:	f04f 0200 	mov.w	r2, #0
 8003cf6:	f04f 0300 	mov.w	r3, #0
 8003cfa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003cfe:	4649      	mov	r1, r9
 8003d00:	008b      	lsls	r3, r1, #2
 8003d02:	4641      	mov	r1, r8
 8003d04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d08:	4641      	mov	r1, r8
 8003d0a:	008a      	lsls	r2, r1, #2
 8003d0c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d10:	f7fc fab6 	bl	8000280 <__aeabi_uldivmod>
 8003d14:	4602      	mov	r2, r0
 8003d16:	460b      	mov	r3, r1
 8003d18:	4b0d      	ldr	r3, [pc, #52]	; (8003d50 <UART_SetConfig+0x4e4>)
 8003d1a:	fba3 1302 	umull	r1, r3, r3, r2
 8003d1e:	095b      	lsrs	r3, r3, #5
 8003d20:	2164      	movs	r1, #100	; 0x64
 8003d22:	fb01 f303 	mul.w	r3, r1, r3
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	011b      	lsls	r3, r3, #4
 8003d2a:	3332      	adds	r3, #50	; 0x32
 8003d2c:	4a08      	ldr	r2, [pc, #32]	; (8003d50 <UART_SetConfig+0x4e4>)
 8003d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d32:	095b      	lsrs	r3, r3, #5
 8003d34:	f003 020f 	and.w	r2, r3, #15
 8003d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4422      	add	r2, r4
 8003d40:	609a      	str	r2, [r3, #8]
}
 8003d42:	bf00      	nop
 8003d44:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d4e:	bf00      	nop
 8003d50:	51eb851f 	.word	0x51eb851f

08003d54 <__errno>:
 8003d54:	4b01      	ldr	r3, [pc, #4]	; (8003d5c <__errno+0x8>)
 8003d56:	6818      	ldr	r0, [r3, #0]
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	20000018 	.word	0x20000018

08003d60 <__libc_init_array>:
 8003d60:	b570      	push	{r4, r5, r6, lr}
 8003d62:	4d0d      	ldr	r5, [pc, #52]	; (8003d98 <__libc_init_array+0x38>)
 8003d64:	4c0d      	ldr	r4, [pc, #52]	; (8003d9c <__libc_init_array+0x3c>)
 8003d66:	1b64      	subs	r4, r4, r5
 8003d68:	10a4      	asrs	r4, r4, #2
 8003d6a:	2600      	movs	r6, #0
 8003d6c:	42a6      	cmp	r6, r4
 8003d6e:	d109      	bne.n	8003d84 <__libc_init_array+0x24>
 8003d70:	4d0b      	ldr	r5, [pc, #44]	; (8003da0 <__libc_init_array+0x40>)
 8003d72:	4c0c      	ldr	r4, [pc, #48]	; (8003da4 <__libc_init_array+0x44>)
 8003d74:	f001 f824 	bl	8004dc0 <_init>
 8003d78:	1b64      	subs	r4, r4, r5
 8003d7a:	10a4      	asrs	r4, r4, #2
 8003d7c:	2600      	movs	r6, #0
 8003d7e:	42a6      	cmp	r6, r4
 8003d80:	d105      	bne.n	8003d8e <__libc_init_array+0x2e>
 8003d82:	bd70      	pop	{r4, r5, r6, pc}
 8003d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d88:	4798      	blx	r3
 8003d8a:	3601      	adds	r6, #1
 8003d8c:	e7ee      	b.n	8003d6c <__libc_init_array+0xc>
 8003d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d92:	4798      	blx	r3
 8003d94:	3601      	adds	r6, #1
 8003d96:	e7f2      	b.n	8003d7e <__libc_init_array+0x1e>
 8003d98:	08004fcc 	.word	0x08004fcc
 8003d9c:	08004fcc 	.word	0x08004fcc
 8003da0:	08004fcc 	.word	0x08004fcc
 8003da4:	08004fd0 	.word	0x08004fd0

08003da8 <memset>:
 8003da8:	4402      	add	r2, r0
 8003daa:	4603      	mov	r3, r0
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d100      	bne.n	8003db2 <memset+0xa>
 8003db0:	4770      	bx	lr
 8003db2:	f803 1b01 	strb.w	r1, [r3], #1
 8003db6:	e7f9      	b.n	8003dac <memset+0x4>

08003db8 <iprintf>:
 8003db8:	b40f      	push	{r0, r1, r2, r3}
 8003dba:	4b0a      	ldr	r3, [pc, #40]	; (8003de4 <iprintf+0x2c>)
 8003dbc:	b513      	push	{r0, r1, r4, lr}
 8003dbe:	681c      	ldr	r4, [r3, #0]
 8003dc0:	b124      	cbz	r4, 8003dcc <iprintf+0x14>
 8003dc2:	69a3      	ldr	r3, [r4, #24]
 8003dc4:	b913      	cbnz	r3, 8003dcc <iprintf+0x14>
 8003dc6:	4620      	mov	r0, r4
 8003dc8:	f000 fa5e 	bl	8004288 <__sinit>
 8003dcc:	ab05      	add	r3, sp, #20
 8003dce:	9a04      	ldr	r2, [sp, #16]
 8003dd0:	68a1      	ldr	r1, [r4, #8]
 8003dd2:	9301      	str	r3, [sp, #4]
 8003dd4:	4620      	mov	r0, r4
 8003dd6:	f000 fc67 	bl	80046a8 <_vfiprintf_r>
 8003dda:	b002      	add	sp, #8
 8003ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003de0:	b004      	add	sp, #16
 8003de2:	4770      	bx	lr
 8003de4:	20000018 	.word	0x20000018

08003de8 <_puts_r>:
 8003de8:	b570      	push	{r4, r5, r6, lr}
 8003dea:	460e      	mov	r6, r1
 8003dec:	4605      	mov	r5, r0
 8003dee:	b118      	cbz	r0, 8003df8 <_puts_r+0x10>
 8003df0:	6983      	ldr	r3, [r0, #24]
 8003df2:	b90b      	cbnz	r3, 8003df8 <_puts_r+0x10>
 8003df4:	f000 fa48 	bl	8004288 <__sinit>
 8003df8:	69ab      	ldr	r3, [r5, #24]
 8003dfa:	68ac      	ldr	r4, [r5, #8]
 8003dfc:	b913      	cbnz	r3, 8003e04 <_puts_r+0x1c>
 8003dfe:	4628      	mov	r0, r5
 8003e00:	f000 fa42 	bl	8004288 <__sinit>
 8003e04:	4b2c      	ldr	r3, [pc, #176]	; (8003eb8 <_puts_r+0xd0>)
 8003e06:	429c      	cmp	r4, r3
 8003e08:	d120      	bne.n	8003e4c <_puts_r+0x64>
 8003e0a:	686c      	ldr	r4, [r5, #4]
 8003e0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e0e:	07db      	lsls	r3, r3, #31
 8003e10:	d405      	bmi.n	8003e1e <_puts_r+0x36>
 8003e12:	89a3      	ldrh	r3, [r4, #12]
 8003e14:	0598      	lsls	r0, r3, #22
 8003e16:	d402      	bmi.n	8003e1e <_puts_r+0x36>
 8003e18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e1a:	f000 fad3 	bl	80043c4 <__retarget_lock_acquire_recursive>
 8003e1e:	89a3      	ldrh	r3, [r4, #12]
 8003e20:	0719      	lsls	r1, r3, #28
 8003e22:	d51d      	bpl.n	8003e60 <_puts_r+0x78>
 8003e24:	6923      	ldr	r3, [r4, #16]
 8003e26:	b1db      	cbz	r3, 8003e60 <_puts_r+0x78>
 8003e28:	3e01      	subs	r6, #1
 8003e2a:	68a3      	ldr	r3, [r4, #8]
 8003e2c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003e30:	3b01      	subs	r3, #1
 8003e32:	60a3      	str	r3, [r4, #8]
 8003e34:	bb39      	cbnz	r1, 8003e86 <_puts_r+0x9e>
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	da38      	bge.n	8003eac <_puts_r+0xc4>
 8003e3a:	4622      	mov	r2, r4
 8003e3c:	210a      	movs	r1, #10
 8003e3e:	4628      	mov	r0, r5
 8003e40:	f000 f848 	bl	8003ed4 <__swbuf_r>
 8003e44:	3001      	adds	r0, #1
 8003e46:	d011      	beq.n	8003e6c <_puts_r+0x84>
 8003e48:	250a      	movs	r5, #10
 8003e4a:	e011      	b.n	8003e70 <_puts_r+0x88>
 8003e4c:	4b1b      	ldr	r3, [pc, #108]	; (8003ebc <_puts_r+0xd4>)
 8003e4e:	429c      	cmp	r4, r3
 8003e50:	d101      	bne.n	8003e56 <_puts_r+0x6e>
 8003e52:	68ac      	ldr	r4, [r5, #8]
 8003e54:	e7da      	b.n	8003e0c <_puts_r+0x24>
 8003e56:	4b1a      	ldr	r3, [pc, #104]	; (8003ec0 <_puts_r+0xd8>)
 8003e58:	429c      	cmp	r4, r3
 8003e5a:	bf08      	it	eq
 8003e5c:	68ec      	ldreq	r4, [r5, #12]
 8003e5e:	e7d5      	b.n	8003e0c <_puts_r+0x24>
 8003e60:	4621      	mov	r1, r4
 8003e62:	4628      	mov	r0, r5
 8003e64:	f000 f888 	bl	8003f78 <__swsetup_r>
 8003e68:	2800      	cmp	r0, #0
 8003e6a:	d0dd      	beq.n	8003e28 <_puts_r+0x40>
 8003e6c:	f04f 35ff 	mov.w	r5, #4294967295
 8003e70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e72:	07da      	lsls	r2, r3, #31
 8003e74:	d405      	bmi.n	8003e82 <_puts_r+0x9a>
 8003e76:	89a3      	ldrh	r3, [r4, #12]
 8003e78:	059b      	lsls	r3, r3, #22
 8003e7a:	d402      	bmi.n	8003e82 <_puts_r+0x9a>
 8003e7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e7e:	f000 faa2 	bl	80043c6 <__retarget_lock_release_recursive>
 8003e82:	4628      	mov	r0, r5
 8003e84:	bd70      	pop	{r4, r5, r6, pc}
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	da04      	bge.n	8003e94 <_puts_r+0xac>
 8003e8a:	69a2      	ldr	r2, [r4, #24]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	dc06      	bgt.n	8003e9e <_puts_r+0xb6>
 8003e90:	290a      	cmp	r1, #10
 8003e92:	d004      	beq.n	8003e9e <_puts_r+0xb6>
 8003e94:	6823      	ldr	r3, [r4, #0]
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	6022      	str	r2, [r4, #0]
 8003e9a:	7019      	strb	r1, [r3, #0]
 8003e9c:	e7c5      	b.n	8003e2a <_puts_r+0x42>
 8003e9e:	4622      	mov	r2, r4
 8003ea0:	4628      	mov	r0, r5
 8003ea2:	f000 f817 	bl	8003ed4 <__swbuf_r>
 8003ea6:	3001      	adds	r0, #1
 8003ea8:	d1bf      	bne.n	8003e2a <_puts_r+0x42>
 8003eaa:	e7df      	b.n	8003e6c <_puts_r+0x84>
 8003eac:	6823      	ldr	r3, [r4, #0]
 8003eae:	250a      	movs	r5, #10
 8003eb0:	1c5a      	adds	r2, r3, #1
 8003eb2:	6022      	str	r2, [r4, #0]
 8003eb4:	701d      	strb	r5, [r3, #0]
 8003eb6:	e7db      	b.n	8003e70 <_puts_r+0x88>
 8003eb8:	08004f50 	.word	0x08004f50
 8003ebc:	08004f70 	.word	0x08004f70
 8003ec0:	08004f30 	.word	0x08004f30

08003ec4 <puts>:
 8003ec4:	4b02      	ldr	r3, [pc, #8]	; (8003ed0 <puts+0xc>)
 8003ec6:	4601      	mov	r1, r0
 8003ec8:	6818      	ldr	r0, [r3, #0]
 8003eca:	f7ff bf8d 	b.w	8003de8 <_puts_r>
 8003ece:	bf00      	nop
 8003ed0:	20000018 	.word	0x20000018

08003ed4 <__swbuf_r>:
 8003ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ed6:	460e      	mov	r6, r1
 8003ed8:	4614      	mov	r4, r2
 8003eda:	4605      	mov	r5, r0
 8003edc:	b118      	cbz	r0, 8003ee6 <__swbuf_r+0x12>
 8003ede:	6983      	ldr	r3, [r0, #24]
 8003ee0:	b90b      	cbnz	r3, 8003ee6 <__swbuf_r+0x12>
 8003ee2:	f000 f9d1 	bl	8004288 <__sinit>
 8003ee6:	4b21      	ldr	r3, [pc, #132]	; (8003f6c <__swbuf_r+0x98>)
 8003ee8:	429c      	cmp	r4, r3
 8003eea:	d12b      	bne.n	8003f44 <__swbuf_r+0x70>
 8003eec:	686c      	ldr	r4, [r5, #4]
 8003eee:	69a3      	ldr	r3, [r4, #24]
 8003ef0:	60a3      	str	r3, [r4, #8]
 8003ef2:	89a3      	ldrh	r3, [r4, #12]
 8003ef4:	071a      	lsls	r2, r3, #28
 8003ef6:	d52f      	bpl.n	8003f58 <__swbuf_r+0x84>
 8003ef8:	6923      	ldr	r3, [r4, #16]
 8003efa:	b36b      	cbz	r3, 8003f58 <__swbuf_r+0x84>
 8003efc:	6923      	ldr	r3, [r4, #16]
 8003efe:	6820      	ldr	r0, [r4, #0]
 8003f00:	1ac0      	subs	r0, r0, r3
 8003f02:	6963      	ldr	r3, [r4, #20]
 8003f04:	b2f6      	uxtb	r6, r6
 8003f06:	4283      	cmp	r3, r0
 8003f08:	4637      	mov	r7, r6
 8003f0a:	dc04      	bgt.n	8003f16 <__swbuf_r+0x42>
 8003f0c:	4621      	mov	r1, r4
 8003f0e:	4628      	mov	r0, r5
 8003f10:	f000 f926 	bl	8004160 <_fflush_r>
 8003f14:	bb30      	cbnz	r0, 8003f64 <__swbuf_r+0x90>
 8003f16:	68a3      	ldr	r3, [r4, #8]
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	60a3      	str	r3, [r4, #8]
 8003f1c:	6823      	ldr	r3, [r4, #0]
 8003f1e:	1c5a      	adds	r2, r3, #1
 8003f20:	6022      	str	r2, [r4, #0]
 8003f22:	701e      	strb	r6, [r3, #0]
 8003f24:	6963      	ldr	r3, [r4, #20]
 8003f26:	3001      	adds	r0, #1
 8003f28:	4283      	cmp	r3, r0
 8003f2a:	d004      	beq.n	8003f36 <__swbuf_r+0x62>
 8003f2c:	89a3      	ldrh	r3, [r4, #12]
 8003f2e:	07db      	lsls	r3, r3, #31
 8003f30:	d506      	bpl.n	8003f40 <__swbuf_r+0x6c>
 8003f32:	2e0a      	cmp	r6, #10
 8003f34:	d104      	bne.n	8003f40 <__swbuf_r+0x6c>
 8003f36:	4621      	mov	r1, r4
 8003f38:	4628      	mov	r0, r5
 8003f3a:	f000 f911 	bl	8004160 <_fflush_r>
 8003f3e:	b988      	cbnz	r0, 8003f64 <__swbuf_r+0x90>
 8003f40:	4638      	mov	r0, r7
 8003f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f44:	4b0a      	ldr	r3, [pc, #40]	; (8003f70 <__swbuf_r+0x9c>)
 8003f46:	429c      	cmp	r4, r3
 8003f48:	d101      	bne.n	8003f4e <__swbuf_r+0x7a>
 8003f4a:	68ac      	ldr	r4, [r5, #8]
 8003f4c:	e7cf      	b.n	8003eee <__swbuf_r+0x1a>
 8003f4e:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <__swbuf_r+0xa0>)
 8003f50:	429c      	cmp	r4, r3
 8003f52:	bf08      	it	eq
 8003f54:	68ec      	ldreq	r4, [r5, #12]
 8003f56:	e7ca      	b.n	8003eee <__swbuf_r+0x1a>
 8003f58:	4621      	mov	r1, r4
 8003f5a:	4628      	mov	r0, r5
 8003f5c:	f000 f80c 	bl	8003f78 <__swsetup_r>
 8003f60:	2800      	cmp	r0, #0
 8003f62:	d0cb      	beq.n	8003efc <__swbuf_r+0x28>
 8003f64:	f04f 37ff 	mov.w	r7, #4294967295
 8003f68:	e7ea      	b.n	8003f40 <__swbuf_r+0x6c>
 8003f6a:	bf00      	nop
 8003f6c:	08004f50 	.word	0x08004f50
 8003f70:	08004f70 	.word	0x08004f70
 8003f74:	08004f30 	.word	0x08004f30

08003f78 <__swsetup_r>:
 8003f78:	4b32      	ldr	r3, [pc, #200]	; (8004044 <__swsetup_r+0xcc>)
 8003f7a:	b570      	push	{r4, r5, r6, lr}
 8003f7c:	681d      	ldr	r5, [r3, #0]
 8003f7e:	4606      	mov	r6, r0
 8003f80:	460c      	mov	r4, r1
 8003f82:	b125      	cbz	r5, 8003f8e <__swsetup_r+0x16>
 8003f84:	69ab      	ldr	r3, [r5, #24]
 8003f86:	b913      	cbnz	r3, 8003f8e <__swsetup_r+0x16>
 8003f88:	4628      	mov	r0, r5
 8003f8a:	f000 f97d 	bl	8004288 <__sinit>
 8003f8e:	4b2e      	ldr	r3, [pc, #184]	; (8004048 <__swsetup_r+0xd0>)
 8003f90:	429c      	cmp	r4, r3
 8003f92:	d10f      	bne.n	8003fb4 <__swsetup_r+0x3c>
 8003f94:	686c      	ldr	r4, [r5, #4]
 8003f96:	89a3      	ldrh	r3, [r4, #12]
 8003f98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f9c:	0719      	lsls	r1, r3, #28
 8003f9e:	d42c      	bmi.n	8003ffa <__swsetup_r+0x82>
 8003fa0:	06dd      	lsls	r5, r3, #27
 8003fa2:	d411      	bmi.n	8003fc8 <__swsetup_r+0x50>
 8003fa4:	2309      	movs	r3, #9
 8003fa6:	6033      	str	r3, [r6, #0]
 8003fa8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003fac:	81a3      	strh	r3, [r4, #12]
 8003fae:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb2:	e03e      	b.n	8004032 <__swsetup_r+0xba>
 8003fb4:	4b25      	ldr	r3, [pc, #148]	; (800404c <__swsetup_r+0xd4>)
 8003fb6:	429c      	cmp	r4, r3
 8003fb8:	d101      	bne.n	8003fbe <__swsetup_r+0x46>
 8003fba:	68ac      	ldr	r4, [r5, #8]
 8003fbc:	e7eb      	b.n	8003f96 <__swsetup_r+0x1e>
 8003fbe:	4b24      	ldr	r3, [pc, #144]	; (8004050 <__swsetup_r+0xd8>)
 8003fc0:	429c      	cmp	r4, r3
 8003fc2:	bf08      	it	eq
 8003fc4:	68ec      	ldreq	r4, [r5, #12]
 8003fc6:	e7e6      	b.n	8003f96 <__swsetup_r+0x1e>
 8003fc8:	0758      	lsls	r0, r3, #29
 8003fca:	d512      	bpl.n	8003ff2 <__swsetup_r+0x7a>
 8003fcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fce:	b141      	cbz	r1, 8003fe2 <__swsetup_r+0x6a>
 8003fd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fd4:	4299      	cmp	r1, r3
 8003fd6:	d002      	beq.n	8003fde <__swsetup_r+0x66>
 8003fd8:	4630      	mov	r0, r6
 8003fda:	f000 fa5b 	bl	8004494 <_free_r>
 8003fde:	2300      	movs	r3, #0
 8003fe0:	6363      	str	r3, [r4, #52]	; 0x34
 8003fe2:	89a3      	ldrh	r3, [r4, #12]
 8003fe4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003fe8:	81a3      	strh	r3, [r4, #12]
 8003fea:	2300      	movs	r3, #0
 8003fec:	6063      	str	r3, [r4, #4]
 8003fee:	6923      	ldr	r3, [r4, #16]
 8003ff0:	6023      	str	r3, [r4, #0]
 8003ff2:	89a3      	ldrh	r3, [r4, #12]
 8003ff4:	f043 0308 	orr.w	r3, r3, #8
 8003ff8:	81a3      	strh	r3, [r4, #12]
 8003ffa:	6923      	ldr	r3, [r4, #16]
 8003ffc:	b94b      	cbnz	r3, 8004012 <__swsetup_r+0x9a>
 8003ffe:	89a3      	ldrh	r3, [r4, #12]
 8004000:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004008:	d003      	beq.n	8004012 <__swsetup_r+0x9a>
 800400a:	4621      	mov	r1, r4
 800400c:	4630      	mov	r0, r6
 800400e:	f000 fa01 	bl	8004414 <__smakebuf_r>
 8004012:	89a0      	ldrh	r0, [r4, #12]
 8004014:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004018:	f010 0301 	ands.w	r3, r0, #1
 800401c:	d00a      	beq.n	8004034 <__swsetup_r+0xbc>
 800401e:	2300      	movs	r3, #0
 8004020:	60a3      	str	r3, [r4, #8]
 8004022:	6963      	ldr	r3, [r4, #20]
 8004024:	425b      	negs	r3, r3
 8004026:	61a3      	str	r3, [r4, #24]
 8004028:	6923      	ldr	r3, [r4, #16]
 800402a:	b943      	cbnz	r3, 800403e <__swsetup_r+0xc6>
 800402c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004030:	d1ba      	bne.n	8003fa8 <__swsetup_r+0x30>
 8004032:	bd70      	pop	{r4, r5, r6, pc}
 8004034:	0781      	lsls	r1, r0, #30
 8004036:	bf58      	it	pl
 8004038:	6963      	ldrpl	r3, [r4, #20]
 800403a:	60a3      	str	r3, [r4, #8]
 800403c:	e7f4      	b.n	8004028 <__swsetup_r+0xb0>
 800403e:	2000      	movs	r0, #0
 8004040:	e7f7      	b.n	8004032 <__swsetup_r+0xba>
 8004042:	bf00      	nop
 8004044:	20000018 	.word	0x20000018
 8004048:	08004f50 	.word	0x08004f50
 800404c:	08004f70 	.word	0x08004f70
 8004050:	08004f30 	.word	0x08004f30

08004054 <__sflush_r>:
 8004054:	898a      	ldrh	r2, [r1, #12]
 8004056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800405a:	4605      	mov	r5, r0
 800405c:	0710      	lsls	r0, r2, #28
 800405e:	460c      	mov	r4, r1
 8004060:	d458      	bmi.n	8004114 <__sflush_r+0xc0>
 8004062:	684b      	ldr	r3, [r1, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	dc05      	bgt.n	8004074 <__sflush_r+0x20>
 8004068:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800406a:	2b00      	cmp	r3, #0
 800406c:	dc02      	bgt.n	8004074 <__sflush_r+0x20>
 800406e:	2000      	movs	r0, #0
 8004070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004074:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004076:	2e00      	cmp	r6, #0
 8004078:	d0f9      	beq.n	800406e <__sflush_r+0x1a>
 800407a:	2300      	movs	r3, #0
 800407c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004080:	682f      	ldr	r7, [r5, #0]
 8004082:	602b      	str	r3, [r5, #0]
 8004084:	d032      	beq.n	80040ec <__sflush_r+0x98>
 8004086:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004088:	89a3      	ldrh	r3, [r4, #12]
 800408a:	075a      	lsls	r2, r3, #29
 800408c:	d505      	bpl.n	800409a <__sflush_r+0x46>
 800408e:	6863      	ldr	r3, [r4, #4]
 8004090:	1ac0      	subs	r0, r0, r3
 8004092:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004094:	b10b      	cbz	r3, 800409a <__sflush_r+0x46>
 8004096:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004098:	1ac0      	subs	r0, r0, r3
 800409a:	2300      	movs	r3, #0
 800409c:	4602      	mov	r2, r0
 800409e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040a0:	6a21      	ldr	r1, [r4, #32]
 80040a2:	4628      	mov	r0, r5
 80040a4:	47b0      	blx	r6
 80040a6:	1c43      	adds	r3, r0, #1
 80040a8:	89a3      	ldrh	r3, [r4, #12]
 80040aa:	d106      	bne.n	80040ba <__sflush_r+0x66>
 80040ac:	6829      	ldr	r1, [r5, #0]
 80040ae:	291d      	cmp	r1, #29
 80040b0:	d82c      	bhi.n	800410c <__sflush_r+0xb8>
 80040b2:	4a2a      	ldr	r2, [pc, #168]	; (800415c <__sflush_r+0x108>)
 80040b4:	40ca      	lsrs	r2, r1
 80040b6:	07d6      	lsls	r6, r2, #31
 80040b8:	d528      	bpl.n	800410c <__sflush_r+0xb8>
 80040ba:	2200      	movs	r2, #0
 80040bc:	6062      	str	r2, [r4, #4]
 80040be:	04d9      	lsls	r1, r3, #19
 80040c0:	6922      	ldr	r2, [r4, #16]
 80040c2:	6022      	str	r2, [r4, #0]
 80040c4:	d504      	bpl.n	80040d0 <__sflush_r+0x7c>
 80040c6:	1c42      	adds	r2, r0, #1
 80040c8:	d101      	bne.n	80040ce <__sflush_r+0x7a>
 80040ca:	682b      	ldr	r3, [r5, #0]
 80040cc:	b903      	cbnz	r3, 80040d0 <__sflush_r+0x7c>
 80040ce:	6560      	str	r0, [r4, #84]	; 0x54
 80040d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040d2:	602f      	str	r7, [r5, #0]
 80040d4:	2900      	cmp	r1, #0
 80040d6:	d0ca      	beq.n	800406e <__sflush_r+0x1a>
 80040d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040dc:	4299      	cmp	r1, r3
 80040de:	d002      	beq.n	80040e6 <__sflush_r+0x92>
 80040e0:	4628      	mov	r0, r5
 80040e2:	f000 f9d7 	bl	8004494 <_free_r>
 80040e6:	2000      	movs	r0, #0
 80040e8:	6360      	str	r0, [r4, #52]	; 0x34
 80040ea:	e7c1      	b.n	8004070 <__sflush_r+0x1c>
 80040ec:	6a21      	ldr	r1, [r4, #32]
 80040ee:	2301      	movs	r3, #1
 80040f0:	4628      	mov	r0, r5
 80040f2:	47b0      	blx	r6
 80040f4:	1c41      	adds	r1, r0, #1
 80040f6:	d1c7      	bne.n	8004088 <__sflush_r+0x34>
 80040f8:	682b      	ldr	r3, [r5, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0c4      	beq.n	8004088 <__sflush_r+0x34>
 80040fe:	2b1d      	cmp	r3, #29
 8004100:	d001      	beq.n	8004106 <__sflush_r+0xb2>
 8004102:	2b16      	cmp	r3, #22
 8004104:	d101      	bne.n	800410a <__sflush_r+0xb6>
 8004106:	602f      	str	r7, [r5, #0]
 8004108:	e7b1      	b.n	800406e <__sflush_r+0x1a>
 800410a:	89a3      	ldrh	r3, [r4, #12]
 800410c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004110:	81a3      	strh	r3, [r4, #12]
 8004112:	e7ad      	b.n	8004070 <__sflush_r+0x1c>
 8004114:	690f      	ldr	r7, [r1, #16]
 8004116:	2f00      	cmp	r7, #0
 8004118:	d0a9      	beq.n	800406e <__sflush_r+0x1a>
 800411a:	0793      	lsls	r3, r2, #30
 800411c:	680e      	ldr	r6, [r1, #0]
 800411e:	bf08      	it	eq
 8004120:	694b      	ldreq	r3, [r1, #20]
 8004122:	600f      	str	r7, [r1, #0]
 8004124:	bf18      	it	ne
 8004126:	2300      	movne	r3, #0
 8004128:	eba6 0807 	sub.w	r8, r6, r7
 800412c:	608b      	str	r3, [r1, #8]
 800412e:	f1b8 0f00 	cmp.w	r8, #0
 8004132:	dd9c      	ble.n	800406e <__sflush_r+0x1a>
 8004134:	6a21      	ldr	r1, [r4, #32]
 8004136:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004138:	4643      	mov	r3, r8
 800413a:	463a      	mov	r2, r7
 800413c:	4628      	mov	r0, r5
 800413e:	47b0      	blx	r6
 8004140:	2800      	cmp	r0, #0
 8004142:	dc06      	bgt.n	8004152 <__sflush_r+0xfe>
 8004144:	89a3      	ldrh	r3, [r4, #12]
 8004146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800414a:	81a3      	strh	r3, [r4, #12]
 800414c:	f04f 30ff 	mov.w	r0, #4294967295
 8004150:	e78e      	b.n	8004070 <__sflush_r+0x1c>
 8004152:	4407      	add	r7, r0
 8004154:	eba8 0800 	sub.w	r8, r8, r0
 8004158:	e7e9      	b.n	800412e <__sflush_r+0xda>
 800415a:	bf00      	nop
 800415c:	20400001 	.word	0x20400001

08004160 <_fflush_r>:
 8004160:	b538      	push	{r3, r4, r5, lr}
 8004162:	690b      	ldr	r3, [r1, #16]
 8004164:	4605      	mov	r5, r0
 8004166:	460c      	mov	r4, r1
 8004168:	b913      	cbnz	r3, 8004170 <_fflush_r+0x10>
 800416a:	2500      	movs	r5, #0
 800416c:	4628      	mov	r0, r5
 800416e:	bd38      	pop	{r3, r4, r5, pc}
 8004170:	b118      	cbz	r0, 800417a <_fflush_r+0x1a>
 8004172:	6983      	ldr	r3, [r0, #24]
 8004174:	b90b      	cbnz	r3, 800417a <_fflush_r+0x1a>
 8004176:	f000 f887 	bl	8004288 <__sinit>
 800417a:	4b14      	ldr	r3, [pc, #80]	; (80041cc <_fflush_r+0x6c>)
 800417c:	429c      	cmp	r4, r3
 800417e:	d11b      	bne.n	80041b8 <_fflush_r+0x58>
 8004180:	686c      	ldr	r4, [r5, #4]
 8004182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d0ef      	beq.n	800416a <_fflush_r+0xa>
 800418a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800418c:	07d0      	lsls	r0, r2, #31
 800418e:	d404      	bmi.n	800419a <_fflush_r+0x3a>
 8004190:	0599      	lsls	r1, r3, #22
 8004192:	d402      	bmi.n	800419a <_fflush_r+0x3a>
 8004194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004196:	f000 f915 	bl	80043c4 <__retarget_lock_acquire_recursive>
 800419a:	4628      	mov	r0, r5
 800419c:	4621      	mov	r1, r4
 800419e:	f7ff ff59 	bl	8004054 <__sflush_r>
 80041a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041a4:	07da      	lsls	r2, r3, #31
 80041a6:	4605      	mov	r5, r0
 80041a8:	d4e0      	bmi.n	800416c <_fflush_r+0xc>
 80041aa:	89a3      	ldrh	r3, [r4, #12]
 80041ac:	059b      	lsls	r3, r3, #22
 80041ae:	d4dd      	bmi.n	800416c <_fflush_r+0xc>
 80041b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041b2:	f000 f908 	bl	80043c6 <__retarget_lock_release_recursive>
 80041b6:	e7d9      	b.n	800416c <_fflush_r+0xc>
 80041b8:	4b05      	ldr	r3, [pc, #20]	; (80041d0 <_fflush_r+0x70>)
 80041ba:	429c      	cmp	r4, r3
 80041bc:	d101      	bne.n	80041c2 <_fflush_r+0x62>
 80041be:	68ac      	ldr	r4, [r5, #8]
 80041c0:	e7df      	b.n	8004182 <_fflush_r+0x22>
 80041c2:	4b04      	ldr	r3, [pc, #16]	; (80041d4 <_fflush_r+0x74>)
 80041c4:	429c      	cmp	r4, r3
 80041c6:	bf08      	it	eq
 80041c8:	68ec      	ldreq	r4, [r5, #12]
 80041ca:	e7da      	b.n	8004182 <_fflush_r+0x22>
 80041cc:	08004f50 	.word	0x08004f50
 80041d0:	08004f70 	.word	0x08004f70
 80041d4:	08004f30 	.word	0x08004f30

080041d8 <std>:
 80041d8:	2300      	movs	r3, #0
 80041da:	b510      	push	{r4, lr}
 80041dc:	4604      	mov	r4, r0
 80041de:	e9c0 3300 	strd	r3, r3, [r0]
 80041e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80041e6:	6083      	str	r3, [r0, #8]
 80041e8:	8181      	strh	r1, [r0, #12]
 80041ea:	6643      	str	r3, [r0, #100]	; 0x64
 80041ec:	81c2      	strh	r2, [r0, #14]
 80041ee:	6183      	str	r3, [r0, #24]
 80041f0:	4619      	mov	r1, r3
 80041f2:	2208      	movs	r2, #8
 80041f4:	305c      	adds	r0, #92	; 0x5c
 80041f6:	f7ff fdd7 	bl	8003da8 <memset>
 80041fa:	4b05      	ldr	r3, [pc, #20]	; (8004210 <std+0x38>)
 80041fc:	6263      	str	r3, [r4, #36]	; 0x24
 80041fe:	4b05      	ldr	r3, [pc, #20]	; (8004214 <std+0x3c>)
 8004200:	62a3      	str	r3, [r4, #40]	; 0x28
 8004202:	4b05      	ldr	r3, [pc, #20]	; (8004218 <std+0x40>)
 8004204:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004206:	4b05      	ldr	r3, [pc, #20]	; (800421c <std+0x44>)
 8004208:	6224      	str	r4, [r4, #32]
 800420a:	6323      	str	r3, [r4, #48]	; 0x30
 800420c:	bd10      	pop	{r4, pc}
 800420e:	bf00      	nop
 8004210:	08004c51 	.word	0x08004c51
 8004214:	08004c73 	.word	0x08004c73
 8004218:	08004cab 	.word	0x08004cab
 800421c:	08004ccf 	.word	0x08004ccf

08004220 <_cleanup_r>:
 8004220:	4901      	ldr	r1, [pc, #4]	; (8004228 <_cleanup_r+0x8>)
 8004222:	f000 b8af 	b.w	8004384 <_fwalk_reent>
 8004226:	bf00      	nop
 8004228:	08004161 	.word	0x08004161

0800422c <__sfmoreglue>:
 800422c:	b570      	push	{r4, r5, r6, lr}
 800422e:	2268      	movs	r2, #104	; 0x68
 8004230:	1e4d      	subs	r5, r1, #1
 8004232:	4355      	muls	r5, r2
 8004234:	460e      	mov	r6, r1
 8004236:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800423a:	f000 f997 	bl	800456c <_malloc_r>
 800423e:	4604      	mov	r4, r0
 8004240:	b140      	cbz	r0, 8004254 <__sfmoreglue+0x28>
 8004242:	2100      	movs	r1, #0
 8004244:	e9c0 1600 	strd	r1, r6, [r0]
 8004248:	300c      	adds	r0, #12
 800424a:	60a0      	str	r0, [r4, #8]
 800424c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004250:	f7ff fdaa 	bl	8003da8 <memset>
 8004254:	4620      	mov	r0, r4
 8004256:	bd70      	pop	{r4, r5, r6, pc}

08004258 <__sfp_lock_acquire>:
 8004258:	4801      	ldr	r0, [pc, #4]	; (8004260 <__sfp_lock_acquire+0x8>)
 800425a:	f000 b8b3 	b.w	80043c4 <__retarget_lock_acquire_recursive>
 800425e:	bf00      	nop
 8004260:	20000185 	.word	0x20000185

08004264 <__sfp_lock_release>:
 8004264:	4801      	ldr	r0, [pc, #4]	; (800426c <__sfp_lock_release+0x8>)
 8004266:	f000 b8ae 	b.w	80043c6 <__retarget_lock_release_recursive>
 800426a:	bf00      	nop
 800426c:	20000185 	.word	0x20000185

08004270 <__sinit_lock_acquire>:
 8004270:	4801      	ldr	r0, [pc, #4]	; (8004278 <__sinit_lock_acquire+0x8>)
 8004272:	f000 b8a7 	b.w	80043c4 <__retarget_lock_acquire_recursive>
 8004276:	bf00      	nop
 8004278:	20000186 	.word	0x20000186

0800427c <__sinit_lock_release>:
 800427c:	4801      	ldr	r0, [pc, #4]	; (8004284 <__sinit_lock_release+0x8>)
 800427e:	f000 b8a2 	b.w	80043c6 <__retarget_lock_release_recursive>
 8004282:	bf00      	nop
 8004284:	20000186 	.word	0x20000186

08004288 <__sinit>:
 8004288:	b510      	push	{r4, lr}
 800428a:	4604      	mov	r4, r0
 800428c:	f7ff fff0 	bl	8004270 <__sinit_lock_acquire>
 8004290:	69a3      	ldr	r3, [r4, #24]
 8004292:	b11b      	cbz	r3, 800429c <__sinit+0x14>
 8004294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004298:	f7ff bff0 	b.w	800427c <__sinit_lock_release>
 800429c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80042a0:	6523      	str	r3, [r4, #80]	; 0x50
 80042a2:	4b13      	ldr	r3, [pc, #76]	; (80042f0 <__sinit+0x68>)
 80042a4:	4a13      	ldr	r2, [pc, #76]	; (80042f4 <__sinit+0x6c>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80042aa:	42a3      	cmp	r3, r4
 80042ac:	bf04      	itt	eq
 80042ae:	2301      	moveq	r3, #1
 80042b0:	61a3      	streq	r3, [r4, #24]
 80042b2:	4620      	mov	r0, r4
 80042b4:	f000 f820 	bl	80042f8 <__sfp>
 80042b8:	6060      	str	r0, [r4, #4]
 80042ba:	4620      	mov	r0, r4
 80042bc:	f000 f81c 	bl	80042f8 <__sfp>
 80042c0:	60a0      	str	r0, [r4, #8]
 80042c2:	4620      	mov	r0, r4
 80042c4:	f000 f818 	bl	80042f8 <__sfp>
 80042c8:	2200      	movs	r2, #0
 80042ca:	60e0      	str	r0, [r4, #12]
 80042cc:	2104      	movs	r1, #4
 80042ce:	6860      	ldr	r0, [r4, #4]
 80042d0:	f7ff ff82 	bl	80041d8 <std>
 80042d4:	68a0      	ldr	r0, [r4, #8]
 80042d6:	2201      	movs	r2, #1
 80042d8:	2109      	movs	r1, #9
 80042da:	f7ff ff7d 	bl	80041d8 <std>
 80042de:	68e0      	ldr	r0, [r4, #12]
 80042e0:	2202      	movs	r2, #2
 80042e2:	2112      	movs	r1, #18
 80042e4:	f7ff ff78 	bl	80041d8 <std>
 80042e8:	2301      	movs	r3, #1
 80042ea:	61a3      	str	r3, [r4, #24]
 80042ec:	e7d2      	b.n	8004294 <__sinit+0xc>
 80042ee:	bf00      	nop
 80042f0:	08004f2c 	.word	0x08004f2c
 80042f4:	08004221 	.word	0x08004221

080042f8 <__sfp>:
 80042f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042fa:	4607      	mov	r7, r0
 80042fc:	f7ff ffac 	bl	8004258 <__sfp_lock_acquire>
 8004300:	4b1e      	ldr	r3, [pc, #120]	; (800437c <__sfp+0x84>)
 8004302:	681e      	ldr	r6, [r3, #0]
 8004304:	69b3      	ldr	r3, [r6, #24]
 8004306:	b913      	cbnz	r3, 800430e <__sfp+0x16>
 8004308:	4630      	mov	r0, r6
 800430a:	f7ff ffbd 	bl	8004288 <__sinit>
 800430e:	3648      	adds	r6, #72	; 0x48
 8004310:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004314:	3b01      	subs	r3, #1
 8004316:	d503      	bpl.n	8004320 <__sfp+0x28>
 8004318:	6833      	ldr	r3, [r6, #0]
 800431a:	b30b      	cbz	r3, 8004360 <__sfp+0x68>
 800431c:	6836      	ldr	r6, [r6, #0]
 800431e:	e7f7      	b.n	8004310 <__sfp+0x18>
 8004320:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004324:	b9d5      	cbnz	r5, 800435c <__sfp+0x64>
 8004326:	4b16      	ldr	r3, [pc, #88]	; (8004380 <__sfp+0x88>)
 8004328:	60e3      	str	r3, [r4, #12]
 800432a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800432e:	6665      	str	r5, [r4, #100]	; 0x64
 8004330:	f000 f847 	bl	80043c2 <__retarget_lock_init_recursive>
 8004334:	f7ff ff96 	bl	8004264 <__sfp_lock_release>
 8004338:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800433c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004340:	6025      	str	r5, [r4, #0]
 8004342:	61a5      	str	r5, [r4, #24]
 8004344:	2208      	movs	r2, #8
 8004346:	4629      	mov	r1, r5
 8004348:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800434c:	f7ff fd2c 	bl	8003da8 <memset>
 8004350:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004354:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004358:	4620      	mov	r0, r4
 800435a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800435c:	3468      	adds	r4, #104	; 0x68
 800435e:	e7d9      	b.n	8004314 <__sfp+0x1c>
 8004360:	2104      	movs	r1, #4
 8004362:	4638      	mov	r0, r7
 8004364:	f7ff ff62 	bl	800422c <__sfmoreglue>
 8004368:	4604      	mov	r4, r0
 800436a:	6030      	str	r0, [r6, #0]
 800436c:	2800      	cmp	r0, #0
 800436e:	d1d5      	bne.n	800431c <__sfp+0x24>
 8004370:	f7ff ff78 	bl	8004264 <__sfp_lock_release>
 8004374:	230c      	movs	r3, #12
 8004376:	603b      	str	r3, [r7, #0]
 8004378:	e7ee      	b.n	8004358 <__sfp+0x60>
 800437a:	bf00      	nop
 800437c:	08004f2c 	.word	0x08004f2c
 8004380:	ffff0001 	.word	0xffff0001

08004384 <_fwalk_reent>:
 8004384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004388:	4606      	mov	r6, r0
 800438a:	4688      	mov	r8, r1
 800438c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004390:	2700      	movs	r7, #0
 8004392:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004396:	f1b9 0901 	subs.w	r9, r9, #1
 800439a:	d505      	bpl.n	80043a8 <_fwalk_reent+0x24>
 800439c:	6824      	ldr	r4, [r4, #0]
 800439e:	2c00      	cmp	r4, #0
 80043a0:	d1f7      	bne.n	8004392 <_fwalk_reent+0xe>
 80043a2:	4638      	mov	r0, r7
 80043a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043a8:	89ab      	ldrh	r3, [r5, #12]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d907      	bls.n	80043be <_fwalk_reent+0x3a>
 80043ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80043b2:	3301      	adds	r3, #1
 80043b4:	d003      	beq.n	80043be <_fwalk_reent+0x3a>
 80043b6:	4629      	mov	r1, r5
 80043b8:	4630      	mov	r0, r6
 80043ba:	47c0      	blx	r8
 80043bc:	4307      	orrs	r7, r0
 80043be:	3568      	adds	r5, #104	; 0x68
 80043c0:	e7e9      	b.n	8004396 <_fwalk_reent+0x12>

080043c2 <__retarget_lock_init_recursive>:
 80043c2:	4770      	bx	lr

080043c4 <__retarget_lock_acquire_recursive>:
 80043c4:	4770      	bx	lr

080043c6 <__retarget_lock_release_recursive>:
 80043c6:	4770      	bx	lr

080043c8 <__swhatbuf_r>:
 80043c8:	b570      	push	{r4, r5, r6, lr}
 80043ca:	460e      	mov	r6, r1
 80043cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043d0:	2900      	cmp	r1, #0
 80043d2:	b096      	sub	sp, #88	; 0x58
 80043d4:	4614      	mov	r4, r2
 80043d6:	461d      	mov	r5, r3
 80043d8:	da08      	bge.n	80043ec <__swhatbuf_r+0x24>
 80043da:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	602a      	str	r2, [r5, #0]
 80043e2:	061a      	lsls	r2, r3, #24
 80043e4:	d410      	bmi.n	8004408 <__swhatbuf_r+0x40>
 80043e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043ea:	e00e      	b.n	800440a <__swhatbuf_r+0x42>
 80043ec:	466a      	mov	r2, sp
 80043ee:	f000 fc95 	bl	8004d1c <_fstat_r>
 80043f2:	2800      	cmp	r0, #0
 80043f4:	dbf1      	blt.n	80043da <__swhatbuf_r+0x12>
 80043f6:	9a01      	ldr	r2, [sp, #4]
 80043f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80043fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004400:	425a      	negs	r2, r3
 8004402:	415a      	adcs	r2, r3
 8004404:	602a      	str	r2, [r5, #0]
 8004406:	e7ee      	b.n	80043e6 <__swhatbuf_r+0x1e>
 8004408:	2340      	movs	r3, #64	; 0x40
 800440a:	2000      	movs	r0, #0
 800440c:	6023      	str	r3, [r4, #0]
 800440e:	b016      	add	sp, #88	; 0x58
 8004410:	bd70      	pop	{r4, r5, r6, pc}
	...

08004414 <__smakebuf_r>:
 8004414:	898b      	ldrh	r3, [r1, #12]
 8004416:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004418:	079d      	lsls	r5, r3, #30
 800441a:	4606      	mov	r6, r0
 800441c:	460c      	mov	r4, r1
 800441e:	d507      	bpl.n	8004430 <__smakebuf_r+0x1c>
 8004420:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004424:	6023      	str	r3, [r4, #0]
 8004426:	6123      	str	r3, [r4, #16]
 8004428:	2301      	movs	r3, #1
 800442a:	6163      	str	r3, [r4, #20]
 800442c:	b002      	add	sp, #8
 800442e:	bd70      	pop	{r4, r5, r6, pc}
 8004430:	ab01      	add	r3, sp, #4
 8004432:	466a      	mov	r2, sp
 8004434:	f7ff ffc8 	bl	80043c8 <__swhatbuf_r>
 8004438:	9900      	ldr	r1, [sp, #0]
 800443a:	4605      	mov	r5, r0
 800443c:	4630      	mov	r0, r6
 800443e:	f000 f895 	bl	800456c <_malloc_r>
 8004442:	b948      	cbnz	r0, 8004458 <__smakebuf_r+0x44>
 8004444:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004448:	059a      	lsls	r2, r3, #22
 800444a:	d4ef      	bmi.n	800442c <__smakebuf_r+0x18>
 800444c:	f023 0303 	bic.w	r3, r3, #3
 8004450:	f043 0302 	orr.w	r3, r3, #2
 8004454:	81a3      	strh	r3, [r4, #12]
 8004456:	e7e3      	b.n	8004420 <__smakebuf_r+0xc>
 8004458:	4b0d      	ldr	r3, [pc, #52]	; (8004490 <__smakebuf_r+0x7c>)
 800445a:	62b3      	str	r3, [r6, #40]	; 0x28
 800445c:	89a3      	ldrh	r3, [r4, #12]
 800445e:	6020      	str	r0, [r4, #0]
 8004460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004464:	81a3      	strh	r3, [r4, #12]
 8004466:	9b00      	ldr	r3, [sp, #0]
 8004468:	6163      	str	r3, [r4, #20]
 800446a:	9b01      	ldr	r3, [sp, #4]
 800446c:	6120      	str	r0, [r4, #16]
 800446e:	b15b      	cbz	r3, 8004488 <__smakebuf_r+0x74>
 8004470:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004474:	4630      	mov	r0, r6
 8004476:	f000 fc63 	bl	8004d40 <_isatty_r>
 800447a:	b128      	cbz	r0, 8004488 <__smakebuf_r+0x74>
 800447c:	89a3      	ldrh	r3, [r4, #12]
 800447e:	f023 0303 	bic.w	r3, r3, #3
 8004482:	f043 0301 	orr.w	r3, r3, #1
 8004486:	81a3      	strh	r3, [r4, #12]
 8004488:	89a0      	ldrh	r0, [r4, #12]
 800448a:	4305      	orrs	r5, r0
 800448c:	81a5      	strh	r5, [r4, #12]
 800448e:	e7cd      	b.n	800442c <__smakebuf_r+0x18>
 8004490:	08004221 	.word	0x08004221

08004494 <_free_r>:
 8004494:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004496:	2900      	cmp	r1, #0
 8004498:	d044      	beq.n	8004524 <_free_r+0x90>
 800449a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800449e:	9001      	str	r0, [sp, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f1a1 0404 	sub.w	r4, r1, #4
 80044a6:	bfb8      	it	lt
 80044a8:	18e4      	addlt	r4, r4, r3
 80044aa:	f000 fc6b 	bl	8004d84 <__malloc_lock>
 80044ae:	4a1e      	ldr	r2, [pc, #120]	; (8004528 <_free_r+0x94>)
 80044b0:	9801      	ldr	r0, [sp, #4]
 80044b2:	6813      	ldr	r3, [r2, #0]
 80044b4:	b933      	cbnz	r3, 80044c4 <_free_r+0x30>
 80044b6:	6063      	str	r3, [r4, #4]
 80044b8:	6014      	str	r4, [r2, #0]
 80044ba:	b003      	add	sp, #12
 80044bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044c0:	f000 bc66 	b.w	8004d90 <__malloc_unlock>
 80044c4:	42a3      	cmp	r3, r4
 80044c6:	d908      	bls.n	80044da <_free_r+0x46>
 80044c8:	6825      	ldr	r5, [r4, #0]
 80044ca:	1961      	adds	r1, r4, r5
 80044cc:	428b      	cmp	r3, r1
 80044ce:	bf01      	itttt	eq
 80044d0:	6819      	ldreq	r1, [r3, #0]
 80044d2:	685b      	ldreq	r3, [r3, #4]
 80044d4:	1949      	addeq	r1, r1, r5
 80044d6:	6021      	streq	r1, [r4, #0]
 80044d8:	e7ed      	b.n	80044b6 <_free_r+0x22>
 80044da:	461a      	mov	r2, r3
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	b10b      	cbz	r3, 80044e4 <_free_r+0x50>
 80044e0:	42a3      	cmp	r3, r4
 80044e2:	d9fa      	bls.n	80044da <_free_r+0x46>
 80044e4:	6811      	ldr	r1, [r2, #0]
 80044e6:	1855      	adds	r5, r2, r1
 80044e8:	42a5      	cmp	r5, r4
 80044ea:	d10b      	bne.n	8004504 <_free_r+0x70>
 80044ec:	6824      	ldr	r4, [r4, #0]
 80044ee:	4421      	add	r1, r4
 80044f0:	1854      	adds	r4, r2, r1
 80044f2:	42a3      	cmp	r3, r4
 80044f4:	6011      	str	r1, [r2, #0]
 80044f6:	d1e0      	bne.n	80044ba <_free_r+0x26>
 80044f8:	681c      	ldr	r4, [r3, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	6053      	str	r3, [r2, #4]
 80044fe:	4421      	add	r1, r4
 8004500:	6011      	str	r1, [r2, #0]
 8004502:	e7da      	b.n	80044ba <_free_r+0x26>
 8004504:	d902      	bls.n	800450c <_free_r+0x78>
 8004506:	230c      	movs	r3, #12
 8004508:	6003      	str	r3, [r0, #0]
 800450a:	e7d6      	b.n	80044ba <_free_r+0x26>
 800450c:	6825      	ldr	r5, [r4, #0]
 800450e:	1961      	adds	r1, r4, r5
 8004510:	428b      	cmp	r3, r1
 8004512:	bf04      	itt	eq
 8004514:	6819      	ldreq	r1, [r3, #0]
 8004516:	685b      	ldreq	r3, [r3, #4]
 8004518:	6063      	str	r3, [r4, #4]
 800451a:	bf04      	itt	eq
 800451c:	1949      	addeq	r1, r1, r5
 800451e:	6021      	streq	r1, [r4, #0]
 8004520:	6054      	str	r4, [r2, #4]
 8004522:	e7ca      	b.n	80044ba <_free_r+0x26>
 8004524:	b003      	add	sp, #12
 8004526:	bd30      	pop	{r4, r5, pc}
 8004528:	20000188 	.word	0x20000188

0800452c <sbrk_aligned>:
 800452c:	b570      	push	{r4, r5, r6, lr}
 800452e:	4e0e      	ldr	r6, [pc, #56]	; (8004568 <sbrk_aligned+0x3c>)
 8004530:	460c      	mov	r4, r1
 8004532:	6831      	ldr	r1, [r6, #0]
 8004534:	4605      	mov	r5, r0
 8004536:	b911      	cbnz	r1, 800453e <sbrk_aligned+0x12>
 8004538:	f000 fb7a 	bl	8004c30 <_sbrk_r>
 800453c:	6030      	str	r0, [r6, #0]
 800453e:	4621      	mov	r1, r4
 8004540:	4628      	mov	r0, r5
 8004542:	f000 fb75 	bl	8004c30 <_sbrk_r>
 8004546:	1c43      	adds	r3, r0, #1
 8004548:	d00a      	beq.n	8004560 <sbrk_aligned+0x34>
 800454a:	1cc4      	adds	r4, r0, #3
 800454c:	f024 0403 	bic.w	r4, r4, #3
 8004550:	42a0      	cmp	r0, r4
 8004552:	d007      	beq.n	8004564 <sbrk_aligned+0x38>
 8004554:	1a21      	subs	r1, r4, r0
 8004556:	4628      	mov	r0, r5
 8004558:	f000 fb6a 	bl	8004c30 <_sbrk_r>
 800455c:	3001      	adds	r0, #1
 800455e:	d101      	bne.n	8004564 <sbrk_aligned+0x38>
 8004560:	f04f 34ff 	mov.w	r4, #4294967295
 8004564:	4620      	mov	r0, r4
 8004566:	bd70      	pop	{r4, r5, r6, pc}
 8004568:	2000018c 	.word	0x2000018c

0800456c <_malloc_r>:
 800456c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004570:	1ccd      	adds	r5, r1, #3
 8004572:	f025 0503 	bic.w	r5, r5, #3
 8004576:	3508      	adds	r5, #8
 8004578:	2d0c      	cmp	r5, #12
 800457a:	bf38      	it	cc
 800457c:	250c      	movcc	r5, #12
 800457e:	2d00      	cmp	r5, #0
 8004580:	4607      	mov	r7, r0
 8004582:	db01      	blt.n	8004588 <_malloc_r+0x1c>
 8004584:	42a9      	cmp	r1, r5
 8004586:	d905      	bls.n	8004594 <_malloc_r+0x28>
 8004588:	230c      	movs	r3, #12
 800458a:	603b      	str	r3, [r7, #0]
 800458c:	2600      	movs	r6, #0
 800458e:	4630      	mov	r0, r6
 8004590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004594:	4e2e      	ldr	r6, [pc, #184]	; (8004650 <_malloc_r+0xe4>)
 8004596:	f000 fbf5 	bl	8004d84 <__malloc_lock>
 800459a:	6833      	ldr	r3, [r6, #0]
 800459c:	461c      	mov	r4, r3
 800459e:	bb34      	cbnz	r4, 80045ee <_malloc_r+0x82>
 80045a0:	4629      	mov	r1, r5
 80045a2:	4638      	mov	r0, r7
 80045a4:	f7ff ffc2 	bl	800452c <sbrk_aligned>
 80045a8:	1c43      	adds	r3, r0, #1
 80045aa:	4604      	mov	r4, r0
 80045ac:	d14d      	bne.n	800464a <_malloc_r+0xde>
 80045ae:	6834      	ldr	r4, [r6, #0]
 80045b0:	4626      	mov	r6, r4
 80045b2:	2e00      	cmp	r6, #0
 80045b4:	d140      	bne.n	8004638 <_malloc_r+0xcc>
 80045b6:	6823      	ldr	r3, [r4, #0]
 80045b8:	4631      	mov	r1, r6
 80045ba:	4638      	mov	r0, r7
 80045bc:	eb04 0803 	add.w	r8, r4, r3
 80045c0:	f000 fb36 	bl	8004c30 <_sbrk_r>
 80045c4:	4580      	cmp	r8, r0
 80045c6:	d13a      	bne.n	800463e <_malloc_r+0xd2>
 80045c8:	6821      	ldr	r1, [r4, #0]
 80045ca:	3503      	adds	r5, #3
 80045cc:	1a6d      	subs	r5, r5, r1
 80045ce:	f025 0503 	bic.w	r5, r5, #3
 80045d2:	3508      	adds	r5, #8
 80045d4:	2d0c      	cmp	r5, #12
 80045d6:	bf38      	it	cc
 80045d8:	250c      	movcc	r5, #12
 80045da:	4629      	mov	r1, r5
 80045dc:	4638      	mov	r0, r7
 80045de:	f7ff ffa5 	bl	800452c <sbrk_aligned>
 80045e2:	3001      	adds	r0, #1
 80045e4:	d02b      	beq.n	800463e <_malloc_r+0xd2>
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	442b      	add	r3, r5
 80045ea:	6023      	str	r3, [r4, #0]
 80045ec:	e00e      	b.n	800460c <_malloc_r+0xa0>
 80045ee:	6822      	ldr	r2, [r4, #0]
 80045f0:	1b52      	subs	r2, r2, r5
 80045f2:	d41e      	bmi.n	8004632 <_malloc_r+0xc6>
 80045f4:	2a0b      	cmp	r2, #11
 80045f6:	d916      	bls.n	8004626 <_malloc_r+0xba>
 80045f8:	1961      	adds	r1, r4, r5
 80045fa:	42a3      	cmp	r3, r4
 80045fc:	6025      	str	r5, [r4, #0]
 80045fe:	bf18      	it	ne
 8004600:	6059      	strne	r1, [r3, #4]
 8004602:	6863      	ldr	r3, [r4, #4]
 8004604:	bf08      	it	eq
 8004606:	6031      	streq	r1, [r6, #0]
 8004608:	5162      	str	r2, [r4, r5]
 800460a:	604b      	str	r3, [r1, #4]
 800460c:	4638      	mov	r0, r7
 800460e:	f104 060b 	add.w	r6, r4, #11
 8004612:	f000 fbbd 	bl	8004d90 <__malloc_unlock>
 8004616:	f026 0607 	bic.w	r6, r6, #7
 800461a:	1d23      	adds	r3, r4, #4
 800461c:	1af2      	subs	r2, r6, r3
 800461e:	d0b6      	beq.n	800458e <_malloc_r+0x22>
 8004620:	1b9b      	subs	r3, r3, r6
 8004622:	50a3      	str	r3, [r4, r2]
 8004624:	e7b3      	b.n	800458e <_malloc_r+0x22>
 8004626:	6862      	ldr	r2, [r4, #4]
 8004628:	42a3      	cmp	r3, r4
 800462a:	bf0c      	ite	eq
 800462c:	6032      	streq	r2, [r6, #0]
 800462e:	605a      	strne	r2, [r3, #4]
 8004630:	e7ec      	b.n	800460c <_malloc_r+0xa0>
 8004632:	4623      	mov	r3, r4
 8004634:	6864      	ldr	r4, [r4, #4]
 8004636:	e7b2      	b.n	800459e <_malloc_r+0x32>
 8004638:	4634      	mov	r4, r6
 800463a:	6876      	ldr	r6, [r6, #4]
 800463c:	e7b9      	b.n	80045b2 <_malloc_r+0x46>
 800463e:	230c      	movs	r3, #12
 8004640:	603b      	str	r3, [r7, #0]
 8004642:	4638      	mov	r0, r7
 8004644:	f000 fba4 	bl	8004d90 <__malloc_unlock>
 8004648:	e7a1      	b.n	800458e <_malloc_r+0x22>
 800464a:	6025      	str	r5, [r4, #0]
 800464c:	e7de      	b.n	800460c <_malloc_r+0xa0>
 800464e:	bf00      	nop
 8004650:	20000188 	.word	0x20000188

08004654 <__sfputc_r>:
 8004654:	6893      	ldr	r3, [r2, #8]
 8004656:	3b01      	subs	r3, #1
 8004658:	2b00      	cmp	r3, #0
 800465a:	b410      	push	{r4}
 800465c:	6093      	str	r3, [r2, #8]
 800465e:	da08      	bge.n	8004672 <__sfputc_r+0x1e>
 8004660:	6994      	ldr	r4, [r2, #24]
 8004662:	42a3      	cmp	r3, r4
 8004664:	db01      	blt.n	800466a <__sfputc_r+0x16>
 8004666:	290a      	cmp	r1, #10
 8004668:	d103      	bne.n	8004672 <__sfputc_r+0x1e>
 800466a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800466e:	f7ff bc31 	b.w	8003ed4 <__swbuf_r>
 8004672:	6813      	ldr	r3, [r2, #0]
 8004674:	1c58      	adds	r0, r3, #1
 8004676:	6010      	str	r0, [r2, #0]
 8004678:	7019      	strb	r1, [r3, #0]
 800467a:	4608      	mov	r0, r1
 800467c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004680:	4770      	bx	lr

08004682 <__sfputs_r>:
 8004682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004684:	4606      	mov	r6, r0
 8004686:	460f      	mov	r7, r1
 8004688:	4614      	mov	r4, r2
 800468a:	18d5      	adds	r5, r2, r3
 800468c:	42ac      	cmp	r4, r5
 800468e:	d101      	bne.n	8004694 <__sfputs_r+0x12>
 8004690:	2000      	movs	r0, #0
 8004692:	e007      	b.n	80046a4 <__sfputs_r+0x22>
 8004694:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004698:	463a      	mov	r2, r7
 800469a:	4630      	mov	r0, r6
 800469c:	f7ff ffda 	bl	8004654 <__sfputc_r>
 80046a0:	1c43      	adds	r3, r0, #1
 80046a2:	d1f3      	bne.n	800468c <__sfputs_r+0xa>
 80046a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080046a8 <_vfiprintf_r>:
 80046a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ac:	460d      	mov	r5, r1
 80046ae:	b09d      	sub	sp, #116	; 0x74
 80046b0:	4614      	mov	r4, r2
 80046b2:	4698      	mov	r8, r3
 80046b4:	4606      	mov	r6, r0
 80046b6:	b118      	cbz	r0, 80046c0 <_vfiprintf_r+0x18>
 80046b8:	6983      	ldr	r3, [r0, #24]
 80046ba:	b90b      	cbnz	r3, 80046c0 <_vfiprintf_r+0x18>
 80046bc:	f7ff fde4 	bl	8004288 <__sinit>
 80046c0:	4b89      	ldr	r3, [pc, #548]	; (80048e8 <_vfiprintf_r+0x240>)
 80046c2:	429d      	cmp	r5, r3
 80046c4:	d11b      	bne.n	80046fe <_vfiprintf_r+0x56>
 80046c6:	6875      	ldr	r5, [r6, #4]
 80046c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046ca:	07d9      	lsls	r1, r3, #31
 80046cc:	d405      	bmi.n	80046da <_vfiprintf_r+0x32>
 80046ce:	89ab      	ldrh	r3, [r5, #12]
 80046d0:	059a      	lsls	r2, r3, #22
 80046d2:	d402      	bmi.n	80046da <_vfiprintf_r+0x32>
 80046d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046d6:	f7ff fe75 	bl	80043c4 <__retarget_lock_acquire_recursive>
 80046da:	89ab      	ldrh	r3, [r5, #12]
 80046dc:	071b      	lsls	r3, r3, #28
 80046de:	d501      	bpl.n	80046e4 <_vfiprintf_r+0x3c>
 80046e0:	692b      	ldr	r3, [r5, #16]
 80046e2:	b9eb      	cbnz	r3, 8004720 <_vfiprintf_r+0x78>
 80046e4:	4629      	mov	r1, r5
 80046e6:	4630      	mov	r0, r6
 80046e8:	f7ff fc46 	bl	8003f78 <__swsetup_r>
 80046ec:	b1c0      	cbz	r0, 8004720 <_vfiprintf_r+0x78>
 80046ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046f0:	07dc      	lsls	r4, r3, #31
 80046f2:	d50e      	bpl.n	8004712 <_vfiprintf_r+0x6a>
 80046f4:	f04f 30ff 	mov.w	r0, #4294967295
 80046f8:	b01d      	add	sp, #116	; 0x74
 80046fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046fe:	4b7b      	ldr	r3, [pc, #492]	; (80048ec <_vfiprintf_r+0x244>)
 8004700:	429d      	cmp	r5, r3
 8004702:	d101      	bne.n	8004708 <_vfiprintf_r+0x60>
 8004704:	68b5      	ldr	r5, [r6, #8]
 8004706:	e7df      	b.n	80046c8 <_vfiprintf_r+0x20>
 8004708:	4b79      	ldr	r3, [pc, #484]	; (80048f0 <_vfiprintf_r+0x248>)
 800470a:	429d      	cmp	r5, r3
 800470c:	bf08      	it	eq
 800470e:	68f5      	ldreq	r5, [r6, #12]
 8004710:	e7da      	b.n	80046c8 <_vfiprintf_r+0x20>
 8004712:	89ab      	ldrh	r3, [r5, #12]
 8004714:	0598      	lsls	r0, r3, #22
 8004716:	d4ed      	bmi.n	80046f4 <_vfiprintf_r+0x4c>
 8004718:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800471a:	f7ff fe54 	bl	80043c6 <__retarget_lock_release_recursive>
 800471e:	e7e9      	b.n	80046f4 <_vfiprintf_r+0x4c>
 8004720:	2300      	movs	r3, #0
 8004722:	9309      	str	r3, [sp, #36]	; 0x24
 8004724:	2320      	movs	r3, #32
 8004726:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800472a:	f8cd 800c 	str.w	r8, [sp, #12]
 800472e:	2330      	movs	r3, #48	; 0x30
 8004730:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80048f4 <_vfiprintf_r+0x24c>
 8004734:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004738:	f04f 0901 	mov.w	r9, #1
 800473c:	4623      	mov	r3, r4
 800473e:	469a      	mov	sl, r3
 8004740:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004744:	b10a      	cbz	r2, 800474a <_vfiprintf_r+0xa2>
 8004746:	2a25      	cmp	r2, #37	; 0x25
 8004748:	d1f9      	bne.n	800473e <_vfiprintf_r+0x96>
 800474a:	ebba 0b04 	subs.w	fp, sl, r4
 800474e:	d00b      	beq.n	8004768 <_vfiprintf_r+0xc0>
 8004750:	465b      	mov	r3, fp
 8004752:	4622      	mov	r2, r4
 8004754:	4629      	mov	r1, r5
 8004756:	4630      	mov	r0, r6
 8004758:	f7ff ff93 	bl	8004682 <__sfputs_r>
 800475c:	3001      	adds	r0, #1
 800475e:	f000 80aa 	beq.w	80048b6 <_vfiprintf_r+0x20e>
 8004762:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004764:	445a      	add	r2, fp
 8004766:	9209      	str	r2, [sp, #36]	; 0x24
 8004768:	f89a 3000 	ldrb.w	r3, [sl]
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 80a2 	beq.w	80048b6 <_vfiprintf_r+0x20e>
 8004772:	2300      	movs	r3, #0
 8004774:	f04f 32ff 	mov.w	r2, #4294967295
 8004778:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800477c:	f10a 0a01 	add.w	sl, sl, #1
 8004780:	9304      	str	r3, [sp, #16]
 8004782:	9307      	str	r3, [sp, #28]
 8004784:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004788:	931a      	str	r3, [sp, #104]	; 0x68
 800478a:	4654      	mov	r4, sl
 800478c:	2205      	movs	r2, #5
 800478e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004792:	4858      	ldr	r0, [pc, #352]	; (80048f4 <_vfiprintf_r+0x24c>)
 8004794:	f7fb fd24 	bl	80001e0 <memchr>
 8004798:	9a04      	ldr	r2, [sp, #16]
 800479a:	b9d8      	cbnz	r0, 80047d4 <_vfiprintf_r+0x12c>
 800479c:	06d1      	lsls	r1, r2, #27
 800479e:	bf44      	itt	mi
 80047a0:	2320      	movmi	r3, #32
 80047a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047a6:	0713      	lsls	r3, r2, #28
 80047a8:	bf44      	itt	mi
 80047aa:	232b      	movmi	r3, #43	; 0x2b
 80047ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047b0:	f89a 3000 	ldrb.w	r3, [sl]
 80047b4:	2b2a      	cmp	r3, #42	; 0x2a
 80047b6:	d015      	beq.n	80047e4 <_vfiprintf_r+0x13c>
 80047b8:	9a07      	ldr	r2, [sp, #28]
 80047ba:	4654      	mov	r4, sl
 80047bc:	2000      	movs	r0, #0
 80047be:	f04f 0c0a 	mov.w	ip, #10
 80047c2:	4621      	mov	r1, r4
 80047c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047c8:	3b30      	subs	r3, #48	; 0x30
 80047ca:	2b09      	cmp	r3, #9
 80047cc:	d94e      	bls.n	800486c <_vfiprintf_r+0x1c4>
 80047ce:	b1b0      	cbz	r0, 80047fe <_vfiprintf_r+0x156>
 80047d0:	9207      	str	r2, [sp, #28]
 80047d2:	e014      	b.n	80047fe <_vfiprintf_r+0x156>
 80047d4:	eba0 0308 	sub.w	r3, r0, r8
 80047d8:	fa09 f303 	lsl.w	r3, r9, r3
 80047dc:	4313      	orrs	r3, r2
 80047de:	9304      	str	r3, [sp, #16]
 80047e0:	46a2      	mov	sl, r4
 80047e2:	e7d2      	b.n	800478a <_vfiprintf_r+0xe2>
 80047e4:	9b03      	ldr	r3, [sp, #12]
 80047e6:	1d19      	adds	r1, r3, #4
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	9103      	str	r1, [sp, #12]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	bfbb      	ittet	lt
 80047f0:	425b      	neglt	r3, r3
 80047f2:	f042 0202 	orrlt.w	r2, r2, #2
 80047f6:	9307      	strge	r3, [sp, #28]
 80047f8:	9307      	strlt	r3, [sp, #28]
 80047fa:	bfb8      	it	lt
 80047fc:	9204      	strlt	r2, [sp, #16]
 80047fe:	7823      	ldrb	r3, [r4, #0]
 8004800:	2b2e      	cmp	r3, #46	; 0x2e
 8004802:	d10c      	bne.n	800481e <_vfiprintf_r+0x176>
 8004804:	7863      	ldrb	r3, [r4, #1]
 8004806:	2b2a      	cmp	r3, #42	; 0x2a
 8004808:	d135      	bne.n	8004876 <_vfiprintf_r+0x1ce>
 800480a:	9b03      	ldr	r3, [sp, #12]
 800480c:	1d1a      	adds	r2, r3, #4
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	9203      	str	r2, [sp, #12]
 8004812:	2b00      	cmp	r3, #0
 8004814:	bfb8      	it	lt
 8004816:	f04f 33ff 	movlt.w	r3, #4294967295
 800481a:	3402      	adds	r4, #2
 800481c:	9305      	str	r3, [sp, #20]
 800481e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004904 <_vfiprintf_r+0x25c>
 8004822:	7821      	ldrb	r1, [r4, #0]
 8004824:	2203      	movs	r2, #3
 8004826:	4650      	mov	r0, sl
 8004828:	f7fb fcda 	bl	80001e0 <memchr>
 800482c:	b140      	cbz	r0, 8004840 <_vfiprintf_r+0x198>
 800482e:	2340      	movs	r3, #64	; 0x40
 8004830:	eba0 000a 	sub.w	r0, r0, sl
 8004834:	fa03 f000 	lsl.w	r0, r3, r0
 8004838:	9b04      	ldr	r3, [sp, #16]
 800483a:	4303      	orrs	r3, r0
 800483c:	3401      	adds	r4, #1
 800483e:	9304      	str	r3, [sp, #16]
 8004840:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004844:	482c      	ldr	r0, [pc, #176]	; (80048f8 <_vfiprintf_r+0x250>)
 8004846:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800484a:	2206      	movs	r2, #6
 800484c:	f7fb fcc8 	bl	80001e0 <memchr>
 8004850:	2800      	cmp	r0, #0
 8004852:	d03f      	beq.n	80048d4 <_vfiprintf_r+0x22c>
 8004854:	4b29      	ldr	r3, [pc, #164]	; (80048fc <_vfiprintf_r+0x254>)
 8004856:	bb1b      	cbnz	r3, 80048a0 <_vfiprintf_r+0x1f8>
 8004858:	9b03      	ldr	r3, [sp, #12]
 800485a:	3307      	adds	r3, #7
 800485c:	f023 0307 	bic.w	r3, r3, #7
 8004860:	3308      	adds	r3, #8
 8004862:	9303      	str	r3, [sp, #12]
 8004864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004866:	443b      	add	r3, r7
 8004868:	9309      	str	r3, [sp, #36]	; 0x24
 800486a:	e767      	b.n	800473c <_vfiprintf_r+0x94>
 800486c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004870:	460c      	mov	r4, r1
 8004872:	2001      	movs	r0, #1
 8004874:	e7a5      	b.n	80047c2 <_vfiprintf_r+0x11a>
 8004876:	2300      	movs	r3, #0
 8004878:	3401      	adds	r4, #1
 800487a:	9305      	str	r3, [sp, #20]
 800487c:	4619      	mov	r1, r3
 800487e:	f04f 0c0a 	mov.w	ip, #10
 8004882:	4620      	mov	r0, r4
 8004884:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004888:	3a30      	subs	r2, #48	; 0x30
 800488a:	2a09      	cmp	r2, #9
 800488c:	d903      	bls.n	8004896 <_vfiprintf_r+0x1ee>
 800488e:	2b00      	cmp	r3, #0
 8004890:	d0c5      	beq.n	800481e <_vfiprintf_r+0x176>
 8004892:	9105      	str	r1, [sp, #20]
 8004894:	e7c3      	b.n	800481e <_vfiprintf_r+0x176>
 8004896:	fb0c 2101 	mla	r1, ip, r1, r2
 800489a:	4604      	mov	r4, r0
 800489c:	2301      	movs	r3, #1
 800489e:	e7f0      	b.n	8004882 <_vfiprintf_r+0x1da>
 80048a0:	ab03      	add	r3, sp, #12
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	462a      	mov	r2, r5
 80048a6:	4b16      	ldr	r3, [pc, #88]	; (8004900 <_vfiprintf_r+0x258>)
 80048a8:	a904      	add	r1, sp, #16
 80048aa:	4630      	mov	r0, r6
 80048ac:	f3af 8000 	nop.w
 80048b0:	4607      	mov	r7, r0
 80048b2:	1c78      	adds	r0, r7, #1
 80048b4:	d1d6      	bne.n	8004864 <_vfiprintf_r+0x1bc>
 80048b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048b8:	07d9      	lsls	r1, r3, #31
 80048ba:	d405      	bmi.n	80048c8 <_vfiprintf_r+0x220>
 80048bc:	89ab      	ldrh	r3, [r5, #12]
 80048be:	059a      	lsls	r2, r3, #22
 80048c0:	d402      	bmi.n	80048c8 <_vfiprintf_r+0x220>
 80048c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048c4:	f7ff fd7f 	bl	80043c6 <__retarget_lock_release_recursive>
 80048c8:	89ab      	ldrh	r3, [r5, #12]
 80048ca:	065b      	lsls	r3, r3, #25
 80048cc:	f53f af12 	bmi.w	80046f4 <_vfiprintf_r+0x4c>
 80048d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048d2:	e711      	b.n	80046f8 <_vfiprintf_r+0x50>
 80048d4:	ab03      	add	r3, sp, #12
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	462a      	mov	r2, r5
 80048da:	4b09      	ldr	r3, [pc, #36]	; (8004900 <_vfiprintf_r+0x258>)
 80048dc:	a904      	add	r1, sp, #16
 80048de:	4630      	mov	r0, r6
 80048e0:	f000 f880 	bl	80049e4 <_printf_i>
 80048e4:	e7e4      	b.n	80048b0 <_vfiprintf_r+0x208>
 80048e6:	bf00      	nop
 80048e8:	08004f50 	.word	0x08004f50
 80048ec:	08004f70 	.word	0x08004f70
 80048f0:	08004f30 	.word	0x08004f30
 80048f4:	08004f90 	.word	0x08004f90
 80048f8:	08004f9a 	.word	0x08004f9a
 80048fc:	00000000 	.word	0x00000000
 8004900:	08004683 	.word	0x08004683
 8004904:	08004f96 	.word	0x08004f96

08004908 <_printf_common>:
 8004908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800490c:	4616      	mov	r6, r2
 800490e:	4699      	mov	r9, r3
 8004910:	688a      	ldr	r2, [r1, #8]
 8004912:	690b      	ldr	r3, [r1, #16]
 8004914:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004918:	4293      	cmp	r3, r2
 800491a:	bfb8      	it	lt
 800491c:	4613      	movlt	r3, r2
 800491e:	6033      	str	r3, [r6, #0]
 8004920:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004924:	4607      	mov	r7, r0
 8004926:	460c      	mov	r4, r1
 8004928:	b10a      	cbz	r2, 800492e <_printf_common+0x26>
 800492a:	3301      	adds	r3, #1
 800492c:	6033      	str	r3, [r6, #0]
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	0699      	lsls	r1, r3, #26
 8004932:	bf42      	ittt	mi
 8004934:	6833      	ldrmi	r3, [r6, #0]
 8004936:	3302      	addmi	r3, #2
 8004938:	6033      	strmi	r3, [r6, #0]
 800493a:	6825      	ldr	r5, [r4, #0]
 800493c:	f015 0506 	ands.w	r5, r5, #6
 8004940:	d106      	bne.n	8004950 <_printf_common+0x48>
 8004942:	f104 0a19 	add.w	sl, r4, #25
 8004946:	68e3      	ldr	r3, [r4, #12]
 8004948:	6832      	ldr	r2, [r6, #0]
 800494a:	1a9b      	subs	r3, r3, r2
 800494c:	42ab      	cmp	r3, r5
 800494e:	dc26      	bgt.n	800499e <_printf_common+0x96>
 8004950:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004954:	1e13      	subs	r3, r2, #0
 8004956:	6822      	ldr	r2, [r4, #0]
 8004958:	bf18      	it	ne
 800495a:	2301      	movne	r3, #1
 800495c:	0692      	lsls	r2, r2, #26
 800495e:	d42b      	bmi.n	80049b8 <_printf_common+0xb0>
 8004960:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004964:	4649      	mov	r1, r9
 8004966:	4638      	mov	r0, r7
 8004968:	47c0      	blx	r8
 800496a:	3001      	adds	r0, #1
 800496c:	d01e      	beq.n	80049ac <_printf_common+0xa4>
 800496e:	6823      	ldr	r3, [r4, #0]
 8004970:	68e5      	ldr	r5, [r4, #12]
 8004972:	6832      	ldr	r2, [r6, #0]
 8004974:	f003 0306 	and.w	r3, r3, #6
 8004978:	2b04      	cmp	r3, #4
 800497a:	bf08      	it	eq
 800497c:	1aad      	subeq	r5, r5, r2
 800497e:	68a3      	ldr	r3, [r4, #8]
 8004980:	6922      	ldr	r2, [r4, #16]
 8004982:	bf0c      	ite	eq
 8004984:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004988:	2500      	movne	r5, #0
 800498a:	4293      	cmp	r3, r2
 800498c:	bfc4      	itt	gt
 800498e:	1a9b      	subgt	r3, r3, r2
 8004990:	18ed      	addgt	r5, r5, r3
 8004992:	2600      	movs	r6, #0
 8004994:	341a      	adds	r4, #26
 8004996:	42b5      	cmp	r5, r6
 8004998:	d11a      	bne.n	80049d0 <_printf_common+0xc8>
 800499a:	2000      	movs	r0, #0
 800499c:	e008      	b.n	80049b0 <_printf_common+0xa8>
 800499e:	2301      	movs	r3, #1
 80049a0:	4652      	mov	r2, sl
 80049a2:	4649      	mov	r1, r9
 80049a4:	4638      	mov	r0, r7
 80049a6:	47c0      	blx	r8
 80049a8:	3001      	adds	r0, #1
 80049aa:	d103      	bne.n	80049b4 <_printf_common+0xac>
 80049ac:	f04f 30ff 	mov.w	r0, #4294967295
 80049b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049b4:	3501      	adds	r5, #1
 80049b6:	e7c6      	b.n	8004946 <_printf_common+0x3e>
 80049b8:	18e1      	adds	r1, r4, r3
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	2030      	movs	r0, #48	; 0x30
 80049be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049c2:	4422      	add	r2, r4
 80049c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049cc:	3302      	adds	r3, #2
 80049ce:	e7c7      	b.n	8004960 <_printf_common+0x58>
 80049d0:	2301      	movs	r3, #1
 80049d2:	4622      	mov	r2, r4
 80049d4:	4649      	mov	r1, r9
 80049d6:	4638      	mov	r0, r7
 80049d8:	47c0      	blx	r8
 80049da:	3001      	adds	r0, #1
 80049dc:	d0e6      	beq.n	80049ac <_printf_common+0xa4>
 80049de:	3601      	adds	r6, #1
 80049e0:	e7d9      	b.n	8004996 <_printf_common+0x8e>
	...

080049e4 <_printf_i>:
 80049e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049e8:	7e0f      	ldrb	r7, [r1, #24]
 80049ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049ec:	2f78      	cmp	r7, #120	; 0x78
 80049ee:	4691      	mov	r9, r2
 80049f0:	4680      	mov	r8, r0
 80049f2:	460c      	mov	r4, r1
 80049f4:	469a      	mov	sl, r3
 80049f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049fa:	d807      	bhi.n	8004a0c <_printf_i+0x28>
 80049fc:	2f62      	cmp	r7, #98	; 0x62
 80049fe:	d80a      	bhi.n	8004a16 <_printf_i+0x32>
 8004a00:	2f00      	cmp	r7, #0
 8004a02:	f000 80d8 	beq.w	8004bb6 <_printf_i+0x1d2>
 8004a06:	2f58      	cmp	r7, #88	; 0x58
 8004a08:	f000 80a3 	beq.w	8004b52 <_printf_i+0x16e>
 8004a0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a14:	e03a      	b.n	8004a8c <_printf_i+0xa8>
 8004a16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a1a:	2b15      	cmp	r3, #21
 8004a1c:	d8f6      	bhi.n	8004a0c <_printf_i+0x28>
 8004a1e:	a101      	add	r1, pc, #4	; (adr r1, 8004a24 <_printf_i+0x40>)
 8004a20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a24:	08004a7d 	.word	0x08004a7d
 8004a28:	08004a91 	.word	0x08004a91
 8004a2c:	08004a0d 	.word	0x08004a0d
 8004a30:	08004a0d 	.word	0x08004a0d
 8004a34:	08004a0d 	.word	0x08004a0d
 8004a38:	08004a0d 	.word	0x08004a0d
 8004a3c:	08004a91 	.word	0x08004a91
 8004a40:	08004a0d 	.word	0x08004a0d
 8004a44:	08004a0d 	.word	0x08004a0d
 8004a48:	08004a0d 	.word	0x08004a0d
 8004a4c:	08004a0d 	.word	0x08004a0d
 8004a50:	08004b9d 	.word	0x08004b9d
 8004a54:	08004ac1 	.word	0x08004ac1
 8004a58:	08004b7f 	.word	0x08004b7f
 8004a5c:	08004a0d 	.word	0x08004a0d
 8004a60:	08004a0d 	.word	0x08004a0d
 8004a64:	08004bbf 	.word	0x08004bbf
 8004a68:	08004a0d 	.word	0x08004a0d
 8004a6c:	08004ac1 	.word	0x08004ac1
 8004a70:	08004a0d 	.word	0x08004a0d
 8004a74:	08004a0d 	.word	0x08004a0d
 8004a78:	08004b87 	.word	0x08004b87
 8004a7c:	682b      	ldr	r3, [r5, #0]
 8004a7e:	1d1a      	adds	r2, r3, #4
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	602a      	str	r2, [r5, #0]
 8004a84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e0a3      	b.n	8004bd8 <_printf_i+0x1f4>
 8004a90:	6820      	ldr	r0, [r4, #0]
 8004a92:	6829      	ldr	r1, [r5, #0]
 8004a94:	0606      	lsls	r6, r0, #24
 8004a96:	f101 0304 	add.w	r3, r1, #4
 8004a9a:	d50a      	bpl.n	8004ab2 <_printf_i+0xce>
 8004a9c:	680e      	ldr	r6, [r1, #0]
 8004a9e:	602b      	str	r3, [r5, #0]
 8004aa0:	2e00      	cmp	r6, #0
 8004aa2:	da03      	bge.n	8004aac <_printf_i+0xc8>
 8004aa4:	232d      	movs	r3, #45	; 0x2d
 8004aa6:	4276      	negs	r6, r6
 8004aa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aac:	485e      	ldr	r0, [pc, #376]	; (8004c28 <_printf_i+0x244>)
 8004aae:	230a      	movs	r3, #10
 8004ab0:	e019      	b.n	8004ae6 <_printf_i+0x102>
 8004ab2:	680e      	ldr	r6, [r1, #0]
 8004ab4:	602b      	str	r3, [r5, #0]
 8004ab6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004aba:	bf18      	it	ne
 8004abc:	b236      	sxthne	r6, r6
 8004abe:	e7ef      	b.n	8004aa0 <_printf_i+0xbc>
 8004ac0:	682b      	ldr	r3, [r5, #0]
 8004ac2:	6820      	ldr	r0, [r4, #0]
 8004ac4:	1d19      	adds	r1, r3, #4
 8004ac6:	6029      	str	r1, [r5, #0]
 8004ac8:	0601      	lsls	r1, r0, #24
 8004aca:	d501      	bpl.n	8004ad0 <_printf_i+0xec>
 8004acc:	681e      	ldr	r6, [r3, #0]
 8004ace:	e002      	b.n	8004ad6 <_printf_i+0xf2>
 8004ad0:	0646      	lsls	r6, r0, #25
 8004ad2:	d5fb      	bpl.n	8004acc <_printf_i+0xe8>
 8004ad4:	881e      	ldrh	r6, [r3, #0]
 8004ad6:	4854      	ldr	r0, [pc, #336]	; (8004c28 <_printf_i+0x244>)
 8004ad8:	2f6f      	cmp	r7, #111	; 0x6f
 8004ada:	bf0c      	ite	eq
 8004adc:	2308      	moveq	r3, #8
 8004ade:	230a      	movne	r3, #10
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ae6:	6865      	ldr	r5, [r4, #4]
 8004ae8:	60a5      	str	r5, [r4, #8]
 8004aea:	2d00      	cmp	r5, #0
 8004aec:	bfa2      	ittt	ge
 8004aee:	6821      	ldrge	r1, [r4, #0]
 8004af0:	f021 0104 	bicge.w	r1, r1, #4
 8004af4:	6021      	strge	r1, [r4, #0]
 8004af6:	b90e      	cbnz	r6, 8004afc <_printf_i+0x118>
 8004af8:	2d00      	cmp	r5, #0
 8004afa:	d04d      	beq.n	8004b98 <_printf_i+0x1b4>
 8004afc:	4615      	mov	r5, r2
 8004afe:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b02:	fb03 6711 	mls	r7, r3, r1, r6
 8004b06:	5dc7      	ldrb	r7, [r0, r7]
 8004b08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b0c:	4637      	mov	r7, r6
 8004b0e:	42bb      	cmp	r3, r7
 8004b10:	460e      	mov	r6, r1
 8004b12:	d9f4      	bls.n	8004afe <_printf_i+0x11a>
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	d10b      	bne.n	8004b30 <_printf_i+0x14c>
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	07de      	lsls	r6, r3, #31
 8004b1c:	d508      	bpl.n	8004b30 <_printf_i+0x14c>
 8004b1e:	6923      	ldr	r3, [r4, #16]
 8004b20:	6861      	ldr	r1, [r4, #4]
 8004b22:	4299      	cmp	r1, r3
 8004b24:	bfde      	ittt	le
 8004b26:	2330      	movle	r3, #48	; 0x30
 8004b28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b30:	1b52      	subs	r2, r2, r5
 8004b32:	6122      	str	r2, [r4, #16]
 8004b34:	f8cd a000 	str.w	sl, [sp]
 8004b38:	464b      	mov	r3, r9
 8004b3a:	aa03      	add	r2, sp, #12
 8004b3c:	4621      	mov	r1, r4
 8004b3e:	4640      	mov	r0, r8
 8004b40:	f7ff fee2 	bl	8004908 <_printf_common>
 8004b44:	3001      	adds	r0, #1
 8004b46:	d14c      	bne.n	8004be2 <_printf_i+0x1fe>
 8004b48:	f04f 30ff 	mov.w	r0, #4294967295
 8004b4c:	b004      	add	sp, #16
 8004b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b52:	4835      	ldr	r0, [pc, #212]	; (8004c28 <_printf_i+0x244>)
 8004b54:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004b58:	6829      	ldr	r1, [r5, #0]
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b60:	6029      	str	r1, [r5, #0]
 8004b62:	061d      	lsls	r5, r3, #24
 8004b64:	d514      	bpl.n	8004b90 <_printf_i+0x1ac>
 8004b66:	07df      	lsls	r7, r3, #31
 8004b68:	bf44      	itt	mi
 8004b6a:	f043 0320 	orrmi.w	r3, r3, #32
 8004b6e:	6023      	strmi	r3, [r4, #0]
 8004b70:	b91e      	cbnz	r6, 8004b7a <_printf_i+0x196>
 8004b72:	6823      	ldr	r3, [r4, #0]
 8004b74:	f023 0320 	bic.w	r3, r3, #32
 8004b78:	6023      	str	r3, [r4, #0]
 8004b7a:	2310      	movs	r3, #16
 8004b7c:	e7b0      	b.n	8004ae0 <_printf_i+0xfc>
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	f043 0320 	orr.w	r3, r3, #32
 8004b84:	6023      	str	r3, [r4, #0]
 8004b86:	2378      	movs	r3, #120	; 0x78
 8004b88:	4828      	ldr	r0, [pc, #160]	; (8004c2c <_printf_i+0x248>)
 8004b8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b8e:	e7e3      	b.n	8004b58 <_printf_i+0x174>
 8004b90:	0659      	lsls	r1, r3, #25
 8004b92:	bf48      	it	mi
 8004b94:	b2b6      	uxthmi	r6, r6
 8004b96:	e7e6      	b.n	8004b66 <_printf_i+0x182>
 8004b98:	4615      	mov	r5, r2
 8004b9a:	e7bb      	b.n	8004b14 <_printf_i+0x130>
 8004b9c:	682b      	ldr	r3, [r5, #0]
 8004b9e:	6826      	ldr	r6, [r4, #0]
 8004ba0:	6961      	ldr	r1, [r4, #20]
 8004ba2:	1d18      	adds	r0, r3, #4
 8004ba4:	6028      	str	r0, [r5, #0]
 8004ba6:	0635      	lsls	r5, r6, #24
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	d501      	bpl.n	8004bb0 <_printf_i+0x1cc>
 8004bac:	6019      	str	r1, [r3, #0]
 8004bae:	e002      	b.n	8004bb6 <_printf_i+0x1d2>
 8004bb0:	0670      	lsls	r0, r6, #25
 8004bb2:	d5fb      	bpl.n	8004bac <_printf_i+0x1c8>
 8004bb4:	8019      	strh	r1, [r3, #0]
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	6123      	str	r3, [r4, #16]
 8004bba:	4615      	mov	r5, r2
 8004bbc:	e7ba      	b.n	8004b34 <_printf_i+0x150>
 8004bbe:	682b      	ldr	r3, [r5, #0]
 8004bc0:	1d1a      	adds	r2, r3, #4
 8004bc2:	602a      	str	r2, [r5, #0]
 8004bc4:	681d      	ldr	r5, [r3, #0]
 8004bc6:	6862      	ldr	r2, [r4, #4]
 8004bc8:	2100      	movs	r1, #0
 8004bca:	4628      	mov	r0, r5
 8004bcc:	f7fb fb08 	bl	80001e0 <memchr>
 8004bd0:	b108      	cbz	r0, 8004bd6 <_printf_i+0x1f2>
 8004bd2:	1b40      	subs	r0, r0, r5
 8004bd4:	6060      	str	r0, [r4, #4]
 8004bd6:	6863      	ldr	r3, [r4, #4]
 8004bd8:	6123      	str	r3, [r4, #16]
 8004bda:	2300      	movs	r3, #0
 8004bdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004be0:	e7a8      	b.n	8004b34 <_printf_i+0x150>
 8004be2:	6923      	ldr	r3, [r4, #16]
 8004be4:	462a      	mov	r2, r5
 8004be6:	4649      	mov	r1, r9
 8004be8:	4640      	mov	r0, r8
 8004bea:	47d0      	blx	sl
 8004bec:	3001      	adds	r0, #1
 8004bee:	d0ab      	beq.n	8004b48 <_printf_i+0x164>
 8004bf0:	6823      	ldr	r3, [r4, #0]
 8004bf2:	079b      	lsls	r3, r3, #30
 8004bf4:	d413      	bmi.n	8004c1e <_printf_i+0x23a>
 8004bf6:	68e0      	ldr	r0, [r4, #12]
 8004bf8:	9b03      	ldr	r3, [sp, #12]
 8004bfa:	4298      	cmp	r0, r3
 8004bfc:	bfb8      	it	lt
 8004bfe:	4618      	movlt	r0, r3
 8004c00:	e7a4      	b.n	8004b4c <_printf_i+0x168>
 8004c02:	2301      	movs	r3, #1
 8004c04:	4632      	mov	r2, r6
 8004c06:	4649      	mov	r1, r9
 8004c08:	4640      	mov	r0, r8
 8004c0a:	47d0      	blx	sl
 8004c0c:	3001      	adds	r0, #1
 8004c0e:	d09b      	beq.n	8004b48 <_printf_i+0x164>
 8004c10:	3501      	adds	r5, #1
 8004c12:	68e3      	ldr	r3, [r4, #12]
 8004c14:	9903      	ldr	r1, [sp, #12]
 8004c16:	1a5b      	subs	r3, r3, r1
 8004c18:	42ab      	cmp	r3, r5
 8004c1a:	dcf2      	bgt.n	8004c02 <_printf_i+0x21e>
 8004c1c:	e7eb      	b.n	8004bf6 <_printf_i+0x212>
 8004c1e:	2500      	movs	r5, #0
 8004c20:	f104 0619 	add.w	r6, r4, #25
 8004c24:	e7f5      	b.n	8004c12 <_printf_i+0x22e>
 8004c26:	bf00      	nop
 8004c28:	08004fa1 	.word	0x08004fa1
 8004c2c:	08004fb2 	.word	0x08004fb2

08004c30 <_sbrk_r>:
 8004c30:	b538      	push	{r3, r4, r5, lr}
 8004c32:	4d06      	ldr	r5, [pc, #24]	; (8004c4c <_sbrk_r+0x1c>)
 8004c34:	2300      	movs	r3, #0
 8004c36:	4604      	mov	r4, r0
 8004c38:	4608      	mov	r0, r1
 8004c3a:	602b      	str	r3, [r5, #0]
 8004c3c:	f7fc f9ac 	bl	8000f98 <_sbrk>
 8004c40:	1c43      	adds	r3, r0, #1
 8004c42:	d102      	bne.n	8004c4a <_sbrk_r+0x1a>
 8004c44:	682b      	ldr	r3, [r5, #0]
 8004c46:	b103      	cbz	r3, 8004c4a <_sbrk_r+0x1a>
 8004c48:	6023      	str	r3, [r4, #0]
 8004c4a:	bd38      	pop	{r3, r4, r5, pc}
 8004c4c:	20000190 	.word	0x20000190

08004c50 <__sread>:
 8004c50:	b510      	push	{r4, lr}
 8004c52:	460c      	mov	r4, r1
 8004c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c58:	f000 f8a0 	bl	8004d9c <_read_r>
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	bfab      	itete	ge
 8004c60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004c62:	89a3      	ldrhlt	r3, [r4, #12]
 8004c64:	181b      	addge	r3, r3, r0
 8004c66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004c6a:	bfac      	ite	ge
 8004c6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004c6e:	81a3      	strhlt	r3, [r4, #12]
 8004c70:	bd10      	pop	{r4, pc}

08004c72 <__swrite>:
 8004c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c76:	461f      	mov	r7, r3
 8004c78:	898b      	ldrh	r3, [r1, #12]
 8004c7a:	05db      	lsls	r3, r3, #23
 8004c7c:	4605      	mov	r5, r0
 8004c7e:	460c      	mov	r4, r1
 8004c80:	4616      	mov	r6, r2
 8004c82:	d505      	bpl.n	8004c90 <__swrite+0x1e>
 8004c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c88:	2302      	movs	r3, #2
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f000 f868 	bl	8004d60 <_lseek_r>
 8004c90:	89a3      	ldrh	r3, [r4, #12]
 8004c92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c9a:	81a3      	strh	r3, [r4, #12]
 8004c9c:	4632      	mov	r2, r6
 8004c9e:	463b      	mov	r3, r7
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ca6:	f000 b817 	b.w	8004cd8 <_write_r>

08004caa <__sseek>:
 8004caa:	b510      	push	{r4, lr}
 8004cac:	460c      	mov	r4, r1
 8004cae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cb2:	f000 f855 	bl	8004d60 <_lseek_r>
 8004cb6:	1c43      	adds	r3, r0, #1
 8004cb8:	89a3      	ldrh	r3, [r4, #12]
 8004cba:	bf15      	itete	ne
 8004cbc:	6560      	strne	r0, [r4, #84]	; 0x54
 8004cbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004cc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004cc6:	81a3      	strheq	r3, [r4, #12]
 8004cc8:	bf18      	it	ne
 8004cca:	81a3      	strhne	r3, [r4, #12]
 8004ccc:	bd10      	pop	{r4, pc}

08004cce <__sclose>:
 8004cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cd2:	f000 b813 	b.w	8004cfc <_close_r>
	...

08004cd8 <_write_r>:
 8004cd8:	b538      	push	{r3, r4, r5, lr}
 8004cda:	4d07      	ldr	r5, [pc, #28]	; (8004cf8 <_write_r+0x20>)
 8004cdc:	4604      	mov	r4, r0
 8004cde:	4608      	mov	r0, r1
 8004ce0:	4611      	mov	r1, r2
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	602a      	str	r2, [r5, #0]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	f7fc f905 	bl	8000ef6 <_write>
 8004cec:	1c43      	adds	r3, r0, #1
 8004cee:	d102      	bne.n	8004cf6 <_write_r+0x1e>
 8004cf0:	682b      	ldr	r3, [r5, #0]
 8004cf2:	b103      	cbz	r3, 8004cf6 <_write_r+0x1e>
 8004cf4:	6023      	str	r3, [r4, #0]
 8004cf6:	bd38      	pop	{r3, r4, r5, pc}
 8004cf8:	20000190 	.word	0x20000190

08004cfc <_close_r>:
 8004cfc:	b538      	push	{r3, r4, r5, lr}
 8004cfe:	4d06      	ldr	r5, [pc, #24]	; (8004d18 <_close_r+0x1c>)
 8004d00:	2300      	movs	r3, #0
 8004d02:	4604      	mov	r4, r0
 8004d04:	4608      	mov	r0, r1
 8004d06:	602b      	str	r3, [r5, #0]
 8004d08:	f7fc f911 	bl	8000f2e <_close>
 8004d0c:	1c43      	adds	r3, r0, #1
 8004d0e:	d102      	bne.n	8004d16 <_close_r+0x1a>
 8004d10:	682b      	ldr	r3, [r5, #0]
 8004d12:	b103      	cbz	r3, 8004d16 <_close_r+0x1a>
 8004d14:	6023      	str	r3, [r4, #0]
 8004d16:	bd38      	pop	{r3, r4, r5, pc}
 8004d18:	20000190 	.word	0x20000190

08004d1c <_fstat_r>:
 8004d1c:	b538      	push	{r3, r4, r5, lr}
 8004d1e:	4d07      	ldr	r5, [pc, #28]	; (8004d3c <_fstat_r+0x20>)
 8004d20:	2300      	movs	r3, #0
 8004d22:	4604      	mov	r4, r0
 8004d24:	4608      	mov	r0, r1
 8004d26:	4611      	mov	r1, r2
 8004d28:	602b      	str	r3, [r5, #0]
 8004d2a:	f7fc f90c 	bl	8000f46 <_fstat>
 8004d2e:	1c43      	adds	r3, r0, #1
 8004d30:	d102      	bne.n	8004d38 <_fstat_r+0x1c>
 8004d32:	682b      	ldr	r3, [r5, #0]
 8004d34:	b103      	cbz	r3, 8004d38 <_fstat_r+0x1c>
 8004d36:	6023      	str	r3, [r4, #0]
 8004d38:	bd38      	pop	{r3, r4, r5, pc}
 8004d3a:	bf00      	nop
 8004d3c:	20000190 	.word	0x20000190

08004d40 <_isatty_r>:
 8004d40:	b538      	push	{r3, r4, r5, lr}
 8004d42:	4d06      	ldr	r5, [pc, #24]	; (8004d5c <_isatty_r+0x1c>)
 8004d44:	2300      	movs	r3, #0
 8004d46:	4604      	mov	r4, r0
 8004d48:	4608      	mov	r0, r1
 8004d4a:	602b      	str	r3, [r5, #0]
 8004d4c:	f7fc f90b 	bl	8000f66 <_isatty>
 8004d50:	1c43      	adds	r3, r0, #1
 8004d52:	d102      	bne.n	8004d5a <_isatty_r+0x1a>
 8004d54:	682b      	ldr	r3, [r5, #0]
 8004d56:	b103      	cbz	r3, 8004d5a <_isatty_r+0x1a>
 8004d58:	6023      	str	r3, [r4, #0]
 8004d5a:	bd38      	pop	{r3, r4, r5, pc}
 8004d5c:	20000190 	.word	0x20000190

08004d60 <_lseek_r>:
 8004d60:	b538      	push	{r3, r4, r5, lr}
 8004d62:	4d07      	ldr	r5, [pc, #28]	; (8004d80 <_lseek_r+0x20>)
 8004d64:	4604      	mov	r4, r0
 8004d66:	4608      	mov	r0, r1
 8004d68:	4611      	mov	r1, r2
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	602a      	str	r2, [r5, #0]
 8004d6e:	461a      	mov	r2, r3
 8004d70:	f7fc f904 	bl	8000f7c <_lseek>
 8004d74:	1c43      	adds	r3, r0, #1
 8004d76:	d102      	bne.n	8004d7e <_lseek_r+0x1e>
 8004d78:	682b      	ldr	r3, [r5, #0]
 8004d7a:	b103      	cbz	r3, 8004d7e <_lseek_r+0x1e>
 8004d7c:	6023      	str	r3, [r4, #0]
 8004d7e:	bd38      	pop	{r3, r4, r5, pc}
 8004d80:	20000190 	.word	0x20000190

08004d84 <__malloc_lock>:
 8004d84:	4801      	ldr	r0, [pc, #4]	; (8004d8c <__malloc_lock+0x8>)
 8004d86:	f7ff bb1d 	b.w	80043c4 <__retarget_lock_acquire_recursive>
 8004d8a:	bf00      	nop
 8004d8c:	20000184 	.word	0x20000184

08004d90 <__malloc_unlock>:
 8004d90:	4801      	ldr	r0, [pc, #4]	; (8004d98 <__malloc_unlock+0x8>)
 8004d92:	f7ff bb18 	b.w	80043c6 <__retarget_lock_release_recursive>
 8004d96:	bf00      	nop
 8004d98:	20000184 	.word	0x20000184

08004d9c <_read_r>:
 8004d9c:	b538      	push	{r3, r4, r5, lr}
 8004d9e:	4d07      	ldr	r5, [pc, #28]	; (8004dbc <_read_r+0x20>)
 8004da0:	4604      	mov	r4, r0
 8004da2:	4608      	mov	r0, r1
 8004da4:	4611      	mov	r1, r2
 8004da6:	2200      	movs	r2, #0
 8004da8:	602a      	str	r2, [r5, #0]
 8004daa:	461a      	mov	r2, r3
 8004dac:	f7fc f886 	bl	8000ebc <_read>
 8004db0:	1c43      	adds	r3, r0, #1
 8004db2:	d102      	bne.n	8004dba <_read_r+0x1e>
 8004db4:	682b      	ldr	r3, [r5, #0]
 8004db6:	b103      	cbz	r3, 8004dba <_read_r+0x1e>
 8004db8:	6023      	str	r3, [r4, #0]
 8004dba:	bd38      	pop	{r3, r4, r5, pc}
 8004dbc:	20000190 	.word	0x20000190

08004dc0 <_init>:
 8004dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc2:	bf00      	nop
 8004dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dc6:	bc08      	pop	{r3}
 8004dc8:	469e      	mov	lr, r3
 8004dca:	4770      	bx	lr

08004dcc <_fini>:
 8004dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dce:	bf00      	nop
 8004dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dd2:	bc08      	pop	{r3}
 8004dd4:	469e      	mov	lr, r3
 8004dd6:	4770      	bx	lr
