
battbaby_f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cd8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  08004e78  08004e78  00014e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050ac  080050ac  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080050ac  080050ac  000150ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050b4  080050b4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050b4  080050b4  000150b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050b8  080050b8  000150b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080050bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  2000007c  08005138  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08005138  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b969  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018ec  00000000  00000000  0002ba15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  0002d308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002dd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016aac  00000000  00000000  0002e6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c2ca  00000000  00000000  00045154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a5db  00000000  00000000  0005141e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000db9f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000318c  00000000  00000000  000dba4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004e60 	.word	0x08004e60

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08004e60 	.word	0x08004e60

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800058c:	1d39      	adds	r1, r7, #4
 800058e:	f04f 33ff 	mov.w	r3, #4294967295
 8000592:	2201      	movs	r2, #1
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <__io_putchar+0x20>)
 8000596:	f003 f8a4 	bl	80036e2 <HAL_UART_Transmit>
  return ch;
 800059a:	687b      	ldr	r3, [r7, #4]
}
 800059c:	4618      	mov	r0, r3
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200000ec 	.word	0x200000ec

080005a8 <BQ27441_i2cWriteBytes>:
 	returns HAL_OK if write successful
 	uint16_t memAddress: memory address within the BQ27441 where the data should start being written.
	uint8_t *pData: pointer to the array of data bytes that are to be written to the device.
	uint16_t Size:  number of bytes to write.
*/
HAL_StatusTypeDef BQ27441_i2cWriteBytes(uint16_t memAddress, uint8_t *pData, uint16_t Size) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af04      	add	r7, sp, #16
 80005ae:	4603      	mov	r3, r0
 80005b0:	6039      	str	r1, [r7, #0]
 80005b2:	80fb      	strh	r3, [r7, #6]
 80005b4:	4613      	mov	r3, r2
 80005b6:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Mem_Write(&hi2c3, BQ27441_I2C_ADDRESS << 1, memAddress, I2C_MEMADD_SIZE_8BIT, pData, Size, HAL_MAX_DELAY);
 80005b8:	88fa      	ldrh	r2, [r7, #6]
 80005ba:	f04f 33ff 	mov.w	r3, #4294967295
 80005be:	9302      	str	r3, [sp, #8]
 80005c0:	88bb      	ldrh	r3, [r7, #4]
 80005c2:	9301      	str	r3, [sp, #4]
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	2301      	movs	r3, #1
 80005ca:	21aa      	movs	r1, #170	; 0xaa
 80005cc:	4803      	ldr	r0, [pc, #12]	; (80005dc <BQ27441_i2cWriteBytes+0x34>)
 80005ce:	f001 fc59 	bl	8001e84 <HAL_I2C_Mem_Write>
 80005d2:	4603      	mov	r3, r0
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000098 	.word	0x20000098

080005e0 <BQ27441_i2cReadBytes>:
 	returns HAL_OK if read successful
	uint16_t memAddress: memory address within the BQ27441 from which the data should start being read.
	uint8_t *pData: pointer to the buffer where the read data will be stored.
	uint16_t Size: number of bytes to read.
*/
HAL_StatusTypeDef BQ27441_i2cReadBytes(uint16_t memAddress, uint8_t *pData, uint16_t Size) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af04      	add	r7, sp, #16
 80005e6:	4603      	mov	r3, r0
 80005e8:	6039      	str	r1, [r7, #0]
 80005ea:	80fb      	strh	r3, [r7, #6]
 80005ec:	4613      	mov	r3, r2
 80005ee:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Mem_Read(&hi2c3, BQ27441_I2C_ADDRESS << 1, memAddress, I2C_MEMADD_SIZE_8BIT, pData, Size, HAL_MAX_DELAY);
 80005f0:	88fa      	ldrh	r2, [r7, #6]
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295
 80005f6:	9302      	str	r3, [sp, #8]
 80005f8:	88bb      	ldrh	r3, [r7, #4]
 80005fa:	9301      	str	r3, [sp, #4]
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2301      	movs	r3, #1
 8000602:	21aa      	movs	r1, #170	; 0xaa
 8000604:	4803      	ldr	r0, [pc, #12]	; (8000614 <BQ27441_i2cReadBytes+0x34>)
 8000606:	f001 fd37 	bl	8002078 <HAL_I2C_Mem_Read>
 800060a:	4603      	mov	r3, r0
}
 800060c:	4618      	mov	r0, r3
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000098 	.word	0x20000098

08000618 <BQ27441_readWord>:
/*
	function uses BQ27441_i2cReadBytes to read strictly two bytes of data
	returns a combined 16 bit word.
	uint16_t subAddress: The sub-address or register address within the BQ27441 device from which the 16-bit word will be read.
*/
uint16_t BQ27441_readWord(uint16_t subAddress) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    BQ27441_i2cReadBytes(subAddress, data, 2);
 8000622:	f107 010c 	add.w	r1, r7, #12
 8000626:	88fb      	ldrh	r3, [r7, #6]
 8000628:	2202      	movs	r2, #2
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff ffd8 	bl	80005e0 <BQ27441_i2cReadBytes>
    return ((uint16_t) data[1] << 8) | data[0];
 8000630:	7b7b      	ldrb	r3, [r7, #13]
 8000632:	021b      	lsls	r3, r3, #8
 8000634:	b21a      	sxth	r2, r3
 8000636:	7b3b      	ldrb	r3, [r7, #12]
 8000638:	b21b      	sxth	r3, r3
 800063a:	4313      	orrs	r3, r2
 800063c:	b21b      	sxth	r3, r3
 800063e:	b29b      	uxth	r3, r3
}
 8000640:	4618      	mov	r0, r3
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <BQ27441_soc>:
/*
	function gets FILTERED/UNFILTERED SoC using BQ27441_readWord
	returns 16 bit SoC value.
	soc_measure type: enumeration value that specifies filtered or unfiltered SoC value should be read. (filtered is basically smoothed out value<-datasheet said so)
*/
uint16_t BQ27441_soc(soc_measure type) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
    //type = FILTERED;
    uint16_t socRet = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	81fb      	strh	r3, [r7, #14]
    switch (type) {
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d002      	beq.n	8000662 <BQ27441_soc+0x1a>
 800065c:	2b01      	cmp	r3, #1
 800065e:	d006      	beq.n	800066e <BQ27441_soc+0x26>
 8000660:	e00b      	b.n	800067a <BQ27441_soc+0x32>
        case FILTERED:
            socRet = BQ27441_readWord(BQ27441_COMMAND_SOC);
 8000662:	201c      	movs	r0, #28
 8000664:	f7ff ffd8 	bl	8000618 <BQ27441_readWord>
 8000668:	4603      	mov	r3, r0
 800066a:	81fb      	strh	r3, [r7, #14]
            break;
 800066c:	e005      	b.n	800067a <BQ27441_soc+0x32>
        case UNFILTERED:
            socRet = BQ27441_readWord(BQ27441_COMMAND_SOC_UNFL);
 800066e:	2030      	movs	r0, #48	; 0x30
 8000670:	f7ff ffd2 	bl	8000618 <BQ27441_readWord>
 8000674:	4603      	mov	r3, r0
 8000676:	81fb      	strh	r3, [r7, #14]
            break;
 8000678:	bf00      	nop
    }
    return socRet;
 800067a:	89fb      	ldrh	r3, [r7, #14]
}
 800067c:	4618      	mov	r0, r3
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <BQ27441_voltage>:
/*
	function gets Voltage using BQ27441_readWord
	returns 16 bit voltage value.
*/
uint16_t BQ27441_voltage(void) {
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
    return BQ27441_readWord(BQ27441_COMMAND_VOLTAGE);
 8000688:	2004      	movs	r0, #4
 800068a:	f7ff ffc5 	bl	8000618 <BQ27441_readWord>
 800068e:	4603      	mov	r3, r0
}
 8000690:	4618      	mov	r0, r3
 8000692:	bd80      	pop	{r7, pc}

08000694 <BQ27441_power>:
/*
	function gets power using BQ27441_readWord
	returns 16 bit power value.
*/
int16_t BQ27441_power(void) {
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
    return (int16_t) BQ27441_readWord(BQ27441_COMMAND_AVG_POWER);
 8000698:	2018      	movs	r0, #24
 800069a:	f7ff ffbd 	bl	8000618 <BQ27441_readWord>
 800069e:	4603      	mov	r3, r0
 80006a0:	b21b      	sxth	r3, r3
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <BQ27441_opconfig>:

int16_t BQ27441_opconfig(void) {
 80006a6:	b580      	push	{r7, lr}
 80006a8:	af00      	add	r7, sp, #0
    return (int16_t) BQ27441_readWord(BQ27441_EXTENDED_OPCONFIG);
 80006aa:	203a      	movs	r0, #58	; 0x3a
 80006ac:	f7ff ffb4 	bl	8000618 <BQ27441_readWord>
 80006b0:	4603      	mov	r3, r0
 80006b2:	b21b      	sxth	r3, r3
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <BQ27441_deviceType>:

uint16_t BQ27441_deviceType(void) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
	// command sent to slave to tell it master wants to know devicetype
	// 0xFF to get right 8 bits of BQ27441_CONTROL_DEVICE_TYPE
	// >>8 to get left 8 bits, discarding right 8 bits of BQ27441_CONTROL_DEVICE_TYPE
    uint8_t command[2] = {BQ27441_CONTROL_DEVICE_TYPE & 0xFF, BQ27441_CONTROL_DEVICE_TYPE >> 8};
 80006be:	2301      	movs	r3, #1
 80006c0:	80bb      	strh	r3, [r7, #4]
    uint8_t data[2];
    uint16_t deviceType = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	80fb      	strh	r3, [r7, #6]

    BQ27441_i2cWriteBytes(BQ27441_COMMAND_CONTROL, command, sizeof(command)); //write command to slave
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2202      	movs	r2, #2
 80006ca:	4619      	mov	r1, r3
 80006cc:	2000      	movs	r0, #0
 80006ce:	f7ff ff6b 	bl	80005a8 <BQ27441_i2cWriteBytes>

    HAL_Delay(10); //delay to ensure device is ready
 80006d2:	200a      	movs	r0, #10
 80006d4:	f000 fd80 	bl	80011d8 <HAL_Delay>

    if (BQ27441_i2cReadBytes(BQ27441_COMMAND_CONTROL, data, sizeof(data)) == HAL_OK) { //read device type from control register
 80006d8:	463b      	mov	r3, r7
 80006da:	2202      	movs	r2, #2
 80006dc:	4619      	mov	r1, r3
 80006de:	2000      	movs	r0, #0
 80006e0:	f7ff ff7e 	bl	80005e0 <BQ27441_i2cReadBytes>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d107      	bne.n	80006fa <BQ27441_deviceType+0x42>
        deviceType = (data[1] << 8) | data[0];
 80006ea:	787b      	ldrb	r3, [r7, #1]
 80006ec:	021b      	lsls	r3, r3, #8
 80006ee:	b21a      	sxth	r2, r3
 80006f0:	783b      	ldrb	r3, [r7, #0]
 80006f2:	b21b      	sxth	r3, r3
 80006f4:	4313      	orrs	r3, r2
 80006f6:	b21b      	sxth	r3, r3
 80006f8:	80fb      	strh	r3, [r7, #6]
    }
    return deviceType;
 80006fa:	88fb      	ldrh	r3, [r7, #6]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <BQ27441_init>:
// function to initialize battery, check if device type matches
bool BQ27441_init(BQ27441_ctx_t *dev) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
    if (dev == NULL)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d101      	bne.n	8000716 <BQ27441_init+0x12>
        return false;
 8000712:	2300      	movs	r3, #0
 8000714:	e00a      	b.n	800072c <BQ27441_init+0x28>
//    ctx.read_reg = dev->read_reg;
//    ctx.write_reg = dev->write_reg;
//    ctx.BQ27441_i2c_address = dev->BQ27441_i2c_address;

    if (BQ27441_deviceType() == BQ27441_DEVICE_ID) {
 8000716:	f7ff ffcf 	bl	80006b8 <BQ27441_deviceType>
 800071a:	4603      	mov	r3, r0
 800071c:	461a      	mov	r2, r3
 800071e:	f240 4321 	movw	r3, #1057	; 0x421
 8000722:	429a      	cmp	r2, r3
 8000724:	d101      	bne.n	800072a <BQ27441_init+0x26>
        return true;
 8000726:	2301      	movs	r3, #1
 8000728:	e000      	b.n	800072c <BQ27441_init+0x28>
    } else
        return false;
 800072a:	2300      	movs	r3, #0
}
 800072c:	4618      	mov	r0, r3
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <check_charging>:
	if (bat_charging && charge < 99) {
		HAL_GPIO_WritePin(BAT_CE_GPIO_Port, BAT_CE_Pin, GPIO_PIN_RESET);
	}
}

void check_charging(void) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
	uint16_t pow = BQ27441_power();
 800073a:	f7ff ffab 	bl	8000694 <BQ27441_power>
 800073e:	4603      	mov	r3, r0
 8000740:	80fb      	strh	r3, [r7, #6]
//	printf("pow: %d\r\n", pow);
	if (pow > 12000) {
 8000742:	88fb      	ldrh	r3, [r7, #6]
 8000744:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000748:	4293      	cmp	r3, r2
 800074a:	d903      	bls.n	8000754 <check_charging+0x20>
		bat_charging = 0;
 800074c:	4b05      	ldr	r3, [pc, #20]	; (8000764 <check_charging+0x30>)
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
	}
	else {
		bat_charging = 1;
	}
}
 8000752:	e002      	b.n	800075a <check_charging+0x26>
		bat_charging = 1;
 8000754:	4b03      	ldr	r3, [pc, #12]	; (8000764 <check_charging+0x30>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000174 	.word	0x20000174

08000768 <updateBat>:

void updateBat(void) {
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	charge = BQ27441_soc(FILTERED);
 800076c:	2000      	movs	r0, #0
 800076e:	f7ff ff6b 	bl	8000648 <BQ27441_soc>
 8000772:	4603      	mov	r3, r0
 8000774:	b21a      	sxth	r2, r3
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <updateBat+0x4c>)
 8000778:	801a      	strh	r2, [r3, #0]
	printf("lcd charge: %d\r\n", charge);
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <updateBat+0x4c>)
 800077c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000780:	4619      	mov	r1, r3
 8000782:	480d      	ldr	r0, [pc, #52]	; (80007b8 <updateBat+0x50>)
 8000784:	f003 fe02 	bl	800438c <iprintf>
	if (bat_charging){
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <updateBat+0x54>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d00f      	beq.n	80007b0 <updateBat+0x48>
		if (charge >= 99) {
 8000790:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <updateBat+0x4c>)
 8000792:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000796:	2b62      	cmp	r3, #98	; 0x62
 8000798:	dd05      	ble.n	80007a6 <updateBat+0x3e>
			HAL_GPIO_WritePin(BAT_CE_GPIO_Port, BAT_CE_Pin, GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	2180      	movs	r1, #128	; 0x80
 800079e:	4808      	ldr	r0, [pc, #32]	; (80007c0 <updateBat+0x58>)
 80007a0:	f000 ffd4 	bl	800174c <HAL_GPIO_WritePin>
		else {
			HAL_GPIO_WritePin(BAT_CE_GPIO_Port, BAT_CE_Pin, GPIO_PIN_RESET);
		}
	}

}
 80007a4:	e004      	b.n	80007b0 <updateBat+0x48>
			HAL_GPIO_WritePin(BAT_CE_GPIO_Port, BAT_CE_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2180      	movs	r1, #128	; 0x80
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <updateBat+0x58>)
 80007ac:	f000 ffce 	bl	800174c <HAL_GPIO_WritePin>
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000178 	.word	0x20000178
 80007b8:	08004e78 	.word	0x08004e78
 80007bc:	20000174 	.word	0x20000174
 80007c0:	40020800 	.word	0x40020800

080007c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ca:	f000 fc93 	bl	80010f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ce:	f000 f8cd 	bl	800096c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d2:	f000 f9b5 	bl	8000b40 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007d6:	f000 f989 	bl	8000aec <MX_USART2_UART_Init>
  MX_I2C3_Init();
 80007da:	f000 f92f 	bl	8000a3c <MX_I2C3_Init>
  MX_USART1_UART_Init();
 80007de:	f000 f95b 	bl	8000a98 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Making sure charging is disabled.
  HAL_GPIO_WritePin(BAT_CE_GPIO_Port, BAT_CE_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2180      	movs	r1, #128	; 0x80
 80007e6:	484d      	ldr	r0, [pc, #308]	; (800091c <main+0x158>)
 80007e8:	f000 ffb0 	bl	800174c <HAL_GPIO_WritePin>

  printf("Starting I2C device scan...\r\n");
 80007ec:	484c      	ldr	r0, [pc, #304]	; (8000920 <main+0x15c>)
 80007ee:	f003 fe53 	bl	8004498 <puts>
  	HAL_StatusTypeDef res;
  	uint8_t receiveBuffer[1];
  	for(uint16_t i = 0; i < 128; i++) {
 80007f2:	2300      	movs	r3, #0
 80007f4:	81fb      	strh	r3, [r7, #14]
 80007f6:	e027      	b.n	8000848 <main+0x84>
  		res = HAL_I2C_Master_Receive(&hi2c3, (uint16_t)i << 1, receiveBuffer, sizeof(receiveBuffer), HAL_MAX_DELAY);
 80007f8:	89fb      	ldrh	r3, [r7, #14]
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	b299      	uxth	r1, r3
 80007fe:	1d3a      	adds	r2, r7, #4
 8000800:	f04f 33ff 	mov.w	r3, #4294967295
 8000804:	9300      	str	r3, [sp, #0]
 8000806:	2301      	movs	r3, #1
 8000808:	4846      	ldr	r0, [pc, #280]	; (8000924 <main+0x160>)
 800080a:	f001 f915 	bl	8001a38 <HAL_I2C_Master_Receive>
 800080e:	4603      	mov	r3, r0
 8000810:	737b      	strb	r3, [r7, #13]
  		if(res == HAL_OK) {
 8000812:	7b7b      	ldrb	r3, [r7, #13]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d10b      	bne.n	8000830 <main+0x6c>
  			printf("Device found at address 0x%02X\r\n", i);
 8000818:	89fb      	ldrh	r3, [r7, #14]
 800081a:	4619      	mov	r1, r3
 800081c:	4842      	ldr	r0, [pc, #264]	; (8000928 <main+0x164>)
 800081e:	f003 fdb5 	bl	800438c <iprintf>
  			fflush(stdout);
 8000822:	4b42      	ldr	r3, [pc, #264]	; (800092c <main+0x168>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	4618      	mov	r0, r3
 800082a:	f003 fb97 	bl	8003f5c <fflush>
  			break;
 800082e:	e00e      	b.n	800084e <main+0x8a>
  		} else {
  			printf(" - ");
 8000830:	483f      	ldr	r0, [pc, #252]	; (8000930 <main+0x16c>)
 8000832:	f003 fdab 	bl	800438c <iprintf>
  			fflush(stdout);
 8000836:	4b3d      	ldr	r3, [pc, #244]	; (800092c <main+0x168>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	689b      	ldr	r3, [r3, #8]
 800083c:	4618      	mov	r0, r3
 800083e:	f003 fb8d 	bl	8003f5c <fflush>
  	for(uint16_t i = 0; i < 128; i++) {
 8000842:	89fb      	ldrh	r3, [r7, #14]
 8000844:	3301      	adds	r3, #1
 8000846:	81fb      	strh	r3, [r7, #14]
 8000848:	89fb      	ldrh	r3, [r7, #14]
 800084a:	2b7f      	cmp	r3, #127	; 0x7f
 800084c:	d9d4      	bls.n	80007f8 <main+0x34>
  		}
  	}

  	printf("\r\n~*BATTBABY*~\r\n");
 800084e:	4839      	ldr	r0, [pc, #228]	; (8000934 <main+0x170>)
 8000850:	f003 fe22 	bl	8004498 <puts>
  	// Checking for connection
  	while (1) {
  		if (HAL_I2C_Master_Receive(&hi2c3, (uint16_t) BQ27441_I2C_ADDRESS << 1, receiveBuffer, sizeof(receiveBuffer), HAL_MAX_DELAY) == HAL_OK) {
 8000854:	1d3a      	adds	r2, r7, #4
 8000856:	f04f 33ff 	mov.w	r3, #4294967295
 800085a:	9300      	str	r3, [sp, #0]
 800085c:	2301      	movs	r3, #1
 800085e:	21aa      	movs	r1, #170	; 0xaa
 8000860:	4830      	ldr	r0, [pc, #192]	; (8000924 <main+0x160>)
 8000862:	f001 f8e9 	bl	8001a38 <HAL_I2C_Master_Receive>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d1f3      	bne.n	8000854 <main+0x90>
  			printf("Device found\r\n");
 800086c:	4832      	ldr	r0, [pc, #200]	; (8000938 <main+0x174>)
 800086e:	f003 fe13 	bl	8004498 <puts>
  			break;
 8000872:	bf00      	nop
  		}
  	}

    printf("Attempting to read BQ27441 device type...\r\n");
 8000874:	4831      	ldr	r0, [pc, #196]	; (800093c <main+0x178>)
 8000876:	f003 fe0f 	bl	8004498 <puts>
    uint16_t deviceType = BQ27441_deviceType();
 800087a:	f7ff ff1d 	bl	80006b8 <BQ27441_deviceType>
 800087e:	4603      	mov	r3, r0
 8000880:	817b      	strh	r3, [r7, #10]
    if (deviceType != 0) {
 8000882:	897b      	ldrh	r3, [r7, #10]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d005      	beq.n	8000894 <main+0xd0>
  	  printf("BQ27441 Device Type: 0x%04X\r\n", deviceType);
 8000888:	897b      	ldrh	r3, [r7, #10]
 800088a:	4619      	mov	r1, r3
 800088c:	482c      	ldr	r0, [pc, #176]	; (8000940 <main+0x17c>)
 800088e:	f003 fd7d 	bl	800438c <iprintf>
 8000892:	e002      	b.n	800089a <main+0xd6>
    } else {
  	  printf("Failed to read BQ27441 device type.\r\n");
 8000894:	482b      	ldr	r0, [pc, #172]	; (8000944 <main+0x180>)
 8000896:	f003 fdff 	bl	8004498 <puts>
    }
    if (BQ27441_init(&BQ27441)) {
 800089a:	482b      	ldr	r0, [pc, #172]	; (8000948 <main+0x184>)
 800089c:	f7ff ff32 	bl	8000704 <BQ27441_init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d023      	beq.n	80008ee <main+0x12a>
    	HAL_Delay(100);
 80008a6:	2064      	movs	r0, #100	; 0x64
 80008a8:	f000 fc96 	bl	80011d8 <HAL_Delay>
  	  printf("BQ27441 initialization successful.\r\n");
 80008ac:	4827      	ldr	r0, [pc, #156]	; (800094c <main+0x188>)
 80008ae:	f003 fdf3 	bl	8004498 <puts>
  	  uint16_t socValue = BQ27441_soc(FILTERED);
 80008b2:	2000      	movs	r0, #0
 80008b4:	f7ff fec8 	bl	8000648 <BQ27441_soc>
 80008b8:	4603      	mov	r3, r0
 80008ba:	813b      	strh	r3, [r7, #8]
  	    printf("State of Charge: %u%%\r\n", BQ27441_soc(UNFILTERED));
 80008bc:	2001      	movs	r0, #1
 80008be:	f7ff fec3 	bl	8000648 <BQ27441_soc>
 80008c2:	4603      	mov	r3, r0
 80008c4:	4619      	mov	r1, r3
 80008c6:	4822      	ldr	r0, [pc, #136]	; (8000950 <main+0x18c>)
 80008c8:	f003 fd60 	bl	800438c <iprintf>
  	    printf("Voltage: %dmV\r\n", BQ27441_voltage());
 80008cc:	f7ff feda 	bl	8000684 <BQ27441_voltage>
 80008d0:	4603      	mov	r3, r0
 80008d2:	4619      	mov	r1, r3
 80008d4:	481f      	ldr	r0, [pc, #124]	; (8000954 <main+0x190>)
 80008d6:	f003 fd59 	bl	800438c <iprintf>
  	    uint16_t power = BQ27441_power();
 80008da:	f7ff fedb 	bl	8000694 <BQ27441_power>
 80008de:	4603      	mov	r3, r0
 80008e0:	80fb      	strh	r3, [r7, #6]
  	    printf("Power: %umAh\r\n", power);
 80008e2:	88fb      	ldrh	r3, [r7, #6]
 80008e4:	4619      	mov	r1, r3
 80008e6:	481c      	ldr	r0, [pc, #112]	; (8000958 <main+0x194>)
 80008e8:	f003 fd50 	bl	800438c <iprintf>
 80008ec:	e002      	b.n	80008f4 <main+0x130>
    } else {
  	  printf("BQ27441 initialization failed.\r\n");
 80008ee:	481b      	ldr	r0, [pc, #108]	; (800095c <main+0x198>)
 80008f0:	f003 fdd2 	bl	8004498 <puts>
    }
    check_charging();
 80008f4:	f7ff ff1e 	bl	8000734 <check_charging>
    printf("Charging: %d\r\n", bat_charging);
 80008f8:	4b19      	ldr	r3, [pc, #100]	; (8000960 <main+0x19c>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4619      	mov	r1, r3
 80008fe:	4819      	ldr	r0, [pc, #100]	; (8000964 <main+0x1a0>)
 8000900:	f003 fd44 	bl	800438c <iprintf>
    printf("%d\r\n", BQ27441_opconfig() & BQ27441_OPCONFIG_BATLOWEN);
 8000904:	f7ff fecf 	bl	80006a6 <BQ27441_opconfig>
 8000908:	4603      	mov	r3, r0
 800090a:	b29b      	uxth	r3, r3
 800090c:	f003 0304 	and.w	r3, r3, #4
 8000910:	4619      	mov	r1, r3
 8000912:	4815      	ldr	r0, [pc, #84]	; (8000968 <main+0x1a4>)
 8000914:	f003 fd3a 	bl	800438c <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000918:	e7fe      	b.n	8000918 <main+0x154>
 800091a:	bf00      	nop
 800091c:	40020800 	.word	0x40020800
 8000920:	08004e8c 	.word	0x08004e8c
 8000924:	20000098 	.word	0x20000098
 8000928:	08004eac 	.word	0x08004eac
 800092c:	20000018 	.word	0x20000018
 8000930:	08004ed0 	.word	0x08004ed0
 8000934:	08004ed4 	.word	0x08004ed4
 8000938:	08004ee4 	.word	0x08004ee4
 800093c:	08004ef4 	.word	0x08004ef4
 8000940:	08004f20 	.word	0x08004f20
 8000944:	08004f40 	.word	0x08004f40
 8000948:	20000000 	.word	0x20000000
 800094c:	08004f68 	.word	0x08004f68
 8000950:	08004f8c 	.word	0x08004f8c
 8000954:	08004fa4 	.word	0x08004fa4
 8000958:	08004fb4 	.word	0x08004fb4
 800095c:	08004fc4 	.word	0x08004fc4
 8000960:	20000174 	.word	0x20000174
 8000964:	08004fe4 	.word	0x08004fe4
 8000968:	08004ff4 	.word	0x08004ff4

0800096c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b094      	sub	sp, #80	; 0x50
 8000970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000972:	f107 0320 	add.w	r3, r7, #32
 8000976:	2230      	movs	r2, #48	; 0x30
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f003 fc1d 	bl	80041ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000990:	2300      	movs	r3, #0
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	4b27      	ldr	r3, [pc, #156]	; (8000a34 <SystemClock_Config+0xc8>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000998:	4a26      	ldr	r2, [pc, #152]	; (8000a34 <SystemClock_Config+0xc8>)
 800099a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099e:	6413      	str	r3, [r2, #64]	; 0x40
 80009a0:	4b24      	ldr	r3, [pc, #144]	; (8000a34 <SystemClock_Config+0xc8>)
 80009a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009ac:	2300      	movs	r3, #0
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <SystemClock_Config+0xcc>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a20      	ldr	r2, [pc, #128]	; (8000a38 <SystemClock_Config+0xcc>)
 80009b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009ba:	6013      	str	r3, [r2, #0]
 80009bc:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <SystemClock_Config+0xcc>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009c8:	2301      	movs	r3, #1
 80009ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009cc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d2:	2302      	movs	r3, #2
 80009d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009dc:	2304      	movs	r3, #4
 80009de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80009e0:	2360      	movs	r3, #96	; 0x60
 80009e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009e4:	2302      	movs	r3, #2
 80009e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009e8:	2304      	movs	r3, #4
 80009ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ec:	f107 0320 	add.w	r3, r7, #32
 80009f0:	4618      	mov	r0, r3
 80009f2:	f002 f991 	bl	8002d18 <HAL_RCC_OscConfig>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009fc:	f000 f94d 	bl	8000c9a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a00:	230f      	movs	r3, #15
 8000a02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a04:	2302      	movs	r3, #2
 8000a06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a16:	f107 030c 	add.w	r3, r7, #12
 8000a1a:	2103      	movs	r1, #3
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f002 fbf3 	bl	8003208 <HAL_RCC_ClockConfig>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a28:	f000 f937 	bl	8000c9a <Error_Handler>
  }
}
 8000a2c:	bf00      	nop
 8000a2e:	3750      	adds	r7, #80	; 0x50
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40007000 	.word	0x40007000

08000a3c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <MX_I2C3_Init+0x50>)
 8000a42:	4a13      	ldr	r2, [pc, #76]	; (8000a90 <MX_I2C3_Init+0x54>)
 8000a44:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <MX_I2C3_Init+0x50>)
 8000a48:	4a12      	ldr	r2, [pc, #72]	; (8000a94 <MX_I2C3_Init+0x58>)
 8000a4a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <MX_I2C3_Init+0x50>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <MX_I2C3_Init+0x50>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <MX_I2C3_Init+0x50>)
 8000a5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a5e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a60:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <MX_I2C3_Init+0x50>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <MX_I2C3_Init+0x50>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a6c:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <MX_I2C3_Init+0x50>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <MX_I2C3_Init+0x50>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a78:	4804      	ldr	r0, [pc, #16]	; (8000a8c <MX_I2C3_Init+0x50>)
 8000a7a:	f000 fe99 	bl	80017b0 <HAL_I2C_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000a84:	f000 f909 	bl	8000c9a <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000098 	.word	0x20000098
 8000a90:	40005c00 	.word	0x40005c00
 8000a94:	00061a80 	.word	0x00061a80

08000a98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_USART1_UART_Init+0x4c>)
 8000a9e:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <MX_USART1_UART_Init+0x50>)
 8000aa0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <MX_USART1_UART_Init+0x4c>)
 8000aa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <MX_USART1_UART_Init+0x4c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_USART1_UART_Init+0x4c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <MX_USART1_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_USART1_UART_Init+0x4c>)
 8000abe:	220c      	movs	r2, #12
 8000ac0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <MX_USART1_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_USART1_UART_Init+0x4c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_USART1_UART_Init+0x4c>)
 8000ad0:	f002 fdba 	bl	8003648 <HAL_UART_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ada:	f000 f8de 	bl	8000c9a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200000ec 	.word	0x200000ec
 8000ae8:	40011000 	.word	0x40011000

08000aec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000af0:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <MX_USART2_UART_Init+0x4c>)
 8000af2:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <MX_USART2_UART_Init+0x50>)
 8000af4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <MX_USART2_UART_Init+0x4c>)
 8000af8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000afc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_USART2_UART_Init+0x4c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <MX_USART2_UART_Init+0x4c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <MX_USART2_UART_Init+0x4c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <MX_USART2_UART_Init+0x4c>)
 8000b12:	220c      	movs	r2, #12
 8000b14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b16:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <MX_USART2_UART_Init+0x4c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <MX_USART2_UART_Init+0x4c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b22:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_USART2_UART_Init+0x4c>)
 8000b24:	f002 fd90 	bl	8003648 <HAL_UART_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b2e:	f000 f8b4 	bl	8000c9a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000130 	.word	0x20000130
 8000b3c:	40004400 	.word	0x40004400

08000b40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
 8000b54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	4b46      	ldr	r3, [pc, #280]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a45      	ldr	r2, [pc, #276]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000b60:	f043 0304 	orr.w	r3, r3, #4
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b43      	ldr	r3, [pc, #268]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0304 	and.w	r3, r3, #4
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	4b3f      	ldr	r3, [pc, #252]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a3e      	ldr	r2, [pc, #248]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b3c      	ldr	r3, [pc, #240]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	4b38      	ldr	r3, [pc, #224]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a37      	ldr	r2, [pc, #220]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b35      	ldr	r3, [pc, #212]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	4b31      	ldr	r3, [pc, #196]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a30      	ldr	r2, [pc, #192]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000bb4:	f043 0302 	orr.w	r3, r3, #2
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b2e      	ldr	r3, [pc, #184]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2120      	movs	r1, #32
 8000bca:	482b      	ldr	r0, [pc, #172]	; (8000c78 <MX_GPIO_Init+0x138>)
 8000bcc:	f000 fdbe 	bl	800174c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BAT_CE_GPIO_Port, BAT_CE_Pin, GPIO_PIN_RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2180      	movs	r1, #128	; 0x80
 8000bd4:	4829      	ldr	r0, [pc, #164]	; (8000c7c <MX_GPIO_Init+0x13c>)
 8000bd6:	f000 fdb9 	bl	800174c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000be0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4822      	ldr	r0, [pc, #136]	; (8000c7c <MX_GPIO_Init+0x13c>)
 8000bf2:	f000 fc27 	bl	8001444 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bf6:	2320      	movs	r3, #32
 8000bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	481a      	ldr	r0, [pc, #104]	; (8000c78 <MX_GPIO_Init+0x138>)
 8000c0e:	f000 fc19 	bl	8001444 <HAL_GPIO_Init>

  /*Configure GPIO pin : BAT_CE_Pin */
  GPIO_InitStruct.Pin = BAT_CE_Pin;
 8000c12:	2380      	movs	r3, #128	; 0x80
 8000c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BAT_CE_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	4814      	ldr	r0, [pc, #80]	; (8000c7c <MX_GPIO_Init+0x13c>)
 8000c2a:	f000 fc0b 	bl	8001444 <HAL_GPIO_Init>

  /*Configure GPIO pin : BAT_GPOUT_Pin */
  GPIO_InitStruct.Pin = BAT_GPOUT_Pin;
 8000c2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c34:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BAT_GPOUT_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	480d      	ldr	r0, [pc, #52]	; (8000c7c <MX_GPIO_Init+0x13c>)
 8000c46:	f000 fbfd 	bl	8001444 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	2017      	movs	r0, #23
 8000c50:	f000 fbc1 	bl	80013d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c54:	2017      	movs	r0, #23
 8000c56:	f000 fbda 	bl	800140e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	2028      	movs	r0, #40	; 0x28
 8000c60:	f000 fbb9 	bl	80013d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c64:	2028      	movs	r0, #40	; 0x28
 8000c66:	f000 fbd2 	bl	800140e <HAL_NVIC_EnableIRQ>

}
 8000c6a:	bf00      	nop
 8000c6c:	3728      	adds	r7, #40	; 0x28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020000 	.word	0x40020000
 8000c7c:	40020800 	.word	0x40020800

08000c80 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	80fb      	strh	r3, [r7, #6]
	 if ((GPIO_Pin == B1_Pin || BAT_GPOUT_Pin)) {
		 check_charging();
 8000c8a:	f7ff fd53 	bl	8000734 <check_charging>
		 updateBat();
 8000c8e:	f7ff fd6b 	bl	8000768 <updateBat>
	 }
	 else {
		 __NOP();
	 }
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c9e:	b672      	cpsid	i
}
 8000ca0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <Error_Handler+0x8>

08000ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <HAL_MspInit+0x4c>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb2:	4a0f      	ldr	r2, [pc, #60]	; (8000cf0 <HAL_MspInit+0x4c>)
 8000cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cba:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <HAL_MspInit+0x4c>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	603b      	str	r3, [r7, #0]
 8000cca:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <HAL_MspInit+0x4c>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	4a08      	ldr	r2, [pc, #32]	; (8000cf0 <HAL_MspInit+0x4c>)
 8000cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_MspInit+0x4c>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cde:	603b      	str	r3, [r7, #0]
 8000ce0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ce2:	2007      	movs	r0, #7
 8000ce4:	f000 fb6c 	bl	80013c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40023800 	.word	0x40023800

08000cf4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a29      	ldr	r2, [pc, #164]	; (8000db8 <HAL_I2C_MspInit+0xc4>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d14b      	bne.n	8000dae <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	4b28      	ldr	r3, [pc, #160]	; (8000dbc <HAL_I2C_MspInit+0xc8>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a27      	ldr	r2, [pc, #156]	; (8000dbc <HAL_I2C_MspInit+0xc8>)
 8000d20:	f043 0304 	orr.w	r3, r3, #4
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b25      	ldr	r3, [pc, #148]	; (8000dbc <HAL_I2C_MspInit+0xc8>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0304 	and.w	r3, r3, #4
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b21      	ldr	r3, [pc, #132]	; (8000dbc <HAL_I2C_MspInit+0xc8>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a20      	ldr	r2, [pc, #128]	; (8000dbc <HAL_I2C_MspInit+0xc8>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b1e      	ldr	r3, [pc, #120]	; (8000dbc <HAL_I2C_MspInit+0xc8>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = BAT_SDA_Pin;
 8000d4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d54:	2312      	movs	r3, #18
 8000d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d60:	2304      	movs	r3, #4
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BAT_SDA_GPIO_Port, &GPIO_InitStruct);
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4815      	ldr	r0, [pc, #84]	; (8000dc0 <HAL_I2C_MspInit+0xcc>)
 8000d6c:	f000 fb6a 	bl	8001444 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BAT_SCL_Pin;
 8000d70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d76:	2312      	movs	r3, #18
 8000d78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d82:	2304      	movs	r3, #4
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BAT_SCL_GPIO_Port, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <HAL_I2C_MspInit+0xd0>)
 8000d8e:	f000 fb59 	bl	8001444 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <HAL_I2C_MspInit+0xc8>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	4a08      	ldr	r2, [pc, #32]	; (8000dbc <HAL_I2C_MspInit+0xc8>)
 8000d9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000da0:	6413      	str	r3, [r2, #64]	; 0x40
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_I2C_MspInit+0xc8>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000dae:	bf00      	nop
 8000db0:	3728      	adds	r7, #40	; 0x28
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40005c00 	.word	0x40005c00
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020800 	.word	0x40020800
 8000dc4:	40020000 	.word	0x40020000

08000dc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08c      	sub	sp, #48	; 0x30
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 031c 	add.w	r3, r7, #28
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a32      	ldr	r2, [pc, #200]	; (8000eb0 <HAL_UART_MspInit+0xe8>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d12d      	bne.n	8000e46 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	61bb      	str	r3, [r7, #24]
 8000dee:	4b31      	ldr	r3, [pc, #196]	; (8000eb4 <HAL_UART_MspInit+0xec>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	4a30      	ldr	r2, [pc, #192]	; (8000eb4 <HAL_UART_MspInit+0xec>)
 8000df4:	f043 0310 	orr.w	r3, r3, #16
 8000df8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfa:	4b2e      	ldr	r3, [pc, #184]	; (8000eb4 <HAL_UART_MspInit+0xec>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	f003 0310 	and.w	r3, r3, #16
 8000e02:	61bb      	str	r3, [r7, #24]
 8000e04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	4b2a      	ldr	r3, [pc, #168]	; (8000eb4 <HAL_UART_MspInit+0xec>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a29      	ldr	r2, [pc, #164]	; (8000eb4 <HAL_UART_MspInit+0xec>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b27      	ldr	r3, [pc, #156]	; (8000eb4 <HAL_UART_MspInit+0xec>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
 8000e22:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e30:	2303      	movs	r3, #3
 8000e32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e34:	2307      	movs	r3, #7
 8000e36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e38:	f107 031c 	add.w	r3, r7, #28
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	481e      	ldr	r0, [pc, #120]	; (8000eb8 <HAL_UART_MspInit+0xf0>)
 8000e40:	f000 fb00 	bl	8001444 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e44:	e030      	b.n	8000ea8 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a1c      	ldr	r2, [pc, #112]	; (8000ebc <HAL_UART_MspInit+0xf4>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d12b      	bne.n	8000ea8 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e50:	2300      	movs	r3, #0
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <HAL_UART_MspInit+0xec>)
 8000e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e58:	4a16      	ldr	r2, [pc, #88]	; (8000eb4 <HAL_UART_MspInit+0xec>)
 8000e5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e60:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <HAL_UART_MspInit+0xec>)
 8000e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <HAL_UART_MspInit+0xec>)
 8000e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e74:	4a0f      	ldr	r2, [pc, #60]	; (8000eb4 <HAL_UART_MspInit+0xec>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7c:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <HAL_UART_MspInit+0xec>)
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e88:	230c      	movs	r3, #12
 8000e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e94:	2303      	movs	r3, #3
 8000e96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e98:	2307      	movs	r3, #7
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9c:	f107 031c 	add.w	r3, r7, #28
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <HAL_UART_MspInit+0xf0>)
 8000ea4:	f000 face 	bl	8001444 <HAL_GPIO_Init>
}
 8000ea8:	bf00      	nop
 8000eaa:	3730      	adds	r7, #48	; 0x30
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40011000 	.word	0x40011000
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40020000 	.word	0x40020000
 8000ebc:	40004400 	.word	0x40004400

08000ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <NMI_Handler+0x4>

08000ec6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eca:	e7fe      	b.n	8000eca <HardFault_Handler+0x4>

08000ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <MemManage_Handler+0x4>

08000ed2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <BusFault_Handler+0x4>

08000ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <UsageFault_Handler+0x4>

08000ede <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f0c:	f000 f944 	bl	8001198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BAT_GPOUT_Pin);
 8000f18:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f1c:	f000 fc30 	bl	8001780 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f28:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f2c:	f000 fc28 	bl	8001780 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	e00a      	b.n	8000f5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f46:	f3af 8000 	nop.w
 8000f4a:	4601      	mov	r1, r0
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	1c5a      	adds	r2, r3, #1
 8000f50:	60ba      	str	r2, [r7, #8]
 8000f52:	b2ca      	uxtb	r2, r1
 8000f54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	697a      	ldr	r2, [r7, #20]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	dbf0      	blt.n	8000f46 <_read+0x12>
  }

  return len;
 8000f64:	687b      	ldr	r3, [r7, #4]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3718      	adds	r7, #24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b086      	sub	sp, #24
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	60f8      	str	r0, [r7, #12]
 8000f76:	60b9      	str	r1, [r7, #8]
 8000f78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
 8000f7e:	e009      	b.n	8000f94 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	1c5a      	adds	r2, r3, #1
 8000f84:	60ba      	str	r2, [r7, #8]
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fafb 	bl	8000584 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	3301      	adds	r3, #1
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	697a      	ldr	r2, [r7, #20]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	dbf1      	blt.n	8000f80 <_write+0x12>
  }
  return len;
 8000f9c:	687b      	ldr	r3, [r7, #4]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <_close>:

int _close(int file)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
 8000fc6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fce:	605a      	str	r2, [r3, #4]
  return 0;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <_isatty>:

int _isatty(int file)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b083      	sub	sp, #12
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fe6:	2301      	movs	r3, #1
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
	...

08001010 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001018:	4a14      	ldr	r2, [pc, #80]	; (800106c <_sbrk+0x5c>)
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <_sbrk+0x60>)
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001024:	4b13      	ldr	r3, [pc, #76]	; (8001074 <_sbrk+0x64>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d102      	bne.n	8001032 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800102c:	4b11      	ldr	r3, [pc, #68]	; (8001074 <_sbrk+0x64>)
 800102e:	4a12      	ldr	r2, [pc, #72]	; (8001078 <_sbrk+0x68>)
 8001030:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001032:	4b10      	ldr	r3, [pc, #64]	; (8001074 <_sbrk+0x64>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4413      	add	r3, r2
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	429a      	cmp	r2, r3
 800103e:	d207      	bcs.n	8001050 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001040:	f002 fec4 	bl	8003dcc <__errno>
 8001044:	4603      	mov	r3, r0
 8001046:	220c      	movs	r2, #12
 8001048:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
 800104e:	e009      	b.n	8001064 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <_sbrk+0x64>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001056:	4b07      	ldr	r3, [pc, #28]	; (8001074 <_sbrk+0x64>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	4a05      	ldr	r2, [pc, #20]	; (8001074 <_sbrk+0x64>)
 8001060:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001062:	68fb      	ldr	r3, [r7, #12]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20020000 	.word	0x20020000
 8001070:	00000400 	.word	0x00000400
 8001074:	2000017c 	.word	0x2000017c
 8001078:	20000198 	.word	0x20000198

0800107c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <SystemInit+0x20>)
 8001082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001086:	4a05      	ldr	r2, [pc, #20]	; (800109c <SystemInit+0x20>)
 8001088:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800108c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010a4:	480d      	ldr	r0, [pc, #52]	; (80010dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010a6:	490e      	ldr	r1, [pc, #56]	; (80010e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010a8:	4a0e      	ldr	r2, [pc, #56]	; (80010e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ac:	e002      	b.n	80010b4 <LoopCopyDataInit>

080010ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b2:	3304      	adds	r3, #4

080010b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b8:	d3f9      	bcc.n	80010ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ba:	4a0b      	ldr	r2, [pc, #44]	; (80010e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010bc:	4c0b      	ldr	r4, [pc, #44]	; (80010ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c0:	e001      	b.n	80010c6 <LoopFillZerobss>

080010c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c4:	3204      	adds	r2, #4

080010c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c8:	d3fb      	bcc.n	80010c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010ca:	f7ff ffd7 	bl	800107c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ce:	f003 f84d 	bl	800416c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010d2:	f7ff fb77 	bl	80007c4 <main>
  bx  lr    
 80010d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80010e4:	080050bc 	.word	0x080050bc
  ldr r2, =_sbss
 80010e8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80010ec:	20000194 	.word	0x20000194

080010f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010f0:	e7fe      	b.n	80010f0 <ADC_IRQHandler>
	...

080010f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010f8:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <HAL_Init+0x40>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a0d      	ldr	r2, [pc, #52]	; (8001134 <HAL_Init+0x40>)
 80010fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001102:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001104:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <HAL_Init+0x40>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <HAL_Init+0x40>)
 800110a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800110e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001110:	4b08      	ldr	r3, [pc, #32]	; (8001134 <HAL_Init+0x40>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a07      	ldr	r2, [pc, #28]	; (8001134 <HAL_Init+0x40>)
 8001116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800111a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800111c:	2003      	movs	r0, #3
 800111e:	f000 f94f 	bl	80013c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001122:	2000      	movs	r0, #0
 8001124:	f000 f808 	bl	8001138 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001128:	f7ff fdbc 	bl	8000ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40023c00 	.word	0x40023c00

08001138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <HAL_InitTick+0x54>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <HAL_InitTick+0x58>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	4619      	mov	r1, r3
 800114a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001152:	fbb2 f3f3 	udiv	r3, r2, r3
 8001156:	4618      	mov	r0, r3
 8001158:	f000 f967 	bl	800142a <HAL_SYSTICK_Config>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e00e      	b.n	8001184 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b0f      	cmp	r3, #15
 800116a:	d80a      	bhi.n	8001182 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800116c:	2200      	movs	r2, #0
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	f000 f92f 	bl	80013d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001178:	4a06      	ldr	r2, [pc, #24]	; (8001194 <HAL_InitTick+0x5c>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800117e:	2300      	movs	r3, #0
 8001180:	e000      	b.n	8001184 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
}
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	2000000c 	.word	0x2000000c
 8001190:	20000014 	.word	0x20000014
 8001194:	20000010 	.word	0x20000010

08001198 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_IncTick+0x20>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_IncTick+0x24>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4413      	add	r3, r2
 80011a8:	4a04      	ldr	r2, [pc, #16]	; (80011bc <HAL_IncTick+0x24>)
 80011aa:	6013      	str	r3, [r2, #0]
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	20000014 	.word	0x20000014
 80011bc:	20000180 	.word	0x20000180

080011c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return uwTick;
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <HAL_GetTick+0x14>)
 80011c6:	681b      	ldr	r3, [r3, #0]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	20000180 	.word	0x20000180

080011d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e0:	f7ff ffee 	bl	80011c0 <HAL_GetTick>
 80011e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f0:	d005      	beq.n	80011fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011f2:	4b0a      	ldr	r3, [pc, #40]	; (800121c <HAL_Delay+0x44>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	461a      	mov	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4413      	add	r3, r2
 80011fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011fe:	bf00      	nop
 8001200:	f7ff ffde 	bl	80011c0 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	429a      	cmp	r2, r3
 800120e:	d8f7      	bhi.n	8001200 <HAL_Delay+0x28>
  {
  }
}
 8001210:	bf00      	nop
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000014 	.word	0x20000014

08001220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <__NVIC_SetPriorityGrouping+0x44>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001236:	68ba      	ldr	r2, [r7, #8]
 8001238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800123c:	4013      	ands	r3, r2
 800123e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001248:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800124c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001252:	4a04      	ldr	r2, [pc, #16]	; (8001264 <__NVIC_SetPriorityGrouping+0x44>)
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	60d3      	str	r3, [r2, #12]
}
 8001258:	bf00      	nop
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <__NVIC_GetPriorityGrouping+0x18>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	0a1b      	lsrs	r3, r3, #8
 8001272:	f003 0307 	and.w	r3, r3, #7
}
 8001276:	4618      	mov	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	2b00      	cmp	r3, #0
 8001294:	db0b      	blt.n	80012ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	f003 021f 	and.w	r2, r3, #31
 800129c:	4907      	ldr	r1, [pc, #28]	; (80012bc <__NVIC_EnableIRQ+0x38>)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	095b      	lsrs	r3, r3, #5
 80012a4:	2001      	movs	r0, #1
 80012a6:	fa00 f202 	lsl.w	r2, r0, r2
 80012aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000e100 	.word	0xe000e100

080012c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	6039      	str	r1, [r7, #0]
 80012ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	db0a      	blt.n	80012ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	490c      	ldr	r1, [pc, #48]	; (800130c <__NVIC_SetPriority+0x4c>)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	0112      	lsls	r2, r2, #4
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	440b      	add	r3, r1
 80012e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e8:	e00a      	b.n	8001300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4908      	ldr	r1, [pc, #32]	; (8001310 <__NVIC_SetPriority+0x50>)
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	3b04      	subs	r3, #4
 80012f8:	0112      	lsls	r2, r2, #4
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	440b      	add	r3, r1
 80012fe:	761a      	strb	r2, [r3, #24]
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000e100 	.word	0xe000e100
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001314:	b480      	push	{r7}
 8001316:	b089      	sub	sp, #36	; 0x24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f1c3 0307 	rsb	r3, r3, #7
 800132e:	2b04      	cmp	r3, #4
 8001330:	bf28      	it	cs
 8001332:	2304      	movcs	r3, #4
 8001334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3304      	adds	r3, #4
 800133a:	2b06      	cmp	r3, #6
 800133c:	d902      	bls.n	8001344 <NVIC_EncodePriority+0x30>
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3b03      	subs	r3, #3
 8001342:	e000      	b.n	8001346 <NVIC_EncodePriority+0x32>
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	f04f 32ff 	mov.w	r2, #4294967295
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43da      	mvns	r2, r3
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	401a      	ands	r2, r3
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800135c:	f04f 31ff 	mov.w	r1, #4294967295
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	fa01 f303 	lsl.w	r3, r1, r3
 8001366:	43d9      	mvns	r1, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800136c:	4313      	orrs	r3, r2
         );
}
 800136e:	4618      	mov	r0, r3
 8001370:	3724      	adds	r7, #36	; 0x24
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
	...

0800137c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800138c:	d301      	bcc.n	8001392 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138e:	2301      	movs	r3, #1
 8001390:	e00f      	b.n	80013b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001392:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <SysTick_Config+0x40>)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3b01      	subs	r3, #1
 8001398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800139a:	210f      	movs	r1, #15
 800139c:	f04f 30ff 	mov.w	r0, #4294967295
 80013a0:	f7ff ff8e 	bl	80012c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <SysTick_Config+0x40>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013aa:	4b04      	ldr	r3, [pc, #16]	; (80013bc <SysTick_Config+0x40>)
 80013ac:	2207      	movs	r2, #7
 80013ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	e000e010 	.word	0xe000e010

080013c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ff29 	bl	8001220 <__NVIC_SetPriorityGrouping>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b086      	sub	sp, #24
 80013da:	af00      	add	r7, sp, #0
 80013dc:	4603      	mov	r3, r0
 80013de:	60b9      	str	r1, [r7, #8]
 80013e0:	607a      	str	r2, [r7, #4]
 80013e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013e8:	f7ff ff3e 	bl	8001268 <__NVIC_GetPriorityGrouping>
 80013ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	6978      	ldr	r0, [r7, #20]
 80013f4:	f7ff ff8e 	bl	8001314 <NVIC_EncodePriority>
 80013f8:	4602      	mov	r2, r0
 80013fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fe:	4611      	mov	r1, r2
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff5d 	bl	80012c0 <__NVIC_SetPriority>
}
 8001406:	bf00      	nop
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	4603      	mov	r3, r0
 8001416:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff31 	bl	8001284 <__NVIC_EnableIRQ>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff ffa2 	bl	800137c <SysTick_Config>
 8001438:	4603      	mov	r3, r0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001444:	b480      	push	{r7}
 8001446:	b089      	sub	sp, #36	; 0x24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001456:	2300      	movs	r3, #0
 8001458:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
 800145e:	e159      	b.n	8001714 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001460:	2201      	movs	r2, #1
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	4013      	ands	r3, r2
 8001472:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	429a      	cmp	r2, r3
 800147a:	f040 8148 	bne.w	800170e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f003 0303 	and.w	r3, r3, #3
 8001486:	2b01      	cmp	r3, #1
 8001488:	d005      	beq.n	8001496 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001492:	2b02      	cmp	r3, #2
 8001494:	d130      	bne.n	80014f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	2203      	movs	r2, #3
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	68da      	ldr	r2, [r3, #12]
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014cc:	2201      	movs	r2, #1
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4013      	ands	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	091b      	lsrs	r3, r3, #4
 80014e2:	f003 0201 	and.w	r2, r3, #1
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 0303 	and.w	r3, r3, #3
 8001500:	2b03      	cmp	r3, #3
 8001502:	d017      	beq.n	8001534 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	2203      	movs	r2, #3
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	689a      	ldr	r2, [r3, #8]
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4313      	orrs	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f003 0303 	and.w	r3, r3, #3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d123      	bne.n	8001588 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	08da      	lsrs	r2, r3, #3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3208      	adds	r2, #8
 8001548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800154c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	f003 0307 	and.w	r3, r3, #7
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	220f      	movs	r2, #15
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	691a      	ldr	r2, [r3, #16]
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	08da      	lsrs	r2, r3, #3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	3208      	adds	r2, #8
 8001582:	69b9      	ldr	r1, [r7, #24]
 8001584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	2203      	movs	r2, #3
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 0203 	and.w	r2, r3, #3
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f000 80a2 	beq.w	800170e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	4b57      	ldr	r3, [pc, #348]	; (800172c <HAL_GPIO_Init+0x2e8>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d2:	4a56      	ldr	r2, [pc, #344]	; (800172c <HAL_GPIO_Init+0x2e8>)
 80015d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d8:	6453      	str	r3, [r2, #68]	; 0x44
 80015da:	4b54      	ldr	r3, [pc, #336]	; (800172c <HAL_GPIO_Init+0x2e8>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015e6:	4a52      	ldr	r2, [pc, #328]	; (8001730 <HAL_GPIO_Init+0x2ec>)
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	089b      	lsrs	r3, r3, #2
 80015ec:	3302      	adds	r3, #2
 80015ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f003 0303 	and.w	r3, r3, #3
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	220f      	movs	r2, #15
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43db      	mvns	r3, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4013      	ands	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a49      	ldr	r2, [pc, #292]	; (8001734 <HAL_GPIO_Init+0x2f0>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d019      	beq.n	8001646 <HAL_GPIO_Init+0x202>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a48      	ldr	r2, [pc, #288]	; (8001738 <HAL_GPIO_Init+0x2f4>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d013      	beq.n	8001642 <HAL_GPIO_Init+0x1fe>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a47      	ldr	r2, [pc, #284]	; (800173c <HAL_GPIO_Init+0x2f8>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d00d      	beq.n	800163e <HAL_GPIO_Init+0x1fa>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a46      	ldr	r2, [pc, #280]	; (8001740 <HAL_GPIO_Init+0x2fc>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d007      	beq.n	800163a <HAL_GPIO_Init+0x1f6>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a45      	ldr	r2, [pc, #276]	; (8001744 <HAL_GPIO_Init+0x300>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d101      	bne.n	8001636 <HAL_GPIO_Init+0x1f2>
 8001632:	2304      	movs	r3, #4
 8001634:	e008      	b.n	8001648 <HAL_GPIO_Init+0x204>
 8001636:	2307      	movs	r3, #7
 8001638:	e006      	b.n	8001648 <HAL_GPIO_Init+0x204>
 800163a:	2303      	movs	r3, #3
 800163c:	e004      	b.n	8001648 <HAL_GPIO_Init+0x204>
 800163e:	2302      	movs	r3, #2
 8001640:	e002      	b.n	8001648 <HAL_GPIO_Init+0x204>
 8001642:	2301      	movs	r3, #1
 8001644:	e000      	b.n	8001648 <HAL_GPIO_Init+0x204>
 8001646:	2300      	movs	r3, #0
 8001648:	69fa      	ldr	r2, [r7, #28]
 800164a:	f002 0203 	and.w	r2, r2, #3
 800164e:	0092      	lsls	r2, r2, #2
 8001650:	4093      	lsls	r3, r2
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4313      	orrs	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001658:	4935      	ldr	r1, [pc, #212]	; (8001730 <HAL_GPIO_Init+0x2ec>)
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	089b      	lsrs	r3, r3, #2
 800165e:	3302      	adds	r3, #2
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001666:	4b38      	ldr	r3, [pc, #224]	; (8001748 <HAL_GPIO_Init+0x304>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	43db      	mvns	r3, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4013      	ands	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	4313      	orrs	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800168a:	4a2f      	ldr	r2, [pc, #188]	; (8001748 <HAL_GPIO_Init+0x304>)
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001690:	4b2d      	ldr	r3, [pc, #180]	; (8001748 <HAL_GPIO_Init+0x304>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	43db      	mvns	r3, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d003      	beq.n	80016b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016b4:	4a24      	ldr	r2, [pc, #144]	; (8001748 <HAL_GPIO_Init+0x304>)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016ba:	4b23      	ldr	r3, [pc, #140]	; (8001748 <HAL_GPIO_Init+0x304>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	43db      	mvns	r3, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4013      	ands	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016de:	4a1a      	ldr	r2, [pc, #104]	; (8001748 <HAL_GPIO_Init+0x304>)
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016e4:	4b18      	ldr	r3, [pc, #96]	; (8001748 <HAL_GPIO_Init+0x304>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001708:	4a0f      	ldr	r2, [pc, #60]	; (8001748 <HAL_GPIO_Init+0x304>)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3301      	adds	r3, #1
 8001712:	61fb      	str	r3, [r7, #28]
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	2b0f      	cmp	r3, #15
 8001718:	f67f aea2 	bls.w	8001460 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800171c:	bf00      	nop
 800171e:	bf00      	nop
 8001720:	3724      	adds	r7, #36	; 0x24
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800
 8001730:	40013800 	.word	0x40013800
 8001734:	40020000 	.word	0x40020000
 8001738:	40020400 	.word	0x40020400
 800173c:	40020800 	.word	0x40020800
 8001740:	40020c00 	.word	0x40020c00
 8001744:	40021000 	.word	0x40021000
 8001748:	40013c00 	.word	0x40013c00

0800174c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	807b      	strh	r3, [r7, #2]
 8001758:	4613      	mov	r3, r2
 800175a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800175c:	787b      	ldrb	r3, [r7, #1]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001762:	887a      	ldrh	r2, [r7, #2]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001768:	e003      	b.n	8001772 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800176a:	887b      	ldrh	r3, [r7, #2]
 800176c:	041a      	lsls	r2, r3, #16
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	619a      	str	r2, [r3, #24]
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
	...

08001780 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800178c:	695a      	ldr	r2, [r3, #20]
 800178e:	88fb      	ldrh	r3, [r7, #6]
 8001790:	4013      	ands	r3, r2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d006      	beq.n	80017a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001796:	4a05      	ldr	r2, [pc, #20]	; (80017ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001798:	88fb      	ldrh	r3, [r7, #6]
 800179a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800179c:	88fb      	ldrh	r3, [r7, #6]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff fa6e 	bl	8000c80 <HAL_GPIO_EXTI_Callback>
  }
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40013c00 	.word	0x40013c00

080017b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e12b      	b.n	8001a1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d106      	bne.n	80017dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff fa8c 	bl	8000cf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2224      	movs	r2, #36	; 0x24
 80017e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0201 	bic.w	r2, r2, #1
 80017f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001802:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001812:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001814:	f001 fef0 	bl	80035f8 <HAL_RCC_GetPCLK1Freq>
 8001818:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	4a81      	ldr	r2, [pc, #516]	; (8001a24 <HAL_I2C_Init+0x274>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d807      	bhi.n	8001834 <HAL_I2C_Init+0x84>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4a80      	ldr	r2, [pc, #512]	; (8001a28 <HAL_I2C_Init+0x278>)
 8001828:	4293      	cmp	r3, r2
 800182a:	bf94      	ite	ls
 800182c:	2301      	movls	r3, #1
 800182e:	2300      	movhi	r3, #0
 8001830:	b2db      	uxtb	r3, r3
 8001832:	e006      	b.n	8001842 <HAL_I2C_Init+0x92>
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4a7d      	ldr	r2, [pc, #500]	; (8001a2c <HAL_I2C_Init+0x27c>)
 8001838:	4293      	cmp	r3, r2
 800183a:	bf94      	ite	ls
 800183c:	2301      	movls	r3, #1
 800183e:	2300      	movhi	r3, #0
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e0e7      	b.n	8001a1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	4a78      	ldr	r2, [pc, #480]	; (8001a30 <HAL_I2C_Init+0x280>)
 800184e:	fba2 2303 	umull	r2, r3, r2, r3
 8001852:	0c9b      	lsrs	r3, r3, #18
 8001854:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	430a      	orrs	r2, r1
 8001868:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	4a6a      	ldr	r2, [pc, #424]	; (8001a24 <HAL_I2C_Init+0x274>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d802      	bhi.n	8001884 <HAL_I2C_Init+0xd4>
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	3301      	adds	r3, #1
 8001882:	e009      	b.n	8001898 <HAL_I2C_Init+0xe8>
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800188a:	fb02 f303 	mul.w	r3, r2, r3
 800188e:	4a69      	ldr	r2, [pc, #420]	; (8001a34 <HAL_I2C_Init+0x284>)
 8001890:	fba2 2303 	umull	r2, r3, r2, r3
 8001894:	099b      	lsrs	r3, r3, #6
 8001896:	3301      	adds	r3, #1
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6812      	ldr	r2, [r2, #0]
 800189c:	430b      	orrs	r3, r1
 800189e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	495c      	ldr	r1, [pc, #368]	; (8001a24 <HAL_I2C_Init+0x274>)
 80018b4:	428b      	cmp	r3, r1
 80018b6:	d819      	bhi.n	80018ec <HAL_I2C_Init+0x13c>
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	1e59      	subs	r1, r3, #1
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80018c6:	1c59      	adds	r1, r3, #1
 80018c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80018cc:	400b      	ands	r3, r1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d00a      	beq.n	80018e8 <HAL_I2C_Init+0x138>
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	1e59      	subs	r1, r3, #1
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80018e0:	3301      	adds	r3, #1
 80018e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018e6:	e051      	b.n	800198c <HAL_I2C_Init+0x1dc>
 80018e8:	2304      	movs	r3, #4
 80018ea:	e04f      	b.n	800198c <HAL_I2C_Init+0x1dc>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d111      	bne.n	8001918 <HAL_I2C_Init+0x168>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	1e58      	subs	r0, r3, #1
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6859      	ldr	r1, [r3, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	440b      	add	r3, r1
 8001902:	fbb0 f3f3 	udiv	r3, r0, r3
 8001906:	3301      	adds	r3, #1
 8001908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800190c:	2b00      	cmp	r3, #0
 800190e:	bf0c      	ite	eq
 8001910:	2301      	moveq	r3, #1
 8001912:	2300      	movne	r3, #0
 8001914:	b2db      	uxtb	r3, r3
 8001916:	e012      	b.n	800193e <HAL_I2C_Init+0x18e>
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	1e58      	subs	r0, r3, #1
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6859      	ldr	r1, [r3, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	440b      	add	r3, r1
 8001926:	0099      	lsls	r1, r3, #2
 8001928:	440b      	add	r3, r1
 800192a:	fbb0 f3f3 	udiv	r3, r0, r3
 800192e:	3301      	adds	r3, #1
 8001930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001934:	2b00      	cmp	r3, #0
 8001936:	bf0c      	ite	eq
 8001938:	2301      	moveq	r3, #1
 800193a:	2300      	movne	r3, #0
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <HAL_I2C_Init+0x196>
 8001942:	2301      	movs	r3, #1
 8001944:	e022      	b.n	800198c <HAL_I2C_Init+0x1dc>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10e      	bne.n	800196c <HAL_I2C_Init+0x1bc>
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	1e58      	subs	r0, r3, #1
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6859      	ldr	r1, [r3, #4]
 8001956:	460b      	mov	r3, r1
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	440b      	add	r3, r1
 800195c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001960:	3301      	adds	r3, #1
 8001962:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800196a:	e00f      	b.n	800198c <HAL_I2C_Init+0x1dc>
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	1e58      	subs	r0, r3, #1
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6859      	ldr	r1, [r3, #4]
 8001974:	460b      	mov	r3, r1
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	0099      	lsls	r1, r3, #2
 800197c:	440b      	add	r3, r1
 800197e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001982:	3301      	adds	r3, #1
 8001984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001988:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	6809      	ldr	r1, [r1, #0]
 8001990:	4313      	orrs	r3, r2
 8001992:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69da      	ldr	r2, [r3, #28]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6911      	ldr	r1, [r2, #16]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	68d2      	ldr	r2, [r2, #12]
 80019c6:	4311      	orrs	r1, r2
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	6812      	ldr	r2, [r2, #0]
 80019cc:	430b      	orrs	r3, r1
 80019ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	695a      	ldr	r2, [r3, #20]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	431a      	orrs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0201 	orr.w	r2, r2, #1
 80019fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2220      	movs	r2, #32
 8001a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	000186a0 	.word	0x000186a0
 8001a28:	001e847f 	.word	0x001e847f
 8001a2c:	003d08ff 	.word	0x003d08ff
 8001a30:	431bde83 	.word	0x431bde83
 8001a34:	10624dd3 	.word	0x10624dd3

08001a38 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08c      	sub	sp, #48	; 0x30
 8001a3c:	af02      	add	r7, sp, #8
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	607a      	str	r2, [r7, #4]
 8001a42:	461a      	mov	r2, r3
 8001a44:	460b      	mov	r3, r1
 8001a46:	817b      	strh	r3, [r7, #10]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a4c:	f7ff fbb8 	bl	80011c0 <HAL_GetTick>
 8001a50:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b20      	cmp	r3, #32
 8001a5c:	f040 820b 	bne.w	8001e76 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	2319      	movs	r3, #25
 8001a66:	2201      	movs	r2, #1
 8001a68:	497c      	ldr	r1, [pc, #496]	; (8001c5c <HAL_I2C_Master_Receive+0x224>)
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f000 ff76 	bl	800295c <I2C_WaitOnFlagUntilTimeout>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001a76:	2302      	movs	r3, #2
 8001a78:	e1fe      	b.n	8001e78 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d101      	bne.n	8001a88 <HAL_I2C_Master_Receive+0x50>
 8001a84:	2302      	movs	r3, #2
 8001a86:	e1f7      	b.n	8001e78 <HAL_I2C_Master_Receive+0x440>
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d007      	beq.n	8001aae <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f042 0201 	orr.w	r2, r2, #1
 8001aac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001abc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2222      	movs	r2, #34	; 0x22
 8001ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2210      	movs	r2, #16
 8001aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	893a      	ldrh	r2, [r7, #8]
 8001ade:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	4a5c      	ldr	r2, [pc, #368]	; (8001c60 <HAL_I2C_Master_Receive+0x228>)
 8001aee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001af0:	8979      	ldrh	r1, [r7, #10]
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f000 fce4 	bl	80024c4 <I2C_MasterRequestRead>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e1b8      	b.n	8001e78 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d113      	bne.n	8001b36 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b0e:	2300      	movs	r3, #0
 8001b10:	623b      	str	r3, [r7, #32]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	623b      	str	r3, [r7, #32]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	623b      	str	r3, [r7, #32]
 8001b22:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	e18c      	b.n	8001e50 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d11b      	bne.n	8001b76 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	61fb      	str	r3, [r7, #28]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	61fb      	str	r3, [r7, #28]
 8001b62:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	e16c      	b.n	8001e50 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d11b      	bne.n	8001bb6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b8c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61bb      	str	r3, [r7, #24]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	61bb      	str	r3, [r7, #24]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	61bb      	str	r3, [r7, #24]
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	e14c      	b.n	8001e50 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001bc4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	617b      	str	r3, [r7, #20]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001bdc:	e138      	b.n	8001e50 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be2:	2b03      	cmp	r3, #3
 8001be4:	f200 80f1 	bhi.w	8001dca <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d123      	bne.n	8001c38 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bf2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f001 f809 	bl	8002c0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e139      	b.n	8001e78 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	691a      	ldr	r2, [r3, #16]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c16:	1c5a      	adds	r2, r3, #1
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c20:	3b01      	subs	r3, #1
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c36:	e10b      	b.n	8001e50 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d14e      	bne.n	8001cde <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c46:	2200      	movs	r2, #0
 8001c48:	4906      	ldr	r1, [pc, #24]	; (8001c64 <HAL_I2C_Master_Receive+0x22c>)
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f000 fe86 	bl	800295c <I2C_WaitOnFlagUntilTimeout>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d008      	beq.n	8001c68 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e10e      	b.n	8001e78 <HAL_I2C_Master_Receive+0x440>
 8001c5a:	bf00      	nop
 8001c5c:	00100002 	.word	0x00100002
 8001c60:	ffff0000 	.word	0xffff0000
 8001c64:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	691a      	ldr	r2, [r3, #16]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8a:	1c5a      	adds	r2, r3, #1
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c94:	3b01      	subs	r3, #1
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	691a      	ldr	r2, [r3, #16]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	1c5a      	adds	r2, r3, #1
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001cdc:	e0b8      	b.n	8001e50 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	4966      	ldr	r1, [pc, #408]	; (8001e80 <HAL_I2C_Master_Receive+0x448>)
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f000 fe37 	bl	800295c <I2C_WaitOnFlagUntilTimeout>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e0bf      	b.n	8001e78 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	691a      	ldr	r2, [r3, #16]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1a:	1c5a      	adds	r2, r3, #1
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d24:	3b01      	subs	r3, #1
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	3b01      	subs	r3, #1
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d40:	2200      	movs	r2, #0
 8001d42:	494f      	ldr	r1, [pc, #316]	; (8001e80 <HAL_I2C_Master_Receive+0x448>)
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	f000 fe09 	bl	800295c <I2C_WaitOnFlagUntilTimeout>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e091      	b.n	8001e78 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	691a      	ldr	r2, [r3, #16]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d76:	1c5a      	adds	r2, r3, #1
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d80:	3b01      	subs	r3, #1
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	691a      	ldr	r2, [r3, #16]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	1c5a      	adds	r2, r3, #1
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db2:	3b01      	subs	r3, #1
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001dc8:	e042      	b.n	8001e50 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dcc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f000 ff1c 	bl	8002c0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e04c      	b.n	8001e78 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	1c5a      	adds	r2, r3, #1
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d118      	bne.n	8001e50 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	691a      	ldr	r2, [r3, #16]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	1c5a      	adds	r2, r3, #1
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f47f aec2 	bne.w	8001bde <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2220      	movs	r2, #32
 8001e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	e000      	b.n	8001e78 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001e76:	2302      	movs	r3, #2
  }
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3728      	adds	r7, #40	; 0x28
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	00010004 	.word	0x00010004

08001e84 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b088      	sub	sp, #32
 8001e88:	af02      	add	r7, sp, #8
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	4608      	mov	r0, r1
 8001e8e:	4611      	mov	r1, r2
 8001e90:	461a      	mov	r2, r3
 8001e92:	4603      	mov	r3, r0
 8001e94:	817b      	strh	r3, [r7, #10]
 8001e96:	460b      	mov	r3, r1
 8001e98:	813b      	strh	r3, [r7, #8]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e9e:	f7ff f98f 	bl	80011c0 <HAL_GetTick>
 8001ea2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b20      	cmp	r3, #32
 8001eae:	f040 80d9 	bne.w	8002064 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	2319      	movs	r3, #25
 8001eb8:	2201      	movs	r2, #1
 8001eba:	496d      	ldr	r1, [pc, #436]	; (8002070 <HAL_I2C_Mem_Write+0x1ec>)
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 fd4d 	bl	800295c <I2C_WaitOnFlagUntilTimeout>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	e0cc      	b.n	8002066 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d101      	bne.n	8001eda <HAL_I2C_Mem_Write+0x56>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e0c5      	b.n	8002066 <HAL_I2C_Mem_Write+0x1e2>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d007      	beq.n	8001f00 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0201 	orr.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2221      	movs	r2, #33	; 0x21
 8001f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2240      	movs	r2, #64	; 0x40
 8001f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6a3a      	ldr	r2, [r7, #32]
 8001f2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4a4d      	ldr	r2, [pc, #308]	; (8002074 <HAL_I2C_Mem_Write+0x1f0>)
 8001f40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f42:	88f8      	ldrh	r0, [r7, #6]
 8001f44:	893a      	ldrh	r2, [r7, #8]
 8001f46:	8979      	ldrh	r1, [r7, #10]
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	9301      	str	r3, [sp, #4]
 8001f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	4603      	mov	r3, r0
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f000 fb84 	bl	8002660 <I2C_RequestMemoryWrite>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d052      	beq.n	8002004 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e081      	b.n	8002066 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 fdce 	bl	8002b08 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00d      	beq.n	8001f8e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	d107      	bne.n	8001f8a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e06b      	b.n	8002066 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f92:	781a      	ldrb	r2, [r3, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9e:	1c5a      	adds	r2, r3, #1
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b04      	cmp	r3, #4
 8001fca:	d11b      	bne.n	8002004 <HAL_I2C_Mem_Write+0x180>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d017      	beq.n	8002004 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd8:	781a      	ldrb	r2, [r3, #0]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe4:	1c5a      	adds	r2, r3, #1
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1aa      	bne.n	8001f62 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f000 fdba 	bl	8002b8a <I2C_WaitOnBTFFlagUntilTimeout>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00d      	beq.n	8002038 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	2b04      	cmp	r3, #4
 8002022:	d107      	bne.n	8002034 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002032:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e016      	b.n	8002066 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002046:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2220      	movs	r2, #32
 800204c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002060:	2300      	movs	r3, #0
 8002062:	e000      	b.n	8002066 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002064:	2302      	movs	r3, #2
  }
}
 8002066:	4618      	mov	r0, r3
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	00100002 	.word	0x00100002
 8002074:	ffff0000 	.word	0xffff0000

08002078 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08c      	sub	sp, #48	; 0x30
 800207c:	af02      	add	r7, sp, #8
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	4608      	mov	r0, r1
 8002082:	4611      	mov	r1, r2
 8002084:	461a      	mov	r2, r3
 8002086:	4603      	mov	r3, r0
 8002088:	817b      	strh	r3, [r7, #10]
 800208a:	460b      	mov	r3, r1
 800208c:	813b      	strh	r3, [r7, #8]
 800208e:	4613      	mov	r3, r2
 8002090:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002092:	f7ff f895 	bl	80011c0 <HAL_GetTick>
 8002096:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b20      	cmp	r3, #32
 80020a2:	f040 8208 	bne.w	80024b6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	2319      	movs	r3, #25
 80020ac:	2201      	movs	r2, #1
 80020ae:	497b      	ldr	r1, [pc, #492]	; (800229c <HAL_I2C_Mem_Read+0x224>)
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f000 fc53 	bl	800295c <I2C_WaitOnFlagUntilTimeout>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80020bc:	2302      	movs	r3, #2
 80020be:	e1fb      	b.n	80024b8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d101      	bne.n	80020ce <HAL_I2C_Mem_Read+0x56>
 80020ca:	2302      	movs	r3, #2
 80020cc:	e1f4      	b.n	80024b8 <HAL_I2C_Mem_Read+0x440>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d007      	beq.n	80020f4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0201 	orr.w	r2, r2, #1
 80020f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002102:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2222      	movs	r2, #34	; 0x22
 8002108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2240      	movs	r2, #64	; 0x40
 8002110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800211e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002124:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800212a:	b29a      	uxth	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4a5b      	ldr	r2, [pc, #364]	; (80022a0 <HAL_I2C_Mem_Read+0x228>)
 8002134:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002136:	88f8      	ldrh	r0, [r7, #6]
 8002138:	893a      	ldrh	r2, [r7, #8]
 800213a:	8979      	ldrh	r1, [r7, #10]
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	9301      	str	r3, [sp, #4]
 8002140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	4603      	mov	r3, r0
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f000 fb20 	bl	800278c <I2C_RequestMemoryRead>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e1b0      	b.n	80024b8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800215a:	2b00      	cmp	r3, #0
 800215c:	d113      	bne.n	8002186 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800215e:	2300      	movs	r3, #0
 8002160:	623b      	str	r3, [r7, #32]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	623b      	str	r3, [r7, #32]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	623b      	str	r3, [r7, #32]
 8002172:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	e184      	b.n	8002490 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218a:	2b01      	cmp	r3, #1
 800218c:	d11b      	bne.n	80021c6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800219c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800219e:	2300      	movs	r3, #0
 80021a0:	61fb      	str	r3, [r7, #28]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	61fb      	str	r3, [r7, #28]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	61fb      	str	r3, [r7, #28]
 80021b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	e164      	b.n	8002490 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d11b      	bne.n	8002206 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ee:	2300      	movs	r3, #0
 80021f0:	61bb      	str	r3, [r7, #24]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	61bb      	str	r3, [r7, #24]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	61bb      	str	r3, [r7, #24]
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	e144      	b.n	8002490 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	617b      	str	r3, [r7, #20]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	617b      	str	r3, [r7, #20]
 800221a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800221c:	e138      	b.n	8002490 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002222:	2b03      	cmp	r3, #3
 8002224:	f200 80f1 	bhi.w	800240a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222c:	2b01      	cmp	r3, #1
 800222e:	d123      	bne.n	8002278 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002232:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f000 fce9 	bl	8002c0c <I2C_WaitOnRXNEFlagUntilTimeout>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e139      	b.n	80024b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	691a      	ldr	r2, [r3, #16]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	1c5a      	adds	r2, r3, #1
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002260:	3b01      	subs	r3, #1
 8002262:	b29a      	uxth	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800226c:	b29b      	uxth	r3, r3
 800226e:	3b01      	subs	r3, #1
 8002270:	b29a      	uxth	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002276:	e10b      	b.n	8002490 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800227c:	2b02      	cmp	r3, #2
 800227e:	d14e      	bne.n	800231e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002286:	2200      	movs	r2, #0
 8002288:	4906      	ldr	r1, [pc, #24]	; (80022a4 <HAL_I2C_Mem_Read+0x22c>)
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 fb66 	bl	800295c <I2C_WaitOnFlagUntilTimeout>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d008      	beq.n	80022a8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e10e      	b.n	80024b8 <HAL_I2C_Mem_Read+0x440>
 800229a:	bf00      	nop
 800229c:	00100002 	.word	0x00100002
 80022a0:	ffff0000 	.word	0xffff0000
 80022a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	691a      	ldr	r2, [r3, #16]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ca:	1c5a      	adds	r2, r3, #1
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d4:	3b01      	subs	r3, #1
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	3b01      	subs	r3, #1
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	691a      	ldr	r2, [r3, #16]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	1c5a      	adds	r2, r3, #1
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002306:	3b01      	subs	r3, #1
 8002308:	b29a      	uxth	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002312:	b29b      	uxth	r3, r3
 8002314:	3b01      	subs	r3, #1
 8002316:	b29a      	uxth	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800231c:	e0b8      	b.n	8002490 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002324:	2200      	movs	r2, #0
 8002326:	4966      	ldr	r1, [pc, #408]	; (80024c0 <HAL_I2C_Mem_Read+0x448>)
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f000 fb17 	bl	800295c <I2C_WaitOnFlagUntilTimeout>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e0bf      	b.n	80024b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002346:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	691a      	ldr	r2, [r3, #16]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	1c5a      	adds	r2, r3, #1
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002364:	3b01      	subs	r3, #1
 8002366:	b29a      	uxth	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002370:	b29b      	uxth	r3, r3
 8002372:	3b01      	subs	r3, #1
 8002374:	b29a      	uxth	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002380:	2200      	movs	r2, #0
 8002382:	494f      	ldr	r1, [pc, #316]	; (80024c0 <HAL_I2C_Mem_Read+0x448>)
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f000 fae9 	bl	800295c <I2C_WaitOnFlagUntilTimeout>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e091      	b.n	80024b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	691a      	ldr	r2, [r3, #16]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b6:	1c5a      	adds	r2, r3, #1
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c0:	3b01      	subs	r3, #1
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	3b01      	subs	r3, #1
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	1c5a      	adds	r2, r3, #1
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f2:	3b01      	subs	r3, #1
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fe:	b29b      	uxth	r3, r3
 8002400:	3b01      	subs	r3, #1
 8002402:	b29a      	uxth	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002408:	e042      	b.n	8002490 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800240a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800240c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 fbfc 	bl	8002c0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e04c      	b.n	80024b8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243a:	3b01      	subs	r3, #1
 800243c:	b29a      	uxth	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002446:	b29b      	uxth	r3, r3
 8002448:	3b01      	subs	r3, #1
 800244a:	b29a      	uxth	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	2b04      	cmp	r3, #4
 800245c:	d118      	bne.n	8002490 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	691a      	ldr	r2, [r3, #16]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	1c5a      	adds	r2, r3, #1
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247a:	3b01      	subs	r3, #1
 800247c:	b29a      	uxth	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002486:	b29b      	uxth	r3, r3
 8002488:	3b01      	subs	r3, #1
 800248a:	b29a      	uxth	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002494:	2b00      	cmp	r3, #0
 8002496:	f47f aec2 	bne.w	800221e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2220      	movs	r2, #32
 800249e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	e000      	b.n	80024b8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80024b6:	2302      	movs	r3, #2
  }
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3728      	adds	r7, #40	; 0x28
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	00010004 	.word	0x00010004

080024c4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af02      	add	r7, sp, #8
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	607a      	str	r2, [r7, #4]
 80024ce:	603b      	str	r3, [r7, #0]
 80024d0:	460b      	mov	r3, r1
 80024d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024e8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	d006      	beq.n	80024fe <I2C_MasterRequestRead+0x3a>
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d003      	beq.n	80024fe <I2C_MasterRequestRead+0x3a>
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024fc:	d108      	bne.n	8002510 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	e00b      	b.n	8002528 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002514:	2b11      	cmp	r3, #17
 8002516:	d107      	bne.n	8002528 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002526:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 fa11 	bl	800295c <I2C_WaitOnFlagUntilTimeout>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00d      	beq.n	800255c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800254e:	d103      	bne.n	8002558 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002556:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e079      	b.n	8002650 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002564:	d108      	bne.n	8002578 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002566:	897b      	ldrh	r3, [r7, #10]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	f043 0301 	orr.w	r3, r3, #1
 800256e:	b2da      	uxtb	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	611a      	str	r2, [r3, #16]
 8002576:	e05f      	b.n	8002638 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002578:	897b      	ldrh	r3, [r7, #10]
 800257a:	11db      	asrs	r3, r3, #7
 800257c:	b2db      	uxtb	r3, r3
 800257e:	f003 0306 	and.w	r3, r3, #6
 8002582:	b2db      	uxtb	r3, r3
 8002584:	f063 030f 	orn	r3, r3, #15
 8002588:	b2da      	uxtb	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	4930      	ldr	r1, [pc, #192]	; (8002658 <I2C_MasterRequestRead+0x194>)
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 fa37 	bl	8002a0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e054      	b.n	8002650 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80025a6:	897b      	ldrh	r3, [r7, #10]
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	4929      	ldr	r1, [pc, #164]	; (800265c <I2C_MasterRequestRead+0x198>)
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 fa27 	bl	8002a0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e044      	b.n	8002650 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025c6:	2300      	movs	r3, #0
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	613b      	str	r3, [r7, #16]
 80025da:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025ea:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f000 f9af 	bl	800295c <I2C_WaitOnFlagUntilTimeout>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00d      	beq.n	8002620 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002612:	d103      	bne.n	800261c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f44f 7200 	mov.w	r2, #512	; 0x200
 800261a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e017      	b.n	8002650 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002620:	897b      	ldrh	r3, [r7, #10]
 8002622:	11db      	asrs	r3, r3, #7
 8002624:	b2db      	uxtb	r3, r3
 8002626:	f003 0306 	and.w	r3, r3, #6
 800262a:	b2db      	uxtb	r3, r3
 800262c:	f063 030e 	orn	r3, r3, #14
 8002630:	b2da      	uxtb	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	4907      	ldr	r1, [pc, #28]	; (800265c <I2C_MasterRequestRead+0x198>)
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 f9e3 	bl	8002a0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e000      	b.n	8002650 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	00010008 	.word	0x00010008
 800265c:	00010002 	.word	0x00010002

08002660 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af02      	add	r7, sp, #8
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	4608      	mov	r0, r1
 800266a:	4611      	mov	r1, r2
 800266c:	461a      	mov	r2, r3
 800266e:	4603      	mov	r3, r0
 8002670:	817b      	strh	r3, [r7, #10]
 8002672:	460b      	mov	r3, r1
 8002674:	813b      	strh	r3, [r7, #8]
 8002676:	4613      	mov	r3, r2
 8002678:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002688:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	6a3b      	ldr	r3, [r7, #32]
 8002690:	2200      	movs	r2, #0
 8002692:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 f960 	bl	800295c <I2C_WaitOnFlagUntilTimeout>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00d      	beq.n	80026be <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026b0:	d103      	bne.n	80026ba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e05f      	b.n	800277e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026be:	897b      	ldrh	r3, [r7, #10]
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	461a      	mov	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	6a3a      	ldr	r2, [r7, #32]
 80026d2:	492d      	ldr	r1, [pc, #180]	; (8002788 <I2C_RequestMemoryWrite+0x128>)
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f000 f998 	bl	8002a0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e04c      	b.n	800277e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	617b      	str	r3, [r7, #20]
 80026f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026fc:	6a39      	ldr	r1, [r7, #32]
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 fa02 	bl	8002b08 <I2C_WaitOnTXEFlagUntilTimeout>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00d      	beq.n	8002726 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	2b04      	cmp	r3, #4
 8002710:	d107      	bne.n	8002722 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002720:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e02b      	b.n	800277e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002726:	88fb      	ldrh	r3, [r7, #6]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d105      	bne.n	8002738 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800272c:	893b      	ldrh	r3, [r7, #8]
 800272e:	b2da      	uxtb	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	611a      	str	r2, [r3, #16]
 8002736:	e021      	b.n	800277c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002738:	893b      	ldrh	r3, [r7, #8]
 800273a:	0a1b      	lsrs	r3, r3, #8
 800273c:	b29b      	uxth	r3, r3
 800273e:	b2da      	uxtb	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002748:	6a39      	ldr	r1, [r7, #32]
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f000 f9dc 	bl	8002b08 <I2C_WaitOnTXEFlagUntilTimeout>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00d      	beq.n	8002772 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	2b04      	cmp	r3, #4
 800275c:	d107      	bne.n	800276e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800276c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e005      	b.n	800277e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002772:	893b      	ldrh	r3, [r7, #8]
 8002774:	b2da      	uxtb	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	00010002 	.word	0x00010002

0800278c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b088      	sub	sp, #32
 8002790:	af02      	add	r7, sp, #8
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	4608      	mov	r0, r1
 8002796:	4611      	mov	r1, r2
 8002798:	461a      	mov	r2, r3
 800279a:	4603      	mov	r3, r0
 800279c:	817b      	strh	r3, [r7, #10]
 800279e:	460b      	mov	r3, r1
 80027a0:	813b      	strh	r3, [r7, #8]
 80027a2:	4613      	mov	r3, r2
 80027a4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027b4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 f8c2 	bl	800295c <I2C_WaitOnFlagUntilTimeout>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00d      	beq.n	80027fa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ec:	d103      	bne.n	80027f6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e0aa      	b.n	8002950 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027fa:	897b      	ldrh	r3, [r7, #10]
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	461a      	mov	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002808:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	6a3a      	ldr	r2, [r7, #32]
 800280e:	4952      	ldr	r1, [pc, #328]	; (8002958 <I2C_RequestMemoryRead+0x1cc>)
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 f8fa 	bl	8002a0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e097      	b.n	8002950 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002820:	2300      	movs	r3, #0
 8002822:	617b      	str	r3, [r7, #20]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	617b      	str	r3, [r7, #20]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	617b      	str	r3, [r7, #20]
 8002834:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002838:	6a39      	ldr	r1, [r7, #32]
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f000 f964 	bl	8002b08 <I2C_WaitOnTXEFlagUntilTimeout>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00d      	beq.n	8002862 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	2b04      	cmp	r3, #4
 800284c:	d107      	bne.n	800285e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800285c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e076      	b.n	8002950 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002862:	88fb      	ldrh	r3, [r7, #6]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d105      	bne.n	8002874 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002868:	893b      	ldrh	r3, [r7, #8]
 800286a:	b2da      	uxtb	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	611a      	str	r2, [r3, #16]
 8002872:	e021      	b.n	80028b8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002874:	893b      	ldrh	r3, [r7, #8]
 8002876:	0a1b      	lsrs	r3, r3, #8
 8002878:	b29b      	uxth	r3, r3
 800287a:	b2da      	uxtb	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002884:	6a39      	ldr	r1, [r7, #32]
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 f93e 	bl	8002b08 <I2C_WaitOnTXEFlagUntilTimeout>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00d      	beq.n	80028ae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	2b04      	cmp	r3, #4
 8002898:	d107      	bne.n	80028aa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e050      	b.n	8002950 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028ae:	893b      	ldrh	r3, [r7, #8]
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ba:	6a39      	ldr	r1, [r7, #32]
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f000 f923 	bl	8002b08 <I2C_WaitOnTXEFlagUntilTimeout>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00d      	beq.n	80028e4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d107      	bne.n	80028e0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028de:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e035      	b.n	8002950 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028f2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	6a3b      	ldr	r3, [r7, #32]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f000 f82b 	bl	800295c <I2C_WaitOnFlagUntilTimeout>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00d      	beq.n	8002928 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002916:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800291a:	d103      	bne.n	8002924 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002922:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e013      	b.n	8002950 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002928:	897b      	ldrh	r3, [r7, #10]
 800292a:	b2db      	uxtb	r3, r3
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	b2da      	uxtb	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	6a3a      	ldr	r2, [r7, #32]
 800293c:	4906      	ldr	r1, [pc, #24]	; (8002958 <I2C_RequestMemoryRead+0x1cc>)
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 f863 	bl	8002a0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3718      	adds	r7, #24
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	00010002 	.word	0x00010002

0800295c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	603b      	str	r3, [r7, #0]
 8002968:	4613      	mov	r3, r2
 800296a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800296c:	e025      	b.n	80029ba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002974:	d021      	beq.n	80029ba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002976:	f7fe fc23 	bl	80011c0 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d302      	bcc.n	800298c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d116      	bne.n	80029ba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2220      	movs	r2, #32
 8002996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	f043 0220 	orr.w	r2, r3, #32
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e023      	b.n	8002a02 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	0c1b      	lsrs	r3, r3, #16
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d10d      	bne.n	80029e0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	43da      	mvns	r2, r3
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	4013      	ands	r3, r2
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	bf0c      	ite	eq
 80029d6:	2301      	moveq	r3, #1
 80029d8:	2300      	movne	r3, #0
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	461a      	mov	r2, r3
 80029de:	e00c      	b.n	80029fa <I2C_WaitOnFlagUntilTimeout+0x9e>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	43da      	mvns	r2, r3
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	4013      	ands	r3, r2
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	bf0c      	ite	eq
 80029f2:	2301      	moveq	r3, #1
 80029f4:	2300      	movne	r3, #0
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	461a      	mov	r2, r3
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d0b6      	beq.n	800296e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b084      	sub	sp, #16
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	607a      	str	r2, [r7, #4]
 8002a16:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a18:	e051      	b.n	8002abe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a28:	d123      	bne.n	8002a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a38:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a42:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2220      	movs	r2, #32
 8002a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	f043 0204 	orr.w	r2, r3, #4
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e046      	b.n	8002b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a78:	d021      	beq.n	8002abe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a7a:	f7fe fba1 	bl	80011c0 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d302      	bcc.n	8002a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d116      	bne.n	8002abe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f043 0220 	orr.w	r2, r3, #32
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e020      	b.n	8002b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	0c1b      	lsrs	r3, r3, #16
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d10c      	bne.n	8002ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	43da      	mvns	r2, r3
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	bf14      	ite	ne
 8002ada:	2301      	movne	r3, #1
 8002adc:	2300      	moveq	r3, #0
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	e00b      	b.n	8002afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	43da      	mvns	r2, r3
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	4013      	ands	r3, r2
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	bf14      	ite	ne
 8002af4:	2301      	movne	r3, #1
 8002af6:	2300      	moveq	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d18d      	bne.n	8002a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b14:	e02d      	b.n	8002b72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 f8ce 	bl	8002cb8 <I2C_IsAcknowledgeFailed>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e02d      	b.n	8002b82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b2c:	d021      	beq.n	8002b72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b2e:	f7fe fb47 	bl	80011c0 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	68ba      	ldr	r2, [r7, #8]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d302      	bcc.n	8002b44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d116      	bne.n	8002b72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	f043 0220 	orr.w	r2, r3, #32
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e007      	b.n	8002b82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b7c:	2b80      	cmp	r3, #128	; 0x80
 8002b7e:	d1ca      	bne.n	8002b16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b084      	sub	sp, #16
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b96:	e02d      	b.n	8002bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 f88d 	bl	8002cb8 <I2C_IsAcknowledgeFailed>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e02d      	b.n	8002c04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bae:	d021      	beq.n	8002bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb0:	f7fe fb06 	bl	80011c0 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d302      	bcc.n	8002bc6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d116      	bne.n	8002bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be0:	f043 0220 	orr.w	r2, r3, #32
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e007      	b.n	8002c04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d1ca      	bne.n	8002b98 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c18:	e042      	b.n	8002ca0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	f003 0310 	and.w	r3, r3, #16
 8002c24:	2b10      	cmp	r3, #16
 8002c26:	d119      	bne.n	8002c5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f06f 0210 	mvn.w	r2, #16
 8002c30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e029      	b.n	8002cb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c5c:	f7fe fab0 	bl	80011c0 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d302      	bcc.n	8002c72 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d116      	bne.n	8002ca0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8c:	f043 0220 	orr.w	r2, r3, #32
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e007      	b.n	8002cb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002caa:	2b40      	cmp	r3, #64	; 0x40
 8002cac:	d1b5      	bne.n	8002c1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cce:	d11b      	bne.n	8002d08 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cd8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf4:	f043 0204 	orr.w	r2, r3, #4
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e000      	b.n	8002d0a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
	...

08002d18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e267      	b.n	80031fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d075      	beq.n	8002e22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d36:	4b88      	ldr	r3, [pc, #544]	; (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 030c 	and.w	r3, r3, #12
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d00c      	beq.n	8002d5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d42:	4b85      	ldr	r3, [pc, #532]	; (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d4a:	2b08      	cmp	r3, #8
 8002d4c:	d112      	bne.n	8002d74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d4e:	4b82      	ldr	r3, [pc, #520]	; (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d5a:	d10b      	bne.n	8002d74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d5c:	4b7e      	ldr	r3, [pc, #504]	; (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d05b      	beq.n	8002e20 <HAL_RCC_OscConfig+0x108>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d157      	bne.n	8002e20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e242      	b.n	80031fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d7c:	d106      	bne.n	8002d8c <HAL_RCC_OscConfig+0x74>
 8002d7e:	4b76      	ldr	r3, [pc, #472]	; (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a75      	ldr	r2, [pc, #468]	; (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	e01d      	b.n	8002dc8 <HAL_RCC_OscConfig+0xb0>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d94:	d10c      	bne.n	8002db0 <HAL_RCC_OscConfig+0x98>
 8002d96:	4b70      	ldr	r3, [pc, #448]	; (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a6f      	ldr	r2, [pc, #444]	; (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002da0:	6013      	str	r3, [r2, #0]
 8002da2:	4b6d      	ldr	r3, [pc, #436]	; (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a6c      	ldr	r2, [pc, #432]	; (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	e00b      	b.n	8002dc8 <HAL_RCC_OscConfig+0xb0>
 8002db0:	4b69      	ldr	r3, [pc, #420]	; (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a68      	ldr	r2, [pc, #416]	; (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dba:	6013      	str	r3, [r2, #0]
 8002dbc:	4b66      	ldr	r3, [pc, #408]	; (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a65      	ldr	r2, [pc, #404]	; (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d013      	beq.n	8002df8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd0:	f7fe f9f6 	bl	80011c0 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dd8:	f7fe f9f2 	bl	80011c0 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b64      	cmp	r3, #100	; 0x64
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e207      	b.n	80031fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dea:	4b5b      	ldr	r3, [pc, #364]	; (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0f0      	beq.n	8002dd8 <HAL_RCC_OscConfig+0xc0>
 8002df6:	e014      	b.n	8002e22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df8:	f7fe f9e2 	bl	80011c0 <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e00:	f7fe f9de 	bl	80011c0 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b64      	cmp	r3, #100	; 0x64
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e1f3      	b.n	80031fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e12:	4b51      	ldr	r3, [pc, #324]	; (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1f0      	bne.n	8002e00 <HAL_RCC_OscConfig+0xe8>
 8002e1e:	e000      	b.n	8002e22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d063      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e2e:	4b4a      	ldr	r3, [pc, #296]	; (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 030c 	and.w	r3, r3, #12
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00b      	beq.n	8002e52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e3a:	4b47      	ldr	r3, [pc, #284]	; (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e42:	2b08      	cmp	r3, #8
 8002e44:	d11c      	bne.n	8002e80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e46:	4b44      	ldr	r3, [pc, #272]	; (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d116      	bne.n	8002e80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e52:	4b41      	ldr	r3, [pc, #260]	; (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d005      	beq.n	8002e6a <HAL_RCC_OscConfig+0x152>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d001      	beq.n	8002e6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e1c7      	b.n	80031fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e6a:	4b3b      	ldr	r3, [pc, #236]	; (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	4937      	ldr	r1, [pc, #220]	; (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e7e:	e03a      	b.n	8002ef6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d020      	beq.n	8002eca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e88:	4b34      	ldr	r3, [pc, #208]	; (8002f5c <HAL_RCC_OscConfig+0x244>)
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8e:	f7fe f997 	bl	80011c0 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e96:	f7fe f993 	bl	80011c0 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e1a8      	b.n	80031fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea8:	4b2b      	ldr	r3, [pc, #172]	; (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0f0      	beq.n	8002e96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb4:	4b28      	ldr	r3, [pc, #160]	; (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	4925      	ldr	r1, [pc, #148]	; (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	600b      	str	r3, [r1, #0]
 8002ec8:	e015      	b.n	8002ef6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eca:	4b24      	ldr	r3, [pc, #144]	; (8002f5c <HAL_RCC_OscConfig+0x244>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed0:	f7fe f976 	bl	80011c0 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ed8:	f7fe f972 	bl	80011c0 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e187      	b.n	80031fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eea:	4b1b      	ldr	r3, [pc, #108]	; (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f0      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d036      	beq.n	8002f70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d016      	beq.n	8002f38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f0a:	4b15      	ldr	r3, [pc, #84]	; (8002f60 <HAL_RCC_OscConfig+0x248>)
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f10:	f7fe f956 	bl	80011c0 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f18:	f7fe f952 	bl	80011c0 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e167      	b.n	80031fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f2a:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0f0      	beq.n	8002f18 <HAL_RCC_OscConfig+0x200>
 8002f36:	e01b      	b.n	8002f70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f38:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <HAL_RCC_OscConfig+0x248>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3e:	f7fe f93f 	bl	80011c0 <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f44:	e00e      	b.n	8002f64 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f46:	f7fe f93b 	bl	80011c0 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d907      	bls.n	8002f64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e150      	b.n	80031fa <HAL_RCC_OscConfig+0x4e2>
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	42470000 	.word	0x42470000
 8002f60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f64:	4b88      	ldr	r3, [pc, #544]	; (8003188 <HAL_RCC_OscConfig+0x470>)
 8002f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1ea      	bne.n	8002f46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 8097 	beq.w	80030ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f82:	4b81      	ldr	r3, [pc, #516]	; (8003188 <HAL_RCC_OscConfig+0x470>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10f      	bne.n	8002fae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60bb      	str	r3, [r7, #8]
 8002f92:	4b7d      	ldr	r3, [pc, #500]	; (8003188 <HAL_RCC_OscConfig+0x470>)
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	4a7c      	ldr	r2, [pc, #496]	; (8003188 <HAL_RCC_OscConfig+0x470>)
 8002f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f9e:	4b7a      	ldr	r3, [pc, #488]	; (8003188 <HAL_RCC_OscConfig+0x470>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa6:	60bb      	str	r3, [r7, #8]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002faa:	2301      	movs	r3, #1
 8002fac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fae:	4b77      	ldr	r3, [pc, #476]	; (800318c <HAL_RCC_OscConfig+0x474>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d118      	bne.n	8002fec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fba:	4b74      	ldr	r3, [pc, #464]	; (800318c <HAL_RCC_OscConfig+0x474>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a73      	ldr	r2, [pc, #460]	; (800318c <HAL_RCC_OscConfig+0x474>)
 8002fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fc6:	f7fe f8fb 	bl	80011c0 <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fce:	f7fe f8f7 	bl	80011c0 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e10c      	b.n	80031fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe0:	4b6a      	ldr	r3, [pc, #424]	; (800318c <HAL_RCC_OscConfig+0x474>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0f0      	beq.n	8002fce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d106      	bne.n	8003002 <HAL_RCC_OscConfig+0x2ea>
 8002ff4:	4b64      	ldr	r3, [pc, #400]	; (8003188 <HAL_RCC_OscConfig+0x470>)
 8002ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff8:	4a63      	ldr	r2, [pc, #396]	; (8003188 <HAL_RCC_OscConfig+0x470>)
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	6713      	str	r3, [r2, #112]	; 0x70
 8003000:	e01c      	b.n	800303c <HAL_RCC_OscConfig+0x324>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2b05      	cmp	r3, #5
 8003008:	d10c      	bne.n	8003024 <HAL_RCC_OscConfig+0x30c>
 800300a:	4b5f      	ldr	r3, [pc, #380]	; (8003188 <HAL_RCC_OscConfig+0x470>)
 800300c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300e:	4a5e      	ldr	r2, [pc, #376]	; (8003188 <HAL_RCC_OscConfig+0x470>)
 8003010:	f043 0304 	orr.w	r3, r3, #4
 8003014:	6713      	str	r3, [r2, #112]	; 0x70
 8003016:	4b5c      	ldr	r3, [pc, #368]	; (8003188 <HAL_RCC_OscConfig+0x470>)
 8003018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301a:	4a5b      	ldr	r2, [pc, #364]	; (8003188 <HAL_RCC_OscConfig+0x470>)
 800301c:	f043 0301 	orr.w	r3, r3, #1
 8003020:	6713      	str	r3, [r2, #112]	; 0x70
 8003022:	e00b      	b.n	800303c <HAL_RCC_OscConfig+0x324>
 8003024:	4b58      	ldr	r3, [pc, #352]	; (8003188 <HAL_RCC_OscConfig+0x470>)
 8003026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003028:	4a57      	ldr	r2, [pc, #348]	; (8003188 <HAL_RCC_OscConfig+0x470>)
 800302a:	f023 0301 	bic.w	r3, r3, #1
 800302e:	6713      	str	r3, [r2, #112]	; 0x70
 8003030:	4b55      	ldr	r3, [pc, #340]	; (8003188 <HAL_RCC_OscConfig+0x470>)
 8003032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003034:	4a54      	ldr	r2, [pc, #336]	; (8003188 <HAL_RCC_OscConfig+0x470>)
 8003036:	f023 0304 	bic.w	r3, r3, #4
 800303a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d015      	beq.n	8003070 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003044:	f7fe f8bc 	bl	80011c0 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800304a:	e00a      	b.n	8003062 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800304c:	f7fe f8b8 	bl	80011c0 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	f241 3288 	movw	r2, #5000	; 0x1388
 800305a:	4293      	cmp	r3, r2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e0cb      	b.n	80031fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003062:	4b49      	ldr	r3, [pc, #292]	; (8003188 <HAL_RCC_OscConfig+0x470>)
 8003064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0ee      	beq.n	800304c <HAL_RCC_OscConfig+0x334>
 800306e:	e014      	b.n	800309a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003070:	f7fe f8a6 	bl	80011c0 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003076:	e00a      	b.n	800308e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003078:	f7fe f8a2 	bl	80011c0 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	f241 3288 	movw	r2, #5000	; 0x1388
 8003086:	4293      	cmp	r3, r2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e0b5      	b.n	80031fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800308e:	4b3e      	ldr	r3, [pc, #248]	; (8003188 <HAL_RCC_OscConfig+0x470>)
 8003090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1ee      	bne.n	8003078 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800309a:	7dfb      	ldrb	r3, [r7, #23]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d105      	bne.n	80030ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a0:	4b39      	ldr	r3, [pc, #228]	; (8003188 <HAL_RCC_OscConfig+0x470>)
 80030a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a4:	4a38      	ldr	r2, [pc, #224]	; (8003188 <HAL_RCC_OscConfig+0x470>)
 80030a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 80a1 	beq.w	80031f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030b6:	4b34      	ldr	r3, [pc, #208]	; (8003188 <HAL_RCC_OscConfig+0x470>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 030c 	and.w	r3, r3, #12
 80030be:	2b08      	cmp	r3, #8
 80030c0:	d05c      	beq.n	800317c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d141      	bne.n	800314e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ca:	4b31      	ldr	r3, [pc, #196]	; (8003190 <HAL_RCC_OscConfig+0x478>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d0:	f7fe f876 	bl	80011c0 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d8:	f7fe f872 	bl	80011c0 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e087      	b.n	80031fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ea:	4b27      	ldr	r3, [pc, #156]	; (8003188 <HAL_RCC_OscConfig+0x470>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f0      	bne.n	80030d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69da      	ldr	r2, [r3, #28]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	019b      	lsls	r3, r3, #6
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310c:	085b      	lsrs	r3, r3, #1
 800310e:	3b01      	subs	r3, #1
 8003110:	041b      	lsls	r3, r3, #16
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	061b      	lsls	r3, r3, #24
 800311a:	491b      	ldr	r1, [pc, #108]	; (8003188 <HAL_RCC_OscConfig+0x470>)
 800311c:	4313      	orrs	r3, r2
 800311e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003120:	4b1b      	ldr	r3, [pc, #108]	; (8003190 <HAL_RCC_OscConfig+0x478>)
 8003122:	2201      	movs	r2, #1
 8003124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003126:	f7fe f84b 	bl	80011c0 <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800312e:	f7fe f847 	bl	80011c0 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e05c      	b.n	80031fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003140:	4b11      	ldr	r3, [pc, #68]	; (8003188 <HAL_RCC_OscConfig+0x470>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0f0      	beq.n	800312e <HAL_RCC_OscConfig+0x416>
 800314c:	e054      	b.n	80031f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800314e:	4b10      	ldr	r3, [pc, #64]	; (8003190 <HAL_RCC_OscConfig+0x478>)
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003154:	f7fe f834 	bl	80011c0 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800315c:	f7fe f830 	bl	80011c0 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e045      	b.n	80031fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800316e:	4b06      	ldr	r3, [pc, #24]	; (8003188 <HAL_RCC_OscConfig+0x470>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1f0      	bne.n	800315c <HAL_RCC_OscConfig+0x444>
 800317a:	e03d      	b.n	80031f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d107      	bne.n	8003194 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e038      	b.n	80031fa <HAL_RCC_OscConfig+0x4e2>
 8003188:	40023800 	.word	0x40023800
 800318c:	40007000 	.word	0x40007000
 8003190:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003194:	4b1b      	ldr	r3, [pc, #108]	; (8003204 <HAL_RCC_OscConfig+0x4ec>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d028      	beq.n	80031f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d121      	bne.n	80031f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d11a      	bne.n	80031f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031c4:	4013      	ands	r3, r2
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d111      	bne.n	80031f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031da:	085b      	lsrs	r3, r3, #1
 80031dc:	3b01      	subs	r3, #1
 80031de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d107      	bne.n	80031f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d001      	beq.n	80031f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e000      	b.n	80031fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3718      	adds	r7, #24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40023800 	.word	0x40023800

08003208 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e0cc      	b.n	80033b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800321c:	4b68      	ldr	r3, [pc, #416]	; (80033c0 <HAL_RCC_ClockConfig+0x1b8>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d90c      	bls.n	8003244 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322a:	4b65      	ldr	r3, [pc, #404]	; (80033c0 <HAL_RCC_ClockConfig+0x1b8>)
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	b2d2      	uxtb	r2, r2
 8003230:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003232:	4b63      	ldr	r3, [pc, #396]	; (80033c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	429a      	cmp	r2, r3
 800323e:	d001      	beq.n	8003244 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e0b8      	b.n	80033b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d020      	beq.n	8003292 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b00      	cmp	r3, #0
 800325a:	d005      	beq.n	8003268 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800325c:	4b59      	ldr	r3, [pc, #356]	; (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	4a58      	ldr	r2, [pc, #352]	; (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003262:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003266:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0308 	and.w	r3, r3, #8
 8003270:	2b00      	cmp	r3, #0
 8003272:	d005      	beq.n	8003280 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003274:	4b53      	ldr	r3, [pc, #332]	; (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	4a52      	ldr	r2, [pc, #328]	; (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800327e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003280:	4b50      	ldr	r3, [pc, #320]	; (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	494d      	ldr	r1, [pc, #308]	; (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 800328e:	4313      	orrs	r3, r2
 8003290:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d044      	beq.n	8003328 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d107      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032a6:	4b47      	ldr	r3, [pc, #284]	; (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d119      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e07f      	b.n	80033b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d003      	beq.n	80032c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032c2:	2b03      	cmp	r3, #3
 80032c4:	d107      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032c6:	4b3f      	ldr	r3, [pc, #252]	; (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d109      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e06f      	b.n	80033b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d6:	4b3b      	ldr	r3, [pc, #236]	; (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e067      	b.n	80033b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032e6:	4b37      	ldr	r3, [pc, #220]	; (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f023 0203 	bic.w	r2, r3, #3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	4934      	ldr	r1, [pc, #208]	; (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032f8:	f7fd ff62 	bl	80011c0 <HAL_GetTick>
 80032fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fe:	e00a      	b.n	8003316 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003300:	f7fd ff5e 	bl	80011c0 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	f241 3288 	movw	r2, #5000	; 0x1388
 800330e:	4293      	cmp	r3, r2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e04f      	b.n	80033b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003316:	4b2b      	ldr	r3, [pc, #172]	; (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 020c 	and.w	r2, r3, #12
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	429a      	cmp	r2, r3
 8003326:	d1eb      	bne.n	8003300 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003328:	4b25      	ldr	r3, [pc, #148]	; (80033c0 <HAL_RCC_ClockConfig+0x1b8>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	429a      	cmp	r2, r3
 8003334:	d20c      	bcs.n	8003350 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003336:	4b22      	ldr	r3, [pc, #136]	; (80033c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800333e:	4b20      	ldr	r3, [pc, #128]	; (80033c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	429a      	cmp	r2, r3
 800334a:	d001      	beq.n	8003350 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e032      	b.n	80033b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0304 	and.w	r3, r3, #4
 8003358:	2b00      	cmp	r3, #0
 800335a:	d008      	beq.n	800336e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800335c:	4b19      	ldr	r3, [pc, #100]	; (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	4916      	ldr	r1, [pc, #88]	; (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 800336a:	4313      	orrs	r3, r2
 800336c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	2b00      	cmp	r3, #0
 8003378:	d009      	beq.n	800338e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800337a:	4b12      	ldr	r3, [pc, #72]	; (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	490e      	ldr	r1, [pc, #56]	; (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 800338a:	4313      	orrs	r3, r2
 800338c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800338e:	f000 f821 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 8003392:	4602      	mov	r2, r0
 8003394:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	091b      	lsrs	r3, r3, #4
 800339a:	f003 030f 	and.w	r3, r3, #15
 800339e:	490a      	ldr	r1, [pc, #40]	; (80033c8 <HAL_RCC_ClockConfig+0x1c0>)
 80033a0:	5ccb      	ldrb	r3, [r1, r3]
 80033a2:	fa22 f303 	lsr.w	r3, r2, r3
 80033a6:	4a09      	ldr	r2, [pc, #36]	; (80033cc <HAL_RCC_ClockConfig+0x1c4>)
 80033a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033aa:	4b09      	ldr	r3, [pc, #36]	; (80033d0 <HAL_RCC_ClockConfig+0x1c8>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7fd fec2 	bl	8001138 <HAL_InitTick>

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	40023c00 	.word	0x40023c00
 80033c4:	40023800 	.word	0x40023800
 80033c8:	08004ffc 	.word	0x08004ffc
 80033cc:	2000000c 	.word	0x2000000c
 80033d0:	20000010 	.word	0x20000010

080033d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033d8:	b094      	sub	sp, #80	; 0x50
 80033da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	647b      	str	r3, [r7, #68]	; 0x44
 80033e0:	2300      	movs	r3, #0
 80033e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033e4:	2300      	movs	r3, #0
 80033e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033ec:	4b79      	ldr	r3, [pc, #484]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f003 030c 	and.w	r3, r3, #12
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d00d      	beq.n	8003414 <HAL_RCC_GetSysClockFreq+0x40>
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	f200 80e1 	bhi.w	80035c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d002      	beq.n	8003408 <HAL_RCC_GetSysClockFreq+0x34>
 8003402:	2b04      	cmp	r3, #4
 8003404:	d003      	beq.n	800340e <HAL_RCC_GetSysClockFreq+0x3a>
 8003406:	e0db      	b.n	80035c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003408:	4b73      	ldr	r3, [pc, #460]	; (80035d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800340a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800340c:	e0db      	b.n	80035c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800340e:	4b73      	ldr	r3, [pc, #460]	; (80035dc <HAL_RCC_GetSysClockFreq+0x208>)
 8003410:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003412:	e0d8      	b.n	80035c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003414:	4b6f      	ldr	r3, [pc, #444]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800341c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800341e:	4b6d      	ldr	r3, [pc, #436]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d063      	beq.n	80034f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800342a:	4b6a      	ldr	r3, [pc, #424]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	099b      	lsrs	r3, r3, #6
 8003430:	2200      	movs	r2, #0
 8003432:	63bb      	str	r3, [r7, #56]	; 0x38
 8003434:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800343c:	633b      	str	r3, [r7, #48]	; 0x30
 800343e:	2300      	movs	r3, #0
 8003440:	637b      	str	r3, [r7, #52]	; 0x34
 8003442:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003446:	4622      	mov	r2, r4
 8003448:	462b      	mov	r3, r5
 800344a:	f04f 0000 	mov.w	r0, #0
 800344e:	f04f 0100 	mov.w	r1, #0
 8003452:	0159      	lsls	r1, r3, #5
 8003454:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003458:	0150      	lsls	r0, r2, #5
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	4621      	mov	r1, r4
 8003460:	1a51      	subs	r1, r2, r1
 8003462:	6139      	str	r1, [r7, #16]
 8003464:	4629      	mov	r1, r5
 8003466:	eb63 0301 	sbc.w	r3, r3, r1
 800346a:	617b      	str	r3, [r7, #20]
 800346c:	f04f 0200 	mov.w	r2, #0
 8003470:	f04f 0300 	mov.w	r3, #0
 8003474:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003478:	4659      	mov	r1, fp
 800347a:	018b      	lsls	r3, r1, #6
 800347c:	4651      	mov	r1, sl
 800347e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003482:	4651      	mov	r1, sl
 8003484:	018a      	lsls	r2, r1, #6
 8003486:	4651      	mov	r1, sl
 8003488:	ebb2 0801 	subs.w	r8, r2, r1
 800348c:	4659      	mov	r1, fp
 800348e:	eb63 0901 	sbc.w	r9, r3, r1
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	f04f 0300 	mov.w	r3, #0
 800349a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800349e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034a6:	4690      	mov	r8, r2
 80034a8:	4699      	mov	r9, r3
 80034aa:	4623      	mov	r3, r4
 80034ac:	eb18 0303 	adds.w	r3, r8, r3
 80034b0:	60bb      	str	r3, [r7, #8]
 80034b2:	462b      	mov	r3, r5
 80034b4:	eb49 0303 	adc.w	r3, r9, r3
 80034b8:	60fb      	str	r3, [r7, #12]
 80034ba:	f04f 0200 	mov.w	r2, #0
 80034be:	f04f 0300 	mov.w	r3, #0
 80034c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034c6:	4629      	mov	r1, r5
 80034c8:	024b      	lsls	r3, r1, #9
 80034ca:	4621      	mov	r1, r4
 80034cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034d0:	4621      	mov	r1, r4
 80034d2:	024a      	lsls	r2, r1, #9
 80034d4:	4610      	mov	r0, r2
 80034d6:	4619      	mov	r1, r3
 80034d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034da:	2200      	movs	r2, #0
 80034dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80034de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034e4:	f7fc fecc 	bl	8000280 <__aeabi_uldivmod>
 80034e8:	4602      	mov	r2, r0
 80034ea:	460b      	mov	r3, r1
 80034ec:	4613      	mov	r3, r2
 80034ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034f0:	e058      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034f2:	4b38      	ldr	r3, [pc, #224]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	099b      	lsrs	r3, r3, #6
 80034f8:	2200      	movs	r2, #0
 80034fa:	4618      	mov	r0, r3
 80034fc:	4611      	mov	r1, r2
 80034fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003502:	623b      	str	r3, [r7, #32]
 8003504:	2300      	movs	r3, #0
 8003506:	627b      	str	r3, [r7, #36]	; 0x24
 8003508:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800350c:	4642      	mov	r2, r8
 800350e:	464b      	mov	r3, r9
 8003510:	f04f 0000 	mov.w	r0, #0
 8003514:	f04f 0100 	mov.w	r1, #0
 8003518:	0159      	lsls	r1, r3, #5
 800351a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800351e:	0150      	lsls	r0, r2, #5
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4641      	mov	r1, r8
 8003526:	ebb2 0a01 	subs.w	sl, r2, r1
 800352a:	4649      	mov	r1, r9
 800352c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003530:	f04f 0200 	mov.w	r2, #0
 8003534:	f04f 0300 	mov.w	r3, #0
 8003538:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800353c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003540:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003544:	ebb2 040a 	subs.w	r4, r2, sl
 8003548:	eb63 050b 	sbc.w	r5, r3, fp
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	00eb      	lsls	r3, r5, #3
 8003556:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800355a:	00e2      	lsls	r2, r4, #3
 800355c:	4614      	mov	r4, r2
 800355e:	461d      	mov	r5, r3
 8003560:	4643      	mov	r3, r8
 8003562:	18e3      	adds	r3, r4, r3
 8003564:	603b      	str	r3, [r7, #0]
 8003566:	464b      	mov	r3, r9
 8003568:	eb45 0303 	adc.w	r3, r5, r3
 800356c:	607b      	str	r3, [r7, #4]
 800356e:	f04f 0200 	mov.w	r2, #0
 8003572:	f04f 0300 	mov.w	r3, #0
 8003576:	e9d7 4500 	ldrd	r4, r5, [r7]
 800357a:	4629      	mov	r1, r5
 800357c:	028b      	lsls	r3, r1, #10
 800357e:	4621      	mov	r1, r4
 8003580:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003584:	4621      	mov	r1, r4
 8003586:	028a      	lsls	r2, r1, #10
 8003588:	4610      	mov	r0, r2
 800358a:	4619      	mov	r1, r3
 800358c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800358e:	2200      	movs	r2, #0
 8003590:	61bb      	str	r3, [r7, #24]
 8003592:	61fa      	str	r2, [r7, #28]
 8003594:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003598:	f7fc fe72 	bl	8000280 <__aeabi_uldivmod>
 800359c:	4602      	mov	r2, r0
 800359e:	460b      	mov	r3, r1
 80035a0:	4613      	mov	r3, r2
 80035a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035a4:	4b0b      	ldr	r3, [pc, #44]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	0c1b      	lsrs	r3, r3, #16
 80035aa:	f003 0303 	and.w	r3, r3, #3
 80035ae:	3301      	adds	r3, #1
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80035b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035be:	e002      	b.n	80035c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035c0:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80035c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3750      	adds	r7, #80	; 0x50
 80035cc:	46bd      	mov	sp, r7
 80035ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035d2:	bf00      	nop
 80035d4:	40023800 	.word	0x40023800
 80035d8:	00f42400 	.word	0x00f42400
 80035dc:	007a1200 	.word	0x007a1200

080035e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035e4:	4b03      	ldr	r3, [pc, #12]	; (80035f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80035e6:	681b      	ldr	r3, [r3, #0]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	2000000c 	.word	0x2000000c

080035f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035fc:	f7ff fff0 	bl	80035e0 <HAL_RCC_GetHCLKFreq>
 8003600:	4602      	mov	r2, r0
 8003602:	4b05      	ldr	r3, [pc, #20]	; (8003618 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	0a9b      	lsrs	r3, r3, #10
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	4903      	ldr	r1, [pc, #12]	; (800361c <HAL_RCC_GetPCLK1Freq+0x24>)
 800360e:	5ccb      	ldrb	r3, [r1, r3]
 8003610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003614:	4618      	mov	r0, r3
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40023800 	.word	0x40023800
 800361c:	0800500c 	.word	0x0800500c

08003620 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003624:	f7ff ffdc 	bl	80035e0 <HAL_RCC_GetHCLKFreq>
 8003628:	4602      	mov	r2, r0
 800362a:	4b05      	ldr	r3, [pc, #20]	; (8003640 <HAL_RCC_GetPCLK2Freq+0x20>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	0b5b      	lsrs	r3, r3, #13
 8003630:	f003 0307 	and.w	r3, r3, #7
 8003634:	4903      	ldr	r1, [pc, #12]	; (8003644 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003636:	5ccb      	ldrb	r3, [r1, r3]
 8003638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800363c:	4618      	mov	r0, r3
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40023800 	.word	0x40023800
 8003644:	0800500c 	.word	0x0800500c

08003648 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e03f      	b.n	80036da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d106      	bne.n	8003674 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7fd fbaa 	bl	8000dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2224      	movs	r2, #36	; 0x24
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68da      	ldr	r2, [r3, #12]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800368a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f929 	bl	80038e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	691a      	ldr	r2, [r3, #16]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695a      	ldr	r2, [r3, #20]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2220      	movs	r2, #32
 80036d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b08a      	sub	sp, #40	; 0x28
 80036e6:	af02      	add	r7, sp, #8
 80036e8:	60f8      	str	r0, [r7, #12]
 80036ea:	60b9      	str	r1, [r7, #8]
 80036ec:	603b      	str	r3, [r7, #0]
 80036ee:	4613      	mov	r3, r2
 80036f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b20      	cmp	r3, #32
 8003700:	d17c      	bne.n	80037fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <HAL_UART_Transmit+0x2c>
 8003708:	88fb      	ldrh	r3, [r7, #6]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e075      	b.n	80037fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003718:	2b01      	cmp	r3, #1
 800371a:	d101      	bne.n	8003720 <HAL_UART_Transmit+0x3e>
 800371c:	2302      	movs	r3, #2
 800371e:	e06e      	b.n	80037fe <HAL_UART_Transmit+0x11c>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2221      	movs	r2, #33	; 0x21
 8003732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003736:	f7fd fd43 	bl	80011c0 <HAL_GetTick>
 800373a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	88fa      	ldrh	r2, [r7, #6]
 8003740:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	88fa      	ldrh	r2, [r7, #6]
 8003746:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003750:	d108      	bne.n	8003764 <HAL_UART_Transmit+0x82>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d104      	bne.n	8003764 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800375a:	2300      	movs	r3, #0
 800375c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	61bb      	str	r3, [r7, #24]
 8003762:	e003      	b.n	800376c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003768:	2300      	movs	r3, #0
 800376a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003774:	e02a      	b.n	80037cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2200      	movs	r2, #0
 800377e:	2180      	movs	r1, #128	; 0x80
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f000 f840 	bl	8003806 <UART_WaitOnFlagUntilTimeout>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e036      	b.n	80037fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10b      	bne.n	80037ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	3302      	adds	r3, #2
 80037aa:	61bb      	str	r3, [r7, #24]
 80037ac:	e007      	b.n	80037be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	781a      	ldrb	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	3301      	adds	r3, #1
 80037bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	3b01      	subs	r3, #1
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1cf      	bne.n	8003776 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2200      	movs	r2, #0
 80037de:	2140      	movs	r1, #64	; 0x40
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 f810 	bl	8003806 <UART_WaitOnFlagUntilTimeout>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e006      	b.n	80037fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2220      	movs	r2, #32
 80037f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80037f8:	2300      	movs	r3, #0
 80037fa:	e000      	b.n	80037fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80037fc:	2302      	movs	r3, #2
  }
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3720      	adds	r7, #32
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b090      	sub	sp, #64	; 0x40
 800380a:	af00      	add	r7, sp, #0
 800380c:	60f8      	str	r0, [r7, #12]
 800380e:	60b9      	str	r1, [r7, #8]
 8003810:	603b      	str	r3, [r7, #0]
 8003812:	4613      	mov	r3, r2
 8003814:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003816:	e050      	b.n	80038ba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800381a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381e:	d04c      	beq.n	80038ba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003822:	2b00      	cmp	r3, #0
 8003824:	d007      	beq.n	8003836 <UART_WaitOnFlagUntilTimeout+0x30>
 8003826:	f7fd fccb 	bl	80011c0 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003832:	429a      	cmp	r2, r3
 8003834:	d241      	bcs.n	80038ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	330c      	adds	r3, #12
 800383c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003840:	e853 3f00 	ldrex	r3, [r3]
 8003844:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800384c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	330c      	adds	r3, #12
 8003854:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003856:	637a      	str	r2, [r7, #52]	; 0x34
 8003858:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800385c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800385e:	e841 2300 	strex	r3, r2, [r1]
 8003862:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1e5      	bne.n	8003836 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	3314      	adds	r3, #20
 8003870:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	e853 3f00 	ldrex	r3, [r3]
 8003878:	613b      	str	r3, [r7, #16]
   return(result);
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	f023 0301 	bic.w	r3, r3, #1
 8003880:	63bb      	str	r3, [r7, #56]	; 0x38
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	3314      	adds	r3, #20
 8003888:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800388a:	623a      	str	r2, [r7, #32]
 800388c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388e:	69f9      	ldr	r1, [r7, #28]
 8003890:	6a3a      	ldr	r2, [r7, #32]
 8003892:	e841 2300 	strex	r3, r2, [r1]
 8003896:	61bb      	str	r3, [r7, #24]
   return(result);
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1e5      	bne.n	800386a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2220      	movs	r2, #32
 80038a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2220      	movs	r2, #32
 80038aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e00f      	b.n	80038da <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	4013      	ands	r3, r2
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	bf0c      	ite	eq
 80038ca:	2301      	moveq	r3, #1
 80038cc:	2300      	movne	r3, #0
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	461a      	mov	r2, r3
 80038d2:	79fb      	ldrb	r3, [r7, #7]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d09f      	beq.n	8003818 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3740      	adds	r7, #64	; 0x40
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
	...

080038e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038e8:	b0c0      	sub	sp, #256	; 0x100
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003900:	68d9      	ldr	r1, [r3, #12]
 8003902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	ea40 0301 	orr.w	r3, r0, r1
 800390c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800390e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	431a      	orrs	r2, r3
 800391c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	431a      	orrs	r2, r3
 8003924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	4313      	orrs	r3, r2
 800392c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800393c:	f021 010c 	bic.w	r1, r1, #12
 8003940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800394a:	430b      	orrs	r3, r1
 800394c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800394e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800395a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800395e:	6999      	ldr	r1, [r3, #24]
 8003960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	ea40 0301 	orr.w	r3, r0, r1
 800396a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800396c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	4b8f      	ldr	r3, [pc, #572]	; (8003bb0 <UART_SetConfig+0x2cc>)
 8003974:	429a      	cmp	r2, r3
 8003976:	d005      	beq.n	8003984 <UART_SetConfig+0xa0>
 8003978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	4b8d      	ldr	r3, [pc, #564]	; (8003bb4 <UART_SetConfig+0x2d0>)
 8003980:	429a      	cmp	r2, r3
 8003982:	d104      	bne.n	800398e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003984:	f7ff fe4c 	bl	8003620 <HAL_RCC_GetPCLK2Freq>
 8003988:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800398c:	e003      	b.n	8003996 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800398e:	f7ff fe33 	bl	80035f8 <HAL_RCC_GetPCLK1Freq>
 8003992:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800399a:	69db      	ldr	r3, [r3, #28]
 800399c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039a0:	f040 810c 	bne.w	8003bbc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039a8:	2200      	movs	r2, #0
 80039aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80039ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80039b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80039b6:	4622      	mov	r2, r4
 80039b8:	462b      	mov	r3, r5
 80039ba:	1891      	adds	r1, r2, r2
 80039bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80039be:	415b      	adcs	r3, r3
 80039c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80039c6:	4621      	mov	r1, r4
 80039c8:	eb12 0801 	adds.w	r8, r2, r1
 80039cc:	4629      	mov	r1, r5
 80039ce:	eb43 0901 	adc.w	r9, r3, r1
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	f04f 0300 	mov.w	r3, #0
 80039da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039e6:	4690      	mov	r8, r2
 80039e8:	4699      	mov	r9, r3
 80039ea:	4623      	mov	r3, r4
 80039ec:	eb18 0303 	adds.w	r3, r8, r3
 80039f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039f4:	462b      	mov	r3, r5
 80039f6:	eb49 0303 	adc.w	r3, r9, r3
 80039fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a0a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003a0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a12:	460b      	mov	r3, r1
 8003a14:	18db      	adds	r3, r3, r3
 8003a16:	653b      	str	r3, [r7, #80]	; 0x50
 8003a18:	4613      	mov	r3, r2
 8003a1a:	eb42 0303 	adc.w	r3, r2, r3
 8003a1e:	657b      	str	r3, [r7, #84]	; 0x54
 8003a20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a28:	f7fc fc2a 	bl	8000280 <__aeabi_uldivmod>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	4b61      	ldr	r3, [pc, #388]	; (8003bb8 <UART_SetConfig+0x2d4>)
 8003a32:	fba3 2302 	umull	r2, r3, r3, r2
 8003a36:	095b      	lsrs	r3, r3, #5
 8003a38:	011c      	lsls	r4, r3, #4
 8003a3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a44:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a4c:	4642      	mov	r2, r8
 8003a4e:	464b      	mov	r3, r9
 8003a50:	1891      	adds	r1, r2, r2
 8003a52:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a54:	415b      	adcs	r3, r3
 8003a56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a5c:	4641      	mov	r1, r8
 8003a5e:	eb12 0a01 	adds.w	sl, r2, r1
 8003a62:	4649      	mov	r1, r9
 8003a64:	eb43 0b01 	adc.w	fp, r3, r1
 8003a68:	f04f 0200 	mov.w	r2, #0
 8003a6c:	f04f 0300 	mov.w	r3, #0
 8003a70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a7c:	4692      	mov	sl, r2
 8003a7e:	469b      	mov	fp, r3
 8003a80:	4643      	mov	r3, r8
 8003a82:	eb1a 0303 	adds.w	r3, sl, r3
 8003a86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a8a:	464b      	mov	r3, r9
 8003a8c:	eb4b 0303 	adc.w	r3, fp, r3
 8003a90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003aa0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003aa4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	18db      	adds	r3, r3, r3
 8003aac:	643b      	str	r3, [r7, #64]	; 0x40
 8003aae:	4613      	mov	r3, r2
 8003ab0:	eb42 0303 	adc.w	r3, r2, r3
 8003ab4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ab6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003aba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003abe:	f7fc fbdf 	bl	8000280 <__aeabi_uldivmod>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	4b3b      	ldr	r3, [pc, #236]	; (8003bb8 <UART_SetConfig+0x2d4>)
 8003aca:	fba3 2301 	umull	r2, r3, r3, r1
 8003ace:	095b      	lsrs	r3, r3, #5
 8003ad0:	2264      	movs	r2, #100	; 0x64
 8003ad2:	fb02 f303 	mul.w	r3, r2, r3
 8003ad6:	1acb      	subs	r3, r1, r3
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003ade:	4b36      	ldr	r3, [pc, #216]	; (8003bb8 <UART_SetConfig+0x2d4>)
 8003ae0:	fba3 2302 	umull	r2, r3, r3, r2
 8003ae4:	095b      	lsrs	r3, r3, #5
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003aec:	441c      	add	r4, r3
 8003aee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003af2:	2200      	movs	r2, #0
 8003af4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003af8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003afc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b00:	4642      	mov	r2, r8
 8003b02:	464b      	mov	r3, r9
 8003b04:	1891      	adds	r1, r2, r2
 8003b06:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b08:	415b      	adcs	r3, r3
 8003b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b10:	4641      	mov	r1, r8
 8003b12:	1851      	adds	r1, r2, r1
 8003b14:	6339      	str	r1, [r7, #48]	; 0x30
 8003b16:	4649      	mov	r1, r9
 8003b18:	414b      	adcs	r3, r1
 8003b1a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b1c:	f04f 0200 	mov.w	r2, #0
 8003b20:	f04f 0300 	mov.w	r3, #0
 8003b24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b28:	4659      	mov	r1, fp
 8003b2a:	00cb      	lsls	r3, r1, #3
 8003b2c:	4651      	mov	r1, sl
 8003b2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b32:	4651      	mov	r1, sl
 8003b34:	00ca      	lsls	r2, r1, #3
 8003b36:	4610      	mov	r0, r2
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	4642      	mov	r2, r8
 8003b3e:	189b      	adds	r3, r3, r2
 8003b40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b44:	464b      	mov	r3, r9
 8003b46:	460a      	mov	r2, r1
 8003b48:	eb42 0303 	adc.w	r3, r2, r3
 8003b4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b5c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b64:	460b      	mov	r3, r1
 8003b66:	18db      	adds	r3, r3, r3
 8003b68:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	eb42 0303 	adc.w	r3, r2, r3
 8003b70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b7a:	f7fc fb81 	bl	8000280 <__aeabi_uldivmod>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	460b      	mov	r3, r1
 8003b82:	4b0d      	ldr	r3, [pc, #52]	; (8003bb8 <UART_SetConfig+0x2d4>)
 8003b84:	fba3 1302 	umull	r1, r3, r3, r2
 8003b88:	095b      	lsrs	r3, r3, #5
 8003b8a:	2164      	movs	r1, #100	; 0x64
 8003b8c:	fb01 f303 	mul.w	r3, r1, r3
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	3332      	adds	r3, #50	; 0x32
 8003b96:	4a08      	ldr	r2, [pc, #32]	; (8003bb8 <UART_SetConfig+0x2d4>)
 8003b98:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9c:	095b      	lsrs	r3, r3, #5
 8003b9e:	f003 0207 	and.w	r2, r3, #7
 8003ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4422      	add	r2, r4
 8003baa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003bac:	e105      	b.n	8003dba <UART_SetConfig+0x4d6>
 8003bae:	bf00      	nop
 8003bb0:	40011000 	.word	0x40011000
 8003bb4:	40011400 	.word	0x40011400
 8003bb8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003bc6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003bca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003bce:	4642      	mov	r2, r8
 8003bd0:	464b      	mov	r3, r9
 8003bd2:	1891      	adds	r1, r2, r2
 8003bd4:	6239      	str	r1, [r7, #32]
 8003bd6:	415b      	adcs	r3, r3
 8003bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bde:	4641      	mov	r1, r8
 8003be0:	1854      	adds	r4, r2, r1
 8003be2:	4649      	mov	r1, r9
 8003be4:	eb43 0501 	adc.w	r5, r3, r1
 8003be8:	f04f 0200 	mov.w	r2, #0
 8003bec:	f04f 0300 	mov.w	r3, #0
 8003bf0:	00eb      	lsls	r3, r5, #3
 8003bf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bf6:	00e2      	lsls	r2, r4, #3
 8003bf8:	4614      	mov	r4, r2
 8003bfa:	461d      	mov	r5, r3
 8003bfc:	4643      	mov	r3, r8
 8003bfe:	18e3      	adds	r3, r4, r3
 8003c00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c04:	464b      	mov	r3, r9
 8003c06:	eb45 0303 	adc.w	r3, r5, r3
 8003c0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c1e:	f04f 0200 	mov.w	r2, #0
 8003c22:	f04f 0300 	mov.w	r3, #0
 8003c26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c2a:	4629      	mov	r1, r5
 8003c2c:	008b      	lsls	r3, r1, #2
 8003c2e:	4621      	mov	r1, r4
 8003c30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c34:	4621      	mov	r1, r4
 8003c36:	008a      	lsls	r2, r1, #2
 8003c38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c3c:	f7fc fb20 	bl	8000280 <__aeabi_uldivmod>
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4b60      	ldr	r3, [pc, #384]	; (8003dc8 <UART_SetConfig+0x4e4>)
 8003c46:	fba3 2302 	umull	r2, r3, r3, r2
 8003c4a:	095b      	lsrs	r3, r3, #5
 8003c4c:	011c      	lsls	r4, r3, #4
 8003c4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c52:	2200      	movs	r2, #0
 8003c54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c58:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c60:	4642      	mov	r2, r8
 8003c62:	464b      	mov	r3, r9
 8003c64:	1891      	adds	r1, r2, r2
 8003c66:	61b9      	str	r1, [r7, #24]
 8003c68:	415b      	adcs	r3, r3
 8003c6a:	61fb      	str	r3, [r7, #28]
 8003c6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c70:	4641      	mov	r1, r8
 8003c72:	1851      	adds	r1, r2, r1
 8003c74:	6139      	str	r1, [r7, #16]
 8003c76:	4649      	mov	r1, r9
 8003c78:	414b      	adcs	r3, r1
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c88:	4659      	mov	r1, fp
 8003c8a:	00cb      	lsls	r3, r1, #3
 8003c8c:	4651      	mov	r1, sl
 8003c8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c92:	4651      	mov	r1, sl
 8003c94:	00ca      	lsls	r2, r1, #3
 8003c96:	4610      	mov	r0, r2
 8003c98:	4619      	mov	r1, r3
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	4642      	mov	r2, r8
 8003c9e:	189b      	adds	r3, r3, r2
 8003ca0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ca4:	464b      	mov	r3, r9
 8003ca6:	460a      	mov	r2, r1
 8003ca8:	eb42 0303 	adc.w	r3, r2, r3
 8003cac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003cba:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003cbc:	f04f 0200 	mov.w	r2, #0
 8003cc0:	f04f 0300 	mov.w	r3, #0
 8003cc4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003cc8:	4649      	mov	r1, r9
 8003cca:	008b      	lsls	r3, r1, #2
 8003ccc:	4641      	mov	r1, r8
 8003cce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cd2:	4641      	mov	r1, r8
 8003cd4:	008a      	lsls	r2, r1, #2
 8003cd6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003cda:	f7fc fad1 	bl	8000280 <__aeabi_uldivmod>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	4b39      	ldr	r3, [pc, #228]	; (8003dc8 <UART_SetConfig+0x4e4>)
 8003ce4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ce8:	095b      	lsrs	r3, r3, #5
 8003cea:	2164      	movs	r1, #100	; 0x64
 8003cec:	fb01 f303 	mul.w	r3, r1, r3
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	011b      	lsls	r3, r3, #4
 8003cf4:	3332      	adds	r3, #50	; 0x32
 8003cf6:	4a34      	ldr	r2, [pc, #208]	; (8003dc8 <UART_SetConfig+0x4e4>)
 8003cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfc:	095b      	lsrs	r3, r3, #5
 8003cfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d02:	441c      	add	r4, r3
 8003d04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d08:	2200      	movs	r2, #0
 8003d0a:	673b      	str	r3, [r7, #112]	; 0x70
 8003d0c:	677a      	str	r2, [r7, #116]	; 0x74
 8003d0e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d12:	4642      	mov	r2, r8
 8003d14:	464b      	mov	r3, r9
 8003d16:	1891      	adds	r1, r2, r2
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	415b      	adcs	r3, r3
 8003d1c:	60fb      	str	r3, [r7, #12]
 8003d1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d22:	4641      	mov	r1, r8
 8003d24:	1851      	adds	r1, r2, r1
 8003d26:	6039      	str	r1, [r7, #0]
 8003d28:	4649      	mov	r1, r9
 8003d2a:	414b      	adcs	r3, r1
 8003d2c:	607b      	str	r3, [r7, #4]
 8003d2e:	f04f 0200 	mov.w	r2, #0
 8003d32:	f04f 0300 	mov.w	r3, #0
 8003d36:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d3a:	4659      	mov	r1, fp
 8003d3c:	00cb      	lsls	r3, r1, #3
 8003d3e:	4651      	mov	r1, sl
 8003d40:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d44:	4651      	mov	r1, sl
 8003d46:	00ca      	lsls	r2, r1, #3
 8003d48:	4610      	mov	r0, r2
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	4642      	mov	r2, r8
 8003d50:	189b      	adds	r3, r3, r2
 8003d52:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d54:	464b      	mov	r3, r9
 8003d56:	460a      	mov	r2, r1
 8003d58:	eb42 0303 	adc.w	r3, r2, r3
 8003d5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	663b      	str	r3, [r7, #96]	; 0x60
 8003d68:	667a      	str	r2, [r7, #100]	; 0x64
 8003d6a:	f04f 0200 	mov.w	r2, #0
 8003d6e:	f04f 0300 	mov.w	r3, #0
 8003d72:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d76:	4649      	mov	r1, r9
 8003d78:	008b      	lsls	r3, r1, #2
 8003d7a:	4641      	mov	r1, r8
 8003d7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d80:	4641      	mov	r1, r8
 8003d82:	008a      	lsls	r2, r1, #2
 8003d84:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d88:	f7fc fa7a 	bl	8000280 <__aeabi_uldivmod>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	4b0d      	ldr	r3, [pc, #52]	; (8003dc8 <UART_SetConfig+0x4e4>)
 8003d92:	fba3 1302 	umull	r1, r3, r3, r2
 8003d96:	095b      	lsrs	r3, r3, #5
 8003d98:	2164      	movs	r1, #100	; 0x64
 8003d9a:	fb01 f303 	mul.w	r3, r1, r3
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	011b      	lsls	r3, r3, #4
 8003da2:	3332      	adds	r3, #50	; 0x32
 8003da4:	4a08      	ldr	r2, [pc, #32]	; (8003dc8 <UART_SetConfig+0x4e4>)
 8003da6:	fba2 2303 	umull	r2, r3, r2, r3
 8003daa:	095b      	lsrs	r3, r3, #5
 8003dac:	f003 020f 	and.w	r2, r3, #15
 8003db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4422      	add	r2, r4
 8003db8:	609a      	str	r2, [r3, #8]
}
 8003dba:	bf00      	nop
 8003dbc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dc6:	bf00      	nop
 8003dc8:	51eb851f 	.word	0x51eb851f

08003dcc <__errno>:
 8003dcc:	4b01      	ldr	r3, [pc, #4]	; (8003dd4 <__errno+0x8>)
 8003dce:	6818      	ldr	r0, [r3, #0]
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	20000018 	.word	0x20000018

08003dd8 <__sflush_r>:
 8003dd8:	898a      	ldrh	r2, [r1, #12]
 8003dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dde:	4605      	mov	r5, r0
 8003de0:	0710      	lsls	r0, r2, #28
 8003de2:	460c      	mov	r4, r1
 8003de4:	d458      	bmi.n	8003e98 <__sflush_r+0xc0>
 8003de6:	684b      	ldr	r3, [r1, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	dc05      	bgt.n	8003df8 <__sflush_r+0x20>
 8003dec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	dc02      	bgt.n	8003df8 <__sflush_r+0x20>
 8003df2:	2000      	movs	r0, #0
 8003df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003df8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003dfa:	2e00      	cmp	r6, #0
 8003dfc:	d0f9      	beq.n	8003df2 <__sflush_r+0x1a>
 8003dfe:	2300      	movs	r3, #0
 8003e00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003e04:	682f      	ldr	r7, [r5, #0]
 8003e06:	602b      	str	r3, [r5, #0]
 8003e08:	d032      	beq.n	8003e70 <__sflush_r+0x98>
 8003e0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003e0c:	89a3      	ldrh	r3, [r4, #12]
 8003e0e:	075a      	lsls	r2, r3, #29
 8003e10:	d505      	bpl.n	8003e1e <__sflush_r+0x46>
 8003e12:	6863      	ldr	r3, [r4, #4]
 8003e14:	1ac0      	subs	r0, r0, r3
 8003e16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e18:	b10b      	cbz	r3, 8003e1e <__sflush_r+0x46>
 8003e1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e1c:	1ac0      	subs	r0, r0, r3
 8003e1e:	2300      	movs	r3, #0
 8003e20:	4602      	mov	r2, r0
 8003e22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e24:	6a21      	ldr	r1, [r4, #32]
 8003e26:	4628      	mov	r0, r5
 8003e28:	47b0      	blx	r6
 8003e2a:	1c43      	adds	r3, r0, #1
 8003e2c:	89a3      	ldrh	r3, [r4, #12]
 8003e2e:	d106      	bne.n	8003e3e <__sflush_r+0x66>
 8003e30:	6829      	ldr	r1, [r5, #0]
 8003e32:	291d      	cmp	r1, #29
 8003e34:	d82c      	bhi.n	8003e90 <__sflush_r+0xb8>
 8003e36:	4a2a      	ldr	r2, [pc, #168]	; (8003ee0 <__sflush_r+0x108>)
 8003e38:	40ca      	lsrs	r2, r1
 8003e3a:	07d6      	lsls	r6, r2, #31
 8003e3c:	d528      	bpl.n	8003e90 <__sflush_r+0xb8>
 8003e3e:	2200      	movs	r2, #0
 8003e40:	6062      	str	r2, [r4, #4]
 8003e42:	04d9      	lsls	r1, r3, #19
 8003e44:	6922      	ldr	r2, [r4, #16]
 8003e46:	6022      	str	r2, [r4, #0]
 8003e48:	d504      	bpl.n	8003e54 <__sflush_r+0x7c>
 8003e4a:	1c42      	adds	r2, r0, #1
 8003e4c:	d101      	bne.n	8003e52 <__sflush_r+0x7a>
 8003e4e:	682b      	ldr	r3, [r5, #0]
 8003e50:	b903      	cbnz	r3, 8003e54 <__sflush_r+0x7c>
 8003e52:	6560      	str	r0, [r4, #84]	; 0x54
 8003e54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e56:	602f      	str	r7, [r5, #0]
 8003e58:	2900      	cmp	r1, #0
 8003e5a:	d0ca      	beq.n	8003df2 <__sflush_r+0x1a>
 8003e5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e60:	4299      	cmp	r1, r3
 8003e62:	d002      	beq.n	8003e6a <__sflush_r+0x92>
 8003e64:	4628      	mov	r0, r5
 8003e66:	f000 f9b1 	bl	80041cc <_free_r>
 8003e6a:	2000      	movs	r0, #0
 8003e6c:	6360      	str	r0, [r4, #52]	; 0x34
 8003e6e:	e7c1      	b.n	8003df4 <__sflush_r+0x1c>
 8003e70:	6a21      	ldr	r1, [r4, #32]
 8003e72:	2301      	movs	r3, #1
 8003e74:	4628      	mov	r0, r5
 8003e76:	47b0      	blx	r6
 8003e78:	1c41      	adds	r1, r0, #1
 8003e7a:	d1c7      	bne.n	8003e0c <__sflush_r+0x34>
 8003e7c:	682b      	ldr	r3, [r5, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d0c4      	beq.n	8003e0c <__sflush_r+0x34>
 8003e82:	2b1d      	cmp	r3, #29
 8003e84:	d001      	beq.n	8003e8a <__sflush_r+0xb2>
 8003e86:	2b16      	cmp	r3, #22
 8003e88:	d101      	bne.n	8003e8e <__sflush_r+0xb6>
 8003e8a:	602f      	str	r7, [r5, #0]
 8003e8c:	e7b1      	b.n	8003df2 <__sflush_r+0x1a>
 8003e8e:	89a3      	ldrh	r3, [r4, #12]
 8003e90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e94:	81a3      	strh	r3, [r4, #12]
 8003e96:	e7ad      	b.n	8003df4 <__sflush_r+0x1c>
 8003e98:	690f      	ldr	r7, [r1, #16]
 8003e9a:	2f00      	cmp	r7, #0
 8003e9c:	d0a9      	beq.n	8003df2 <__sflush_r+0x1a>
 8003e9e:	0793      	lsls	r3, r2, #30
 8003ea0:	680e      	ldr	r6, [r1, #0]
 8003ea2:	bf08      	it	eq
 8003ea4:	694b      	ldreq	r3, [r1, #20]
 8003ea6:	600f      	str	r7, [r1, #0]
 8003ea8:	bf18      	it	ne
 8003eaa:	2300      	movne	r3, #0
 8003eac:	eba6 0807 	sub.w	r8, r6, r7
 8003eb0:	608b      	str	r3, [r1, #8]
 8003eb2:	f1b8 0f00 	cmp.w	r8, #0
 8003eb6:	dd9c      	ble.n	8003df2 <__sflush_r+0x1a>
 8003eb8:	6a21      	ldr	r1, [r4, #32]
 8003eba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003ebc:	4643      	mov	r3, r8
 8003ebe:	463a      	mov	r2, r7
 8003ec0:	4628      	mov	r0, r5
 8003ec2:	47b0      	blx	r6
 8003ec4:	2800      	cmp	r0, #0
 8003ec6:	dc06      	bgt.n	8003ed6 <__sflush_r+0xfe>
 8003ec8:	89a3      	ldrh	r3, [r4, #12]
 8003eca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ece:	81a3      	strh	r3, [r4, #12]
 8003ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed4:	e78e      	b.n	8003df4 <__sflush_r+0x1c>
 8003ed6:	4407      	add	r7, r0
 8003ed8:	eba8 0800 	sub.w	r8, r8, r0
 8003edc:	e7e9      	b.n	8003eb2 <__sflush_r+0xda>
 8003ede:	bf00      	nop
 8003ee0:	20400001 	.word	0x20400001

08003ee4 <_fflush_r>:
 8003ee4:	b538      	push	{r3, r4, r5, lr}
 8003ee6:	690b      	ldr	r3, [r1, #16]
 8003ee8:	4605      	mov	r5, r0
 8003eea:	460c      	mov	r4, r1
 8003eec:	b913      	cbnz	r3, 8003ef4 <_fflush_r+0x10>
 8003eee:	2500      	movs	r5, #0
 8003ef0:	4628      	mov	r0, r5
 8003ef2:	bd38      	pop	{r3, r4, r5, pc}
 8003ef4:	b118      	cbz	r0, 8003efe <_fflush_r+0x1a>
 8003ef6:	6983      	ldr	r3, [r0, #24]
 8003ef8:	b90b      	cbnz	r3, 8003efe <_fflush_r+0x1a>
 8003efa:	f000 f899 	bl	8004030 <__sinit>
 8003efe:	4b14      	ldr	r3, [pc, #80]	; (8003f50 <_fflush_r+0x6c>)
 8003f00:	429c      	cmp	r4, r3
 8003f02:	d11b      	bne.n	8003f3c <_fflush_r+0x58>
 8003f04:	686c      	ldr	r4, [r5, #4]
 8003f06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0ef      	beq.n	8003eee <_fflush_r+0xa>
 8003f0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003f10:	07d0      	lsls	r0, r2, #31
 8003f12:	d404      	bmi.n	8003f1e <_fflush_r+0x3a>
 8003f14:	0599      	lsls	r1, r3, #22
 8003f16:	d402      	bmi.n	8003f1e <_fflush_r+0x3a>
 8003f18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f1a:	f000 f94c 	bl	80041b6 <__retarget_lock_acquire_recursive>
 8003f1e:	4628      	mov	r0, r5
 8003f20:	4621      	mov	r1, r4
 8003f22:	f7ff ff59 	bl	8003dd8 <__sflush_r>
 8003f26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f28:	07da      	lsls	r2, r3, #31
 8003f2a:	4605      	mov	r5, r0
 8003f2c:	d4e0      	bmi.n	8003ef0 <_fflush_r+0xc>
 8003f2e:	89a3      	ldrh	r3, [r4, #12]
 8003f30:	059b      	lsls	r3, r3, #22
 8003f32:	d4dd      	bmi.n	8003ef0 <_fflush_r+0xc>
 8003f34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f36:	f000 f93f 	bl	80041b8 <__retarget_lock_release_recursive>
 8003f3a:	e7d9      	b.n	8003ef0 <_fflush_r+0xc>
 8003f3c:	4b05      	ldr	r3, [pc, #20]	; (8003f54 <_fflush_r+0x70>)
 8003f3e:	429c      	cmp	r4, r3
 8003f40:	d101      	bne.n	8003f46 <_fflush_r+0x62>
 8003f42:	68ac      	ldr	r4, [r5, #8]
 8003f44:	e7df      	b.n	8003f06 <_fflush_r+0x22>
 8003f46:	4b04      	ldr	r3, [pc, #16]	; (8003f58 <_fflush_r+0x74>)
 8003f48:	429c      	cmp	r4, r3
 8003f4a:	bf08      	it	eq
 8003f4c:	68ec      	ldreq	r4, [r5, #12]
 8003f4e:	e7da      	b.n	8003f06 <_fflush_r+0x22>
 8003f50:	08005034 	.word	0x08005034
 8003f54:	08005054 	.word	0x08005054
 8003f58:	08005014 	.word	0x08005014

08003f5c <fflush>:
 8003f5c:	4601      	mov	r1, r0
 8003f5e:	b920      	cbnz	r0, 8003f6a <fflush+0xe>
 8003f60:	4b04      	ldr	r3, [pc, #16]	; (8003f74 <fflush+0x18>)
 8003f62:	4905      	ldr	r1, [pc, #20]	; (8003f78 <fflush+0x1c>)
 8003f64:	6818      	ldr	r0, [r3, #0]
 8003f66:	f000 b8e1 	b.w	800412c <_fwalk_reent>
 8003f6a:	4b04      	ldr	r3, [pc, #16]	; (8003f7c <fflush+0x20>)
 8003f6c:	6818      	ldr	r0, [r3, #0]
 8003f6e:	f7ff bfb9 	b.w	8003ee4 <_fflush_r>
 8003f72:	bf00      	nop
 8003f74:	08005074 	.word	0x08005074
 8003f78:	08003ee5 	.word	0x08003ee5
 8003f7c:	20000018 	.word	0x20000018

08003f80 <std>:
 8003f80:	2300      	movs	r3, #0
 8003f82:	b510      	push	{r4, lr}
 8003f84:	4604      	mov	r4, r0
 8003f86:	e9c0 3300 	strd	r3, r3, [r0]
 8003f8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f8e:	6083      	str	r3, [r0, #8]
 8003f90:	8181      	strh	r1, [r0, #12]
 8003f92:	6643      	str	r3, [r0, #100]	; 0x64
 8003f94:	81c2      	strh	r2, [r0, #14]
 8003f96:	6183      	str	r3, [r0, #24]
 8003f98:	4619      	mov	r1, r3
 8003f9a:	2208      	movs	r2, #8
 8003f9c:	305c      	adds	r0, #92	; 0x5c
 8003f9e:	f000 f90c 	bl	80041ba <memset>
 8003fa2:	4b05      	ldr	r3, [pc, #20]	; (8003fb8 <std+0x38>)
 8003fa4:	6263      	str	r3, [r4, #36]	; 0x24
 8003fa6:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <std+0x3c>)
 8003fa8:	62a3      	str	r3, [r4, #40]	; 0x28
 8003faa:	4b05      	ldr	r3, [pc, #20]	; (8003fc0 <std+0x40>)
 8003fac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003fae:	4b05      	ldr	r3, [pc, #20]	; (8003fc4 <std+0x44>)
 8003fb0:	6224      	str	r4, [r4, #32]
 8003fb2:	6323      	str	r3, [r4, #48]	; 0x30
 8003fb4:	bd10      	pop	{r4, pc}
 8003fb6:	bf00      	nop
 8003fb8:	080044c9 	.word	0x080044c9
 8003fbc:	080044eb 	.word	0x080044eb
 8003fc0:	08004523 	.word	0x08004523
 8003fc4:	08004547 	.word	0x08004547

08003fc8 <_cleanup_r>:
 8003fc8:	4901      	ldr	r1, [pc, #4]	; (8003fd0 <_cleanup_r+0x8>)
 8003fca:	f000 b8af 	b.w	800412c <_fwalk_reent>
 8003fce:	bf00      	nop
 8003fd0:	08003ee5 	.word	0x08003ee5

08003fd4 <__sfmoreglue>:
 8003fd4:	b570      	push	{r4, r5, r6, lr}
 8003fd6:	2268      	movs	r2, #104	; 0x68
 8003fd8:	1e4d      	subs	r5, r1, #1
 8003fda:	4355      	muls	r5, r2
 8003fdc:	460e      	mov	r6, r1
 8003fde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003fe2:	f000 f95f 	bl	80042a4 <_malloc_r>
 8003fe6:	4604      	mov	r4, r0
 8003fe8:	b140      	cbz	r0, 8003ffc <__sfmoreglue+0x28>
 8003fea:	2100      	movs	r1, #0
 8003fec:	e9c0 1600 	strd	r1, r6, [r0]
 8003ff0:	300c      	adds	r0, #12
 8003ff2:	60a0      	str	r0, [r4, #8]
 8003ff4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003ff8:	f000 f8df 	bl	80041ba <memset>
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	bd70      	pop	{r4, r5, r6, pc}

08004000 <__sfp_lock_acquire>:
 8004000:	4801      	ldr	r0, [pc, #4]	; (8004008 <__sfp_lock_acquire+0x8>)
 8004002:	f000 b8d8 	b.w	80041b6 <__retarget_lock_acquire_recursive>
 8004006:	bf00      	nop
 8004008:	20000185 	.word	0x20000185

0800400c <__sfp_lock_release>:
 800400c:	4801      	ldr	r0, [pc, #4]	; (8004014 <__sfp_lock_release+0x8>)
 800400e:	f000 b8d3 	b.w	80041b8 <__retarget_lock_release_recursive>
 8004012:	bf00      	nop
 8004014:	20000185 	.word	0x20000185

08004018 <__sinit_lock_acquire>:
 8004018:	4801      	ldr	r0, [pc, #4]	; (8004020 <__sinit_lock_acquire+0x8>)
 800401a:	f000 b8cc 	b.w	80041b6 <__retarget_lock_acquire_recursive>
 800401e:	bf00      	nop
 8004020:	20000186 	.word	0x20000186

08004024 <__sinit_lock_release>:
 8004024:	4801      	ldr	r0, [pc, #4]	; (800402c <__sinit_lock_release+0x8>)
 8004026:	f000 b8c7 	b.w	80041b8 <__retarget_lock_release_recursive>
 800402a:	bf00      	nop
 800402c:	20000186 	.word	0x20000186

08004030 <__sinit>:
 8004030:	b510      	push	{r4, lr}
 8004032:	4604      	mov	r4, r0
 8004034:	f7ff fff0 	bl	8004018 <__sinit_lock_acquire>
 8004038:	69a3      	ldr	r3, [r4, #24]
 800403a:	b11b      	cbz	r3, 8004044 <__sinit+0x14>
 800403c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004040:	f7ff bff0 	b.w	8004024 <__sinit_lock_release>
 8004044:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004048:	6523      	str	r3, [r4, #80]	; 0x50
 800404a:	4b13      	ldr	r3, [pc, #76]	; (8004098 <__sinit+0x68>)
 800404c:	4a13      	ldr	r2, [pc, #76]	; (800409c <__sinit+0x6c>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	62a2      	str	r2, [r4, #40]	; 0x28
 8004052:	42a3      	cmp	r3, r4
 8004054:	bf04      	itt	eq
 8004056:	2301      	moveq	r3, #1
 8004058:	61a3      	streq	r3, [r4, #24]
 800405a:	4620      	mov	r0, r4
 800405c:	f000 f820 	bl	80040a0 <__sfp>
 8004060:	6060      	str	r0, [r4, #4]
 8004062:	4620      	mov	r0, r4
 8004064:	f000 f81c 	bl	80040a0 <__sfp>
 8004068:	60a0      	str	r0, [r4, #8]
 800406a:	4620      	mov	r0, r4
 800406c:	f000 f818 	bl	80040a0 <__sfp>
 8004070:	2200      	movs	r2, #0
 8004072:	60e0      	str	r0, [r4, #12]
 8004074:	2104      	movs	r1, #4
 8004076:	6860      	ldr	r0, [r4, #4]
 8004078:	f7ff ff82 	bl	8003f80 <std>
 800407c:	68a0      	ldr	r0, [r4, #8]
 800407e:	2201      	movs	r2, #1
 8004080:	2109      	movs	r1, #9
 8004082:	f7ff ff7d 	bl	8003f80 <std>
 8004086:	68e0      	ldr	r0, [r4, #12]
 8004088:	2202      	movs	r2, #2
 800408a:	2112      	movs	r1, #18
 800408c:	f7ff ff78 	bl	8003f80 <std>
 8004090:	2301      	movs	r3, #1
 8004092:	61a3      	str	r3, [r4, #24]
 8004094:	e7d2      	b.n	800403c <__sinit+0xc>
 8004096:	bf00      	nop
 8004098:	08005074 	.word	0x08005074
 800409c:	08003fc9 	.word	0x08003fc9

080040a0 <__sfp>:
 80040a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a2:	4607      	mov	r7, r0
 80040a4:	f7ff ffac 	bl	8004000 <__sfp_lock_acquire>
 80040a8:	4b1e      	ldr	r3, [pc, #120]	; (8004124 <__sfp+0x84>)
 80040aa:	681e      	ldr	r6, [r3, #0]
 80040ac:	69b3      	ldr	r3, [r6, #24]
 80040ae:	b913      	cbnz	r3, 80040b6 <__sfp+0x16>
 80040b0:	4630      	mov	r0, r6
 80040b2:	f7ff ffbd 	bl	8004030 <__sinit>
 80040b6:	3648      	adds	r6, #72	; 0x48
 80040b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80040bc:	3b01      	subs	r3, #1
 80040be:	d503      	bpl.n	80040c8 <__sfp+0x28>
 80040c0:	6833      	ldr	r3, [r6, #0]
 80040c2:	b30b      	cbz	r3, 8004108 <__sfp+0x68>
 80040c4:	6836      	ldr	r6, [r6, #0]
 80040c6:	e7f7      	b.n	80040b8 <__sfp+0x18>
 80040c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80040cc:	b9d5      	cbnz	r5, 8004104 <__sfp+0x64>
 80040ce:	4b16      	ldr	r3, [pc, #88]	; (8004128 <__sfp+0x88>)
 80040d0:	60e3      	str	r3, [r4, #12]
 80040d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80040d6:	6665      	str	r5, [r4, #100]	; 0x64
 80040d8:	f000 f86c 	bl	80041b4 <__retarget_lock_init_recursive>
 80040dc:	f7ff ff96 	bl	800400c <__sfp_lock_release>
 80040e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80040e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80040e8:	6025      	str	r5, [r4, #0]
 80040ea:	61a5      	str	r5, [r4, #24]
 80040ec:	2208      	movs	r2, #8
 80040ee:	4629      	mov	r1, r5
 80040f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80040f4:	f000 f861 	bl	80041ba <memset>
 80040f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80040fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004100:	4620      	mov	r0, r4
 8004102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004104:	3468      	adds	r4, #104	; 0x68
 8004106:	e7d9      	b.n	80040bc <__sfp+0x1c>
 8004108:	2104      	movs	r1, #4
 800410a:	4638      	mov	r0, r7
 800410c:	f7ff ff62 	bl	8003fd4 <__sfmoreglue>
 8004110:	4604      	mov	r4, r0
 8004112:	6030      	str	r0, [r6, #0]
 8004114:	2800      	cmp	r0, #0
 8004116:	d1d5      	bne.n	80040c4 <__sfp+0x24>
 8004118:	f7ff ff78 	bl	800400c <__sfp_lock_release>
 800411c:	230c      	movs	r3, #12
 800411e:	603b      	str	r3, [r7, #0]
 8004120:	e7ee      	b.n	8004100 <__sfp+0x60>
 8004122:	bf00      	nop
 8004124:	08005074 	.word	0x08005074
 8004128:	ffff0001 	.word	0xffff0001

0800412c <_fwalk_reent>:
 800412c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004130:	4606      	mov	r6, r0
 8004132:	4688      	mov	r8, r1
 8004134:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004138:	2700      	movs	r7, #0
 800413a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800413e:	f1b9 0901 	subs.w	r9, r9, #1
 8004142:	d505      	bpl.n	8004150 <_fwalk_reent+0x24>
 8004144:	6824      	ldr	r4, [r4, #0]
 8004146:	2c00      	cmp	r4, #0
 8004148:	d1f7      	bne.n	800413a <_fwalk_reent+0xe>
 800414a:	4638      	mov	r0, r7
 800414c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004150:	89ab      	ldrh	r3, [r5, #12]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d907      	bls.n	8004166 <_fwalk_reent+0x3a>
 8004156:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800415a:	3301      	adds	r3, #1
 800415c:	d003      	beq.n	8004166 <_fwalk_reent+0x3a>
 800415e:	4629      	mov	r1, r5
 8004160:	4630      	mov	r0, r6
 8004162:	47c0      	blx	r8
 8004164:	4307      	orrs	r7, r0
 8004166:	3568      	adds	r5, #104	; 0x68
 8004168:	e7e9      	b.n	800413e <_fwalk_reent+0x12>
	...

0800416c <__libc_init_array>:
 800416c:	b570      	push	{r4, r5, r6, lr}
 800416e:	4d0d      	ldr	r5, [pc, #52]	; (80041a4 <__libc_init_array+0x38>)
 8004170:	4c0d      	ldr	r4, [pc, #52]	; (80041a8 <__libc_init_array+0x3c>)
 8004172:	1b64      	subs	r4, r4, r5
 8004174:	10a4      	asrs	r4, r4, #2
 8004176:	2600      	movs	r6, #0
 8004178:	42a6      	cmp	r6, r4
 800417a:	d109      	bne.n	8004190 <__libc_init_array+0x24>
 800417c:	4d0b      	ldr	r5, [pc, #44]	; (80041ac <__libc_init_array+0x40>)
 800417e:	4c0c      	ldr	r4, [pc, #48]	; (80041b0 <__libc_init_array+0x44>)
 8004180:	f000 fe6e 	bl	8004e60 <_init>
 8004184:	1b64      	subs	r4, r4, r5
 8004186:	10a4      	asrs	r4, r4, #2
 8004188:	2600      	movs	r6, #0
 800418a:	42a6      	cmp	r6, r4
 800418c:	d105      	bne.n	800419a <__libc_init_array+0x2e>
 800418e:	bd70      	pop	{r4, r5, r6, pc}
 8004190:	f855 3b04 	ldr.w	r3, [r5], #4
 8004194:	4798      	blx	r3
 8004196:	3601      	adds	r6, #1
 8004198:	e7ee      	b.n	8004178 <__libc_init_array+0xc>
 800419a:	f855 3b04 	ldr.w	r3, [r5], #4
 800419e:	4798      	blx	r3
 80041a0:	3601      	adds	r6, #1
 80041a2:	e7f2      	b.n	800418a <__libc_init_array+0x1e>
 80041a4:	080050b4 	.word	0x080050b4
 80041a8:	080050b4 	.word	0x080050b4
 80041ac:	080050b4 	.word	0x080050b4
 80041b0:	080050b8 	.word	0x080050b8

080041b4 <__retarget_lock_init_recursive>:
 80041b4:	4770      	bx	lr

080041b6 <__retarget_lock_acquire_recursive>:
 80041b6:	4770      	bx	lr

080041b8 <__retarget_lock_release_recursive>:
 80041b8:	4770      	bx	lr

080041ba <memset>:
 80041ba:	4402      	add	r2, r0
 80041bc:	4603      	mov	r3, r0
 80041be:	4293      	cmp	r3, r2
 80041c0:	d100      	bne.n	80041c4 <memset+0xa>
 80041c2:	4770      	bx	lr
 80041c4:	f803 1b01 	strb.w	r1, [r3], #1
 80041c8:	e7f9      	b.n	80041be <memset+0x4>
	...

080041cc <_free_r>:
 80041cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80041ce:	2900      	cmp	r1, #0
 80041d0:	d044      	beq.n	800425c <_free_r+0x90>
 80041d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041d6:	9001      	str	r0, [sp, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f1a1 0404 	sub.w	r4, r1, #4
 80041de:	bfb8      	it	lt
 80041e0:	18e4      	addlt	r4, r4, r3
 80041e2:	f000 fb0f 	bl	8004804 <__malloc_lock>
 80041e6:	4a1e      	ldr	r2, [pc, #120]	; (8004260 <_free_r+0x94>)
 80041e8:	9801      	ldr	r0, [sp, #4]
 80041ea:	6813      	ldr	r3, [r2, #0]
 80041ec:	b933      	cbnz	r3, 80041fc <_free_r+0x30>
 80041ee:	6063      	str	r3, [r4, #4]
 80041f0:	6014      	str	r4, [r2, #0]
 80041f2:	b003      	add	sp, #12
 80041f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80041f8:	f000 bb0a 	b.w	8004810 <__malloc_unlock>
 80041fc:	42a3      	cmp	r3, r4
 80041fe:	d908      	bls.n	8004212 <_free_r+0x46>
 8004200:	6825      	ldr	r5, [r4, #0]
 8004202:	1961      	adds	r1, r4, r5
 8004204:	428b      	cmp	r3, r1
 8004206:	bf01      	itttt	eq
 8004208:	6819      	ldreq	r1, [r3, #0]
 800420a:	685b      	ldreq	r3, [r3, #4]
 800420c:	1949      	addeq	r1, r1, r5
 800420e:	6021      	streq	r1, [r4, #0]
 8004210:	e7ed      	b.n	80041ee <_free_r+0x22>
 8004212:	461a      	mov	r2, r3
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	b10b      	cbz	r3, 800421c <_free_r+0x50>
 8004218:	42a3      	cmp	r3, r4
 800421a:	d9fa      	bls.n	8004212 <_free_r+0x46>
 800421c:	6811      	ldr	r1, [r2, #0]
 800421e:	1855      	adds	r5, r2, r1
 8004220:	42a5      	cmp	r5, r4
 8004222:	d10b      	bne.n	800423c <_free_r+0x70>
 8004224:	6824      	ldr	r4, [r4, #0]
 8004226:	4421      	add	r1, r4
 8004228:	1854      	adds	r4, r2, r1
 800422a:	42a3      	cmp	r3, r4
 800422c:	6011      	str	r1, [r2, #0]
 800422e:	d1e0      	bne.n	80041f2 <_free_r+0x26>
 8004230:	681c      	ldr	r4, [r3, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	6053      	str	r3, [r2, #4]
 8004236:	4421      	add	r1, r4
 8004238:	6011      	str	r1, [r2, #0]
 800423a:	e7da      	b.n	80041f2 <_free_r+0x26>
 800423c:	d902      	bls.n	8004244 <_free_r+0x78>
 800423e:	230c      	movs	r3, #12
 8004240:	6003      	str	r3, [r0, #0]
 8004242:	e7d6      	b.n	80041f2 <_free_r+0x26>
 8004244:	6825      	ldr	r5, [r4, #0]
 8004246:	1961      	adds	r1, r4, r5
 8004248:	428b      	cmp	r3, r1
 800424a:	bf04      	itt	eq
 800424c:	6819      	ldreq	r1, [r3, #0]
 800424e:	685b      	ldreq	r3, [r3, #4]
 8004250:	6063      	str	r3, [r4, #4]
 8004252:	bf04      	itt	eq
 8004254:	1949      	addeq	r1, r1, r5
 8004256:	6021      	streq	r1, [r4, #0]
 8004258:	6054      	str	r4, [r2, #4]
 800425a:	e7ca      	b.n	80041f2 <_free_r+0x26>
 800425c:	b003      	add	sp, #12
 800425e:	bd30      	pop	{r4, r5, pc}
 8004260:	20000188 	.word	0x20000188

08004264 <sbrk_aligned>:
 8004264:	b570      	push	{r4, r5, r6, lr}
 8004266:	4e0e      	ldr	r6, [pc, #56]	; (80042a0 <sbrk_aligned+0x3c>)
 8004268:	460c      	mov	r4, r1
 800426a:	6831      	ldr	r1, [r6, #0]
 800426c:	4605      	mov	r5, r0
 800426e:	b911      	cbnz	r1, 8004276 <sbrk_aligned+0x12>
 8004270:	f000 f91a 	bl	80044a8 <_sbrk_r>
 8004274:	6030      	str	r0, [r6, #0]
 8004276:	4621      	mov	r1, r4
 8004278:	4628      	mov	r0, r5
 800427a:	f000 f915 	bl	80044a8 <_sbrk_r>
 800427e:	1c43      	adds	r3, r0, #1
 8004280:	d00a      	beq.n	8004298 <sbrk_aligned+0x34>
 8004282:	1cc4      	adds	r4, r0, #3
 8004284:	f024 0403 	bic.w	r4, r4, #3
 8004288:	42a0      	cmp	r0, r4
 800428a:	d007      	beq.n	800429c <sbrk_aligned+0x38>
 800428c:	1a21      	subs	r1, r4, r0
 800428e:	4628      	mov	r0, r5
 8004290:	f000 f90a 	bl	80044a8 <_sbrk_r>
 8004294:	3001      	adds	r0, #1
 8004296:	d101      	bne.n	800429c <sbrk_aligned+0x38>
 8004298:	f04f 34ff 	mov.w	r4, #4294967295
 800429c:	4620      	mov	r0, r4
 800429e:	bd70      	pop	{r4, r5, r6, pc}
 80042a0:	2000018c 	.word	0x2000018c

080042a4 <_malloc_r>:
 80042a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042a8:	1ccd      	adds	r5, r1, #3
 80042aa:	f025 0503 	bic.w	r5, r5, #3
 80042ae:	3508      	adds	r5, #8
 80042b0:	2d0c      	cmp	r5, #12
 80042b2:	bf38      	it	cc
 80042b4:	250c      	movcc	r5, #12
 80042b6:	2d00      	cmp	r5, #0
 80042b8:	4607      	mov	r7, r0
 80042ba:	db01      	blt.n	80042c0 <_malloc_r+0x1c>
 80042bc:	42a9      	cmp	r1, r5
 80042be:	d905      	bls.n	80042cc <_malloc_r+0x28>
 80042c0:	230c      	movs	r3, #12
 80042c2:	603b      	str	r3, [r7, #0]
 80042c4:	2600      	movs	r6, #0
 80042c6:	4630      	mov	r0, r6
 80042c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042cc:	4e2e      	ldr	r6, [pc, #184]	; (8004388 <_malloc_r+0xe4>)
 80042ce:	f000 fa99 	bl	8004804 <__malloc_lock>
 80042d2:	6833      	ldr	r3, [r6, #0]
 80042d4:	461c      	mov	r4, r3
 80042d6:	bb34      	cbnz	r4, 8004326 <_malloc_r+0x82>
 80042d8:	4629      	mov	r1, r5
 80042da:	4638      	mov	r0, r7
 80042dc:	f7ff ffc2 	bl	8004264 <sbrk_aligned>
 80042e0:	1c43      	adds	r3, r0, #1
 80042e2:	4604      	mov	r4, r0
 80042e4:	d14d      	bne.n	8004382 <_malloc_r+0xde>
 80042e6:	6834      	ldr	r4, [r6, #0]
 80042e8:	4626      	mov	r6, r4
 80042ea:	2e00      	cmp	r6, #0
 80042ec:	d140      	bne.n	8004370 <_malloc_r+0xcc>
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	4631      	mov	r1, r6
 80042f2:	4638      	mov	r0, r7
 80042f4:	eb04 0803 	add.w	r8, r4, r3
 80042f8:	f000 f8d6 	bl	80044a8 <_sbrk_r>
 80042fc:	4580      	cmp	r8, r0
 80042fe:	d13a      	bne.n	8004376 <_malloc_r+0xd2>
 8004300:	6821      	ldr	r1, [r4, #0]
 8004302:	3503      	adds	r5, #3
 8004304:	1a6d      	subs	r5, r5, r1
 8004306:	f025 0503 	bic.w	r5, r5, #3
 800430a:	3508      	adds	r5, #8
 800430c:	2d0c      	cmp	r5, #12
 800430e:	bf38      	it	cc
 8004310:	250c      	movcc	r5, #12
 8004312:	4629      	mov	r1, r5
 8004314:	4638      	mov	r0, r7
 8004316:	f7ff ffa5 	bl	8004264 <sbrk_aligned>
 800431a:	3001      	adds	r0, #1
 800431c:	d02b      	beq.n	8004376 <_malloc_r+0xd2>
 800431e:	6823      	ldr	r3, [r4, #0]
 8004320:	442b      	add	r3, r5
 8004322:	6023      	str	r3, [r4, #0]
 8004324:	e00e      	b.n	8004344 <_malloc_r+0xa0>
 8004326:	6822      	ldr	r2, [r4, #0]
 8004328:	1b52      	subs	r2, r2, r5
 800432a:	d41e      	bmi.n	800436a <_malloc_r+0xc6>
 800432c:	2a0b      	cmp	r2, #11
 800432e:	d916      	bls.n	800435e <_malloc_r+0xba>
 8004330:	1961      	adds	r1, r4, r5
 8004332:	42a3      	cmp	r3, r4
 8004334:	6025      	str	r5, [r4, #0]
 8004336:	bf18      	it	ne
 8004338:	6059      	strne	r1, [r3, #4]
 800433a:	6863      	ldr	r3, [r4, #4]
 800433c:	bf08      	it	eq
 800433e:	6031      	streq	r1, [r6, #0]
 8004340:	5162      	str	r2, [r4, r5]
 8004342:	604b      	str	r3, [r1, #4]
 8004344:	4638      	mov	r0, r7
 8004346:	f104 060b 	add.w	r6, r4, #11
 800434a:	f000 fa61 	bl	8004810 <__malloc_unlock>
 800434e:	f026 0607 	bic.w	r6, r6, #7
 8004352:	1d23      	adds	r3, r4, #4
 8004354:	1af2      	subs	r2, r6, r3
 8004356:	d0b6      	beq.n	80042c6 <_malloc_r+0x22>
 8004358:	1b9b      	subs	r3, r3, r6
 800435a:	50a3      	str	r3, [r4, r2]
 800435c:	e7b3      	b.n	80042c6 <_malloc_r+0x22>
 800435e:	6862      	ldr	r2, [r4, #4]
 8004360:	42a3      	cmp	r3, r4
 8004362:	bf0c      	ite	eq
 8004364:	6032      	streq	r2, [r6, #0]
 8004366:	605a      	strne	r2, [r3, #4]
 8004368:	e7ec      	b.n	8004344 <_malloc_r+0xa0>
 800436a:	4623      	mov	r3, r4
 800436c:	6864      	ldr	r4, [r4, #4]
 800436e:	e7b2      	b.n	80042d6 <_malloc_r+0x32>
 8004370:	4634      	mov	r4, r6
 8004372:	6876      	ldr	r6, [r6, #4]
 8004374:	e7b9      	b.n	80042ea <_malloc_r+0x46>
 8004376:	230c      	movs	r3, #12
 8004378:	603b      	str	r3, [r7, #0]
 800437a:	4638      	mov	r0, r7
 800437c:	f000 fa48 	bl	8004810 <__malloc_unlock>
 8004380:	e7a1      	b.n	80042c6 <_malloc_r+0x22>
 8004382:	6025      	str	r5, [r4, #0]
 8004384:	e7de      	b.n	8004344 <_malloc_r+0xa0>
 8004386:	bf00      	nop
 8004388:	20000188 	.word	0x20000188

0800438c <iprintf>:
 800438c:	b40f      	push	{r0, r1, r2, r3}
 800438e:	4b0a      	ldr	r3, [pc, #40]	; (80043b8 <iprintf+0x2c>)
 8004390:	b513      	push	{r0, r1, r4, lr}
 8004392:	681c      	ldr	r4, [r3, #0]
 8004394:	b124      	cbz	r4, 80043a0 <iprintf+0x14>
 8004396:	69a3      	ldr	r3, [r4, #24]
 8004398:	b913      	cbnz	r3, 80043a0 <iprintf+0x14>
 800439a:	4620      	mov	r0, r4
 800439c:	f7ff fe48 	bl	8004030 <__sinit>
 80043a0:	ab05      	add	r3, sp, #20
 80043a2:	9a04      	ldr	r2, [sp, #16]
 80043a4:	68a1      	ldr	r1, [r4, #8]
 80043a6:	9301      	str	r3, [sp, #4]
 80043a8:	4620      	mov	r0, r4
 80043aa:	f000 fa61 	bl	8004870 <_vfiprintf_r>
 80043ae:	b002      	add	sp, #8
 80043b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043b4:	b004      	add	sp, #16
 80043b6:	4770      	bx	lr
 80043b8:	20000018 	.word	0x20000018

080043bc <_puts_r>:
 80043bc:	b570      	push	{r4, r5, r6, lr}
 80043be:	460e      	mov	r6, r1
 80043c0:	4605      	mov	r5, r0
 80043c2:	b118      	cbz	r0, 80043cc <_puts_r+0x10>
 80043c4:	6983      	ldr	r3, [r0, #24]
 80043c6:	b90b      	cbnz	r3, 80043cc <_puts_r+0x10>
 80043c8:	f7ff fe32 	bl	8004030 <__sinit>
 80043cc:	69ab      	ldr	r3, [r5, #24]
 80043ce:	68ac      	ldr	r4, [r5, #8]
 80043d0:	b913      	cbnz	r3, 80043d8 <_puts_r+0x1c>
 80043d2:	4628      	mov	r0, r5
 80043d4:	f7ff fe2c 	bl	8004030 <__sinit>
 80043d8:	4b2c      	ldr	r3, [pc, #176]	; (800448c <_puts_r+0xd0>)
 80043da:	429c      	cmp	r4, r3
 80043dc:	d120      	bne.n	8004420 <_puts_r+0x64>
 80043de:	686c      	ldr	r4, [r5, #4]
 80043e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043e2:	07db      	lsls	r3, r3, #31
 80043e4:	d405      	bmi.n	80043f2 <_puts_r+0x36>
 80043e6:	89a3      	ldrh	r3, [r4, #12]
 80043e8:	0598      	lsls	r0, r3, #22
 80043ea:	d402      	bmi.n	80043f2 <_puts_r+0x36>
 80043ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043ee:	f7ff fee2 	bl	80041b6 <__retarget_lock_acquire_recursive>
 80043f2:	89a3      	ldrh	r3, [r4, #12]
 80043f4:	0719      	lsls	r1, r3, #28
 80043f6:	d51d      	bpl.n	8004434 <_puts_r+0x78>
 80043f8:	6923      	ldr	r3, [r4, #16]
 80043fa:	b1db      	cbz	r3, 8004434 <_puts_r+0x78>
 80043fc:	3e01      	subs	r6, #1
 80043fe:	68a3      	ldr	r3, [r4, #8]
 8004400:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004404:	3b01      	subs	r3, #1
 8004406:	60a3      	str	r3, [r4, #8]
 8004408:	bb39      	cbnz	r1, 800445a <_puts_r+0x9e>
 800440a:	2b00      	cmp	r3, #0
 800440c:	da38      	bge.n	8004480 <_puts_r+0xc4>
 800440e:	4622      	mov	r2, r4
 8004410:	210a      	movs	r1, #10
 8004412:	4628      	mov	r0, r5
 8004414:	f000 f89c 	bl	8004550 <__swbuf_r>
 8004418:	3001      	adds	r0, #1
 800441a:	d011      	beq.n	8004440 <_puts_r+0x84>
 800441c:	250a      	movs	r5, #10
 800441e:	e011      	b.n	8004444 <_puts_r+0x88>
 8004420:	4b1b      	ldr	r3, [pc, #108]	; (8004490 <_puts_r+0xd4>)
 8004422:	429c      	cmp	r4, r3
 8004424:	d101      	bne.n	800442a <_puts_r+0x6e>
 8004426:	68ac      	ldr	r4, [r5, #8]
 8004428:	e7da      	b.n	80043e0 <_puts_r+0x24>
 800442a:	4b1a      	ldr	r3, [pc, #104]	; (8004494 <_puts_r+0xd8>)
 800442c:	429c      	cmp	r4, r3
 800442e:	bf08      	it	eq
 8004430:	68ec      	ldreq	r4, [r5, #12]
 8004432:	e7d5      	b.n	80043e0 <_puts_r+0x24>
 8004434:	4621      	mov	r1, r4
 8004436:	4628      	mov	r0, r5
 8004438:	f000 f8ee 	bl	8004618 <__swsetup_r>
 800443c:	2800      	cmp	r0, #0
 800443e:	d0dd      	beq.n	80043fc <_puts_r+0x40>
 8004440:	f04f 35ff 	mov.w	r5, #4294967295
 8004444:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004446:	07da      	lsls	r2, r3, #31
 8004448:	d405      	bmi.n	8004456 <_puts_r+0x9a>
 800444a:	89a3      	ldrh	r3, [r4, #12]
 800444c:	059b      	lsls	r3, r3, #22
 800444e:	d402      	bmi.n	8004456 <_puts_r+0x9a>
 8004450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004452:	f7ff feb1 	bl	80041b8 <__retarget_lock_release_recursive>
 8004456:	4628      	mov	r0, r5
 8004458:	bd70      	pop	{r4, r5, r6, pc}
 800445a:	2b00      	cmp	r3, #0
 800445c:	da04      	bge.n	8004468 <_puts_r+0xac>
 800445e:	69a2      	ldr	r2, [r4, #24]
 8004460:	429a      	cmp	r2, r3
 8004462:	dc06      	bgt.n	8004472 <_puts_r+0xb6>
 8004464:	290a      	cmp	r1, #10
 8004466:	d004      	beq.n	8004472 <_puts_r+0xb6>
 8004468:	6823      	ldr	r3, [r4, #0]
 800446a:	1c5a      	adds	r2, r3, #1
 800446c:	6022      	str	r2, [r4, #0]
 800446e:	7019      	strb	r1, [r3, #0]
 8004470:	e7c5      	b.n	80043fe <_puts_r+0x42>
 8004472:	4622      	mov	r2, r4
 8004474:	4628      	mov	r0, r5
 8004476:	f000 f86b 	bl	8004550 <__swbuf_r>
 800447a:	3001      	adds	r0, #1
 800447c:	d1bf      	bne.n	80043fe <_puts_r+0x42>
 800447e:	e7df      	b.n	8004440 <_puts_r+0x84>
 8004480:	6823      	ldr	r3, [r4, #0]
 8004482:	250a      	movs	r5, #10
 8004484:	1c5a      	adds	r2, r3, #1
 8004486:	6022      	str	r2, [r4, #0]
 8004488:	701d      	strb	r5, [r3, #0]
 800448a:	e7db      	b.n	8004444 <_puts_r+0x88>
 800448c:	08005034 	.word	0x08005034
 8004490:	08005054 	.word	0x08005054
 8004494:	08005014 	.word	0x08005014

08004498 <puts>:
 8004498:	4b02      	ldr	r3, [pc, #8]	; (80044a4 <puts+0xc>)
 800449a:	4601      	mov	r1, r0
 800449c:	6818      	ldr	r0, [r3, #0]
 800449e:	f7ff bf8d 	b.w	80043bc <_puts_r>
 80044a2:	bf00      	nop
 80044a4:	20000018 	.word	0x20000018

080044a8 <_sbrk_r>:
 80044a8:	b538      	push	{r3, r4, r5, lr}
 80044aa:	4d06      	ldr	r5, [pc, #24]	; (80044c4 <_sbrk_r+0x1c>)
 80044ac:	2300      	movs	r3, #0
 80044ae:	4604      	mov	r4, r0
 80044b0:	4608      	mov	r0, r1
 80044b2:	602b      	str	r3, [r5, #0]
 80044b4:	f7fc fdac 	bl	8001010 <_sbrk>
 80044b8:	1c43      	adds	r3, r0, #1
 80044ba:	d102      	bne.n	80044c2 <_sbrk_r+0x1a>
 80044bc:	682b      	ldr	r3, [r5, #0]
 80044be:	b103      	cbz	r3, 80044c2 <_sbrk_r+0x1a>
 80044c0:	6023      	str	r3, [r4, #0]
 80044c2:	bd38      	pop	{r3, r4, r5, pc}
 80044c4:	20000190 	.word	0x20000190

080044c8 <__sread>:
 80044c8:	b510      	push	{r4, lr}
 80044ca:	460c      	mov	r4, r1
 80044cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044d0:	f000 fc92 	bl	8004df8 <_read_r>
 80044d4:	2800      	cmp	r0, #0
 80044d6:	bfab      	itete	ge
 80044d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80044da:	89a3      	ldrhlt	r3, [r4, #12]
 80044dc:	181b      	addge	r3, r3, r0
 80044de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80044e2:	bfac      	ite	ge
 80044e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80044e6:	81a3      	strhlt	r3, [r4, #12]
 80044e8:	bd10      	pop	{r4, pc}

080044ea <__swrite>:
 80044ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044ee:	461f      	mov	r7, r3
 80044f0:	898b      	ldrh	r3, [r1, #12]
 80044f2:	05db      	lsls	r3, r3, #23
 80044f4:	4605      	mov	r5, r0
 80044f6:	460c      	mov	r4, r1
 80044f8:	4616      	mov	r6, r2
 80044fa:	d505      	bpl.n	8004508 <__swrite+0x1e>
 80044fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004500:	2302      	movs	r3, #2
 8004502:	2200      	movs	r2, #0
 8004504:	f000 f906 	bl	8004714 <_lseek_r>
 8004508:	89a3      	ldrh	r3, [r4, #12]
 800450a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800450e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004512:	81a3      	strh	r3, [r4, #12]
 8004514:	4632      	mov	r2, r6
 8004516:	463b      	mov	r3, r7
 8004518:	4628      	mov	r0, r5
 800451a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800451e:	f000 b869 	b.w	80045f4 <_write_r>

08004522 <__sseek>:
 8004522:	b510      	push	{r4, lr}
 8004524:	460c      	mov	r4, r1
 8004526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800452a:	f000 f8f3 	bl	8004714 <_lseek_r>
 800452e:	1c43      	adds	r3, r0, #1
 8004530:	89a3      	ldrh	r3, [r4, #12]
 8004532:	bf15      	itete	ne
 8004534:	6560      	strne	r0, [r4, #84]	; 0x54
 8004536:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800453a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800453e:	81a3      	strheq	r3, [r4, #12]
 8004540:	bf18      	it	ne
 8004542:	81a3      	strhne	r3, [r4, #12]
 8004544:	bd10      	pop	{r4, pc}

08004546 <__sclose>:
 8004546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800454a:	f000 b8d3 	b.w	80046f4 <_close_r>
	...

08004550 <__swbuf_r>:
 8004550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004552:	460e      	mov	r6, r1
 8004554:	4614      	mov	r4, r2
 8004556:	4605      	mov	r5, r0
 8004558:	b118      	cbz	r0, 8004562 <__swbuf_r+0x12>
 800455a:	6983      	ldr	r3, [r0, #24]
 800455c:	b90b      	cbnz	r3, 8004562 <__swbuf_r+0x12>
 800455e:	f7ff fd67 	bl	8004030 <__sinit>
 8004562:	4b21      	ldr	r3, [pc, #132]	; (80045e8 <__swbuf_r+0x98>)
 8004564:	429c      	cmp	r4, r3
 8004566:	d12b      	bne.n	80045c0 <__swbuf_r+0x70>
 8004568:	686c      	ldr	r4, [r5, #4]
 800456a:	69a3      	ldr	r3, [r4, #24]
 800456c:	60a3      	str	r3, [r4, #8]
 800456e:	89a3      	ldrh	r3, [r4, #12]
 8004570:	071a      	lsls	r2, r3, #28
 8004572:	d52f      	bpl.n	80045d4 <__swbuf_r+0x84>
 8004574:	6923      	ldr	r3, [r4, #16]
 8004576:	b36b      	cbz	r3, 80045d4 <__swbuf_r+0x84>
 8004578:	6923      	ldr	r3, [r4, #16]
 800457a:	6820      	ldr	r0, [r4, #0]
 800457c:	1ac0      	subs	r0, r0, r3
 800457e:	6963      	ldr	r3, [r4, #20]
 8004580:	b2f6      	uxtb	r6, r6
 8004582:	4283      	cmp	r3, r0
 8004584:	4637      	mov	r7, r6
 8004586:	dc04      	bgt.n	8004592 <__swbuf_r+0x42>
 8004588:	4621      	mov	r1, r4
 800458a:	4628      	mov	r0, r5
 800458c:	f7ff fcaa 	bl	8003ee4 <_fflush_r>
 8004590:	bb30      	cbnz	r0, 80045e0 <__swbuf_r+0x90>
 8004592:	68a3      	ldr	r3, [r4, #8]
 8004594:	3b01      	subs	r3, #1
 8004596:	60a3      	str	r3, [r4, #8]
 8004598:	6823      	ldr	r3, [r4, #0]
 800459a:	1c5a      	adds	r2, r3, #1
 800459c:	6022      	str	r2, [r4, #0]
 800459e:	701e      	strb	r6, [r3, #0]
 80045a0:	6963      	ldr	r3, [r4, #20]
 80045a2:	3001      	adds	r0, #1
 80045a4:	4283      	cmp	r3, r0
 80045a6:	d004      	beq.n	80045b2 <__swbuf_r+0x62>
 80045a8:	89a3      	ldrh	r3, [r4, #12]
 80045aa:	07db      	lsls	r3, r3, #31
 80045ac:	d506      	bpl.n	80045bc <__swbuf_r+0x6c>
 80045ae:	2e0a      	cmp	r6, #10
 80045b0:	d104      	bne.n	80045bc <__swbuf_r+0x6c>
 80045b2:	4621      	mov	r1, r4
 80045b4:	4628      	mov	r0, r5
 80045b6:	f7ff fc95 	bl	8003ee4 <_fflush_r>
 80045ba:	b988      	cbnz	r0, 80045e0 <__swbuf_r+0x90>
 80045bc:	4638      	mov	r0, r7
 80045be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045c0:	4b0a      	ldr	r3, [pc, #40]	; (80045ec <__swbuf_r+0x9c>)
 80045c2:	429c      	cmp	r4, r3
 80045c4:	d101      	bne.n	80045ca <__swbuf_r+0x7a>
 80045c6:	68ac      	ldr	r4, [r5, #8]
 80045c8:	e7cf      	b.n	800456a <__swbuf_r+0x1a>
 80045ca:	4b09      	ldr	r3, [pc, #36]	; (80045f0 <__swbuf_r+0xa0>)
 80045cc:	429c      	cmp	r4, r3
 80045ce:	bf08      	it	eq
 80045d0:	68ec      	ldreq	r4, [r5, #12]
 80045d2:	e7ca      	b.n	800456a <__swbuf_r+0x1a>
 80045d4:	4621      	mov	r1, r4
 80045d6:	4628      	mov	r0, r5
 80045d8:	f000 f81e 	bl	8004618 <__swsetup_r>
 80045dc:	2800      	cmp	r0, #0
 80045de:	d0cb      	beq.n	8004578 <__swbuf_r+0x28>
 80045e0:	f04f 37ff 	mov.w	r7, #4294967295
 80045e4:	e7ea      	b.n	80045bc <__swbuf_r+0x6c>
 80045e6:	bf00      	nop
 80045e8:	08005034 	.word	0x08005034
 80045ec:	08005054 	.word	0x08005054
 80045f0:	08005014 	.word	0x08005014

080045f4 <_write_r>:
 80045f4:	b538      	push	{r3, r4, r5, lr}
 80045f6:	4d07      	ldr	r5, [pc, #28]	; (8004614 <_write_r+0x20>)
 80045f8:	4604      	mov	r4, r0
 80045fa:	4608      	mov	r0, r1
 80045fc:	4611      	mov	r1, r2
 80045fe:	2200      	movs	r2, #0
 8004600:	602a      	str	r2, [r5, #0]
 8004602:	461a      	mov	r2, r3
 8004604:	f7fc fcb3 	bl	8000f6e <_write>
 8004608:	1c43      	adds	r3, r0, #1
 800460a:	d102      	bne.n	8004612 <_write_r+0x1e>
 800460c:	682b      	ldr	r3, [r5, #0]
 800460e:	b103      	cbz	r3, 8004612 <_write_r+0x1e>
 8004610:	6023      	str	r3, [r4, #0]
 8004612:	bd38      	pop	{r3, r4, r5, pc}
 8004614:	20000190 	.word	0x20000190

08004618 <__swsetup_r>:
 8004618:	4b32      	ldr	r3, [pc, #200]	; (80046e4 <__swsetup_r+0xcc>)
 800461a:	b570      	push	{r4, r5, r6, lr}
 800461c:	681d      	ldr	r5, [r3, #0]
 800461e:	4606      	mov	r6, r0
 8004620:	460c      	mov	r4, r1
 8004622:	b125      	cbz	r5, 800462e <__swsetup_r+0x16>
 8004624:	69ab      	ldr	r3, [r5, #24]
 8004626:	b913      	cbnz	r3, 800462e <__swsetup_r+0x16>
 8004628:	4628      	mov	r0, r5
 800462a:	f7ff fd01 	bl	8004030 <__sinit>
 800462e:	4b2e      	ldr	r3, [pc, #184]	; (80046e8 <__swsetup_r+0xd0>)
 8004630:	429c      	cmp	r4, r3
 8004632:	d10f      	bne.n	8004654 <__swsetup_r+0x3c>
 8004634:	686c      	ldr	r4, [r5, #4]
 8004636:	89a3      	ldrh	r3, [r4, #12]
 8004638:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800463c:	0719      	lsls	r1, r3, #28
 800463e:	d42c      	bmi.n	800469a <__swsetup_r+0x82>
 8004640:	06dd      	lsls	r5, r3, #27
 8004642:	d411      	bmi.n	8004668 <__swsetup_r+0x50>
 8004644:	2309      	movs	r3, #9
 8004646:	6033      	str	r3, [r6, #0]
 8004648:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800464c:	81a3      	strh	r3, [r4, #12]
 800464e:	f04f 30ff 	mov.w	r0, #4294967295
 8004652:	e03e      	b.n	80046d2 <__swsetup_r+0xba>
 8004654:	4b25      	ldr	r3, [pc, #148]	; (80046ec <__swsetup_r+0xd4>)
 8004656:	429c      	cmp	r4, r3
 8004658:	d101      	bne.n	800465e <__swsetup_r+0x46>
 800465a:	68ac      	ldr	r4, [r5, #8]
 800465c:	e7eb      	b.n	8004636 <__swsetup_r+0x1e>
 800465e:	4b24      	ldr	r3, [pc, #144]	; (80046f0 <__swsetup_r+0xd8>)
 8004660:	429c      	cmp	r4, r3
 8004662:	bf08      	it	eq
 8004664:	68ec      	ldreq	r4, [r5, #12]
 8004666:	e7e6      	b.n	8004636 <__swsetup_r+0x1e>
 8004668:	0758      	lsls	r0, r3, #29
 800466a:	d512      	bpl.n	8004692 <__swsetup_r+0x7a>
 800466c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800466e:	b141      	cbz	r1, 8004682 <__swsetup_r+0x6a>
 8004670:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004674:	4299      	cmp	r1, r3
 8004676:	d002      	beq.n	800467e <__swsetup_r+0x66>
 8004678:	4630      	mov	r0, r6
 800467a:	f7ff fda7 	bl	80041cc <_free_r>
 800467e:	2300      	movs	r3, #0
 8004680:	6363      	str	r3, [r4, #52]	; 0x34
 8004682:	89a3      	ldrh	r3, [r4, #12]
 8004684:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004688:	81a3      	strh	r3, [r4, #12]
 800468a:	2300      	movs	r3, #0
 800468c:	6063      	str	r3, [r4, #4]
 800468e:	6923      	ldr	r3, [r4, #16]
 8004690:	6023      	str	r3, [r4, #0]
 8004692:	89a3      	ldrh	r3, [r4, #12]
 8004694:	f043 0308 	orr.w	r3, r3, #8
 8004698:	81a3      	strh	r3, [r4, #12]
 800469a:	6923      	ldr	r3, [r4, #16]
 800469c:	b94b      	cbnz	r3, 80046b2 <__swsetup_r+0x9a>
 800469e:	89a3      	ldrh	r3, [r4, #12]
 80046a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80046a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046a8:	d003      	beq.n	80046b2 <__swsetup_r+0x9a>
 80046aa:	4621      	mov	r1, r4
 80046ac:	4630      	mov	r0, r6
 80046ae:	f000 f869 	bl	8004784 <__smakebuf_r>
 80046b2:	89a0      	ldrh	r0, [r4, #12]
 80046b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80046b8:	f010 0301 	ands.w	r3, r0, #1
 80046bc:	d00a      	beq.n	80046d4 <__swsetup_r+0xbc>
 80046be:	2300      	movs	r3, #0
 80046c0:	60a3      	str	r3, [r4, #8]
 80046c2:	6963      	ldr	r3, [r4, #20]
 80046c4:	425b      	negs	r3, r3
 80046c6:	61a3      	str	r3, [r4, #24]
 80046c8:	6923      	ldr	r3, [r4, #16]
 80046ca:	b943      	cbnz	r3, 80046de <__swsetup_r+0xc6>
 80046cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80046d0:	d1ba      	bne.n	8004648 <__swsetup_r+0x30>
 80046d2:	bd70      	pop	{r4, r5, r6, pc}
 80046d4:	0781      	lsls	r1, r0, #30
 80046d6:	bf58      	it	pl
 80046d8:	6963      	ldrpl	r3, [r4, #20]
 80046da:	60a3      	str	r3, [r4, #8]
 80046dc:	e7f4      	b.n	80046c8 <__swsetup_r+0xb0>
 80046de:	2000      	movs	r0, #0
 80046e0:	e7f7      	b.n	80046d2 <__swsetup_r+0xba>
 80046e2:	bf00      	nop
 80046e4:	20000018 	.word	0x20000018
 80046e8:	08005034 	.word	0x08005034
 80046ec:	08005054 	.word	0x08005054
 80046f0:	08005014 	.word	0x08005014

080046f4 <_close_r>:
 80046f4:	b538      	push	{r3, r4, r5, lr}
 80046f6:	4d06      	ldr	r5, [pc, #24]	; (8004710 <_close_r+0x1c>)
 80046f8:	2300      	movs	r3, #0
 80046fa:	4604      	mov	r4, r0
 80046fc:	4608      	mov	r0, r1
 80046fe:	602b      	str	r3, [r5, #0]
 8004700:	f7fc fc51 	bl	8000fa6 <_close>
 8004704:	1c43      	adds	r3, r0, #1
 8004706:	d102      	bne.n	800470e <_close_r+0x1a>
 8004708:	682b      	ldr	r3, [r5, #0]
 800470a:	b103      	cbz	r3, 800470e <_close_r+0x1a>
 800470c:	6023      	str	r3, [r4, #0]
 800470e:	bd38      	pop	{r3, r4, r5, pc}
 8004710:	20000190 	.word	0x20000190

08004714 <_lseek_r>:
 8004714:	b538      	push	{r3, r4, r5, lr}
 8004716:	4d07      	ldr	r5, [pc, #28]	; (8004734 <_lseek_r+0x20>)
 8004718:	4604      	mov	r4, r0
 800471a:	4608      	mov	r0, r1
 800471c:	4611      	mov	r1, r2
 800471e:	2200      	movs	r2, #0
 8004720:	602a      	str	r2, [r5, #0]
 8004722:	461a      	mov	r2, r3
 8004724:	f7fc fc66 	bl	8000ff4 <_lseek>
 8004728:	1c43      	adds	r3, r0, #1
 800472a:	d102      	bne.n	8004732 <_lseek_r+0x1e>
 800472c:	682b      	ldr	r3, [r5, #0]
 800472e:	b103      	cbz	r3, 8004732 <_lseek_r+0x1e>
 8004730:	6023      	str	r3, [r4, #0]
 8004732:	bd38      	pop	{r3, r4, r5, pc}
 8004734:	20000190 	.word	0x20000190

08004738 <__swhatbuf_r>:
 8004738:	b570      	push	{r4, r5, r6, lr}
 800473a:	460e      	mov	r6, r1
 800473c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004740:	2900      	cmp	r1, #0
 8004742:	b096      	sub	sp, #88	; 0x58
 8004744:	4614      	mov	r4, r2
 8004746:	461d      	mov	r5, r3
 8004748:	da08      	bge.n	800475c <__swhatbuf_r+0x24>
 800474a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	602a      	str	r2, [r5, #0]
 8004752:	061a      	lsls	r2, r3, #24
 8004754:	d410      	bmi.n	8004778 <__swhatbuf_r+0x40>
 8004756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800475a:	e00e      	b.n	800477a <__swhatbuf_r+0x42>
 800475c:	466a      	mov	r2, sp
 800475e:	f000 fb5d 	bl	8004e1c <_fstat_r>
 8004762:	2800      	cmp	r0, #0
 8004764:	dbf1      	blt.n	800474a <__swhatbuf_r+0x12>
 8004766:	9a01      	ldr	r2, [sp, #4]
 8004768:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800476c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004770:	425a      	negs	r2, r3
 8004772:	415a      	adcs	r2, r3
 8004774:	602a      	str	r2, [r5, #0]
 8004776:	e7ee      	b.n	8004756 <__swhatbuf_r+0x1e>
 8004778:	2340      	movs	r3, #64	; 0x40
 800477a:	2000      	movs	r0, #0
 800477c:	6023      	str	r3, [r4, #0]
 800477e:	b016      	add	sp, #88	; 0x58
 8004780:	bd70      	pop	{r4, r5, r6, pc}
	...

08004784 <__smakebuf_r>:
 8004784:	898b      	ldrh	r3, [r1, #12]
 8004786:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004788:	079d      	lsls	r5, r3, #30
 800478a:	4606      	mov	r6, r0
 800478c:	460c      	mov	r4, r1
 800478e:	d507      	bpl.n	80047a0 <__smakebuf_r+0x1c>
 8004790:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004794:	6023      	str	r3, [r4, #0]
 8004796:	6123      	str	r3, [r4, #16]
 8004798:	2301      	movs	r3, #1
 800479a:	6163      	str	r3, [r4, #20]
 800479c:	b002      	add	sp, #8
 800479e:	bd70      	pop	{r4, r5, r6, pc}
 80047a0:	ab01      	add	r3, sp, #4
 80047a2:	466a      	mov	r2, sp
 80047a4:	f7ff ffc8 	bl	8004738 <__swhatbuf_r>
 80047a8:	9900      	ldr	r1, [sp, #0]
 80047aa:	4605      	mov	r5, r0
 80047ac:	4630      	mov	r0, r6
 80047ae:	f7ff fd79 	bl	80042a4 <_malloc_r>
 80047b2:	b948      	cbnz	r0, 80047c8 <__smakebuf_r+0x44>
 80047b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047b8:	059a      	lsls	r2, r3, #22
 80047ba:	d4ef      	bmi.n	800479c <__smakebuf_r+0x18>
 80047bc:	f023 0303 	bic.w	r3, r3, #3
 80047c0:	f043 0302 	orr.w	r3, r3, #2
 80047c4:	81a3      	strh	r3, [r4, #12]
 80047c6:	e7e3      	b.n	8004790 <__smakebuf_r+0xc>
 80047c8:	4b0d      	ldr	r3, [pc, #52]	; (8004800 <__smakebuf_r+0x7c>)
 80047ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80047cc:	89a3      	ldrh	r3, [r4, #12]
 80047ce:	6020      	str	r0, [r4, #0]
 80047d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047d4:	81a3      	strh	r3, [r4, #12]
 80047d6:	9b00      	ldr	r3, [sp, #0]
 80047d8:	6163      	str	r3, [r4, #20]
 80047da:	9b01      	ldr	r3, [sp, #4]
 80047dc:	6120      	str	r0, [r4, #16]
 80047de:	b15b      	cbz	r3, 80047f8 <__smakebuf_r+0x74>
 80047e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047e4:	4630      	mov	r0, r6
 80047e6:	f000 fb2b 	bl	8004e40 <_isatty_r>
 80047ea:	b128      	cbz	r0, 80047f8 <__smakebuf_r+0x74>
 80047ec:	89a3      	ldrh	r3, [r4, #12]
 80047ee:	f023 0303 	bic.w	r3, r3, #3
 80047f2:	f043 0301 	orr.w	r3, r3, #1
 80047f6:	81a3      	strh	r3, [r4, #12]
 80047f8:	89a0      	ldrh	r0, [r4, #12]
 80047fa:	4305      	orrs	r5, r0
 80047fc:	81a5      	strh	r5, [r4, #12]
 80047fe:	e7cd      	b.n	800479c <__smakebuf_r+0x18>
 8004800:	08003fc9 	.word	0x08003fc9

08004804 <__malloc_lock>:
 8004804:	4801      	ldr	r0, [pc, #4]	; (800480c <__malloc_lock+0x8>)
 8004806:	f7ff bcd6 	b.w	80041b6 <__retarget_lock_acquire_recursive>
 800480a:	bf00      	nop
 800480c:	20000184 	.word	0x20000184

08004810 <__malloc_unlock>:
 8004810:	4801      	ldr	r0, [pc, #4]	; (8004818 <__malloc_unlock+0x8>)
 8004812:	f7ff bcd1 	b.w	80041b8 <__retarget_lock_release_recursive>
 8004816:	bf00      	nop
 8004818:	20000184 	.word	0x20000184

0800481c <__sfputc_r>:
 800481c:	6893      	ldr	r3, [r2, #8]
 800481e:	3b01      	subs	r3, #1
 8004820:	2b00      	cmp	r3, #0
 8004822:	b410      	push	{r4}
 8004824:	6093      	str	r3, [r2, #8]
 8004826:	da08      	bge.n	800483a <__sfputc_r+0x1e>
 8004828:	6994      	ldr	r4, [r2, #24]
 800482a:	42a3      	cmp	r3, r4
 800482c:	db01      	blt.n	8004832 <__sfputc_r+0x16>
 800482e:	290a      	cmp	r1, #10
 8004830:	d103      	bne.n	800483a <__sfputc_r+0x1e>
 8004832:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004836:	f7ff be8b 	b.w	8004550 <__swbuf_r>
 800483a:	6813      	ldr	r3, [r2, #0]
 800483c:	1c58      	adds	r0, r3, #1
 800483e:	6010      	str	r0, [r2, #0]
 8004840:	7019      	strb	r1, [r3, #0]
 8004842:	4608      	mov	r0, r1
 8004844:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004848:	4770      	bx	lr

0800484a <__sfputs_r>:
 800484a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800484c:	4606      	mov	r6, r0
 800484e:	460f      	mov	r7, r1
 8004850:	4614      	mov	r4, r2
 8004852:	18d5      	adds	r5, r2, r3
 8004854:	42ac      	cmp	r4, r5
 8004856:	d101      	bne.n	800485c <__sfputs_r+0x12>
 8004858:	2000      	movs	r0, #0
 800485a:	e007      	b.n	800486c <__sfputs_r+0x22>
 800485c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004860:	463a      	mov	r2, r7
 8004862:	4630      	mov	r0, r6
 8004864:	f7ff ffda 	bl	800481c <__sfputc_r>
 8004868:	1c43      	adds	r3, r0, #1
 800486a:	d1f3      	bne.n	8004854 <__sfputs_r+0xa>
 800486c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004870 <_vfiprintf_r>:
 8004870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004874:	460d      	mov	r5, r1
 8004876:	b09d      	sub	sp, #116	; 0x74
 8004878:	4614      	mov	r4, r2
 800487a:	4698      	mov	r8, r3
 800487c:	4606      	mov	r6, r0
 800487e:	b118      	cbz	r0, 8004888 <_vfiprintf_r+0x18>
 8004880:	6983      	ldr	r3, [r0, #24]
 8004882:	b90b      	cbnz	r3, 8004888 <_vfiprintf_r+0x18>
 8004884:	f7ff fbd4 	bl	8004030 <__sinit>
 8004888:	4b89      	ldr	r3, [pc, #548]	; (8004ab0 <_vfiprintf_r+0x240>)
 800488a:	429d      	cmp	r5, r3
 800488c:	d11b      	bne.n	80048c6 <_vfiprintf_r+0x56>
 800488e:	6875      	ldr	r5, [r6, #4]
 8004890:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004892:	07d9      	lsls	r1, r3, #31
 8004894:	d405      	bmi.n	80048a2 <_vfiprintf_r+0x32>
 8004896:	89ab      	ldrh	r3, [r5, #12]
 8004898:	059a      	lsls	r2, r3, #22
 800489a:	d402      	bmi.n	80048a2 <_vfiprintf_r+0x32>
 800489c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800489e:	f7ff fc8a 	bl	80041b6 <__retarget_lock_acquire_recursive>
 80048a2:	89ab      	ldrh	r3, [r5, #12]
 80048a4:	071b      	lsls	r3, r3, #28
 80048a6:	d501      	bpl.n	80048ac <_vfiprintf_r+0x3c>
 80048a8:	692b      	ldr	r3, [r5, #16]
 80048aa:	b9eb      	cbnz	r3, 80048e8 <_vfiprintf_r+0x78>
 80048ac:	4629      	mov	r1, r5
 80048ae:	4630      	mov	r0, r6
 80048b0:	f7ff feb2 	bl	8004618 <__swsetup_r>
 80048b4:	b1c0      	cbz	r0, 80048e8 <_vfiprintf_r+0x78>
 80048b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048b8:	07dc      	lsls	r4, r3, #31
 80048ba:	d50e      	bpl.n	80048da <_vfiprintf_r+0x6a>
 80048bc:	f04f 30ff 	mov.w	r0, #4294967295
 80048c0:	b01d      	add	sp, #116	; 0x74
 80048c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048c6:	4b7b      	ldr	r3, [pc, #492]	; (8004ab4 <_vfiprintf_r+0x244>)
 80048c8:	429d      	cmp	r5, r3
 80048ca:	d101      	bne.n	80048d0 <_vfiprintf_r+0x60>
 80048cc:	68b5      	ldr	r5, [r6, #8]
 80048ce:	e7df      	b.n	8004890 <_vfiprintf_r+0x20>
 80048d0:	4b79      	ldr	r3, [pc, #484]	; (8004ab8 <_vfiprintf_r+0x248>)
 80048d2:	429d      	cmp	r5, r3
 80048d4:	bf08      	it	eq
 80048d6:	68f5      	ldreq	r5, [r6, #12]
 80048d8:	e7da      	b.n	8004890 <_vfiprintf_r+0x20>
 80048da:	89ab      	ldrh	r3, [r5, #12]
 80048dc:	0598      	lsls	r0, r3, #22
 80048de:	d4ed      	bmi.n	80048bc <_vfiprintf_r+0x4c>
 80048e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048e2:	f7ff fc69 	bl	80041b8 <__retarget_lock_release_recursive>
 80048e6:	e7e9      	b.n	80048bc <_vfiprintf_r+0x4c>
 80048e8:	2300      	movs	r3, #0
 80048ea:	9309      	str	r3, [sp, #36]	; 0x24
 80048ec:	2320      	movs	r3, #32
 80048ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80048f6:	2330      	movs	r3, #48	; 0x30
 80048f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004abc <_vfiprintf_r+0x24c>
 80048fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004900:	f04f 0901 	mov.w	r9, #1
 8004904:	4623      	mov	r3, r4
 8004906:	469a      	mov	sl, r3
 8004908:	f813 2b01 	ldrb.w	r2, [r3], #1
 800490c:	b10a      	cbz	r2, 8004912 <_vfiprintf_r+0xa2>
 800490e:	2a25      	cmp	r2, #37	; 0x25
 8004910:	d1f9      	bne.n	8004906 <_vfiprintf_r+0x96>
 8004912:	ebba 0b04 	subs.w	fp, sl, r4
 8004916:	d00b      	beq.n	8004930 <_vfiprintf_r+0xc0>
 8004918:	465b      	mov	r3, fp
 800491a:	4622      	mov	r2, r4
 800491c:	4629      	mov	r1, r5
 800491e:	4630      	mov	r0, r6
 8004920:	f7ff ff93 	bl	800484a <__sfputs_r>
 8004924:	3001      	adds	r0, #1
 8004926:	f000 80aa 	beq.w	8004a7e <_vfiprintf_r+0x20e>
 800492a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800492c:	445a      	add	r2, fp
 800492e:	9209      	str	r2, [sp, #36]	; 0x24
 8004930:	f89a 3000 	ldrb.w	r3, [sl]
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 80a2 	beq.w	8004a7e <_vfiprintf_r+0x20e>
 800493a:	2300      	movs	r3, #0
 800493c:	f04f 32ff 	mov.w	r2, #4294967295
 8004940:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004944:	f10a 0a01 	add.w	sl, sl, #1
 8004948:	9304      	str	r3, [sp, #16]
 800494a:	9307      	str	r3, [sp, #28]
 800494c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004950:	931a      	str	r3, [sp, #104]	; 0x68
 8004952:	4654      	mov	r4, sl
 8004954:	2205      	movs	r2, #5
 8004956:	f814 1b01 	ldrb.w	r1, [r4], #1
 800495a:	4858      	ldr	r0, [pc, #352]	; (8004abc <_vfiprintf_r+0x24c>)
 800495c:	f7fb fc40 	bl	80001e0 <memchr>
 8004960:	9a04      	ldr	r2, [sp, #16]
 8004962:	b9d8      	cbnz	r0, 800499c <_vfiprintf_r+0x12c>
 8004964:	06d1      	lsls	r1, r2, #27
 8004966:	bf44      	itt	mi
 8004968:	2320      	movmi	r3, #32
 800496a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800496e:	0713      	lsls	r3, r2, #28
 8004970:	bf44      	itt	mi
 8004972:	232b      	movmi	r3, #43	; 0x2b
 8004974:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004978:	f89a 3000 	ldrb.w	r3, [sl]
 800497c:	2b2a      	cmp	r3, #42	; 0x2a
 800497e:	d015      	beq.n	80049ac <_vfiprintf_r+0x13c>
 8004980:	9a07      	ldr	r2, [sp, #28]
 8004982:	4654      	mov	r4, sl
 8004984:	2000      	movs	r0, #0
 8004986:	f04f 0c0a 	mov.w	ip, #10
 800498a:	4621      	mov	r1, r4
 800498c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004990:	3b30      	subs	r3, #48	; 0x30
 8004992:	2b09      	cmp	r3, #9
 8004994:	d94e      	bls.n	8004a34 <_vfiprintf_r+0x1c4>
 8004996:	b1b0      	cbz	r0, 80049c6 <_vfiprintf_r+0x156>
 8004998:	9207      	str	r2, [sp, #28]
 800499a:	e014      	b.n	80049c6 <_vfiprintf_r+0x156>
 800499c:	eba0 0308 	sub.w	r3, r0, r8
 80049a0:	fa09 f303 	lsl.w	r3, r9, r3
 80049a4:	4313      	orrs	r3, r2
 80049a6:	9304      	str	r3, [sp, #16]
 80049a8:	46a2      	mov	sl, r4
 80049aa:	e7d2      	b.n	8004952 <_vfiprintf_r+0xe2>
 80049ac:	9b03      	ldr	r3, [sp, #12]
 80049ae:	1d19      	adds	r1, r3, #4
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	9103      	str	r1, [sp, #12]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	bfbb      	ittet	lt
 80049b8:	425b      	neglt	r3, r3
 80049ba:	f042 0202 	orrlt.w	r2, r2, #2
 80049be:	9307      	strge	r3, [sp, #28]
 80049c0:	9307      	strlt	r3, [sp, #28]
 80049c2:	bfb8      	it	lt
 80049c4:	9204      	strlt	r2, [sp, #16]
 80049c6:	7823      	ldrb	r3, [r4, #0]
 80049c8:	2b2e      	cmp	r3, #46	; 0x2e
 80049ca:	d10c      	bne.n	80049e6 <_vfiprintf_r+0x176>
 80049cc:	7863      	ldrb	r3, [r4, #1]
 80049ce:	2b2a      	cmp	r3, #42	; 0x2a
 80049d0:	d135      	bne.n	8004a3e <_vfiprintf_r+0x1ce>
 80049d2:	9b03      	ldr	r3, [sp, #12]
 80049d4:	1d1a      	adds	r2, r3, #4
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	9203      	str	r2, [sp, #12]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	bfb8      	it	lt
 80049de:	f04f 33ff 	movlt.w	r3, #4294967295
 80049e2:	3402      	adds	r4, #2
 80049e4:	9305      	str	r3, [sp, #20]
 80049e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004acc <_vfiprintf_r+0x25c>
 80049ea:	7821      	ldrb	r1, [r4, #0]
 80049ec:	2203      	movs	r2, #3
 80049ee:	4650      	mov	r0, sl
 80049f0:	f7fb fbf6 	bl	80001e0 <memchr>
 80049f4:	b140      	cbz	r0, 8004a08 <_vfiprintf_r+0x198>
 80049f6:	2340      	movs	r3, #64	; 0x40
 80049f8:	eba0 000a 	sub.w	r0, r0, sl
 80049fc:	fa03 f000 	lsl.w	r0, r3, r0
 8004a00:	9b04      	ldr	r3, [sp, #16]
 8004a02:	4303      	orrs	r3, r0
 8004a04:	3401      	adds	r4, #1
 8004a06:	9304      	str	r3, [sp, #16]
 8004a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a0c:	482c      	ldr	r0, [pc, #176]	; (8004ac0 <_vfiprintf_r+0x250>)
 8004a0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a12:	2206      	movs	r2, #6
 8004a14:	f7fb fbe4 	bl	80001e0 <memchr>
 8004a18:	2800      	cmp	r0, #0
 8004a1a:	d03f      	beq.n	8004a9c <_vfiprintf_r+0x22c>
 8004a1c:	4b29      	ldr	r3, [pc, #164]	; (8004ac4 <_vfiprintf_r+0x254>)
 8004a1e:	bb1b      	cbnz	r3, 8004a68 <_vfiprintf_r+0x1f8>
 8004a20:	9b03      	ldr	r3, [sp, #12]
 8004a22:	3307      	adds	r3, #7
 8004a24:	f023 0307 	bic.w	r3, r3, #7
 8004a28:	3308      	adds	r3, #8
 8004a2a:	9303      	str	r3, [sp, #12]
 8004a2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a2e:	443b      	add	r3, r7
 8004a30:	9309      	str	r3, [sp, #36]	; 0x24
 8004a32:	e767      	b.n	8004904 <_vfiprintf_r+0x94>
 8004a34:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a38:	460c      	mov	r4, r1
 8004a3a:	2001      	movs	r0, #1
 8004a3c:	e7a5      	b.n	800498a <_vfiprintf_r+0x11a>
 8004a3e:	2300      	movs	r3, #0
 8004a40:	3401      	adds	r4, #1
 8004a42:	9305      	str	r3, [sp, #20]
 8004a44:	4619      	mov	r1, r3
 8004a46:	f04f 0c0a 	mov.w	ip, #10
 8004a4a:	4620      	mov	r0, r4
 8004a4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a50:	3a30      	subs	r2, #48	; 0x30
 8004a52:	2a09      	cmp	r2, #9
 8004a54:	d903      	bls.n	8004a5e <_vfiprintf_r+0x1ee>
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d0c5      	beq.n	80049e6 <_vfiprintf_r+0x176>
 8004a5a:	9105      	str	r1, [sp, #20]
 8004a5c:	e7c3      	b.n	80049e6 <_vfiprintf_r+0x176>
 8004a5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a62:	4604      	mov	r4, r0
 8004a64:	2301      	movs	r3, #1
 8004a66:	e7f0      	b.n	8004a4a <_vfiprintf_r+0x1da>
 8004a68:	ab03      	add	r3, sp, #12
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	462a      	mov	r2, r5
 8004a6e:	4b16      	ldr	r3, [pc, #88]	; (8004ac8 <_vfiprintf_r+0x258>)
 8004a70:	a904      	add	r1, sp, #16
 8004a72:	4630      	mov	r0, r6
 8004a74:	f3af 8000 	nop.w
 8004a78:	4607      	mov	r7, r0
 8004a7a:	1c78      	adds	r0, r7, #1
 8004a7c:	d1d6      	bne.n	8004a2c <_vfiprintf_r+0x1bc>
 8004a7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a80:	07d9      	lsls	r1, r3, #31
 8004a82:	d405      	bmi.n	8004a90 <_vfiprintf_r+0x220>
 8004a84:	89ab      	ldrh	r3, [r5, #12]
 8004a86:	059a      	lsls	r2, r3, #22
 8004a88:	d402      	bmi.n	8004a90 <_vfiprintf_r+0x220>
 8004a8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a8c:	f7ff fb94 	bl	80041b8 <__retarget_lock_release_recursive>
 8004a90:	89ab      	ldrh	r3, [r5, #12]
 8004a92:	065b      	lsls	r3, r3, #25
 8004a94:	f53f af12 	bmi.w	80048bc <_vfiprintf_r+0x4c>
 8004a98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a9a:	e711      	b.n	80048c0 <_vfiprintf_r+0x50>
 8004a9c:	ab03      	add	r3, sp, #12
 8004a9e:	9300      	str	r3, [sp, #0]
 8004aa0:	462a      	mov	r2, r5
 8004aa2:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <_vfiprintf_r+0x258>)
 8004aa4:	a904      	add	r1, sp, #16
 8004aa6:	4630      	mov	r0, r6
 8004aa8:	f000 f880 	bl	8004bac <_printf_i>
 8004aac:	e7e4      	b.n	8004a78 <_vfiprintf_r+0x208>
 8004aae:	bf00      	nop
 8004ab0:	08005034 	.word	0x08005034
 8004ab4:	08005054 	.word	0x08005054
 8004ab8:	08005014 	.word	0x08005014
 8004abc:	08005078 	.word	0x08005078
 8004ac0:	08005082 	.word	0x08005082
 8004ac4:	00000000 	.word	0x00000000
 8004ac8:	0800484b 	.word	0x0800484b
 8004acc:	0800507e 	.word	0x0800507e

08004ad0 <_printf_common>:
 8004ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ad4:	4616      	mov	r6, r2
 8004ad6:	4699      	mov	r9, r3
 8004ad8:	688a      	ldr	r2, [r1, #8]
 8004ada:	690b      	ldr	r3, [r1, #16]
 8004adc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	bfb8      	it	lt
 8004ae4:	4613      	movlt	r3, r2
 8004ae6:	6033      	str	r3, [r6, #0]
 8004ae8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004aec:	4607      	mov	r7, r0
 8004aee:	460c      	mov	r4, r1
 8004af0:	b10a      	cbz	r2, 8004af6 <_printf_common+0x26>
 8004af2:	3301      	adds	r3, #1
 8004af4:	6033      	str	r3, [r6, #0]
 8004af6:	6823      	ldr	r3, [r4, #0]
 8004af8:	0699      	lsls	r1, r3, #26
 8004afa:	bf42      	ittt	mi
 8004afc:	6833      	ldrmi	r3, [r6, #0]
 8004afe:	3302      	addmi	r3, #2
 8004b00:	6033      	strmi	r3, [r6, #0]
 8004b02:	6825      	ldr	r5, [r4, #0]
 8004b04:	f015 0506 	ands.w	r5, r5, #6
 8004b08:	d106      	bne.n	8004b18 <_printf_common+0x48>
 8004b0a:	f104 0a19 	add.w	sl, r4, #25
 8004b0e:	68e3      	ldr	r3, [r4, #12]
 8004b10:	6832      	ldr	r2, [r6, #0]
 8004b12:	1a9b      	subs	r3, r3, r2
 8004b14:	42ab      	cmp	r3, r5
 8004b16:	dc26      	bgt.n	8004b66 <_printf_common+0x96>
 8004b18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b1c:	1e13      	subs	r3, r2, #0
 8004b1e:	6822      	ldr	r2, [r4, #0]
 8004b20:	bf18      	it	ne
 8004b22:	2301      	movne	r3, #1
 8004b24:	0692      	lsls	r2, r2, #26
 8004b26:	d42b      	bmi.n	8004b80 <_printf_common+0xb0>
 8004b28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b2c:	4649      	mov	r1, r9
 8004b2e:	4638      	mov	r0, r7
 8004b30:	47c0      	blx	r8
 8004b32:	3001      	adds	r0, #1
 8004b34:	d01e      	beq.n	8004b74 <_printf_common+0xa4>
 8004b36:	6823      	ldr	r3, [r4, #0]
 8004b38:	68e5      	ldr	r5, [r4, #12]
 8004b3a:	6832      	ldr	r2, [r6, #0]
 8004b3c:	f003 0306 	and.w	r3, r3, #6
 8004b40:	2b04      	cmp	r3, #4
 8004b42:	bf08      	it	eq
 8004b44:	1aad      	subeq	r5, r5, r2
 8004b46:	68a3      	ldr	r3, [r4, #8]
 8004b48:	6922      	ldr	r2, [r4, #16]
 8004b4a:	bf0c      	ite	eq
 8004b4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b50:	2500      	movne	r5, #0
 8004b52:	4293      	cmp	r3, r2
 8004b54:	bfc4      	itt	gt
 8004b56:	1a9b      	subgt	r3, r3, r2
 8004b58:	18ed      	addgt	r5, r5, r3
 8004b5a:	2600      	movs	r6, #0
 8004b5c:	341a      	adds	r4, #26
 8004b5e:	42b5      	cmp	r5, r6
 8004b60:	d11a      	bne.n	8004b98 <_printf_common+0xc8>
 8004b62:	2000      	movs	r0, #0
 8004b64:	e008      	b.n	8004b78 <_printf_common+0xa8>
 8004b66:	2301      	movs	r3, #1
 8004b68:	4652      	mov	r2, sl
 8004b6a:	4649      	mov	r1, r9
 8004b6c:	4638      	mov	r0, r7
 8004b6e:	47c0      	blx	r8
 8004b70:	3001      	adds	r0, #1
 8004b72:	d103      	bne.n	8004b7c <_printf_common+0xac>
 8004b74:	f04f 30ff 	mov.w	r0, #4294967295
 8004b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b7c:	3501      	adds	r5, #1
 8004b7e:	e7c6      	b.n	8004b0e <_printf_common+0x3e>
 8004b80:	18e1      	adds	r1, r4, r3
 8004b82:	1c5a      	adds	r2, r3, #1
 8004b84:	2030      	movs	r0, #48	; 0x30
 8004b86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b8a:	4422      	add	r2, r4
 8004b8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b94:	3302      	adds	r3, #2
 8004b96:	e7c7      	b.n	8004b28 <_printf_common+0x58>
 8004b98:	2301      	movs	r3, #1
 8004b9a:	4622      	mov	r2, r4
 8004b9c:	4649      	mov	r1, r9
 8004b9e:	4638      	mov	r0, r7
 8004ba0:	47c0      	blx	r8
 8004ba2:	3001      	adds	r0, #1
 8004ba4:	d0e6      	beq.n	8004b74 <_printf_common+0xa4>
 8004ba6:	3601      	adds	r6, #1
 8004ba8:	e7d9      	b.n	8004b5e <_printf_common+0x8e>
	...

08004bac <_printf_i>:
 8004bac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bb0:	7e0f      	ldrb	r7, [r1, #24]
 8004bb2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004bb4:	2f78      	cmp	r7, #120	; 0x78
 8004bb6:	4691      	mov	r9, r2
 8004bb8:	4680      	mov	r8, r0
 8004bba:	460c      	mov	r4, r1
 8004bbc:	469a      	mov	sl, r3
 8004bbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004bc2:	d807      	bhi.n	8004bd4 <_printf_i+0x28>
 8004bc4:	2f62      	cmp	r7, #98	; 0x62
 8004bc6:	d80a      	bhi.n	8004bde <_printf_i+0x32>
 8004bc8:	2f00      	cmp	r7, #0
 8004bca:	f000 80d8 	beq.w	8004d7e <_printf_i+0x1d2>
 8004bce:	2f58      	cmp	r7, #88	; 0x58
 8004bd0:	f000 80a3 	beq.w	8004d1a <_printf_i+0x16e>
 8004bd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004bdc:	e03a      	b.n	8004c54 <_printf_i+0xa8>
 8004bde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004be2:	2b15      	cmp	r3, #21
 8004be4:	d8f6      	bhi.n	8004bd4 <_printf_i+0x28>
 8004be6:	a101      	add	r1, pc, #4	; (adr r1, 8004bec <_printf_i+0x40>)
 8004be8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bec:	08004c45 	.word	0x08004c45
 8004bf0:	08004c59 	.word	0x08004c59
 8004bf4:	08004bd5 	.word	0x08004bd5
 8004bf8:	08004bd5 	.word	0x08004bd5
 8004bfc:	08004bd5 	.word	0x08004bd5
 8004c00:	08004bd5 	.word	0x08004bd5
 8004c04:	08004c59 	.word	0x08004c59
 8004c08:	08004bd5 	.word	0x08004bd5
 8004c0c:	08004bd5 	.word	0x08004bd5
 8004c10:	08004bd5 	.word	0x08004bd5
 8004c14:	08004bd5 	.word	0x08004bd5
 8004c18:	08004d65 	.word	0x08004d65
 8004c1c:	08004c89 	.word	0x08004c89
 8004c20:	08004d47 	.word	0x08004d47
 8004c24:	08004bd5 	.word	0x08004bd5
 8004c28:	08004bd5 	.word	0x08004bd5
 8004c2c:	08004d87 	.word	0x08004d87
 8004c30:	08004bd5 	.word	0x08004bd5
 8004c34:	08004c89 	.word	0x08004c89
 8004c38:	08004bd5 	.word	0x08004bd5
 8004c3c:	08004bd5 	.word	0x08004bd5
 8004c40:	08004d4f 	.word	0x08004d4f
 8004c44:	682b      	ldr	r3, [r5, #0]
 8004c46:	1d1a      	adds	r2, r3, #4
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	602a      	str	r2, [r5, #0]
 8004c4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c54:	2301      	movs	r3, #1
 8004c56:	e0a3      	b.n	8004da0 <_printf_i+0x1f4>
 8004c58:	6820      	ldr	r0, [r4, #0]
 8004c5a:	6829      	ldr	r1, [r5, #0]
 8004c5c:	0606      	lsls	r6, r0, #24
 8004c5e:	f101 0304 	add.w	r3, r1, #4
 8004c62:	d50a      	bpl.n	8004c7a <_printf_i+0xce>
 8004c64:	680e      	ldr	r6, [r1, #0]
 8004c66:	602b      	str	r3, [r5, #0]
 8004c68:	2e00      	cmp	r6, #0
 8004c6a:	da03      	bge.n	8004c74 <_printf_i+0xc8>
 8004c6c:	232d      	movs	r3, #45	; 0x2d
 8004c6e:	4276      	negs	r6, r6
 8004c70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c74:	485e      	ldr	r0, [pc, #376]	; (8004df0 <_printf_i+0x244>)
 8004c76:	230a      	movs	r3, #10
 8004c78:	e019      	b.n	8004cae <_printf_i+0x102>
 8004c7a:	680e      	ldr	r6, [r1, #0]
 8004c7c:	602b      	str	r3, [r5, #0]
 8004c7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c82:	bf18      	it	ne
 8004c84:	b236      	sxthne	r6, r6
 8004c86:	e7ef      	b.n	8004c68 <_printf_i+0xbc>
 8004c88:	682b      	ldr	r3, [r5, #0]
 8004c8a:	6820      	ldr	r0, [r4, #0]
 8004c8c:	1d19      	adds	r1, r3, #4
 8004c8e:	6029      	str	r1, [r5, #0]
 8004c90:	0601      	lsls	r1, r0, #24
 8004c92:	d501      	bpl.n	8004c98 <_printf_i+0xec>
 8004c94:	681e      	ldr	r6, [r3, #0]
 8004c96:	e002      	b.n	8004c9e <_printf_i+0xf2>
 8004c98:	0646      	lsls	r6, r0, #25
 8004c9a:	d5fb      	bpl.n	8004c94 <_printf_i+0xe8>
 8004c9c:	881e      	ldrh	r6, [r3, #0]
 8004c9e:	4854      	ldr	r0, [pc, #336]	; (8004df0 <_printf_i+0x244>)
 8004ca0:	2f6f      	cmp	r7, #111	; 0x6f
 8004ca2:	bf0c      	ite	eq
 8004ca4:	2308      	moveq	r3, #8
 8004ca6:	230a      	movne	r3, #10
 8004ca8:	2100      	movs	r1, #0
 8004caa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cae:	6865      	ldr	r5, [r4, #4]
 8004cb0:	60a5      	str	r5, [r4, #8]
 8004cb2:	2d00      	cmp	r5, #0
 8004cb4:	bfa2      	ittt	ge
 8004cb6:	6821      	ldrge	r1, [r4, #0]
 8004cb8:	f021 0104 	bicge.w	r1, r1, #4
 8004cbc:	6021      	strge	r1, [r4, #0]
 8004cbe:	b90e      	cbnz	r6, 8004cc4 <_printf_i+0x118>
 8004cc0:	2d00      	cmp	r5, #0
 8004cc2:	d04d      	beq.n	8004d60 <_printf_i+0x1b4>
 8004cc4:	4615      	mov	r5, r2
 8004cc6:	fbb6 f1f3 	udiv	r1, r6, r3
 8004cca:	fb03 6711 	mls	r7, r3, r1, r6
 8004cce:	5dc7      	ldrb	r7, [r0, r7]
 8004cd0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004cd4:	4637      	mov	r7, r6
 8004cd6:	42bb      	cmp	r3, r7
 8004cd8:	460e      	mov	r6, r1
 8004cda:	d9f4      	bls.n	8004cc6 <_printf_i+0x11a>
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	d10b      	bne.n	8004cf8 <_printf_i+0x14c>
 8004ce0:	6823      	ldr	r3, [r4, #0]
 8004ce2:	07de      	lsls	r6, r3, #31
 8004ce4:	d508      	bpl.n	8004cf8 <_printf_i+0x14c>
 8004ce6:	6923      	ldr	r3, [r4, #16]
 8004ce8:	6861      	ldr	r1, [r4, #4]
 8004cea:	4299      	cmp	r1, r3
 8004cec:	bfde      	ittt	le
 8004cee:	2330      	movle	r3, #48	; 0x30
 8004cf0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004cf4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004cf8:	1b52      	subs	r2, r2, r5
 8004cfa:	6122      	str	r2, [r4, #16]
 8004cfc:	f8cd a000 	str.w	sl, [sp]
 8004d00:	464b      	mov	r3, r9
 8004d02:	aa03      	add	r2, sp, #12
 8004d04:	4621      	mov	r1, r4
 8004d06:	4640      	mov	r0, r8
 8004d08:	f7ff fee2 	bl	8004ad0 <_printf_common>
 8004d0c:	3001      	adds	r0, #1
 8004d0e:	d14c      	bne.n	8004daa <_printf_i+0x1fe>
 8004d10:	f04f 30ff 	mov.w	r0, #4294967295
 8004d14:	b004      	add	sp, #16
 8004d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d1a:	4835      	ldr	r0, [pc, #212]	; (8004df0 <_printf_i+0x244>)
 8004d1c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d20:	6829      	ldr	r1, [r5, #0]
 8004d22:	6823      	ldr	r3, [r4, #0]
 8004d24:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d28:	6029      	str	r1, [r5, #0]
 8004d2a:	061d      	lsls	r5, r3, #24
 8004d2c:	d514      	bpl.n	8004d58 <_printf_i+0x1ac>
 8004d2e:	07df      	lsls	r7, r3, #31
 8004d30:	bf44      	itt	mi
 8004d32:	f043 0320 	orrmi.w	r3, r3, #32
 8004d36:	6023      	strmi	r3, [r4, #0]
 8004d38:	b91e      	cbnz	r6, 8004d42 <_printf_i+0x196>
 8004d3a:	6823      	ldr	r3, [r4, #0]
 8004d3c:	f023 0320 	bic.w	r3, r3, #32
 8004d40:	6023      	str	r3, [r4, #0]
 8004d42:	2310      	movs	r3, #16
 8004d44:	e7b0      	b.n	8004ca8 <_printf_i+0xfc>
 8004d46:	6823      	ldr	r3, [r4, #0]
 8004d48:	f043 0320 	orr.w	r3, r3, #32
 8004d4c:	6023      	str	r3, [r4, #0]
 8004d4e:	2378      	movs	r3, #120	; 0x78
 8004d50:	4828      	ldr	r0, [pc, #160]	; (8004df4 <_printf_i+0x248>)
 8004d52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d56:	e7e3      	b.n	8004d20 <_printf_i+0x174>
 8004d58:	0659      	lsls	r1, r3, #25
 8004d5a:	bf48      	it	mi
 8004d5c:	b2b6      	uxthmi	r6, r6
 8004d5e:	e7e6      	b.n	8004d2e <_printf_i+0x182>
 8004d60:	4615      	mov	r5, r2
 8004d62:	e7bb      	b.n	8004cdc <_printf_i+0x130>
 8004d64:	682b      	ldr	r3, [r5, #0]
 8004d66:	6826      	ldr	r6, [r4, #0]
 8004d68:	6961      	ldr	r1, [r4, #20]
 8004d6a:	1d18      	adds	r0, r3, #4
 8004d6c:	6028      	str	r0, [r5, #0]
 8004d6e:	0635      	lsls	r5, r6, #24
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	d501      	bpl.n	8004d78 <_printf_i+0x1cc>
 8004d74:	6019      	str	r1, [r3, #0]
 8004d76:	e002      	b.n	8004d7e <_printf_i+0x1d2>
 8004d78:	0670      	lsls	r0, r6, #25
 8004d7a:	d5fb      	bpl.n	8004d74 <_printf_i+0x1c8>
 8004d7c:	8019      	strh	r1, [r3, #0]
 8004d7e:	2300      	movs	r3, #0
 8004d80:	6123      	str	r3, [r4, #16]
 8004d82:	4615      	mov	r5, r2
 8004d84:	e7ba      	b.n	8004cfc <_printf_i+0x150>
 8004d86:	682b      	ldr	r3, [r5, #0]
 8004d88:	1d1a      	adds	r2, r3, #4
 8004d8a:	602a      	str	r2, [r5, #0]
 8004d8c:	681d      	ldr	r5, [r3, #0]
 8004d8e:	6862      	ldr	r2, [r4, #4]
 8004d90:	2100      	movs	r1, #0
 8004d92:	4628      	mov	r0, r5
 8004d94:	f7fb fa24 	bl	80001e0 <memchr>
 8004d98:	b108      	cbz	r0, 8004d9e <_printf_i+0x1f2>
 8004d9a:	1b40      	subs	r0, r0, r5
 8004d9c:	6060      	str	r0, [r4, #4]
 8004d9e:	6863      	ldr	r3, [r4, #4]
 8004da0:	6123      	str	r3, [r4, #16]
 8004da2:	2300      	movs	r3, #0
 8004da4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004da8:	e7a8      	b.n	8004cfc <_printf_i+0x150>
 8004daa:	6923      	ldr	r3, [r4, #16]
 8004dac:	462a      	mov	r2, r5
 8004dae:	4649      	mov	r1, r9
 8004db0:	4640      	mov	r0, r8
 8004db2:	47d0      	blx	sl
 8004db4:	3001      	adds	r0, #1
 8004db6:	d0ab      	beq.n	8004d10 <_printf_i+0x164>
 8004db8:	6823      	ldr	r3, [r4, #0]
 8004dba:	079b      	lsls	r3, r3, #30
 8004dbc:	d413      	bmi.n	8004de6 <_printf_i+0x23a>
 8004dbe:	68e0      	ldr	r0, [r4, #12]
 8004dc0:	9b03      	ldr	r3, [sp, #12]
 8004dc2:	4298      	cmp	r0, r3
 8004dc4:	bfb8      	it	lt
 8004dc6:	4618      	movlt	r0, r3
 8004dc8:	e7a4      	b.n	8004d14 <_printf_i+0x168>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	4632      	mov	r2, r6
 8004dce:	4649      	mov	r1, r9
 8004dd0:	4640      	mov	r0, r8
 8004dd2:	47d0      	blx	sl
 8004dd4:	3001      	adds	r0, #1
 8004dd6:	d09b      	beq.n	8004d10 <_printf_i+0x164>
 8004dd8:	3501      	adds	r5, #1
 8004dda:	68e3      	ldr	r3, [r4, #12]
 8004ddc:	9903      	ldr	r1, [sp, #12]
 8004dde:	1a5b      	subs	r3, r3, r1
 8004de0:	42ab      	cmp	r3, r5
 8004de2:	dcf2      	bgt.n	8004dca <_printf_i+0x21e>
 8004de4:	e7eb      	b.n	8004dbe <_printf_i+0x212>
 8004de6:	2500      	movs	r5, #0
 8004de8:	f104 0619 	add.w	r6, r4, #25
 8004dec:	e7f5      	b.n	8004dda <_printf_i+0x22e>
 8004dee:	bf00      	nop
 8004df0:	08005089 	.word	0x08005089
 8004df4:	0800509a 	.word	0x0800509a

08004df8 <_read_r>:
 8004df8:	b538      	push	{r3, r4, r5, lr}
 8004dfa:	4d07      	ldr	r5, [pc, #28]	; (8004e18 <_read_r+0x20>)
 8004dfc:	4604      	mov	r4, r0
 8004dfe:	4608      	mov	r0, r1
 8004e00:	4611      	mov	r1, r2
 8004e02:	2200      	movs	r2, #0
 8004e04:	602a      	str	r2, [r5, #0]
 8004e06:	461a      	mov	r2, r3
 8004e08:	f7fc f894 	bl	8000f34 <_read>
 8004e0c:	1c43      	adds	r3, r0, #1
 8004e0e:	d102      	bne.n	8004e16 <_read_r+0x1e>
 8004e10:	682b      	ldr	r3, [r5, #0]
 8004e12:	b103      	cbz	r3, 8004e16 <_read_r+0x1e>
 8004e14:	6023      	str	r3, [r4, #0]
 8004e16:	bd38      	pop	{r3, r4, r5, pc}
 8004e18:	20000190 	.word	0x20000190

08004e1c <_fstat_r>:
 8004e1c:	b538      	push	{r3, r4, r5, lr}
 8004e1e:	4d07      	ldr	r5, [pc, #28]	; (8004e3c <_fstat_r+0x20>)
 8004e20:	2300      	movs	r3, #0
 8004e22:	4604      	mov	r4, r0
 8004e24:	4608      	mov	r0, r1
 8004e26:	4611      	mov	r1, r2
 8004e28:	602b      	str	r3, [r5, #0]
 8004e2a:	f7fc f8c8 	bl	8000fbe <_fstat>
 8004e2e:	1c43      	adds	r3, r0, #1
 8004e30:	d102      	bne.n	8004e38 <_fstat_r+0x1c>
 8004e32:	682b      	ldr	r3, [r5, #0]
 8004e34:	b103      	cbz	r3, 8004e38 <_fstat_r+0x1c>
 8004e36:	6023      	str	r3, [r4, #0]
 8004e38:	bd38      	pop	{r3, r4, r5, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20000190 	.word	0x20000190

08004e40 <_isatty_r>:
 8004e40:	b538      	push	{r3, r4, r5, lr}
 8004e42:	4d06      	ldr	r5, [pc, #24]	; (8004e5c <_isatty_r+0x1c>)
 8004e44:	2300      	movs	r3, #0
 8004e46:	4604      	mov	r4, r0
 8004e48:	4608      	mov	r0, r1
 8004e4a:	602b      	str	r3, [r5, #0]
 8004e4c:	f7fc f8c7 	bl	8000fde <_isatty>
 8004e50:	1c43      	adds	r3, r0, #1
 8004e52:	d102      	bne.n	8004e5a <_isatty_r+0x1a>
 8004e54:	682b      	ldr	r3, [r5, #0]
 8004e56:	b103      	cbz	r3, 8004e5a <_isatty_r+0x1a>
 8004e58:	6023      	str	r3, [r4, #0]
 8004e5a:	bd38      	pop	{r3, r4, r5, pc}
 8004e5c:	20000190 	.word	0x20000190

08004e60 <_init>:
 8004e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e62:	bf00      	nop
 8004e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e66:	bc08      	pop	{r3}
 8004e68:	469e      	mov	lr, r3
 8004e6a:	4770      	bx	lr

08004e6c <_fini>:
 8004e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e6e:	bf00      	nop
 8004e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e72:	bc08      	pop	{r3}
 8004e74:	469e      	mov	lr, r3
 8004e76:	4770      	bx	lr
