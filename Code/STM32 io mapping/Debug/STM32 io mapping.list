
STM32 io mapping.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f94  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800812c  0800812c  0001812c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008184  08008184  00020130  2**0
                  CONTENTS
  4 .ARM          00000008  08008184  08008184  00018184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800818c  0800818c  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800818c  0800818c  0001818c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008190  08008190  00018190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  08008194  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c0c  20000130  080082c4  00020130  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d3c  080082c4  00020d3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b02b  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038fa  00000000  00000000  0003b18b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001798  00000000  00000000  0003ea88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001638  00000000  00000000  00040220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aeba  00000000  00000000  00041858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001da6b  00000000  00000000  0005c712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096d82  00000000  00000000  0007a17d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00110eff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006460  00000000  00000000  00110f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000130 	.word	0x20000130
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008114 	.word	0x08008114

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000134 	.word	0x20000134
 80001d4:	08008114 	.word	0x08008114

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fcea 	bl	8000eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f814 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f9d8 	bl	800089c <MX_GPIO_Init>
  MX_TIM2_Init();
 80004ec:	f000 f912 	bl	8000714 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80004f0:	f007 f9b6 	bl	8007860 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 80004f4:	f000 f95a 	bl	80007ac <MX_TIM3_Init>
  MX_SPI2_Init();
 80004f8:	f000 f8a0 	bl	800063c <MX_SPI2_Init>
  MX_FATFS_Init();
 80004fc:	f005 fbea 	bl	8005cd4 <MX_FATFS_Init>
  MX_SPI3_Init();
 8000500:	f000 f8d2 	bl	80006a8 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8000504:	f000 f9a0 	bl	8000848 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8000508:	f000 f86a 	bl	80005e0 <MX_I2C3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800050c:	e7fe      	b.n	800050c <main+0x30>
	...

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b094      	sub	sp, #80	; 0x50
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 0320 	add.w	r3, r7, #32
 800051a:	2230      	movs	r2, #48	; 0x30
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f007 fdf0 	bl	8008104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	f107 030c 	add.w	r3, r7, #12
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000534:	2300      	movs	r3, #0
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	4b27      	ldr	r3, [pc, #156]	; (80005d8 <SystemClock_Config+0xc8>)
 800053a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800053c:	4a26      	ldr	r2, [pc, #152]	; (80005d8 <SystemClock_Config+0xc8>)
 800053e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000542:	6413      	str	r3, [r2, #64]	; 0x40
 8000544:	4b24      	ldr	r3, [pc, #144]	; (80005d8 <SystemClock_Config+0xc8>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000550:	2300      	movs	r3, #0
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	4b21      	ldr	r3, [pc, #132]	; (80005dc <SystemClock_Config+0xcc>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a20      	ldr	r2, [pc, #128]	; (80005dc <SystemClock_Config+0xcc>)
 800055a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4b1e      	ldr	r3, [pc, #120]	; (80005dc <SystemClock_Config+0xcc>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800056c:	2301      	movs	r3, #1
 800056e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000570:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000574:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000576:	2302      	movs	r3, #2
 8000578:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800057a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800057e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000580:	2304      	movs	r3, #4
 8000582:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000584:	23c0      	movs	r3, #192	; 0xc0
 8000586:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000588:	2304      	movs	r3, #4
 800058a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800058c:	2308      	movs	r3, #8
 800058e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000590:	f107 0320 	add.w	r3, r7, #32
 8000594:	4618      	mov	r0, r3
 8000596:	f002 fb7f 	bl	8002c98 <HAL_RCC_OscConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005a0:	f000 fa52 	bl	8000a48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a4:	230f      	movs	r3, #15
 80005a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a8:	2302      	movs	r3, #2
 80005aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005ba:	f107 030c 	add.w	r3, r7, #12
 80005be:	2103      	movs	r1, #3
 80005c0:	4618      	mov	r0, r3
 80005c2:	f002 fde1 	bl	8003188 <HAL_RCC_ClockConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005cc:	f000 fa3c 	bl	8000a48 <Error_Handler>
  }
}
 80005d0:	bf00      	nop
 80005d2:	3750      	adds	r7, #80	; 0x50
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40023800 	.word	0x40023800
 80005dc:	40007000 	.word	0x40007000

080005e0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <MX_I2C3_Init+0x50>)
 80005e6:	4a13      	ldr	r2, [pc, #76]	; (8000634 <MX_I2C3_Init+0x54>)
 80005e8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <MX_I2C3_Init+0x50>)
 80005ec:	4a12      	ldr	r2, [pc, #72]	; (8000638 <MX_I2C3_Init+0x58>)
 80005ee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <MX_I2C3_Init+0x50>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <MX_I2C3_Init+0x50>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <MX_I2C3_Init+0x50>)
 80005fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000602:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000604:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <MX_I2C3_Init+0x50>)
 8000606:	2200      	movs	r2, #0
 8000608:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <MX_I2C3_Init+0x50>)
 800060c:	2200      	movs	r2, #0
 800060e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000610:	4b07      	ldr	r3, [pc, #28]	; (8000630 <MX_I2C3_Init+0x50>)
 8000612:	2200      	movs	r2, #0
 8000614:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000616:	4b06      	ldr	r3, [pc, #24]	; (8000630 <MX_I2C3_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800061c:	4804      	ldr	r0, [pc, #16]	; (8000630 <MX_I2C3_Init+0x50>)
 800061e:	f000 ff91 	bl	8001544 <HAL_I2C_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000628:	f000 fa0e 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	2000014c 	.word	0x2000014c
 8000634:	40005c00 	.word	0x40005c00
 8000638:	000186a0 	.word	0x000186a0

0800063c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000640:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <MX_SPI2_Init+0x64>)
 8000642:	4a18      	ldr	r2, [pc, #96]	; (80006a4 <MX_SPI2_Init+0x68>)
 8000644:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000646:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <MX_SPI2_Init+0x64>)
 8000648:	f44f 7282 	mov.w	r2, #260	; 0x104
 800064c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800064e:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <MX_SPI2_Init+0x64>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <MX_SPI2_Init+0x64>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800065a:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <MX_SPI2_Init+0x64>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000660:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <MX_SPI2_Init+0x64>)
 8000662:	2200      	movs	r2, #0
 8000664:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <MX_SPI2_Init+0x64>)
 8000668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800066c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800066e:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <MX_SPI2_Init+0x64>)
 8000670:	2238      	movs	r2, #56	; 0x38
 8000672:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000674:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <MX_SPI2_Init+0x64>)
 8000676:	2200      	movs	r2, #0
 8000678:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MX_SPI2_Init+0x64>)
 800067c:	2200      	movs	r2, #0
 800067e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000680:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <MX_SPI2_Init+0x64>)
 8000682:	2200      	movs	r2, #0
 8000684:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <MX_SPI2_Init+0x64>)
 8000688:	220a      	movs	r2, #10
 800068a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800068c:	4804      	ldr	r0, [pc, #16]	; (80006a0 <MX_SPI2_Init+0x64>)
 800068e:	f002 ff9b 	bl	80035c8 <HAL_SPI_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000698:	f000 f9d6 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	200001a0 	.word	0x200001a0
 80006a4:	40003800 	.word	0x40003800

080006a8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80006ac:	4b17      	ldr	r3, [pc, #92]	; (800070c <MX_SPI3_Init+0x64>)
 80006ae:	4a18      	ldr	r2, [pc, #96]	; (8000710 <MX_SPI3_Init+0x68>)
 80006b0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80006b2:	4b16      	ldr	r3, [pc, #88]	; (800070c <MX_SPI3_Init+0x64>)
 80006b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006b8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80006ba:	4b14      	ldr	r3, [pc, #80]	; (800070c <MX_SPI3_Init+0x64>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <MX_SPI3_Init+0x64>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_SPI3_Init+0x64>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_SPI3_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_SPI3_Init+0x64>)
 80006d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006da:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_SPI3_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	; (800070c <MX_SPI3_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_SPI3_Init+0x64>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <MX_SPI3_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_SPI3_Init+0x64>)
 80006f4:	220a      	movs	r2, #10
 80006f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80006f8:	4804      	ldr	r0, [pc, #16]	; (800070c <MX_SPI3_Init+0x64>)
 80006fa:	f002 ff65 	bl	80035c8 <HAL_SPI_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000704:	f000 f9a0 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	200001f8 	.word	0x200001f8
 8000710:	40003c00 	.word	0x40003c00

08000714 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800071a:	f107 0308 	add.w	r3, r7, #8
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000728:	463b      	mov	r3, r7
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000730:	4b1d      	ldr	r3, [pc, #116]	; (80007a8 <MX_TIM2_Init+0x94>)
 8000732:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000736:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 8000738:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <MX_TIM2_Init+0x94>)
 800073a:	225f      	movs	r2, #95	; 0x5f
 800073c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073e:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <MX_TIM2_Init+0x94>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000744:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <MX_TIM2_Init+0x94>)
 8000746:	2263      	movs	r2, #99	; 0x63
 8000748:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800074a:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_TIM2_Init+0x94>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000750:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_TIM2_Init+0x94>)
 8000752:	2200      	movs	r2, #0
 8000754:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000756:	4814      	ldr	r0, [pc, #80]	; (80007a8 <MX_TIM2_Init+0x94>)
 8000758:	f002 ffbf 	bl	80036da <HAL_TIM_Base_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000762:	f000 f971 	bl	8000a48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800076c:	f107 0308 	add.w	r3, r7, #8
 8000770:	4619      	mov	r1, r3
 8000772:	480d      	ldr	r0, [pc, #52]	; (80007a8 <MX_TIM2_Init+0x94>)
 8000774:	f003 f908 	bl	8003988 <HAL_TIM_ConfigClockSource>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800077e:	f000 f963 	bl	8000a48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000782:	2300      	movs	r3, #0
 8000784:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800078a:	463b      	mov	r3, r7
 800078c:	4619      	mov	r1, r3
 800078e:	4806      	ldr	r0, [pc, #24]	; (80007a8 <MX_TIM2_Init+0x94>)
 8000790:	f003 fb0e 	bl	8003db0 <HAL_TIMEx_MasterConfigSynchronization>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800079a:	f000 f955 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	3718      	adds	r7, #24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000250 	.word	0x20000250

080007ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007b2:	f107 0308 	add.w	r3, r7, #8
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c0:	463b      	mov	r3, r7
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007c8:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <MX_TIM3_Init+0x94>)
 80007ca:	4a1e      	ldr	r2, [pc, #120]	; (8000844 <MX_TIM3_Init+0x98>)
 80007cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 800-1;
 80007ce:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <MX_TIM3_Init+0x94>)
 80007d0:	f240 321f 	movw	r2, #799	; 0x31f
 80007d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_TIM3_Init+0x94>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80007dc:	4b18      	ldr	r3, [pc, #96]	; (8000840 <MX_TIM3_Init+0x94>)
 80007de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e4:	4b16      	ldr	r3, [pc, #88]	; (8000840 <MX_TIM3_Init+0x94>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ea:	4b15      	ldr	r3, [pc, #84]	; (8000840 <MX_TIM3_Init+0x94>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007f0:	4813      	ldr	r0, [pc, #76]	; (8000840 <MX_TIM3_Init+0x94>)
 80007f2:	f002 ff72 	bl	80036da <HAL_TIM_Base_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80007fc:	f000 f924 	bl	8000a48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000804:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000806:	f107 0308 	add.w	r3, r7, #8
 800080a:	4619      	mov	r1, r3
 800080c:	480c      	ldr	r0, [pc, #48]	; (8000840 <MX_TIM3_Init+0x94>)
 800080e:	f003 f8bb 	bl	8003988 <HAL_TIM_ConfigClockSource>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000818:	f000 f916 	bl	8000a48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800081c:	2300      	movs	r3, #0
 800081e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000820:	2300      	movs	r3, #0
 8000822:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000824:	463b      	mov	r3, r7
 8000826:	4619      	mov	r1, r3
 8000828:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_TIM3_Init+0x94>)
 800082a:	f003 fac1 	bl	8003db0 <HAL_TIMEx_MasterConfigSynchronization>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000834:	f000 f908 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	3718      	adds	r7, #24
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000298 	.word	0x20000298
 8000844:	40000400 	.word	0x40000400

08000848 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_USART2_UART_Init+0x4c>)
 800084e:	4a12      	ldr	r2, [pc, #72]	; (8000898 <MX_USART2_UART_Init+0x50>)
 8000850:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <MX_USART2_UART_Init+0x4c>)
 8000854:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000858:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_USART2_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_USART2_UART_Init+0x4c>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <MX_USART2_UART_Init+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_USART2_UART_Init+0x4c>)
 800086e:	220c      	movs	r2, #12
 8000870:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <MX_USART2_UART_Init+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_USART2_UART_Init+0x4c>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_USART2_UART_Init+0x4c>)
 8000880:	f003 fb18 	bl	8003eb4 <HAL_UART_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800088a:	f000 f8dd 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200002e0 	.word	0x200002e0
 8000898:	40004400 	.word	0x40004400

0800089c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	; 0x28
 80008a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
 80008b6:	4b5f      	ldr	r3, [pc, #380]	; (8000a34 <MX_GPIO_Init+0x198>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a5e      	ldr	r2, [pc, #376]	; (8000a34 <MX_GPIO_Init+0x198>)
 80008bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b5c      	ldr	r3, [pc, #368]	; (8000a34 <MX_GPIO_Init+0x198>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	4b58      	ldr	r3, [pc, #352]	; (8000a34 <MX_GPIO_Init+0x198>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a57      	ldr	r2, [pc, #348]	; (8000a34 <MX_GPIO_Init+0x198>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b55      	ldr	r3, [pc, #340]	; (8000a34 <MX_GPIO_Init+0x198>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	4b51      	ldr	r3, [pc, #324]	; (8000a34 <MX_GPIO_Init+0x198>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a50      	ldr	r2, [pc, #320]	; (8000a34 <MX_GPIO_Init+0x198>)
 80008f4:	f043 0304 	orr.w	r3, r3, #4
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b4e      	ldr	r3, [pc, #312]	; (8000a34 <MX_GPIO_Init+0x198>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0304 	and.w	r3, r3, #4
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	4b4a      	ldr	r3, [pc, #296]	; (8000a34 <MX_GPIO_Init+0x198>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a49      	ldr	r2, [pc, #292]	; (8000a34 <MX_GPIO_Init+0x198>)
 8000910:	f043 0302 	orr.w	r3, r3, #2
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b47      	ldr	r3, [pc, #284]	; (8000a34 <MX_GPIO_Init+0x198>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	4b43      	ldr	r3, [pc, #268]	; (8000a34 <MX_GPIO_Init+0x198>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a42      	ldr	r2, [pc, #264]	; (8000a34 <MX_GPIO_Init+0x198>)
 800092c:	f043 0308 	orr.w	r3, r3, #8
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b40      	ldr	r3, [pc, #256]	; (8000a34 <MX_GPIO_Init+0x198>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0308 	and.w	r3, r3, #8
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BT_Mode0_Pin|BT_Mode1_Pin|BT_Mode2_Pin|BT_Mode3_Pin
 800093e:	2200      	movs	r2, #0
 8000940:	f248 61f0 	movw	r1, #34544	; 0x86f0
 8000944:	483c      	ldr	r0, [pc, #240]	; (8000a38 <MX_GPIO_Init+0x19c>)
 8000946:	f000 fde3 	bl	8001510 <HAL_GPIO_WritePin>
                          |Battery_TMR_Pin|Battery_CE_Pin|LCD_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Col0_Pin|Col1_Pin|Col2_Pin|Col3_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	210f      	movs	r1, #15
 800094e:	483b      	ldr	r0, [pc, #236]	; (8000a3c <MX_GPIO_Init+0x1a0>)
 8000950:	f000 fdde 	bl	8001510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Battery_EN1_Pin|BatteryEN2_Pin|Battery_GPOUT_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8000954:	2200      	movs	r2, #0
 8000956:	f44f 611c 	mov.w	r1, #2496	; 0x9c0
 800095a:	4839      	ldr	r0, [pc, #228]	; (8000a40 <MX_GPIO_Init+0x1a4>)
 800095c:	f000 fdd8 	bl	8001510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_Reset_GPIO_Port, LCD_Reset_Pin, GPIO_PIN_RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	2104      	movs	r1, #4
 8000964:	4837      	ldr	r0, [pc, #220]	; (8000a44 <MX_GPIO_Init+0x1a8>)
 8000966:	f000 fdd3 	bl	8001510 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BT_Mode0_Pin BT_Mode1_Pin BT_Mode2_Pin BT_Mode3_Pin
                           Battery_TMR_Pin Battery_CE_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = BT_Mode0_Pin|BT_Mode1_Pin|BT_Mode2_Pin|BT_Mode3_Pin
 800096a:	f248 63f0 	movw	r3, #34544	; 0x86f0
 800096e:	617b      	str	r3, [r7, #20]
                          |Battery_TMR_Pin|Battery_CE_Pin|LCD_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000970:	2301      	movs	r3, #1
 8000972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4619      	mov	r1, r3
 8000982:	482d      	ldr	r0, [pc, #180]	; (8000a38 <MX_GPIO_Init+0x19c>)
 8000984:	f000 fc40 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_Detect_Pin */
  GPIO_InitStruct.Pin = USB_Detect_Pin;
 8000988:	2320      	movs	r3, #32
 800098a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098c:	2300      	movs	r3, #0
 800098e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000990:	2302      	movs	r3, #2
 8000992:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_Detect_GPIO_Port, &GPIO_InitStruct);
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	4619      	mov	r1, r3
 800099a:	4829      	ldr	r0, [pc, #164]	; (8000a40 <MX_GPIO_Init+0x1a4>)
 800099c:	f000 fc34 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pins : Col0_Pin Col1_Pin Col2_Pin Col3_Pin */
  GPIO_InitStruct.Pin = Col0_Pin|Col1_Pin|Col2_Pin|Col3_Pin;
 80009a0:	230f      	movs	r3, #15
 80009a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80009a4:	2311      	movs	r3, #17
 80009a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4619      	mov	r1, r3
 80009b6:	4821      	ldr	r0, [pc, #132]	; (8000a3c <MX_GPIO_Init+0x1a0>)
 80009b8:	f000 fc26 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_Detect_Pin SD_CS_Pin Row0_Pin Row1_Pin
                           Row2_Pin Row3_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin|SD_CS_Pin|Row0_Pin|Row1_Pin
 80009bc:	f241 43f0 	movw	r3, #5360	; 0x14f0
 80009c0:	617b      	str	r3, [r7, #20]
                          |Row2_Pin|Row3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c6:	2301      	movs	r3, #1
 80009c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	4619      	mov	r1, r3
 80009d0:	481a      	ldr	r0, [pc, #104]	; (8000a3c <MX_GPIO_Init+0x1a0>)
 80009d2:	f000 fc19 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pins : Battery_EN1_Pin BatteryEN2_Pin Battery_GPOUT_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = Battery_EN1_Pin|BatteryEN2_Pin|Battery_GPOUT_Pin|LCD_DC_Pin;
 80009d6:	f44f 631c 	mov.w	r3, #2496	; 0x9c0
 80009da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009dc:	2301      	movs	r3, #1
 80009de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	4619      	mov	r1, r3
 80009ee:	4814      	ldr	r0, [pc, #80]	; (8000a40 <MX_GPIO_Init+0x1a4>)
 80009f0:	f000 fc0a 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_Reset_Pin */
  GPIO_InitStruct.Pin = LCD_Reset_Pin;
 80009f4:	2304      	movs	r3, #4
 80009f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f8:	2301      	movs	r3, #1
 80009fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2300      	movs	r3, #0
 8000a02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_Reset_GPIO_Port, &GPIO_InitStruct);
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	4619      	mov	r1, r3
 8000a0a:	480e      	ldr	r0, [pc, #56]	; (8000a44 <MX_GPIO_Init+0x1a8>)
 8000a0c:	f000 fbfc 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button17_Pin Button18_Pin */
  GPIO_InitStruct.Pin = Button17_Pin|Button18_Pin;
 8000a10:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_GPIO_Init+0x1a0>)
 8000a26:	f000 fbef 	bl	8001208 <HAL_GPIO_Init>

}
 8000a2a:	bf00      	nop
 8000a2c:	3728      	adds	r7, #40	; 0x28
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40020000 	.word	0x40020000
 8000a3c:	40020400 	.word	0x40020400
 8000a40:	40020800 	.word	0x40020800
 8000a44:	40020c00 	.word	0x40020c00

08000a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4c:	b672      	cpsid	i
}
 8000a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <Error_Handler+0x8>
	...

08000a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	4a0f      	ldr	r2, [pc, #60]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a68:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6a:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	603b      	str	r3, [r7, #0]
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	4a08      	ldr	r2, [pc, #32]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a84:	6413      	str	r3, [r2, #64]	; 0x40
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800

08000aa4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	; 0x28
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a29      	ldr	r2, [pc, #164]	; (8000b68 <HAL_I2C_MspInit+0xc4>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d14b      	bne.n	8000b5e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	4b28      	ldr	r3, [pc, #160]	; (8000b6c <HAL_I2C_MspInit+0xc8>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a27      	ldr	r2, [pc, #156]	; (8000b6c <HAL_I2C_MspInit+0xc8>)
 8000ad0:	f043 0304 	orr.w	r3, r3, #4
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b25      	ldr	r3, [pc, #148]	; (8000b6c <HAL_I2C_MspInit+0xc8>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0304 	and.w	r3, r3, #4
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <HAL_I2C_MspInit+0xc8>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a20      	ldr	r2, [pc, #128]	; (8000b6c <HAL_I2C_MspInit+0xc8>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b1e      	ldr	r3, [pc, #120]	; (8000b6c <HAL_I2C_MspInit+0xc8>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = Battery_I2C_SDA_Pin;
 8000afe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b04:	2312      	movs	r3, #18
 8000b06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b10:	2304      	movs	r3, #4
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Battery_I2C_SDA_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4815      	ldr	r0, [pc, #84]	; (8000b70 <HAL_I2C_MspInit+0xcc>)
 8000b1c:	f000 fb74 	bl	8001208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Battery_I2C_SCL_Pin;
 8000b20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b26:	2312      	movs	r3, #18
 8000b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b32:	2304      	movs	r3, #4
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Battery_I2C_SCL_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	480d      	ldr	r0, [pc, #52]	; (8000b74 <HAL_I2C_MspInit+0xd0>)
 8000b3e:	f000 fb63 	bl	8001208 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <HAL_I2C_MspInit+0xc8>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	4a08      	ldr	r2, [pc, #32]	; (8000b6c <HAL_I2C_MspInit+0xc8>)
 8000b4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b50:	6413      	str	r3, [r2, #64]	; 0x40
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_I2C_MspInit+0xc8>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000b5e:	bf00      	nop
 8000b60:	3728      	adds	r7, #40	; 0x28
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40005c00 	.word	0x40005c00
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40020800 	.word	0x40020800
 8000b74:	40020000 	.word	0x40020000

08000b78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08c      	sub	sp, #48	; 0x30
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 031c 	add.w	r3, r7, #28
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a3b      	ldr	r2, [pc, #236]	; (8000c84 <HAL_SPI_MspInit+0x10c>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d13e      	bne.n	8000c18 <HAL_SPI_MspInit+0xa0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61bb      	str	r3, [r7, #24]
 8000b9e:	4b3a      	ldr	r3, [pc, #232]	; (8000c88 <HAL_SPI_MspInit+0x110>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	4a39      	ldr	r2, [pc, #228]	; (8000c88 <HAL_SPI_MspInit+0x110>)
 8000ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8000baa:	4b37      	ldr	r3, [pc, #220]	; (8000c88 <HAL_SPI_MspInit+0x110>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb2:	61bb      	str	r3, [r7, #24]
 8000bb4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
 8000bba:	4b33      	ldr	r3, [pc, #204]	; (8000c88 <HAL_SPI_MspInit+0x110>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a32      	ldr	r2, [pc, #200]	; (8000c88 <HAL_SPI_MspInit+0x110>)
 8000bc0:	f043 0302 	orr.w	r3, r3, #2
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b30      	ldr	r3, [pc, #192]	; (8000c88 <HAL_SPI_MspInit+0x110>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0302 	and.w	r3, r3, #2
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SD_SPI_SCK_Pin;
 8000bd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be0:	2303      	movs	r3, #3
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000be4:	2305      	movs	r3, #5
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SD_SPI_SCK_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	4619      	mov	r1, r3
 8000bee:	4827      	ldr	r0, [pc, #156]	; (8000c8c <HAL_SPI_MspInit+0x114>)
 8000bf0:	f000 fb0a 	bl	8001208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_SPI_MISO_Pin|SD_MOSI_Pin;
 8000bf4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c02:	2303      	movs	r3, #3
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c06:	2305      	movs	r3, #5
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	4619      	mov	r1, r3
 8000c10:	481e      	ldr	r0, [pc, #120]	; (8000c8c <HAL_SPI_MspInit+0x114>)
 8000c12:	f000 faf9 	bl	8001208 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c16:	e031      	b.n	8000c7c <HAL_SPI_MspInit+0x104>
  else if(hspi->Instance==SPI3)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a1c      	ldr	r2, [pc, #112]	; (8000c90 <HAL_SPI_MspInit+0x118>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d12c      	bne.n	8000c7c <HAL_SPI_MspInit+0x104>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <HAL_SPI_MspInit+0x110>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	4a17      	ldr	r2, [pc, #92]	; (8000c88 <HAL_SPI_MspInit+0x110>)
 8000c2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c30:	6413      	str	r3, [r2, #64]	; 0x40
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <HAL_SPI_MspInit+0x110>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <HAL_SPI_MspInit+0x110>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a10      	ldr	r2, [pc, #64]	; (8000c88 <HAL_SPI_MspInit+0x110>)
 8000c48:	f043 0304 	orr.w	r3, r3, #4
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <HAL_SPI_MspInit+0x110>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0304 	and.w	r3, r3, #4
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SPI_SCK_Pin|LCD_SPI_MOSI_Pin;
 8000c5a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c6c:	2306      	movs	r3, #6
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c70:	f107 031c 	add.w	r3, r7, #28
 8000c74:	4619      	mov	r1, r3
 8000c76:	4807      	ldr	r0, [pc, #28]	; (8000c94 <HAL_SPI_MspInit+0x11c>)
 8000c78:	f000 fac6 	bl	8001208 <HAL_GPIO_Init>
}
 8000c7c:	bf00      	nop
 8000c7e:	3730      	adds	r7, #48	; 0x30
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40003800 	.word	0x40003800
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020400 	.word	0x40020400
 8000c90:	40003c00 	.word	0x40003c00
 8000c94:	40020800 	.word	0x40020800

08000c98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ca8:	d116      	bne.n	8000cd8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <HAL_TIM_Base_MspInit+0x80>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	4a19      	ldr	r2, [pc, #100]	; (8000d18 <HAL_TIM_Base_MspInit+0x80>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cba:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <HAL_TIM_Base_MspInit+0x80>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	201c      	movs	r0, #28
 8000ccc:	f000 fa65 	bl	800119a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cd0:	201c      	movs	r0, #28
 8000cd2:	f000 fa7e 	bl	80011d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000cd6:	e01a      	b.n	8000d0e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0f      	ldr	r2, [pc, #60]	; (8000d1c <HAL_TIM_Base_MspInit+0x84>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d115      	bne.n	8000d0e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <HAL_TIM_Base_MspInit+0x80>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	4a0b      	ldr	r2, [pc, #44]	; (8000d18 <HAL_TIM_Base_MspInit+0x80>)
 8000cec:	f043 0302 	orr.w	r3, r3, #2
 8000cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <HAL_TIM_Base_MspInit+0x80>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2100      	movs	r1, #0
 8000d02:	201d      	movs	r0, #29
 8000d04:	f000 fa49 	bl	800119a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d08:	201d      	movs	r0, #29
 8000d0a:	f000 fa62 	bl	80011d2 <HAL_NVIC_EnableIRQ>
}
 8000d0e:	bf00      	nop
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40000400 	.word	0x40000400

08000d20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	; 0x28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a19      	ldr	r2, [pc, #100]	; (8000da4 <HAL_UART_MspInit+0x84>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d12b      	bne.n	8000d9a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <HAL_UART_MspInit+0x88>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	4a17      	ldr	r2, [pc, #92]	; (8000da8 <HAL_UART_MspInit+0x88>)
 8000d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d50:	6413      	str	r3, [r2, #64]	; 0x40
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <HAL_UART_MspInit+0x88>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <HAL_UART_MspInit+0x88>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a10      	ldr	r2, [pc, #64]	; (8000da8 <HAL_UART_MspInit+0x88>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <HAL_UART_MspInit+0x88>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BT_USART_TX_Pin|BT_USART_RX_Pin;
 8000d7a:	230c      	movs	r3, #12
 8000d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d86:	2303      	movs	r3, #3
 8000d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d8a:	2307      	movs	r3, #7
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4619      	mov	r1, r3
 8000d94:	4805      	ldr	r0, [pc, #20]	; (8000dac <HAL_UART_MspInit+0x8c>)
 8000d96:	f000 fa37 	bl	8001208 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d9a:	bf00      	nop
 8000d9c:	3728      	adds	r7, #40	; 0x28
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40004400 	.word	0x40004400
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40020000 	.word	0x40020000

08000db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <NMI_Handler+0x4>

08000db6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <HardFault_Handler+0x4>

08000dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <MemManage_Handler+0x4>

08000dc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <BusFault_Handler+0x4>

08000dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <UsageFault_Handler+0x4>

08000dce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dfc:	f000 f8ae 	bl	8000f5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <TIM2_IRQHandler+0x10>)
 8000e0a:	f002 fcb5 	bl	8003778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000250 	.word	0x20000250

08000e18 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e1c:	4802      	ldr	r0, [pc, #8]	; (8000e28 <TIM3_IRQHandler+0x10>)
 8000e1e:	f002 fcab 	bl	8003778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000298 	.word	0x20000298

08000e2c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e30:	4802      	ldr	r0, [pc, #8]	; (8000e3c <OTG_FS_IRQHandler+0x10>)
 8000e32:	f000 fe1b 	bl	8001a6c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	2000081c 	.word	0x2000081c

08000e40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <SystemInit+0x20>)
 8000e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e4a:	4a05      	ldr	r2, [pc, #20]	; (8000e60 <SystemInit+0x20>)
 8000e4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e68:	480d      	ldr	r0, [pc, #52]	; (8000ea0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e6a:	490e      	ldr	r1, [pc, #56]	; (8000ea4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ea8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e70:	e002      	b.n	8000e78 <LoopCopyDataInit>

08000e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e76:	3304      	adds	r3, #4

08000e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e7c:	d3f9      	bcc.n	8000e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7e:	4a0b      	ldr	r2, [pc, #44]	; (8000eac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e80:	4c0b      	ldr	r4, [pc, #44]	; (8000eb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e84:	e001      	b.n	8000e8a <LoopFillZerobss>

08000e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e88:	3204      	adds	r2, #4

08000e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e8c:	d3fb      	bcc.n	8000e86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e8e:	f7ff ffd7 	bl	8000e40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e92:	f007 f913 	bl	80080bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e96:	f7ff fb21 	bl	80004dc <main>
  bx  lr    
 8000e9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea4:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8000ea8:	08008194 	.word	0x08008194
  ldr r2, =_sbss
 8000eac:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8000eb0:	20000d3c 	.word	0x20000d3c

08000eb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb4:	e7fe      	b.n	8000eb4 <ADC_IRQHandler>
	...

08000eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <HAL_Init+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	; (8000ef8 <HAL_Init+0x40>)
 8000ec2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <HAL_Init+0x40>)
 8000ece:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a07      	ldr	r2, [pc, #28]	; (8000ef8 <HAL_Init+0x40>)
 8000eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee0:	2003      	movs	r0, #3
 8000ee2:	f000 f94f 	bl	8001184 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee6:	200f      	movs	r0, #15
 8000ee8:	f000 f808 	bl	8000efc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eec:	f7ff fdb2 	bl	8000a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40023c00 	.word	0x40023c00

08000efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <HAL_InitTick+0x54>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <HAL_InitTick+0x58>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 f967 	bl	80011ee <HAL_SYSTICK_Config>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e00e      	b.n	8000f48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b0f      	cmp	r3, #15
 8000f2e:	d80a      	bhi.n	8000f46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f30:	2200      	movs	r2, #0
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295
 8000f38:	f000 f92f 	bl	800119a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f3c:	4a06      	ldr	r2, [pc, #24]	; (8000f58 <HAL_InitTick+0x5c>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f42:	2300      	movs	r3, #0
 8000f44:	e000      	b.n	8000f48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000000 	.word	0x20000000
 8000f54:	20000008 	.word	0x20000008
 8000f58:	20000004 	.word	0x20000004

08000f5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_IncTick+0x20>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_IncTick+0x24>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <HAL_IncTick+0x24>)
 8000f6e:	6013      	str	r3, [r2, #0]
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000008 	.word	0x20000008
 8000f80:	20000324 	.word	0x20000324

08000f84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return uwTick;
 8000f88:	4b03      	ldr	r3, [pc, #12]	; (8000f98 <HAL_GetTick+0x14>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000324 	.word	0x20000324

08000f9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa4:	f7ff ffee 	bl	8000f84 <HAL_GetTick>
 8000fa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb4:	d005      	beq.n	8000fc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <HAL_Delay+0x44>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fc2:	bf00      	nop
 8000fc4:	f7ff ffde 	bl	8000f84 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d8f7      	bhi.n	8000fc4 <HAL_Delay+0x28>
  {
  }
}
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000008 	.word	0x20000008

08000fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001000:	4013      	ands	r3, r2
 8001002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800100c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001016:	4a04      	ldr	r2, [pc, #16]	; (8001028 <__NVIC_SetPriorityGrouping+0x44>)
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	60d3      	str	r3, [r2, #12]
}
 800101c:	bf00      	nop
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <__NVIC_GetPriorityGrouping+0x18>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	0a1b      	lsrs	r3, r3, #8
 8001036:	f003 0307 	and.w	r3, r3, #7
}
 800103a:	4618      	mov	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	2b00      	cmp	r3, #0
 8001058:	db0b      	blt.n	8001072 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	f003 021f 	and.w	r2, r3, #31
 8001060:	4907      	ldr	r1, [pc, #28]	; (8001080 <__NVIC_EnableIRQ+0x38>)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	095b      	lsrs	r3, r3, #5
 8001068:	2001      	movs	r0, #1
 800106a:	fa00 f202 	lsl.w	r2, r0, r2
 800106e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000e100 	.word	0xe000e100

08001084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001094:	2b00      	cmp	r3, #0
 8001096:	db0a      	blt.n	80010ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	b2da      	uxtb	r2, r3
 800109c:	490c      	ldr	r1, [pc, #48]	; (80010d0 <__NVIC_SetPriority+0x4c>)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	0112      	lsls	r2, r2, #4
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	440b      	add	r3, r1
 80010a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ac:	e00a      	b.n	80010c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4908      	ldr	r1, [pc, #32]	; (80010d4 <__NVIC_SetPriority+0x50>)
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	f003 030f 	and.w	r3, r3, #15
 80010ba:	3b04      	subs	r3, #4
 80010bc:	0112      	lsls	r2, r2, #4
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	440b      	add	r3, r1
 80010c2:	761a      	strb	r2, [r3, #24]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000e100 	.word	0xe000e100
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d8:	b480      	push	{r7}
 80010da:	b089      	sub	sp, #36	; 0x24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f1c3 0307 	rsb	r3, r3, #7
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	bf28      	it	cs
 80010f6:	2304      	movcs	r3, #4
 80010f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3304      	adds	r3, #4
 80010fe:	2b06      	cmp	r3, #6
 8001100:	d902      	bls.n	8001108 <NVIC_EncodePriority+0x30>
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3b03      	subs	r3, #3
 8001106:	e000      	b.n	800110a <NVIC_EncodePriority+0x32>
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	f04f 32ff 	mov.w	r2, #4294967295
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43da      	mvns	r2, r3
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	401a      	ands	r2, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001120:	f04f 31ff 	mov.w	r1, #4294967295
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fa01 f303 	lsl.w	r3, r1, r3
 800112a:	43d9      	mvns	r1, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	4313      	orrs	r3, r2
         );
}
 8001132:	4618      	mov	r0, r3
 8001134:	3724      	adds	r7, #36	; 0x24
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
	...

08001140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001150:	d301      	bcc.n	8001156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001152:	2301      	movs	r3, #1
 8001154:	e00f      	b.n	8001176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001156:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <SysTick_Config+0x40>)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3b01      	subs	r3, #1
 800115c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800115e:	210f      	movs	r1, #15
 8001160:	f04f 30ff 	mov.w	r0, #4294967295
 8001164:	f7ff ff8e 	bl	8001084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <SysTick_Config+0x40>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116e:	4b04      	ldr	r3, [pc, #16]	; (8001180 <SysTick_Config+0x40>)
 8001170:	2207      	movs	r2, #7
 8001172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	e000e010 	.word	0xe000e010

08001184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff ff29 	bl	8000fe4 <__NVIC_SetPriorityGrouping>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800119a:	b580      	push	{r7, lr}
 800119c:	b086      	sub	sp, #24
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	60b9      	str	r1, [r7, #8]
 80011a4:	607a      	str	r2, [r7, #4]
 80011a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ac:	f7ff ff3e 	bl	800102c <__NVIC_GetPriorityGrouping>
 80011b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	68b9      	ldr	r1, [r7, #8]
 80011b6:	6978      	ldr	r0, [r7, #20]
 80011b8:	f7ff ff8e 	bl	80010d8 <NVIC_EncodePriority>
 80011bc:	4602      	mov	r2, r0
 80011be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c2:	4611      	mov	r1, r2
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff5d 	bl	8001084 <__NVIC_SetPriority>
}
 80011ca:	bf00      	nop
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	4603      	mov	r3, r0
 80011da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ff31 	bl	8001048 <__NVIC_EnableIRQ>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ffa2 	bl	8001140 <SysTick_Config>
 80011fc:	4603      	mov	r3, r0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001208:	b480      	push	{r7}
 800120a:	b089      	sub	sp, #36	; 0x24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800121a:	2300      	movs	r3, #0
 800121c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
 8001222:	e159      	b.n	80014d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001224:	2201      	movs	r2, #1
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	4013      	ands	r3, r2
 8001236:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	429a      	cmp	r2, r3
 800123e:	f040 8148 	bne.w	80014d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	2b01      	cmp	r3, #1
 800124c:	d005      	beq.n	800125a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001256:	2b02      	cmp	r3, #2
 8001258:	d130      	bne.n	80012bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	2203      	movs	r2, #3
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4013      	ands	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	68da      	ldr	r2, [r3, #12]
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4313      	orrs	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001290:	2201      	movs	r2, #1
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	091b      	lsrs	r3, r3, #4
 80012a6:	f003 0201 	and.w	r2, r3, #1
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 0303 	and.w	r3, r3, #3
 80012c4:	2b03      	cmp	r3, #3
 80012c6:	d017      	beq.n	80012f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	2203      	movs	r2, #3
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 0303 	and.w	r3, r3, #3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d123      	bne.n	800134c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	08da      	lsrs	r2, r3, #3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3208      	adds	r2, #8
 800130c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001310:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	f003 0307 	and.w	r3, r3, #7
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	220f      	movs	r2, #15
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	691a      	ldr	r2, [r3, #16]
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	08da      	lsrs	r2, r3, #3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3208      	adds	r2, #8
 8001346:	69b9      	ldr	r1, [r7, #24]
 8001348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	2203      	movs	r2, #3
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 0203 	and.w	r2, r3, #3
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 80a2 	beq.w	80014d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	4b57      	ldr	r3, [pc, #348]	; (80014f0 <HAL_GPIO_Init+0x2e8>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001396:	4a56      	ldr	r2, [pc, #344]	; (80014f0 <HAL_GPIO_Init+0x2e8>)
 8001398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800139c:	6453      	str	r3, [r2, #68]	; 0x44
 800139e:	4b54      	ldr	r3, [pc, #336]	; (80014f0 <HAL_GPIO_Init+0x2e8>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013aa:	4a52      	ldr	r2, [pc, #328]	; (80014f4 <HAL_GPIO_Init+0x2ec>)
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	089b      	lsrs	r3, r3, #2
 80013b0:	3302      	adds	r3, #2
 80013b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f003 0303 	and.w	r3, r3, #3
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	220f      	movs	r2, #15
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a49      	ldr	r2, [pc, #292]	; (80014f8 <HAL_GPIO_Init+0x2f0>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d019      	beq.n	800140a <HAL_GPIO_Init+0x202>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a48      	ldr	r2, [pc, #288]	; (80014fc <HAL_GPIO_Init+0x2f4>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d013      	beq.n	8001406 <HAL_GPIO_Init+0x1fe>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a47      	ldr	r2, [pc, #284]	; (8001500 <HAL_GPIO_Init+0x2f8>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d00d      	beq.n	8001402 <HAL_GPIO_Init+0x1fa>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a46      	ldr	r2, [pc, #280]	; (8001504 <HAL_GPIO_Init+0x2fc>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d007      	beq.n	80013fe <HAL_GPIO_Init+0x1f6>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a45      	ldr	r2, [pc, #276]	; (8001508 <HAL_GPIO_Init+0x300>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d101      	bne.n	80013fa <HAL_GPIO_Init+0x1f2>
 80013f6:	2304      	movs	r3, #4
 80013f8:	e008      	b.n	800140c <HAL_GPIO_Init+0x204>
 80013fa:	2307      	movs	r3, #7
 80013fc:	e006      	b.n	800140c <HAL_GPIO_Init+0x204>
 80013fe:	2303      	movs	r3, #3
 8001400:	e004      	b.n	800140c <HAL_GPIO_Init+0x204>
 8001402:	2302      	movs	r3, #2
 8001404:	e002      	b.n	800140c <HAL_GPIO_Init+0x204>
 8001406:	2301      	movs	r3, #1
 8001408:	e000      	b.n	800140c <HAL_GPIO_Init+0x204>
 800140a:	2300      	movs	r3, #0
 800140c:	69fa      	ldr	r2, [r7, #28]
 800140e:	f002 0203 	and.w	r2, r2, #3
 8001412:	0092      	lsls	r2, r2, #2
 8001414:	4093      	lsls	r3, r2
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4313      	orrs	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800141c:	4935      	ldr	r1, [pc, #212]	; (80014f4 <HAL_GPIO_Init+0x2ec>)
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	089b      	lsrs	r3, r3, #2
 8001422:	3302      	adds	r3, #2
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800142a:	4b38      	ldr	r3, [pc, #224]	; (800150c <HAL_GPIO_Init+0x304>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	43db      	mvns	r3, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4013      	ands	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800144e:	4a2f      	ldr	r2, [pc, #188]	; (800150c <HAL_GPIO_Init+0x304>)
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001454:	4b2d      	ldr	r3, [pc, #180]	; (800150c <HAL_GPIO_Init+0x304>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d003      	beq.n	8001478 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	4313      	orrs	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001478:	4a24      	ldr	r2, [pc, #144]	; (800150c <HAL_GPIO_Init+0x304>)
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800147e:	4b23      	ldr	r3, [pc, #140]	; (800150c <HAL_GPIO_Init+0x304>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	43db      	mvns	r3, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4013      	ands	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014a2:	4a1a      	ldr	r2, [pc, #104]	; (800150c <HAL_GPIO_Init+0x304>)
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014a8:	4b18      	ldr	r3, [pc, #96]	; (800150c <HAL_GPIO_Init+0x304>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d003      	beq.n	80014cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014cc:	4a0f      	ldr	r2, [pc, #60]	; (800150c <HAL_GPIO_Init+0x304>)
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	3301      	adds	r3, #1
 80014d6:	61fb      	str	r3, [r7, #28]
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	2b0f      	cmp	r3, #15
 80014dc:	f67f aea2 	bls.w	8001224 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	3724      	adds	r7, #36	; 0x24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40013800 	.word	0x40013800
 80014f8:	40020000 	.word	0x40020000
 80014fc:	40020400 	.word	0x40020400
 8001500:	40020800 	.word	0x40020800
 8001504:	40020c00 	.word	0x40020c00
 8001508:	40021000 	.word	0x40021000
 800150c:	40013c00 	.word	0x40013c00

08001510 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	807b      	strh	r3, [r7, #2]
 800151c:	4613      	mov	r3, r2
 800151e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001520:	787b      	ldrb	r3, [r7, #1]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001526:	887a      	ldrh	r2, [r7, #2]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800152c:	e003      	b.n	8001536 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800152e:	887b      	ldrh	r3, [r7, #2]
 8001530:	041a      	lsls	r2, r3, #16
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	619a      	str	r2, [r3, #24]
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
	...

08001544 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e12b      	b.n	80017ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	d106      	bne.n	8001570 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff fa9a 	bl	8000aa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2224      	movs	r2, #36	; 0x24
 8001574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 0201 	bic.w	r2, r2, #1
 8001586:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001596:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015a8:	f001 ffe6 	bl	8003578 <HAL_RCC_GetPCLK1Freq>
 80015ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	4a81      	ldr	r2, [pc, #516]	; (80017b8 <HAL_I2C_Init+0x274>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d807      	bhi.n	80015c8 <HAL_I2C_Init+0x84>
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4a80      	ldr	r2, [pc, #512]	; (80017bc <HAL_I2C_Init+0x278>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	bf94      	ite	ls
 80015c0:	2301      	movls	r3, #1
 80015c2:	2300      	movhi	r3, #0
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	e006      	b.n	80015d6 <HAL_I2C_Init+0x92>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4a7d      	ldr	r2, [pc, #500]	; (80017c0 <HAL_I2C_Init+0x27c>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	bf94      	ite	ls
 80015d0:	2301      	movls	r3, #1
 80015d2:	2300      	movhi	r3, #0
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e0e7      	b.n	80017ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4a78      	ldr	r2, [pc, #480]	; (80017c4 <HAL_I2C_Init+0x280>)
 80015e2:	fba2 2303 	umull	r2, r3, r2, r3
 80015e6:	0c9b      	lsrs	r3, r3, #18
 80015e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	68ba      	ldr	r2, [r7, #8]
 80015fa:	430a      	orrs	r2, r1
 80015fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6a1b      	ldr	r3, [r3, #32]
 8001604:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	4a6a      	ldr	r2, [pc, #424]	; (80017b8 <HAL_I2C_Init+0x274>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d802      	bhi.n	8001618 <HAL_I2C_Init+0xd4>
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	3301      	adds	r3, #1
 8001616:	e009      	b.n	800162c <HAL_I2C_Init+0xe8>
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800161e:	fb02 f303 	mul.w	r3, r2, r3
 8001622:	4a69      	ldr	r2, [pc, #420]	; (80017c8 <HAL_I2C_Init+0x284>)
 8001624:	fba2 2303 	umull	r2, r3, r2, r3
 8001628:	099b      	lsrs	r3, r3, #6
 800162a:	3301      	adds	r3, #1
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	6812      	ldr	r2, [r2, #0]
 8001630:	430b      	orrs	r3, r1
 8001632:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800163e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	495c      	ldr	r1, [pc, #368]	; (80017b8 <HAL_I2C_Init+0x274>)
 8001648:	428b      	cmp	r3, r1
 800164a:	d819      	bhi.n	8001680 <HAL_I2C_Init+0x13c>
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	1e59      	subs	r1, r3, #1
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	fbb1 f3f3 	udiv	r3, r1, r3
 800165a:	1c59      	adds	r1, r3, #1
 800165c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001660:	400b      	ands	r3, r1
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00a      	beq.n	800167c <HAL_I2C_Init+0x138>
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	1e59      	subs	r1, r3, #1
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	fbb1 f3f3 	udiv	r3, r1, r3
 8001674:	3301      	adds	r3, #1
 8001676:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800167a:	e051      	b.n	8001720 <HAL_I2C_Init+0x1dc>
 800167c:	2304      	movs	r3, #4
 800167e:	e04f      	b.n	8001720 <HAL_I2C_Init+0x1dc>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d111      	bne.n	80016ac <HAL_I2C_Init+0x168>
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	1e58      	subs	r0, r3, #1
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6859      	ldr	r1, [r3, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	440b      	add	r3, r1
 8001696:	fbb0 f3f3 	udiv	r3, r0, r3
 800169a:	3301      	adds	r3, #1
 800169c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	bf0c      	ite	eq
 80016a4:	2301      	moveq	r3, #1
 80016a6:	2300      	movne	r3, #0
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	e012      	b.n	80016d2 <HAL_I2C_Init+0x18e>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1e58      	subs	r0, r3, #1
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6859      	ldr	r1, [r3, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	440b      	add	r3, r1
 80016ba:	0099      	lsls	r1, r3, #2
 80016bc:	440b      	add	r3, r1
 80016be:	fbb0 f3f3 	udiv	r3, r0, r3
 80016c2:	3301      	adds	r3, #1
 80016c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	bf0c      	ite	eq
 80016cc:	2301      	moveq	r3, #1
 80016ce:	2300      	movne	r3, #0
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_I2C_Init+0x196>
 80016d6:	2301      	movs	r3, #1
 80016d8:	e022      	b.n	8001720 <HAL_I2C_Init+0x1dc>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10e      	bne.n	8001700 <HAL_I2C_Init+0x1bc>
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	1e58      	subs	r0, r3, #1
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6859      	ldr	r1, [r3, #4]
 80016ea:	460b      	mov	r3, r1
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	440b      	add	r3, r1
 80016f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80016f4:	3301      	adds	r3, #1
 80016f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016fe:	e00f      	b.n	8001720 <HAL_I2C_Init+0x1dc>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	1e58      	subs	r0, r3, #1
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6859      	ldr	r1, [r3, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	440b      	add	r3, r1
 800170e:	0099      	lsls	r1, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	fbb0 f3f3 	udiv	r3, r0, r3
 8001716:	3301      	adds	r3, #1
 8001718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800171c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	6809      	ldr	r1, [r1, #0]
 8001724:	4313      	orrs	r3, r2
 8001726:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69da      	ldr	r2, [r3, #28]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800174e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6911      	ldr	r1, [r2, #16]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	68d2      	ldr	r2, [r2, #12]
 800175a:	4311      	orrs	r1, r2
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	6812      	ldr	r2, [r2, #0]
 8001760:	430b      	orrs	r3, r1
 8001762:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	695a      	ldr	r2, [r3, #20]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	431a      	orrs	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f042 0201 	orr.w	r2, r2, #1
 800178e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2220      	movs	r2, #32
 800179a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	000186a0 	.word	0x000186a0
 80017bc:	001e847f 	.word	0x001e847f
 80017c0:	003d08ff 	.word	0x003d08ff
 80017c4:	431bde83 	.word	0x431bde83
 80017c8:	10624dd3 	.word	0x10624dd3

080017cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ce:	b08f      	sub	sp, #60	; 0x3c
 80017d0:	af0a      	add	r7, sp, #40	; 0x28
 80017d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e10f      	b.n	80019fe <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d106      	bne.n	80017fe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f006 f967 	bl	8007acc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2203      	movs	r2, #3
 8001802:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800180a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180e:	2b00      	cmp	r3, #0
 8001810:	d102      	bne.n	8001818 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f002 ff20 	bl	8004662 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	603b      	str	r3, [r7, #0]
 8001828:	687e      	ldr	r6, [r7, #4]
 800182a:	466d      	mov	r5, sp
 800182c:	f106 0410 	add.w	r4, r6, #16
 8001830:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001832:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001834:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001836:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001838:	e894 0003 	ldmia.w	r4, {r0, r1}
 800183c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001840:	1d33      	adds	r3, r6, #4
 8001842:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001844:	6838      	ldr	r0, [r7, #0]
 8001846:	f002 fdf7 	bl	8004438 <USB_CoreInit>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d005      	beq.n	800185c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2202      	movs	r2, #2
 8001854:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e0d0      	b.n	80019fe <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2100      	movs	r1, #0
 8001862:	4618      	mov	r0, r3
 8001864:	f002 ff0e 	bl	8004684 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001868:	2300      	movs	r3, #0
 800186a:	73fb      	strb	r3, [r7, #15]
 800186c:	e04a      	b.n	8001904 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800186e:	7bfa      	ldrb	r2, [r7, #15]
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	4413      	add	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	440b      	add	r3, r1
 800187c:	333d      	adds	r3, #61	; 0x3d
 800187e:	2201      	movs	r2, #1
 8001880:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001882:	7bfa      	ldrb	r2, [r7, #15]
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	4413      	add	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	440b      	add	r3, r1
 8001890:	333c      	adds	r3, #60	; 0x3c
 8001892:	7bfa      	ldrb	r2, [r7, #15]
 8001894:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001896:	7bfa      	ldrb	r2, [r7, #15]
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	b298      	uxth	r0, r3
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	4413      	add	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	440b      	add	r3, r1
 80018a8:	3344      	adds	r3, #68	; 0x44
 80018aa:	4602      	mov	r2, r0
 80018ac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018ae:	7bfa      	ldrb	r2, [r7, #15]
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	4613      	mov	r3, r2
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	4413      	add	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	440b      	add	r3, r1
 80018bc:	3340      	adds	r3, #64	; 0x40
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018c2:	7bfa      	ldrb	r2, [r7, #15]
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	4613      	mov	r3, r2
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	4413      	add	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	440b      	add	r3, r1
 80018d0:	3348      	adds	r3, #72	; 0x48
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018d6:	7bfa      	ldrb	r2, [r7, #15]
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	4613      	mov	r3, r2
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	4413      	add	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	440b      	add	r3, r1
 80018e4:	334c      	adds	r3, #76	; 0x4c
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018ea:	7bfa      	ldrb	r2, [r7, #15]
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	4413      	add	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	440b      	add	r3, r1
 80018f8:	3354      	adds	r3, #84	; 0x54
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018fe:	7bfb      	ldrb	r3, [r7, #15]
 8001900:	3301      	adds	r3, #1
 8001902:	73fb      	strb	r3, [r7, #15]
 8001904:	7bfa      	ldrb	r2, [r7, #15]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	429a      	cmp	r2, r3
 800190c:	d3af      	bcc.n	800186e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800190e:	2300      	movs	r3, #0
 8001910:	73fb      	strb	r3, [r7, #15]
 8001912:	e044      	b.n	800199e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001914:	7bfa      	ldrb	r2, [r7, #15]
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	4413      	add	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800192a:	7bfa      	ldrb	r2, [r7, #15]
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	4413      	add	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	440b      	add	r3, r1
 8001938:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800193c:	7bfa      	ldrb	r2, [r7, #15]
 800193e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001940:	7bfa      	ldrb	r2, [r7, #15]
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	4413      	add	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001956:	7bfa      	ldrb	r2, [r7, #15]
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	4413      	add	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	440b      	add	r3, r1
 8001964:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800196c:	7bfa      	ldrb	r2, [r7, #15]
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	4613      	mov	r3, r2
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	4413      	add	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001982:	7bfa      	ldrb	r2, [r7, #15]
 8001984:	6879      	ldr	r1, [r7, #4]
 8001986:	4613      	mov	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	4413      	add	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	440b      	add	r3, r1
 8001990:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001998:	7bfb      	ldrb	r3, [r7, #15]
 800199a:	3301      	adds	r3, #1
 800199c:	73fb      	strb	r3, [r7, #15]
 800199e:	7bfa      	ldrb	r2, [r7, #15]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d3b5      	bcc.n	8001914 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	603b      	str	r3, [r7, #0]
 80019ae:	687e      	ldr	r6, [r7, #4]
 80019b0:	466d      	mov	r5, sp
 80019b2:	f106 0410 	add.w	r4, r6, #16
 80019b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80019c6:	1d33      	adds	r3, r6, #4
 80019c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019ca:	6838      	ldr	r0, [r7, #0]
 80019cc:	f002 fea6 	bl	800471c <USB_DevInit>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d005      	beq.n	80019e2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2202      	movs	r2, #2
 80019da:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e00d      	b.n	80019fe <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f003 fff5 	bl	80059e6 <USB_DevDisconnect>

  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a06 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b084      	sub	sp, #16
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d101      	bne.n	8001a22 <HAL_PCD_Start+0x1c>
 8001a1e:	2302      	movs	r3, #2
 8001a20:	e020      	b.n	8001a64 <HAL_PCD_Start+0x5e>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d109      	bne.n	8001a46 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d005      	beq.n	8001a46 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f002 fdf8 	bl	8004640 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f003 ffa5 	bl	80059a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a6c:	b590      	push	{r4, r7, lr}
 8001a6e:	b08d      	sub	sp, #52	; 0x34
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a7a:	6a3b      	ldr	r3, [r7, #32]
 8001a7c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f004 f863 	bl	8005b4e <USB_GetMode>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f040 848a 	bne.w	80023a4 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f003 ffc7 	bl	8005a28 <USB_ReadInterrupts>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 8480 	beq.w	80023a2 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	0a1b      	lsrs	r3, r3, #8
 8001aac:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f003 ffb4 	bl	8005a28 <USB_ReadInterrupts>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d107      	bne.n	8001ada <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	695a      	ldr	r2, [r3, #20]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f002 0202 	and.w	r2, r2, #2
 8001ad8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f003 ffa2 	bl	8005a28 <USB_ReadInterrupts>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	f003 0310 	and.w	r3, r3, #16
 8001aea:	2b10      	cmp	r3, #16
 8001aec:	d161      	bne.n	8001bb2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	699a      	ldr	r2, [r3, #24]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 0210 	bic.w	r2, r2, #16
 8001afc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001afe:	6a3b      	ldr	r3, [r7, #32]
 8001b00:	6a1b      	ldr	r3, [r3, #32]
 8001b02:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	f003 020f 	and.w	r2, r3, #15
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	4413      	add	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	4413      	add	r3, r2
 8001b1a:	3304      	adds	r3, #4
 8001b1c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	0c5b      	lsrs	r3, r3, #17
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d124      	bne.n	8001b74 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001b30:	4013      	ands	r3, r2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d035      	beq.n	8001ba2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	091b      	lsrs	r3, r3, #4
 8001b3e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	461a      	mov	r2, r3
 8001b48:	6a38      	ldr	r0, [r7, #32]
 8001b4a:	f003 fdd9 	bl	8005700 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	691a      	ldr	r2, [r3, #16]
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	091b      	lsrs	r3, r3, #4
 8001b56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b5a:	441a      	add	r2, r3
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	6a1a      	ldr	r2, [r3, #32]
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	091b      	lsrs	r3, r3, #4
 8001b68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b6c:	441a      	add	r2, r3
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	621a      	str	r2, [r3, #32]
 8001b72:	e016      	b.n	8001ba2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	0c5b      	lsrs	r3, r3, #17
 8001b78:	f003 030f 	and.w	r3, r3, #15
 8001b7c:	2b06      	cmp	r3, #6
 8001b7e:	d110      	bne.n	8001ba2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001b86:	2208      	movs	r2, #8
 8001b88:	4619      	mov	r1, r3
 8001b8a:	6a38      	ldr	r0, [r7, #32]
 8001b8c:	f003 fdb8 	bl	8005700 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	6a1a      	ldr	r2, [r3, #32]
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	091b      	lsrs	r3, r3, #4
 8001b98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b9c:	441a      	add	r2, r3
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	699a      	ldr	r2, [r3, #24]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f042 0210 	orr.w	r2, r2, #16
 8001bb0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f003 ff36 	bl	8005a28 <USB_ReadInterrupts>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bc2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001bc6:	f040 80a7 	bne.w	8001d18 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f003 ff3b 	bl	8005a4e <USB_ReadDevAllOutEpInterrupt>
 8001bd8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001bda:	e099      	b.n	8001d10 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 808e 	beq.w	8001d04 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f003 ff5f 	bl	8005ab6 <USB_ReadDevOutEPInterrupt>
 8001bf8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d00c      	beq.n	8001c1e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	015a      	lsls	r2, r3, #5
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c10:	461a      	mov	r2, r3
 8001c12:	2301      	movs	r3, #1
 8001c14:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001c16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 feab 	bl	8002974 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	f003 0308 	and.w	r3, r3, #8
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d00c      	beq.n	8001c42 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	015a      	lsls	r2, r3, #5
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	4413      	add	r3, r2
 8001c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c34:	461a      	mov	r2, r3
 8001c36:	2308      	movs	r3, #8
 8001c38:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001c3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 ff81 	bl	8002b44 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	f003 0310 	and.w	r3, r3, #16
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d008      	beq.n	8001c5e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	015a      	lsls	r2, r3, #5
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	4413      	add	r3, r2
 8001c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c58:	461a      	mov	r2, r3
 8001c5a:	2310      	movs	r3, #16
 8001c5c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d030      	beq.n	8001cca <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001c68:	6a3b      	ldr	r3, [r7, #32]
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c70:	2b80      	cmp	r3, #128	; 0x80
 8001c72:	d109      	bne.n	8001c88 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	69fa      	ldr	r2, [r7, #28]
 8001c7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c86:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	4413      	add	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	3304      	adds	r3, #4
 8001c9c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	78db      	ldrb	r3, [r3, #3]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d108      	bne.n	8001cb8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f006 f806 	bl	8007cc4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	015a      	lsls	r2, r3, #5
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	f003 0320 	and.w	r3, r3, #32
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d008      	beq.n	8001ce6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	015a      	lsls	r2, r3, #5
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	4413      	add	r3, r2
 8001cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	2320      	movs	r3, #32
 8001ce4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d009      	beq.n	8001d04 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	015a      	lsls	r2, r3, #5
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d02:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	3301      	adds	r3, #1
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d0c:	085b      	lsrs	r3, r3, #1
 8001d0e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f47f af62 	bne.w	8001bdc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f003 fe83 	bl	8005a28 <USB_ReadInterrupts>
 8001d22:	4603      	mov	r3, r0
 8001d24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d2c:	f040 80db 	bne.w	8001ee6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f003 fea4 	bl	8005a82 <USB_ReadDevAllInEpInterrupt>
 8001d3a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001d40:	e0cd      	b.n	8001ede <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f000 80c2 	beq.w	8001ed2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	4611      	mov	r1, r2
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f003 feca 	bl	8005af2 <USB_ReadDevInEPInterrupt>
 8001d5e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d057      	beq.n	8001e1a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	f003 030f 	and.w	r3, r3, #15
 8001d70:	2201      	movs	r2, #1
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69f9      	ldr	r1, [r7, #28]
 8001d86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	015a      	lsls	r2, r3, #5
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	4413      	add	r3, r2
 8001d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d132      	bne.n	8001e0e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dac:	4613      	mov	r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	4413      	add	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	334c      	adds	r3, #76	; 0x4c
 8001db8:	6819      	ldr	r1, [r3, #0]
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4403      	add	r3, r0
 8001dc8:	3348      	adds	r3, #72	; 0x48
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4419      	add	r1, r3
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4403      	add	r3, r0
 8001ddc:	334c      	adds	r3, #76	; 0x4c
 8001dde:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d113      	bne.n	8001e0e <HAL_PCD_IRQHandler+0x3a2>
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dea:	4613      	mov	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4413      	add	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	440b      	add	r3, r1
 8001df4:	3354      	adds	r3, #84	; 0x54
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d108      	bne.n	8001e0e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6818      	ldr	r0, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001e06:	461a      	mov	r2, r3
 8001e08:	2101      	movs	r1, #1
 8001e0a:	f003 fed1 	bl	8005bb0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	4619      	mov	r1, r3
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f005 feda 	bl	8007bce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	f003 0308 	and.w	r3, r3, #8
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d008      	beq.n	8001e36 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	015a      	lsls	r2, r3, #5
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e30:	461a      	mov	r2, r3
 8001e32:	2308      	movs	r3, #8
 8001e34:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	f003 0310 	and.w	r3, r3, #16
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d008      	beq.n	8001e52 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	015a      	lsls	r2, r3, #5
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	4413      	add	r3, r2
 8001e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	2310      	movs	r3, #16
 8001e50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d008      	beq.n	8001e6e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	015a      	lsls	r2, r3, #5
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	4413      	add	r3, r2
 8001e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e68:	461a      	mov	r2, r3
 8001e6a:	2340      	movs	r3, #64	; 0x40
 8001e6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d023      	beq.n	8001ec0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001e78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e7a:	6a38      	ldr	r0, [r7, #32]
 8001e7c:	f002 fdb2 	bl	80049e4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e82:	4613      	mov	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	4413      	add	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	3338      	adds	r3, #56	; 0x38
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	4413      	add	r3, r2
 8001e90:	3304      	adds	r3, #4
 8001e92:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	78db      	ldrb	r3, [r3, #3]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d108      	bne.n	8001eae <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f005 ff1d 	bl	8007ce8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	015a      	lsls	r2, r3, #5
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001eba:	461a      	mov	r2, r3
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001eca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 fcc3 	bl	8002858 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eda:	085b      	lsrs	r3, r3, #1
 8001edc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f47f af2e 	bne.w	8001d42 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f003 fd9c 	bl	8005a28 <USB_ReadInterrupts>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001ef6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001efa:	d122      	bne.n	8001f42 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	69fa      	ldr	r2, [r7, #28]
 8001f06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f0a:	f023 0301 	bic.w	r3, r3, #1
 8001f0e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d108      	bne.n	8001f2c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f22:	2100      	movs	r1, #0
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 feab 	bl	8002c80 <HAL_PCDEx_LPM_Callback>
 8001f2a:	e002      	b.n	8001f32 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f005 febb 	bl	8007ca8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	695a      	ldr	r2, [r3, #20]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001f40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f003 fd6e 	bl	8005a28 <USB_ReadInterrupts>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f56:	d112      	bne.n	8001f7e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d102      	bne.n	8001f6e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f005 fe77 	bl	8007c5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	695a      	ldr	r2, [r3, #20]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001f7c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f003 fd50 	bl	8005a28 <USB_ReadInterrupts>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f92:	f040 80b7 	bne.w	8002104 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	69fa      	ldr	r2, [r7, #28]
 8001fa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fa4:	f023 0301 	bic.w	r3, r3, #1
 8001fa8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2110      	movs	r1, #16
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f002 fd17 	bl	80049e4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fba:	e046      	b.n	800204a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fbe:	015a      	lsls	r2, r3, #5
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fc8:	461a      	mov	r2, r3
 8001fca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001fce:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd2:	015a      	lsls	r2, r3, #5
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fe0:	0151      	lsls	r1, r2, #5
 8001fe2:	69fa      	ldr	r2, [r7, #28]
 8001fe4:	440a      	add	r2, r1
 8001fe6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001fea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001fee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff2:	015a      	lsls	r2, r3, #5
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002002:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002006:	015a      	lsls	r2, r3, #5
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	4413      	add	r3, r2
 800200c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002014:	0151      	lsls	r1, r2, #5
 8002016:	69fa      	ldr	r2, [r7, #28]
 8002018:	440a      	add	r2, r1
 800201a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800201e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002022:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002026:	015a      	lsls	r2, r3, #5
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	4413      	add	r3, r2
 800202c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002034:	0151      	lsls	r1, r2, #5
 8002036:	69fa      	ldr	r2, [r7, #28]
 8002038:	440a      	add	r2, r1
 800203a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800203e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002042:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002046:	3301      	adds	r3, #1
 8002048:	62fb      	str	r3, [r7, #44]	; 0x2c
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002050:	429a      	cmp	r2, r3
 8002052:	d3b3      	bcc.n	8001fbc <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800205a:	69db      	ldr	r3, [r3, #28]
 800205c:	69fa      	ldr	r2, [r7, #28]
 800205e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002062:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002066:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206c:	2b00      	cmp	r3, #0
 800206e:	d016      	beq.n	800209e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002076:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800207a:	69fa      	ldr	r2, [r7, #28]
 800207c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002080:	f043 030b 	orr.w	r3, r3, #11
 8002084:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800208e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002090:	69fa      	ldr	r2, [r7, #28]
 8002092:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002096:	f043 030b 	orr.w	r3, r3, #11
 800209a:	6453      	str	r3, [r2, #68]	; 0x44
 800209c:	e015      	b.n	80020ca <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	69fa      	ldr	r2, [r7, #28]
 80020a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020b0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80020b4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	69fa      	ldr	r2, [r7, #28]
 80020c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020c4:	f043 030b 	orr.w	r3, r3, #11
 80020c8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	69fa      	ldr	r2, [r7, #28]
 80020d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020d8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80020dc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6818      	ldr	r0, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80020ee:	461a      	mov	r2, r3
 80020f0:	f003 fd5e 	bl	8005bb0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	695a      	ldr	r2, [r3, #20]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002102:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f003 fc8d 	bl	8005a28 <USB_ReadInterrupts>
 800210e:	4603      	mov	r3, r0
 8002110:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002114:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002118:	d124      	bne.n	8002164 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f003 fd23 	bl	8005b6a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f002 fcd8 	bl	8004ade <USB_GetDevSpeed>
 800212e:	4603      	mov	r3, r0
 8002130:	461a      	mov	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681c      	ldr	r4, [r3, #0]
 800213a:	f001 fa11 	bl	8003560 <HAL_RCC_GetHCLKFreq>
 800213e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002144:	b2db      	uxtb	r3, r3
 8002146:	461a      	mov	r2, r3
 8002148:	4620      	mov	r0, r4
 800214a:	f002 f9d7 	bl	80044fc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f005 fd65 	bl	8007c1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	695a      	ldr	r2, [r3, #20]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002162:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f003 fc5d 	bl	8005a28 <USB_ReadInterrupts>
 800216e:	4603      	mov	r3, r0
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	2b08      	cmp	r3, #8
 8002176:	d10a      	bne.n	800218e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f005 fd42 	bl	8007c02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	695a      	ldr	r2, [r3, #20]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f002 0208 	and.w	r2, r2, #8
 800218c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f003 fc48 	bl	8005a28 <USB_ReadInterrupts>
 8002198:	4603      	mov	r3, r0
 800219a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219e:	2b80      	cmp	r3, #128	; 0x80
 80021a0:	d122      	bne.n	80021e8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80021a2:	6a3b      	ldr	r3, [r7, #32]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021ae:	2301      	movs	r3, #1
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
 80021b2:	e014      	b.n	80021de <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b8:	4613      	mov	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	4413      	add	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d105      	bne.n	80021d8 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	4619      	mov	r1, r3
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 fb0f 	bl	80027f6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	3301      	adds	r3, #1
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d3e5      	bcc.n	80021b4 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f003 fc1b 	bl	8005a28 <USB_ReadInterrupts>
 80021f2:	4603      	mov	r3, r0
 80021f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021fc:	d13b      	bne.n	8002276 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021fe:	2301      	movs	r3, #1
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
 8002202:	e02b      	b.n	800225c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	015a      	lsls	r2, r3, #5
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	4413      	add	r3, r2
 800220c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002218:	4613      	mov	r3, r2
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	4413      	add	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	3340      	adds	r3, #64	; 0x40
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d115      	bne.n	8002256 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800222a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800222c:	2b00      	cmp	r3, #0
 800222e:	da12      	bge.n	8002256 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002234:	4613      	mov	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	4413      	add	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	333f      	adds	r3, #63	; 0x3f
 8002240:	2201      	movs	r2, #1
 8002242:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	b2db      	uxtb	r3, r3
 8002248:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800224c:	b2db      	uxtb	r3, r3
 800224e:	4619      	mov	r1, r3
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 fad0 	bl	80027f6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	3301      	adds	r3, #1
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002262:	429a      	cmp	r2, r3
 8002264:	d3ce      	bcc.n	8002204 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	695a      	ldr	r2, [r3, #20]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002274:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f003 fbd4 	bl	8005a28 <USB_ReadInterrupts>
 8002280:	4603      	mov	r3, r0
 8002282:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002286:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800228a:	d155      	bne.n	8002338 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800228c:	2301      	movs	r3, #1
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
 8002290:	e045      	b.n	800231e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	015a      	lsls	r2, r3, #5
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	4413      	add	r3, r2
 800229a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a6:	4613      	mov	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4413      	add	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	440b      	add	r3, r1
 80022b0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d12e      	bne.n	8002318 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80022ba:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80022bc:	2b00      	cmp	r3, #0
 80022be:	da2b      	bge.n	8002318 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80022cc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d121      	bne.n	8002318 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d8:	4613      	mov	r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	4413      	add	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	440b      	add	r3, r1
 80022e2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80022e6:	2201      	movs	r2, #1
 80022e8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80022ea:	6a3b      	ldr	r3, [r7, #32]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80022f6:	6a3b      	ldr	r3, [r7, #32]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10a      	bne.n	8002318 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	69fa      	ldr	r2, [r7, #28]
 800230c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002310:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002314:	6053      	str	r3, [r2, #4]
            break;
 8002316:	e007      	b.n	8002328 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	3301      	adds	r3, #1
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002324:	429a      	cmp	r2, r3
 8002326:	d3b4      	bcc.n	8002292 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	695a      	ldr	r2, [r3, #20]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002336:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f003 fb73 	bl	8005a28 <USB_ReadInterrupts>
 8002342:	4603      	mov	r3, r0
 8002344:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800234c:	d10a      	bne.n	8002364 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f005 fcdc 	bl	8007d0c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	695a      	ldr	r2, [r3, #20]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002362:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f003 fb5d 	bl	8005a28 <USB_ReadInterrupts>
 800236e:	4603      	mov	r3, r0
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b04      	cmp	r3, #4
 8002376:	d115      	bne.n	80023a4 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	f003 0304 	and.w	r3, r3, #4
 8002386:	2b00      	cmp	r3, #0
 8002388:	d002      	beq.n	8002390 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f005 fccc 	bl	8007d28 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6859      	ldr	r1, [r3, #4]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	430a      	orrs	r2, r1
 800239e:	605a      	str	r2, [r3, #4]
 80023a0:	e000      	b.n	80023a4 <HAL_PCD_IRQHandler+0x938>
      return;
 80023a2:	bf00      	nop
    }
  }
}
 80023a4:	3734      	adds	r7, #52	; 0x34
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd90      	pop	{r4, r7, pc}

080023aa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
 80023b2:	460b      	mov	r3, r1
 80023b4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d101      	bne.n	80023c4 <HAL_PCD_SetAddress+0x1a>
 80023c0:	2302      	movs	r3, #2
 80023c2:	e013      	b.n	80023ec <HAL_PCD_SetAddress+0x42>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	78fa      	ldrb	r2, [r7, #3]
 80023d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	78fa      	ldrb	r2, [r7, #3]
 80023da:	4611      	mov	r1, r2
 80023dc:	4618      	mov	r0, r3
 80023de:	f003 fabb 	bl	8005958 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	4608      	mov	r0, r1
 80023fe:	4611      	mov	r1, r2
 8002400:	461a      	mov	r2, r3
 8002402:	4603      	mov	r3, r0
 8002404:	70fb      	strb	r3, [r7, #3]
 8002406:	460b      	mov	r3, r1
 8002408:	803b      	strh	r3, [r7, #0]
 800240a:	4613      	mov	r3, r2
 800240c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800240e:	2300      	movs	r3, #0
 8002410:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002412:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002416:	2b00      	cmp	r3, #0
 8002418:	da0f      	bge.n	800243a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800241a:	78fb      	ldrb	r3, [r7, #3]
 800241c:	f003 020f 	and.w	r2, r3, #15
 8002420:	4613      	mov	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	4413      	add	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	3338      	adds	r3, #56	; 0x38
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	4413      	add	r3, r2
 800242e:	3304      	adds	r3, #4
 8002430:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2201      	movs	r2, #1
 8002436:	705a      	strb	r2, [r3, #1]
 8002438:	e00f      	b.n	800245a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800243a:	78fb      	ldrb	r3, [r7, #3]
 800243c:	f003 020f 	and.w	r2, r3, #15
 8002440:	4613      	mov	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4413      	add	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	4413      	add	r3, r2
 8002450:	3304      	adds	r3, #4
 8002452:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800245a:	78fb      	ldrb	r3, [r7, #3]
 800245c:	f003 030f 	and.w	r3, r3, #15
 8002460:	b2da      	uxtb	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002466:	883a      	ldrh	r2, [r7, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	78ba      	ldrb	r2, [r7, #2]
 8002470:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	785b      	ldrb	r3, [r3, #1]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d004      	beq.n	8002484 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	b29a      	uxth	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002484:	78bb      	ldrb	r3, [r7, #2]
 8002486:	2b02      	cmp	r3, #2
 8002488:	d102      	bne.n	8002490 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002496:	2b01      	cmp	r3, #1
 8002498:	d101      	bne.n	800249e <HAL_PCD_EP_Open+0xaa>
 800249a:	2302      	movs	r3, #2
 800249c:	e00e      	b.n	80024bc <HAL_PCD_EP_Open+0xc8>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68f9      	ldr	r1, [r7, #12]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f002 fb3b 	bl	8004b28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80024ba:	7afb      	ldrb	r3, [r7, #11]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80024d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	da0f      	bge.n	80024f8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024d8:	78fb      	ldrb	r3, [r7, #3]
 80024da:	f003 020f 	and.w	r2, r3, #15
 80024de:	4613      	mov	r3, r2
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4413      	add	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	3338      	adds	r3, #56	; 0x38
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	4413      	add	r3, r2
 80024ec:	3304      	adds	r3, #4
 80024ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2201      	movs	r2, #1
 80024f4:	705a      	strb	r2, [r3, #1]
 80024f6:	e00f      	b.n	8002518 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024f8:	78fb      	ldrb	r3, [r7, #3]
 80024fa:	f003 020f 	and.w	r2, r3, #15
 80024fe:	4613      	mov	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	4413      	add	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	4413      	add	r3, r2
 800250e:	3304      	adds	r3, #4
 8002510:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002518:	78fb      	ldrb	r3, [r7, #3]
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	b2da      	uxtb	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800252a:	2b01      	cmp	r3, #1
 800252c:	d101      	bne.n	8002532 <HAL_PCD_EP_Close+0x6e>
 800252e:	2302      	movs	r3, #2
 8002530:	e00e      	b.n	8002550 <HAL_PCD_EP_Close+0x8c>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68f9      	ldr	r1, [r7, #12]
 8002540:	4618      	mov	r0, r3
 8002542:	f002 fb79 	bl	8004c38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	607a      	str	r2, [r7, #4]
 8002562:	603b      	str	r3, [r7, #0]
 8002564:	460b      	mov	r3, r1
 8002566:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002568:	7afb      	ldrb	r3, [r7, #11]
 800256a:	f003 020f 	and.w	r2, r3, #15
 800256e:	4613      	mov	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	4413      	add	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	4413      	add	r3, r2
 800257e:	3304      	adds	r3, #4
 8002580:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	2200      	movs	r2, #0
 8002592:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	2200      	movs	r2, #0
 8002598:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800259a:	7afb      	ldrb	r3, [r7, #11]
 800259c:	f003 030f 	and.w	r3, r3, #15
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d102      	bne.n	80025b4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025b4:	7afb      	ldrb	r3, [r7, #11]
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d109      	bne.n	80025d2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6818      	ldr	r0, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	461a      	mov	r2, r3
 80025ca:	6979      	ldr	r1, [r7, #20]
 80025cc:	f002 fe58 	bl	8005280 <USB_EP0StartXfer>
 80025d0:	e008      	b.n	80025e4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	461a      	mov	r2, r3
 80025de:	6979      	ldr	r1, [r7, #20]
 80025e0:	f002 fc06 	bl	8004df0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b086      	sub	sp, #24
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	60f8      	str	r0, [r7, #12]
 80025f6:	607a      	str	r2, [r7, #4]
 80025f8:	603b      	str	r3, [r7, #0]
 80025fa:	460b      	mov	r3, r1
 80025fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025fe:	7afb      	ldrb	r3, [r7, #11]
 8002600:	f003 020f 	and.w	r2, r3, #15
 8002604:	4613      	mov	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4413      	add	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	3338      	adds	r3, #56	; 0x38
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	4413      	add	r3, r2
 8002612:	3304      	adds	r3, #4
 8002614:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	2200      	movs	r2, #0
 8002626:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	2201      	movs	r2, #1
 800262c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800262e:	7afb      	ldrb	r3, [r7, #11]
 8002630:	f003 030f 	and.w	r3, r3, #15
 8002634:	b2da      	uxtb	r2, r3
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d102      	bne.n	8002648 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002648:	7afb      	ldrb	r3, [r7, #11]
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	2b00      	cmp	r3, #0
 8002650:	d109      	bne.n	8002666 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	b2db      	uxtb	r3, r3
 800265c:	461a      	mov	r2, r3
 800265e:	6979      	ldr	r1, [r7, #20]
 8002660:	f002 fe0e 	bl	8005280 <USB_EP0StartXfer>
 8002664:	e008      	b.n	8002678 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	b2db      	uxtb	r3, r3
 8002670:	461a      	mov	r2, r3
 8002672:	6979      	ldr	r1, [r7, #20]
 8002674:	f002 fbbc 	bl	8004df0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b084      	sub	sp, #16
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
 800268a:	460b      	mov	r3, r1
 800268c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800268e:	78fb      	ldrb	r3, [r7, #3]
 8002690:	f003 020f 	and.w	r2, r3, #15
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	429a      	cmp	r2, r3
 800269a:	d901      	bls.n	80026a0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e050      	b.n	8002742 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	da0f      	bge.n	80026c8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026a8:	78fb      	ldrb	r3, [r7, #3]
 80026aa:	f003 020f 	and.w	r2, r3, #15
 80026ae:	4613      	mov	r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	4413      	add	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	3338      	adds	r3, #56	; 0x38
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	4413      	add	r3, r2
 80026bc:	3304      	adds	r3, #4
 80026be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2201      	movs	r2, #1
 80026c4:	705a      	strb	r2, [r3, #1]
 80026c6:	e00d      	b.n	80026e4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026c8:	78fa      	ldrb	r2, [r7, #3]
 80026ca:	4613      	mov	r3, r2
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	4413      	add	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	4413      	add	r3, r2
 80026da:	3304      	adds	r3, #4
 80026dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2201      	movs	r2, #1
 80026e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026ea:	78fb      	ldrb	r3, [r7, #3]
 80026ec:	f003 030f 	and.w	r3, r3, #15
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <HAL_PCD_EP_SetStall+0x82>
 8002700:	2302      	movs	r3, #2
 8002702:	e01e      	b.n	8002742 <HAL_PCD_EP_SetStall+0xc0>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68f9      	ldr	r1, [r7, #12]
 8002712:	4618      	mov	r0, r3
 8002714:	f003 f84c 	bl	80057b0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002718:	78fb      	ldrb	r3, [r7, #3]
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10a      	bne.n	8002738 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6818      	ldr	r0, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	b2d9      	uxtb	r1, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002732:	461a      	mov	r2, r3
 8002734:	f003 fa3c 	bl	8005bb0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b084      	sub	sp, #16
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
 8002752:	460b      	mov	r3, r1
 8002754:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002756:	78fb      	ldrb	r3, [r7, #3]
 8002758:	f003 020f 	and.w	r2, r3, #15
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	429a      	cmp	r2, r3
 8002762:	d901      	bls.n	8002768 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e042      	b.n	80027ee <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002768:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800276c:	2b00      	cmp	r3, #0
 800276e:	da0f      	bge.n	8002790 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002770:	78fb      	ldrb	r3, [r7, #3]
 8002772:	f003 020f 	and.w	r2, r3, #15
 8002776:	4613      	mov	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	4413      	add	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	3338      	adds	r3, #56	; 0x38
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	4413      	add	r3, r2
 8002784:	3304      	adds	r3, #4
 8002786:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2201      	movs	r2, #1
 800278c:	705a      	strb	r2, [r3, #1]
 800278e:	e00f      	b.n	80027b0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002790:	78fb      	ldrb	r3, [r7, #3]
 8002792:	f003 020f 	and.w	r2, r3, #15
 8002796:	4613      	mov	r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	4413      	add	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	4413      	add	r3, r2
 80027a6:	3304      	adds	r3, #4
 80027a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027b6:	78fb      	ldrb	r3, [r7, #3]
 80027b8:	f003 030f 	and.w	r3, r3, #15
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_PCD_EP_ClrStall+0x86>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e00e      	b.n	80027ee <HAL_PCD_EP_ClrStall+0xa4>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68f9      	ldr	r1, [r7, #12]
 80027de:	4618      	mov	r0, r3
 80027e0:	f003 f854 	bl	800588c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b084      	sub	sp, #16
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
 80027fe:	460b      	mov	r3, r1
 8002800:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002802:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002806:	2b00      	cmp	r3, #0
 8002808:	da0c      	bge.n	8002824 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800280a:	78fb      	ldrb	r3, [r7, #3]
 800280c:	f003 020f 	and.w	r2, r3, #15
 8002810:	4613      	mov	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	3338      	adds	r3, #56	; 0x38
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	4413      	add	r3, r2
 800281e:	3304      	adds	r3, #4
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	e00c      	b.n	800283e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002824:	78fb      	ldrb	r3, [r7, #3]
 8002826:	f003 020f 	and.w	r2, r3, #15
 800282a:	4613      	mov	r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4413      	add	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	4413      	add	r3, r2
 800283a:	3304      	adds	r3, #4
 800283c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68f9      	ldr	r1, [r7, #12]
 8002844:	4618      	mov	r0, r3
 8002846:	f002 fe73 	bl	8005530 <USB_EPStopXfer>
 800284a:	4603      	mov	r3, r0
 800284c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800284e:	7afb      	ldrb	r3, [r7, #11]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08a      	sub	sp, #40	; 0x28
 800285c:	af02      	add	r7, sp, #8
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	4613      	mov	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	4413      	add	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	3338      	adds	r3, #56	; 0x38
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	4413      	add	r3, r2
 800287c:	3304      	adds	r3, #4
 800287e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6a1a      	ldr	r2, [r3, #32]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	429a      	cmp	r2, r3
 800288a:	d901      	bls.n	8002890 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e06c      	b.n	800296a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	699a      	ldr	r2, [r3, #24]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	69fa      	ldr	r2, [r7, #28]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d902      	bls.n	80028ac <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	3303      	adds	r3, #3
 80028b0:	089b      	lsrs	r3, r3, #2
 80028b2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028b4:	e02b      	b.n	800290e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	699a      	ldr	r2, [r3, #24]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	69fa      	ldr	r2, [r7, #28]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d902      	bls.n	80028d2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	3303      	adds	r3, #3
 80028d6:	089b      	lsrs	r3, r3, #2
 80028d8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6919      	ldr	r1, [r3, #16]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	4603      	mov	r3, r0
 80028f0:	6978      	ldr	r0, [r7, #20]
 80028f2:	f002 fec7 	bl	8005684 <USB_WritePacket>

    ep->xfer_buff  += len;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	691a      	ldr	r2, [r3, #16]
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	441a      	add	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a1a      	ldr	r2, [r3, #32]
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	441a      	add	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	015a      	lsls	r2, r3, #5
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	4413      	add	r3, r2
 8002916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	b29b      	uxth	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	429a      	cmp	r2, r3
 8002922:	d809      	bhi.n	8002938 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6a1a      	ldr	r2, [r3, #32]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800292c:	429a      	cmp	r2, r3
 800292e:	d203      	bcs.n	8002938 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1be      	bne.n	80028b6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	699a      	ldr	r2, [r3, #24]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	429a      	cmp	r2, r3
 8002942:	d811      	bhi.n	8002968 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	2201      	movs	r2, #1
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	43db      	mvns	r3, r3
 800295e:	6939      	ldr	r1, [r7, #16]
 8002960:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002964:	4013      	ands	r3, r2
 8002966:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3720      	adds	r7, #32
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b088      	sub	sp, #32
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	333c      	adds	r3, #60	; 0x3c
 800298c:	3304      	adds	r3, #4
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	015a      	lsls	r2, r3, #5
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	4413      	add	r3, r2
 800299a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d17b      	bne.n	8002aa2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	f003 0308 	and.w	r3, r3, #8
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d015      	beq.n	80029e0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	4a61      	ldr	r2, [pc, #388]	; (8002b3c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	f240 80b9 	bls.w	8002b30 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 80b3 	beq.w	8002b30 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	015a      	lsls	r2, r3, #5
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	4413      	add	r3, r2
 80029d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029d6:	461a      	mov	r2, r3
 80029d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029dc:	6093      	str	r3, [r2, #8]
 80029de:	e0a7      	b.n	8002b30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	f003 0320 	and.w	r3, r3, #32
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d009      	beq.n	80029fe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	015a      	lsls	r2, r3, #5
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	4413      	add	r3, r2
 80029f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029f6:	461a      	mov	r2, r3
 80029f8:	2320      	movs	r3, #32
 80029fa:	6093      	str	r3, [r2, #8]
 80029fc:	e098      	b.n	8002b30 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f040 8093 	bne.w	8002b30 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	4a4b      	ldr	r2, [pc, #300]	; (8002b3c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d90f      	bls.n	8002a32 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00a      	beq.n	8002a32 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	015a      	lsls	r2, r3, #5
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	4413      	add	r3, r2
 8002a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a28:	461a      	mov	r2, r3
 8002a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a2e:	6093      	str	r3, [r2, #8]
 8002a30:	e07e      	b.n	8002b30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	4613      	mov	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	4413      	add	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	4413      	add	r3, r2
 8002a44:	3304      	adds	r3, #4
 8002a46:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	69da      	ldr	r2, [r3, #28]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	0159      	lsls	r1, r3, #5
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	440b      	add	r3, r1
 8002a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a5e:	1ad2      	subs	r2, r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d114      	bne.n	8002a94 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d109      	bne.n	8002a86 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6818      	ldr	r0, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	2101      	movs	r1, #1
 8002a80:	f003 f896 	bl	8005bb0 <USB_EP0_OutStart>
 8002a84:	e006      	b.n	8002a94 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	691a      	ldr	r2, [r3, #16]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	441a      	add	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	4619      	mov	r1, r3
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f005 f87c 	bl	8007b98 <HAL_PCD_DataOutStageCallback>
 8002aa0:	e046      	b.n	8002b30 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	4a26      	ldr	r2, [pc, #152]	; (8002b40 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d124      	bne.n	8002af4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00a      	beq.n	8002aca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	015a      	lsls	r2, r3, #5
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	4413      	add	r3, r2
 8002abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ac6:	6093      	str	r3, [r2, #8]
 8002ac8:	e032      	b.n	8002b30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	f003 0320 	and.w	r3, r3, #32
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	015a      	lsls	r2, r3, #5
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	4413      	add	r3, r2
 8002adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	2320      	movs	r3, #32
 8002ae4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	4619      	mov	r1, r3
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f005 f853 	bl	8007b98 <HAL_PCD_DataOutStageCallback>
 8002af2:	e01d      	b.n	8002b30 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d114      	bne.n	8002b24 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	4613      	mov	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	4413      	add	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	440b      	add	r3, r1
 8002b08:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d108      	bne.n	8002b24 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6818      	ldr	r0, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	2100      	movs	r1, #0
 8002b20:	f003 f846 	bl	8005bb0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	4619      	mov	r1, r3
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f005 f834 	bl	8007b98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3720      	adds	r7, #32
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	4f54300a 	.word	0x4f54300a
 8002b40:	4f54310a 	.word	0x4f54310a

08002b44 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	333c      	adds	r3, #60	; 0x3c
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	015a      	lsls	r2, r3, #5
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	4413      	add	r3, r2
 8002b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	4a15      	ldr	r2, [pc, #84]	; (8002bcc <PCD_EP_OutSetupPacket_int+0x88>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d90e      	bls.n	8002b98 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d009      	beq.n	8002b98 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b90:	461a      	mov	r2, r3
 8002b92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b96:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f004 ffeb 	bl	8007b74 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4a0a      	ldr	r2, [pc, #40]	; (8002bcc <PCD_EP_OutSetupPacket_int+0x88>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d90c      	bls.n	8002bc0 <PCD_EP_OutSetupPacket_int+0x7c>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d108      	bne.n	8002bc0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6818      	ldr	r0, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002bb8:	461a      	mov	r2, r3
 8002bba:	2101      	movs	r1, #1
 8002bbc:	f002 fff8 	bl	8005bb0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	4f54300a 	.word	0x4f54300a

08002bd0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	70fb      	strb	r3, [r7, #3]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002be8:	78fb      	ldrb	r3, [r7, #3]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d107      	bne.n	8002bfe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002bee:	883b      	ldrh	r3, [r7, #0]
 8002bf0:	0419      	lsls	r1, r3, #16
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	629a      	str	r2, [r3, #40]	; 0x28
 8002bfc:	e028      	b.n	8002c50 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c04:	0c1b      	lsrs	r3, r3, #16
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	4413      	add	r3, r2
 8002c0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	73fb      	strb	r3, [r7, #15]
 8002c10:	e00d      	b.n	8002c2e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	7bfb      	ldrb	r3, [r7, #15]
 8002c18:	3340      	adds	r3, #64	; 0x40
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	0c1b      	lsrs	r3, r3, #16
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	4413      	add	r3, r2
 8002c26:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c28:	7bfb      	ldrb	r3, [r7, #15]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	73fb      	strb	r3, [r7, #15]
 8002c2e:	7bfa      	ldrb	r2, [r7, #15]
 8002c30:	78fb      	ldrb	r3, [r7, #3]
 8002c32:	3b01      	subs	r3, #1
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d3ec      	bcc.n	8002c12 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002c38:	883b      	ldrh	r3, [r7, #0]
 8002c3a:	0418      	lsls	r0, r3, #16
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6819      	ldr	r1, [r3, #0]
 8002c40:	78fb      	ldrb	r3, [r7, #3]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	4302      	orrs	r2, r0
 8002c48:	3340      	adds	r3, #64	; 0x40
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
 8002c66:	460b      	mov	r3, r1
 8002c68:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	887a      	ldrh	r2, [r7, #2]
 8002c70:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	460b      	mov	r3, r1
 8002c8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e267      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d075      	beq.n	8002da2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cb6:	4b88      	ldr	r3, [pc, #544]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 030c 	and.w	r3, r3, #12
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d00c      	beq.n	8002cdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cc2:	4b85      	ldr	r3, [pc, #532]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	d112      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cce:	4b82      	ldr	r3, [pc, #520]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cda:	d10b      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cdc:	4b7e      	ldr	r3, [pc, #504]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d05b      	beq.n	8002da0 <HAL_RCC_OscConfig+0x108>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d157      	bne.n	8002da0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e242      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cfc:	d106      	bne.n	8002d0c <HAL_RCC_OscConfig+0x74>
 8002cfe:	4b76      	ldr	r3, [pc, #472]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a75      	ldr	r2, [pc, #468]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	e01d      	b.n	8002d48 <HAL_RCC_OscConfig+0xb0>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d14:	d10c      	bne.n	8002d30 <HAL_RCC_OscConfig+0x98>
 8002d16:	4b70      	ldr	r3, [pc, #448]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a6f      	ldr	r2, [pc, #444]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	4b6d      	ldr	r3, [pc, #436]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a6c      	ldr	r2, [pc, #432]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	e00b      	b.n	8002d48 <HAL_RCC_OscConfig+0xb0>
 8002d30:	4b69      	ldr	r3, [pc, #420]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a68      	ldr	r2, [pc, #416]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d3a:	6013      	str	r3, [r2, #0]
 8002d3c:	4b66      	ldr	r3, [pc, #408]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a65      	ldr	r2, [pc, #404]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002d42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d013      	beq.n	8002d78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d50:	f7fe f918 	bl	8000f84 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d58:	f7fe f914 	bl	8000f84 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b64      	cmp	r3, #100	; 0x64
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e207      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6a:	4b5b      	ldr	r3, [pc, #364]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0f0      	beq.n	8002d58 <HAL_RCC_OscConfig+0xc0>
 8002d76:	e014      	b.n	8002da2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d78:	f7fe f904 	bl	8000f84 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d80:	f7fe f900 	bl	8000f84 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b64      	cmp	r3, #100	; 0x64
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e1f3      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d92:	4b51      	ldr	r3, [pc, #324]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f0      	bne.n	8002d80 <HAL_RCC_OscConfig+0xe8>
 8002d9e:	e000      	b.n	8002da2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d063      	beq.n	8002e76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dae:	4b4a      	ldr	r3, [pc, #296]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 030c 	and.w	r3, r3, #12
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00b      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dba:	4b47      	ldr	r3, [pc, #284]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d11c      	bne.n	8002e00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dc6:	4b44      	ldr	r3, [pc, #272]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d116      	bne.n	8002e00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd2:	4b41      	ldr	r3, [pc, #260]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d005      	beq.n	8002dea <HAL_RCC_OscConfig+0x152>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d001      	beq.n	8002dea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e1c7      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dea:	4b3b      	ldr	r3, [pc, #236]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	4937      	ldr	r1, [pc, #220]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dfe:	e03a      	b.n	8002e76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d020      	beq.n	8002e4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e08:	4b34      	ldr	r3, [pc, #208]	; (8002edc <HAL_RCC_OscConfig+0x244>)
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0e:	f7fe f8b9 	bl	8000f84 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e16:	f7fe f8b5 	bl	8000f84 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e1a8      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e28:	4b2b      	ldr	r3, [pc, #172]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0f0      	beq.n	8002e16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e34:	4b28      	ldr	r3, [pc, #160]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	4925      	ldr	r1, [pc, #148]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	600b      	str	r3, [r1, #0]
 8002e48:	e015      	b.n	8002e76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e4a:	4b24      	ldr	r3, [pc, #144]	; (8002edc <HAL_RCC_OscConfig+0x244>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e50:	f7fe f898 	bl	8000f84 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e58:	f7fe f894 	bl	8000f84 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e187      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6a:	4b1b      	ldr	r3, [pc, #108]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f0      	bne.n	8002e58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d036      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d016      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e8a:	4b15      	ldr	r3, [pc, #84]	; (8002ee0 <HAL_RCC_OscConfig+0x248>)
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e90:	f7fe f878 	bl	8000f84 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e98:	f7fe f874 	bl	8000f84 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e167      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0f0      	beq.n	8002e98 <HAL_RCC_OscConfig+0x200>
 8002eb6:	e01b      	b.n	8002ef0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eb8:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <HAL_RCC_OscConfig+0x248>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ebe:	f7fe f861 	bl	8000f84 <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec4:	e00e      	b.n	8002ee4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ec6:	f7fe f85d 	bl	8000f84 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d907      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e150      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	42470000 	.word	0x42470000
 8002ee0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee4:	4b88      	ldr	r3, [pc, #544]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1ea      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 8097 	beq.w	800302c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002efe:	2300      	movs	r3, #0
 8002f00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f02:	4b81      	ldr	r3, [pc, #516]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10f      	bne.n	8002f2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60bb      	str	r3, [r7, #8]
 8002f12:	4b7d      	ldr	r3, [pc, #500]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	4a7c      	ldr	r2, [pc, #496]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f1e:	4b7a      	ldr	r3, [pc, #488]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f26:	60bb      	str	r3, [r7, #8]
 8002f28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f2e:	4b77      	ldr	r3, [pc, #476]	; (800310c <HAL_RCC_OscConfig+0x474>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d118      	bne.n	8002f6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f3a:	4b74      	ldr	r3, [pc, #464]	; (800310c <HAL_RCC_OscConfig+0x474>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a73      	ldr	r2, [pc, #460]	; (800310c <HAL_RCC_OscConfig+0x474>)
 8002f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f46:	f7fe f81d 	bl	8000f84 <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f4c:	e008      	b.n	8002f60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f4e:	f7fe f819 	bl	8000f84 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e10c      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f60:	4b6a      	ldr	r3, [pc, #424]	; (800310c <HAL_RCC_OscConfig+0x474>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d0f0      	beq.n	8002f4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d106      	bne.n	8002f82 <HAL_RCC_OscConfig+0x2ea>
 8002f74:	4b64      	ldr	r3, [pc, #400]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f78:	4a63      	ldr	r2, [pc, #396]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002f7a:	f043 0301 	orr.w	r3, r3, #1
 8002f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f80:	e01c      	b.n	8002fbc <HAL_RCC_OscConfig+0x324>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2b05      	cmp	r3, #5
 8002f88:	d10c      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x30c>
 8002f8a:	4b5f      	ldr	r3, [pc, #380]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8e:	4a5e      	ldr	r2, [pc, #376]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002f90:	f043 0304 	orr.w	r3, r3, #4
 8002f94:	6713      	str	r3, [r2, #112]	; 0x70
 8002f96:	4b5c      	ldr	r3, [pc, #368]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9a:	4a5b      	ldr	r2, [pc, #364]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa2:	e00b      	b.n	8002fbc <HAL_RCC_OscConfig+0x324>
 8002fa4:	4b58      	ldr	r3, [pc, #352]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa8:	4a57      	ldr	r2, [pc, #348]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002faa:	f023 0301 	bic.w	r3, r3, #1
 8002fae:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb0:	4b55      	ldr	r3, [pc, #340]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb4:	4a54      	ldr	r2, [pc, #336]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002fb6:	f023 0304 	bic.w	r3, r3, #4
 8002fba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d015      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc4:	f7fd ffde 	bl	8000f84 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fca:	e00a      	b.n	8002fe2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fcc:	f7fd ffda 	bl	8000f84 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e0cb      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe2:	4b49      	ldr	r3, [pc, #292]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0ee      	beq.n	8002fcc <HAL_RCC_OscConfig+0x334>
 8002fee:	e014      	b.n	800301a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff0:	f7fd ffc8 	bl	8000f84 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff6:	e00a      	b.n	800300e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ff8:	f7fd ffc4 	bl	8000f84 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	f241 3288 	movw	r2, #5000	; 0x1388
 8003006:	4293      	cmp	r3, r2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e0b5      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800300e:	4b3e      	ldr	r3, [pc, #248]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8003010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1ee      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800301a:	7dfb      	ldrb	r3, [r7, #23]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d105      	bne.n	800302c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003020:	4b39      	ldr	r3, [pc, #228]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	4a38      	ldr	r2, [pc, #224]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8003026:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800302a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 80a1 	beq.w	8003178 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003036:	4b34      	ldr	r3, [pc, #208]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	2b08      	cmp	r3, #8
 8003040:	d05c      	beq.n	80030fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	2b02      	cmp	r3, #2
 8003048:	d141      	bne.n	80030ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800304a:	4b31      	ldr	r3, [pc, #196]	; (8003110 <HAL_RCC_OscConfig+0x478>)
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003050:	f7fd ff98 	bl	8000f84 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003058:	f7fd ff94 	bl	8000f84 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e087      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306a:	4b27      	ldr	r3, [pc, #156]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f0      	bne.n	8003058 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	69da      	ldr	r2, [r3, #28]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	019b      	lsls	r3, r3, #6
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308c:	085b      	lsrs	r3, r3, #1
 800308e:	3b01      	subs	r3, #1
 8003090:	041b      	lsls	r3, r3, #16
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	061b      	lsls	r3, r3, #24
 800309a:	491b      	ldr	r1, [pc, #108]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 800309c:	4313      	orrs	r3, r2
 800309e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030a0:	4b1b      	ldr	r3, [pc, #108]	; (8003110 <HAL_RCC_OscConfig+0x478>)
 80030a2:	2201      	movs	r2, #1
 80030a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a6:	f7fd ff6d 	bl	8000f84 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ae:	f7fd ff69 	bl	8000f84 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e05c      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c0:	4b11      	ldr	r3, [pc, #68]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0f0      	beq.n	80030ae <HAL_RCC_OscConfig+0x416>
 80030cc:	e054      	b.n	8003178 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ce:	4b10      	ldr	r3, [pc, #64]	; (8003110 <HAL_RCC_OscConfig+0x478>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d4:	f7fd ff56 	bl	8000f84 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030dc:	f7fd ff52 	bl	8000f84 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e045      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ee:	4b06      	ldr	r3, [pc, #24]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f0      	bne.n	80030dc <HAL_RCC_OscConfig+0x444>
 80030fa:	e03d      	b.n	8003178 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d107      	bne.n	8003114 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e038      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
 8003108:	40023800 	.word	0x40023800
 800310c:	40007000 	.word	0x40007000
 8003110:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003114:	4b1b      	ldr	r3, [pc, #108]	; (8003184 <HAL_RCC_OscConfig+0x4ec>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d028      	beq.n	8003174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800312c:	429a      	cmp	r2, r3
 800312e:	d121      	bne.n	8003174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800313a:	429a      	cmp	r2, r3
 800313c:	d11a      	bne.n	8003174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003144:	4013      	ands	r3, r2
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800314a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800314c:	4293      	cmp	r3, r2
 800314e:	d111      	bne.n	8003174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315a:	085b      	lsrs	r3, r3, #1
 800315c:	3b01      	subs	r3, #1
 800315e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003160:	429a      	cmp	r2, r3
 8003162:	d107      	bne.n	8003174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003170:	429a      	cmp	r2, r3
 8003172:	d001      	beq.n	8003178 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e000      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3718      	adds	r7, #24
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40023800 	.word	0x40023800

08003188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e0cc      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800319c:	4b68      	ldr	r3, [pc, #416]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d90c      	bls.n	80031c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031aa:	4b65      	ldr	r3, [pc, #404]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b2:	4b63      	ldr	r3, [pc, #396]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d001      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0b8      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d020      	beq.n	8003212 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d005      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031dc:	4b59      	ldr	r3, [pc, #356]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	4a58      	ldr	r2, [pc, #352]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0308 	and.w	r3, r3, #8
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d005      	beq.n	8003200 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031f4:	4b53      	ldr	r3, [pc, #332]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	4a52      	ldr	r2, [pc, #328]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80031fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003200:	4b50      	ldr	r3, [pc, #320]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	494d      	ldr	r1, [pc, #308]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	4313      	orrs	r3, r2
 8003210:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d044      	beq.n	80032a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d107      	bne.n	8003236 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003226:	4b47      	ldr	r3, [pc, #284]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d119      	bne.n	8003266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e07f      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d003      	beq.n	8003246 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003242:	2b03      	cmp	r3, #3
 8003244:	d107      	bne.n	8003256 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003246:	4b3f      	ldr	r3, [pc, #252]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d109      	bne.n	8003266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e06f      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003256:	4b3b      	ldr	r3, [pc, #236]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e067      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003266:	4b37      	ldr	r3, [pc, #220]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f023 0203 	bic.w	r2, r3, #3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	4934      	ldr	r1, [pc, #208]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003274:	4313      	orrs	r3, r2
 8003276:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003278:	f7fd fe84 	bl	8000f84 <HAL_GetTick>
 800327c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327e:	e00a      	b.n	8003296 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003280:	f7fd fe80 	bl	8000f84 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	f241 3288 	movw	r2, #5000	; 0x1388
 800328e:	4293      	cmp	r3, r2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e04f      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003296:	4b2b      	ldr	r3, [pc, #172]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 020c 	and.w	r2, r3, #12
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d1eb      	bne.n	8003280 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032a8:	4b25      	ldr	r3, [pc, #148]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d20c      	bcs.n	80032d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b6:	4b22      	ldr	r3, [pc, #136]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032be:	4b20      	ldr	r3, [pc, #128]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d001      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e032      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032dc:	4b19      	ldr	r3, [pc, #100]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	4916      	ldr	r1, [pc, #88]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d009      	beq.n	800330e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032fa:	4b12      	ldr	r3, [pc, #72]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	490e      	ldr	r1, [pc, #56]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	4313      	orrs	r3, r2
 800330c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800330e:	f000 f821 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8003312:	4602      	mov	r2, r0
 8003314:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	091b      	lsrs	r3, r3, #4
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	490a      	ldr	r1, [pc, #40]	; (8003348 <HAL_RCC_ClockConfig+0x1c0>)
 8003320:	5ccb      	ldrb	r3, [r1, r3]
 8003322:	fa22 f303 	lsr.w	r3, r2, r3
 8003326:	4a09      	ldr	r2, [pc, #36]	; (800334c <HAL_RCC_ClockConfig+0x1c4>)
 8003328:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800332a:	4b09      	ldr	r3, [pc, #36]	; (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7fd fde4 	bl	8000efc <HAL_InitTick>

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	40023c00 	.word	0x40023c00
 8003344:	40023800 	.word	0x40023800
 8003348:	0800816c 	.word	0x0800816c
 800334c:	20000000 	.word	0x20000000
 8003350:	20000004 	.word	0x20000004

08003354 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003358:	b094      	sub	sp, #80	; 0x50
 800335a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	647b      	str	r3, [r7, #68]	; 0x44
 8003360:	2300      	movs	r3, #0
 8003362:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003364:	2300      	movs	r3, #0
 8003366:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800336c:	4b79      	ldr	r3, [pc, #484]	; (8003554 <HAL_RCC_GetSysClockFreq+0x200>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 030c 	and.w	r3, r3, #12
 8003374:	2b08      	cmp	r3, #8
 8003376:	d00d      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0x40>
 8003378:	2b08      	cmp	r3, #8
 800337a:	f200 80e1 	bhi.w	8003540 <HAL_RCC_GetSysClockFreq+0x1ec>
 800337e:	2b00      	cmp	r3, #0
 8003380:	d002      	beq.n	8003388 <HAL_RCC_GetSysClockFreq+0x34>
 8003382:	2b04      	cmp	r3, #4
 8003384:	d003      	beq.n	800338e <HAL_RCC_GetSysClockFreq+0x3a>
 8003386:	e0db      	b.n	8003540 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003388:	4b73      	ldr	r3, [pc, #460]	; (8003558 <HAL_RCC_GetSysClockFreq+0x204>)
 800338a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800338c:	e0db      	b.n	8003546 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800338e:	4b73      	ldr	r3, [pc, #460]	; (800355c <HAL_RCC_GetSysClockFreq+0x208>)
 8003390:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003392:	e0d8      	b.n	8003546 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003394:	4b6f      	ldr	r3, [pc, #444]	; (8003554 <HAL_RCC_GetSysClockFreq+0x200>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800339c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800339e:	4b6d      	ldr	r3, [pc, #436]	; (8003554 <HAL_RCC_GetSysClockFreq+0x200>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d063      	beq.n	8003472 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033aa:	4b6a      	ldr	r3, [pc, #424]	; (8003554 <HAL_RCC_GetSysClockFreq+0x200>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	099b      	lsrs	r3, r3, #6
 80033b0:	2200      	movs	r2, #0
 80033b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80033b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033bc:	633b      	str	r3, [r7, #48]	; 0x30
 80033be:	2300      	movs	r3, #0
 80033c0:	637b      	str	r3, [r7, #52]	; 0x34
 80033c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80033c6:	4622      	mov	r2, r4
 80033c8:	462b      	mov	r3, r5
 80033ca:	f04f 0000 	mov.w	r0, #0
 80033ce:	f04f 0100 	mov.w	r1, #0
 80033d2:	0159      	lsls	r1, r3, #5
 80033d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033d8:	0150      	lsls	r0, r2, #5
 80033da:	4602      	mov	r2, r0
 80033dc:	460b      	mov	r3, r1
 80033de:	4621      	mov	r1, r4
 80033e0:	1a51      	subs	r1, r2, r1
 80033e2:	6139      	str	r1, [r7, #16]
 80033e4:	4629      	mov	r1, r5
 80033e6:	eb63 0301 	sbc.w	r3, r3, r1
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	f04f 0300 	mov.w	r3, #0
 80033f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033f8:	4659      	mov	r1, fp
 80033fa:	018b      	lsls	r3, r1, #6
 80033fc:	4651      	mov	r1, sl
 80033fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003402:	4651      	mov	r1, sl
 8003404:	018a      	lsls	r2, r1, #6
 8003406:	4651      	mov	r1, sl
 8003408:	ebb2 0801 	subs.w	r8, r2, r1
 800340c:	4659      	mov	r1, fp
 800340e:	eb63 0901 	sbc.w	r9, r3, r1
 8003412:	f04f 0200 	mov.w	r2, #0
 8003416:	f04f 0300 	mov.w	r3, #0
 800341a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800341e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003422:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003426:	4690      	mov	r8, r2
 8003428:	4699      	mov	r9, r3
 800342a:	4623      	mov	r3, r4
 800342c:	eb18 0303 	adds.w	r3, r8, r3
 8003430:	60bb      	str	r3, [r7, #8]
 8003432:	462b      	mov	r3, r5
 8003434:	eb49 0303 	adc.w	r3, r9, r3
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	f04f 0200 	mov.w	r2, #0
 800343e:	f04f 0300 	mov.w	r3, #0
 8003442:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003446:	4629      	mov	r1, r5
 8003448:	024b      	lsls	r3, r1, #9
 800344a:	4621      	mov	r1, r4
 800344c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003450:	4621      	mov	r1, r4
 8003452:	024a      	lsls	r2, r1, #9
 8003454:	4610      	mov	r0, r2
 8003456:	4619      	mov	r1, r3
 8003458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800345a:	2200      	movs	r2, #0
 800345c:	62bb      	str	r3, [r7, #40]	; 0x28
 800345e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003460:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003464:	f7fc feb8 	bl	80001d8 <__aeabi_uldivmod>
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	4613      	mov	r3, r2
 800346e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003470:	e058      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003472:	4b38      	ldr	r3, [pc, #224]	; (8003554 <HAL_RCC_GetSysClockFreq+0x200>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	099b      	lsrs	r3, r3, #6
 8003478:	2200      	movs	r2, #0
 800347a:	4618      	mov	r0, r3
 800347c:	4611      	mov	r1, r2
 800347e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003482:	623b      	str	r3, [r7, #32]
 8003484:	2300      	movs	r3, #0
 8003486:	627b      	str	r3, [r7, #36]	; 0x24
 8003488:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800348c:	4642      	mov	r2, r8
 800348e:	464b      	mov	r3, r9
 8003490:	f04f 0000 	mov.w	r0, #0
 8003494:	f04f 0100 	mov.w	r1, #0
 8003498:	0159      	lsls	r1, r3, #5
 800349a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800349e:	0150      	lsls	r0, r2, #5
 80034a0:	4602      	mov	r2, r0
 80034a2:	460b      	mov	r3, r1
 80034a4:	4641      	mov	r1, r8
 80034a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80034aa:	4649      	mov	r1, r9
 80034ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80034b0:	f04f 0200 	mov.w	r2, #0
 80034b4:	f04f 0300 	mov.w	r3, #0
 80034b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034c4:	ebb2 040a 	subs.w	r4, r2, sl
 80034c8:	eb63 050b 	sbc.w	r5, r3, fp
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	00eb      	lsls	r3, r5, #3
 80034d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034da:	00e2      	lsls	r2, r4, #3
 80034dc:	4614      	mov	r4, r2
 80034de:	461d      	mov	r5, r3
 80034e0:	4643      	mov	r3, r8
 80034e2:	18e3      	adds	r3, r4, r3
 80034e4:	603b      	str	r3, [r7, #0]
 80034e6:	464b      	mov	r3, r9
 80034e8:	eb45 0303 	adc.w	r3, r5, r3
 80034ec:	607b      	str	r3, [r7, #4]
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	f04f 0300 	mov.w	r3, #0
 80034f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034fa:	4629      	mov	r1, r5
 80034fc:	028b      	lsls	r3, r1, #10
 80034fe:	4621      	mov	r1, r4
 8003500:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003504:	4621      	mov	r1, r4
 8003506:	028a      	lsls	r2, r1, #10
 8003508:	4610      	mov	r0, r2
 800350a:	4619      	mov	r1, r3
 800350c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800350e:	2200      	movs	r2, #0
 8003510:	61bb      	str	r3, [r7, #24]
 8003512:	61fa      	str	r2, [r7, #28]
 8003514:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003518:	f7fc fe5e 	bl	80001d8 <__aeabi_uldivmod>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	4613      	mov	r3, r2
 8003522:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003524:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <HAL_RCC_GetSysClockFreq+0x200>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	0c1b      	lsrs	r3, r3, #16
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	3301      	adds	r3, #1
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003534:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003538:	fbb2 f3f3 	udiv	r3, r2, r3
 800353c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800353e:	e002      	b.n	8003546 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003540:	4b05      	ldr	r3, [pc, #20]	; (8003558 <HAL_RCC_GetSysClockFreq+0x204>)
 8003542:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003544:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003548:	4618      	mov	r0, r3
 800354a:	3750      	adds	r7, #80	; 0x50
 800354c:	46bd      	mov	sp, r7
 800354e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003552:	bf00      	nop
 8003554:	40023800 	.word	0x40023800
 8003558:	00f42400 	.word	0x00f42400
 800355c:	007a1200 	.word	0x007a1200

08003560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003564:	4b03      	ldr	r3, [pc, #12]	; (8003574 <HAL_RCC_GetHCLKFreq+0x14>)
 8003566:	681b      	ldr	r3, [r3, #0]
}
 8003568:	4618      	mov	r0, r3
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	20000000 	.word	0x20000000

08003578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800357c:	f7ff fff0 	bl	8003560 <HAL_RCC_GetHCLKFreq>
 8003580:	4602      	mov	r2, r0
 8003582:	4b05      	ldr	r3, [pc, #20]	; (8003598 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	0a9b      	lsrs	r3, r3, #10
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	4903      	ldr	r1, [pc, #12]	; (800359c <HAL_RCC_GetPCLK1Freq+0x24>)
 800358e:	5ccb      	ldrb	r3, [r1, r3]
 8003590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003594:	4618      	mov	r0, r3
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40023800 	.word	0x40023800
 800359c:	0800817c 	.word	0x0800817c

080035a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035a4:	f7ff ffdc 	bl	8003560 <HAL_RCC_GetHCLKFreq>
 80035a8:	4602      	mov	r2, r0
 80035aa:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	0b5b      	lsrs	r3, r3, #13
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	4903      	ldr	r1, [pc, #12]	; (80035c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035b6:	5ccb      	ldrb	r3, [r1, r3]
 80035b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035bc:	4618      	mov	r0, r3
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40023800 	.word	0x40023800
 80035c4:	0800817c 	.word	0x0800817c

080035c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e07b      	b.n	80036d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d108      	bne.n	80035f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035ea:	d009      	beq.n	8003600 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	61da      	str	r2, [r3, #28]
 80035f2:	e005      	b.n	8003600 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d106      	bne.n	8003620 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7fd faac 	bl	8000b78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003636:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003648:	431a      	orrs	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003652:	431a      	orrs	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	431a      	orrs	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	431a      	orrs	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003670:	431a      	orrs	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003684:	ea42 0103 	orr.w	r1, r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	0c1b      	lsrs	r3, r3, #16
 800369e:	f003 0104 	and.w	r1, r3, #4
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a6:	f003 0210 	and.w	r2, r3, #16
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	69da      	ldr	r2, [r3, #28]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b082      	sub	sp, #8
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e041      	b.n	8003770 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d106      	bne.n	8003706 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7fd fac9 	bl	8000c98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2202      	movs	r2, #2
 800370a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	3304      	adds	r3, #4
 8003716:	4619      	mov	r1, r3
 8003718:	4610      	mov	r0, r2
 800371a:	f000 fa2f 	bl	8003b7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3708      	adds	r7, #8
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b02      	cmp	r3, #2
 800378c:	d122      	bne.n	80037d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b02      	cmp	r3, #2
 800379a:	d11b      	bne.n	80037d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f06f 0202 	mvn.w	r2, #2
 80037a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f9bf 	bl	8003b3e <HAL_TIM_IC_CaptureCallback>
 80037c0:	e005      	b.n	80037ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f9b1 	bl	8003b2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f9c2 	bl	8003b52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	f003 0304 	and.w	r3, r3, #4
 80037de:	2b04      	cmp	r3, #4
 80037e0:	d122      	bne.n	8003828 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d11b      	bne.n	8003828 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f06f 0204 	mvn.w	r2, #4
 80037f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2202      	movs	r2, #2
 80037fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f995 	bl	8003b3e <HAL_TIM_IC_CaptureCallback>
 8003814:	e005      	b.n	8003822 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f987 	bl	8003b2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f998 	bl	8003b52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	f003 0308 	and.w	r3, r3, #8
 8003832:	2b08      	cmp	r3, #8
 8003834:	d122      	bne.n	800387c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f003 0308 	and.w	r3, r3, #8
 8003840:	2b08      	cmp	r3, #8
 8003842:	d11b      	bne.n	800387c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f06f 0208 	mvn.w	r2, #8
 800384c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2204      	movs	r2, #4
 8003852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	f003 0303 	and.w	r3, r3, #3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f96b 	bl	8003b3e <HAL_TIM_IC_CaptureCallback>
 8003868:	e005      	b.n	8003876 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f95d 	bl	8003b2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f96e 	bl	8003b52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	f003 0310 	and.w	r3, r3, #16
 8003886:	2b10      	cmp	r3, #16
 8003888:	d122      	bne.n	80038d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	f003 0310 	and.w	r3, r3, #16
 8003894:	2b10      	cmp	r3, #16
 8003896:	d11b      	bne.n	80038d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f06f 0210 	mvn.w	r2, #16
 80038a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2208      	movs	r2, #8
 80038a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f941 	bl	8003b3e <HAL_TIM_IC_CaptureCallback>
 80038bc:	e005      	b.n	80038ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f933 	bl	8003b2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f944 	bl	8003b52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d10e      	bne.n	80038fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d107      	bne.n	80038fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f06f 0201 	mvn.w	r2, #1
 80038f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f90d 	bl	8003b16 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003906:	2b80      	cmp	r3, #128	; 0x80
 8003908:	d10e      	bne.n	8003928 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003914:	2b80      	cmp	r3, #128	; 0x80
 8003916:	d107      	bne.n	8003928 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 fabc 	bl	8003ea0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003932:	2b40      	cmp	r3, #64	; 0x40
 8003934:	d10e      	bne.n	8003954 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003940:	2b40      	cmp	r3, #64	; 0x40
 8003942:	d107      	bne.n	8003954 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800394c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f909 	bl	8003b66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	f003 0320 	and.w	r3, r3, #32
 800395e:	2b20      	cmp	r3, #32
 8003960:	d10e      	bne.n	8003980 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f003 0320 	and.w	r3, r3, #32
 800396c:	2b20      	cmp	r3, #32
 800396e:	d107      	bne.n	8003980 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f06f 0220 	mvn.w	r2, #32
 8003978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 fa86 	bl	8003e8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003980:	bf00      	nop
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800399c:	2b01      	cmp	r3, #1
 800399e:	d101      	bne.n	80039a4 <HAL_TIM_ConfigClockSource+0x1c>
 80039a0:	2302      	movs	r3, #2
 80039a2:	e0b4      	b.n	8003b0e <HAL_TIM_ConfigClockSource+0x186>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039dc:	d03e      	beq.n	8003a5c <HAL_TIM_ConfigClockSource+0xd4>
 80039de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039e2:	f200 8087 	bhi.w	8003af4 <HAL_TIM_ConfigClockSource+0x16c>
 80039e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ea:	f000 8086 	beq.w	8003afa <HAL_TIM_ConfigClockSource+0x172>
 80039ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f2:	d87f      	bhi.n	8003af4 <HAL_TIM_ConfigClockSource+0x16c>
 80039f4:	2b70      	cmp	r3, #112	; 0x70
 80039f6:	d01a      	beq.n	8003a2e <HAL_TIM_ConfigClockSource+0xa6>
 80039f8:	2b70      	cmp	r3, #112	; 0x70
 80039fa:	d87b      	bhi.n	8003af4 <HAL_TIM_ConfigClockSource+0x16c>
 80039fc:	2b60      	cmp	r3, #96	; 0x60
 80039fe:	d050      	beq.n	8003aa2 <HAL_TIM_ConfigClockSource+0x11a>
 8003a00:	2b60      	cmp	r3, #96	; 0x60
 8003a02:	d877      	bhi.n	8003af4 <HAL_TIM_ConfigClockSource+0x16c>
 8003a04:	2b50      	cmp	r3, #80	; 0x50
 8003a06:	d03c      	beq.n	8003a82 <HAL_TIM_ConfigClockSource+0xfa>
 8003a08:	2b50      	cmp	r3, #80	; 0x50
 8003a0a:	d873      	bhi.n	8003af4 <HAL_TIM_ConfigClockSource+0x16c>
 8003a0c:	2b40      	cmp	r3, #64	; 0x40
 8003a0e:	d058      	beq.n	8003ac2 <HAL_TIM_ConfigClockSource+0x13a>
 8003a10:	2b40      	cmp	r3, #64	; 0x40
 8003a12:	d86f      	bhi.n	8003af4 <HAL_TIM_ConfigClockSource+0x16c>
 8003a14:	2b30      	cmp	r3, #48	; 0x30
 8003a16:	d064      	beq.n	8003ae2 <HAL_TIM_ConfigClockSource+0x15a>
 8003a18:	2b30      	cmp	r3, #48	; 0x30
 8003a1a:	d86b      	bhi.n	8003af4 <HAL_TIM_ConfigClockSource+0x16c>
 8003a1c:	2b20      	cmp	r3, #32
 8003a1e:	d060      	beq.n	8003ae2 <HAL_TIM_ConfigClockSource+0x15a>
 8003a20:	2b20      	cmp	r3, #32
 8003a22:	d867      	bhi.n	8003af4 <HAL_TIM_ConfigClockSource+0x16c>
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d05c      	beq.n	8003ae2 <HAL_TIM_ConfigClockSource+0x15a>
 8003a28:	2b10      	cmp	r3, #16
 8003a2a:	d05a      	beq.n	8003ae2 <HAL_TIM_ConfigClockSource+0x15a>
 8003a2c:	e062      	b.n	8003af4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6818      	ldr	r0, [r3, #0]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	6899      	ldr	r1, [r3, #8]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f000 f997 	bl	8003d70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	609a      	str	r2, [r3, #8]
      break;
 8003a5a:	e04f      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6818      	ldr	r0, [r3, #0]
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	6899      	ldr	r1, [r3, #8]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f000 f980 	bl	8003d70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689a      	ldr	r2, [r3, #8]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a7e:	609a      	str	r2, [r3, #8]
      break;
 8003a80:	e03c      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6818      	ldr	r0, [r3, #0]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	6859      	ldr	r1, [r3, #4]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	f000 f8f4 	bl	8003c7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2150      	movs	r1, #80	; 0x50
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 f94d 	bl	8003d3a <TIM_ITRx_SetConfig>
      break;
 8003aa0:	e02c      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6818      	ldr	r0, [r3, #0]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	6859      	ldr	r1, [r3, #4]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	f000 f913 	bl	8003cda <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2160      	movs	r1, #96	; 0x60
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 f93d 	bl	8003d3a <TIM_ITRx_SetConfig>
      break;
 8003ac0:	e01c      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6818      	ldr	r0, [r3, #0]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	6859      	ldr	r1, [r3, #4]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	f000 f8d4 	bl	8003c7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2140      	movs	r1, #64	; 0x40
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 f92d 	bl	8003d3a <TIM_ITRx_SetConfig>
      break;
 8003ae0:	e00c      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4619      	mov	r1, r3
 8003aec:	4610      	mov	r0, r2
 8003aee:	f000 f924 	bl	8003d3a <TIM_ITRx_SetConfig>
      break;
 8003af2:	e003      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	73fb      	strb	r3, [r7, #15]
      break;
 8003af8:	e000      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003afa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr

08003b52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b083      	sub	sp, #12
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
	...

08003b7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a34      	ldr	r2, [pc, #208]	; (8003c60 <TIM_Base_SetConfig+0xe4>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d00f      	beq.n	8003bb4 <TIM_Base_SetConfig+0x38>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b9a:	d00b      	beq.n	8003bb4 <TIM_Base_SetConfig+0x38>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a31      	ldr	r2, [pc, #196]	; (8003c64 <TIM_Base_SetConfig+0xe8>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d007      	beq.n	8003bb4 <TIM_Base_SetConfig+0x38>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a30      	ldr	r2, [pc, #192]	; (8003c68 <TIM_Base_SetConfig+0xec>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d003      	beq.n	8003bb4 <TIM_Base_SetConfig+0x38>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a2f      	ldr	r2, [pc, #188]	; (8003c6c <TIM_Base_SetConfig+0xf0>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d108      	bne.n	8003bc6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a25      	ldr	r2, [pc, #148]	; (8003c60 <TIM_Base_SetConfig+0xe4>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d01b      	beq.n	8003c06 <TIM_Base_SetConfig+0x8a>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd4:	d017      	beq.n	8003c06 <TIM_Base_SetConfig+0x8a>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a22      	ldr	r2, [pc, #136]	; (8003c64 <TIM_Base_SetConfig+0xe8>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d013      	beq.n	8003c06 <TIM_Base_SetConfig+0x8a>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a21      	ldr	r2, [pc, #132]	; (8003c68 <TIM_Base_SetConfig+0xec>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d00f      	beq.n	8003c06 <TIM_Base_SetConfig+0x8a>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a20      	ldr	r2, [pc, #128]	; (8003c6c <TIM_Base_SetConfig+0xf0>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d00b      	beq.n	8003c06 <TIM_Base_SetConfig+0x8a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a1f      	ldr	r2, [pc, #124]	; (8003c70 <TIM_Base_SetConfig+0xf4>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d007      	beq.n	8003c06 <TIM_Base_SetConfig+0x8a>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a1e      	ldr	r2, [pc, #120]	; (8003c74 <TIM_Base_SetConfig+0xf8>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d003      	beq.n	8003c06 <TIM_Base_SetConfig+0x8a>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a1d      	ldr	r2, [pc, #116]	; (8003c78 <TIM_Base_SetConfig+0xfc>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d108      	bne.n	8003c18 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a08      	ldr	r2, [pc, #32]	; (8003c60 <TIM_Base_SetConfig+0xe4>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d103      	bne.n	8003c4c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	691a      	ldr	r2, [r3, #16]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	615a      	str	r2, [r3, #20]
}
 8003c52:	bf00      	nop
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	40010000 	.word	0x40010000
 8003c64:	40000400 	.word	0x40000400
 8003c68:	40000800 	.word	0x40000800
 8003c6c:	40000c00 	.word	0x40000c00
 8003c70:	40014000 	.word	0x40014000
 8003c74:	40014400 	.word	0x40014400
 8003c78:	40014800 	.word	0x40014800

08003c7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	f023 0201 	bic.w	r2, r3, #1
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ca6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	011b      	lsls	r3, r3, #4
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f023 030a 	bic.w	r3, r3, #10
 8003cb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	621a      	str	r2, [r3, #32]
}
 8003cce:	bf00      	nop
 8003cd0:	371c      	adds	r7, #28
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b087      	sub	sp, #28
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	60f8      	str	r0, [r7, #12]
 8003ce2:	60b9      	str	r1, [r7, #8]
 8003ce4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	f023 0210 	bic.w	r2, r3, #16
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	031b      	lsls	r3, r3, #12
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	621a      	str	r2, [r3, #32]
}
 8003d2e:	bf00      	nop
 8003d30:	371c      	adds	r7, #28
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b085      	sub	sp, #20
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
 8003d42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	f043 0307 	orr.w	r3, r3, #7
 8003d5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	609a      	str	r2, [r3, #8]
}
 8003d64:	bf00      	nop
 8003d66:	3714      	adds	r7, #20
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
 8003d7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	021a      	lsls	r2, r3, #8
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	431a      	orrs	r2, r3
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	609a      	str	r2, [r3, #8]
}
 8003da4:	bf00      	nop
 8003da6:	371c      	adds	r7, #28
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d101      	bne.n	8003dc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	e050      	b.n	8003e6a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a1c      	ldr	r2, [pc, #112]	; (8003e78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d018      	beq.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e14:	d013      	beq.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a18      	ldr	r2, [pc, #96]	; (8003e7c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d00e      	beq.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a16      	ldr	r2, [pc, #88]	; (8003e80 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d009      	beq.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a15      	ldr	r2, [pc, #84]	; (8003e84 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d004      	beq.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a13      	ldr	r2, [pc, #76]	; (8003e88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d10c      	bne.n	8003e58 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3714      	adds	r7, #20
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	40010000 	.word	0x40010000
 8003e7c:	40000400 	.word	0x40000400
 8003e80:	40000800 	.word	0x40000800
 8003e84:	40000c00 	.word	0x40000c00
 8003e88:	40014000 	.word	0x40014000

08003e8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e03f      	b.n	8003f46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d106      	bne.n	8003ee0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7fc ff20 	bl	8000d20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2224      	movs	r2, #36	; 0x24
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68da      	ldr	r2, [r3, #12]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ef6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f829 	bl	8003f50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	691a      	ldr	r2, [r3, #16]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	695a      	ldr	r2, [r3, #20]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68da      	ldr	r2, [r3, #12]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
	...

08003f50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f54:	b0c0      	sub	sp, #256	; 0x100
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f6c:	68d9      	ldr	r1, [r3, #12]
 8003f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	ea40 0301 	orr.w	r3, r0, r1
 8003f78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f7e:	689a      	ldr	r2, [r3, #8]
 8003f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	431a      	orrs	r2, r3
 8003f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003fa8:	f021 010c 	bic.w	r1, r1, #12
 8003fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003fb6:	430b      	orrs	r3, r1
 8003fb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fca:	6999      	ldr	r1, [r3, #24]
 8003fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	ea40 0301 	orr.w	r3, r0, r1
 8003fd6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	4b8f      	ldr	r3, [pc, #572]	; (800421c <UART_SetConfig+0x2cc>)
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d005      	beq.n	8003ff0 <UART_SetConfig+0xa0>
 8003fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	4b8d      	ldr	r3, [pc, #564]	; (8004220 <UART_SetConfig+0x2d0>)
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d104      	bne.n	8003ffa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ff0:	f7ff fad6 	bl	80035a0 <HAL_RCC_GetPCLK2Freq>
 8003ff4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003ff8:	e003      	b.n	8004002 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ffa:	f7ff fabd 	bl	8003578 <HAL_RCC_GetPCLK1Freq>
 8003ffe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004006:	69db      	ldr	r3, [r3, #28]
 8004008:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800400c:	f040 810c 	bne.w	8004228 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004014:	2200      	movs	r2, #0
 8004016:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800401a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800401e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004022:	4622      	mov	r2, r4
 8004024:	462b      	mov	r3, r5
 8004026:	1891      	adds	r1, r2, r2
 8004028:	65b9      	str	r1, [r7, #88]	; 0x58
 800402a:	415b      	adcs	r3, r3
 800402c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800402e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004032:	4621      	mov	r1, r4
 8004034:	eb12 0801 	adds.w	r8, r2, r1
 8004038:	4629      	mov	r1, r5
 800403a:	eb43 0901 	adc.w	r9, r3, r1
 800403e:	f04f 0200 	mov.w	r2, #0
 8004042:	f04f 0300 	mov.w	r3, #0
 8004046:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800404a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800404e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004052:	4690      	mov	r8, r2
 8004054:	4699      	mov	r9, r3
 8004056:	4623      	mov	r3, r4
 8004058:	eb18 0303 	adds.w	r3, r8, r3
 800405c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004060:	462b      	mov	r3, r5
 8004062:	eb49 0303 	adc.w	r3, r9, r3
 8004066:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800406a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004076:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800407a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800407e:	460b      	mov	r3, r1
 8004080:	18db      	adds	r3, r3, r3
 8004082:	653b      	str	r3, [r7, #80]	; 0x50
 8004084:	4613      	mov	r3, r2
 8004086:	eb42 0303 	adc.w	r3, r2, r3
 800408a:	657b      	str	r3, [r7, #84]	; 0x54
 800408c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004090:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004094:	f7fc f8a0 	bl	80001d8 <__aeabi_uldivmod>
 8004098:	4602      	mov	r2, r0
 800409a:	460b      	mov	r3, r1
 800409c:	4b61      	ldr	r3, [pc, #388]	; (8004224 <UART_SetConfig+0x2d4>)
 800409e:	fba3 2302 	umull	r2, r3, r3, r2
 80040a2:	095b      	lsrs	r3, r3, #5
 80040a4:	011c      	lsls	r4, r3, #4
 80040a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040aa:	2200      	movs	r2, #0
 80040ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80040b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80040b8:	4642      	mov	r2, r8
 80040ba:	464b      	mov	r3, r9
 80040bc:	1891      	adds	r1, r2, r2
 80040be:	64b9      	str	r1, [r7, #72]	; 0x48
 80040c0:	415b      	adcs	r3, r3
 80040c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80040c8:	4641      	mov	r1, r8
 80040ca:	eb12 0a01 	adds.w	sl, r2, r1
 80040ce:	4649      	mov	r1, r9
 80040d0:	eb43 0b01 	adc.w	fp, r3, r1
 80040d4:	f04f 0200 	mov.w	r2, #0
 80040d8:	f04f 0300 	mov.w	r3, #0
 80040dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040e8:	4692      	mov	sl, r2
 80040ea:	469b      	mov	fp, r3
 80040ec:	4643      	mov	r3, r8
 80040ee:	eb1a 0303 	adds.w	r3, sl, r3
 80040f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040f6:	464b      	mov	r3, r9
 80040f8:	eb4b 0303 	adc.w	r3, fp, r3
 80040fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800410c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004110:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004114:	460b      	mov	r3, r1
 8004116:	18db      	adds	r3, r3, r3
 8004118:	643b      	str	r3, [r7, #64]	; 0x40
 800411a:	4613      	mov	r3, r2
 800411c:	eb42 0303 	adc.w	r3, r2, r3
 8004120:	647b      	str	r3, [r7, #68]	; 0x44
 8004122:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004126:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800412a:	f7fc f855 	bl	80001d8 <__aeabi_uldivmod>
 800412e:	4602      	mov	r2, r0
 8004130:	460b      	mov	r3, r1
 8004132:	4611      	mov	r1, r2
 8004134:	4b3b      	ldr	r3, [pc, #236]	; (8004224 <UART_SetConfig+0x2d4>)
 8004136:	fba3 2301 	umull	r2, r3, r3, r1
 800413a:	095b      	lsrs	r3, r3, #5
 800413c:	2264      	movs	r2, #100	; 0x64
 800413e:	fb02 f303 	mul.w	r3, r2, r3
 8004142:	1acb      	subs	r3, r1, r3
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800414a:	4b36      	ldr	r3, [pc, #216]	; (8004224 <UART_SetConfig+0x2d4>)
 800414c:	fba3 2302 	umull	r2, r3, r3, r2
 8004150:	095b      	lsrs	r3, r3, #5
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004158:	441c      	add	r4, r3
 800415a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800415e:	2200      	movs	r2, #0
 8004160:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004164:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004168:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800416c:	4642      	mov	r2, r8
 800416e:	464b      	mov	r3, r9
 8004170:	1891      	adds	r1, r2, r2
 8004172:	63b9      	str	r1, [r7, #56]	; 0x38
 8004174:	415b      	adcs	r3, r3
 8004176:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004178:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800417c:	4641      	mov	r1, r8
 800417e:	1851      	adds	r1, r2, r1
 8004180:	6339      	str	r1, [r7, #48]	; 0x30
 8004182:	4649      	mov	r1, r9
 8004184:	414b      	adcs	r3, r1
 8004186:	637b      	str	r3, [r7, #52]	; 0x34
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	f04f 0300 	mov.w	r3, #0
 8004190:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004194:	4659      	mov	r1, fp
 8004196:	00cb      	lsls	r3, r1, #3
 8004198:	4651      	mov	r1, sl
 800419a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800419e:	4651      	mov	r1, sl
 80041a0:	00ca      	lsls	r2, r1, #3
 80041a2:	4610      	mov	r0, r2
 80041a4:	4619      	mov	r1, r3
 80041a6:	4603      	mov	r3, r0
 80041a8:	4642      	mov	r2, r8
 80041aa:	189b      	adds	r3, r3, r2
 80041ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041b0:	464b      	mov	r3, r9
 80041b2:	460a      	mov	r2, r1
 80041b4:	eb42 0303 	adc.w	r3, r2, r3
 80041b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80041c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80041cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80041d0:	460b      	mov	r3, r1
 80041d2:	18db      	adds	r3, r3, r3
 80041d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80041d6:	4613      	mov	r3, r2
 80041d8:	eb42 0303 	adc.w	r3, r2, r3
 80041dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80041e6:	f7fb fff7 	bl	80001d8 <__aeabi_uldivmod>
 80041ea:	4602      	mov	r2, r0
 80041ec:	460b      	mov	r3, r1
 80041ee:	4b0d      	ldr	r3, [pc, #52]	; (8004224 <UART_SetConfig+0x2d4>)
 80041f0:	fba3 1302 	umull	r1, r3, r3, r2
 80041f4:	095b      	lsrs	r3, r3, #5
 80041f6:	2164      	movs	r1, #100	; 0x64
 80041f8:	fb01 f303 	mul.w	r3, r1, r3
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	3332      	adds	r3, #50	; 0x32
 8004202:	4a08      	ldr	r2, [pc, #32]	; (8004224 <UART_SetConfig+0x2d4>)
 8004204:	fba2 2303 	umull	r2, r3, r2, r3
 8004208:	095b      	lsrs	r3, r3, #5
 800420a:	f003 0207 	and.w	r2, r3, #7
 800420e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4422      	add	r2, r4
 8004216:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004218:	e105      	b.n	8004426 <UART_SetConfig+0x4d6>
 800421a:	bf00      	nop
 800421c:	40011000 	.word	0x40011000
 8004220:	40011400 	.word	0x40011400
 8004224:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800422c:	2200      	movs	r2, #0
 800422e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004232:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004236:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800423a:	4642      	mov	r2, r8
 800423c:	464b      	mov	r3, r9
 800423e:	1891      	adds	r1, r2, r2
 8004240:	6239      	str	r1, [r7, #32]
 8004242:	415b      	adcs	r3, r3
 8004244:	627b      	str	r3, [r7, #36]	; 0x24
 8004246:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800424a:	4641      	mov	r1, r8
 800424c:	1854      	adds	r4, r2, r1
 800424e:	4649      	mov	r1, r9
 8004250:	eb43 0501 	adc.w	r5, r3, r1
 8004254:	f04f 0200 	mov.w	r2, #0
 8004258:	f04f 0300 	mov.w	r3, #0
 800425c:	00eb      	lsls	r3, r5, #3
 800425e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004262:	00e2      	lsls	r2, r4, #3
 8004264:	4614      	mov	r4, r2
 8004266:	461d      	mov	r5, r3
 8004268:	4643      	mov	r3, r8
 800426a:	18e3      	adds	r3, r4, r3
 800426c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004270:	464b      	mov	r3, r9
 8004272:	eb45 0303 	adc.w	r3, r5, r3
 8004276:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800427a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004286:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800428a:	f04f 0200 	mov.w	r2, #0
 800428e:	f04f 0300 	mov.w	r3, #0
 8004292:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004296:	4629      	mov	r1, r5
 8004298:	008b      	lsls	r3, r1, #2
 800429a:	4621      	mov	r1, r4
 800429c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042a0:	4621      	mov	r1, r4
 80042a2:	008a      	lsls	r2, r1, #2
 80042a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80042a8:	f7fb ff96 	bl	80001d8 <__aeabi_uldivmod>
 80042ac:	4602      	mov	r2, r0
 80042ae:	460b      	mov	r3, r1
 80042b0:	4b60      	ldr	r3, [pc, #384]	; (8004434 <UART_SetConfig+0x4e4>)
 80042b2:	fba3 2302 	umull	r2, r3, r3, r2
 80042b6:	095b      	lsrs	r3, r3, #5
 80042b8:	011c      	lsls	r4, r3, #4
 80042ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042be:	2200      	movs	r2, #0
 80042c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80042c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80042cc:	4642      	mov	r2, r8
 80042ce:	464b      	mov	r3, r9
 80042d0:	1891      	adds	r1, r2, r2
 80042d2:	61b9      	str	r1, [r7, #24]
 80042d4:	415b      	adcs	r3, r3
 80042d6:	61fb      	str	r3, [r7, #28]
 80042d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042dc:	4641      	mov	r1, r8
 80042de:	1851      	adds	r1, r2, r1
 80042e0:	6139      	str	r1, [r7, #16]
 80042e2:	4649      	mov	r1, r9
 80042e4:	414b      	adcs	r3, r1
 80042e6:	617b      	str	r3, [r7, #20]
 80042e8:	f04f 0200 	mov.w	r2, #0
 80042ec:	f04f 0300 	mov.w	r3, #0
 80042f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042f4:	4659      	mov	r1, fp
 80042f6:	00cb      	lsls	r3, r1, #3
 80042f8:	4651      	mov	r1, sl
 80042fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042fe:	4651      	mov	r1, sl
 8004300:	00ca      	lsls	r2, r1, #3
 8004302:	4610      	mov	r0, r2
 8004304:	4619      	mov	r1, r3
 8004306:	4603      	mov	r3, r0
 8004308:	4642      	mov	r2, r8
 800430a:	189b      	adds	r3, r3, r2
 800430c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004310:	464b      	mov	r3, r9
 8004312:	460a      	mov	r2, r1
 8004314:	eb42 0303 	adc.w	r3, r2, r3
 8004318:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800431c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	67bb      	str	r3, [r7, #120]	; 0x78
 8004326:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004328:	f04f 0200 	mov.w	r2, #0
 800432c:	f04f 0300 	mov.w	r3, #0
 8004330:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004334:	4649      	mov	r1, r9
 8004336:	008b      	lsls	r3, r1, #2
 8004338:	4641      	mov	r1, r8
 800433a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800433e:	4641      	mov	r1, r8
 8004340:	008a      	lsls	r2, r1, #2
 8004342:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004346:	f7fb ff47 	bl	80001d8 <__aeabi_uldivmod>
 800434a:	4602      	mov	r2, r0
 800434c:	460b      	mov	r3, r1
 800434e:	4b39      	ldr	r3, [pc, #228]	; (8004434 <UART_SetConfig+0x4e4>)
 8004350:	fba3 1302 	umull	r1, r3, r3, r2
 8004354:	095b      	lsrs	r3, r3, #5
 8004356:	2164      	movs	r1, #100	; 0x64
 8004358:	fb01 f303 	mul.w	r3, r1, r3
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	3332      	adds	r3, #50	; 0x32
 8004362:	4a34      	ldr	r2, [pc, #208]	; (8004434 <UART_SetConfig+0x4e4>)
 8004364:	fba2 2303 	umull	r2, r3, r2, r3
 8004368:	095b      	lsrs	r3, r3, #5
 800436a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800436e:	441c      	add	r4, r3
 8004370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004374:	2200      	movs	r2, #0
 8004376:	673b      	str	r3, [r7, #112]	; 0x70
 8004378:	677a      	str	r2, [r7, #116]	; 0x74
 800437a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800437e:	4642      	mov	r2, r8
 8004380:	464b      	mov	r3, r9
 8004382:	1891      	adds	r1, r2, r2
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	415b      	adcs	r3, r3
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800438e:	4641      	mov	r1, r8
 8004390:	1851      	adds	r1, r2, r1
 8004392:	6039      	str	r1, [r7, #0]
 8004394:	4649      	mov	r1, r9
 8004396:	414b      	adcs	r3, r1
 8004398:	607b      	str	r3, [r7, #4]
 800439a:	f04f 0200 	mov.w	r2, #0
 800439e:	f04f 0300 	mov.w	r3, #0
 80043a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043a6:	4659      	mov	r1, fp
 80043a8:	00cb      	lsls	r3, r1, #3
 80043aa:	4651      	mov	r1, sl
 80043ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043b0:	4651      	mov	r1, sl
 80043b2:	00ca      	lsls	r2, r1, #3
 80043b4:	4610      	mov	r0, r2
 80043b6:	4619      	mov	r1, r3
 80043b8:	4603      	mov	r3, r0
 80043ba:	4642      	mov	r2, r8
 80043bc:	189b      	adds	r3, r3, r2
 80043be:	66bb      	str	r3, [r7, #104]	; 0x68
 80043c0:	464b      	mov	r3, r9
 80043c2:	460a      	mov	r2, r1
 80043c4:	eb42 0303 	adc.w	r3, r2, r3
 80043c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	663b      	str	r3, [r7, #96]	; 0x60
 80043d4:	667a      	str	r2, [r7, #100]	; 0x64
 80043d6:	f04f 0200 	mov.w	r2, #0
 80043da:	f04f 0300 	mov.w	r3, #0
 80043de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80043e2:	4649      	mov	r1, r9
 80043e4:	008b      	lsls	r3, r1, #2
 80043e6:	4641      	mov	r1, r8
 80043e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043ec:	4641      	mov	r1, r8
 80043ee:	008a      	lsls	r2, r1, #2
 80043f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80043f4:	f7fb fef0 	bl	80001d8 <__aeabi_uldivmod>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4b0d      	ldr	r3, [pc, #52]	; (8004434 <UART_SetConfig+0x4e4>)
 80043fe:	fba3 1302 	umull	r1, r3, r3, r2
 8004402:	095b      	lsrs	r3, r3, #5
 8004404:	2164      	movs	r1, #100	; 0x64
 8004406:	fb01 f303 	mul.w	r3, r1, r3
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	011b      	lsls	r3, r3, #4
 800440e:	3332      	adds	r3, #50	; 0x32
 8004410:	4a08      	ldr	r2, [pc, #32]	; (8004434 <UART_SetConfig+0x4e4>)
 8004412:	fba2 2303 	umull	r2, r3, r2, r3
 8004416:	095b      	lsrs	r3, r3, #5
 8004418:	f003 020f 	and.w	r2, r3, #15
 800441c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4422      	add	r2, r4
 8004424:	609a      	str	r2, [r3, #8]
}
 8004426:	bf00      	nop
 8004428:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800442c:	46bd      	mov	sp, r7
 800442e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004432:	bf00      	nop
 8004434:	51eb851f 	.word	0x51eb851f

08004438 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004438:	b084      	sub	sp, #16
 800443a:	b580      	push	{r7, lr}
 800443c:	b084      	sub	sp, #16
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
 8004442:	f107 001c 	add.w	r0, r7, #28
 8004446:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800444a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444c:	2b01      	cmp	r3, #1
 800444e:	d122      	bne.n	8004496 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004454:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004464:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800447a:	2b01      	cmp	r3, #1
 800447c:	d105      	bne.n	800448a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f001 fbee 	bl	8005c6c <USB_CoreReset>
 8004490:	4603      	mov	r3, r0
 8004492:	73fb      	strb	r3, [r7, #15]
 8004494:	e01a      	b.n	80044cc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f001 fbe2 	bl	8005c6c <USB_CoreReset>
 80044a8:	4603      	mov	r3, r0
 80044aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80044ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d106      	bne.n	80044c0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	639a      	str	r2, [r3, #56]	; 0x38
 80044be:	e005      	b.n	80044cc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80044cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d10b      	bne.n	80044ea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f043 0206 	orr.w	r2, r3, #6
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f043 0220 	orr.w	r2, r3, #32
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80044ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044f6:	b004      	add	sp, #16
 80044f8:	4770      	bx	lr
	...

080044fc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b087      	sub	sp, #28
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	4613      	mov	r3, r2
 8004508:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800450a:	79fb      	ldrb	r3, [r7, #7]
 800450c:	2b02      	cmp	r3, #2
 800450e:	d165      	bne.n	80045dc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	4a41      	ldr	r2, [pc, #260]	; (8004618 <USB_SetTurnaroundTime+0x11c>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d906      	bls.n	8004526 <USB_SetTurnaroundTime+0x2a>
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4a40      	ldr	r2, [pc, #256]	; (800461c <USB_SetTurnaroundTime+0x120>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d202      	bcs.n	8004526 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004520:	230f      	movs	r3, #15
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	e062      	b.n	80045ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	4a3c      	ldr	r2, [pc, #240]	; (800461c <USB_SetTurnaroundTime+0x120>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d306      	bcc.n	800453c <USB_SetTurnaroundTime+0x40>
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	4a3b      	ldr	r2, [pc, #236]	; (8004620 <USB_SetTurnaroundTime+0x124>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d202      	bcs.n	800453c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004536:	230e      	movs	r3, #14
 8004538:	617b      	str	r3, [r7, #20]
 800453a:	e057      	b.n	80045ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	4a38      	ldr	r2, [pc, #224]	; (8004620 <USB_SetTurnaroundTime+0x124>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d306      	bcc.n	8004552 <USB_SetTurnaroundTime+0x56>
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	4a37      	ldr	r2, [pc, #220]	; (8004624 <USB_SetTurnaroundTime+0x128>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d202      	bcs.n	8004552 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800454c:	230d      	movs	r3, #13
 800454e:	617b      	str	r3, [r7, #20]
 8004550:	e04c      	b.n	80045ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	4a33      	ldr	r2, [pc, #204]	; (8004624 <USB_SetTurnaroundTime+0x128>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d306      	bcc.n	8004568 <USB_SetTurnaroundTime+0x6c>
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	4a32      	ldr	r2, [pc, #200]	; (8004628 <USB_SetTurnaroundTime+0x12c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d802      	bhi.n	8004568 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004562:	230c      	movs	r3, #12
 8004564:	617b      	str	r3, [r7, #20]
 8004566:	e041      	b.n	80045ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	4a2f      	ldr	r2, [pc, #188]	; (8004628 <USB_SetTurnaroundTime+0x12c>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d906      	bls.n	800457e <USB_SetTurnaroundTime+0x82>
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	4a2e      	ldr	r2, [pc, #184]	; (800462c <USB_SetTurnaroundTime+0x130>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d802      	bhi.n	800457e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004578:	230b      	movs	r3, #11
 800457a:	617b      	str	r3, [r7, #20]
 800457c:	e036      	b.n	80045ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	4a2a      	ldr	r2, [pc, #168]	; (800462c <USB_SetTurnaroundTime+0x130>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d906      	bls.n	8004594 <USB_SetTurnaroundTime+0x98>
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	4a29      	ldr	r2, [pc, #164]	; (8004630 <USB_SetTurnaroundTime+0x134>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d802      	bhi.n	8004594 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800458e:	230a      	movs	r3, #10
 8004590:	617b      	str	r3, [r7, #20]
 8004592:	e02b      	b.n	80045ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	4a26      	ldr	r2, [pc, #152]	; (8004630 <USB_SetTurnaroundTime+0x134>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d906      	bls.n	80045aa <USB_SetTurnaroundTime+0xae>
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	4a25      	ldr	r2, [pc, #148]	; (8004634 <USB_SetTurnaroundTime+0x138>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d202      	bcs.n	80045aa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80045a4:	2309      	movs	r3, #9
 80045a6:	617b      	str	r3, [r7, #20]
 80045a8:	e020      	b.n	80045ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	4a21      	ldr	r2, [pc, #132]	; (8004634 <USB_SetTurnaroundTime+0x138>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d306      	bcc.n	80045c0 <USB_SetTurnaroundTime+0xc4>
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	4a20      	ldr	r2, [pc, #128]	; (8004638 <USB_SetTurnaroundTime+0x13c>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d802      	bhi.n	80045c0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80045ba:	2308      	movs	r3, #8
 80045bc:	617b      	str	r3, [r7, #20]
 80045be:	e015      	b.n	80045ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	4a1d      	ldr	r2, [pc, #116]	; (8004638 <USB_SetTurnaroundTime+0x13c>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d906      	bls.n	80045d6 <USB_SetTurnaroundTime+0xda>
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	4a1c      	ldr	r2, [pc, #112]	; (800463c <USB_SetTurnaroundTime+0x140>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d202      	bcs.n	80045d6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80045d0:	2307      	movs	r3, #7
 80045d2:	617b      	str	r3, [r7, #20]
 80045d4:	e00a      	b.n	80045ec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80045d6:	2306      	movs	r3, #6
 80045d8:	617b      	str	r3, [r7, #20]
 80045da:	e007      	b.n	80045ec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80045dc:	79fb      	ldrb	r3, [r7, #7]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d102      	bne.n	80045e8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80045e2:	2309      	movs	r3, #9
 80045e4:	617b      	str	r3, [r7, #20]
 80045e6:	e001      	b.n	80045ec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80045e8:	2309      	movs	r3, #9
 80045ea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	68da      	ldr	r2, [r3, #12]
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	029b      	lsls	r3, r3, #10
 8004600:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004604:	431a      	orrs	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	371c      	adds	r7, #28
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	00d8acbf 	.word	0x00d8acbf
 800461c:	00e4e1c0 	.word	0x00e4e1c0
 8004620:	00f42400 	.word	0x00f42400
 8004624:	01067380 	.word	0x01067380
 8004628:	011a499f 	.word	0x011a499f
 800462c:	01312cff 	.word	0x01312cff
 8004630:	014ca43f 	.word	0x014ca43f
 8004634:	016e3600 	.word	0x016e3600
 8004638:	01a6ab1f 	.word	0x01a6ab1f
 800463c:	01e84800 	.word	0x01e84800

08004640 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f043 0201 	orr.w	r2, r3, #1
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004662:	b480      	push	{r7}
 8004664:	b083      	sub	sp, #12
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f023 0201 	bic.w	r2, r3, #1
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	460b      	mov	r3, r1
 800468e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80046a0:	78fb      	ldrb	r3, [r7, #3]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d115      	bne.n	80046d2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80046b2:	2001      	movs	r0, #1
 80046b4:	f7fc fc72 	bl	8000f9c <HAL_Delay>
      ms++;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	3301      	adds	r3, #1
 80046bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f001 fa45 	bl	8005b4e <USB_GetMode>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d01e      	beq.n	8004708 <USB_SetCurrentMode+0x84>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2b31      	cmp	r3, #49	; 0x31
 80046ce:	d9f0      	bls.n	80046b2 <USB_SetCurrentMode+0x2e>
 80046d0:	e01a      	b.n	8004708 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80046d2:	78fb      	ldrb	r3, [r7, #3]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d115      	bne.n	8004704 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80046e4:	2001      	movs	r0, #1
 80046e6:	f7fc fc59 	bl	8000f9c <HAL_Delay>
      ms++;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	3301      	adds	r3, #1
 80046ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f001 fa2c 	bl	8005b4e <USB_GetMode>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d005      	beq.n	8004708 <USB_SetCurrentMode+0x84>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b31      	cmp	r3, #49	; 0x31
 8004700:	d9f0      	bls.n	80046e4 <USB_SetCurrentMode+0x60>
 8004702:	e001      	b.n	8004708 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e005      	b.n	8004714 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2b32      	cmp	r3, #50	; 0x32
 800470c:	d101      	bne.n	8004712 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e000      	b.n	8004714 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800471c:	b084      	sub	sp, #16
 800471e:	b580      	push	{r7, lr}
 8004720:	b086      	sub	sp, #24
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
 8004726:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800472a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800472e:	2300      	movs	r3, #0
 8004730:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004736:	2300      	movs	r3, #0
 8004738:	613b      	str	r3, [r7, #16]
 800473a:	e009      	b.n	8004750 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	3340      	adds	r3, #64	; 0x40
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	2200      	movs	r2, #0
 8004748:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	3301      	adds	r3, #1
 800474e:	613b      	str	r3, [r7, #16]
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	2b0e      	cmp	r3, #14
 8004754:	d9f2      	bls.n	800473c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004758:	2b00      	cmp	r3, #0
 800475a:	d11c      	bne.n	8004796 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800476a:	f043 0302 	orr.w	r3, r3, #2
 800476e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004774:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004780:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	639a      	str	r2, [r3, #56]	; 0x38
 8004794:	e00b      	b.n	80047ae <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047b4:	461a      	mov	r2, r3
 80047b6:	2300      	movs	r3, #0
 80047b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c0:	4619      	mov	r1, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c8:	461a      	mov	r2, r3
 80047ca:	680b      	ldr	r3, [r1, #0]
 80047cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d10c      	bne.n	80047ee <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80047d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d104      	bne.n	80047e4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80047da:	2100      	movs	r1, #0
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 f965 	bl	8004aac <USB_SetDevSpeed>
 80047e2:	e008      	b.n	80047f6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80047e4:	2101      	movs	r1, #1
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f960 	bl	8004aac <USB_SetDevSpeed>
 80047ec:	e003      	b.n	80047f6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80047ee:	2103      	movs	r1, #3
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 f95b 	bl	8004aac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80047f6:	2110      	movs	r1, #16
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 f8f3 	bl	80049e4 <USB_FlushTxFifo>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 f91f 	bl	8004a4c <USB_FlushRxFifo>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d001      	beq.n	8004818 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800481e:	461a      	mov	r2, r3
 8004820:	2300      	movs	r3, #0
 8004822:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800482a:	461a      	mov	r2, r3
 800482c:	2300      	movs	r3, #0
 800482e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004836:	461a      	mov	r2, r3
 8004838:	2300      	movs	r3, #0
 800483a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800483c:	2300      	movs	r3, #0
 800483e:	613b      	str	r3, [r7, #16]
 8004840:	e043      	b.n	80048ca <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	4413      	add	r3, r2
 800484a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004854:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004858:	d118      	bne.n	800488c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10a      	bne.n	8004876 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	015a      	lsls	r2, r3, #5
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4413      	add	r3, r2
 8004868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800486c:	461a      	mov	r2, r3
 800486e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004872:	6013      	str	r3, [r2, #0]
 8004874:	e013      	b.n	800489e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	015a      	lsls	r2, r3, #5
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	4413      	add	r3, r2
 800487e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004882:	461a      	mov	r2, r3
 8004884:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004888:	6013      	str	r3, [r2, #0]
 800488a:	e008      	b.n	800489e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	015a      	lsls	r2, r3, #5
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4413      	add	r3, r2
 8004894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004898:	461a      	mov	r2, r3
 800489a:	2300      	movs	r3, #0
 800489c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	015a      	lsls	r2, r3, #5
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	4413      	add	r3, r2
 80048a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048aa:	461a      	mov	r2, r3
 80048ac:	2300      	movs	r3, #0
 80048ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	015a      	lsls	r2, r3, #5
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4413      	add	r3, r2
 80048b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048bc:	461a      	mov	r2, r3
 80048be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	3301      	adds	r3, #1
 80048c8:	613b      	str	r3, [r7, #16]
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d3b7      	bcc.n	8004842 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048d2:	2300      	movs	r3, #0
 80048d4:	613b      	str	r3, [r7, #16]
 80048d6:	e043      	b.n	8004960 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048ee:	d118      	bne.n	8004922 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10a      	bne.n	800490c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	015a      	lsls	r2, r3, #5
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	4413      	add	r3, r2
 80048fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004902:	461a      	mov	r2, r3
 8004904:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004908:	6013      	str	r3, [r2, #0]
 800490a:	e013      	b.n	8004934 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	015a      	lsls	r2, r3, #5
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	4413      	add	r3, r2
 8004914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004918:	461a      	mov	r2, r3
 800491a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800491e:	6013      	str	r3, [r2, #0]
 8004920:	e008      	b.n	8004934 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4413      	add	r3, r2
 800492a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492e:	461a      	mov	r2, r3
 8004930:	2300      	movs	r3, #0
 8004932:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4413      	add	r3, r2
 800493c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004940:	461a      	mov	r2, r3
 8004942:	2300      	movs	r3, #0
 8004944:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	015a      	lsls	r2, r3, #5
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	4413      	add	r3, r2
 800494e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004952:	461a      	mov	r2, r3
 8004954:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004958:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	3301      	adds	r3, #1
 800495e:	613b      	str	r3, [r7, #16]
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	429a      	cmp	r2, r3
 8004966:	d3b7      	bcc.n	80048d8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004976:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800497a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004988:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800498a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498c:	2b00      	cmp	r3, #0
 800498e:	d105      	bne.n	800499c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	f043 0210 	orr.w	r2, r3, #16
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	699a      	ldr	r2, [r3, #24]
 80049a0:	4b0f      	ldr	r3, [pc, #60]	; (80049e0 <USB_DevInit+0x2c4>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80049a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d005      	beq.n	80049ba <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	f043 0208 	orr.w	r2, r3, #8
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80049ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d107      	bne.n	80049d0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049c8:	f043 0304 	orr.w	r3, r3, #4
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80049d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3718      	adds	r7, #24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049dc:	b004      	add	sp, #16
 80049de:	4770      	bx	lr
 80049e0:	803c3800 	.word	0x803c3800

080049e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	3301      	adds	r3, #1
 80049f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4a13      	ldr	r2, [pc, #76]	; (8004a48 <USB_FlushTxFifo+0x64>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d901      	bls.n	8004a04 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e01b      	b.n	8004a3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	daf2      	bge.n	80049f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	019b      	lsls	r3, r3, #6
 8004a14:	f043 0220 	orr.w	r2, r3, #32
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	4a08      	ldr	r2, [pc, #32]	; (8004a48 <USB_FlushTxFifo+0x64>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d901      	bls.n	8004a2e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e006      	b.n	8004a3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f003 0320 	and.w	r3, r3, #32
 8004a36:	2b20      	cmp	r3, #32
 8004a38:	d0f0      	beq.n	8004a1c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	00030d40 	.word	0x00030d40

08004a4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a54:	2300      	movs	r3, #0
 8004a56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4a11      	ldr	r2, [pc, #68]	; (8004aa8 <USB_FlushRxFifo+0x5c>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d901      	bls.n	8004a6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e018      	b.n	8004a9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	daf2      	bge.n	8004a58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2210      	movs	r2, #16
 8004a7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	4a08      	ldr	r2, [pc, #32]	; (8004aa8 <USB_FlushRxFifo+0x5c>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d901      	bls.n	8004a8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e006      	b.n	8004a9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f003 0310 	and.w	r3, r3, #16
 8004a96:	2b10      	cmp	r3, #16
 8004a98:	d0f0      	beq.n	8004a7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3714      	adds	r7, #20
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	00030d40 	.word	0x00030d40

08004aac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	78fb      	ldrb	r3, [r7, #3]
 8004ac6:	68f9      	ldr	r1, [r7, #12]
 8004ac8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004acc:	4313      	orrs	r3, r2
 8004ace:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b087      	sub	sp, #28
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f003 0306 	and.w	r3, r3, #6
 8004af6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d102      	bne.n	8004b04 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004afe:	2300      	movs	r3, #0
 8004b00:	75fb      	strb	r3, [r7, #23]
 8004b02:	e00a      	b.n	8004b1a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d002      	beq.n	8004b10 <USB_GetDevSpeed+0x32>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2b06      	cmp	r3, #6
 8004b0e:	d102      	bne.n	8004b16 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004b10:	2302      	movs	r3, #2
 8004b12:	75fb      	strb	r3, [r7, #23]
 8004b14:	e001      	b.n	8004b1a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004b16:	230f      	movs	r3, #15
 8004b18:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	371c      	adds	r7, #28
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	785b      	ldrb	r3, [r3, #1]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d13a      	bne.n	8004bba <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b4a:	69da      	ldr	r2, [r3, #28]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	f003 030f 	and.w	r3, r3, #15
 8004b54:	2101      	movs	r1, #1
 8004b56:	fa01 f303 	lsl.w	r3, r1, r3
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	68f9      	ldr	r1, [r7, #12]
 8004b5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b62:	4313      	orrs	r3, r2
 8004b64:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	015a      	lsls	r2, r3, #5
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d155      	bne.n	8004c28 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	791b      	ldrb	r3, [r3, #4]
 8004b96:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b98:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	059b      	lsls	r3, r3, #22
 8004b9e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	0151      	lsls	r1, r2, #5
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	440a      	add	r2, r1
 8004baa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bb6:	6013      	str	r3, [r2, #0]
 8004bb8:	e036      	b.n	8004c28 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc0:	69da      	ldr	r2, [r3, #28]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	f003 030f 	and.w	r3, r3, #15
 8004bca:	2101      	movs	r1, #1
 8004bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd0:	041b      	lsls	r3, r3, #16
 8004bd2:	68f9      	ldr	r1, [r7, #12]
 8004bd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d11a      	bne.n	8004c28 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	015a      	lsls	r2, r3, #5
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	791b      	ldrb	r3, [r3, #4]
 8004c0c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c0e:	430b      	orrs	r3, r1
 8004c10:	4313      	orrs	r3, r2
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	0151      	lsls	r1, r2, #5
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	440a      	add	r2, r1
 8004c1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c26:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
	...

08004c38 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	785b      	ldrb	r3, [r3, #1]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d161      	bne.n	8004d18 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	015a      	lsls	r2, r3, #5
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c6a:	d11f      	bne.n	8004cac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	015a      	lsls	r2, r3, #5
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	4413      	add	r3, r2
 8004c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	0151      	lsls	r1, r2, #5
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	440a      	add	r2, r1
 8004c82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c8a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	015a      	lsls	r2, r3, #5
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4413      	add	r3, r2
 8004c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	0151      	lsls	r1, r2, #5
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	440a      	add	r2, r1
 8004ca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ca6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004caa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	f003 030f 	and.w	r3, r3, #15
 8004cbc:	2101      	movs	r1, #1
 8004cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	43db      	mvns	r3, r3
 8004cc6:	68f9      	ldr	r1, [r7, #12]
 8004cc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ccc:	4013      	ands	r3, r2
 8004cce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd6:	69da      	ldr	r2, [r3, #28]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	f003 030f 	and.w	r3, r3, #15
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	43db      	mvns	r3, r3
 8004cea:	68f9      	ldr	r1, [r7, #12]
 8004cec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	0159      	lsls	r1, r3, #5
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	440b      	add	r3, r1
 8004d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4b35      	ldr	r3, [pc, #212]	; (8004de8 <USB_DeactivateEndpoint+0x1b0>)
 8004d12:	4013      	ands	r3, r2
 8004d14:	600b      	str	r3, [r1, #0]
 8004d16:	e060      	b.n	8004dda <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d2e:	d11f      	bne.n	8004d70 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	0151      	lsls	r1, r2, #5
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	440a      	add	r2, r1
 8004d46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d4e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	0151      	lsls	r1, r2, #5
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	440a      	add	r2, r1
 8004d66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	f003 030f 	and.w	r3, r3, #15
 8004d80:	2101      	movs	r1, #1
 8004d82:	fa01 f303 	lsl.w	r3, r1, r3
 8004d86:	041b      	lsls	r3, r3, #16
 8004d88:	43db      	mvns	r3, r3
 8004d8a:	68f9      	ldr	r1, [r7, #12]
 8004d8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d90:	4013      	ands	r3, r2
 8004d92:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d9a:	69da      	ldr	r2, [r3, #28]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	f003 030f 	and.w	r3, r3, #15
 8004da4:	2101      	movs	r1, #1
 8004da6:	fa01 f303 	lsl.w	r3, r1, r3
 8004daa:	041b      	lsls	r3, r3, #16
 8004dac:	43db      	mvns	r3, r3
 8004dae:	68f9      	ldr	r1, [r7, #12]
 8004db0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004db4:	4013      	ands	r3, r2
 8004db6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	0159      	lsls	r1, r3, #5
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	440b      	add	r3, r1
 8004dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	4b05      	ldr	r3, [pc, #20]	; (8004dec <USB_DeactivateEndpoint+0x1b4>)
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	ec337800 	.word	0xec337800
 8004dec:	eff37800 	.word	0xeff37800

08004df0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b08a      	sub	sp, #40	; 0x28
 8004df4:	af02      	add	r7, sp, #8
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	785b      	ldrb	r3, [r3, #1]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	f040 815c 	bne.w	80050ca <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d132      	bne.n	8004e80 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	015a      	lsls	r2, r3, #5
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	0151      	lsls	r1, r2, #5
 8004e2c:	69fa      	ldr	r2, [r7, #28]
 8004e2e:	440a      	add	r2, r1
 8004e30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	015a      	lsls	r2, r3, #5
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	0151      	lsls	r1, r2, #5
 8004e50:	69fa      	ldr	r2, [r7, #28]
 8004e52:	440a      	add	r2, r1
 8004e54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	0151      	lsls	r1, r2, #5
 8004e70:	69fa      	ldr	r2, [r7, #28]
 8004e72:	440a      	add	r2, r1
 8004e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e78:	0cdb      	lsrs	r3, r3, #19
 8004e7a:	04db      	lsls	r3, r3, #19
 8004e7c:	6113      	str	r3, [r2, #16]
 8004e7e:	e074      	b.n	8004f6a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	69ba      	ldr	r2, [r7, #24]
 8004e90:	0151      	lsls	r1, r2, #5
 8004e92:	69fa      	ldr	r2, [r7, #28]
 8004e94:	440a      	add	r2, r1
 8004e96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e9a:	0cdb      	lsrs	r3, r3, #19
 8004e9c:	04db      	lsls	r3, r3, #19
 8004e9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	015a      	lsls	r2, r3, #5
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	0151      	lsls	r1, r2, #5
 8004eb2:	69fa      	ldr	r2, [r7, #28]
 8004eb4:	440a      	add	r2, r1
 8004eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ebe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ec2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	6999      	ldr	r1, [r3, #24]
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	440b      	add	r3, r1
 8004edc:	1e59      	subs	r1, r3, #1
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ee6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004ee8:	4b9d      	ldr	r3, [pc, #628]	; (8005160 <USB_EPStartXfer+0x370>)
 8004eea:	400b      	ands	r3, r1
 8004eec:	69b9      	ldr	r1, [r7, #24]
 8004eee:	0148      	lsls	r0, r1, #5
 8004ef0:	69f9      	ldr	r1, [r7, #28]
 8004ef2:	4401      	add	r1, r0
 8004ef4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f08:	691a      	ldr	r2, [r3, #16]
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f12:	69b9      	ldr	r1, [r7, #24]
 8004f14:	0148      	lsls	r0, r1, #5
 8004f16:	69f9      	ldr	r1, [r7, #28]
 8004f18:	4401      	add	r1, r0
 8004f1a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	791b      	ldrb	r3, [r3, #4]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d11f      	bne.n	8004f6a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	0151      	lsls	r1, r2, #5
 8004f3c:	69fa      	ldr	r2, [r7, #28]
 8004f3e:	440a      	add	r2, r1
 8004f40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f44:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004f48:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	015a      	lsls	r2, r3, #5
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	4413      	add	r3, r2
 8004f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	0151      	lsls	r1, r2, #5
 8004f5c:	69fa      	ldr	r2, [r7, #28]
 8004f5e:	440a      	add	r2, r1
 8004f60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f64:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f68:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004f6a:	79fb      	ldrb	r3, [r7, #7]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d14b      	bne.n	8005008 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d009      	beq.n	8004f8c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f84:	461a      	mov	r2, r3
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	791b      	ldrb	r3, [r3, #4]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d128      	bne.n	8004fe6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d110      	bne.n	8004fc6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	0151      	lsls	r1, r2, #5
 8004fb6:	69fa      	ldr	r2, [r7, #28]
 8004fb8:	440a      	add	r2, r1
 8004fba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fbe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fc2:	6013      	str	r3, [r2, #0]
 8004fc4:	e00f      	b.n	8004fe6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	69ba      	ldr	r2, [r7, #24]
 8004fd6:	0151      	lsls	r1, r2, #5
 8004fd8:	69fa      	ldr	r2, [r7, #28]
 8004fda:	440a      	add	r2, r1
 8004fdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fe4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	0151      	lsls	r1, r2, #5
 8004ff8:	69fa      	ldr	r2, [r7, #28]
 8004ffa:	440a      	add	r2, r1
 8004ffc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005000:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005004:	6013      	str	r3, [r2, #0]
 8005006:	e133      	b.n	8005270 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	4413      	add	r3, r2
 8005010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	0151      	lsls	r1, r2, #5
 800501a:	69fa      	ldr	r2, [r7, #28]
 800501c:	440a      	add	r2, r1
 800501e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005022:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005026:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	791b      	ldrb	r3, [r3, #4]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d015      	beq.n	800505c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 811b 	beq.w	8005270 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	f003 030f 	and.w	r3, r3, #15
 800504a:	2101      	movs	r1, #1
 800504c:	fa01 f303 	lsl.w	r3, r1, r3
 8005050:	69f9      	ldr	r1, [r7, #28]
 8005052:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005056:	4313      	orrs	r3, r2
 8005058:	634b      	str	r3, [r1, #52]	; 0x34
 800505a:	e109      	b.n	8005270 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005068:	2b00      	cmp	r3, #0
 800506a:	d110      	bne.n	800508e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	015a      	lsls	r2, r3, #5
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	4413      	add	r3, r2
 8005074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	69ba      	ldr	r2, [r7, #24]
 800507c:	0151      	lsls	r1, r2, #5
 800507e:	69fa      	ldr	r2, [r7, #28]
 8005080:	440a      	add	r2, r1
 8005082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005086:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800508a:	6013      	str	r3, [r2, #0]
 800508c:	e00f      	b.n	80050ae <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	4413      	add	r3, r2
 8005096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	0151      	lsls	r1, r2, #5
 80050a0:	69fa      	ldr	r2, [r7, #28]
 80050a2:	440a      	add	r2, r1
 80050a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ac:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	6919      	ldr	r1, [r3, #16]
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	781a      	ldrb	r2, [r3, #0]
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	b298      	uxth	r0, r3
 80050bc:	79fb      	ldrb	r3, [r7, #7]
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	4603      	mov	r3, r0
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f000 fade 	bl	8005684 <USB_WritePacket>
 80050c8:	e0d2      	b.n	8005270 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	015a      	lsls	r2, r3, #5
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	69ba      	ldr	r2, [r7, #24]
 80050da:	0151      	lsls	r1, r2, #5
 80050dc:	69fa      	ldr	r2, [r7, #28]
 80050de:	440a      	add	r2, r1
 80050e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050e4:	0cdb      	lsrs	r3, r3, #19
 80050e6:	04db      	lsls	r3, r3, #19
 80050e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	0151      	lsls	r1, r2, #5
 80050fc:	69fa      	ldr	r2, [r7, #28]
 80050fe:	440a      	add	r2, r1
 8005100:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005104:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005108:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800510c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d126      	bne.n	8005164 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	015a      	lsls	r2, r3, #5
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	4413      	add	r3, r2
 800511e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005122:	691a      	ldr	r2, [r3, #16]
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800512c:	69b9      	ldr	r1, [r7, #24]
 800512e:	0148      	lsls	r0, r1, #5
 8005130:	69f9      	ldr	r1, [r7, #28]
 8005132:	4401      	add	r1, r0
 8005134:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005138:	4313      	orrs	r3, r2
 800513a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	4413      	add	r3, r2
 8005144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	0151      	lsls	r1, r2, #5
 800514e:	69fa      	ldr	r2, [r7, #28]
 8005150:	440a      	add	r2, r1
 8005152:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005156:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800515a:	6113      	str	r3, [r2, #16]
 800515c:	e03a      	b.n	80051d4 <USB_EPStartXfer+0x3e4>
 800515e:	bf00      	nop
 8005160:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	699a      	ldr	r2, [r3, #24]
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	4413      	add	r3, r2
 800516e:	1e5a      	subs	r2, r3, #1
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	fbb2 f3f3 	udiv	r3, r2, r3
 8005178:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	8afa      	ldrh	r2, [r7, #22]
 8005180:	fb03 f202 	mul.w	r2, r3, r2
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005194:	691a      	ldr	r2, [r3, #16]
 8005196:	8afb      	ldrh	r3, [r7, #22]
 8005198:	04d9      	lsls	r1, r3, #19
 800519a:	4b38      	ldr	r3, [pc, #224]	; (800527c <USB_EPStartXfer+0x48c>)
 800519c:	400b      	ands	r3, r1
 800519e:	69b9      	ldr	r1, [r7, #24]
 80051a0:	0148      	lsls	r0, r1, #5
 80051a2:	69f9      	ldr	r1, [r7, #28]
 80051a4:	4401      	add	r1, r0
 80051a6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051aa:	4313      	orrs	r3, r2
 80051ac:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	015a      	lsls	r2, r3, #5
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	4413      	add	r3, r2
 80051b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ba:	691a      	ldr	r2, [r3, #16]
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	69db      	ldr	r3, [r3, #28]
 80051c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051c4:	69b9      	ldr	r1, [r7, #24]
 80051c6:	0148      	lsls	r0, r1, #5
 80051c8:	69f9      	ldr	r1, [r7, #28]
 80051ca:	4401      	add	r1, r0
 80051cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051d0:	4313      	orrs	r3, r2
 80051d2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80051d4:	79fb      	ldrb	r3, [r7, #7]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d10d      	bne.n	80051f6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d009      	beq.n	80051f6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	6919      	ldr	r1, [r3, #16]
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	015a      	lsls	r2, r3, #5
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	4413      	add	r3, r2
 80051ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f2:	460a      	mov	r2, r1
 80051f4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	791b      	ldrb	r3, [r3, #4]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d128      	bne.n	8005250 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800520a:	2b00      	cmp	r3, #0
 800520c:	d110      	bne.n	8005230 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	4413      	add	r3, r2
 8005216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	0151      	lsls	r1, r2, #5
 8005220:	69fa      	ldr	r2, [r7, #28]
 8005222:	440a      	add	r2, r1
 8005224:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005228:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800522c:	6013      	str	r3, [r2, #0]
 800522e:	e00f      	b.n	8005250 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	4413      	add	r3, r2
 8005238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	0151      	lsls	r1, r2, #5
 8005242:	69fa      	ldr	r2, [r7, #28]
 8005244:	440a      	add	r2, r1
 8005246:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800524a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800524e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	015a      	lsls	r2, r3, #5
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	4413      	add	r3, r2
 8005258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	69ba      	ldr	r2, [r7, #24]
 8005260:	0151      	lsls	r1, r2, #5
 8005262:	69fa      	ldr	r2, [r7, #28]
 8005264:	440a      	add	r2, r1
 8005266:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800526a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800526e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3720      	adds	r7, #32
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	1ff80000 	.word	0x1ff80000

08005280 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005280:	b480      	push	{r7}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	4613      	mov	r3, r2
 800528c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	785b      	ldrb	r3, [r3, #1]
 800529c:	2b01      	cmp	r3, #1
 800529e:	f040 80ce 	bne.w	800543e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d132      	bne.n	8005310 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	0151      	lsls	r1, r2, #5
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	440a      	add	r2, r1
 80052c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	015a      	lsls	r2, r3, #5
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	4413      	add	r3, r2
 80052d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	0151      	lsls	r1, r2, #5
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	440a      	add	r2, r1
 80052e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	0151      	lsls	r1, r2, #5
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	440a      	add	r2, r1
 8005304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005308:	0cdb      	lsrs	r3, r3, #19
 800530a:	04db      	lsls	r3, r3, #19
 800530c:	6113      	str	r3, [r2, #16]
 800530e:	e04e      	b.n	80053ae <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	015a      	lsls	r2, r3, #5
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	4413      	add	r3, r2
 8005318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	0151      	lsls	r1, r2, #5
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	440a      	add	r2, r1
 8005326:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800532a:	0cdb      	lsrs	r3, r3, #19
 800532c:	04db      	lsls	r3, r3, #19
 800532e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	4413      	add	r3, r2
 8005338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	0151      	lsls	r1, r2, #5
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	440a      	add	r2, r1
 8005346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800534a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800534e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005352:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	699a      	ldr	r2, [r3, #24]
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	429a      	cmp	r2, r3
 800535e:	d903      	bls.n	8005368 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	68da      	ldr	r2, [r3, #12]
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	015a      	lsls	r2, r3, #5
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	4413      	add	r3, r2
 8005370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	0151      	lsls	r1, r2, #5
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	440a      	add	r2, r1
 800537e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005382:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005386:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	4413      	add	r3, r2
 8005390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005394:	691a      	ldr	r2, [r3, #16]
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800539e:	6939      	ldr	r1, [r7, #16]
 80053a0:	0148      	lsls	r0, r1, #5
 80053a2:	6979      	ldr	r1, [r7, #20]
 80053a4:	4401      	add	r1, r0
 80053a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80053aa:	4313      	orrs	r3, r2
 80053ac:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80053ae:	79fb      	ldrb	r3, [r7, #7]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d11e      	bne.n	80053f2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d009      	beq.n	80053d0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c8:	461a      	mov	r2, r3
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	0151      	lsls	r1, r2, #5
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	440a      	add	r2, r1
 80053e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053ee:	6013      	str	r3, [r2, #0]
 80053f0:	e097      	b.n	8005522 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	0151      	lsls	r1, r2, #5
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	440a      	add	r2, r1
 8005408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800540c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005410:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	2b00      	cmp	r3, #0
 8005418:	f000 8083 	beq.w	8005522 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005422:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	f003 030f 	and.w	r3, r3, #15
 800542c:	2101      	movs	r1, #1
 800542e:	fa01 f303 	lsl.w	r3, r1, r3
 8005432:	6979      	ldr	r1, [r7, #20]
 8005434:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005438:	4313      	orrs	r3, r2
 800543a:	634b      	str	r3, [r1, #52]	; 0x34
 800543c:	e071      	b.n	8005522 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	015a      	lsls	r2, r3, #5
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	4413      	add	r3, r2
 8005446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	0151      	lsls	r1, r2, #5
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	440a      	add	r2, r1
 8005454:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005458:	0cdb      	lsrs	r3, r3, #19
 800545a:	04db      	lsls	r3, r3, #19
 800545c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	4413      	add	r3, r2
 8005466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	0151      	lsls	r1, r2, #5
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	440a      	add	r2, r1
 8005474:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005478:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800547c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005480:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d003      	beq.n	8005492 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	68da      	ldr	r2, [r3, #12]
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	68da      	ldr	r2, [r3, #12]
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	0151      	lsls	r1, r2, #5
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	440a      	add	r2, r1
 80054b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c6:	691a      	ldr	r2, [r3, #16]
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	69db      	ldr	r3, [r3, #28]
 80054cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054d0:	6939      	ldr	r1, [r7, #16]
 80054d2:	0148      	lsls	r0, r1, #5
 80054d4:	6979      	ldr	r1, [r7, #20]
 80054d6:	4401      	add	r1, r0
 80054d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054dc:	4313      	orrs	r3, r2
 80054de:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80054e0:	79fb      	ldrb	r3, [r7, #7]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d10d      	bne.n	8005502 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d009      	beq.n	8005502 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	6919      	ldr	r1, [r3, #16]
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	015a      	lsls	r2, r3, #5
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	4413      	add	r3, r2
 80054fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054fe:	460a      	mov	r2, r1
 8005500:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	015a      	lsls	r2, r3, #5
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	4413      	add	r3, r2
 800550a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	0151      	lsls	r1, r2, #5
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	440a      	add	r2, r1
 8005518:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800551c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005520:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	371c      	adds	r7, #28
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800553a:	2300      	movs	r3, #0
 800553c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800553e:	2300      	movs	r3, #0
 8005540:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	785b      	ldrb	r3, [r3, #1]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d14a      	bne.n	80055e4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	4413      	add	r3, r2
 8005558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005562:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005566:	f040 8086 	bne.w	8005676 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	015a      	lsls	r2, r3, #5
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	4413      	add	r3, r2
 8005574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	7812      	ldrb	r2, [r2, #0]
 800557e:	0151      	lsls	r1, r2, #5
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	440a      	add	r2, r1
 8005584:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005588:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800558c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	4413      	add	r3, r2
 8005598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	683a      	ldr	r2, [r7, #0]
 80055a0:	7812      	ldrb	r2, [r2, #0]
 80055a2:	0151      	lsls	r1, r2, #5
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	440a      	add	r2, r1
 80055a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	3301      	adds	r3, #1
 80055b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80055be:	4293      	cmp	r3, r2
 80055c0:	d902      	bls.n	80055c8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	75fb      	strb	r3, [r7, #23]
          break;
 80055c6:	e056      	b.n	8005676 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055e0:	d0e7      	beq.n	80055b2 <USB_EPStopXfer+0x82>
 80055e2:	e048      	b.n	8005676 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	015a      	lsls	r2, r3, #5
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	4413      	add	r3, r2
 80055ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055fc:	d13b      	bne.n	8005676 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	015a      	lsls	r2, r3, #5
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	4413      	add	r3, r2
 8005608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	7812      	ldrb	r2, [r2, #0]
 8005612:	0151      	lsls	r1, r2, #5
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	440a      	add	r2, r1
 8005618:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800561c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005620:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	015a      	lsls	r2, r3, #5
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	4413      	add	r3, r2
 800562c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	7812      	ldrb	r2, [r2, #0]
 8005636:	0151      	lsls	r1, r2, #5
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	440a      	add	r2, r1
 800563c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005640:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005644:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	3301      	adds	r3, #1
 800564a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005652:	4293      	cmp	r3, r2
 8005654:	d902      	bls.n	800565c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	75fb      	strb	r3, [r7, #23]
          break;
 800565a:	e00c      	b.n	8005676 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	015a      	lsls	r2, r3, #5
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	4413      	add	r3, r2
 8005666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005670:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005674:	d0e7      	beq.n	8005646 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005676:	7dfb      	ldrb	r3, [r7, #23]
}
 8005678:	4618      	mov	r0, r3
 800567a:	371c      	adds	r7, #28
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005684:	b480      	push	{r7}
 8005686:	b089      	sub	sp, #36	; 0x24
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	4611      	mov	r1, r2
 8005690:	461a      	mov	r2, r3
 8005692:	460b      	mov	r3, r1
 8005694:	71fb      	strb	r3, [r7, #7]
 8005696:	4613      	mov	r3, r2
 8005698:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80056a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d123      	bne.n	80056f2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80056aa:	88bb      	ldrh	r3, [r7, #4]
 80056ac:	3303      	adds	r3, #3
 80056ae:	089b      	lsrs	r3, r3, #2
 80056b0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80056b2:	2300      	movs	r3, #0
 80056b4:	61bb      	str	r3, [r7, #24]
 80056b6:	e018      	b.n	80056ea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80056b8:	79fb      	ldrb	r3, [r7, #7]
 80056ba:	031a      	lsls	r2, r3, #12
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	4413      	add	r3, r2
 80056c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056c4:	461a      	mov	r2, r3
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6013      	str	r3, [r2, #0]
      pSrc++;
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	3301      	adds	r3, #1
 80056d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	3301      	adds	r3, #1
 80056d6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	3301      	adds	r3, #1
 80056dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	3301      	adds	r3, #1
 80056e2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	3301      	adds	r3, #1
 80056e8:	61bb      	str	r3, [r7, #24]
 80056ea:	69ba      	ldr	r2, [r7, #24]
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d3e2      	bcc.n	80056b8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3724      	adds	r7, #36	; 0x24
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005700:	b480      	push	{r7}
 8005702:	b08b      	sub	sp, #44	; 0x2c
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	4613      	mov	r3, r2
 800570c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005716:	88fb      	ldrh	r3, [r7, #6]
 8005718:	089b      	lsrs	r3, r3, #2
 800571a:	b29b      	uxth	r3, r3
 800571c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800571e:	88fb      	ldrh	r3, [r7, #6]
 8005720:	f003 0303 	and.w	r3, r3, #3
 8005724:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005726:	2300      	movs	r3, #0
 8005728:	623b      	str	r3, [r7, #32]
 800572a:	e014      	b.n	8005756 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	601a      	str	r2, [r3, #0]
    pDest++;
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	3301      	adds	r3, #1
 800573c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800573e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005740:	3301      	adds	r3, #1
 8005742:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005746:	3301      	adds	r3, #1
 8005748:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	3301      	adds	r3, #1
 800574e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005750:	6a3b      	ldr	r3, [r7, #32]
 8005752:	3301      	adds	r3, #1
 8005754:	623b      	str	r3, [r7, #32]
 8005756:	6a3a      	ldr	r2, [r7, #32]
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	429a      	cmp	r2, r3
 800575c:	d3e6      	bcc.n	800572c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800575e:	8bfb      	ldrh	r3, [r7, #30]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d01e      	beq.n	80057a2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005764:	2300      	movs	r3, #0
 8005766:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800576e:	461a      	mov	r2, r3
 8005770:	f107 0310 	add.w	r3, r7, #16
 8005774:	6812      	ldr	r2, [r2, #0]
 8005776:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	b2db      	uxtb	r3, r3
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	fa22 f303 	lsr.w	r3, r2, r3
 8005784:	b2da      	uxtb	r2, r3
 8005786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005788:	701a      	strb	r2, [r3, #0]
      i++;
 800578a:	6a3b      	ldr	r3, [r7, #32]
 800578c:	3301      	adds	r3, #1
 800578e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005792:	3301      	adds	r3, #1
 8005794:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005796:	8bfb      	ldrh	r3, [r7, #30]
 8005798:	3b01      	subs	r3, #1
 800579a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800579c:	8bfb      	ldrh	r3, [r7, #30]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1ea      	bne.n	8005778 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80057a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	372c      	adds	r7, #44	; 0x2c
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	785b      	ldrb	r3, [r3, #1]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d12c      	bne.n	8005826 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	db12      	blt.n	8005804 <USB_EPSetStall+0x54>
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00f      	beq.n	8005804 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	0151      	lsls	r1, r2, #5
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	440a      	add	r2, r1
 80057fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005802:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	015a      	lsls	r2, r3, #5
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4413      	add	r3, r2
 800580c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	0151      	lsls	r1, r2, #5
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	440a      	add	r2, r1
 800581a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800581e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005822:	6013      	str	r3, [r2, #0]
 8005824:	e02b      	b.n	800587e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	015a      	lsls	r2, r3, #5
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	4413      	add	r3, r2
 800582e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	db12      	blt.n	800585e <USB_EPSetStall+0xae>
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00f      	beq.n	800585e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	015a      	lsls	r2, r3, #5
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	4413      	add	r3, r2
 8005846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	0151      	lsls	r1, r2, #5
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	440a      	add	r2, r1
 8005854:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005858:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800585c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	015a      	lsls	r2, r3, #5
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	4413      	add	r3, r2
 8005866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	0151      	lsls	r1, r2, #5
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	440a      	add	r2, r1
 8005874:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005878:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800587c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	785b      	ldrb	r3, [r3, #1]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d128      	bne.n	80058fa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	0151      	lsls	r1, r2, #5
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	440a      	add	r2, r1
 80058be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058c6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	791b      	ldrb	r3, [r3, #4]
 80058cc:	2b03      	cmp	r3, #3
 80058ce:	d003      	beq.n	80058d8 <USB_EPClearStall+0x4c>
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	791b      	ldrb	r3, [r3, #4]
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d138      	bne.n	800594a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	0151      	lsls	r1, r2, #5
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	440a      	add	r2, r1
 80058ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058f6:	6013      	str	r3, [r2, #0]
 80058f8:	e027      	b.n	800594a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	015a      	lsls	r2, r3, #5
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	4413      	add	r3, r2
 8005902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	0151      	lsls	r1, r2, #5
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	440a      	add	r2, r1
 8005910:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005914:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005918:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	791b      	ldrb	r3, [r3, #4]
 800591e:	2b03      	cmp	r3, #3
 8005920:	d003      	beq.n	800592a <USB_EPClearStall+0x9e>
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	791b      	ldrb	r3, [r3, #4]
 8005926:	2b02      	cmp	r3, #2
 8005928:	d10f      	bne.n	800594a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	4413      	add	r3, r2
 8005932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	0151      	lsls	r1, r2, #5
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	440a      	add	r2, r1
 8005940:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005948:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3714      	adds	r7, #20
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	460b      	mov	r3, r1
 8005962:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005976:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800597a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	78fb      	ldrb	r3, [r7, #3]
 8005986:	011b      	lsls	r3, r3, #4
 8005988:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800598c:	68f9      	ldr	r1, [r7, #12]
 800598e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005992:	4313      	orrs	r3, r2
 8005994:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80059be:	f023 0303 	bic.w	r3, r3, #3
 80059c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059d2:	f023 0302 	bic.w	r3, r3, #2
 80059d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3714      	adds	r7, #20
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b085      	sub	sp, #20
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a00:	f023 0303 	bic.w	r3, r3, #3
 8005a04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a14:	f043 0302 	orr.w	r3, r3, #2
 8005a18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3714      	adds	r7, #20
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005a40:	68fb      	ldr	r3, [r7, #12]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b085      	sub	sp, #20
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a6a:	69db      	ldr	r3, [r3, #28]
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	4013      	ands	r3, r2
 8005a70:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	0c1b      	lsrs	r3, r3, #16
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b085      	sub	sp, #20
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a9e:	69db      	ldr	r3, [r3, #28]
 8005aa0:	68ba      	ldr	r2, [r7, #8]
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	b29b      	uxth	r3, r3
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b085      	sub	sp, #20
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
 8005abe:	460b      	mov	r3, r1
 8005ac0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005ac6:	78fb      	ldrb	r3, [r7, #3]
 8005ac8:	015a      	lsls	r2, r3, #5
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	4413      	add	r3, r2
 8005ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ae4:	68bb      	ldr	r3, [r7, #8]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b087      	sub	sp, #28
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
 8005afa:	460b      	mov	r3, r1
 8005afc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b14:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005b16:	78fb      	ldrb	r3, [r7, #3]
 8005b18:	f003 030f 	and.w	r3, r3, #15
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b22:	01db      	lsls	r3, r3, #7
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005b2c:	78fb      	ldrb	r3, [r7, #3]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b40:	68bb      	ldr	r3, [r7, #8]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	371c      	adds	r7, #28
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b083      	sub	sp, #12
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	f003 0301 	and.w	r3, r3, #1
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b085      	sub	sp, #20
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b84:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005b88:	f023 0307 	bic.w	r3, r3, #7
 8005b8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ba0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3714      	adds	r7, #20
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b087      	sub	sp, #28
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	460b      	mov	r3, r1
 8005bba:	607a      	str	r2, [r7, #4]
 8005bbc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	333c      	adds	r3, #60	; 0x3c
 8005bc6:	3304      	adds	r3, #4
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	4a26      	ldr	r2, [pc, #152]	; (8005c68 <USB_EP0_OutStart+0xb8>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d90a      	bls.n	8005bea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005be0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005be4:	d101      	bne.n	8005bea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005be6:	2300      	movs	r3, #0
 8005be8:	e037      	b.n	8005c5a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c18:	f043 0318 	orr.w	r3, r3, #24
 8005c1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c2c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005c30:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005c32:	7afb      	ldrb	r3, [r7, #11]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d10f      	bne.n	8005c58 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c3e:	461a      	mov	r2, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c52:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005c56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	371c      	adds	r7, #28
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	4f54300a 	.word	0x4f54300a

08005c6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c74:	2300      	movs	r3, #0
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	4a13      	ldr	r2, [pc, #76]	; (8005cd0 <USB_CoreReset+0x64>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d901      	bls.n	8005c8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e01b      	b.n	8005cc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	daf2      	bge.n	8005c78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c92:	2300      	movs	r3, #0
 8005c94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	f043 0201 	orr.w	r2, r3, #1
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	4a09      	ldr	r2, [pc, #36]	; (8005cd0 <USB_CoreReset+0x64>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d901      	bls.n	8005cb4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e006      	b.n	8005cc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d0f0      	beq.n	8005ca2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	00030d40 	.word	0x00030d40

08005cd4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005cd8:	4904      	ldr	r1, [pc, #16]	; (8005cec <MX_FATFS_Init+0x18>)
 8005cda:	4805      	ldr	r0, [pc, #20]	; (8005cf0 <MX_FATFS_Init+0x1c>)
 8005cdc:	f001 fdb0 	bl	8007840 <FATFS_LinkDriver>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	4b03      	ldr	r3, [pc, #12]	; (8005cf4 <MX_FATFS_Init+0x20>)
 8005ce6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005ce8:	bf00      	nop
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	2000032c 	.word	0x2000032c
 8005cf0:	2000000c 	.word	0x2000000c
 8005cf4:	20000328 	.word	0x20000328

08005cf8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	4603      	mov	r3, r0
 8005d00:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8005d02:	4b06      	ldr	r3, [pc, #24]	; (8005d1c <USER_initialize+0x24>)
 8005d04:	2201      	movs	r2, #1
 8005d06:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005d08:	4b04      	ldr	r3, [pc, #16]	; (8005d1c <USER_initialize+0x24>)
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	20000009 	.word	0x20000009

08005d20 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	4603      	mov	r3, r0
 8005d28:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8005d2a:	4b06      	ldr	r3, [pc, #24]	; (8005d44 <USER_status+0x24>)
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005d30:	4b04      	ldr	r3, [pc, #16]	; (8005d44 <USER_status+0x24>)
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	20000009 	.word	0x20000009

08005d48 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60b9      	str	r1, [r7, #8]
 8005d50:	607a      	str	r2, [r7, #4]
 8005d52:	603b      	str	r3, [r7, #0]
 8005d54:	4603      	mov	r3, r0
 8005d56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8005d58:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3714      	adds	r7, #20
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b085      	sub	sp, #20
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
 8005d70:	603b      	str	r3, [r7, #0]
 8005d72:	4603      	mov	r3, r0
 8005d74:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8005d76:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	603a      	str	r2, [r7, #0]
 8005d8e:	71fb      	strb	r3, [r7, #7]
 8005d90:	460b      	mov	r3, r1
 8005d92:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	73fb      	strb	r3, [r7, #15]
    return res;
 8005d98:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3714      	adds	r7, #20
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
	...

08005da8 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	460b      	mov	r3, r1
 8005db2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005db4:	2010      	movs	r0, #16
 8005db6:	f002 f93d 	bl	8008034 <USBD_static_malloc>
 8005dba:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d109      	bne.n	8005dd6 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	32b0      	adds	r2, #176	; 0xb0
 8005dcc:	2100      	movs	r1, #0
 8005dce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	e048      	b.n	8005e68 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	32b0      	adds	r2, #176	; 0xb0
 8005de0:	68f9      	ldr	r1, [r7, #12]
 8005de2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	32b0      	adds	r2, #176	; 0xb0
 8005df0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	7c1b      	ldrb	r3, [r3, #16]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10d      	bne.n	8005e1e <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005e02:	4b1b      	ldr	r3, [pc, #108]	; (8005e70 <USBD_HID_Init+0xc8>)
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	f003 020f 	and.w	r2, r3, #15
 8005e0a:	6879      	ldr	r1, [r7, #4]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	440b      	add	r3, r1
 8005e16:	3326      	adds	r3, #38	; 0x26
 8005e18:	2207      	movs	r2, #7
 8005e1a:	801a      	strh	r2, [r3, #0]
 8005e1c:	e00c      	b.n	8005e38 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005e1e:	4b14      	ldr	r3, [pc, #80]	; (8005e70 <USBD_HID_Init+0xc8>)
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	f003 020f 	and.w	r2, r3, #15
 8005e26:	6879      	ldr	r1, [r7, #4]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4413      	add	r3, r2
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	440b      	add	r3, r1
 8005e32:	3326      	adds	r3, #38	; 0x26
 8005e34:	220a      	movs	r2, #10
 8005e36:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005e38:	4b0d      	ldr	r3, [pc, #52]	; (8005e70 <USBD_HID_Init+0xc8>)
 8005e3a:	7819      	ldrb	r1, [r3, #0]
 8005e3c:	2304      	movs	r3, #4
 8005e3e:	2203      	movs	r2, #3
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f001 ffe6 	bl	8007e12 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8005e46:	4b0a      	ldr	r3, [pc, #40]	; (8005e70 <USBD_HID_Init+0xc8>)
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	f003 020f 	and.w	r2, r3, #15
 8005e4e:	6879      	ldr	r1, [r7, #4]
 8005e50:	4613      	mov	r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4413      	add	r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	440b      	add	r3, r1
 8005e5a:	3324      	adds	r3, #36	; 0x24
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3710      	adds	r7, #16
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	200000de 	.word	0x200000de

08005e74 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8005e80:	4b1f      	ldr	r3, [pc, #124]	; (8005f00 <USBD_HID_DeInit+0x8c>)
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	4619      	mov	r1, r3
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f001 ffe9 	bl	8007e5e <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8005e8c:	4b1c      	ldr	r3, [pc, #112]	; (8005f00 <USBD_HID_DeInit+0x8c>)
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	f003 020f 	and.w	r2, r3, #15
 8005e94:	6879      	ldr	r1, [r7, #4]
 8005e96:	4613      	mov	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	440b      	add	r3, r1
 8005ea0:	3324      	adds	r3, #36	; 0x24
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8005ea6:	4b16      	ldr	r3, [pc, #88]	; (8005f00 <USBD_HID_DeInit+0x8c>)
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	f003 020f 	and.w	r2, r3, #15
 8005eae:	6879      	ldr	r1, [r7, #4]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4413      	add	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	440b      	add	r3, r1
 8005eba:	3326      	adds	r3, #38	; 0x26
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	32b0      	adds	r2, #176	; 0xb0
 8005eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d011      	beq.n	8005ef6 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	32b0      	adds	r2, #176	; 0xb0
 8005edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f002 f8b5 	bl	8008050 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	32b0      	adds	r2, #176	; 0xb0
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3708      	adds	r7, #8
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	200000de 	.word	0x200000de

08005f04 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	32b0      	adds	r2, #176	; 0xb0
 8005f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f1c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8005f22:	2300      	movs	r3, #0
 8005f24:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d101      	bne.n	8005f30 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e0e8      	b.n	8006102 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d046      	beq.n	8005fca <USBD_HID_Setup+0xc6>
 8005f3c:	2b20      	cmp	r3, #32
 8005f3e:	f040 80d8 	bne.w	80060f2 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	785b      	ldrb	r3, [r3, #1]
 8005f46:	3b02      	subs	r3, #2
 8005f48:	2b09      	cmp	r3, #9
 8005f4a:	d836      	bhi.n	8005fba <USBD_HID_Setup+0xb6>
 8005f4c:	a201      	add	r2, pc, #4	; (adr r2, 8005f54 <USBD_HID_Setup+0x50>)
 8005f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f52:	bf00      	nop
 8005f54:	08005fab 	.word	0x08005fab
 8005f58:	08005f8b 	.word	0x08005f8b
 8005f5c:	08005fbb 	.word	0x08005fbb
 8005f60:	08005fbb 	.word	0x08005fbb
 8005f64:	08005fbb 	.word	0x08005fbb
 8005f68:	08005fbb 	.word	0x08005fbb
 8005f6c:	08005fbb 	.word	0x08005fbb
 8005f70:	08005fbb 	.word	0x08005fbb
 8005f74:	08005f99 	.word	0x08005f99
 8005f78:	08005f7d 	.word	0x08005f7d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	885b      	ldrh	r3, [r3, #2]
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	461a      	mov	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	601a      	str	r2, [r3, #0]
          break;
 8005f88:	e01e      	b.n	8005fc8 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	4619      	mov	r1, r3
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f001 fba5 	bl	80076e0 <USBD_CtlSendData>
          break;
 8005f96:	e017      	b.n	8005fc8 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	885b      	ldrh	r3, [r3, #2]
 8005f9c:	0a1b      	lsrs	r3, r3, #8
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	605a      	str	r2, [r3, #4]
          break;
 8005fa8:	e00e      	b.n	8005fc8 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	3304      	adds	r3, #4
 8005fae:	2201      	movs	r2, #1
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f001 fb94 	bl	80076e0 <USBD_CtlSendData>
          break;
 8005fb8:	e006      	b.n	8005fc8 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005fba:	6839      	ldr	r1, [r7, #0]
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f001 fb1e 	bl	80075fe <USBD_CtlError>
          ret = USBD_FAIL;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	75fb      	strb	r3, [r7, #23]
          break;
 8005fc6:	bf00      	nop
      }
      break;
 8005fc8:	e09a      	b.n	8006100 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	785b      	ldrb	r3, [r3, #1]
 8005fce:	2b0b      	cmp	r3, #11
 8005fd0:	f200 8086 	bhi.w	80060e0 <USBD_HID_Setup+0x1dc>
 8005fd4:	a201      	add	r2, pc, #4	; (adr r2, 8005fdc <USBD_HID_Setup+0xd8>)
 8005fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fda:	bf00      	nop
 8005fdc:	0800600d 	.word	0x0800600d
 8005fe0:	080060ef 	.word	0x080060ef
 8005fe4:	080060e1 	.word	0x080060e1
 8005fe8:	080060e1 	.word	0x080060e1
 8005fec:	080060e1 	.word	0x080060e1
 8005ff0:	080060e1 	.word	0x080060e1
 8005ff4:	08006037 	.word	0x08006037
 8005ff8:	080060e1 	.word	0x080060e1
 8005ffc:	080060e1 	.word	0x080060e1
 8006000:	080060e1 	.word	0x080060e1
 8006004:	0800608f 	.word	0x0800608f
 8006008:	080060b9 	.word	0x080060b9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006012:	b2db      	uxtb	r3, r3
 8006014:	2b03      	cmp	r3, #3
 8006016:	d107      	bne.n	8006028 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006018:	f107 030a 	add.w	r3, r7, #10
 800601c:	2202      	movs	r2, #2
 800601e:	4619      	mov	r1, r3
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f001 fb5d 	bl	80076e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006026:	e063      	b.n	80060f0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006028:	6839      	ldr	r1, [r7, #0]
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f001 fae7 	bl	80075fe <USBD_CtlError>
            ret = USBD_FAIL;
 8006030:	2303      	movs	r3, #3
 8006032:	75fb      	strb	r3, [r7, #23]
          break;
 8006034:	e05c      	b.n	80060f0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	885b      	ldrh	r3, [r3, #2]
 800603a:	0a1b      	lsrs	r3, r3, #8
 800603c:	b29b      	uxth	r3, r3
 800603e:	2b22      	cmp	r3, #34	; 0x22
 8006040:	d108      	bne.n	8006054 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	88db      	ldrh	r3, [r3, #6]
 8006046:	2b4a      	cmp	r3, #74	; 0x4a
 8006048:	bf28      	it	cs
 800604a:	234a      	movcs	r3, #74	; 0x4a
 800604c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800604e:	4b2f      	ldr	r3, [pc, #188]	; (800610c <USBD_HID_Setup+0x208>)
 8006050:	613b      	str	r3, [r7, #16]
 8006052:	e015      	b.n	8006080 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	885b      	ldrh	r3, [r3, #2]
 8006058:	0a1b      	lsrs	r3, r3, #8
 800605a:	b29b      	uxth	r3, r3
 800605c:	2b21      	cmp	r3, #33	; 0x21
 800605e:	d108      	bne.n	8006072 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8006060:	4b2b      	ldr	r3, [pc, #172]	; (8006110 <USBD_HID_Setup+0x20c>)
 8006062:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	88db      	ldrh	r3, [r3, #6]
 8006068:	2b09      	cmp	r3, #9
 800606a:	bf28      	it	cs
 800606c:	2309      	movcs	r3, #9
 800606e:	82bb      	strh	r3, [r7, #20]
 8006070:	e006      	b.n	8006080 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006072:	6839      	ldr	r1, [r7, #0]
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f001 fac2 	bl	80075fe <USBD_CtlError>
            ret = USBD_FAIL;
 800607a:	2303      	movs	r3, #3
 800607c:	75fb      	strb	r3, [r7, #23]
            break;
 800607e:	e037      	b.n	80060f0 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006080:	8abb      	ldrh	r3, [r7, #20]
 8006082:	461a      	mov	r2, r3
 8006084:	6939      	ldr	r1, [r7, #16]
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f001 fb2a 	bl	80076e0 <USBD_CtlSendData>
          break;
 800608c:	e030      	b.n	80060f0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b03      	cmp	r3, #3
 8006098:	d107      	bne.n	80060aa <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	3308      	adds	r3, #8
 800609e:	2201      	movs	r2, #1
 80060a0:	4619      	mov	r1, r3
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f001 fb1c 	bl	80076e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060a8:	e022      	b.n	80060f0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80060aa:	6839      	ldr	r1, [r7, #0]
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f001 faa6 	bl	80075fe <USBD_CtlError>
            ret = USBD_FAIL;
 80060b2:	2303      	movs	r3, #3
 80060b4:	75fb      	strb	r3, [r7, #23]
          break;
 80060b6:	e01b      	b.n	80060f0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	2b03      	cmp	r3, #3
 80060c2:	d106      	bne.n	80060d2 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	885b      	ldrh	r3, [r3, #2]
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	461a      	mov	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060d0:	e00e      	b.n	80060f0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80060d2:	6839      	ldr	r1, [r7, #0]
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f001 fa92 	bl	80075fe <USBD_CtlError>
            ret = USBD_FAIL;
 80060da:	2303      	movs	r3, #3
 80060dc:	75fb      	strb	r3, [r7, #23]
          break;
 80060de:	e007      	b.n	80060f0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80060e0:	6839      	ldr	r1, [r7, #0]
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f001 fa8b 	bl	80075fe <USBD_CtlError>
          ret = USBD_FAIL;
 80060e8:	2303      	movs	r3, #3
 80060ea:	75fb      	strb	r3, [r7, #23]
          break;
 80060ec:	e000      	b.n	80060f0 <USBD_HID_Setup+0x1ec>
          break;
 80060ee:	bf00      	nop
      }
      break;
 80060f0:	e006      	b.n	8006100 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 80060f2:	6839      	ldr	r1, [r7, #0]
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f001 fa82 	bl	80075fe <USBD_CtlError>
      ret = USBD_FAIL;
 80060fa:	2303      	movs	r3, #3
 80060fc:	75fb      	strb	r3, [r7, #23]
      break;
 80060fe:	bf00      	nop
  }

  return (uint8_t)ret;
 8006100:	7dfb      	ldrb	r3, [r7, #23]
}
 8006102:	4618      	mov	r0, r3
 8006104:	3718      	adds	r7, #24
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	20000094 	.word	0x20000094
 8006110:	2000007c 	.word	0x2000007c

08006114 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800611c:	2181      	movs	r1, #129	; 0x81
 800611e:	4809      	ldr	r0, [pc, #36]	; (8006144 <USBD_HID_GetFSCfgDesc+0x30>)
 8006120:	f000 fc35 	bl	800698e <USBD_GetEpDesc>
 8006124:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d002      	beq.n	8006132 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	220a      	movs	r2, #10
 8006130:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2222      	movs	r2, #34	; 0x22
 8006136:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006138:	4b02      	ldr	r3, [pc, #8]	; (8006144 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800613a:	4618      	mov	r0, r3
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	20000058 	.word	0x20000058

08006148 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006150:	2181      	movs	r1, #129	; 0x81
 8006152:	4809      	ldr	r0, [pc, #36]	; (8006178 <USBD_HID_GetHSCfgDesc+0x30>)
 8006154:	f000 fc1b 	bl	800698e <USBD_GetEpDesc>
 8006158:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d002      	beq.n	8006166 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2207      	movs	r2, #7
 8006164:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2222      	movs	r2, #34	; 0x22
 800616a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800616c:	4b02      	ldr	r3, [pc, #8]	; (8006178 <USBD_HID_GetHSCfgDesc+0x30>)
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	20000058 	.word	0x20000058

0800617c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006184:	2181      	movs	r1, #129	; 0x81
 8006186:	4809      	ldr	r0, [pc, #36]	; (80061ac <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8006188:	f000 fc01 	bl	800698e <USBD_GetEpDesc>
 800618c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d002      	beq.n	800619a <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	220a      	movs	r2, #10
 8006198:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2222      	movs	r2, #34	; 0x22
 800619e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80061a0:	4b02      	ldr	r3, [pc, #8]	; (80061ac <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	20000058 	.word	0x20000058

080061b0 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	460b      	mov	r3, r1
 80061ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	32b0      	adds	r2, #176	; 0xb0
 80061c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ca:	2200      	movs	r2, #0
 80061cc:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	220a      	movs	r2, #10
 80061e8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80061ea:	4b03      	ldr	r3, [pc, #12]	; (80061f8 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr
 80061f8:	20000088 	.word	0x20000088

080061fc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b086      	sub	sp, #24
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	4613      	mov	r3, r2
 8006208:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d101      	bne.n	8006214 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006210:	2303      	movs	r3, #3
 8006212:	e01f      	b.n	8006254 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	79fa      	ldrb	r2, [r7, #7]
 8006246:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f001 fd7b 	bl	8007d44 <USBD_LL_Init>
 800624e:	4603      	mov	r3, r0
 8006250:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006252:	7dfb      	ldrb	r3, [r7, #23]
}
 8006254:	4618      	mov	r0, r3
 8006256:	3718      	adds	r7, #24
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006266:	2300      	movs	r3, #0
 8006268:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006270:	2303      	movs	r3, #3
 8006272:	e025      	b.n	80062c0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	683a      	ldr	r2, [r7, #0]
 8006278:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	32ae      	adds	r2, #174	; 0xae
 8006286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800628a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00f      	beq.n	80062b0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	32ae      	adds	r2, #174	; 0xae
 800629a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800629e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a0:	f107 020e 	add.w	r2, r7, #14
 80062a4:	4610      	mov	r0, r2
 80062a6:	4798      	blx	r3
 80062a8:	4602      	mov	r2, r0
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80062b6:	1c5a      	adds	r2, r3, #1
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f001 fd83 	bl	8007ddc <USBD_LL_Start>
 80062d6:	4603      	mov	r3, r0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3708      	adds	r7, #8
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80062e8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b084      	sub	sp, #16
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
 80062fe:	460b      	mov	r3, r1
 8006300:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006302:	2300      	movs	r3, #0
 8006304:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800630c:	2b00      	cmp	r3, #0
 800630e:	d009      	beq.n	8006324 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	78fa      	ldrb	r2, [r7, #3]
 800631a:	4611      	mov	r1, r2
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	4798      	blx	r3
 8006320:	4603      	mov	r3, r0
 8006322:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006324:	7bfb      	ldrb	r3, [r7, #15]
}
 8006326:	4618      	mov	r0, r3
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b084      	sub	sp, #16
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
 8006336:	460b      	mov	r3, r1
 8006338:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800633a:	2300      	movs	r3, #0
 800633c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	78fa      	ldrb	r2, [r7, #3]
 8006348:	4611      	mov	r1, r2
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	4798      	blx	r3
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d001      	beq.n	8006358 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006354:	2303      	movs	r3, #3
 8006356:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006358:	7bfb      	ldrb	r3, [r7, #15]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b084      	sub	sp, #16
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
 800636a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006372:	6839      	ldr	r1, [r7, #0]
 8006374:	4618      	mov	r0, r3
 8006376:	f001 f908 	bl	800758a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006388:	461a      	mov	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006396:	f003 031f 	and.w	r3, r3, #31
 800639a:	2b02      	cmp	r3, #2
 800639c:	d01a      	beq.n	80063d4 <USBD_LL_SetupStage+0x72>
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d822      	bhi.n	80063e8 <USBD_LL_SetupStage+0x86>
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d002      	beq.n	80063ac <USBD_LL_SetupStage+0x4a>
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d00a      	beq.n	80063c0 <USBD_LL_SetupStage+0x5e>
 80063aa:	e01d      	b.n	80063e8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80063b2:	4619      	mov	r1, r3
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 fb5f 	bl	8006a78 <USBD_StdDevReq>
 80063ba:	4603      	mov	r3, r0
 80063bc:	73fb      	strb	r3, [r7, #15]
      break;
 80063be:	e020      	b.n	8006402 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80063c6:	4619      	mov	r1, r3
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 fbc7 	bl	8006b5c <USBD_StdItfReq>
 80063ce:	4603      	mov	r3, r0
 80063d0:	73fb      	strb	r3, [r7, #15]
      break;
 80063d2:	e016      	b.n	8006402 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80063da:	4619      	mov	r1, r3
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 fc29 	bl	8006c34 <USBD_StdEPReq>
 80063e2:	4603      	mov	r3, r0
 80063e4:	73fb      	strb	r3, [r7, #15]
      break;
 80063e6:	e00c      	b.n	8006402 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80063ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	4619      	mov	r1, r3
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f001 fd50 	bl	8007e9c <USBD_LL_StallEP>
 80063fc:	4603      	mov	r3, r0
 80063fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006400:	bf00      	nop
  }

  return ret;
 8006402:	7bfb      	ldrb	r3, [r7, #15]
}
 8006404:	4618      	mov	r0, r3
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	460b      	mov	r3, r1
 8006416:	607a      	str	r2, [r7, #4]
 8006418:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800641a:	2300      	movs	r3, #0
 800641c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800641e:	7afb      	ldrb	r3, [r7, #11]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d16e      	bne.n	8006502 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800642a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006432:	2b03      	cmp	r3, #3
 8006434:	f040 8098 	bne.w	8006568 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	689a      	ldr	r2, [r3, #8]
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	429a      	cmp	r2, r3
 8006442:	d913      	bls.n	800646c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	689a      	ldr	r2, [r3, #8]
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	1ad2      	subs	r2, r2, r3
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	68da      	ldr	r2, [r3, #12]
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	4293      	cmp	r3, r2
 800645c:	bf28      	it	cs
 800645e:	4613      	movcs	r3, r2
 8006460:	461a      	mov	r2, r3
 8006462:	6879      	ldr	r1, [r7, #4]
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f001 f967 	bl	8007738 <USBD_CtlContinueRx>
 800646a:	e07d      	b.n	8006568 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006472:	f003 031f 	and.w	r3, r3, #31
 8006476:	2b02      	cmp	r3, #2
 8006478:	d014      	beq.n	80064a4 <USBD_LL_DataOutStage+0x98>
 800647a:	2b02      	cmp	r3, #2
 800647c:	d81d      	bhi.n	80064ba <USBD_LL_DataOutStage+0xae>
 800647e:	2b00      	cmp	r3, #0
 8006480:	d002      	beq.n	8006488 <USBD_LL_DataOutStage+0x7c>
 8006482:	2b01      	cmp	r3, #1
 8006484:	d003      	beq.n	800648e <USBD_LL_DataOutStage+0x82>
 8006486:	e018      	b.n	80064ba <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006488:	2300      	movs	r3, #0
 800648a:	75bb      	strb	r3, [r7, #22]
            break;
 800648c:	e018      	b.n	80064c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006494:	b2db      	uxtb	r3, r3
 8006496:	4619      	mov	r1, r3
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f000 fa5e 	bl	800695a <USBD_CoreFindIF>
 800649e:	4603      	mov	r3, r0
 80064a0:	75bb      	strb	r3, [r7, #22]
            break;
 80064a2:	e00d      	b.n	80064c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	4619      	mov	r1, r3
 80064ae:	68f8      	ldr	r0, [r7, #12]
 80064b0:	f000 fa60 	bl	8006974 <USBD_CoreFindEP>
 80064b4:	4603      	mov	r3, r0
 80064b6:	75bb      	strb	r3, [r7, #22]
            break;
 80064b8:	e002      	b.n	80064c0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80064ba:	2300      	movs	r3, #0
 80064bc:	75bb      	strb	r3, [r7, #22]
            break;
 80064be:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80064c0:	7dbb      	ldrb	r3, [r7, #22]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d119      	bne.n	80064fa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	2b03      	cmp	r3, #3
 80064d0:	d113      	bne.n	80064fa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80064d2:	7dba      	ldrb	r2, [r7, #22]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	32ae      	adds	r2, #174	; 0xae
 80064d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00b      	beq.n	80064fa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80064e2:	7dba      	ldrb	r2, [r7, #22]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80064ea:	7dba      	ldrb	r2, [r7, #22]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	32ae      	adds	r2, #174	; 0xae
 80064f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	68f8      	ldr	r0, [r7, #12]
 80064f8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f001 f92d 	bl	800775a <USBD_CtlSendStatus>
 8006500:	e032      	b.n	8006568 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006502:	7afb      	ldrb	r3, [r7, #11]
 8006504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006508:	b2db      	uxtb	r3, r3
 800650a:	4619      	mov	r1, r3
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f000 fa31 	bl	8006974 <USBD_CoreFindEP>
 8006512:	4603      	mov	r3, r0
 8006514:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006516:	7dbb      	ldrb	r3, [r7, #22]
 8006518:	2bff      	cmp	r3, #255	; 0xff
 800651a:	d025      	beq.n	8006568 <USBD_LL_DataOutStage+0x15c>
 800651c:	7dbb      	ldrb	r3, [r7, #22]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d122      	bne.n	8006568 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006528:	b2db      	uxtb	r3, r3
 800652a:	2b03      	cmp	r3, #3
 800652c:	d117      	bne.n	800655e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800652e:	7dba      	ldrb	r2, [r7, #22]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	32ae      	adds	r2, #174	; 0xae
 8006534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006538:	699b      	ldr	r3, [r3, #24]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00f      	beq.n	800655e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800653e:	7dba      	ldrb	r2, [r7, #22]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006546:	7dba      	ldrb	r2, [r7, #22]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	32ae      	adds	r2, #174	; 0xae
 800654c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	7afa      	ldrb	r2, [r7, #11]
 8006554:	4611      	mov	r1, r2
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	4798      	blx	r3
 800655a:	4603      	mov	r3, r0
 800655c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800655e:	7dfb      	ldrb	r3, [r7, #23]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d001      	beq.n	8006568 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006564:	7dfb      	ldrb	r3, [r7, #23]
 8006566:	e000      	b.n	800656a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3718      	adds	r7, #24
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b086      	sub	sp, #24
 8006576:	af00      	add	r7, sp, #0
 8006578:	60f8      	str	r0, [r7, #12]
 800657a:	460b      	mov	r3, r1
 800657c:	607a      	str	r2, [r7, #4]
 800657e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006580:	7afb      	ldrb	r3, [r7, #11]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d16f      	bne.n	8006666 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	3314      	adds	r3, #20
 800658a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006592:	2b02      	cmp	r3, #2
 8006594:	d15a      	bne.n	800664c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	689a      	ldr	r2, [r3, #8]
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d914      	bls.n	80065cc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	689a      	ldr	r2, [r3, #8]
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	1ad2      	subs	r2, r2, r3
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	461a      	mov	r2, r3
 80065b6:	6879      	ldr	r1, [r7, #4]
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f001 f8ac 	bl	8007716 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80065be:	2300      	movs	r3, #0
 80065c0:	2200      	movs	r2, #0
 80065c2:	2100      	movs	r1, #0
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f001 fd13 	bl	8007ff0 <USBD_LL_PrepareReceive>
 80065ca:	e03f      	b.n	800664c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	68da      	ldr	r2, [r3, #12]
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d11c      	bne.n	8006612 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d316      	bcc.n	8006612 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	685a      	ldr	r2, [r3, #4]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d20f      	bcs.n	8006612 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80065f2:	2200      	movs	r2, #0
 80065f4:	2100      	movs	r1, #0
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f001 f88d 	bl	8007716 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006604:	2300      	movs	r3, #0
 8006606:	2200      	movs	r2, #0
 8006608:	2100      	movs	r1, #0
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f001 fcf0 	bl	8007ff0 <USBD_LL_PrepareReceive>
 8006610:	e01c      	b.n	800664c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b03      	cmp	r3, #3
 800661c:	d10f      	bne.n	800663e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d009      	beq.n	800663e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800663e:	2180      	movs	r1, #128	; 0x80
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f001 fc2b 	bl	8007e9c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f001 f89a 	bl	8007780 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d03a      	beq.n	80066cc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f7ff fe42 	bl	80062e0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006664:	e032      	b.n	80066cc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006666:	7afb      	ldrb	r3, [r7, #11]
 8006668:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800666c:	b2db      	uxtb	r3, r3
 800666e:	4619      	mov	r1, r3
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f000 f97f 	bl	8006974 <USBD_CoreFindEP>
 8006676:	4603      	mov	r3, r0
 8006678:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800667a:	7dfb      	ldrb	r3, [r7, #23]
 800667c:	2bff      	cmp	r3, #255	; 0xff
 800667e:	d025      	beq.n	80066cc <USBD_LL_DataInStage+0x15a>
 8006680:	7dfb      	ldrb	r3, [r7, #23]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d122      	bne.n	80066cc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800668c:	b2db      	uxtb	r3, r3
 800668e:	2b03      	cmp	r3, #3
 8006690:	d11c      	bne.n	80066cc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006692:	7dfa      	ldrb	r2, [r7, #23]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	32ae      	adds	r2, #174	; 0xae
 8006698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d014      	beq.n	80066cc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80066a2:	7dfa      	ldrb	r2, [r7, #23]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80066aa:	7dfa      	ldrb	r2, [r7, #23]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	32ae      	adds	r2, #174	; 0xae
 80066b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	7afa      	ldrb	r2, [r7, #11]
 80066b8:	4611      	mov	r1, r2
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	4798      	blx	r3
 80066be:	4603      	mov	r3, r0
 80066c0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80066c2:	7dbb      	ldrb	r3, [r7, #22]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d001      	beq.n	80066cc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80066c8:	7dbb      	ldrb	r3, [r7, #22]
 80066ca:	e000      	b.n	80066ce <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3718      	adds	r7, #24
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b084      	sub	sp, #16
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80066de:	2300      	movs	r3, #0
 80066e0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800670e:	2b00      	cmp	r3, #0
 8006710:	d014      	beq.n	800673c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00e      	beq.n	800673c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	6852      	ldr	r2, [r2, #4]
 800672a:	b2d2      	uxtb	r2, r2
 800672c:	4611      	mov	r1, r2
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	4798      	blx	r3
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d001      	beq.n	800673c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006738:	2303      	movs	r3, #3
 800673a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800673c:	2340      	movs	r3, #64	; 0x40
 800673e:	2200      	movs	r2, #0
 8006740:	2100      	movs	r1, #0
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f001 fb65 	bl	8007e12 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2240      	movs	r2, #64	; 0x40
 8006754:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006758:	2340      	movs	r3, #64	; 0x40
 800675a:	2200      	movs	r2, #0
 800675c:	2180      	movs	r1, #128	; 0x80
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f001 fb57 	bl	8007e12 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2240      	movs	r2, #64	; 0x40
 800676e:	621a      	str	r2, [r3, #32]

  return ret;
 8006770:	7bfb      	ldrb	r3, [r7, #15]
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800677a:	b480      	push	{r7}
 800677c:	b083      	sub	sp, #12
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
 8006782:	460b      	mov	r3, r1
 8006784:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	78fa      	ldrb	r2, [r7, #3]
 800678a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800679a:	b480      	push	{r7}
 800679c:	b083      	sub	sp, #12
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067a8:	b2da      	uxtb	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2204      	movs	r2, #4
 80067b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	370c      	adds	r7, #12
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b083      	sub	sp, #12
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	2b04      	cmp	r3, #4
 80067d8:	d106      	bne.n	80067e8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80067e0:	b2da      	uxtb	r2, r3
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	370c      	adds	r7, #12
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr

080067f6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b082      	sub	sp, #8
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b03      	cmp	r3, #3
 8006808:	d110      	bne.n	800682c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00b      	beq.n	800682c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800681a:	69db      	ldr	r3, [r3, #28]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d005      	beq.n	800682c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006826:	69db      	ldr	r3, [r3, #28]
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b082      	sub	sp, #8
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	460b      	mov	r3, r1
 8006840:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	32ae      	adds	r2, #174	; 0xae
 800684c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d101      	bne.n	8006858 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006854:	2303      	movs	r3, #3
 8006856:	e01c      	b.n	8006892 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800685e:	b2db      	uxtb	r3, r3
 8006860:	2b03      	cmp	r3, #3
 8006862:	d115      	bne.n	8006890 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	32ae      	adds	r2, #174	; 0xae
 800686e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006872:	6a1b      	ldr	r3, [r3, #32]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00b      	beq.n	8006890 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	32ae      	adds	r2, #174	; 0xae
 8006882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006886:	6a1b      	ldr	r3, [r3, #32]
 8006888:	78fa      	ldrb	r2, [r7, #3]
 800688a:	4611      	mov	r1, r2
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3708      	adds	r7, #8
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b082      	sub	sp, #8
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	460b      	mov	r3, r1
 80068a4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	32ae      	adds	r2, #174	; 0xae
 80068b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d101      	bne.n	80068bc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e01c      	b.n	80068f6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	2b03      	cmp	r3, #3
 80068c6:	d115      	bne.n	80068f4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	32ae      	adds	r2, #174	; 0xae
 80068d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00b      	beq.n	80068f4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	32ae      	adds	r2, #174	; 0xae
 80068e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ec:	78fa      	ldrb	r2, [r7, #3]
 80068ee:	4611      	mov	r1, r2
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3708      	adds	r7, #8
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80068fe:	b480      	push	{r7}
 8006900:	b083      	sub	sp, #12
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800691c:	2300      	movs	r3, #0
 800691e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00e      	beq.n	8006950 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	6852      	ldr	r2, [r2, #4]
 800693e:	b2d2      	uxtb	r2, r2
 8006940:	4611      	mov	r1, r2
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	4798      	blx	r3
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d001      	beq.n	8006950 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800694c:	2303      	movs	r3, #3
 800694e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006950:	7bfb      	ldrb	r3, [r7, #15]
}
 8006952:	4618      	mov	r0, r3
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}

0800695a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800695a:	b480      	push	{r7}
 800695c:	b083      	sub	sp, #12
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
 8006962:	460b      	mov	r3, r1
 8006964:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006966:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006968:	4618      	mov	r0, r3
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	460b      	mov	r3, r1
 800697e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006980:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006982:	4618      	mov	r0, r3
 8006984:	370c      	adds	r7, #12
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr

0800698e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b086      	sub	sp, #24
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
 8006996:	460b      	mov	r3, r1
 8006998:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80069a2:	2300      	movs	r3, #0
 80069a4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	885b      	ldrh	r3, [r3, #2]
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d920      	bls.n	80069f8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80069be:	e013      	b.n	80069e8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80069c0:	f107 030a 	add.w	r3, r7, #10
 80069c4:	4619      	mov	r1, r3
 80069c6:	6978      	ldr	r0, [r7, #20]
 80069c8:	f000 f81b 	bl	8006a02 <USBD_GetNextDesc>
 80069cc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	785b      	ldrb	r3, [r3, #1]
 80069d2:	2b05      	cmp	r3, #5
 80069d4:	d108      	bne.n	80069e8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	789b      	ldrb	r3, [r3, #2]
 80069de:	78fa      	ldrb	r2, [r7, #3]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d008      	beq.n	80069f6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80069e4:	2300      	movs	r3, #0
 80069e6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	885b      	ldrh	r3, [r3, #2]
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	897b      	ldrh	r3, [r7, #10]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d8e5      	bhi.n	80069c0 <USBD_GetEpDesc+0x32>
 80069f4:	e000      	b.n	80069f8 <USBD_GetEpDesc+0x6a>
          break;
 80069f6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80069f8:	693b      	ldr	r3, [r7, #16]
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3718      	adds	r7, #24
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006a02:	b480      	push	{r7}
 8006a04:	b085      	sub	sp, #20
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
 8006a0a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	881a      	ldrh	r2, [r3, #0]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	4413      	add	r3, r2
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	461a      	mov	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3714      	adds	r7, #20
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b087      	sub	sp, #28
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	3301      	adds	r3, #1
 8006a52:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006a5a:	8a3b      	ldrh	r3, [r7, #16]
 8006a5c:	021b      	lsls	r3, r3, #8
 8006a5e:	b21a      	sxth	r2, r3
 8006a60:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	b21b      	sxth	r3, r3
 8006a68:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006a6a:	89fb      	ldrh	r3, [r7, #14]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	371c      	adds	r7, #28
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a82:	2300      	movs	r3, #0
 8006a84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a8e:	2b40      	cmp	r3, #64	; 0x40
 8006a90:	d005      	beq.n	8006a9e <USBD_StdDevReq+0x26>
 8006a92:	2b40      	cmp	r3, #64	; 0x40
 8006a94:	d857      	bhi.n	8006b46 <USBD_StdDevReq+0xce>
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00f      	beq.n	8006aba <USBD_StdDevReq+0x42>
 8006a9a:	2b20      	cmp	r3, #32
 8006a9c:	d153      	bne.n	8006b46 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	32ae      	adds	r2, #174	; 0xae
 8006aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	6839      	ldr	r1, [r7, #0]
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	4798      	blx	r3
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ab8:	e04a      	b.n	8006b50 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	785b      	ldrb	r3, [r3, #1]
 8006abe:	2b09      	cmp	r3, #9
 8006ac0:	d83b      	bhi.n	8006b3a <USBD_StdDevReq+0xc2>
 8006ac2:	a201      	add	r2, pc, #4	; (adr r2, 8006ac8 <USBD_StdDevReq+0x50>)
 8006ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac8:	08006b1d 	.word	0x08006b1d
 8006acc:	08006b31 	.word	0x08006b31
 8006ad0:	08006b3b 	.word	0x08006b3b
 8006ad4:	08006b27 	.word	0x08006b27
 8006ad8:	08006b3b 	.word	0x08006b3b
 8006adc:	08006afb 	.word	0x08006afb
 8006ae0:	08006af1 	.word	0x08006af1
 8006ae4:	08006b3b 	.word	0x08006b3b
 8006ae8:	08006b13 	.word	0x08006b13
 8006aec:	08006b05 	.word	0x08006b05
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006af0:	6839      	ldr	r1, [r7, #0]
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 fa3c 	bl	8006f70 <USBD_GetDescriptor>
          break;
 8006af8:	e024      	b.n	8006b44 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006afa:	6839      	ldr	r1, [r7, #0]
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fba1 	bl	8007244 <USBD_SetAddress>
          break;
 8006b02:	e01f      	b.n	8006b44 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006b04:	6839      	ldr	r1, [r7, #0]
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 fbe0 	bl	80072cc <USBD_SetConfig>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	73fb      	strb	r3, [r7, #15]
          break;
 8006b10:	e018      	b.n	8006b44 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006b12:	6839      	ldr	r1, [r7, #0]
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 fc83 	bl	8007420 <USBD_GetConfig>
          break;
 8006b1a:	e013      	b.n	8006b44 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006b1c:	6839      	ldr	r1, [r7, #0]
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fcb4 	bl	800748c <USBD_GetStatus>
          break;
 8006b24:	e00e      	b.n	8006b44 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006b26:	6839      	ldr	r1, [r7, #0]
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 fce3 	bl	80074f4 <USBD_SetFeature>
          break;
 8006b2e:	e009      	b.n	8006b44 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006b30:	6839      	ldr	r1, [r7, #0]
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 fd07 	bl	8007546 <USBD_ClrFeature>
          break;
 8006b38:	e004      	b.n	8006b44 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006b3a:	6839      	ldr	r1, [r7, #0]
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 fd5e 	bl	80075fe <USBD_CtlError>
          break;
 8006b42:	bf00      	nop
      }
      break;
 8006b44:	e004      	b.n	8006b50 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006b46:	6839      	ldr	r1, [r7, #0]
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 fd58 	bl	80075fe <USBD_CtlError>
      break;
 8006b4e:	bf00      	nop
  }

  return ret;
 8006b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop

08006b5c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b66:	2300      	movs	r3, #0
 8006b68:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b72:	2b40      	cmp	r3, #64	; 0x40
 8006b74:	d005      	beq.n	8006b82 <USBD_StdItfReq+0x26>
 8006b76:	2b40      	cmp	r3, #64	; 0x40
 8006b78:	d852      	bhi.n	8006c20 <USBD_StdItfReq+0xc4>
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d001      	beq.n	8006b82 <USBD_StdItfReq+0x26>
 8006b7e:	2b20      	cmp	r3, #32
 8006b80:	d14e      	bne.n	8006c20 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	d840      	bhi.n	8006c12 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	889b      	ldrh	r3, [r3, #4]
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d836      	bhi.n	8006c08 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	889b      	ldrh	r3, [r3, #4]
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f7ff fed9 	bl	800695a <USBD_CoreFindIF>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bac:	7bbb      	ldrb	r3, [r7, #14]
 8006bae:	2bff      	cmp	r3, #255	; 0xff
 8006bb0:	d01d      	beq.n	8006bee <USBD_StdItfReq+0x92>
 8006bb2:	7bbb      	ldrb	r3, [r7, #14]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d11a      	bne.n	8006bee <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006bb8:	7bba      	ldrb	r2, [r7, #14]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	32ae      	adds	r2, #174	; 0xae
 8006bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00f      	beq.n	8006be8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006bc8:	7bba      	ldrb	r2, [r7, #14]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006bd0:	7bba      	ldrb	r2, [r7, #14]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	32ae      	adds	r2, #174	; 0xae
 8006bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	6839      	ldr	r1, [r7, #0]
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	4798      	blx	r3
 8006be2:	4603      	mov	r3, r0
 8006be4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006be6:	e004      	b.n	8006bf2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006be8:	2303      	movs	r3, #3
 8006bea:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006bec:	e001      	b.n	8006bf2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	88db      	ldrh	r3, [r3, #6]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d110      	bne.n	8006c1c <USBD_StdItfReq+0xc0>
 8006bfa:	7bfb      	ldrb	r3, [r7, #15]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10d      	bne.n	8006c1c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 fdaa 	bl	800775a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006c06:	e009      	b.n	8006c1c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006c08:	6839      	ldr	r1, [r7, #0]
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 fcf7 	bl	80075fe <USBD_CtlError>
          break;
 8006c10:	e004      	b.n	8006c1c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006c12:	6839      	ldr	r1, [r7, #0]
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 fcf2 	bl	80075fe <USBD_CtlError>
          break;
 8006c1a:	e000      	b.n	8006c1e <USBD_StdItfReq+0xc2>
          break;
 8006c1c:	bf00      	nop
      }
      break;
 8006c1e:	e004      	b.n	8006c2a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006c20:	6839      	ldr	r1, [r7, #0]
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 fceb 	bl	80075fe <USBD_CtlError>
      break;
 8006c28:	bf00      	nop
  }

  return ret;
 8006c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	889b      	ldrh	r3, [r3, #4]
 8006c46:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c50:	2b40      	cmp	r3, #64	; 0x40
 8006c52:	d007      	beq.n	8006c64 <USBD_StdEPReq+0x30>
 8006c54:	2b40      	cmp	r3, #64	; 0x40
 8006c56:	f200 817f 	bhi.w	8006f58 <USBD_StdEPReq+0x324>
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d02a      	beq.n	8006cb4 <USBD_StdEPReq+0x80>
 8006c5e:	2b20      	cmp	r3, #32
 8006c60:	f040 817a 	bne.w	8006f58 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006c64:	7bbb      	ldrb	r3, [r7, #14]
 8006c66:	4619      	mov	r1, r3
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f7ff fe83 	bl	8006974 <USBD_CoreFindEP>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c72:	7b7b      	ldrb	r3, [r7, #13]
 8006c74:	2bff      	cmp	r3, #255	; 0xff
 8006c76:	f000 8174 	beq.w	8006f62 <USBD_StdEPReq+0x32e>
 8006c7a:	7b7b      	ldrb	r3, [r7, #13]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f040 8170 	bne.w	8006f62 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006c82:	7b7a      	ldrb	r2, [r7, #13]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006c8a:	7b7a      	ldrb	r2, [r7, #13]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	32ae      	adds	r2, #174	; 0xae
 8006c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	f000 8163 	beq.w	8006f62 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006c9c:	7b7a      	ldrb	r2, [r7, #13]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	32ae      	adds	r2, #174	; 0xae
 8006ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	6839      	ldr	r1, [r7, #0]
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	4798      	blx	r3
 8006cae:	4603      	mov	r3, r0
 8006cb0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006cb2:	e156      	b.n	8006f62 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	785b      	ldrb	r3, [r3, #1]
 8006cb8:	2b03      	cmp	r3, #3
 8006cba:	d008      	beq.n	8006cce <USBD_StdEPReq+0x9a>
 8006cbc:	2b03      	cmp	r3, #3
 8006cbe:	f300 8145 	bgt.w	8006f4c <USBD_StdEPReq+0x318>
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f000 809b 	beq.w	8006dfe <USBD_StdEPReq+0x1ca>
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d03c      	beq.n	8006d46 <USBD_StdEPReq+0x112>
 8006ccc:	e13e      	b.n	8006f4c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d002      	beq.n	8006ce0 <USBD_StdEPReq+0xac>
 8006cda:	2b03      	cmp	r3, #3
 8006cdc:	d016      	beq.n	8006d0c <USBD_StdEPReq+0xd8>
 8006cde:	e02c      	b.n	8006d3a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ce0:	7bbb      	ldrb	r3, [r7, #14]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00d      	beq.n	8006d02 <USBD_StdEPReq+0xce>
 8006ce6:	7bbb      	ldrb	r3, [r7, #14]
 8006ce8:	2b80      	cmp	r3, #128	; 0x80
 8006cea:	d00a      	beq.n	8006d02 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006cec:	7bbb      	ldrb	r3, [r7, #14]
 8006cee:	4619      	mov	r1, r3
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f001 f8d3 	bl	8007e9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006cf6:	2180      	movs	r1, #128	; 0x80
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f001 f8cf 	bl	8007e9c <USBD_LL_StallEP>
 8006cfe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d00:	e020      	b.n	8006d44 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006d02:	6839      	ldr	r1, [r7, #0]
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 fc7a 	bl	80075fe <USBD_CtlError>
              break;
 8006d0a:	e01b      	b.n	8006d44 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	885b      	ldrh	r3, [r3, #2]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d10e      	bne.n	8006d32 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006d14:	7bbb      	ldrb	r3, [r7, #14]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00b      	beq.n	8006d32 <USBD_StdEPReq+0xfe>
 8006d1a:	7bbb      	ldrb	r3, [r7, #14]
 8006d1c:	2b80      	cmp	r3, #128	; 0x80
 8006d1e:	d008      	beq.n	8006d32 <USBD_StdEPReq+0xfe>
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	88db      	ldrh	r3, [r3, #6]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d104      	bne.n	8006d32 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d28:	7bbb      	ldrb	r3, [r7, #14]
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f001 f8b5 	bl	8007e9c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 fd11 	bl	800775a <USBD_CtlSendStatus>

              break;
 8006d38:	e004      	b.n	8006d44 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006d3a:	6839      	ldr	r1, [r7, #0]
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 fc5e 	bl	80075fe <USBD_CtlError>
              break;
 8006d42:	bf00      	nop
          }
          break;
 8006d44:	e107      	b.n	8006f56 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d002      	beq.n	8006d58 <USBD_StdEPReq+0x124>
 8006d52:	2b03      	cmp	r3, #3
 8006d54:	d016      	beq.n	8006d84 <USBD_StdEPReq+0x150>
 8006d56:	e04b      	b.n	8006df0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d58:	7bbb      	ldrb	r3, [r7, #14]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00d      	beq.n	8006d7a <USBD_StdEPReq+0x146>
 8006d5e:	7bbb      	ldrb	r3, [r7, #14]
 8006d60:	2b80      	cmp	r3, #128	; 0x80
 8006d62:	d00a      	beq.n	8006d7a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d64:	7bbb      	ldrb	r3, [r7, #14]
 8006d66:	4619      	mov	r1, r3
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f001 f897 	bl	8007e9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d6e:	2180      	movs	r1, #128	; 0x80
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f001 f893 	bl	8007e9c <USBD_LL_StallEP>
 8006d76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d78:	e040      	b.n	8006dfc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006d7a:	6839      	ldr	r1, [r7, #0]
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 fc3e 	bl	80075fe <USBD_CtlError>
              break;
 8006d82:	e03b      	b.n	8006dfc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	885b      	ldrh	r3, [r3, #2]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d136      	bne.n	8006dfa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006d8c:	7bbb      	ldrb	r3, [r7, #14]
 8006d8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d004      	beq.n	8006da0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006d96:	7bbb      	ldrb	r3, [r7, #14]
 8006d98:	4619      	mov	r1, r3
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f001 f89d 	bl	8007eda <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 fcda 	bl	800775a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006da6:	7bbb      	ldrb	r3, [r7, #14]
 8006da8:	4619      	mov	r1, r3
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f7ff fde2 	bl	8006974 <USBD_CoreFindEP>
 8006db0:	4603      	mov	r3, r0
 8006db2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006db4:	7b7b      	ldrb	r3, [r7, #13]
 8006db6:	2bff      	cmp	r3, #255	; 0xff
 8006db8:	d01f      	beq.n	8006dfa <USBD_StdEPReq+0x1c6>
 8006dba:	7b7b      	ldrb	r3, [r7, #13]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d11c      	bne.n	8006dfa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006dc0:	7b7a      	ldrb	r2, [r7, #13]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006dc8:	7b7a      	ldrb	r2, [r7, #13]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	32ae      	adds	r2, #174	; 0xae
 8006dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d010      	beq.n	8006dfa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006dd8:	7b7a      	ldrb	r2, [r7, #13]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	32ae      	adds	r2, #174	; 0xae
 8006dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	6839      	ldr	r1, [r7, #0]
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	4798      	blx	r3
 8006dea:	4603      	mov	r3, r0
 8006dec:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006dee:	e004      	b.n	8006dfa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006df0:	6839      	ldr	r1, [r7, #0]
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fc03 	bl	80075fe <USBD_CtlError>
              break;
 8006df8:	e000      	b.n	8006dfc <USBD_StdEPReq+0x1c8>
              break;
 8006dfa:	bf00      	nop
          }
          break;
 8006dfc:	e0ab      	b.n	8006f56 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d002      	beq.n	8006e10 <USBD_StdEPReq+0x1dc>
 8006e0a:	2b03      	cmp	r3, #3
 8006e0c:	d032      	beq.n	8006e74 <USBD_StdEPReq+0x240>
 8006e0e:	e097      	b.n	8006f40 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e10:	7bbb      	ldrb	r3, [r7, #14]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d007      	beq.n	8006e26 <USBD_StdEPReq+0x1f2>
 8006e16:	7bbb      	ldrb	r3, [r7, #14]
 8006e18:	2b80      	cmp	r3, #128	; 0x80
 8006e1a:	d004      	beq.n	8006e26 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006e1c:	6839      	ldr	r1, [r7, #0]
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 fbed 	bl	80075fe <USBD_CtlError>
                break;
 8006e24:	e091      	b.n	8006f4a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	da0b      	bge.n	8006e46 <USBD_StdEPReq+0x212>
 8006e2e:	7bbb      	ldrb	r3, [r7, #14]
 8006e30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e34:	4613      	mov	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	3310      	adds	r3, #16
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	4413      	add	r3, r2
 8006e42:	3304      	adds	r3, #4
 8006e44:	e00b      	b.n	8006e5e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e46:	7bbb      	ldrb	r3, [r7, #14]
 8006e48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4413      	add	r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	3304      	adds	r3, #4
 8006e5e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	2200      	movs	r2, #0
 8006e64:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	2202      	movs	r2, #2
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 fc37 	bl	80076e0 <USBD_CtlSendData>
              break;
 8006e72:	e06a      	b.n	8006f4a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006e74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	da11      	bge.n	8006ea0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006e7c:	7bbb      	ldrb	r3, [r7, #14]
 8006e7e:	f003 020f 	and.w	r2, r3, #15
 8006e82:	6879      	ldr	r1, [r7, #4]
 8006e84:	4613      	mov	r3, r2
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4413      	add	r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	440b      	add	r3, r1
 8006e8e:	3324      	adds	r3, #36	; 0x24
 8006e90:	881b      	ldrh	r3, [r3, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d117      	bne.n	8006ec6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006e96:	6839      	ldr	r1, [r7, #0]
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 fbb0 	bl	80075fe <USBD_CtlError>
                  break;
 8006e9e:	e054      	b.n	8006f4a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ea0:	7bbb      	ldrb	r3, [r7, #14]
 8006ea2:	f003 020f 	and.w	r2, r3, #15
 8006ea6:	6879      	ldr	r1, [r7, #4]
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	4413      	add	r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	440b      	add	r3, r1
 8006eb2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006eb6:	881b      	ldrh	r3, [r3, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d104      	bne.n	8006ec6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006ebc:	6839      	ldr	r1, [r7, #0]
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 fb9d 	bl	80075fe <USBD_CtlError>
                  break;
 8006ec4:	e041      	b.n	8006f4a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ec6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	da0b      	bge.n	8006ee6 <USBD_StdEPReq+0x2b2>
 8006ece:	7bbb      	ldrb	r3, [r7, #14]
 8006ed0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	4413      	add	r3, r2
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	3310      	adds	r3, #16
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	3304      	adds	r3, #4
 8006ee4:	e00b      	b.n	8006efe <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ee6:	7bbb      	ldrb	r3, [r7, #14]
 8006ee8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006eec:	4613      	mov	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4413      	add	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	4413      	add	r3, r2
 8006efc:	3304      	adds	r3, #4
 8006efe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006f00:	7bbb      	ldrb	r3, [r7, #14]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d002      	beq.n	8006f0c <USBD_StdEPReq+0x2d8>
 8006f06:	7bbb      	ldrb	r3, [r7, #14]
 8006f08:	2b80      	cmp	r3, #128	; 0x80
 8006f0a:	d103      	bne.n	8006f14 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	601a      	str	r2, [r3, #0]
 8006f12:	e00e      	b.n	8006f32 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006f14:	7bbb      	ldrb	r3, [r7, #14]
 8006f16:	4619      	mov	r1, r3
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 fffd 	bl	8007f18 <USBD_LL_IsStallEP>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d003      	beq.n	8006f2c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	2201      	movs	r2, #1
 8006f28:	601a      	str	r2, [r3, #0]
 8006f2a:	e002      	b.n	8006f32 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	2202      	movs	r2, #2
 8006f36:	4619      	mov	r1, r3
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 fbd1 	bl	80076e0 <USBD_CtlSendData>
              break;
 8006f3e:	e004      	b.n	8006f4a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006f40:	6839      	ldr	r1, [r7, #0]
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fb5b 	bl	80075fe <USBD_CtlError>
              break;
 8006f48:	bf00      	nop
          }
          break;
 8006f4a:	e004      	b.n	8006f56 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006f4c:	6839      	ldr	r1, [r7, #0]
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 fb55 	bl	80075fe <USBD_CtlError>
          break;
 8006f54:	bf00      	nop
      }
      break;
 8006f56:	e005      	b.n	8006f64 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006f58:	6839      	ldr	r1, [r7, #0]
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 fb4f 	bl	80075fe <USBD_CtlError>
      break;
 8006f60:	e000      	b.n	8006f64 <USBD_StdEPReq+0x330>
      break;
 8006f62:	bf00      	nop
  }

  return ret;
 8006f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
	...

08006f70 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006f82:	2300      	movs	r3, #0
 8006f84:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	885b      	ldrh	r3, [r3, #2]
 8006f8a:	0a1b      	lsrs	r3, r3, #8
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	2b06      	cmp	r3, #6
 8006f92:	f200 8128 	bhi.w	80071e6 <USBD_GetDescriptor+0x276>
 8006f96:	a201      	add	r2, pc, #4	; (adr r2, 8006f9c <USBD_GetDescriptor+0x2c>)
 8006f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9c:	08006fb9 	.word	0x08006fb9
 8006fa0:	08006fd1 	.word	0x08006fd1
 8006fa4:	08007011 	.word	0x08007011
 8006fa8:	080071e7 	.word	0x080071e7
 8006fac:	080071e7 	.word	0x080071e7
 8006fb0:	08007187 	.word	0x08007187
 8006fb4:	080071b3 	.word	0x080071b3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	7c12      	ldrb	r2, [r2, #16]
 8006fc4:	f107 0108 	add.w	r1, r7, #8
 8006fc8:	4610      	mov	r0, r2
 8006fca:	4798      	blx	r3
 8006fcc:	60f8      	str	r0, [r7, #12]
      break;
 8006fce:	e112      	b.n	80071f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	7c1b      	ldrb	r3, [r3, #16]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d10d      	bne.n	8006ff4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe0:	f107 0208 	add.w	r2, r7, #8
 8006fe4:	4610      	mov	r0, r2
 8006fe6:	4798      	blx	r3
 8006fe8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	3301      	adds	r3, #1
 8006fee:	2202      	movs	r2, #2
 8006ff0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006ff2:	e100      	b.n	80071f6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffc:	f107 0208 	add.w	r2, r7, #8
 8007000:	4610      	mov	r0, r2
 8007002:	4798      	blx	r3
 8007004:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	3301      	adds	r3, #1
 800700a:	2202      	movs	r2, #2
 800700c:	701a      	strb	r2, [r3, #0]
      break;
 800700e:	e0f2      	b.n	80071f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	885b      	ldrh	r3, [r3, #2]
 8007014:	b2db      	uxtb	r3, r3
 8007016:	2b05      	cmp	r3, #5
 8007018:	f200 80ac 	bhi.w	8007174 <USBD_GetDescriptor+0x204>
 800701c:	a201      	add	r2, pc, #4	; (adr r2, 8007024 <USBD_GetDescriptor+0xb4>)
 800701e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007022:	bf00      	nop
 8007024:	0800703d 	.word	0x0800703d
 8007028:	08007071 	.word	0x08007071
 800702c:	080070a5 	.word	0x080070a5
 8007030:	080070d9 	.word	0x080070d9
 8007034:	0800710d 	.word	0x0800710d
 8007038:	08007141 	.word	0x08007141
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00b      	beq.n	8007060 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	7c12      	ldrb	r2, [r2, #16]
 8007054:	f107 0108 	add.w	r1, r7, #8
 8007058:	4610      	mov	r0, r2
 800705a:	4798      	blx	r3
 800705c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800705e:	e091      	b.n	8007184 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007060:	6839      	ldr	r1, [r7, #0]
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 facb 	bl	80075fe <USBD_CtlError>
            err++;
 8007068:	7afb      	ldrb	r3, [r7, #11]
 800706a:	3301      	adds	r3, #1
 800706c:	72fb      	strb	r3, [r7, #11]
          break;
 800706e:	e089      	b.n	8007184 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00b      	beq.n	8007094 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	7c12      	ldrb	r2, [r2, #16]
 8007088:	f107 0108 	add.w	r1, r7, #8
 800708c:	4610      	mov	r0, r2
 800708e:	4798      	blx	r3
 8007090:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007092:	e077      	b.n	8007184 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007094:	6839      	ldr	r1, [r7, #0]
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 fab1 	bl	80075fe <USBD_CtlError>
            err++;
 800709c:	7afb      	ldrb	r3, [r7, #11]
 800709e:	3301      	adds	r3, #1
 80070a0:	72fb      	strb	r3, [r7, #11]
          break;
 80070a2:	e06f      	b.n	8007184 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00b      	beq.n	80070c8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	7c12      	ldrb	r2, [r2, #16]
 80070bc:	f107 0108 	add.w	r1, r7, #8
 80070c0:	4610      	mov	r0, r2
 80070c2:	4798      	blx	r3
 80070c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070c6:	e05d      	b.n	8007184 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070c8:	6839      	ldr	r1, [r7, #0]
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 fa97 	bl	80075fe <USBD_CtlError>
            err++;
 80070d0:	7afb      	ldrb	r3, [r7, #11]
 80070d2:	3301      	adds	r3, #1
 80070d4:	72fb      	strb	r3, [r7, #11]
          break;
 80070d6:	e055      	b.n	8007184 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00b      	beq.n	80070fc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	7c12      	ldrb	r2, [r2, #16]
 80070f0:	f107 0108 	add.w	r1, r7, #8
 80070f4:	4610      	mov	r0, r2
 80070f6:	4798      	blx	r3
 80070f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070fa:	e043      	b.n	8007184 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070fc:	6839      	ldr	r1, [r7, #0]
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 fa7d 	bl	80075fe <USBD_CtlError>
            err++;
 8007104:	7afb      	ldrb	r3, [r7, #11]
 8007106:	3301      	adds	r3, #1
 8007108:	72fb      	strb	r3, [r7, #11]
          break;
 800710a:	e03b      	b.n	8007184 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007112:	695b      	ldr	r3, [r3, #20]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00b      	beq.n	8007130 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	7c12      	ldrb	r2, [r2, #16]
 8007124:	f107 0108 	add.w	r1, r7, #8
 8007128:	4610      	mov	r0, r2
 800712a:	4798      	blx	r3
 800712c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800712e:	e029      	b.n	8007184 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007130:	6839      	ldr	r1, [r7, #0]
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 fa63 	bl	80075fe <USBD_CtlError>
            err++;
 8007138:	7afb      	ldrb	r3, [r7, #11]
 800713a:	3301      	adds	r3, #1
 800713c:	72fb      	strb	r3, [r7, #11]
          break;
 800713e:	e021      	b.n	8007184 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007146:	699b      	ldr	r3, [r3, #24]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00b      	beq.n	8007164 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007152:	699b      	ldr	r3, [r3, #24]
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	7c12      	ldrb	r2, [r2, #16]
 8007158:	f107 0108 	add.w	r1, r7, #8
 800715c:	4610      	mov	r0, r2
 800715e:	4798      	blx	r3
 8007160:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007162:	e00f      	b.n	8007184 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007164:	6839      	ldr	r1, [r7, #0]
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 fa49 	bl	80075fe <USBD_CtlError>
            err++;
 800716c:	7afb      	ldrb	r3, [r7, #11]
 800716e:	3301      	adds	r3, #1
 8007170:	72fb      	strb	r3, [r7, #11]
          break;
 8007172:	e007      	b.n	8007184 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007174:	6839      	ldr	r1, [r7, #0]
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fa41 	bl	80075fe <USBD_CtlError>
          err++;
 800717c:	7afb      	ldrb	r3, [r7, #11]
 800717e:	3301      	adds	r3, #1
 8007180:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007182:	bf00      	nop
      }
      break;
 8007184:	e037      	b.n	80071f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	7c1b      	ldrb	r3, [r3, #16]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d109      	bne.n	80071a2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007196:	f107 0208 	add.w	r2, r7, #8
 800719a:	4610      	mov	r0, r2
 800719c:	4798      	blx	r3
 800719e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071a0:	e029      	b.n	80071f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80071a2:	6839      	ldr	r1, [r7, #0]
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 fa2a 	bl	80075fe <USBD_CtlError>
        err++;
 80071aa:	7afb      	ldrb	r3, [r7, #11]
 80071ac:	3301      	adds	r3, #1
 80071ae:	72fb      	strb	r3, [r7, #11]
      break;
 80071b0:	e021      	b.n	80071f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	7c1b      	ldrb	r3, [r3, #16]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d10d      	bne.n	80071d6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c2:	f107 0208 	add.w	r2, r7, #8
 80071c6:	4610      	mov	r0, r2
 80071c8:	4798      	blx	r3
 80071ca:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	3301      	adds	r3, #1
 80071d0:	2207      	movs	r2, #7
 80071d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071d4:	e00f      	b.n	80071f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80071d6:	6839      	ldr	r1, [r7, #0]
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 fa10 	bl	80075fe <USBD_CtlError>
        err++;
 80071de:	7afb      	ldrb	r3, [r7, #11]
 80071e0:	3301      	adds	r3, #1
 80071e2:	72fb      	strb	r3, [r7, #11]
      break;
 80071e4:	e007      	b.n	80071f6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80071e6:	6839      	ldr	r1, [r7, #0]
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 fa08 	bl	80075fe <USBD_CtlError>
      err++;
 80071ee:	7afb      	ldrb	r3, [r7, #11]
 80071f0:	3301      	adds	r3, #1
 80071f2:	72fb      	strb	r3, [r7, #11]
      break;
 80071f4:	bf00      	nop
  }

  if (err != 0U)
 80071f6:	7afb      	ldrb	r3, [r7, #11]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d11e      	bne.n	800723a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	88db      	ldrh	r3, [r3, #6]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d016      	beq.n	8007232 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007204:	893b      	ldrh	r3, [r7, #8]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00e      	beq.n	8007228 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	88da      	ldrh	r2, [r3, #6]
 800720e:	893b      	ldrh	r3, [r7, #8]
 8007210:	4293      	cmp	r3, r2
 8007212:	bf28      	it	cs
 8007214:	4613      	movcs	r3, r2
 8007216:	b29b      	uxth	r3, r3
 8007218:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800721a:	893b      	ldrh	r3, [r7, #8]
 800721c:	461a      	mov	r2, r3
 800721e:	68f9      	ldr	r1, [r7, #12]
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 fa5d 	bl	80076e0 <USBD_CtlSendData>
 8007226:	e009      	b.n	800723c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007228:	6839      	ldr	r1, [r7, #0]
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 f9e7 	bl	80075fe <USBD_CtlError>
 8007230:	e004      	b.n	800723c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 fa91 	bl	800775a <USBD_CtlSendStatus>
 8007238:	e000      	b.n	800723c <USBD_GetDescriptor+0x2cc>
    return;
 800723a:	bf00      	nop
  }
}
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop

08007244 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	889b      	ldrh	r3, [r3, #4]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d131      	bne.n	80072ba <USBD_SetAddress+0x76>
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	88db      	ldrh	r3, [r3, #6]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d12d      	bne.n	80072ba <USBD_SetAddress+0x76>
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	885b      	ldrh	r3, [r3, #2]
 8007262:	2b7f      	cmp	r3, #127	; 0x7f
 8007264:	d829      	bhi.n	80072ba <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	885b      	ldrh	r3, [r3, #2]
 800726a:	b2db      	uxtb	r3, r3
 800726c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007270:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007278:	b2db      	uxtb	r3, r3
 800727a:	2b03      	cmp	r3, #3
 800727c:	d104      	bne.n	8007288 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800727e:	6839      	ldr	r1, [r7, #0]
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 f9bc 	bl	80075fe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007286:	e01d      	b.n	80072c4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	7bfa      	ldrb	r2, [r7, #15]
 800728c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007290:	7bfb      	ldrb	r3, [r7, #15]
 8007292:	4619      	mov	r1, r3
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 fe6b 	bl	8007f70 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 fa5d 	bl	800775a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80072a0:	7bfb      	ldrb	r3, [r7, #15]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d004      	beq.n	80072b0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2202      	movs	r2, #2
 80072aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ae:	e009      	b.n	80072c4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072b8:	e004      	b.n	80072c4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80072ba:	6839      	ldr	r1, [r7, #0]
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 f99e 	bl	80075fe <USBD_CtlError>
  }
}
 80072c2:	bf00      	nop
 80072c4:	bf00      	nop
 80072c6:	3710      	adds	r7, #16
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072d6:	2300      	movs	r3, #0
 80072d8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	885b      	ldrh	r3, [r3, #2]
 80072de:	b2da      	uxtb	r2, r3
 80072e0:	4b4e      	ldr	r3, [pc, #312]	; (800741c <USBD_SetConfig+0x150>)
 80072e2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80072e4:	4b4d      	ldr	r3, [pc, #308]	; (800741c <USBD_SetConfig+0x150>)
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d905      	bls.n	80072f8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80072ec:	6839      	ldr	r1, [r7, #0]
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 f985 	bl	80075fe <USBD_CtlError>
    return USBD_FAIL;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e08c      	b.n	8007412 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	2b02      	cmp	r3, #2
 8007302:	d002      	beq.n	800730a <USBD_SetConfig+0x3e>
 8007304:	2b03      	cmp	r3, #3
 8007306:	d029      	beq.n	800735c <USBD_SetConfig+0x90>
 8007308:	e075      	b.n	80073f6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800730a:	4b44      	ldr	r3, [pc, #272]	; (800741c <USBD_SetConfig+0x150>)
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d020      	beq.n	8007354 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007312:	4b42      	ldr	r3, [pc, #264]	; (800741c <USBD_SetConfig+0x150>)
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	461a      	mov	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800731c:	4b3f      	ldr	r3, [pc, #252]	; (800741c <USBD_SetConfig+0x150>)
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	4619      	mov	r1, r3
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f7fe ffe7 	bl	80062f6 <USBD_SetClassConfig>
 8007328:	4603      	mov	r3, r0
 800732a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800732c:	7bfb      	ldrb	r3, [r7, #15]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d008      	beq.n	8007344 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007332:	6839      	ldr	r1, [r7, #0]
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 f962 	bl	80075fe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2202      	movs	r2, #2
 800733e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007342:	e065      	b.n	8007410 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 fa08 	bl	800775a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2203      	movs	r2, #3
 800734e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007352:	e05d      	b.n	8007410 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 fa00 	bl	800775a <USBD_CtlSendStatus>
      break;
 800735a:	e059      	b.n	8007410 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800735c:	4b2f      	ldr	r3, [pc, #188]	; (800741c <USBD_SetConfig+0x150>)
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d112      	bne.n	800738a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2202      	movs	r2, #2
 8007368:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800736c:	4b2b      	ldr	r3, [pc, #172]	; (800741c <USBD_SetConfig+0x150>)
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	461a      	mov	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007376:	4b29      	ldr	r3, [pc, #164]	; (800741c <USBD_SetConfig+0x150>)
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	4619      	mov	r1, r3
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f7fe ffd6 	bl	800632e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f9e9 	bl	800775a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007388:	e042      	b.n	8007410 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800738a:	4b24      	ldr	r3, [pc, #144]	; (800741c <USBD_SetConfig+0x150>)
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	461a      	mov	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	429a      	cmp	r2, r3
 8007396:	d02a      	beq.n	80073ee <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	b2db      	uxtb	r3, r3
 800739e:	4619      	mov	r1, r3
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f7fe ffc4 	bl	800632e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80073a6:	4b1d      	ldr	r3, [pc, #116]	; (800741c <USBD_SetConfig+0x150>)
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	461a      	mov	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80073b0:	4b1a      	ldr	r3, [pc, #104]	; (800741c <USBD_SetConfig+0x150>)
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	4619      	mov	r1, r3
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7fe ff9d 	bl	80062f6 <USBD_SetClassConfig>
 80073bc:	4603      	mov	r3, r0
 80073be:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80073c0:	7bfb      	ldrb	r3, [r7, #15]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00f      	beq.n	80073e6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80073c6:	6839      	ldr	r1, [r7, #0]
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 f918 	bl	80075fe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	4619      	mov	r1, r3
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f7fe ffa9 	bl	800632e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2202      	movs	r2, #2
 80073e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80073e4:	e014      	b.n	8007410 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 f9b7 	bl	800775a <USBD_CtlSendStatus>
      break;
 80073ec:	e010      	b.n	8007410 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 f9b3 	bl	800775a <USBD_CtlSendStatus>
      break;
 80073f4:	e00c      	b.n	8007410 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80073f6:	6839      	ldr	r1, [r7, #0]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f900 	bl	80075fe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80073fe:	4b07      	ldr	r3, [pc, #28]	; (800741c <USBD_SetConfig+0x150>)
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	4619      	mov	r1, r3
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f7fe ff92 	bl	800632e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800740a:	2303      	movs	r3, #3
 800740c:	73fb      	strb	r3, [r7, #15]
      break;
 800740e:	bf00      	nop
  }

  return ret;
 8007410:	7bfb      	ldrb	r3, [r7, #15]
}
 8007412:	4618      	mov	r0, r3
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	20000330 	.word	0x20000330

08007420 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	88db      	ldrh	r3, [r3, #6]
 800742e:	2b01      	cmp	r3, #1
 8007430:	d004      	beq.n	800743c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007432:	6839      	ldr	r1, [r7, #0]
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f8e2 	bl	80075fe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800743a:	e023      	b.n	8007484 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007442:	b2db      	uxtb	r3, r3
 8007444:	2b02      	cmp	r3, #2
 8007446:	dc02      	bgt.n	800744e <USBD_GetConfig+0x2e>
 8007448:	2b00      	cmp	r3, #0
 800744a:	dc03      	bgt.n	8007454 <USBD_GetConfig+0x34>
 800744c:	e015      	b.n	800747a <USBD_GetConfig+0x5a>
 800744e:	2b03      	cmp	r3, #3
 8007450:	d00b      	beq.n	800746a <USBD_GetConfig+0x4a>
 8007452:	e012      	b.n	800747a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	3308      	adds	r3, #8
 800745e:	2201      	movs	r2, #1
 8007460:	4619      	mov	r1, r3
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 f93c 	bl	80076e0 <USBD_CtlSendData>
        break;
 8007468:	e00c      	b.n	8007484 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	3304      	adds	r3, #4
 800746e:	2201      	movs	r2, #1
 8007470:	4619      	mov	r1, r3
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f934 	bl	80076e0 <USBD_CtlSendData>
        break;
 8007478:	e004      	b.n	8007484 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800747a:	6839      	ldr	r1, [r7, #0]
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f8be 	bl	80075fe <USBD_CtlError>
        break;
 8007482:	bf00      	nop
}
 8007484:	bf00      	nop
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800749c:	b2db      	uxtb	r3, r3
 800749e:	3b01      	subs	r3, #1
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d81e      	bhi.n	80074e2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	88db      	ldrh	r3, [r3, #6]
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	d004      	beq.n	80074b6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80074ac:	6839      	ldr	r1, [r7, #0]
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f8a5 	bl	80075fe <USBD_CtlError>
        break;
 80074b4:	e01a      	b.n	80074ec <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2201      	movs	r2, #1
 80074ba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d005      	beq.n	80074d2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	f043 0202 	orr.w	r2, r3, #2
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	330c      	adds	r3, #12
 80074d6:	2202      	movs	r2, #2
 80074d8:	4619      	mov	r1, r3
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f900 	bl	80076e0 <USBD_CtlSendData>
      break;
 80074e0:	e004      	b.n	80074ec <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80074e2:	6839      	ldr	r1, [r7, #0]
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 f88a 	bl	80075fe <USBD_CtlError>
      break;
 80074ea:	bf00      	nop
  }
}
 80074ec:	bf00      	nop
 80074ee:	3708      	adds	r7, #8
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	885b      	ldrh	r3, [r3, #2]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d107      	bne.n	8007516 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2201      	movs	r2, #1
 800750a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 f923 	bl	800775a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007514:	e013      	b.n	800753e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	885b      	ldrh	r3, [r3, #2]
 800751a:	2b02      	cmp	r3, #2
 800751c:	d10b      	bne.n	8007536 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	889b      	ldrh	r3, [r3, #4]
 8007522:	0a1b      	lsrs	r3, r3, #8
 8007524:	b29b      	uxth	r3, r3
 8007526:	b2da      	uxtb	r2, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f913 	bl	800775a <USBD_CtlSendStatus>
}
 8007534:	e003      	b.n	800753e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007536:	6839      	ldr	r1, [r7, #0]
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 f860 	bl	80075fe <USBD_CtlError>
}
 800753e:	bf00      	nop
 8007540:	3708      	adds	r7, #8
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b082      	sub	sp, #8
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
 800754e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007556:	b2db      	uxtb	r3, r3
 8007558:	3b01      	subs	r3, #1
 800755a:	2b02      	cmp	r3, #2
 800755c:	d80b      	bhi.n	8007576 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	885b      	ldrh	r3, [r3, #2]
 8007562:	2b01      	cmp	r3, #1
 8007564:	d10c      	bne.n	8007580 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f8f3 	bl	800775a <USBD_CtlSendStatus>
      }
      break;
 8007574:	e004      	b.n	8007580 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007576:	6839      	ldr	r1, [r7, #0]
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 f840 	bl	80075fe <USBD_CtlError>
      break;
 800757e:	e000      	b.n	8007582 <USBD_ClrFeature+0x3c>
      break;
 8007580:	bf00      	nop
  }
}
 8007582:	bf00      	nop
 8007584:	3708      	adds	r7, #8
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b084      	sub	sp, #16
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
 8007592:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	781a      	ldrb	r2, [r3, #0]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	3301      	adds	r3, #1
 80075a4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	781a      	ldrb	r2, [r3, #0]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	3301      	adds	r3, #1
 80075b2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f7ff fa41 	bl	8006a3c <SWAPBYTE>
 80075ba:	4603      	mov	r3, r0
 80075bc:	461a      	mov	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	3301      	adds	r3, #1
 80075c6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	3301      	adds	r3, #1
 80075cc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f7ff fa34 	bl	8006a3c <SWAPBYTE>
 80075d4:	4603      	mov	r3, r0
 80075d6:	461a      	mov	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	3301      	adds	r3, #1
 80075e0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	3301      	adds	r3, #1
 80075e6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f7ff fa27 	bl	8006a3c <SWAPBYTE>
 80075ee:	4603      	mov	r3, r0
 80075f0:	461a      	mov	r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	80da      	strh	r2, [r3, #6]
}
 80075f6:	bf00      	nop
 80075f8:	3710      	adds	r7, #16
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b082      	sub	sp, #8
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
 8007606:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007608:	2180      	movs	r1, #128	; 0x80
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 fc46 	bl	8007e9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007610:	2100      	movs	r1, #0
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 fc42 	bl	8007e9c <USBD_LL_StallEP>
}
 8007618:	bf00      	nop
 800761a:	3708      	adds	r7, #8
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b086      	sub	sp, #24
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800762c:	2300      	movs	r3, #0
 800762e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d036      	beq.n	80076a4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800763a:	6938      	ldr	r0, [r7, #16]
 800763c:	f000 f836 	bl	80076ac <USBD_GetLen>
 8007640:	4603      	mov	r3, r0
 8007642:	3301      	adds	r3, #1
 8007644:	b29b      	uxth	r3, r3
 8007646:	005b      	lsls	r3, r3, #1
 8007648:	b29a      	uxth	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800764e:	7dfb      	ldrb	r3, [r7, #23]
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	4413      	add	r3, r2
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	7812      	ldrb	r2, [r2, #0]
 8007658:	701a      	strb	r2, [r3, #0]
  idx++;
 800765a:	7dfb      	ldrb	r3, [r7, #23]
 800765c:	3301      	adds	r3, #1
 800765e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007660:	7dfb      	ldrb	r3, [r7, #23]
 8007662:	68ba      	ldr	r2, [r7, #8]
 8007664:	4413      	add	r3, r2
 8007666:	2203      	movs	r2, #3
 8007668:	701a      	strb	r2, [r3, #0]
  idx++;
 800766a:	7dfb      	ldrb	r3, [r7, #23]
 800766c:	3301      	adds	r3, #1
 800766e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007670:	e013      	b.n	800769a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007672:	7dfb      	ldrb	r3, [r7, #23]
 8007674:	68ba      	ldr	r2, [r7, #8]
 8007676:	4413      	add	r3, r2
 8007678:	693a      	ldr	r2, [r7, #16]
 800767a:	7812      	ldrb	r2, [r2, #0]
 800767c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	3301      	adds	r3, #1
 8007682:	613b      	str	r3, [r7, #16]
    idx++;
 8007684:	7dfb      	ldrb	r3, [r7, #23]
 8007686:	3301      	adds	r3, #1
 8007688:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800768a:	7dfb      	ldrb	r3, [r7, #23]
 800768c:	68ba      	ldr	r2, [r7, #8]
 800768e:	4413      	add	r3, r2
 8007690:	2200      	movs	r2, #0
 8007692:	701a      	strb	r2, [r3, #0]
    idx++;
 8007694:	7dfb      	ldrb	r3, [r7, #23]
 8007696:	3301      	adds	r3, #1
 8007698:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1e7      	bne.n	8007672 <USBD_GetString+0x52>
 80076a2:	e000      	b.n	80076a6 <USBD_GetString+0x86>
    return;
 80076a4:	bf00      	nop
  }
}
 80076a6:	3718      	adds	r7, #24
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b085      	sub	sp, #20
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80076b4:	2300      	movs	r3, #0
 80076b6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80076bc:	e005      	b.n	80076ca <USBD_GetLen+0x1e>
  {
    len++;
 80076be:	7bfb      	ldrb	r3, [r7, #15]
 80076c0:	3301      	adds	r3, #1
 80076c2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	3301      	adds	r3, #1
 80076c8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1f5      	bne.n	80076be <USBD_GetLen+0x12>
  }

  return len;
 80076d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3714      	adds	r7, #20
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2202      	movs	r2, #2
 80076f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	68ba      	ldr	r2, [r7, #8]
 8007704:	2100      	movs	r1, #0
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f000 fc51 	bl	8007fae <USBD_LL_Transmit>

  return USBD_OK;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b084      	sub	sp, #16
 800771a:	af00      	add	r7, sp, #0
 800771c:	60f8      	str	r0, [r7, #12]
 800771e:	60b9      	str	r1, [r7, #8]
 8007720:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	68ba      	ldr	r2, [r7, #8]
 8007726:	2100      	movs	r1, #0
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f000 fc40 	bl	8007fae <USBD_LL_Transmit>

  return USBD_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	68ba      	ldr	r2, [r7, #8]
 8007748:	2100      	movs	r1, #0
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f000 fc50 	bl	8007ff0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b082      	sub	sp, #8
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2204      	movs	r2, #4
 8007766:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800776a:	2300      	movs	r3, #0
 800776c:	2200      	movs	r2, #0
 800776e:	2100      	movs	r1, #0
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 fc1c 	bl	8007fae <USBD_LL_Transmit>

  return USBD_OK;
 8007776:	2300      	movs	r3, #0
}
 8007778:	4618      	mov	r0, r3
 800777a:	3708      	adds	r7, #8
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2205      	movs	r2, #5
 800778c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007790:	2300      	movs	r3, #0
 8007792:	2200      	movs	r2, #0
 8007794:	2100      	movs	r1, #0
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fc2a 	bl	8007ff0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3708      	adds	r7, #8
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
	...

080077a8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b087      	sub	sp, #28
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	4613      	mov	r3, r2
 80077b4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80077b6:	2301      	movs	r3, #1
 80077b8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80077ba:	2300      	movs	r3, #0
 80077bc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80077be:	4b1f      	ldr	r3, [pc, #124]	; (800783c <FATFS_LinkDriverEx+0x94>)
 80077c0:	7a5b      	ldrb	r3, [r3, #9]
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d131      	bne.n	800782c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80077c8:	4b1c      	ldr	r3, [pc, #112]	; (800783c <FATFS_LinkDriverEx+0x94>)
 80077ca:	7a5b      	ldrb	r3, [r3, #9]
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	461a      	mov	r2, r3
 80077d0:	4b1a      	ldr	r3, [pc, #104]	; (800783c <FATFS_LinkDriverEx+0x94>)
 80077d2:	2100      	movs	r1, #0
 80077d4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80077d6:	4b19      	ldr	r3, [pc, #100]	; (800783c <FATFS_LinkDriverEx+0x94>)
 80077d8:	7a5b      	ldrb	r3, [r3, #9]
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	4a17      	ldr	r2, [pc, #92]	; (800783c <FATFS_LinkDriverEx+0x94>)
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	4413      	add	r3, r2
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80077e6:	4b15      	ldr	r3, [pc, #84]	; (800783c <FATFS_LinkDriverEx+0x94>)
 80077e8:	7a5b      	ldrb	r3, [r3, #9]
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	461a      	mov	r2, r3
 80077ee:	4b13      	ldr	r3, [pc, #76]	; (800783c <FATFS_LinkDriverEx+0x94>)
 80077f0:	4413      	add	r3, r2
 80077f2:	79fa      	ldrb	r2, [r7, #7]
 80077f4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80077f6:	4b11      	ldr	r3, [pc, #68]	; (800783c <FATFS_LinkDriverEx+0x94>)
 80077f8:	7a5b      	ldrb	r3, [r3, #9]
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	1c5a      	adds	r2, r3, #1
 80077fe:	b2d1      	uxtb	r1, r2
 8007800:	4a0e      	ldr	r2, [pc, #56]	; (800783c <FATFS_LinkDriverEx+0x94>)
 8007802:	7251      	strb	r1, [r2, #9]
 8007804:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007806:	7dbb      	ldrb	r3, [r7, #22]
 8007808:	3330      	adds	r3, #48	; 0x30
 800780a:	b2da      	uxtb	r2, r3
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	3301      	adds	r3, #1
 8007814:	223a      	movs	r2, #58	; 0x3a
 8007816:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	3302      	adds	r3, #2
 800781c:	222f      	movs	r2, #47	; 0x2f
 800781e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	3303      	adds	r3, #3
 8007824:	2200      	movs	r2, #0
 8007826:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007828:	2300      	movs	r3, #0
 800782a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800782c:	7dfb      	ldrb	r3, [r7, #23]
}
 800782e:	4618      	mov	r0, r3
 8007830:	371c      	adds	r7, #28
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	20000334 	.word	0x20000334

08007840 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800784a:	2200      	movs	r2, #0
 800784c:	6839      	ldr	r1, [r7, #0]
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f7ff ffaa 	bl	80077a8 <FATFS_LinkDriverEx>
 8007854:	4603      	mov	r3, r0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3708      	adds	r7, #8
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
	...

08007860 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007864:	2200      	movs	r2, #0
 8007866:	490e      	ldr	r1, [pc, #56]	; (80078a0 <MX_USB_DEVICE_Init+0x40>)
 8007868:	480e      	ldr	r0, [pc, #56]	; (80078a4 <MX_USB_DEVICE_Init+0x44>)
 800786a:	f7fe fcc7 	bl	80061fc <USBD_Init>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d001      	beq.n	8007878 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007874:	f7f9 f8e8 	bl	8000a48 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007878:	490b      	ldr	r1, [pc, #44]	; (80078a8 <MX_USB_DEVICE_Init+0x48>)
 800787a:	480a      	ldr	r0, [pc, #40]	; (80078a4 <MX_USB_DEVICE_Init+0x44>)
 800787c:	f7fe fcee 	bl	800625c <USBD_RegisterClass>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d001      	beq.n	800788a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007886:	f7f9 f8df 	bl	8000a48 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800788a:	4806      	ldr	r0, [pc, #24]	; (80078a4 <MX_USB_DEVICE_Init+0x44>)
 800788c:	f7fe fd1c 	bl	80062c8 <USBD_Start>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d001      	beq.n	800789a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007896:	f7f9 f8d7 	bl	8000a48 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800789a:	bf00      	nop
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	200000e0 	.word	0x200000e0
 80078a4:	20000340 	.word	0x20000340
 80078a8:	20000020 	.word	0x20000020

080078ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	4603      	mov	r3, r0
 80078b4:	6039      	str	r1, [r7, #0]
 80078b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	2212      	movs	r2, #18
 80078bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80078be:	4b03      	ldr	r3, [pc, #12]	; (80078cc <USBD_FS_DeviceDescriptor+0x20>)
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr
 80078cc:	200000fc 	.word	0x200000fc

080078d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	4603      	mov	r3, r0
 80078d8:	6039      	str	r1, [r7, #0]
 80078da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	2204      	movs	r2, #4
 80078e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80078e2:	4b03      	ldr	r3, [pc, #12]	; (80078f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	370c      	adds	r7, #12
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr
 80078f0:	20000110 	.word	0x20000110

080078f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	4603      	mov	r3, r0
 80078fc:	6039      	str	r1, [r7, #0]
 80078fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007900:	79fb      	ldrb	r3, [r7, #7]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d105      	bne.n	8007912 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007906:	683a      	ldr	r2, [r7, #0]
 8007908:	4907      	ldr	r1, [pc, #28]	; (8007928 <USBD_FS_ProductStrDescriptor+0x34>)
 800790a:	4808      	ldr	r0, [pc, #32]	; (800792c <USBD_FS_ProductStrDescriptor+0x38>)
 800790c:	f7ff fe88 	bl	8007620 <USBD_GetString>
 8007910:	e004      	b.n	800791c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007912:	683a      	ldr	r2, [r7, #0]
 8007914:	4904      	ldr	r1, [pc, #16]	; (8007928 <USBD_FS_ProductStrDescriptor+0x34>)
 8007916:	4805      	ldr	r0, [pc, #20]	; (800792c <USBD_FS_ProductStrDescriptor+0x38>)
 8007918:	f7ff fe82 	bl	8007620 <USBD_GetString>
  }
  return USBD_StrDesc;
 800791c:	4b02      	ldr	r3, [pc, #8]	; (8007928 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800791e:	4618      	mov	r0, r3
 8007920:	3708      	adds	r7, #8
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	2000061c 	.word	0x2000061c
 800792c:	0800812c 	.word	0x0800812c

08007930 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	4603      	mov	r3, r0
 8007938:	6039      	str	r1, [r7, #0]
 800793a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800793c:	683a      	ldr	r2, [r7, #0]
 800793e:	4904      	ldr	r1, [pc, #16]	; (8007950 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007940:	4804      	ldr	r0, [pc, #16]	; (8007954 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007942:	f7ff fe6d 	bl	8007620 <USBD_GetString>
  return USBD_StrDesc;
 8007946:	4b02      	ldr	r3, [pc, #8]	; (8007950 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007948:	4618      	mov	r0, r3
 800794a:	3708      	adds	r7, #8
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	2000061c 	.word	0x2000061c
 8007954:	0800813c 	.word	0x0800813c

08007958 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	4603      	mov	r3, r0
 8007960:	6039      	str	r1, [r7, #0]
 8007962:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	221a      	movs	r2, #26
 8007968:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800796a:	f000 f843 	bl	80079f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800796e:	4b02      	ldr	r3, [pc, #8]	; (8007978 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007970:	4618      	mov	r0, r3
 8007972:	3708      	adds	r7, #8
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}
 8007978:	20000114 	.word	0x20000114

0800797c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	4603      	mov	r3, r0
 8007984:	6039      	str	r1, [r7, #0]
 8007986:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007988:	79fb      	ldrb	r3, [r7, #7]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d105      	bne.n	800799a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800798e:	683a      	ldr	r2, [r7, #0]
 8007990:	4907      	ldr	r1, [pc, #28]	; (80079b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007992:	4808      	ldr	r0, [pc, #32]	; (80079b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007994:	f7ff fe44 	bl	8007620 <USBD_GetString>
 8007998:	e004      	b.n	80079a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800799a:	683a      	ldr	r2, [r7, #0]
 800799c:	4904      	ldr	r1, [pc, #16]	; (80079b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800799e:	4805      	ldr	r0, [pc, #20]	; (80079b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80079a0:	f7ff fe3e 	bl	8007620 <USBD_GetString>
  }
  return USBD_StrDesc;
 80079a4:	4b02      	ldr	r3, [pc, #8]	; (80079b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3708      	adds	r7, #8
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	2000061c 	.word	0x2000061c
 80079b4:	08008150 	.word	0x08008150

080079b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	4603      	mov	r3, r0
 80079c0:	6039      	str	r1, [r7, #0]
 80079c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80079c4:	79fb      	ldrb	r3, [r7, #7]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d105      	bne.n	80079d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80079ca:	683a      	ldr	r2, [r7, #0]
 80079cc:	4907      	ldr	r1, [pc, #28]	; (80079ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80079ce:	4808      	ldr	r0, [pc, #32]	; (80079f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80079d0:	f7ff fe26 	bl	8007620 <USBD_GetString>
 80079d4:	e004      	b.n	80079e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80079d6:	683a      	ldr	r2, [r7, #0]
 80079d8:	4904      	ldr	r1, [pc, #16]	; (80079ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80079da:	4805      	ldr	r0, [pc, #20]	; (80079f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80079dc:	f7ff fe20 	bl	8007620 <USBD_GetString>
  }
  return USBD_StrDesc;
 80079e0:	4b02      	ldr	r3, [pc, #8]	; (80079ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3708      	adds	r7, #8
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	2000061c 	.word	0x2000061c
 80079f0:	0800815c 	.word	0x0800815c

080079f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80079fa:	4b0f      	ldr	r3, [pc, #60]	; (8007a38 <Get_SerialNum+0x44>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007a00:	4b0e      	ldr	r3, [pc, #56]	; (8007a3c <Get_SerialNum+0x48>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007a06:	4b0e      	ldr	r3, [pc, #56]	; (8007a40 <Get_SerialNum+0x4c>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4413      	add	r3, r2
 8007a12:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d009      	beq.n	8007a2e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007a1a:	2208      	movs	r2, #8
 8007a1c:	4909      	ldr	r1, [pc, #36]	; (8007a44 <Get_SerialNum+0x50>)
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f000 f814 	bl	8007a4c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007a24:	2204      	movs	r2, #4
 8007a26:	4908      	ldr	r1, [pc, #32]	; (8007a48 <Get_SerialNum+0x54>)
 8007a28:	68b8      	ldr	r0, [r7, #8]
 8007a2a:	f000 f80f 	bl	8007a4c <IntToUnicode>
  }
}
 8007a2e:	bf00      	nop
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	1fff7a10 	.word	0x1fff7a10
 8007a3c:	1fff7a14 	.word	0x1fff7a14
 8007a40:	1fff7a18 	.word	0x1fff7a18
 8007a44:	20000116 	.word	0x20000116
 8007a48:	20000126 	.word	0x20000126

08007a4c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b087      	sub	sp, #28
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	4613      	mov	r3, r2
 8007a58:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007a5e:	2300      	movs	r3, #0
 8007a60:	75fb      	strb	r3, [r7, #23]
 8007a62:	e027      	b.n	8007ab4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	0f1b      	lsrs	r3, r3, #28
 8007a68:	2b09      	cmp	r3, #9
 8007a6a:	d80b      	bhi.n	8007a84 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	0f1b      	lsrs	r3, r3, #28
 8007a70:	b2da      	uxtb	r2, r3
 8007a72:	7dfb      	ldrb	r3, [r7, #23]
 8007a74:	005b      	lsls	r3, r3, #1
 8007a76:	4619      	mov	r1, r3
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	440b      	add	r3, r1
 8007a7c:	3230      	adds	r2, #48	; 0x30
 8007a7e:	b2d2      	uxtb	r2, r2
 8007a80:	701a      	strb	r2, [r3, #0]
 8007a82:	e00a      	b.n	8007a9a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	0f1b      	lsrs	r3, r3, #28
 8007a88:	b2da      	uxtb	r2, r3
 8007a8a:	7dfb      	ldrb	r3, [r7, #23]
 8007a8c:	005b      	lsls	r3, r3, #1
 8007a8e:	4619      	mov	r1, r3
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	440b      	add	r3, r1
 8007a94:	3237      	adds	r2, #55	; 0x37
 8007a96:	b2d2      	uxtb	r2, r2
 8007a98:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	011b      	lsls	r3, r3, #4
 8007a9e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007aa0:	7dfb      	ldrb	r3, [r7, #23]
 8007aa2:	005b      	lsls	r3, r3, #1
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	68ba      	ldr	r2, [r7, #8]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	2200      	movs	r2, #0
 8007aac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007aae:	7dfb      	ldrb	r3, [r7, #23]
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	75fb      	strb	r3, [r7, #23]
 8007ab4:	7dfa      	ldrb	r2, [r7, #23]
 8007ab6:	79fb      	ldrb	r3, [r7, #7]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d3d3      	bcc.n	8007a64 <IntToUnicode+0x18>
  }
}
 8007abc:	bf00      	nop
 8007abe:	bf00      	nop
 8007ac0:	371c      	adds	r7, #28
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
	...

08007acc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b08a      	sub	sp, #40	; 0x28
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ad4:	f107 0314 	add.w	r3, r7, #20
 8007ad8:	2200      	movs	r2, #0
 8007ada:	601a      	str	r2, [r3, #0]
 8007adc:	605a      	str	r2, [r3, #4]
 8007ade:	609a      	str	r2, [r3, #8]
 8007ae0:	60da      	str	r2, [r3, #12]
 8007ae2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007aec:	d13a      	bne.n	8007b64 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007aee:	2300      	movs	r3, #0
 8007af0:	613b      	str	r3, [r7, #16]
 8007af2:	4b1e      	ldr	r3, [pc, #120]	; (8007b6c <HAL_PCD_MspInit+0xa0>)
 8007af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af6:	4a1d      	ldr	r2, [pc, #116]	; (8007b6c <HAL_PCD_MspInit+0xa0>)
 8007af8:	f043 0301 	orr.w	r3, r3, #1
 8007afc:	6313      	str	r3, [r2, #48]	; 0x30
 8007afe:	4b1b      	ldr	r3, [pc, #108]	; (8007b6c <HAL_PCD_MspInit+0xa0>)
 8007b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b02:	f003 0301 	and.w	r3, r3, #1
 8007b06:	613b      	str	r3, [r7, #16]
 8007b08:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007b0a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b10:	2302      	movs	r3, #2
 8007b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b14:	2300      	movs	r3, #0
 8007b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007b1c:	230a      	movs	r3, #10
 8007b1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b20:	f107 0314 	add.w	r3, r7, #20
 8007b24:	4619      	mov	r1, r3
 8007b26:	4812      	ldr	r0, [pc, #72]	; (8007b70 <HAL_PCD_MspInit+0xa4>)
 8007b28:	f7f9 fb6e 	bl	8001208 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007b2c:	4b0f      	ldr	r3, [pc, #60]	; (8007b6c <HAL_PCD_MspInit+0xa0>)
 8007b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b30:	4a0e      	ldr	r2, [pc, #56]	; (8007b6c <HAL_PCD_MspInit+0xa0>)
 8007b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b36:	6353      	str	r3, [r2, #52]	; 0x34
 8007b38:	2300      	movs	r3, #0
 8007b3a:	60fb      	str	r3, [r7, #12]
 8007b3c:	4b0b      	ldr	r3, [pc, #44]	; (8007b6c <HAL_PCD_MspInit+0xa0>)
 8007b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b40:	4a0a      	ldr	r2, [pc, #40]	; (8007b6c <HAL_PCD_MspInit+0xa0>)
 8007b42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b46:	6453      	str	r3, [r2, #68]	; 0x44
 8007b48:	4b08      	ldr	r3, [pc, #32]	; (8007b6c <HAL_PCD_MspInit+0xa0>)
 8007b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b50:	60fb      	str	r3, [r7, #12]
 8007b52:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007b54:	2200      	movs	r2, #0
 8007b56:	2100      	movs	r1, #0
 8007b58:	2043      	movs	r0, #67	; 0x43
 8007b5a:	f7f9 fb1e 	bl	800119a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007b5e:	2043      	movs	r0, #67	; 0x43
 8007b60:	f7f9 fb37 	bl	80011d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007b64:	bf00      	nop
 8007b66:	3728      	adds	r7, #40	; 0x28
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	40023800 	.word	0x40023800
 8007b70:	40020000 	.word	0x40020000

08007b74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007b88:	4619      	mov	r1, r3
 8007b8a:	4610      	mov	r0, r2
 8007b8c:	f7fe fbe9 	bl	8006362 <USBD_LL_SetupStage>
}
 8007b90:	bf00      	nop
 8007b92:	3708      	adds	r7, #8
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007baa:	78fa      	ldrb	r2, [r7, #3]
 8007bac:	6879      	ldr	r1, [r7, #4]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	00db      	lsls	r3, r3, #3
 8007bb2:	4413      	add	r3, r2
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	440b      	add	r3, r1
 8007bb8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	78fb      	ldrb	r3, [r7, #3]
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	f7fe fc23 	bl	800640c <USBD_LL_DataOutStage>
}
 8007bc6:	bf00      	nop
 8007bc8:	3708      	adds	r7, #8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b082      	sub	sp, #8
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007be0:	78fa      	ldrb	r2, [r7, #3]
 8007be2:	6879      	ldr	r1, [r7, #4]
 8007be4:	4613      	mov	r3, r2
 8007be6:	00db      	lsls	r3, r3, #3
 8007be8:	4413      	add	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	440b      	add	r3, r1
 8007bee:	334c      	adds	r3, #76	; 0x4c
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	78fb      	ldrb	r3, [r7, #3]
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	f7fe fcbc 	bl	8006572 <USBD_LL_DataInStage>
}
 8007bfa:	bf00      	nop
 8007bfc:	3708      	adds	r7, #8
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b082      	sub	sp, #8
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c10:	4618      	mov	r0, r3
 8007c12:	f7fe fdf0 	bl	80067f6 <USBD_LL_SOF>
}
 8007c16:	bf00      	nop
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b084      	sub	sp, #16
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007c26:	2301      	movs	r3, #1
 8007c28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	2b02      	cmp	r3, #2
 8007c30:	d001      	beq.n	8007c36 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007c32:	f7f8 ff09 	bl	8000a48 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c3c:	7bfa      	ldrb	r2, [r7, #15]
 8007c3e:	4611      	mov	r1, r2
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7fe fd9a 	bl	800677a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7fe fd42 	bl	80066d6 <USBD_LL_Reset>
}
 8007c52:	bf00      	nop
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
	...

08007c5c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7fe fd95 	bl	800679a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	6812      	ldr	r2, [r2, #0]
 8007c7e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c82:	f043 0301 	orr.w	r3, r3, #1
 8007c86:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a1b      	ldr	r3, [r3, #32]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d005      	beq.n	8007c9c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007c90:	4b04      	ldr	r3, [pc, #16]	; (8007ca4 <HAL_PCD_SuspendCallback+0x48>)
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	4a03      	ldr	r2, [pc, #12]	; (8007ca4 <HAL_PCD_SuspendCallback+0x48>)
 8007c96:	f043 0306 	orr.w	r3, r3, #6
 8007c9a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007c9c:	bf00      	nop
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	e000ed00 	.word	0xe000ed00

08007ca8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7fe fd85 	bl	80067c6 <USBD_LL_Resume>
}
 8007cbc:	bf00      	nop
 8007cbe:	3708      	adds	r7, #8
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	460b      	mov	r3, r1
 8007cce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007cd6:	78fa      	ldrb	r2, [r7, #3]
 8007cd8:	4611      	mov	r1, r2
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7fe fddd 	bl	800689a <USBD_LL_IsoOUTIncomplete>
}
 8007ce0:	bf00      	nop
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007cfa:	78fa      	ldrb	r2, [r7, #3]
 8007cfc:	4611      	mov	r1, r2
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7fe fd99 	bl	8006836 <USBD_LL_IsoINIncomplete>
}
 8007d04:	bf00      	nop
 8007d06:	3708      	adds	r7, #8
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7fe fdef 	bl	80068fe <USBD_LL_DevConnected>
}
 8007d20:	bf00      	nop
 8007d22:	3708      	adds	r7, #8
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d36:	4618      	mov	r0, r3
 8007d38:	f7fe fdec 	bl	8006914 <USBD_LL_DevDisconnected>
}
 8007d3c:	bf00      	nop
 8007d3e:	3708      	adds	r7, #8
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d13c      	bne.n	8007dce <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007d54:	4a20      	ldr	r2, [pc, #128]	; (8007dd8 <USBD_LL_Init+0x94>)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4a1e      	ldr	r2, [pc, #120]	; (8007dd8 <USBD_LL_Init+0x94>)
 8007d60:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007d64:	4b1c      	ldr	r3, [pc, #112]	; (8007dd8 <USBD_LL_Init+0x94>)
 8007d66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007d6a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007d6c:	4b1a      	ldr	r3, [pc, #104]	; (8007dd8 <USBD_LL_Init+0x94>)
 8007d6e:	2204      	movs	r2, #4
 8007d70:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007d72:	4b19      	ldr	r3, [pc, #100]	; (8007dd8 <USBD_LL_Init+0x94>)
 8007d74:	2202      	movs	r2, #2
 8007d76:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007d78:	4b17      	ldr	r3, [pc, #92]	; (8007dd8 <USBD_LL_Init+0x94>)
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007d7e:	4b16      	ldr	r3, [pc, #88]	; (8007dd8 <USBD_LL_Init+0x94>)
 8007d80:	2202      	movs	r2, #2
 8007d82:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007d84:	4b14      	ldr	r3, [pc, #80]	; (8007dd8 <USBD_LL_Init+0x94>)
 8007d86:	2200      	movs	r2, #0
 8007d88:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007d8a:	4b13      	ldr	r3, [pc, #76]	; (8007dd8 <USBD_LL_Init+0x94>)
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007d90:	4b11      	ldr	r3, [pc, #68]	; (8007dd8 <USBD_LL_Init+0x94>)
 8007d92:	2200      	movs	r2, #0
 8007d94:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007d96:	4b10      	ldr	r3, [pc, #64]	; (8007dd8 <USBD_LL_Init+0x94>)
 8007d98:	2200      	movs	r2, #0
 8007d9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007d9c:	4b0e      	ldr	r3, [pc, #56]	; (8007dd8 <USBD_LL_Init+0x94>)
 8007d9e:	2200      	movs	r2, #0
 8007da0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007da2:	480d      	ldr	r0, [pc, #52]	; (8007dd8 <USBD_LL_Init+0x94>)
 8007da4:	f7f9 fd12 	bl	80017cc <HAL_PCD_Init>
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d001      	beq.n	8007db2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007dae:	f7f8 fe4b 	bl	8000a48 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007db2:	2180      	movs	r1, #128	; 0x80
 8007db4:	4808      	ldr	r0, [pc, #32]	; (8007dd8 <USBD_LL_Init+0x94>)
 8007db6:	f7fa ff52 	bl	8002c5e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007dba:	2240      	movs	r2, #64	; 0x40
 8007dbc:	2100      	movs	r1, #0
 8007dbe:	4806      	ldr	r0, [pc, #24]	; (8007dd8 <USBD_LL_Init+0x94>)
 8007dc0:	f7fa ff06 	bl	8002bd0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007dc4:	2280      	movs	r2, #128	; 0x80
 8007dc6:	2101      	movs	r1, #1
 8007dc8:	4803      	ldr	r0, [pc, #12]	; (8007dd8 <USBD_LL_Init+0x94>)
 8007dca:	f7fa ff01 	bl	8002bd0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007dce:	2300      	movs	r3, #0
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3708      	adds	r7, #8
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	2000081c 	.word	0x2000081c

08007ddc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007de4:	2300      	movs	r3, #0
 8007de6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007de8:	2300      	movs	r3, #0
 8007dea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7f9 fe07 	bl	8001a06 <HAL_PCD_Start>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dfc:	7bfb      	ldrb	r3, [r7, #15]
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f000 f930 	bl	8008064 <USBD_Get_USB_Status>
 8007e04:	4603      	mov	r3, r0
 8007e06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e08:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b084      	sub	sp, #16
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
 8007e1a:	4608      	mov	r0, r1
 8007e1c:	4611      	mov	r1, r2
 8007e1e:	461a      	mov	r2, r3
 8007e20:	4603      	mov	r3, r0
 8007e22:	70fb      	strb	r3, [r7, #3]
 8007e24:	460b      	mov	r3, r1
 8007e26:	70bb      	strb	r3, [r7, #2]
 8007e28:	4613      	mov	r3, r2
 8007e2a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e30:	2300      	movs	r3, #0
 8007e32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007e3a:	78bb      	ldrb	r3, [r7, #2]
 8007e3c:	883a      	ldrh	r2, [r7, #0]
 8007e3e:	78f9      	ldrb	r1, [r7, #3]
 8007e40:	f7fa fad8 	bl	80023f4 <HAL_PCD_EP_Open>
 8007e44:	4603      	mov	r3, r0
 8007e46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e48:	7bfb      	ldrb	r3, [r7, #15]
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f000 f90a 	bl	8008064 <USBD_Get_USB_Status>
 8007e50:	4603      	mov	r3, r0
 8007e52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e54:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b084      	sub	sp, #16
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
 8007e66:	460b      	mov	r3, r1
 8007e68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e78:	78fa      	ldrb	r2, [r7, #3]
 8007e7a:	4611      	mov	r1, r2
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7fa fb21 	bl	80024c4 <HAL_PCD_EP_Close>
 8007e82:	4603      	mov	r3, r0
 8007e84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e86:	7bfb      	ldrb	r3, [r7, #15]
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f000 f8eb 	bl	8008064 <USBD_Get_USB_Status>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e92:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eac:	2300      	movs	r3, #0
 8007eae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007eb6:	78fa      	ldrb	r2, [r7, #3]
 8007eb8:	4611      	mov	r1, r2
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7fa fbe1 	bl	8002682 <HAL_PCD_EP_SetStall>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ec4:	7bfb      	ldrb	r3, [r7, #15]
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f000 f8cc 	bl	8008064 <USBD_Get_USB_Status>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ed0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b084      	sub	sp, #16
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eea:	2300      	movs	r3, #0
 8007eec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ef4:	78fa      	ldrb	r2, [r7, #3]
 8007ef6:	4611      	mov	r1, r2
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7fa fc26 	bl	800274a <HAL_PCD_EP_ClrStall>
 8007efe:	4603      	mov	r3, r0
 8007f00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f02:	7bfb      	ldrb	r3, [r7, #15]
 8007f04:	4618      	mov	r0, r3
 8007f06:	f000 f8ad 	bl	8008064 <USBD_Get_USB_Status>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3710      	adds	r7, #16
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	460b      	mov	r3, r1
 8007f22:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f2a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007f2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	da0b      	bge.n	8007f4c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007f34:	78fb      	ldrb	r3, [r7, #3]
 8007f36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f3a:	68f9      	ldr	r1, [r7, #12]
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	00db      	lsls	r3, r3, #3
 8007f40:	4413      	add	r3, r2
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	440b      	add	r3, r1
 8007f46:	333e      	adds	r3, #62	; 0x3e
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	e00b      	b.n	8007f64 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007f4c:	78fb      	ldrb	r3, [r7, #3]
 8007f4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f52:	68f9      	ldr	r1, [r7, #12]
 8007f54:	4613      	mov	r3, r2
 8007f56:	00db      	lsls	r3, r3, #3
 8007f58:	4413      	add	r3, r2
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	440b      	add	r3, r1
 8007f5e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007f62:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3714      	adds	r7, #20
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	460b      	mov	r3, r1
 8007f7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f80:	2300      	movs	r3, #0
 8007f82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f8a:	78fa      	ldrb	r2, [r7, #3]
 8007f8c:	4611      	mov	r1, r2
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7fa fa0b 	bl	80023aa <HAL_PCD_SetAddress>
 8007f94:	4603      	mov	r3, r0
 8007f96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f98:	7bfb      	ldrb	r3, [r7, #15]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f000 f862 	bl	8008064 <USBD_Get_USB_Status>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fa4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3710      	adds	r7, #16
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}

08007fae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b086      	sub	sp, #24
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	60f8      	str	r0, [r7, #12]
 8007fb6:	607a      	str	r2, [r7, #4]
 8007fb8:	603b      	str	r3, [r7, #0]
 8007fba:	460b      	mov	r3, r1
 8007fbc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007fcc:	7af9      	ldrb	r1, [r7, #11]
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	f7fa fb0c 	bl	80025ee <HAL_PCD_EP_Transmit>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fda:	7dfb      	ldrb	r3, [r7, #23]
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f000 f841 	bl	8008064 <USBD_Get_USB_Status>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007fe6:	7dbb      	ldrb	r3, [r7, #22]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3718      	adds	r7, #24
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b086      	sub	sp, #24
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	607a      	str	r2, [r7, #4]
 8007ffa:	603b      	str	r3, [r7, #0]
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008000:	2300      	movs	r3, #0
 8008002:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008004:	2300      	movs	r3, #0
 8008006:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800800e:	7af9      	ldrb	r1, [r7, #11]
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	f7fa faa0 	bl	8002558 <HAL_PCD_EP_Receive>
 8008018:	4603      	mov	r3, r0
 800801a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800801c:	7dfb      	ldrb	r3, [r7, #23]
 800801e:	4618      	mov	r0, r3
 8008020:	f000 f820 	bl	8008064 <USBD_Get_USB_Status>
 8008024:	4603      	mov	r3, r0
 8008026:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008028:	7dbb      	ldrb	r3, [r7, #22]
}
 800802a:	4618      	mov	r0, r3
 800802c:	3718      	adds	r7, #24
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
	...

08008034 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800803c:	4b03      	ldr	r3, [pc, #12]	; (800804c <USBD_static_malloc+0x18>)
}
 800803e:	4618      	mov	r0, r3
 8008040:	370c      	adds	r7, #12
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	20000d28 	.word	0x20000d28

08008050 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]

}
 8008058:	bf00      	nop
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008064:	b480      	push	{r7}
 8008066:	b085      	sub	sp, #20
 8008068:	af00      	add	r7, sp, #0
 800806a:	4603      	mov	r3, r0
 800806c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800806e:	2300      	movs	r3, #0
 8008070:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008072:	79fb      	ldrb	r3, [r7, #7]
 8008074:	2b03      	cmp	r3, #3
 8008076:	d817      	bhi.n	80080a8 <USBD_Get_USB_Status+0x44>
 8008078:	a201      	add	r2, pc, #4	; (adr r2, 8008080 <USBD_Get_USB_Status+0x1c>)
 800807a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800807e:	bf00      	nop
 8008080:	08008091 	.word	0x08008091
 8008084:	08008097 	.word	0x08008097
 8008088:	0800809d 	.word	0x0800809d
 800808c:	080080a3 	.word	0x080080a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008090:	2300      	movs	r3, #0
 8008092:	73fb      	strb	r3, [r7, #15]
    break;
 8008094:	e00b      	b.n	80080ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008096:	2303      	movs	r3, #3
 8008098:	73fb      	strb	r3, [r7, #15]
    break;
 800809a:	e008      	b.n	80080ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800809c:	2301      	movs	r3, #1
 800809e:	73fb      	strb	r3, [r7, #15]
    break;
 80080a0:	e005      	b.n	80080ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80080a2:	2303      	movs	r3, #3
 80080a4:	73fb      	strb	r3, [r7, #15]
    break;
 80080a6:	e002      	b.n	80080ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80080a8:	2303      	movs	r3, #3
 80080aa:	73fb      	strb	r3, [r7, #15]
    break;
 80080ac:	bf00      	nop
  }
  return usb_status;
 80080ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3714      	adds	r7, #20
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <__libc_init_array>:
 80080bc:	b570      	push	{r4, r5, r6, lr}
 80080be:	4d0d      	ldr	r5, [pc, #52]	; (80080f4 <__libc_init_array+0x38>)
 80080c0:	4c0d      	ldr	r4, [pc, #52]	; (80080f8 <__libc_init_array+0x3c>)
 80080c2:	1b64      	subs	r4, r4, r5
 80080c4:	10a4      	asrs	r4, r4, #2
 80080c6:	2600      	movs	r6, #0
 80080c8:	42a6      	cmp	r6, r4
 80080ca:	d109      	bne.n	80080e0 <__libc_init_array+0x24>
 80080cc:	4d0b      	ldr	r5, [pc, #44]	; (80080fc <__libc_init_array+0x40>)
 80080ce:	4c0c      	ldr	r4, [pc, #48]	; (8008100 <__libc_init_array+0x44>)
 80080d0:	f000 f820 	bl	8008114 <_init>
 80080d4:	1b64      	subs	r4, r4, r5
 80080d6:	10a4      	asrs	r4, r4, #2
 80080d8:	2600      	movs	r6, #0
 80080da:	42a6      	cmp	r6, r4
 80080dc:	d105      	bne.n	80080ea <__libc_init_array+0x2e>
 80080de:	bd70      	pop	{r4, r5, r6, pc}
 80080e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80080e4:	4798      	blx	r3
 80080e6:	3601      	adds	r6, #1
 80080e8:	e7ee      	b.n	80080c8 <__libc_init_array+0xc>
 80080ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80080ee:	4798      	blx	r3
 80080f0:	3601      	adds	r6, #1
 80080f2:	e7f2      	b.n	80080da <__libc_init_array+0x1e>
 80080f4:	0800818c 	.word	0x0800818c
 80080f8:	0800818c 	.word	0x0800818c
 80080fc:	0800818c 	.word	0x0800818c
 8008100:	08008190 	.word	0x08008190

08008104 <memset>:
 8008104:	4402      	add	r2, r0
 8008106:	4603      	mov	r3, r0
 8008108:	4293      	cmp	r3, r2
 800810a:	d100      	bne.n	800810e <memset+0xa>
 800810c:	4770      	bx	lr
 800810e:	f803 1b01 	strb.w	r1, [r3], #1
 8008112:	e7f9      	b.n	8008108 <memset+0x4>

08008114 <_init>:
 8008114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008116:	bf00      	nop
 8008118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800811a:	bc08      	pop	{r3}
 800811c:	469e      	mov	lr, r3
 800811e:	4770      	bx	lr

08008120 <_fini>:
 8008120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008122:	bf00      	nop
 8008124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008126:	bc08      	pop	{r3}
 8008128:	469e      	mov	lr, r3
 800812a:	4770      	bx	lr
