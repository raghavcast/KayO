
timer_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001db4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001e74  08001e74  00011e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ea4  08001ea4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001ea4  08001ea4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ea4  08001ea4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ea4  08001ea4  00011ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ea8  08001ea8  00011ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001eac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  08001eb8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08001eb8  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d07  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014c8  00000000  00000000  00027d3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  00029208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000818  00000000  00000000  00029ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001753a  00000000  00000000  0002a2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000979e  00000000  00000000  0004181a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088fe9  00000000  00000000  0004afb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d3fa1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f2c  00000000  00000000  000d3ff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001e5c 	.word	0x08001e5c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001e5c 	.word	0x08001e5c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fa36 	bl	8000694 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f814 	bl	8000254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8a6 	bl	800037c <MX_GPIO_Init>
  MX_TIM3_Init();
 8000230:	f000 f850 	bl	80002d4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  GPIOA->BSRR = 0xf;
 8000234:	2390      	movs	r3, #144	; 0x90
 8000236:	05db      	lsls	r3, r3, #23
 8000238:	220f      	movs	r2, #15
 800023a:	619a      	str	r2, [r3, #24]
  GPIOA->BRR = 0x1;
 800023c:	2390      	movs	r3, #144	; 0x90
 800023e:	05db      	lsls	r3, r3, #23
 8000240:	2201      	movs	r2, #1
 8000242:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_TIM_Base_Start_IT(&htim3);
 8000244:	4b02      	ldr	r3, [pc, #8]	; (8000250 <main+0x30>)
 8000246:	0018      	movs	r0, r3
 8000248:	f001 fa0e 	bl	8001668 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800024c:	e7fe      	b.n	800024c <main+0x2c>
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	20000028 	.word	0x20000028

08000254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000254:	b590      	push	{r4, r7, lr}
 8000256:	b093      	sub	sp, #76	; 0x4c
 8000258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025a:	2414      	movs	r4, #20
 800025c:	193b      	adds	r3, r7, r4
 800025e:	0018      	movs	r0, r3
 8000260:	2334      	movs	r3, #52	; 0x34
 8000262:	001a      	movs	r2, r3
 8000264:	2100      	movs	r1, #0
 8000266:	f001 fdf1 	bl	8001e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	0018      	movs	r0, r3
 800026e:	2310      	movs	r3, #16
 8000270:	001a      	movs	r2, r3
 8000272:	2100      	movs	r1, #0
 8000274:	f001 fdea 	bl	8001e4c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000278:	0021      	movs	r1, r4
 800027a:	187b      	adds	r3, r7, r1
 800027c:	2202      	movs	r2, #2
 800027e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000280:	187b      	adds	r3, r7, r1
 8000282:	2201      	movs	r2, #1
 8000284:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000286:	187b      	adds	r3, r7, r1
 8000288:	2210      	movs	r2, #16
 800028a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800028c:	187b      	adds	r3, r7, r1
 800028e:	2200      	movs	r2, #0
 8000290:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000292:	187b      	adds	r3, r7, r1
 8000294:	0018      	movs	r0, r3
 8000296:	f000 fcc5 	bl	8000c24 <HAL_RCC_OscConfig>
 800029a:	1e03      	subs	r3, r0, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800029e:	f000 f93d 	bl	800051c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	2207      	movs	r2, #7
 80002a6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	2200      	movs	r2, #0
 80002ac:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	2200      	movs	r2, #0
 80002b2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	2200      	movs	r2, #0
 80002b8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	2100      	movs	r1, #0
 80002be:	0018      	movs	r0, r3
 80002c0:	f001 f836 	bl	8001330 <HAL_RCC_ClockConfig>
 80002c4:	1e03      	subs	r3, r0, #0
 80002c6:	d001      	beq.n	80002cc <SystemClock_Config+0x78>
  {
    Error_Handler();
 80002c8:	f000 f928 	bl	800051c <Error_Handler>
  }
}
 80002cc:	46c0      	nop			; (mov r8, r8)
 80002ce:	46bd      	mov	sp, r7
 80002d0:	b013      	add	sp, #76	; 0x4c
 80002d2:	bd90      	pop	{r4, r7, pc}

080002d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b086      	sub	sp, #24
 80002d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002da:	2308      	movs	r3, #8
 80002dc:	18fb      	adds	r3, r7, r3
 80002de:	0018      	movs	r0, r3
 80002e0:	2310      	movs	r3, #16
 80002e2:	001a      	movs	r2, r3
 80002e4:	2100      	movs	r1, #0
 80002e6:	f001 fdb1 	bl	8001e4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002ea:	003b      	movs	r3, r7
 80002ec:	0018      	movs	r0, r3
 80002ee:	2308      	movs	r3, #8
 80002f0:	001a      	movs	r2, r3
 80002f2:	2100      	movs	r1, #0
 80002f4:	f001 fdaa 	bl	8001e4c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80002f8:	4b1e      	ldr	r3, [pc, #120]	; (8000374 <MX_TIM3_Init+0xa0>)
 80002fa:	4a1f      	ldr	r2, [pc, #124]	; (8000378 <MX_TIM3_Init+0xa4>)
 80002fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 80002fe:	4b1d      	ldr	r3, [pc, #116]	; (8000374 <MX_TIM3_Init+0xa0>)
 8000300:	222f      	movs	r2, #47	; 0x2f
 8000302:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000304:	4b1b      	ldr	r3, [pc, #108]	; (8000374 <MX_TIM3_Init+0xa0>)
 8000306:	2200      	movs	r2, #0
 8000308:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800030a:	4b1a      	ldr	r3, [pc, #104]	; (8000374 <MX_TIM3_Init+0xa0>)
 800030c:	2263      	movs	r2, #99	; 0x63
 800030e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000310:	4b18      	ldr	r3, [pc, #96]	; (8000374 <MX_TIM3_Init+0xa0>)
 8000312:	2200      	movs	r2, #0
 8000314:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000316:	4b17      	ldr	r3, [pc, #92]	; (8000374 <MX_TIM3_Init+0xa0>)
 8000318:	2200      	movs	r2, #0
 800031a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800031c:	4b15      	ldr	r3, [pc, #84]	; (8000374 <MX_TIM3_Init+0xa0>)
 800031e:	0018      	movs	r0, r3
 8000320:	f001 f952 	bl	80015c8 <HAL_TIM_Base_Init>
 8000324:	1e03      	subs	r3, r0, #0
 8000326:	d001      	beq.n	800032c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000328:	f000 f8f8 	bl	800051c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800032c:	2108      	movs	r1, #8
 800032e:	187b      	adds	r3, r7, r1
 8000330:	2280      	movs	r2, #128	; 0x80
 8000332:	0152      	lsls	r2, r2, #5
 8000334:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000336:	187a      	adds	r2, r7, r1
 8000338:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <MX_TIM3_Init+0xa0>)
 800033a:	0011      	movs	r1, r2
 800033c:	0018      	movs	r0, r3
 800033e:	f001 faf5 	bl	800192c <HAL_TIM_ConfigClockSource>
 8000342:	1e03      	subs	r3, r0, #0
 8000344:	d001      	beq.n	800034a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000346:	f000 f8e9 	bl	800051c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800034a:	003b      	movs	r3, r7
 800034c:	2200      	movs	r2, #0
 800034e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000350:	003b      	movs	r3, r7
 8000352:	2200      	movs	r2, #0
 8000354:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000356:	003a      	movs	r2, r7
 8000358:	4b06      	ldr	r3, [pc, #24]	; (8000374 <MX_TIM3_Init+0xa0>)
 800035a:	0011      	movs	r1, r2
 800035c:	0018      	movs	r0, r3
 800035e:	f001 fce9 	bl	8001d34 <HAL_TIMEx_MasterConfigSynchronization>
 8000362:	1e03      	subs	r3, r0, #0
 8000364:	d001      	beq.n	800036a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000366:	f000 f8d9 	bl	800051c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800036a:	46c0      	nop			; (mov r8, r8)
 800036c:	46bd      	mov	sp, r7
 800036e:	b006      	add	sp, #24
 8000370:	bd80      	pop	{r7, pc}
 8000372:	46c0      	nop			; (mov r8, r8)
 8000374:	20000028 	.word	0x20000028
 8000378:	40000400 	.word	0x40000400

0800037c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b086      	sub	sp, #24
 8000380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	0018      	movs	r0, r3
 8000386:	2314      	movs	r3, #20
 8000388:	001a      	movs	r2, r3
 800038a:	2100      	movs	r1, #0
 800038c:	f001 fd5e 	bl	8001e4c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000390:	4b1d      	ldr	r3, [pc, #116]	; (8000408 <MX_GPIO_Init+0x8c>)
 8000392:	695a      	ldr	r2, [r3, #20]
 8000394:	4b1c      	ldr	r3, [pc, #112]	; (8000408 <MX_GPIO_Init+0x8c>)
 8000396:	2180      	movs	r1, #128	; 0x80
 8000398:	0289      	lsls	r1, r1, #10
 800039a:	430a      	orrs	r2, r1
 800039c:	615a      	str	r2, [r3, #20]
 800039e:	4b1a      	ldr	r3, [pc, #104]	; (8000408 <MX_GPIO_Init+0x8c>)
 80003a0:	695a      	ldr	r2, [r3, #20]
 80003a2:	2380      	movs	r3, #128	; 0x80
 80003a4:	029b      	lsls	r3, r3, #10
 80003a6:	4013      	ands	r3, r2
 80003a8:	603b      	str	r3, [r7, #0]
 80003aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Col0_Pin|Col1_Pin|Col2_Pin|Col3_Pin, GPIO_PIN_RESET);
 80003ac:	2390      	movs	r3, #144	; 0x90
 80003ae:	05db      	lsls	r3, r3, #23
 80003b0:	2200      	movs	r2, #0
 80003b2:	210f      	movs	r1, #15
 80003b4:	0018      	movs	r0, r3
 80003b6:	f000 fc17 	bl	8000be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Col0_Pin Col1_Pin Col2_Pin Col3_Pin */
  GPIO_InitStruct.Pin = Col0_Pin|Col1_Pin|Col2_Pin|Col3_Pin;
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	220f      	movs	r2, #15
 80003be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	2211      	movs	r2, #17
 80003c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	2200      	movs	r2, #0
 80003ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	2200      	movs	r2, #0
 80003d0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d2:	1d3a      	adds	r2, r7, #4
 80003d4:	2390      	movs	r3, #144	; 0x90
 80003d6:	05db      	lsls	r3, r3, #23
 80003d8:	0011      	movs	r1, r2
 80003da:	0018      	movs	r0, r3
 80003dc:	f000 fa9c 	bl	8000918 <HAL_GPIO_Init>

  /*Configure GPIO pins : Row0_Pin Row1_Pin Row2_Pin Row3_Pin */
  GPIO_InitStruct.Pin = Row0_Pin|Row1_Pin|Row2_Pin|Row3_Pin;
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	22f0      	movs	r2, #240	; 0xf0
 80003e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	2200      	movs	r2, #0
 80003ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	2201      	movs	r2, #1
 80003f0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003f2:	1d3a      	adds	r2, r7, #4
 80003f4:	2390      	movs	r3, #144	; 0x90
 80003f6:	05db      	lsls	r3, r3, #23
 80003f8:	0011      	movs	r1, r2
 80003fa:	0018      	movs	r0, r3
 80003fc:	f000 fa8c 	bl	8000918 <HAL_GPIO_Init>

}
 8000400:	46c0      	nop			; (mov r8, r8)
 8000402:	46bd      	mov	sp, r7
 8000404:	b006      	add	sp, #24
 8000406:	bd80      	pop	{r7, pc}
 8000408:	40021000 	.word	0x40021000

0800040c <drive_column>:

/* USER CODE BEGIN 4 */
void drive_column(void) {
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
	col = (col + 1) & 0x3;
 8000410:	4b0a      	ldr	r3, [pc, #40]	; (800043c <drive_column+0x30>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	3301      	adds	r3, #1
 8000416:	2203      	movs	r2, #3
 8000418:	401a      	ands	r2, r3
 800041a:	4b08      	ldr	r3, [pc, #32]	; (800043c <drive_column+0x30>)
 800041c:	601a      	str	r2, [r3, #0]
	GPIOA->BSRR = 0xf;
 800041e:	2390      	movs	r3, #144	; 0x90
 8000420:	05db      	lsls	r3, r3, #23
 8000422:	220f      	movs	r2, #15
 8000424:	619a      	str	r2, [r3, #24]
	GPIOA->BRR = 0x1 << col;
 8000426:	4b05      	ldr	r3, [pc, #20]	; (800043c <drive_column+0x30>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	2201      	movs	r2, #1
 800042c:	409a      	lsls	r2, r3
 800042e:	2390      	movs	r3, #144	; 0x90
 8000430:	05db      	lsls	r3, r3, #23
 8000432:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000434:	46c0      	nop			; (mov r8, r8)
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	20000070 	.word	0x20000070

08000440 <read_rows>:

uint8_t read_rows(void) {
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
	return ~((GPIOA->IDR & 0xf0) >> 4) & 0xf;
 8000444:	2390      	movs	r3, #144	; 0x90
 8000446:	05db      	lsls	r3, r3, #23
 8000448:	691b      	ldr	r3, [r3, #16]
 800044a:	091b      	lsrs	r3, r3, #4
 800044c:	b2db      	uxtb	r3, r3
 800044e:	43db      	mvns	r3, r3
 8000450:	b2db      	uxtb	r3, r3
 8000452:	220f      	movs	r2, #15
 8000454:	4013      	ands	r3, r2
 8000456:	b2db      	uxtb	r3, r3
}
 8000458:	0018      	movs	r0, r3
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
	...

08000460 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000460:	b590      	push	{r4, r7, lr}
 8000462:	b085      	sub	sp, #20
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 8000468:	687a      	ldr	r2, [r7, #4]
 800046a:	4b28      	ldr	r3, [pc, #160]	; (800050c <HAL_TIM_PeriodElapsedCallback+0xac>)
 800046c:	429a      	cmp	r2, r3
 800046e:	d149      	bne.n	8000504 <HAL_TIM_PeriodElapsedCallback+0xa4>
		uint8_t rows = read_rows();
 8000470:	230f      	movs	r3, #15
 8000472:	18fc      	adds	r4, r7, r3
 8000474:	f7ff ffe4 	bl	8000440 <read_rows>
 8000478:	0003      	movs	r3, r0
 800047a:	7023      	strb	r3, [r4, #0]
		int idx = col / 2;
 800047c:	4b24      	ldr	r3, [pc, #144]	; (8000510 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2b00      	cmp	r3, #0
 8000482:	da00      	bge.n	8000486 <HAL_TIM_PeriodElapsedCallback+0x26>
 8000484:	3301      	adds	r3, #1
 8000486:	105b      	asrs	r3, r3, #1
 8000488:	60bb      	str	r3, [r7, #8]
		buffer[idx] &= ~(0xf << ((col % 2) * 4));
 800048a:	4b21      	ldr	r3, [pc, #132]	; (8000510 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a21      	ldr	r2, [pc, #132]	; (8000514 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000490:	4013      	ands	r3, r2
 8000492:	d504      	bpl.n	800049e <HAL_TIM_PeriodElapsedCallback+0x3e>
 8000494:	3b01      	subs	r3, #1
 8000496:	2202      	movs	r2, #2
 8000498:	4252      	negs	r2, r2
 800049a:	4313      	orrs	r3, r2
 800049c:	3301      	adds	r3, #1
 800049e:	009b      	lsls	r3, r3, #2
 80004a0:	220f      	movs	r2, #15
 80004a2:	409a      	lsls	r2, r3
 80004a4:	0013      	movs	r3, r2
 80004a6:	43d9      	mvns	r1, r3
 80004a8:	4a1b      	ldr	r2, [pc, #108]	; (8000518 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	18d3      	adds	r3, r2, r3
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	b25b      	sxtb	r3, r3
 80004b2:	b24a      	sxtb	r2, r1
 80004b4:	4013      	ands	r3, r2
 80004b6:	b25b      	sxtb	r3, r3
 80004b8:	b2d9      	uxtb	r1, r3
 80004ba:	4a17      	ldr	r2, [pc, #92]	; (8000518 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	18d3      	adds	r3, r2, r3
 80004c0:	1c0a      	adds	r2, r1, #0
 80004c2:	701a      	strb	r2, [r3, #0]
		buffer[idx] |= rows << ((col % 2) * 4);
 80004c4:	230f      	movs	r3, #15
 80004c6:	18fb      	adds	r3, r7, r3
 80004c8:	781a      	ldrb	r2, [r3, #0]
 80004ca:	4b11      	ldr	r3, [pc, #68]	; (8000510 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4911      	ldr	r1, [pc, #68]	; (8000514 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80004d0:	400b      	ands	r3, r1
 80004d2:	d504      	bpl.n	80004de <HAL_TIM_PeriodElapsedCallback+0x7e>
 80004d4:	3b01      	subs	r3, #1
 80004d6:	2102      	movs	r1, #2
 80004d8:	4249      	negs	r1, r1
 80004da:	430b      	orrs	r3, r1
 80004dc:	3301      	adds	r3, #1
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	409a      	lsls	r2, r3
 80004e2:	0011      	movs	r1, r2
 80004e4:	4a0c      	ldr	r2, [pc, #48]	; (8000518 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	18d3      	adds	r3, r2, r3
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	b25a      	sxtb	r2, r3
 80004ee:	b24b      	sxtb	r3, r1
 80004f0:	4313      	orrs	r3, r2
 80004f2:	b25b      	sxtb	r3, r3
 80004f4:	b2d9      	uxtb	r1, r3
 80004f6:	4a08      	ldr	r2, [pc, #32]	; (8000518 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	18d3      	adds	r3, r2, r3
 80004fc:	1c0a      	adds	r2, r1, #0
 80004fe:	701a      	strb	r2, [r3, #0]
		drive_column();
 8000500:	f7ff ff84 	bl	800040c <drive_column>
	}
}
 8000504:	46c0      	nop			; (mov r8, r8)
 8000506:	46bd      	mov	sp, r7
 8000508:	b005      	add	sp, #20
 800050a:	bd90      	pop	{r4, r7, pc}
 800050c:	20000028 	.word	0x20000028
 8000510:	20000070 	.word	0x20000070
 8000514:	80000001 	.word	0x80000001
 8000518:	20000074 	.word	0x20000074

0800051c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000520:	b672      	cpsid	i
}
 8000522:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000524:	e7fe      	b.n	8000524 <Error_Handler+0x8>
	...

08000528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800052e:	4b0f      	ldr	r3, [pc, #60]	; (800056c <HAL_MspInit+0x44>)
 8000530:	699a      	ldr	r2, [r3, #24]
 8000532:	4b0e      	ldr	r3, [pc, #56]	; (800056c <HAL_MspInit+0x44>)
 8000534:	2101      	movs	r1, #1
 8000536:	430a      	orrs	r2, r1
 8000538:	619a      	str	r2, [r3, #24]
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <HAL_MspInit+0x44>)
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	2201      	movs	r2, #1
 8000540:	4013      	ands	r3, r2
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000546:	4b09      	ldr	r3, [pc, #36]	; (800056c <HAL_MspInit+0x44>)
 8000548:	69da      	ldr	r2, [r3, #28]
 800054a:	4b08      	ldr	r3, [pc, #32]	; (800056c <HAL_MspInit+0x44>)
 800054c:	2180      	movs	r1, #128	; 0x80
 800054e:	0549      	lsls	r1, r1, #21
 8000550:	430a      	orrs	r2, r1
 8000552:	61da      	str	r2, [r3, #28]
 8000554:	4b05      	ldr	r3, [pc, #20]	; (800056c <HAL_MspInit+0x44>)
 8000556:	69da      	ldr	r2, [r3, #28]
 8000558:	2380      	movs	r3, #128	; 0x80
 800055a:	055b      	lsls	r3, r3, #21
 800055c:	4013      	ands	r3, r2
 800055e:	603b      	str	r3, [r7, #0]
 8000560:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	46bd      	mov	sp, r7
 8000566:	b002      	add	sp, #8
 8000568:	bd80      	pop	{r7, pc}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	40021000 	.word	0x40021000

08000570 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a0d      	ldr	r2, [pc, #52]	; (80005b4 <HAL_TIM_Base_MspInit+0x44>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d113      	bne.n	80005aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000582:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <HAL_TIM_Base_MspInit+0x48>)
 8000584:	69da      	ldr	r2, [r3, #28]
 8000586:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <HAL_TIM_Base_MspInit+0x48>)
 8000588:	2102      	movs	r1, #2
 800058a:	430a      	orrs	r2, r1
 800058c:	61da      	str	r2, [r3, #28]
 800058e:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <HAL_TIM_Base_MspInit+0x48>)
 8000590:	69db      	ldr	r3, [r3, #28]
 8000592:	2202      	movs	r2, #2
 8000594:	4013      	ands	r3, r2
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800059a:	2200      	movs	r2, #0
 800059c:	2100      	movs	r1, #0
 800059e:	2010      	movs	r0, #16
 80005a0:	f000 f988 	bl	80008b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80005a4:	2010      	movs	r0, #16
 80005a6:	f000 f99a 	bl	80008de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	46bd      	mov	sp, r7
 80005ae:	b004      	add	sp, #16
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	40000400 	.word	0x40000400
 80005b8:	40021000 	.word	0x40021000

080005bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <NMI_Handler+0x4>

080005c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005c2:	b580      	push	{r7, lr}
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005c6:	e7fe      	b.n	80005c6 <HardFault_Handler+0x4>

080005c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005cc:	46c0      	nop			; (mov r8, r8)
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005d2:	b580      	push	{r7, lr}
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005e0:	f000 f8a0 	bl	8000724 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005e4:	46c0      	nop			; (mov r8, r8)
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80005f0:	4b03      	ldr	r3, [pc, #12]	; (8000600 <TIM3_IRQHandler+0x14>)
 80005f2:	0018      	movs	r0, r3
 80005f4:	f001 f884 	bl	8001700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80005f8:	46c0      	nop			; (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	20000028 	.word	0x20000028

08000604 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000608:	46c0      	nop			; (mov r8, r8)
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
	...

08000610 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000610:	4813      	ldr	r0, [pc, #76]	; (8000660 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000612:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000614:	f7ff fff6 	bl	8000604 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000618:	4812      	ldr	r0, [pc, #72]	; (8000664 <LoopForever+0x6>)
    LDR R1, [R0]
 800061a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800061c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800061e:	4a12      	ldr	r2, [pc, #72]	; (8000668 <LoopForever+0xa>)
    CMP R1, R2
 8000620:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000622:	d105      	bne.n	8000630 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000624:	4811      	ldr	r0, [pc, #68]	; (800066c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000626:	4912      	ldr	r1, [pc, #72]	; (8000670 <LoopForever+0x12>)
    STR R1, [R0]
 8000628:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800062a:	4812      	ldr	r0, [pc, #72]	; (8000674 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800062c:	4912      	ldr	r1, [pc, #72]	; (8000678 <LoopForever+0x1a>)
    STR R1, [R0]
 800062e:	6001      	str	r1, [r0, #0]

08000630 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000630:	4812      	ldr	r0, [pc, #72]	; (800067c <LoopForever+0x1e>)
  ldr r1, =_edata
 8000632:	4913      	ldr	r1, [pc, #76]	; (8000680 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000634:	4a13      	ldr	r2, [pc, #76]	; (8000684 <LoopForever+0x26>)
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000638:	e002      	b.n	8000640 <LoopCopyDataInit>

0800063a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800063a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800063c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800063e:	3304      	adds	r3, #4

08000640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000644:	d3f9      	bcc.n	800063a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000646:	4a10      	ldr	r2, [pc, #64]	; (8000688 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000648:	4c10      	ldr	r4, [pc, #64]	; (800068c <LoopForever+0x2e>)
  movs r3, #0
 800064a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800064c:	e001      	b.n	8000652 <LoopFillZerobss>

0800064e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800064e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000650:	3204      	adds	r2, #4

08000652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000654:	d3fb      	bcc.n	800064e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000656:	f001 fbd5 	bl	8001e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800065a:	f7ff fde1 	bl	8000220 <main>

0800065e <LoopForever>:

LoopForever:
    b LoopForever
 800065e:	e7fe      	b.n	800065e <LoopForever>
  ldr   r0, =_estack
 8000660:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000664:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000668:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 800066c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000670:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000674:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000678:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800067c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000680:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000684:	08001eac 	.word	0x08001eac
  ldr r2, =_sbss
 8000688:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800068c:	2000007c 	.word	0x2000007c

08000690 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000690:	e7fe      	b.n	8000690 <ADC1_IRQHandler>
	...

08000694 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000698:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <HAL_Init+0x24>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <HAL_Init+0x24>)
 800069e:	2110      	movs	r1, #16
 80006a0:	430a      	orrs	r2, r1
 80006a2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80006a4:	2003      	movs	r0, #3
 80006a6:	f000 f809 	bl	80006bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006aa:	f7ff ff3d 	bl	8000528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006ae:	2300      	movs	r3, #0
}
 80006b0:	0018      	movs	r0, r3
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	40022000 	.word	0x40022000

080006bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006bc:	b590      	push	{r4, r7, lr}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006c4:	4b14      	ldr	r3, [pc, #80]	; (8000718 <HAL_InitTick+0x5c>)
 80006c6:	681c      	ldr	r4, [r3, #0]
 80006c8:	4b14      	ldr	r3, [pc, #80]	; (800071c <HAL_InitTick+0x60>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	0019      	movs	r1, r3
 80006ce:	23fa      	movs	r3, #250	; 0xfa
 80006d0:	0098      	lsls	r0, r3, #2
 80006d2:	f7ff fd19 	bl	8000108 <__udivsi3>
 80006d6:	0003      	movs	r3, r0
 80006d8:	0019      	movs	r1, r3
 80006da:	0020      	movs	r0, r4
 80006dc:	f7ff fd14 	bl	8000108 <__udivsi3>
 80006e0:	0003      	movs	r3, r0
 80006e2:	0018      	movs	r0, r3
 80006e4:	f000 f90b 	bl	80008fe <HAL_SYSTICK_Config>
 80006e8:	1e03      	subs	r3, r0, #0
 80006ea:	d001      	beq.n	80006f0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80006ec:	2301      	movs	r3, #1
 80006ee:	e00f      	b.n	8000710 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2b03      	cmp	r3, #3
 80006f4:	d80b      	bhi.n	800070e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006f6:	6879      	ldr	r1, [r7, #4]
 80006f8:	2301      	movs	r3, #1
 80006fa:	425b      	negs	r3, r3
 80006fc:	2200      	movs	r2, #0
 80006fe:	0018      	movs	r0, r3
 8000700:	f000 f8d8 	bl	80008b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <HAL_InitTick+0x64>)
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800070a:	2300      	movs	r3, #0
 800070c:	e000      	b.n	8000710 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800070e:	2301      	movs	r3, #1
}
 8000710:	0018      	movs	r0, r3
 8000712:	46bd      	mov	sp, r7
 8000714:	b003      	add	sp, #12
 8000716:	bd90      	pop	{r4, r7, pc}
 8000718:	20000000 	.word	0x20000000
 800071c:	20000008 	.word	0x20000008
 8000720:	20000004 	.word	0x20000004

08000724 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000728:	4b05      	ldr	r3, [pc, #20]	; (8000740 <HAL_IncTick+0x1c>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	001a      	movs	r2, r3
 800072e:	4b05      	ldr	r3, [pc, #20]	; (8000744 <HAL_IncTick+0x20>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	18d2      	adds	r2, r2, r3
 8000734:	4b03      	ldr	r3, [pc, #12]	; (8000744 <HAL_IncTick+0x20>)
 8000736:	601a      	str	r2, [r3, #0]
}
 8000738:	46c0      	nop			; (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	20000008 	.word	0x20000008
 8000744:	20000078 	.word	0x20000078

08000748 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  return uwTick;
 800074c:	4b02      	ldr	r3, [pc, #8]	; (8000758 <HAL_GetTick+0x10>)
 800074e:	681b      	ldr	r3, [r3, #0]
}
 8000750:	0018      	movs	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	20000078 	.word	0x20000078

0800075c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	0002      	movs	r2, r0
 8000764:	1dfb      	adds	r3, r7, #7
 8000766:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000768:	1dfb      	adds	r3, r7, #7
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b7f      	cmp	r3, #127	; 0x7f
 800076e:	d809      	bhi.n	8000784 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000770:	1dfb      	adds	r3, r7, #7
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	001a      	movs	r2, r3
 8000776:	231f      	movs	r3, #31
 8000778:	401a      	ands	r2, r3
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <__NVIC_EnableIRQ+0x30>)
 800077c:	2101      	movs	r1, #1
 800077e:	4091      	lsls	r1, r2
 8000780:	000a      	movs	r2, r1
 8000782:	601a      	str	r2, [r3, #0]
  }
}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	b002      	add	sp, #8
 800078a:	bd80      	pop	{r7, pc}
 800078c:	e000e100 	.word	0xe000e100

08000790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000790:	b590      	push	{r4, r7, lr}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	0002      	movs	r2, r0
 8000798:	6039      	str	r1, [r7, #0]
 800079a:	1dfb      	adds	r3, r7, #7
 800079c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800079e:	1dfb      	adds	r3, r7, #7
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b7f      	cmp	r3, #127	; 0x7f
 80007a4:	d828      	bhi.n	80007f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007a6:	4a2f      	ldr	r2, [pc, #188]	; (8000864 <__NVIC_SetPriority+0xd4>)
 80007a8:	1dfb      	adds	r3, r7, #7
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	b25b      	sxtb	r3, r3
 80007ae:	089b      	lsrs	r3, r3, #2
 80007b0:	33c0      	adds	r3, #192	; 0xc0
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	589b      	ldr	r3, [r3, r2]
 80007b6:	1dfa      	adds	r2, r7, #7
 80007b8:	7812      	ldrb	r2, [r2, #0]
 80007ba:	0011      	movs	r1, r2
 80007bc:	2203      	movs	r2, #3
 80007be:	400a      	ands	r2, r1
 80007c0:	00d2      	lsls	r2, r2, #3
 80007c2:	21ff      	movs	r1, #255	; 0xff
 80007c4:	4091      	lsls	r1, r2
 80007c6:	000a      	movs	r2, r1
 80007c8:	43d2      	mvns	r2, r2
 80007ca:	401a      	ands	r2, r3
 80007cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	019b      	lsls	r3, r3, #6
 80007d2:	22ff      	movs	r2, #255	; 0xff
 80007d4:	401a      	ands	r2, r3
 80007d6:	1dfb      	adds	r3, r7, #7
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	0018      	movs	r0, r3
 80007dc:	2303      	movs	r3, #3
 80007de:	4003      	ands	r3, r0
 80007e0:	00db      	lsls	r3, r3, #3
 80007e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007e4:	481f      	ldr	r0, [pc, #124]	; (8000864 <__NVIC_SetPriority+0xd4>)
 80007e6:	1dfb      	adds	r3, r7, #7
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	b25b      	sxtb	r3, r3
 80007ec:	089b      	lsrs	r3, r3, #2
 80007ee:	430a      	orrs	r2, r1
 80007f0:	33c0      	adds	r3, #192	; 0xc0
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007f6:	e031      	b.n	800085c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007f8:	4a1b      	ldr	r2, [pc, #108]	; (8000868 <__NVIC_SetPriority+0xd8>)
 80007fa:	1dfb      	adds	r3, r7, #7
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	0019      	movs	r1, r3
 8000800:	230f      	movs	r3, #15
 8000802:	400b      	ands	r3, r1
 8000804:	3b08      	subs	r3, #8
 8000806:	089b      	lsrs	r3, r3, #2
 8000808:	3306      	adds	r3, #6
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	18d3      	adds	r3, r2, r3
 800080e:	3304      	adds	r3, #4
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	1dfa      	adds	r2, r7, #7
 8000814:	7812      	ldrb	r2, [r2, #0]
 8000816:	0011      	movs	r1, r2
 8000818:	2203      	movs	r2, #3
 800081a:	400a      	ands	r2, r1
 800081c:	00d2      	lsls	r2, r2, #3
 800081e:	21ff      	movs	r1, #255	; 0xff
 8000820:	4091      	lsls	r1, r2
 8000822:	000a      	movs	r2, r1
 8000824:	43d2      	mvns	r2, r2
 8000826:	401a      	ands	r2, r3
 8000828:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	019b      	lsls	r3, r3, #6
 800082e:	22ff      	movs	r2, #255	; 0xff
 8000830:	401a      	ands	r2, r3
 8000832:	1dfb      	adds	r3, r7, #7
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	0018      	movs	r0, r3
 8000838:	2303      	movs	r3, #3
 800083a:	4003      	ands	r3, r0
 800083c:	00db      	lsls	r3, r3, #3
 800083e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000840:	4809      	ldr	r0, [pc, #36]	; (8000868 <__NVIC_SetPriority+0xd8>)
 8000842:	1dfb      	adds	r3, r7, #7
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	001c      	movs	r4, r3
 8000848:	230f      	movs	r3, #15
 800084a:	4023      	ands	r3, r4
 800084c:	3b08      	subs	r3, #8
 800084e:	089b      	lsrs	r3, r3, #2
 8000850:	430a      	orrs	r2, r1
 8000852:	3306      	adds	r3, #6
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	18c3      	adds	r3, r0, r3
 8000858:	3304      	adds	r3, #4
 800085a:	601a      	str	r2, [r3, #0]
}
 800085c:	46c0      	nop			; (mov r8, r8)
 800085e:	46bd      	mov	sp, r7
 8000860:	b003      	add	sp, #12
 8000862:	bd90      	pop	{r4, r7, pc}
 8000864:	e000e100 	.word	0xe000e100
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	1e5a      	subs	r2, r3, #1
 8000878:	2380      	movs	r3, #128	; 0x80
 800087a:	045b      	lsls	r3, r3, #17
 800087c:	429a      	cmp	r2, r3
 800087e:	d301      	bcc.n	8000884 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000880:	2301      	movs	r3, #1
 8000882:	e010      	b.n	80008a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <SysTick_Config+0x44>)
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	3a01      	subs	r2, #1
 800088a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800088c:	2301      	movs	r3, #1
 800088e:	425b      	negs	r3, r3
 8000890:	2103      	movs	r1, #3
 8000892:	0018      	movs	r0, r3
 8000894:	f7ff ff7c 	bl	8000790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000898:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <SysTick_Config+0x44>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800089e:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <SysTick_Config+0x44>)
 80008a0:	2207      	movs	r2, #7
 80008a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	0018      	movs	r0, r3
 80008a8:	46bd      	mov	sp, r7
 80008aa:	b002      	add	sp, #8
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	e000e010 	.word	0xe000e010

080008b4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60b9      	str	r1, [r7, #8]
 80008bc:	607a      	str	r2, [r7, #4]
 80008be:	210f      	movs	r1, #15
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	1c02      	adds	r2, r0, #0
 80008c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80008c6:	68ba      	ldr	r2, [r7, #8]
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	b25b      	sxtb	r3, r3
 80008ce:	0011      	movs	r1, r2
 80008d0:	0018      	movs	r0, r3
 80008d2:	f7ff ff5d 	bl	8000790 <__NVIC_SetPriority>
}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	46bd      	mov	sp, r7
 80008da:	b004      	add	sp, #16
 80008dc:	bd80      	pop	{r7, pc}

080008de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b082      	sub	sp, #8
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	0002      	movs	r2, r0
 80008e6:	1dfb      	adds	r3, r7, #7
 80008e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	b25b      	sxtb	r3, r3
 80008f0:	0018      	movs	r0, r3
 80008f2:	f7ff ff33 	bl	800075c <__NVIC_EnableIRQ>
}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	b002      	add	sp, #8
 80008fc:	bd80      	pop	{r7, pc}

080008fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b082      	sub	sp, #8
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	0018      	movs	r0, r3
 800090a:	f7ff ffaf 	bl	800086c <SysTick_Config>
 800090e:	0003      	movs	r3, r0
}
 8000910:	0018      	movs	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	b002      	add	sp, #8
 8000916:	bd80      	pop	{r7, pc}

08000918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000926:	e149      	b.n	8000bbc <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2101      	movs	r1, #1
 800092e:	697a      	ldr	r2, [r7, #20]
 8000930:	4091      	lsls	r1, r2
 8000932:	000a      	movs	r2, r1
 8000934:	4013      	ands	r3, r2
 8000936:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d100      	bne.n	8000940 <HAL_GPIO_Init+0x28>
 800093e:	e13a      	b.n	8000bb6 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	2203      	movs	r2, #3
 8000946:	4013      	ands	r3, r2
 8000948:	2b01      	cmp	r3, #1
 800094a:	d005      	beq.n	8000958 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	2203      	movs	r2, #3
 8000952:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000954:	2b02      	cmp	r3, #2
 8000956:	d130      	bne.n	80009ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	2203      	movs	r2, #3
 8000964:	409a      	lsls	r2, r3
 8000966:	0013      	movs	r3, r2
 8000968:	43da      	mvns	r2, r3
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	4013      	ands	r3, r2
 800096e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	68da      	ldr	r2, [r3, #12]
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	409a      	lsls	r2, r3
 800097a:	0013      	movs	r3, r2
 800097c:	693a      	ldr	r2, [r7, #16]
 800097e:	4313      	orrs	r3, r2
 8000980:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	693a      	ldr	r2, [r7, #16]
 8000986:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800098e:	2201      	movs	r2, #1
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	409a      	lsls	r2, r3
 8000994:	0013      	movs	r3, r2
 8000996:	43da      	mvns	r2, r3
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	4013      	ands	r3, r2
 800099c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	091b      	lsrs	r3, r3, #4
 80009a4:	2201      	movs	r2, #1
 80009a6:	401a      	ands	r2, r3
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	409a      	lsls	r2, r3
 80009ac:	0013      	movs	r3, r2
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	4313      	orrs	r3, r2
 80009b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	2203      	movs	r2, #3
 80009c0:	4013      	ands	r3, r2
 80009c2:	2b03      	cmp	r3, #3
 80009c4:	d017      	beq.n	80009f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	68db      	ldr	r3, [r3, #12]
 80009ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	2203      	movs	r2, #3
 80009d2:	409a      	lsls	r2, r3
 80009d4:	0013      	movs	r3, r2
 80009d6:	43da      	mvns	r2, r3
 80009d8:	693b      	ldr	r3, [r7, #16]
 80009da:	4013      	ands	r3, r2
 80009dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	689a      	ldr	r2, [r3, #8]
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	409a      	lsls	r2, r3
 80009e8:	0013      	movs	r3, r2
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	2203      	movs	r2, #3
 80009fc:	4013      	ands	r3, r2
 80009fe:	2b02      	cmp	r3, #2
 8000a00:	d123      	bne.n	8000a4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	08da      	lsrs	r2, r3, #3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	3208      	adds	r2, #8
 8000a0a:	0092      	lsls	r2, r2, #2
 8000a0c:	58d3      	ldr	r3, [r2, r3]
 8000a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	2207      	movs	r2, #7
 8000a14:	4013      	ands	r3, r2
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	220f      	movs	r2, #15
 8000a1a:	409a      	lsls	r2, r3
 8000a1c:	0013      	movs	r3, r2
 8000a1e:	43da      	mvns	r2, r3
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	4013      	ands	r3, r2
 8000a24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	691a      	ldr	r2, [r3, #16]
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	2107      	movs	r1, #7
 8000a2e:	400b      	ands	r3, r1
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	409a      	lsls	r2, r3
 8000a34:	0013      	movs	r3, r2
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	08da      	lsrs	r2, r3, #3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3208      	adds	r2, #8
 8000a44:	0092      	lsls	r2, r2, #2
 8000a46:	6939      	ldr	r1, [r7, #16]
 8000a48:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	2203      	movs	r2, #3
 8000a56:	409a      	lsls	r2, r3
 8000a58:	0013      	movs	r3, r2
 8000a5a:	43da      	mvns	r2, r3
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	2203      	movs	r2, #3
 8000a68:	401a      	ands	r2, r3
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	409a      	lsls	r2, r3
 8000a70:	0013      	movs	r3, r2
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	685a      	ldr	r2, [r3, #4]
 8000a82:	23c0      	movs	r3, #192	; 0xc0
 8000a84:	029b      	lsls	r3, r3, #10
 8000a86:	4013      	ands	r3, r2
 8000a88:	d100      	bne.n	8000a8c <HAL_GPIO_Init+0x174>
 8000a8a:	e094      	b.n	8000bb6 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8c:	4b51      	ldr	r3, [pc, #324]	; (8000bd4 <HAL_GPIO_Init+0x2bc>)
 8000a8e:	699a      	ldr	r2, [r3, #24]
 8000a90:	4b50      	ldr	r3, [pc, #320]	; (8000bd4 <HAL_GPIO_Init+0x2bc>)
 8000a92:	2101      	movs	r1, #1
 8000a94:	430a      	orrs	r2, r1
 8000a96:	619a      	str	r2, [r3, #24]
 8000a98:	4b4e      	ldr	r3, [pc, #312]	; (8000bd4 <HAL_GPIO_Init+0x2bc>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000aa4:	4a4c      	ldr	r2, [pc, #304]	; (8000bd8 <HAL_GPIO_Init+0x2c0>)
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	089b      	lsrs	r3, r3, #2
 8000aaa:	3302      	adds	r3, #2
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	589b      	ldr	r3, [r3, r2]
 8000ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	2203      	movs	r2, #3
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	220f      	movs	r2, #15
 8000abc:	409a      	lsls	r2, r3
 8000abe:	0013      	movs	r3, r2
 8000ac0:	43da      	mvns	r2, r3
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	2390      	movs	r3, #144	; 0x90
 8000acc:	05db      	lsls	r3, r3, #23
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d00d      	beq.n	8000aee <HAL_GPIO_Init+0x1d6>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4a41      	ldr	r2, [pc, #260]	; (8000bdc <HAL_GPIO_Init+0x2c4>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d007      	beq.n	8000aea <HAL_GPIO_Init+0x1d2>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4a40      	ldr	r2, [pc, #256]	; (8000be0 <HAL_GPIO_Init+0x2c8>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d101      	bne.n	8000ae6 <HAL_GPIO_Init+0x1ce>
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	e004      	b.n	8000af0 <HAL_GPIO_Init+0x1d8>
 8000ae6:	2305      	movs	r3, #5
 8000ae8:	e002      	b.n	8000af0 <HAL_GPIO_Init+0x1d8>
 8000aea:	2301      	movs	r3, #1
 8000aec:	e000      	b.n	8000af0 <HAL_GPIO_Init+0x1d8>
 8000aee:	2300      	movs	r3, #0
 8000af0:	697a      	ldr	r2, [r7, #20]
 8000af2:	2103      	movs	r1, #3
 8000af4:	400a      	ands	r2, r1
 8000af6:	0092      	lsls	r2, r2, #2
 8000af8:	4093      	lsls	r3, r2
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b00:	4935      	ldr	r1, [pc, #212]	; (8000bd8 <HAL_GPIO_Init+0x2c0>)
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	089b      	lsrs	r3, r3, #2
 8000b06:	3302      	adds	r3, #2
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b0e:	4b35      	ldr	r3, [pc, #212]	; (8000be4 <HAL_GPIO_Init+0x2cc>)
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	43da      	mvns	r2, r3
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685a      	ldr	r2, [r3, #4]
 8000b22:	2380      	movs	r3, #128	; 0x80
 8000b24:	035b      	lsls	r3, r3, #13
 8000b26:	4013      	ands	r3, r2
 8000b28:	d003      	beq.n	8000b32 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b32:	4b2c      	ldr	r3, [pc, #176]	; (8000be4 <HAL_GPIO_Init+0x2cc>)
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000b38:	4b2a      	ldr	r3, [pc, #168]	; (8000be4 <HAL_GPIO_Init+0x2cc>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	43da      	mvns	r2, r3
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	4013      	ands	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685a      	ldr	r2, [r3, #4]
 8000b4c:	2380      	movs	r3, #128	; 0x80
 8000b4e:	039b      	lsls	r3, r3, #14
 8000b50:	4013      	ands	r3, r2
 8000b52:	d003      	beq.n	8000b5c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b5c:	4b21      	ldr	r3, [pc, #132]	; (8000be4 <HAL_GPIO_Init+0x2cc>)
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000b62:	4b20      	ldr	r3, [pc, #128]	; (8000be4 <HAL_GPIO_Init+0x2cc>)
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	43da      	mvns	r2, r3
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685a      	ldr	r2, [r3, #4]
 8000b76:	2380      	movs	r3, #128	; 0x80
 8000b78:	029b      	lsls	r3, r3, #10
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	d003      	beq.n	8000b86 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b86:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <HAL_GPIO_Init+0x2cc>)
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000b8c:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <HAL_GPIO_Init+0x2cc>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	43da      	mvns	r2, r3
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685a      	ldr	r2, [r3, #4]
 8000ba0:	2380      	movs	r3, #128	; 0x80
 8000ba2:	025b      	lsls	r3, r3, #9
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	d003      	beq.n	8000bb0 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <HAL_GPIO_Init+0x2cc>)
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	40da      	lsrs	r2, r3
 8000bc4:	1e13      	subs	r3, r2, #0
 8000bc6:	d000      	beq.n	8000bca <HAL_GPIO_Init+0x2b2>
 8000bc8:	e6ae      	b.n	8000928 <HAL_GPIO_Init+0x10>
  } 
}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	46c0      	nop			; (mov r8, r8)
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	b006      	add	sp, #24
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	40010000 	.word	0x40010000
 8000bdc:	48000400 	.word	0x48000400
 8000be0:	48000800 	.word	0x48000800
 8000be4:	40010400 	.word	0x40010400

08000be8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	0008      	movs	r0, r1
 8000bf2:	0011      	movs	r1, r2
 8000bf4:	1cbb      	adds	r3, r7, #2
 8000bf6:	1c02      	adds	r2, r0, #0
 8000bf8:	801a      	strh	r2, [r3, #0]
 8000bfa:	1c7b      	adds	r3, r7, #1
 8000bfc:	1c0a      	adds	r2, r1, #0
 8000bfe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c00:	1c7b      	adds	r3, r7, #1
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d004      	beq.n	8000c12 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c08:	1cbb      	adds	r3, r7, #2
 8000c0a:	881a      	ldrh	r2, [r3, #0]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c10:	e003      	b.n	8000c1a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c12:	1cbb      	adds	r3, r7, #2
 8000c14:	881a      	ldrh	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	b002      	add	sp, #8
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d102      	bne.n	8000c38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	f000 fb76 	bl	8001324 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	4013      	ands	r3, r2
 8000c40:	d100      	bne.n	8000c44 <HAL_RCC_OscConfig+0x20>
 8000c42:	e08e      	b.n	8000d62 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c44:	4bc5      	ldr	r3, [pc, #788]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	220c      	movs	r2, #12
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	2b04      	cmp	r3, #4
 8000c4e:	d00e      	beq.n	8000c6e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c50:	4bc2      	ldr	r3, [pc, #776]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	220c      	movs	r2, #12
 8000c56:	4013      	ands	r3, r2
 8000c58:	2b08      	cmp	r3, #8
 8000c5a:	d117      	bne.n	8000c8c <HAL_RCC_OscConfig+0x68>
 8000c5c:	4bbf      	ldr	r3, [pc, #764]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000c5e:	685a      	ldr	r2, [r3, #4]
 8000c60:	23c0      	movs	r3, #192	; 0xc0
 8000c62:	025b      	lsls	r3, r3, #9
 8000c64:	401a      	ands	r2, r3
 8000c66:	2380      	movs	r3, #128	; 0x80
 8000c68:	025b      	lsls	r3, r3, #9
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d10e      	bne.n	8000c8c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c6e:	4bbb      	ldr	r3, [pc, #748]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	2380      	movs	r3, #128	; 0x80
 8000c74:	029b      	lsls	r3, r3, #10
 8000c76:	4013      	ands	r3, r2
 8000c78:	d100      	bne.n	8000c7c <HAL_RCC_OscConfig+0x58>
 8000c7a:	e071      	b.n	8000d60 <HAL_RCC_OscConfig+0x13c>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d000      	beq.n	8000c86 <HAL_RCC_OscConfig+0x62>
 8000c84:	e06c      	b.n	8000d60 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	f000 fb4c 	bl	8001324 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d107      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x80>
 8000c94:	4bb1      	ldr	r3, [pc, #708]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4bb0      	ldr	r3, [pc, #704]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000c9a:	2180      	movs	r1, #128	; 0x80
 8000c9c:	0249      	lsls	r1, r1, #9
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	e02f      	b.n	8000d04 <HAL_RCC_OscConfig+0xe0>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d10c      	bne.n	8000cc6 <HAL_RCC_OscConfig+0xa2>
 8000cac:	4bab      	ldr	r3, [pc, #684]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4baa      	ldr	r3, [pc, #680]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000cb2:	49ab      	ldr	r1, [pc, #684]	; (8000f60 <HAL_RCC_OscConfig+0x33c>)
 8000cb4:	400a      	ands	r2, r1
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	4ba8      	ldr	r3, [pc, #672]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4ba7      	ldr	r3, [pc, #668]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000cbe:	49a9      	ldr	r1, [pc, #676]	; (8000f64 <HAL_RCC_OscConfig+0x340>)
 8000cc0:	400a      	ands	r2, r1
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	e01e      	b.n	8000d04 <HAL_RCC_OscConfig+0xe0>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	2b05      	cmp	r3, #5
 8000ccc:	d10e      	bne.n	8000cec <HAL_RCC_OscConfig+0xc8>
 8000cce:	4ba3      	ldr	r3, [pc, #652]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	4ba2      	ldr	r3, [pc, #648]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000cd4:	2180      	movs	r1, #128	; 0x80
 8000cd6:	02c9      	lsls	r1, r1, #11
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	4b9f      	ldr	r3, [pc, #636]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	4b9e      	ldr	r3, [pc, #632]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000ce2:	2180      	movs	r1, #128	; 0x80
 8000ce4:	0249      	lsls	r1, r1, #9
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	e00b      	b.n	8000d04 <HAL_RCC_OscConfig+0xe0>
 8000cec:	4b9b      	ldr	r3, [pc, #620]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b9a      	ldr	r3, [pc, #616]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000cf2:	499b      	ldr	r1, [pc, #620]	; (8000f60 <HAL_RCC_OscConfig+0x33c>)
 8000cf4:	400a      	ands	r2, r1
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	4b98      	ldr	r3, [pc, #608]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4b97      	ldr	r3, [pc, #604]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000cfe:	4999      	ldr	r1, [pc, #612]	; (8000f64 <HAL_RCC_OscConfig+0x340>)
 8000d00:	400a      	ands	r2, r1
 8000d02:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d014      	beq.n	8000d36 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d0c:	f7ff fd1c 	bl	8000748 <HAL_GetTick>
 8000d10:	0003      	movs	r3, r0
 8000d12:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d14:	e008      	b.n	8000d28 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d16:	f7ff fd17 	bl	8000748 <HAL_GetTick>
 8000d1a:	0002      	movs	r2, r0
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	1ad3      	subs	r3, r2, r3
 8000d20:	2b64      	cmp	r3, #100	; 0x64
 8000d22:	d901      	bls.n	8000d28 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000d24:	2303      	movs	r3, #3
 8000d26:	e2fd      	b.n	8001324 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d28:	4b8c      	ldr	r3, [pc, #560]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	2380      	movs	r3, #128	; 0x80
 8000d2e:	029b      	lsls	r3, r3, #10
 8000d30:	4013      	ands	r3, r2
 8000d32:	d0f0      	beq.n	8000d16 <HAL_RCC_OscConfig+0xf2>
 8000d34:	e015      	b.n	8000d62 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d36:	f7ff fd07 	bl	8000748 <HAL_GetTick>
 8000d3a:	0003      	movs	r3, r0
 8000d3c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d3e:	e008      	b.n	8000d52 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d40:	f7ff fd02 	bl	8000748 <HAL_GetTick>
 8000d44:	0002      	movs	r2, r0
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	2b64      	cmp	r3, #100	; 0x64
 8000d4c:	d901      	bls.n	8000d52 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	e2e8      	b.n	8001324 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d52:	4b82      	ldr	r3, [pc, #520]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	2380      	movs	r3, #128	; 0x80
 8000d58:	029b      	lsls	r3, r3, #10
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	d1f0      	bne.n	8000d40 <HAL_RCC_OscConfig+0x11c>
 8000d5e:	e000      	b.n	8000d62 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d60:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2202      	movs	r2, #2
 8000d68:	4013      	ands	r3, r2
 8000d6a:	d100      	bne.n	8000d6e <HAL_RCC_OscConfig+0x14a>
 8000d6c:	e06c      	b.n	8000e48 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d6e:	4b7b      	ldr	r3, [pc, #492]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	220c      	movs	r2, #12
 8000d74:	4013      	ands	r3, r2
 8000d76:	d00e      	beq.n	8000d96 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d78:	4b78      	ldr	r3, [pc, #480]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	220c      	movs	r2, #12
 8000d7e:	4013      	ands	r3, r2
 8000d80:	2b08      	cmp	r3, #8
 8000d82:	d11f      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x1a0>
 8000d84:	4b75      	ldr	r3, [pc, #468]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000d86:	685a      	ldr	r2, [r3, #4]
 8000d88:	23c0      	movs	r3, #192	; 0xc0
 8000d8a:	025b      	lsls	r3, r3, #9
 8000d8c:	401a      	ands	r2, r3
 8000d8e:	2380      	movs	r3, #128	; 0x80
 8000d90:	021b      	lsls	r3, r3, #8
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d116      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d96:	4b71      	ldr	r3, [pc, #452]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	d005      	beq.n	8000dac <HAL_RCC_OscConfig+0x188>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d001      	beq.n	8000dac <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	e2bb      	b.n	8001324 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dac:	4b6b      	ldr	r3, [pc, #428]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	22f8      	movs	r2, #248	; 0xf8
 8000db2:	4393      	bics	r3, r2
 8000db4:	0019      	movs	r1, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	691b      	ldr	r3, [r3, #16]
 8000dba:	00da      	lsls	r2, r3, #3
 8000dbc:	4b67      	ldr	r3, [pc, #412]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000dbe:	430a      	orrs	r2, r1
 8000dc0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dc2:	e041      	b.n	8000e48 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d024      	beq.n	8000e16 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dcc:	4b63      	ldr	r3, [pc, #396]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4b62      	ldr	r3, [pc, #392]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd8:	f7ff fcb6 	bl	8000748 <HAL_GetTick>
 8000ddc:	0003      	movs	r3, r0
 8000dde:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de0:	e008      	b.n	8000df4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000de2:	f7ff fcb1 	bl	8000748 <HAL_GetTick>
 8000de6:	0002      	movs	r2, r0
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d901      	bls.n	8000df4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000df0:	2303      	movs	r3, #3
 8000df2:	e297      	b.n	8001324 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000df4:	4b59      	ldr	r3, [pc, #356]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2202      	movs	r2, #2
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	d0f1      	beq.n	8000de2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dfe:	4b57      	ldr	r3, [pc, #348]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	22f8      	movs	r2, #248	; 0xf8
 8000e04:	4393      	bics	r3, r2
 8000e06:	0019      	movs	r1, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	691b      	ldr	r3, [r3, #16]
 8000e0c:	00da      	lsls	r2, r3, #3
 8000e0e:	4b53      	ldr	r3, [pc, #332]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000e10:	430a      	orrs	r2, r1
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	e018      	b.n	8000e48 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e16:	4b51      	ldr	r3, [pc, #324]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	4b50      	ldr	r3, [pc, #320]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	438a      	bics	r2, r1
 8000e20:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e22:	f7ff fc91 	bl	8000748 <HAL_GetTick>
 8000e26:	0003      	movs	r3, r0
 8000e28:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e2a:	e008      	b.n	8000e3e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e2c:	f7ff fc8c 	bl	8000748 <HAL_GetTick>
 8000e30:	0002      	movs	r2, r0
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d901      	bls.n	8000e3e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	e272      	b.n	8001324 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e3e:	4b47      	ldr	r3, [pc, #284]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2202      	movs	r2, #2
 8000e44:	4013      	ands	r3, r2
 8000e46:	d1f1      	bne.n	8000e2c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2208      	movs	r2, #8
 8000e4e:	4013      	ands	r3, r2
 8000e50:	d036      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d019      	beq.n	8000e8e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e5a:	4b40      	ldr	r3, [pc, #256]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000e5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e5e:	4b3f      	ldr	r3, [pc, #252]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000e60:	2101      	movs	r1, #1
 8000e62:	430a      	orrs	r2, r1
 8000e64:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e66:	f7ff fc6f 	bl	8000748 <HAL_GetTick>
 8000e6a:	0003      	movs	r3, r0
 8000e6c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e6e:	e008      	b.n	8000e82 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e70:	f7ff fc6a 	bl	8000748 <HAL_GetTick>
 8000e74:	0002      	movs	r2, r0
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d901      	bls.n	8000e82 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e250      	b.n	8001324 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e82:	4b36      	ldr	r3, [pc, #216]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e86:	2202      	movs	r2, #2
 8000e88:	4013      	ands	r3, r2
 8000e8a:	d0f1      	beq.n	8000e70 <HAL_RCC_OscConfig+0x24c>
 8000e8c:	e018      	b.n	8000ec0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e8e:	4b33      	ldr	r3, [pc, #204]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000e90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e92:	4b32      	ldr	r3, [pc, #200]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000e94:	2101      	movs	r1, #1
 8000e96:	438a      	bics	r2, r1
 8000e98:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e9a:	f7ff fc55 	bl	8000748 <HAL_GetTick>
 8000e9e:	0003      	movs	r3, r0
 8000ea0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ea2:	e008      	b.n	8000eb6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ea4:	f7ff fc50 	bl	8000748 <HAL_GetTick>
 8000ea8:	0002      	movs	r2, r0
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d901      	bls.n	8000eb6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e236      	b.n	8001324 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eb6:	4b29      	ldr	r3, [pc, #164]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eba:	2202      	movs	r2, #2
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	d1f1      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2204      	movs	r2, #4
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	d100      	bne.n	8000ecc <HAL_RCC_OscConfig+0x2a8>
 8000eca:	e0b5      	b.n	8001038 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ecc:	201f      	movs	r0, #31
 8000ece:	183b      	adds	r3, r7, r0
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ed4:	4b21      	ldr	r3, [pc, #132]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000ed6:	69da      	ldr	r2, [r3, #28]
 8000ed8:	2380      	movs	r3, #128	; 0x80
 8000eda:	055b      	lsls	r3, r3, #21
 8000edc:	4013      	ands	r3, r2
 8000ede:	d110      	bne.n	8000f02 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ee0:	4b1e      	ldr	r3, [pc, #120]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000ee2:	69da      	ldr	r2, [r3, #28]
 8000ee4:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000ee6:	2180      	movs	r1, #128	; 0x80
 8000ee8:	0549      	lsls	r1, r1, #21
 8000eea:	430a      	orrs	r2, r1
 8000eec:	61da      	str	r2, [r3, #28]
 8000eee:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000ef0:	69da      	ldr	r2, [r3, #28]
 8000ef2:	2380      	movs	r3, #128	; 0x80
 8000ef4:	055b      	lsls	r3, r3, #21
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000efc:	183b      	adds	r3, r7, r0
 8000efe:	2201      	movs	r2, #1
 8000f00:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f02:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <HAL_RCC_OscConfig+0x344>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	2380      	movs	r3, #128	; 0x80
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	d11a      	bne.n	8000f44 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <HAL_RCC_OscConfig+0x344>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <HAL_RCC_OscConfig+0x344>)
 8000f14:	2180      	movs	r1, #128	; 0x80
 8000f16:	0049      	lsls	r1, r1, #1
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f1c:	f7ff fc14 	bl	8000748 <HAL_GetTick>
 8000f20:	0003      	movs	r3, r0
 8000f22:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f24:	e008      	b.n	8000f38 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f26:	f7ff fc0f 	bl	8000748 <HAL_GetTick>
 8000f2a:	0002      	movs	r2, r0
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	2b64      	cmp	r3, #100	; 0x64
 8000f32:	d901      	bls.n	8000f38 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8000f34:	2303      	movs	r3, #3
 8000f36:	e1f5      	b.n	8001324 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f38:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <HAL_RCC_OscConfig+0x344>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	4013      	ands	r3, r2
 8000f42:	d0f0      	beq.n	8000f26 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d10f      	bne.n	8000f6c <HAL_RCC_OscConfig+0x348>
 8000f4c:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000f4e:	6a1a      	ldr	r2, [r3, #32]
 8000f50:	4b02      	ldr	r3, [pc, #8]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000f52:	2101      	movs	r1, #1
 8000f54:	430a      	orrs	r2, r1
 8000f56:	621a      	str	r2, [r3, #32]
 8000f58:	e036      	b.n	8000fc8 <HAL_RCC_OscConfig+0x3a4>
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	fffeffff 	.word	0xfffeffff
 8000f64:	fffbffff 	.word	0xfffbffff
 8000f68:	40007000 	.word	0x40007000
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d10c      	bne.n	8000f8e <HAL_RCC_OscConfig+0x36a>
 8000f74:	4bca      	ldr	r3, [pc, #808]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 8000f76:	6a1a      	ldr	r2, [r3, #32]
 8000f78:	4bc9      	ldr	r3, [pc, #804]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	438a      	bics	r2, r1
 8000f7e:	621a      	str	r2, [r3, #32]
 8000f80:	4bc7      	ldr	r3, [pc, #796]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 8000f82:	6a1a      	ldr	r2, [r3, #32]
 8000f84:	4bc6      	ldr	r3, [pc, #792]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 8000f86:	2104      	movs	r1, #4
 8000f88:	438a      	bics	r2, r1
 8000f8a:	621a      	str	r2, [r3, #32]
 8000f8c:	e01c      	b.n	8000fc8 <HAL_RCC_OscConfig+0x3a4>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	2b05      	cmp	r3, #5
 8000f94:	d10c      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x38c>
 8000f96:	4bc2      	ldr	r3, [pc, #776]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 8000f98:	6a1a      	ldr	r2, [r3, #32]
 8000f9a:	4bc1      	ldr	r3, [pc, #772]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 8000f9c:	2104      	movs	r1, #4
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	621a      	str	r2, [r3, #32]
 8000fa2:	4bbf      	ldr	r3, [pc, #764]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 8000fa4:	6a1a      	ldr	r2, [r3, #32]
 8000fa6:	4bbe      	ldr	r3, [pc, #760]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 8000fa8:	2101      	movs	r1, #1
 8000faa:	430a      	orrs	r2, r1
 8000fac:	621a      	str	r2, [r3, #32]
 8000fae:	e00b      	b.n	8000fc8 <HAL_RCC_OscConfig+0x3a4>
 8000fb0:	4bbb      	ldr	r3, [pc, #748]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 8000fb2:	6a1a      	ldr	r2, [r3, #32]
 8000fb4:	4bba      	ldr	r3, [pc, #744]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	438a      	bics	r2, r1
 8000fba:	621a      	str	r2, [r3, #32]
 8000fbc:	4bb8      	ldr	r3, [pc, #736]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 8000fbe:	6a1a      	ldr	r2, [r3, #32]
 8000fc0:	4bb7      	ldr	r3, [pc, #732]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 8000fc2:	2104      	movs	r1, #4
 8000fc4:	438a      	bics	r2, r1
 8000fc6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d014      	beq.n	8000ffa <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fd0:	f7ff fbba 	bl	8000748 <HAL_GetTick>
 8000fd4:	0003      	movs	r3, r0
 8000fd6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fd8:	e009      	b.n	8000fee <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fda:	f7ff fbb5 	bl	8000748 <HAL_GetTick>
 8000fde:	0002      	movs	r2, r0
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	4aaf      	ldr	r2, [pc, #700]	; (80012a4 <HAL_RCC_OscConfig+0x680>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e19a      	b.n	8001324 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fee:	4bac      	ldr	r3, [pc, #688]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 8000ff0:	6a1b      	ldr	r3, [r3, #32]
 8000ff2:	2202      	movs	r2, #2
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	d0f0      	beq.n	8000fda <HAL_RCC_OscConfig+0x3b6>
 8000ff8:	e013      	b.n	8001022 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ffa:	f7ff fba5 	bl	8000748 <HAL_GetTick>
 8000ffe:	0003      	movs	r3, r0
 8001000:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001002:	e009      	b.n	8001018 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001004:	f7ff fba0 	bl	8000748 <HAL_GetTick>
 8001008:	0002      	movs	r2, r0
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	4aa5      	ldr	r2, [pc, #660]	; (80012a4 <HAL_RCC_OscConfig+0x680>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d901      	bls.n	8001018 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001014:	2303      	movs	r3, #3
 8001016:	e185      	b.n	8001324 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001018:	4ba1      	ldr	r3, [pc, #644]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 800101a:	6a1b      	ldr	r3, [r3, #32]
 800101c:	2202      	movs	r2, #2
 800101e:	4013      	ands	r3, r2
 8001020:	d1f0      	bne.n	8001004 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001022:	231f      	movs	r3, #31
 8001024:	18fb      	adds	r3, r7, r3
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d105      	bne.n	8001038 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800102c:	4b9c      	ldr	r3, [pc, #624]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 800102e:	69da      	ldr	r2, [r3, #28]
 8001030:	4b9b      	ldr	r3, [pc, #620]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 8001032:	499d      	ldr	r1, [pc, #628]	; (80012a8 <HAL_RCC_OscConfig+0x684>)
 8001034:	400a      	ands	r2, r1
 8001036:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2210      	movs	r2, #16
 800103e:	4013      	ands	r3, r2
 8001040:	d063      	beq.n	800110a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d12a      	bne.n	80010a0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800104a:	4b95      	ldr	r3, [pc, #596]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 800104c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800104e:	4b94      	ldr	r3, [pc, #592]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 8001050:	2104      	movs	r1, #4
 8001052:	430a      	orrs	r2, r1
 8001054:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001056:	4b92      	ldr	r3, [pc, #584]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 8001058:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800105a:	4b91      	ldr	r3, [pc, #580]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 800105c:	2101      	movs	r1, #1
 800105e:	430a      	orrs	r2, r1
 8001060:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001062:	f7ff fb71 	bl	8000748 <HAL_GetTick>
 8001066:	0003      	movs	r3, r0
 8001068:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800106a:	e008      	b.n	800107e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800106c:	f7ff fb6c 	bl	8000748 <HAL_GetTick>
 8001070:	0002      	movs	r2, r0
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e152      	b.n	8001324 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800107e:	4b88      	ldr	r3, [pc, #544]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 8001080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001082:	2202      	movs	r2, #2
 8001084:	4013      	ands	r3, r2
 8001086:	d0f1      	beq.n	800106c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001088:	4b85      	ldr	r3, [pc, #532]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 800108a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800108c:	22f8      	movs	r2, #248	; 0xf8
 800108e:	4393      	bics	r3, r2
 8001090:	0019      	movs	r1, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	699b      	ldr	r3, [r3, #24]
 8001096:	00da      	lsls	r2, r3, #3
 8001098:	4b81      	ldr	r3, [pc, #516]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 800109a:	430a      	orrs	r2, r1
 800109c:	635a      	str	r2, [r3, #52]	; 0x34
 800109e:	e034      	b.n	800110a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	695b      	ldr	r3, [r3, #20]
 80010a4:	3305      	adds	r3, #5
 80010a6:	d111      	bne.n	80010cc <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80010a8:	4b7d      	ldr	r3, [pc, #500]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 80010aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010ac:	4b7c      	ldr	r3, [pc, #496]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 80010ae:	2104      	movs	r1, #4
 80010b0:	438a      	bics	r2, r1
 80010b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80010b4:	4b7a      	ldr	r3, [pc, #488]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 80010b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010b8:	22f8      	movs	r2, #248	; 0xf8
 80010ba:	4393      	bics	r3, r2
 80010bc:	0019      	movs	r1, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	00da      	lsls	r2, r3, #3
 80010c4:	4b76      	ldr	r3, [pc, #472]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 80010c6:	430a      	orrs	r2, r1
 80010c8:	635a      	str	r2, [r3, #52]	; 0x34
 80010ca:	e01e      	b.n	800110a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010cc:	4b74      	ldr	r3, [pc, #464]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 80010ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010d0:	4b73      	ldr	r3, [pc, #460]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 80010d2:	2104      	movs	r1, #4
 80010d4:	430a      	orrs	r2, r1
 80010d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80010d8:	4b71      	ldr	r3, [pc, #452]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 80010da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010dc:	4b70      	ldr	r3, [pc, #448]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 80010de:	2101      	movs	r1, #1
 80010e0:	438a      	bics	r2, r1
 80010e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e4:	f7ff fb30 	bl	8000748 <HAL_GetTick>
 80010e8:	0003      	movs	r3, r0
 80010ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80010ec:	e008      	b.n	8001100 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010ee:	f7ff fb2b 	bl	8000748 <HAL_GetTick>
 80010f2:	0002      	movs	r2, r0
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d901      	bls.n	8001100 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e111      	b.n	8001324 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001100:	4b67      	ldr	r3, [pc, #412]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 8001102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001104:	2202      	movs	r2, #2
 8001106:	4013      	ands	r3, r2
 8001108:	d1f1      	bne.n	80010ee <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2220      	movs	r2, #32
 8001110:	4013      	ands	r3, r2
 8001112:	d05c      	beq.n	80011ce <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001114:	4b62      	ldr	r3, [pc, #392]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	220c      	movs	r2, #12
 800111a:	4013      	ands	r3, r2
 800111c:	2b0c      	cmp	r3, #12
 800111e:	d00e      	beq.n	800113e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001120:	4b5f      	ldr	r3, [pc, #380]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	220c      	movs	r2, #12
 8001126:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001128:	2b08      	cmp	r3, #8
 800112a:	d114      	bne.n	8001156 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800112c:	4b5c      	ldr	r3, [pc, #368]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	23c0      	movs	r3, #192	; 0xc0
 8001132:	025b      	lsls	r3, r3, #9
 8001134:	401a      	ands	r2, r3
 8001136:	23c0      	movs	r3, #192	; 0xc0
 8001138:	025b      	lsls	r3, r3, #9
 800113a:	429a      	cmp	r2, r3
 800113c:	d10b      	bne.n	8001156 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800113e:	4b58      	ldr	r3, [pc, #352]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 8001140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001142:	2380      	movs	r3, #128	; 0x80
 8001144:	029b      	lsls	r3, r3, #10
 8001146:	4013      	ands	r3, r2
 8001148:	d040      	beq.n	80011cc <HAL_RCC_OscConfig+0x5a8>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a1b      	ldr	r3, [r3, #32]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d03c      	beq.n	80011cc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e0e6      	b.n	8001324 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a1b      	ldr	r3, [r3, #32]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d01b      	beq.n	8001196 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800115e:	4b50      	ldr	r3, [pc, #320]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 8001160:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001162:	4b4f      	ldr	r3, [pc, #316]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 8001164:	2180      	movs	r1, #128	; 0x80
 8001166:	0249      	lsls	r1, r1, #9
 8001168:	430a      	orrs	r2, r1
 800116a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116c:	f7ff faec 	bl	8000748 <HAL_GetTick>
 8001170:	0003      	movs	r3, r0
 8001172:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001174:	e008      	b.n	8001188 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001176:	f7ff fae7 	bl	8000748 <HAL_GetTick>
 800117a:	0002      	movs	r2, r0
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d901      	bls.n	8001188 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e0cd      	b.n	8001324 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001188:	4b45      	ldr	r3, [pc, #276]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 800118a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	029b      	lsls	r3, r3, #10
 8001190:	4013      	ands	r3, r2
 8001192:	d0f0      	beq.n	8001176 <HAL_RCC_OscConfig+0x552>
 8001194:	e01b      	b.n	80011ce <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001196:	4b42      	ldr	r3, [pc, #264]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 8001198:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800119a:	4b41      	ldr	r3, [pc, #260]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 800119c:	4943      	ldr	r1, [pc, #268]	; (80012ac <HAL_RCC_OscConfig+0x688>)
 800119e:	400a      	ands	r2, r1
 80011a0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a2:	f7ff fad1 	bl	8000748 <HAL_GetTick>
 80011a6:	0003      	movs	r3, r0
 80011a8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011ac:	f7ff facc 	bl	8000748 <HAL_GetTick>
 80011b0:	0002      	movs	r2, r0
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e0b2      	b.n	8001324 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80011be:	4b38      	ldr	r3, [pc, #224]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 80011c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011c2:	2380      	movs	r3, #128	; 0x80
 80011c4:	029b      	lsls	r3, r3, #10
 80011c6:	4013      	ands	r3, r2
 80011c8:	d1f0      	bne.n	80011ac <HAL_RCC_OscConfig+0x588>
 80011ca:	e000      	b.n	80011ce <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80011cc:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d100      	bne.n	80011d8 <HAL_RCC_OscConfig+0x5b4>
 80011d6:	e0a4      	b.n	8001322 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011d8:	4b31      	ldr	r3, [pc, #196]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	220c      	movs	r2, #12
 80011de:	4013      	ands	r3, r2
 80011e0:	2b08      	cmp	r3, #8
 80011e2:	d100      	bne.n	80011e6 <HAL_RCC_OscConfig+0x5c2>
 80011e4:	e078      	b.n	80012d8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d14c      	bne.n	8001288 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011ee:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	4b2b      	ldr	r3, [pc, #172]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 80011f4:	492e      	ldr	r1, [pc, #184]	; (80012b0 <HAL_RCC_OscConfig+0x68c>)
 80011f6:	400a      	ands	r2, r1
 80011f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fa:	f7ff faa5 	bl	8000748 <HAL_GetTick>
 80011fe:	0003      	movs	r3, r0
 8001200:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001204:	f7ff faa0 	bl	8000748 <HAL_GetTick>
 8001208:	0002      	movs	r2, r0
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e086      	b.n	8001324 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001216:	4b22      	ldr	r3, [pc, #136]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	049b      	lsls	r3, r3, #18
 800121e:	4013      	ands	r3, r2
 8001220:	d1f0      	bne.n	8001204 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001222:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 8001224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001226:	220f      	movs	r2, #15
 8001228:	4393      	bics	r3, r2
 800122a:	0019      	movs	r1, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001230:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 8001232:	430a      	orrs	r2, r1
 8001234:	62da      	str	r2, [r3, #44]	; 0x2c
 8001236:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	4a1e      	ldr	r2, [pc, #120]	; (80012b4 <HAL_RCC_OscConfig+0x690>)
 800123c:	4013      	ands	r3, r2
 800123e:	0019      	movs	r1, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001248:	431a      	orrs	r2, r3
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 800124c:	430a      	orrs	r2, r1
 800124e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001250:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 8001256:	2180      	movs	r1, #128	; 0x80
 8001258:	0449      	lsls	r1, r1, #17
 800125a:	430a      	orrs	r2, r1
 800125c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800125e:	f7ff fa73 	bl	8000748 <HAL_GetTick>
 8001262:	0003      	movs	r3, r0
 8001264:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001268:	f7ff fa6e 	bl	8000748 <HAL_GetTick>
 800126c:	0002      	movs	r2, r0
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e054      	b.n	8001324 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	2380      	movs	r3, #128	; 0x80
 8001280:	049b      	lsls	r3, r3, #18
 8001282:	4013      	ands	r3, r2
 8001284:	d0f0      	beq.n	8001268 <HAL_RCC_OscConfig+0x644>
 8001286:	e04c      	b.n	8001322 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <HAL_RCC_OscConfig+0x67c>)
 800128e:	4908      	ldr	r1, [pc, #32]	; (80012b0 <HAL_RCC_OscConfig+0x68c>)
 8001290:	400a      	ands	r2, r1
 8001292:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001294:	f7ff fa58 	bl	8000748 <HAL_GetTick>
 8001298:	0003      	movs	r3, r0
 800129a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800129c:	e015      	b.n	80012ca <HAL_RCC_OscConfig+0x6a6>
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	40021000 	.word	0x40021000
 80012a4:	00001388 	.word	0x00001388
 80012a8:	efffffff 	.word	0xefffffff
 80012ac:	fffeffff 	.word	0xfffeffff
 80012b0:	feffffff 	.word	0xfeffffff
 80012b4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012b8:	f7ff fa46 	bl	8000748 <HAL_GetTick>
 80012bc:	0002      	movs	r2, r0
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e02c      	b.n	8001324 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ca:	4b18      	ldr	r3, [pc, #96]	; (800132c <HAL_RCC_OscConfig+0x708>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	2380      	movs	r3, #128	; 0x80
 80012d0:	049b      	lsls	r3, r3, #18
 80012d2:	4013      	ands	r3, r2
 80012d4:	d1f0      	bne.n	80012b8 <HAL_RCC_OscConfig+0x694>
 80012d6:	e024      	b.n	8001322 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d101      	bne.n	80012e4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e01f      	b.n	8001324 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80012e4:	4b11      	ldr	r3, [pc, #68]	; (800132c <HAL_RCC_OscConfig+0x708>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <HAL_RCC_OscConfig+0x708>)
 80012ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ee:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012f0:	697a      	ldr	r2, [r7, #20]
 80012f2:	23c0      	movs	r3, #192	; 0xc0
 80012f4:	025b      	lsls	r3, r3, #9
 80012f6:	401a      	ands	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d10e      	bne.n	800131e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	220f      	movs	r2, #15
 8001304:	401a      	ands	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800130a:	429a      	cmp	r2, r3
 800130c:	d107      	bne.n	800131e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	23f0      	movs	r3, #240	; 0xf0
 8001312:	039b      	lsls	r3, r3, #14
 8001314:	401a      	ands	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800131a:	429a      	cmp	r2, r3
 800131c:	d001      	beq.n	8001322 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e000      	b.n	8001324 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001322:	2300      	movs	r3, #0
}
 8001324:	0018      	movs	r0, r3
 8001326:	46bd      	mov	sp, r7
 8001328:	b008      	add	sp, #32
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40021000 	.word	0x40021000

08001330 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e0bf      	b.n	80014c4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001344:	4b61      	ldr	r3, [pc, #388]	; (80014cc <HAL_RCC_ClockConfig+0x19c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2201      	movs	r2, #1
 800134a:	4013      	ands	r3, r2
 800134c:	683a      	ldr	r2, [r7, #0]
 800134e:	429a      	cmp	r2, r3
 8001350:	d911      	bls.n	8001376 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001352:	4b5e      	ldr	r3, [pc, #376]	; (80014cc <HAL_RCC_ClockConfig+0x19c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2201      	movs	r2, #1
 8001358:	4393      	bics	r3, r2
 800135a:	0019      	movs	r1, r3
 800135c:	4b5b      	ldr	r3, [pc, #364]	; (80014cc <HAL_RCC_ClockConfig+0x19c>)
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	430a      	orrs	r2, r1
 8001362:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001364:	4b59      	ldr	r3, [pc, #356]	; (80014cc <HAL_RCC_ClockConfig+0x19c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2201      	movs	r2, #1
 800136a:	4013      	ands	r3, r2
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	429a      	cmp	r2, r3
 8001370:	d001      	beq.n	8001376 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e0a6      	b.n	80014c4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2202      	movs	r2, #2
 800137c:	4013      	ands	r3, r2
 800137e:	d015      	beq.n	80013ac <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2204      	movs	r2, #4
 8001386:	4013      	ands	r3, r2
 8001388:	d006      	beq.n	8001398 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800138a:	4b51      	ldr	r3, [pc, #324]	; (80014d0 <HAL_RCC_ClockConfig+0x1a0>)
 800138c:	685a      	ldr	r2, [r3, #4]
 800138e:	4b50      	ldr	r3, [pc, #320]	; (80014d0 <HAL_RCC_ClockConfig+0x1a0>)
 8001390:	21e0      	movs	r1, #224	; 0xe0
 8001392:	00c9      	lsls	r1, r1, #3
 8001394:	430a      	orrs	r2, r1
 8001396:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001398:	4b4d      	ldr	r3, [pc, #308]	; (80014d0 <HAL_RCC_ClockConfig+0x1a0>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	22f0      	movs	r2, #240	; 0xf0
 800139e:	4393      	bics	r3, r2
 80013a0:	0019      	movs	r1, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	4b4a      	ldr	r3, [pc, #296]	; (80014d0 <HAL_RCC_ClockConfig+0x1a0>)
 80013a8:	430a      	orrs	r2, r1
 80013aa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2201      	movs	r2, #1
 80013b2:	4013      	ands	r3, r2
 80013b4:	d04c      	beq.n	8001450 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d107      	bne.n	80013ce <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013be:	4b44      	ldr	r3, [pc, #272]	; (80014d0 <HAL_RCC_ClockConfig+0x1a0>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	2380      	movs	r3, #128	; 0x80
 80013c4:	029b      	lsls	r3, r3, #10
 80013c6:	4013      	ands	r3, r2
 80013c8:	d120      	bne.n	800140c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e07a      	b.n	80014c4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d107      	bne.n	80013e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013d6:	4b3e      	ldr	r3, [pc, #248]	; (80014d0 <HAL_RCC_ClockConfig+0x1a0>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	2380      	movs	r3, #128	; 0x80
 80013dc:	049b      	lsls	r3, r3, #18
 80013de:	4013      	ands	r3, r2
 80013e0:	d114      	bne.n	800140c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e06e      	b.n	80014c4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d107      	bne.n	80013fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80013ee:	4b38      	ldr	r3, [pc, #224]	; (80014d0 <HAL_RCC_ClockConfig+0x1a0>)
 80013f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013f2:	2380      	movs	r3, #128	; 0x80
 80013f4:	029b      	lsls	r3, r3, #10
 80013f6:	4013      	ands	r3, r2
 80013f8:	d108      	bne.n	800140c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e062      	b.n	80014c4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013fe:	4b34      	ldr	r3, [pc, #208]	; (80014d0 <HAL_RCC_ClockConfig+0x1a0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2202      	movs	r2, #2
 8001404:	4013      	ands	r3, r2
 8001406:	d101      	bne.n	800140c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e05b      	b.n	80014c4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800140c:	4b30      	ldr	r3, [pc, #192]	; (80014d0 <HAL_RCC_ClockConfig+0x1a0>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2203      	movs	r2, #3
 8001412:	4393      	bics	r3, r2
 8001414:	0019      	movs	r1, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	4b2d      	ldr	r3, [pc, #180]	; (80014d0 <HAL_RCC_ClockConfig+0x1a0>)
 800141c:	430a      	orrs	r2, r1
 800141e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001420:	f7ff f992 	bl	8000748 <HAL_GetTick>
 8001424:	0003      	movs	r3, r0
 8001426:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001428:	e009      	b.n	800143e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800142a:	f7ff f98d 	bl	8000748 <HAL_GetTick>
 800142e:	0002      	movs	r2, r0
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	4a27      	ldr	r2, [pc, #156]	; (80014d4 <HAL_RCC_ClockConfig+0x1a4>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d901      	bls.n	800143e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e042      	b.n	80014c4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800143e:	4b24      	ldr	r3, [pc, #144]	; (80014d0 <HAL_RCC_ClockConfig+0x1a0>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	220c      	movs	r2, #12
 8001444:	401a      	ands	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	429a      	cmp	r2, r3
 800144e:	d1ec      	bne.n	800142a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001450:	4b1e      	ldr	r3, [pc, #120]	; (80014cc <HAL_RCC_ClockConfig+0x19c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2201      	movs	r2, #1
 8001456:	4013      	ands	r3, r2
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	429a      	cmp	r2, r3
 800145c:	d211      	bcs.n	8001482 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800145e:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <HAL_RCC_ClockConfig+0x19c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2201      	movs	r2, #1
 8001464:	4393      	bics	r3, r2
 8001466:	0019      	movs	r1, r3
 8001468:	4b18      	ldr	r3, [pc, #96]	; (80014cc <HAL_RCC_ClockConfig+0x19c>)
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	430a      	orrs	r2, r1
 800146e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001470:	4b16      	ldr	r3, [pc, #88]	; (80014cc <HAL_RCC_ClockConfig+0x19c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2201      	movs	r2, #1
 8001476:	4013      	ands	r3, r2
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	429a      	cmp	r2, r3
 800147c:	d001      	beq.n	8001482 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e020      	b.n	80014c4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2204      	movs	r2, #4
 8001488:	4013      	ands	r3, r2
 800148a:	d009      	beq.n	80014a0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800148c:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <HAL_RCC_ClockConfig+0x1a0>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	4a11      	ldr	r2, [pc, #68]	; (80014d8 <HAL_RCC_ClockConfig+0x1a8>)
 8001492:	4013      	ands	r3, r2
 8001494:	0019      	movs	r1, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	68da      	ldr	r2, [r3, #12]
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <HAL_RCC_ClockConfig+0x1a0>)
 800149c:	430a      	orrs	r2, r1
 800149e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80014a0:	f000 f820 	bl	80014e4 <HAL_RCC_GetSysClockFreq>
 80014a4:	0001      	movs	r1, r0
 80014a6:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <HAL_RCC_ClockConfig+0x1a0>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	091b      	lsrs	r3, r3, #4
 80014ac:	220f      	movs	r2, #15
 80014ae:	4013      	ands	r3, r2
 80014b0:	4a0a      	ldr	r2, [pc, #40]	; (80014dc <HAL_RCC_ClockConfig+0x1ac>)
 80014b2:	5cd3      	ldrb	r3, [r2, r3]
 80014b4:	000a      	movs	r2, r1
 80014b6:	40da      	lsrs	r2, r3
 80014b8:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <HAL_RCC_ClockConfig+0x1b0>)
 80014ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80014bc:	2003      	movs	r0, #3
 80014be:	f7ff f8fd 	bl	80006bc <HAL_InitTick>
  
  return HAL_OK;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	0018      	movs	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	b004      	add	sp, #16
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40022000 	.word	0x40022000
 80014d0:	40021000 	.word	0x40021000
 80014d4:	00001388 	.word	0x00001388
 80014d8:	fffff8ff 	.word	0xfffff8ff
 80014dc:	08001e74 	.word	0x08001e74
 80014e0:	20000000 	.word	0x20000000

080014e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	2300      	movs	r3, #0
 80014f4:	617b      	str	r3, [r7, #20]
 80014f6:	2300      	movs	r3, #0
 80014f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80014fe:	4b2d      	ldr	r3, [pc, #180]	; (80015b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	220c      	movs	r2, #12
 8001508:	4013      	ands	r3, r2
 800150a:	2b0c      	cmp	r3, #12
 800150c:	d046      	beq.n	800159c <HAL_RCC_GetSysClockFreq+0xb8>
 800150e:	d848      	bhi.n	80015a2 <HAL_RCC_GetSysClockFreq+0xbe>
 8001510:	2b04      	cmp	r3, #4
 8001512:	d002      	beq.n	800151a <HAL_RCC_GetSysClockFreq+0x36>
 8001514:	2b08      	cmp	r3, #8
 8001516:	d003      	beq.n	8001520 <HAL_RCC_GetSysClockFreq+0x3c>
 8001518:	e043      	b.n	80015a2 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800151a:	4b27      	ldr	r3, [pc, #156]	; (80015b8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800151c:	613b      	str	r3, [r7, #16]
      break;
 800151e:	e043      	b.n	80015a8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	0c9b      	lsrs	r3, r3, #18
 8001524:	220f      	movs	r2, #15
 8001526:	4013      	ands	r3, r2
 8001528:	4a24      	ldr	r2, [pc, #144]	; (80015bc <HAL_RCC_GetSysClockFreq+0xd8>)
 800152a:	5cd3      	ldrb	r3, [r2, r3]
 800152c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800152e:	4b21      	ldr	r3, [pc, #132]	; (80015b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001532:	220f      	movs	r2, #15
 8001534:	4013      	ands	r3, r2
 8001536:	4a22      	ldr	r2, [pc, #136]	; (80015c0 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001538:	5cd3      	ldrb	r3, [r2, r3]
 800153a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	23c0      	movs	r3, #192	; 0xc0
 8001540:	025b      	lsls	r3, r3, #9
 8001542:	401a      	ands	r2, r3
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	025b      	lsls	r3, r3, #9
 8001548:	429a      	cmp	r2, r3
 800154a:	d109      	bne.n	8001560 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800154c:	68b9      	ldr	r1, [r7, #8]
 800154e:	481a      	ldr	r0, [pc, #104]	; (80015b8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001550:	f7fe fdda 	bl	8000108 <__udivsi3>
 8001554:	0003      	movs	r3, r0
 8001556:	001a      	movs	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4353      	muls	r3, r2
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	e01a      	b.n	8001596 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	23c0      	movs	r3, #192	; 0xc0
 8001564:	025b      	lsls	r3, r3, #9
 8001566:	401a      	ands	r2, r3
 8001568:	23c0      	movs	r3, #192	; 0xc0
 800156a:	025b      	lsls	r3, r3, #9
 800156c:	429a      	cmp	r2, r3
 800156e:	d109      	bne.n	8001584 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001570:	68b9      	ldr	r1, [r7, #8]
 8001572:	4814      	ldr	r0, [pc, #80]	; (80015c4 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001574:	f7fe fdc8 	bl	8000108 <__udivsi3>
 8001578:	0003      	movs	r3, r0
 800157a:	001a      	movs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4353      	muls	r3, r2
 8001580:	617b      	str	r3, [r7, #20]
 8001582:	e008      	b.n	8001596 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001584:	68b9      	ldr	r1, [r7, #8]
 8001586:	480c      	ldr	r0, [pc, #48]	; (80015b8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001588:	f7fe fdbe 	bl	8000108 <__udivsi3>
 800158c:	0003      	movs	r3, r0
 800158e:	001a      	movs	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4353      	muls	r3, r2
 8001594:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	613b      	str	r3, [r7, #16]
      break;
 800159a:	e005      	b.n	80015a8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800159c:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <HAL_RCC_GetSysClockFreq+0xe0>)
 800159e:	613b      	str	r3, [r7, #16]
      break;
 80015a0:	e002      	b.n	80015a8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015a2:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <HAL_RCC_GetSysClockFreq+0xd4>)
 80015a4:	613b      	str	r3, [r7, #16]
      break;
 80015a6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80015a8:	693b      	ldr	r3, [r7, #16]
}
 80015aa:	0018      	movs	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	b006      	add	sp, #24
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	40021000 	.word	0x40021000
 80015b8:	007a1200 	.word	0x007a1200
 80015bc:	08001e84 	.word	0x08001e84
 80015c0:	08001e94 	.word	0x08001e94
 80015c4:	02dc6c00 	.word	0x02dc6c00

080015c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e042      	b.n	8001660 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	223d      	movs	r2, #61	; 0x3d
 80015de:	5c9b      	ldrb	r3, [r3, r2]
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d107      	bne.n	80015f6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	223c      	movs	r2, #60	; 0x3c
 80015ea:	2100      	movs	r1, #0
 80015ec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	0018      	movs	r0, r3
 80015f2:	f7fe ffbd 	bl	8000570 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	223d      	movs	r2, #61	; 0x3d
 80015fa:	2102      	movs	r1, #2
 80015fc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	3304      	adds	r3, #4
 8001606:	0019      	movs	r1, r3
 8001608:	0010      	movs	r0, r2
 800160a:	f000 fa83 	bl	8001b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2246      	movs	r2, #70	; 0x46
 8001612:	2101      	movs	r1, #1
 8001614:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	223e      	movs	r2, #62	; 0x3e
 800161a:	2101      	movs	r1, #1
 800161c:	5499      	strb	r1, [r3, r2]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	223f      	movs	r2, #63	; 0x3f
 8001622:	2101      	movs	r1, #1
 8001624:	5499      	strb	r1, [r3, r2]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2240      	movs	r2, #64	; 0x40
 800162a:	2101      	movs	r1, #1
 800162c:	5499      	strb	r1, [r3, r2]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2241      	movs	r2, #65	; 0x41
 8001632:	2101      	movs	r1, #1
 8001634:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2242      	movs	r2, #66	; 0x42
 800163a:	2101      	movs	r1, #1
 800163c:	5499      	strb	r1, [r3, r2]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2243      	movs	r2, #67	; 0x43
 8001642:	2101      	movs	r1, #1
 8001644:	5499      	strb	r1, [r3, r2]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2244      	movs	r2, #68	; 0x44
 800164a:	2101      	movs	r1, #1
 800164c:	5499      	strb	r1, [r3, r2]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2245      	movs	r2, #69	; 0x45
 8001652:	2101      	movs	r1, #1
 8001654:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	223d      	movs	r2, #61	; 0x3d
 800165a:	2101      	movs	r1, #1
 800165c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	0018      	movs	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	b002      	add	sp, #8
 8001666:	bd80      	pop	{r7, pc}

08001668 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	223d      	movs	r2, #61	; 0x3d
 8001674:	5c9b      	ldrb	r3, [r3, r2]
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b01      	cmp	r3, #1
 800167a:	d001      	beq.n	8001680 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e036      	b.n	80016ee <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	223d      	movs	r2, #61	; 0x3d
 8001684:	2102      	movs	r1, #2
 8001686:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	68da      	ldr	r2, [r3, #12]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2101      	movs	r1, #1
 8001694:	430a      	orrs	r2, r1
 8001696:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a16      	ldr	r2, [pc, #88]	; (80016f8 <HAL_TIM_Base_Start_IT+0x90>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d00a      	beq.n	80016b8 <HAL_TIM_Base_Start_IT+0x50>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	2380      	movs	r3, #128	; 0x80
 80016a8:	05db      	lsls	r3, r3, #23
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d004      	beq.n	80016b8 <HAL_TIM_Base_Start_IT+0x50>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a12      	ldr	r2, [pc, #72]	; (80016fc <HAL_TIM_Base_Start_IT+0x94>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d111      	bne.n	80016dc <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	2207      	movs	r2, #7
 80016c0:	4013      	ands	r3, r2
 80016c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2b06      	cmp	r3, #6
 80016c8:	d010      	beq.n	80016ec <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2101      	movs	r1, #1
 80016d6:	430a      	orrs	r2, r1
 80016d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016da:	e007      	b.n	80016ec <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2101      	movs	r1, #1
 80016e8:	430a      	orrs	r2, r1
 80016ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	0018      	movs	r0, r3
 80016f0:	46bd      	mov	sp, r7
 80016f2:	b004      	add	sp, #16
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	40012c00 	.word	0x40012c00
 80016fc:	40000400 	.word	0x40000400

08001700 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	2202      	movs	r2, #2
 8001710:	4013      	ands	r3, r2
 8001712:	2b02      	cmp	r3, #2
 8001714:	d124      	bne.n	8001760 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	2202      	movs	r2, #2
 800171e:	4013      	ands	r3, r2
 8001720:	2b02      	cmp	r3, #2
 8001722:	d11d      	bne.n	8001760 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2203      	movs	r2, #3
 800172a:	4252      	negs	r2, r2
 800172c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2201      	movs	r2, #1
 8001732:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	2203      	movs	r2, #3
 800173c:	4013      	ands	r3, r2
 800173e:	d004      	beq.n	800174a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	0018      	movs	r0, r3
 8001744:	f000 f9ce 	bl	8001ae4 <HAL_TIM_IC_CaptureCallback>
 8001748:	e007      	b.n	800175a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	0018      	movs	r0, r3
 800174e:	f000 f9c1 	bl	8001ad4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	0018      	movs	r0, r3
 8001756:	f000 f9cd 	bl	8001af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	2204      	movs	r2, #4
 8001768:	4013      	ands	r3, r2
 800176a:	2b04      	cmp	r3, #4
 800176c:	d125      	bne.n	80017ba <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	2204      	movs	r2, #4
 8001776:	4013      	ands	r3, r2
 8001778:	2b04      	cmp	r3, #4
 800177a:	d11e      	bne.n	80017ba <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2205      	movs	r2, #5
 8001782:	4252      	negs	r2, r2
 8001784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2202      	movs	r2, #2
 800178a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	699a      	ldr	r2, [r3, #24]
 8001792:	23c0      	movs	r3, #192	; 0xc0
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4013      	ands	r3, r2
 8001798:	d004      	beq.n	80017a4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	0018      	movs	r0, r3
 800179e:	f000 f9a1 	bl	8001ae4 <HAL_TIM_IC_CaptureCallback>
 80017a2:	e007      	b.n	80017b4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	0018      	movs	r0, r3
 80017a8:	f000 f994 	bl	8001ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	0018      	movs	r0, r3
 80017b0:	f000 f9a0 	bl	8001af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	2208      	movs	r2, #8
 80017c2:	4013      	ands	r3, r2
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d124      	bne.n	8001812 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	2208      	movs	r2, #8
 80017d0:	4013      	ands	r3, r2
 80017d2:	2b08      	cmp	r3, #8
 80017d4:	d11d      	bne.n	8001812 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2209      	movs	r2, #9
 80017dc:	4252      	negs	r2, r2
 80017de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2204      	movs	r2, #4
 80017e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	69db      	ldr	r3, [r3, #28]
 80017ec:	2203      	movs	r2, #3
 80017ee:	4013      	ands	r3, r2
 80017f0:	d004      	beq.n	80017fc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	0018      	movs	r0, r3
 80017f6:	f000 f975 	bl	8001ae4 <HAL_TIM_IC_CaptureCallback>
 80017fa:	e007      	b.n	800180c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	0018      	movs	r0, r3
 8001800:	f000 f968 	bl	8001ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	0018      	movs	r0, r3
 8001808:	f000 f974 	bl	8001af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	2210      	movs	r2, #16
 800181a:	4013      	ands	r3, r2
 800181c:	2b10      	cmp	r3, #16
 800181e:	d125      	bne.n	800186c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	2210      	movs	r2, #16
 8001828:	4013      	ands	r3, r2
 800182a:	2b10      	cmp	r3, #16
 800182c:	d11e      	bne.n	800186c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2211      	movs	r2, #17
 8001834:	4252      	negs	r2, r2
 8001836:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2208      	movs	r2, #8
 800183c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	69da      	ldr	r2, [r3, #28]
 8001844:	23c0      	movs	r3, #192	; 0xc0
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4013      	ands	r3, r2
 800184a:	d004      	beq.n	8001856 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	0018      	movs	r0, r3
 8001850:	f000 f948 	bl	8001ae4 <HAL_TIM_IC_CaptureCallback>
 8001854:	e007      	b.n	8001866 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	0018      	movs	r0, r3
 800185a:	f000 f93b 	bl	8001ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	0018      	movs	r0, r3
 8001862:	f000 f947 	bl	8001af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	2201      	movs	r2, #1
 8001874:	4013      	ands	r3, r2
 8001876:	2b01      	cmp	r3, #1
 8001878:	d10f      	bne.n	800189a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	2201      	movs	r2, #1
 8001882:	4013      	ands	r3, r2
 8001884:	2b01      	cmp	r3, #1
 8001886:	d108      	bne.n	800189a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2202      	movs	r2, #2
 800188e:	4252      	negs	r2, r2
 8001890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	0018      	movs	r0, r3
 8001896:	f7fe fde3 	bl	8000460 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	2280      	movs	r2, #128	; 0x80
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b80      	cmp	r3, #128	; 0x80
 80018a6:	d10f      	bne.n	80018c8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	2280      	movs	r2, #128	; 0x80
 80018b0:	4013      	ands	r3, r2
 80018b2:	2b80      	cmp	r3, #128	; 0x80
 80018b4:	d108      	bne.n	80018c8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2281      	movs	r2, #129	; 0x81
 80018bc:	4252      	negs	r2, r2
 80018be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	0018      	movs	r0, r3
 80018c4:	f000 fa96 	bl	8001df4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	2240      	movs	r2, #64	; 0x40
 80018d0:	4013      	ands	r3, r2
 80018d2:	2b40      	cmp	r3, #64	; 0x40
 80018d4:	d10f      	bne.n	80018f6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	2240      	movs	r2, #64	; 0x40
 80018de:	4013      	ands	r3, r2
 80018e0:	2b40      	cmp	r3, #64	; 0x40
 80018e2:	d108      	bne.n	80018f6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2241      	movs	r2, #65	; 0x41
 80018ea:	4252      	negs	r2, r2
 80018ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	0018      	movs	r0, r3
 80018f2:	f000 f907 	bl	8001b04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	2220      	movs	r2, #32
 80018fe:	4013      	ands	r3, r2
 8001900:	2b20      	cmp	r3, #32
 8001902:	d10f      	bne.n	8001924 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	2220      	movs	r2, #32
 800190c:	4013      	ands	r3, r2
 800190e:	2b20      	cmp	r3, #32
 8001910:	d108      	bne.n	8001924 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2221      	movs	r2, #33	; 0x21
 8001918:	4252      	negs	r2, r2
 800191a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	0018      	movs	r0, r3
 8001920:	f000 fa60 	bl	8001de4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001924:	46c0      	nop			; (mov r8, r8)
 8001926:	46bd      	mov	sp, r7
 8001928:	b002      	add	sp, #8
 800192a:	bd80      	pop	{r7, pc}

0800192c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001936:	230f      	movs	r3, #15
 8001938:	18fb      	adds	r3, r7, r3
 800193a:	2200      	movs	r2, #0
 800193c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	223c      	movs	r2, #60	; 0x3c
 8001942:	5c9b      	ldrb	r3, [r3, r2]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d101      	bne.n	800194c <HAL_TIM_ConfigClockSource+0x20>
 8001948:	2302      	movs	r3, #2
 800194a:	e0bc      	b.n	8001ac6 <HAL_TIM_ConfigClockSource+0x19a>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	223c      	movs	r2, #60	; 0x3c
 8001950:	2101      	movs	r1, #1
 8001952:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	223d      	movs	r2, #61	; 0x3d
 8001958:	2102      	movs	r1, #2
 800195a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	2277      	movs	r2, #119	; 0x77
 8001968:	4393      	bics	r3, r2
 800196a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	4a58      	ldr	r2, [pc, #352]	; (8001ad0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001970:	4013      	ands	r3, r2
 8001972:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	68ba      	ldr	r2, [r7, #8]
 800197a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2280      	movs	r2, #128	; 0x80
 8001982:	0192      	lsls	r2, r2, #6
 8001984:	4293      	cmp	r3, r2
 8001986:	d040      	beq.n	8001a0a <HAL_TIM_ConfigClockSource+0xde>
 8001988:	2280      	movs	r2, #128	; 0x80
 800198a:	0192      	lsls	r2, r2, #6
 800198c:	4293      	cmp	r3, r2
 800198e:	d900      	bls.n	8001992 <HAL_TIM_ConfigClockSource+0x66>
 8001990:	e088      	b.n	8001aa4 <HAL_TIM_ConfigClockSource+0x178>
 8001992:	2280      	movs	r2, #128	; 0x80
 8001994:	0152      	lsls	r2, r2, #5
 8001996:	4293      	cmp	r3, r2
 8001998:	d100      	bne.n	800199c <HAL_TIM_ConfigClockSource+0x70>
 800199a:	e088      	b.n	8001aae <HAL_TIM_ConfigClockSource+0x182>
 800199c:	2280      	movs	r2, #128	; 0x80
 800199e:	0152      	lsls	r2, r2, #5
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d900      	bls.n	80019a6 <HAL_TIM_ConfigClockSource+0x7a>
 80019a4:	e07e      	b.n	8001aa4 <HAL_TIM_ConfigClockSource+0x178>
 80019a6:	2b70      	cmp	r3, #112	; 0x70
 80019a8:	d018      	beq.n	80019dc <HAL_TIM_ConfigClockSource+0xb0>
 80019aa:	d900      	bls.n	80019ae <HAL_TIM_ConfigClockSource+0x82>
 80019ac:	e07a      	b.n	8001aa4 <HAL_TIM_ConfigClockSource+0x178>
 80019ae:	2b60      	cmp	r3, #96	; 0x60
 80019b0:	d04f      	beq.n	8001a52 <HAL_TIM_ConfigClockSource+0x126>
 80019b2:	d900      	bls.n	80019b6 <HAL_TIM_ConfigClockSource+0x8a>
 80019b4:	e076      	b.n	8001aa4 <HAL_TIM_ConfigClockSource+0x178>
 80019b6:	2b50      	cmp	r3, #80	; 0x50
 80019b8:	d03b      	beq.n	8001a32 <HAL_TIM_ConfigClockSource+0x106>
 80019ba:	d900      	bls.n	80019be <HAL_TIM_ConfigClockSource+0x92>
 80019bc:	e072      	b.n	8001aa4 <HAL_TIM_ConfigClockSource+0x178>
 80019be:	2b40      	cmp	r3, #64	; 0x40
 80019c0:	d057      	beq.n	8001a72 <HAL_TIM_ConfigClockSource+0x146>
 80019c2:	d900      	bls.n	80019c6 <HAL_TIM_ConfigClockSource+0x9a>
 80019c4:	e06e      	b.n	8001aa4 <HAL_TIM_ConfigClockSource+0x178>
 80019c6:	2b30      	cmp	r3, #48	; 0x30
 80019c8:	d063      	beq.n	8001a92 <HAL_TIM_ConfigClockSource+0x166>
 80019ca:	d86b      	bhi.n	8001aa4 <HAL_TIM_ConfigClockSource+0x178>
 80019cc:	2b20      	cmp	r3, #32
 80019ce:	d060      	beq.n	8001a92 <HAL_TIM_ConfigClockSource+0x166>
 80019d0:	d868      	bhi.n	8001aa4 <HAL_TIM_ConfigClockSource+0x178>
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d05d      	beq.n	8001a92 <HAL_TIM_ConfigClockSource+0x166>
 80019d6:	2b10      	cmp	r3, #16
 80019d8:	d05b      	beq.n	8001a92 <HAL_TIM_ConfigClockSource+0x166>
 80019da:	e063      	b.n	8001aa4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6818      	ldr	r0, [r3, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	6899      	ldr	r1, [r3, #8]
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	f000 f982 	bl	8001cf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	2277      	movs	r2, #119	; 0x77
 80019fc:	4313      	orrs	r3, r2
 80019fe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68ba      	ldr	r2, [r7, #8]
 8001a06:	609a      	str	r2, [r3, #8]
      break;
 8001a08:	e052      	b.n	8001ab0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6818      	ldr	r0, [r3, #0]
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	6899      	ldr	r1, [r3, #8]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	f000 f96b 	bl	8001cf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2180      	movs	r1, #128	; 0x80
 8001a2a:	01c9      	lsls	r1, r1, #7
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	609a      	str	r2, [r3, #8]
      break;
 8001a30:	e03e      	b.n	8001ab0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6818      	ldr	r0, [r3, #0]
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	6859      	ldr	r1, [r3, #4]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	001a      	movs	r2, r3
 8001a40:	f000 f8de 	bl	8001c00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2150      	movs	r1, #80	; 0x50
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	f000 f938 	bl	8001cc0 <TIM_ITRx_SetConfig>
      break;
 8001a50:	e02e      	b.n	8001ab0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6818      	ldr	r0, [r3, #0]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	6859      	ldr	r1, [r3, #4]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	001a      	movs	r2, r3
 8001a60:	f000 f8fc 	bl	8001c5c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2160      	movs	r1, #96	; 0x60
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	f000 f928 	bl	8001cc0 <TIM_ITRx_SetConfig>
      break;
 8001a70:	e01e      	b.n	8001ab0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6818      	ldr	r0, [r3, #0]
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	6859      	ldr	r1, [r3, #4]
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	001a      	movs	r2, r3
 8001a80:	f000 f8be 	bl	8001c00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2140      	movs	r1, #64	; 0x40
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	f000 f918 	bl	8001cc0 <TIM_ITRx_SetConfig>
      break;
 8001a90:	e00e      	b.n	8001ab0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	0019      	movs	r1, r3
 8001a9c:	0010      	movs	r0, r2
 8001a9e:	f000 f90f 	bl	8001cc0 <TIM_ITRx_SetConfig>
      break;
 8001aa2:	e005      	b.n	8001ab0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001aa4:	230f      	movs	r3, #15
 8001aa6:	18fb      	adds	r3, r7, r3
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	701a      	strb	r2, [r3, #0]
      break;
 8001aac:	e000      	b.n	8001ab0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001aae:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	223d      	movs	r2, #61	; 0x3d
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	223c      	movs	r2, #60	; 0x3c
 8001abc:	2100      	movs	r1, #0
 8001abe:	5499      	strb	r1, [r3, r2]

  return status;
 8001ac0:	230f      	movs	r3, #15
 8001ac2:	18fb      	adds	r3, r7, r3
 8001ac4:	781b      	ldrb	r3, [r3, #0]
}
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	b004      	add	sp, #16
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	ffff00ff 	.word	0xffff00ff

08001ad4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001adc:	46c0      	nop			; (mov r8, r8)
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	b002      	add	sp, #8
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001aec:	46c0      	nop			; (mov r8, r8)
 8001aee:	46bd      	mov	sp, r7
 8001af0:	b002      	add	sp, #8
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001afc:	46c0      	nop			; (mov r8, r8)
 8001afe:	46bd      	mov	sp, r7
 8001b00:	b002      	add	sp, #8
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b0c:	46c0      	nop			; (mov r8, r8)
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	b002      	add	sp, #8
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a30      	ldr	r2, [pc, #192]	; (8001be8 <TIM_Base_SetConfig+0xd4>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d008      	beq.n	8001b3e <TIM_Base_SetConfig+0x2a>
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	2380      	movs	r3, #128	; 0x80
 8001b30:	05db      	lsls	r3, r3, #23
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d003      	beq.n	8001b3e <TIM_Base_SetConfig+0x2a>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a2c      	ldr	r2, [pc, #176]	; (8001bec <TIM_Base_SetConfig+0xd8>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d108      	bne.n	8001b50 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2270      	movs	r2, #112	; 0x70
 8001b42:	4393      	bics	r3, r2
 8001b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a25      	ldr	r2, [pc, #148]	; (8001be8 <TIM_Base_SetConfig+0xd4>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d014      	beq.n	8001b82 <TIM_Base_SetConfig+0x6e>
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	2380      	movs	r3, #128	; 0x80
 8001b5c:	05db      	lsls	r3, r3, #23
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d00f      	beq.n	8001b82 <TIM_Base_SetConfig+0x6e>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a21      	ldr	r2, [pc, #132]	; (8001bec <TIM_Base_SetConfig+0xd8>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d00b      	beq.n	8001b82 <TIM_Base_SetConfig+0x6e>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a20      	ldr	r2, [pc, #128]	; (8001bf0 <TIM_Base_SetConfig+0xdc>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d007      	beq.n	8001b82 <TIM_Base_SetConfig+0x6e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a1f      	ldr	r2, [pc, #124]	; (8001bf4 <TIM_Base_SetConfig+0xe0>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d003      	beq.n	8001b82 <TIM_Base_SetConfig+0x6e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a1e      	ldr	r2, [pc, #120]	; (8001bf8 <TIM_Base_SetConfig+0xe4>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d108      	bne.n	8001b94 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	4a1d      	ldr	r2, [pc, #116]	; (8001bfc <TIM_Base_SetConfig+0xe8>)
 8001b86:	4013      	ands	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2280      	movs	r2, #128	; 0x80
 8001b98:	4393      	bics	r3, r2
 8001b9a:	001a      	movs	r2, r3
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <TIM_Base_SetConfig+0xd4>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d007      	beq.n	8001bd2 <TIM_Base_SetConfig+0xbe>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a0b      	ldr	r2, [pc, #44]	; (8001bf4 <TIM_Base_SetConfig+0xe0>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d003      	beq.n	8001bd2 <TIM_Base_SetConfig+0xbe>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <TIM_Base_SetConfig+0xe4>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d103      	bne.n	8001bda <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	691a      	ldr	r2, [r3, #16]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	615a      	str	r2, [r3, #20]
}
 8001be0:	46c0      	nop			; (mov r8, r8)
 8001be2:	46bd      	mov	sp, r7
 8001be4:	b004      	add	sp, #16
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40012c00 	.word	0x40012c00
 8001bec:	40000400 	.word	0x40000400
 8001bf0:	40002000 	.word	0x40002000
 8001bf4:	40014400 	.word	0x40014400
 8001bf8:	40014800 	.word	0x40014800
 8001bfc:	fffffcff 	.word	0xfffffcff

08001c00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	2201      	movs	r2, #1
 8001c18:	4393      	bics	r3, r2
 8001c1a:	001a      	movs	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	22f0      	movs	r2, #240	; 0xf0
 8001c2a:	4393      	bics	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	011b      	lsls	r3, r3, #4
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	220a      	movs	r2, #10
 8001c3c:	4393      	bics	r3, r2
 8001c3e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	621a      	str	r2, [r3, #32]
}
 8001c54:	46c0      	nop			; (mov r8, r8)
 8001c56:	46bd      	mov	sp, r7
 8001c58:	b006      	add	sp, #24
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	2210      	movs	r2, #16
 8001c6e:	4393      	bics	r3, r2
 8001c70:	001a      	movs	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	4a0d      	ldr	r2, [pc, #52]	; (8001cbc <TIM_TI2_ConfigInputStage+0x60>)
 8001c86:	4013      	ands	r3, r2
 8001c88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	031b      	lsls	r3, r3, #12
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	22a0      	movs	r2, #160	; 0xa0
 8001c98:	4393      	bics	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	011b      	lsls	r3, r3, #4
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	621a      	str	r2, [r3, #32]
}
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	b006      	add	sp, #24
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	46c0      	nop			; (mov r8, r8)
 8001cbc:	ffff0fff 	.word	0xffff0fff

08001cc0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2270      	movs	r2, #112	; 0x70
 8001cd4:	4393      	bics	r3, r2
 8001cd6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	2207      	movs	r2, #7
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	609a      	str	r2, [r3, #8]
}
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	46bd      	mov	sp, r7
 8001cee:	b004      	add	sp, #16
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
 8001d00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	4a09      	ldr	r2, [pc, #36]	; (8001d30 <TIM_ETR_SetConfig+0x3c>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	021a      	lsls	r2, r3, #8
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	431a      	orrs	r2, r3
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	609a      	str	r2, [r3, #8]
}
 8001d28:	46c0      	nop			; (mov r8, r8)
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	b006      	add	sp, #24
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	ffff00ff 	.word	0xffff00ff

08001d34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	223c      	movs	r2, #60	; 0x3c
 8001d42:	5c9b      	ldrb	r3, [r3, r2]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e042      	b.n	8001dd2 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	223c      	movs	r2, #60	; 0x3c
 8001d50:	2101      	movs	r1, #1
 8001d52:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	223d      	movs	r2, #61	; 0x3d
 8001d58:	2102      	movs	r1, #2
 8001d5a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2270      	movs	r2, #112	; 0x70
 8001d70:	4393      	bics	r3, r2
 8001d72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a14      	ldr	r2, [pc, #80]	; (8001ddc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d00a      	beq.n	8001da6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	05db      	lsls	r3, r3, #23
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d004      	beq.n	8001da6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a0f      	ldr	r2, [pc, #60]	; (8001de0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d10c      	bne.n	8001dc0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	2280      	movs	r2, #128	; 0x80
 8001daa:	4393      	bics	r3, r2
 8001dac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68ba      	ldr	r2, [r7, #8]
 8001dbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	223d      	movs	r2, #61	; 0x3d
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	223c      	movs	r2, #60	; 0x3c
 8001dcc:	2100      	movs	r1, #0
 8001dce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	b004      	add	sp, #16
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	40012c00 	.word	0x40012c00
 8001de0:	40000400 	.word	0x40000400

08001de4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001dec:	46c0      	nop			; (mov r8, r8)
 8001dee:	46bd      	mov	sp, r7
 8001df0:	b002      	add	sp, #8
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001dfc:	46c0      	nop			; (mov r8, r8)
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	b002      	add	sp, #8
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <__libc_init_array>:
 8001e04:	b570      	push	{r4, r5, r6, lr}
 8001e06:	2600      	movs	r6, #0
 8001e08:	4d0c      	ldr	r5, [pc, #48]	; (8001e3c <__libc_init_array+0x38>)
 8001e0a:	4c0d      	ldr	r4, [pc, #52]	; (8001e40 <__libc_init_array+0x3c>)
 8001e0c:	1b64      	subs	r4, r4, r5
 8001e0e:	10a4      	asrs	r4, r4, #2
 8001e10:	42a6      	cmp	r6, r4
 8001e12:	d109      	bne.n	8001e28 <__libc_init_array+0x24>
 8001e14:	2600      	movs	r6, #0
 8001e16:	f000 f821 	bl	8001e5c <_init>
 8001e1a:	4d0a      	ldr	r5, [pc, #40]	; (8001e44 <__libc_init_array+0x40>)
 8001e1c:	4c0a      	ldr	r4, [pc, #40]	; (8001e48 <__libc_init_array+0x44>)
 8001e1e:	1b64      	subs	r4, r4, r5
 8001e20:	10a4      	asrs	r4, r4, #2
 8001e22:	42a6      	cmp	r6, r4
 8001e24:	d105      	bne.n	8001e32 <__libc_init_array+0x2e>
 8001e26:	bd70      	pop	{r4, r5, r6, pc}
 8001e28:	00b3      	lsls	r3, r6, #2
 8001e2a:	58eb      	ldr	r3, [r5, r3]
 8001e2c:	4798      	blx	r3
 8001e2e:	3601      	adds	r6, #1
 8001e30:	e7ee      	b.n	8001e10 <__libc_init_array+0xc>
 8001e32:	00b3      	lsls	r3, r6, #2
 8001e34:	58eb      	ldr	r3, [r5, r3]
 8001e36:	4798      	blx	r3
 8001e38:	3601      	adds	r6, #1
 8001e3a:	e7f2      	b.n	8001e22 <__libc_init_array+0x1e>
 8001e3c:	08001ea4 	.word	0x08001ea4
 8001e40:	08001ea4 	.word	0x08001ea4
 8001e44:	08001ea4 	.word	0x08001ea4
 8001e48:	08001ea8 	.word	0x08001ea8

08001e4c <memset>:
 8001e4c:	0003      	movs	r3, r0
 8001e4e:	1882      	adds	r2, r0, r2
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d100      	bne.n	8001e56 <memset+0xa>
 8001e54:	4770      	bx	lr
 8001e56:	7019      	strb	r1, [r3, #0]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	e7f9      	b.n	8001e50 <memset+0x4>

08001e5c <_init>:
 8001e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e5e:	46c0      	nop			; (mov r8, r8)
 8001e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e62:	bc08      	pop	{r3}
 8001e64:	469e      	mov	lr, r3
 8001e66:	4770      	bx	lr

08001e68 <_fini>:
 8001e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e6e:	bc08      	pop	{r3}
 8001e70:	469e      	mov	lr, r3
 8001e72:	4770      	bx	lr
