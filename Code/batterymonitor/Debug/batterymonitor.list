
batterymonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004470  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08004530  08004530  00014530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046d4  080046d4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080046d4  080046d4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046d4  080046d4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046d4  080046d4  000146d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046d8  080046d8  000146d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080046dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000074  08004750  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08004750  000202cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b5f8  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ad7  00000000  00000000  0002b6d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a18  00000000  00000000  0002d1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007d8  00000000  00000000  0002dbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019392  00000000  00000000  0002e3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d8a4  00000000  00000000  00047732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cf30  00000000  00000000  00054fd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b00  00000000  00000000  000e1f08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  000e4a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004518 	.word	0x08004518

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08004518 	.word	0x08004518

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800023c:	2301      	movs	r3, #1
 800023e:	425b      	negs	r3, r3
 8000240:	1d39      	adds	r1, r7, #4
 8000242:	4804      	ldr	r0, [pc, #16]	; (8000254 <__io_putchar+0x20>)
 8000244:	2201      	movs	r2, #1
 8000246:	f002 fd7b 	bl	8002d40 <HAL_UART_Transmit>
  return ch;
 800024a:	687b      	ldr	r3, [r7, #4]
}
 800024c:	0018      	movs	r0, r3
 800024e:	46bd      	mov	sp, r7
 8000250:	b002      	add	sp, #8
 8000252:	bd80      	pop	{r7, pc}
 8000254:	200000e4 	.word	0x200000e4

08000258 <BQ27441_i2cWriteBytes>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
HAL_StatusTypeDef BQ27441_i2cWriteBytes(uint16_t memAddress, uint8_t *pData, uint16_t Size) {
 8000258:	b580      	push	{r7, lr}
 800025a:	b086      	sub	sp, #24
 800025c:	af04      	add	r7, sp, #16
 800025e:	6039      	str	r1, [r7, #0]
 8000260:	0011      	movs	r1, r2
 8000262:	1dbb      	adds	r3, r7, #6
 8000264:	1c02      	adds	r2, r0, #0
 8000266:	801a      	strh	r2, [r3, #0]
 8000268:	1d3b      	adds	r3, r7, #4
 800026a:	1c0a      	adds	r2, r1, #0
 800026c:	801a      	strh	r2, [r3, #0]
    return HAL_I2C_Mem_Write(&hi2c1, BQ27441_I2C_ADDRESS << 1, memAddress, I2C_MEMADD_SIZE_8BIT, pData, Size, HAL_MAX_DELAY);
 800026e:	1dbb      	adds	r3, r7, #6
 8000270:	881a      	ldrh	r2, [r3, #0]
 8000272:	4809      	ldr	r0, [pc, #36]	; (8000298 <BQ27441_i2cWriteBytes+0x40>)
 8000274:	2301      	movs	r3, #1
 8000276:	425b      	negs	r3, r3
 8000278:	9302      	str	r3, [sp, #8]
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	881b      	ldrh	r3, [r3, #0]
 800027e:	9301      	str	r3, [sp, #4]
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	9300      	str	r3, [sp, #0]
 8000284:	2301      	movs	r3, #1
 8000286:	21aa      	movs	r1, #170	; 0xaa
 8000288:	f001 f8b0 	bl	80013ec <HAL_I2C_Mem_Write>
 800028c:	0003      	movs	r3, r0
}
 800028e:	0018      	movs	r0, r3
 8000290:	46bd      	mov	sp, r7
 8000292:	b002      	add	sp, #8
 8000294:	bd80      	pop	{r7, pc}
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	20000090 	.word	0x20000090

0800029c <BQ27441_i2cReadBytes>:
HAL_StatusTypeDef BQ27441_i2cReadBytes(uint16_t memAddress, uint8_t *pData, uint16_t Size) {
 800029c:	b580      	push	{r7, lr}
 800029e:	b086      	sub	sp, #24
 80002a0:	af04      	add	r7, sp, #16
 80002a2:	6039      	str	r1, [r7, #0]
 80002a4:	0011      	movs	r1, r2
 80002a6:	1dbb      	adds	r3, r7, #6
 80002a8:	1c02      	adds	r2, r0, #0
 80002aa:	801a      	strh	r2, [r3, #0]
 80002ac:	1d3b      	adds	r3, r7, #4
 80002ae:	1c0a      	adds	r2, r1, #0
 80002b0:	801a      	strh	r2, [r3, #0]
    return HAL_I2C_Mem_Read(&hi2c1, BQ27441_I2C_ADDRESS << 1, memAddress, I2C_MEMADD_SIZE_8BIT, pData, Size, HAL_MAX_DELAY);
 80002b2:	1dbb      	adds	r3, r7, #6
 80002b4:	881a      	ldrh	r2, [r3, #0]
 80002b6:	4809      	ldr	r0, [pc, #36]	; (80002dc <BQ27441_i2cReadBytes+0x40>)
 80002b8:	2301      	movs	r3, #1
 80002ba:	425b      	negs	r3, r3
 80002bc:	9302      	str	r3, [sp, #8]
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	881b      	ldrh	r3, [r3, #0]
 80002c2:	9301      	str	r3, [sp, #4]
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	9300      	str	r3, [sp, #0]
 80002c8:	2301      	movs	r3, #1
 80002ca:	21aa      	movs	r1, #170	; 0xaa
 80002cc:	f001 f9bc 	bl	8001648 <HAL_I2C_Mem_Read>
 80002d0:	0003      	movs	r3, r0
}
 80002d2:	0018      	movs	r0, r3
 80002d4:	46bd      	mov	sp, r7
 80002d6:	b002      	add	sp, #8
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	46c0      	nop			; (mov r8, r8)
 80002dc:	20000090 	.word	0x20000090

080002e0 <BQ27441_readWord>:
uint16_t BQ27441_readWord(uint16_t subAddress) {
 80002e0:	b590      	push	{r4, r7, lr}
 80002e2:	b085      	sub	sp, #20
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	0002      	movs	r2, r0
 80002e8:	1dbb      	adds	r3, r7, #6
 80002ea:	801a      	strh	r2, [r3, #0]
    uint8_t data[2];
    BQ27441_i2cReadBytes(subAddress, data, 2);
 80002ec:	240c      	movs	r4, #12
 80002ee:	1939      	adds	r1, r7, r4
 80002f0:	1dbb      	adds	r3, r7, #6
 80002f2:	881b      	ldrh	r3, [r3, #0]
 80002f4:	2202      	movs	r2, #2
 80002f6:	0018      	movs	r0, r3
 80002f8:	f7ff ffd0 	bl	800029c <BQ27441_i2cReadBytes>
    return ((uint16_t) data[1] << 8) | data[0];
 80002fc:	0021      	movs	r1, r4
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	785b      	ldrb	r3, [r3, #1]
 8000302:	021b      	lsls	r3, r3, #8
 8000304:	b21a      	sxth	r2, r3
 8000306:	187b      	adds	r3, r7, r1
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	b21b      	sxth	r3, r3
 800030c:	4313      	orrs	r3, r2
 800030e:	b21b      	sxth	r3, r3
 8000310:	b29b      	uxth	r3, r3
}
 8000312:	0018      	movs	r0, r3
 8000314:	46bd      	mov	sp, r7
 8000316:	b005      	add	sp, #20
 8000318:	bd90      	pop	{r4, r7, pc}

0800031a <BQ27441_soc>:

uint16_t BQ27441_soc(soc_measure type) {
 800031a:	b590      	push	{r4, r7, lr}
 800031c:	b085      	sub	sp, #20
 800031e:	af00      	add	r7, sp, #0
 8000320:	0002      	movs	r2, r0
 8000322:	1dfb      	adds	r3, r7, #7
 8000324:	701a      	strb	r2, [r3, #0]
    //type = FILTERED;
    uint16_t socRet = 0;
 8000326:	230e      	movs	r3, #14
 8000328:	18fb      	adds	r3, r7, r3
 800032a:	2200      	movs	r2, #0
 800032c:	801a      	strh	r2, [r3, #0]
    switch (type) {
 800032e:	1dfb      	adds	r3, r7, #7
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d002      	beq.n	800033c <BQ27441_soc+0x22>
 8000336:	2b01      	cmp	r3, #1
 8000338:	d008      	beq.n	800034c <BQ27441_soc+0x32>
 800033a:	e00f      	b.n	800035c <BQ27441_soc+0x42>
        case FILTERED:
            socRet = BQ27441_readWord(BQ27441_COMMAND_SOC);
 800033c:	230e      	movs	r3, #14
 800033e:	18fc      	adds	r4, r7, r3
 8000340:	201c      	movs	r0, #28
 8000342:	f7ff ffcd 	bl	80002e0 <BQ27441_readWord>
 8000346:	0003      	movs	r3, r0
 8000348:	8023      	strh	r3, [r4, #0]
            break;
 800034a:	e007      	b.n	800035c <BQ27441_soc+0x42>
        case UNFILTERED:
            socRet = BQ27441_readWord(BQ27441_COMMAND_SOC_UNFL);
 800034c:	230e      	movs	r3, #14
 800034e:	18fc      	adds	r4, r7, r3
 8000350:	2030      	movs	r0, #48	; 0x30
 8000352:	f7ff ffc5 	bl	80002e0 <BQ27441_readWord>
 8000356:	0003      	movs	r3, r0
 8000358:	8023      	strh	r3, [r4, #0]
            break;
 800035a:	46c0      	nop			; (mov r8, r8)
    }
    return socRet;
 800035c:	230e      	movs	r3, #14
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	881b      	ldrh	r3, [r3, #0]
}
 8000362:	0018      	movs	r0, r3
 8000364:	46bd      	mov	sp, r7
 8000366:	b005      	add	sp, #20
 8000368:	bd90      	pop	{r4, r7, pc}

0800036a <BQ27441_voltage>:
uint16_t BQ27441_voltage(void) {
 800036a:	b580      	push	{r7, lr}
 800036c:	af00      	add	r7, sp, #0
    return BQ27441_readWord(BQ27441_COMMAND_VOLTAGE);
 800036e:	2004      	movs	r0, #4
 8000370:	f7ff ffb6 	bl	80002e0 <BQ27441_readWord>
 8000374:	0003      	movs	r3, r0
}
 8000376:	0018      	movs	r0, r3
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}

0800037c <BQ27441_power>:
int16_t BQ27441_power(void) {
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
    return (int16_t) BQ27441_readWord(BQ27441_COMMAND_AVG_POWER);
 8000380:	2018      	movs	r0, #24
 8000382:	f7ff ffad 	bl	80002e0 <BQ27441_readWord>
 8000386:	0003      	movs	r3, r0
 8000388:	b21b      	sxth	r3, r3
}
 800038a:	0018      	movs	r0, r3
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}

08000390 <BQ27441_deviceType>:
uint16_t BQ27441_deviceType(void) {
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
    uint8_t command[2] = {BQ27441_CONTROL_DEVICE_TYPE & 0xFF, BQ27441_CONTROL_DEVICE_TYPE >> 8};
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	2201      	movs	r2, #1
 800039a:	801a      	strh	r2, [r3, #0]
    uint8_t data[2];
    uint16_t deviceType = 0;
 800039c:	1dbb      	adds	r3, r7, #6
 800039e:	2200      	movs	r2, #0
 80003a0:	801a      	strh	r2, [r3, #0]

    BQ27441_i2cWriteBytes(BQ27441_COMMAND_CONTROL, command, sizeof(command)); //write command to slave
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	2202      	movs	r2, #2
 80003a6:	0019      	movs	r1, r3
 80003a8:	2000      	movs	r0, #0
 80003aa:	f7ff ff55 	bl	8000258 <BQ27441_i2cWriteBytes>

    HAL_Delay(10); //delay to ensure device is ready
 80003ae:	200a      	movs	r0, #10
 80003b0:	f000 fc3e 	bl	8000c30 <HAL_Delay>

    if (BQ27441_i2cReadBytes(BQ27441_COMMAND_CONTROL, data, sizeof(data)) == HAL_OK) { //read device type from control register
 80003b4:	003b      	movs	r3, r7
 80003b6:	2202      	movs	r2, #2
 80003b8:	0019      	movs	r1, r3
 80003ba:	2000      	movs	r0, #0
 80003bc:	f7ff ff6e 	bl	800029c <BQ27441_i2cReadBytes>
 80003c0:	1e03      	subs	r3, r0, #0
 80003c2:	d10a      	bne.n	80003da <BQ27441_deviceType+0x4a>
        deviceType = (data[1] << 8) | data[0];
 80003c4:	003b      	movs	r3, r7
 80003c6:	785b      	ldrb	r3, [r3, #1]
 80003c8:	021b      	lsls	r3, r3, #8
 80003ca:	b21a      	sxth	r2, r3
 80003cc:	003b      	movs	r3, r7
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	b21b      	sxth	r3, r3
 80003d2:	4313      	orrs	r3, r2
 80003d4:	b21a      	sxth	r2, r3
 80003d6:	1dbb      	adds	r3, r7, #6
 80003d8:	801a      	strh	r2, [r3, #0]
    }
    return deviceType;
 80003da:	1dbb      	adds	r3, r7, #6
 80003dc:	881b      	ldrh	r3, [r3, #0]
}
 80003de:	0018      	movs	r0, r3
 80003e0:	46bd      	mov	sp, r7
 80003e2:	b002      	add	sp, #8
 80003e4:	bd80      	pop	{r7, pc}
	...

080003e8 <BQ27441_init>:

bool BQ27441_init(BQ27441_ctx_t *dev) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
    if (dev == NULL)
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d101      	bne.n	80003fa <BQ27441_init+0x12>
        return false;
 80003f6:	2300      	movs	r3, #0
 80003f8:	e015      	b.n	8000426 <BQ27441_init+0x3e>

    ctx.read_reg = dev->read_reg;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	689a      	ldr	r2, [r3, #8]
 80003fe:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <BQ27441_init+0x48>)
 8000400:	609a      	str	r2, [r3, #8]
    ctx.write_reg = dev->write_reg;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	685a      	ldr	r2, [r3, #4]
 8000406:	4b0a      	ldr	r3, [pc, #40]	; (8000430 <BQ27441_init+0x48>)
 8000408:	605a      	str	r2, [r3, #4]
    ctx.BQ27441_i2c_address = dev->BQ27441_i2c_address;
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	781a      	ldrb	r2, [r3, #0]
 800040e:	4b08      	ldr	r3, [pc, #32]	; (8000430 <BQ27441_init+0x48>)
 8000410:	701a      	strb	r2, [r3, #0]

    if (BQ27441_deviceType() == BQ27441_DEVICE_ID) {
 8000412:	f7ff ffbd 	bl	8000390 <BQ27441_deviceType>
 8000416:	0003      	movs	r3, r0
 8000418:	001a      	movs	r2, r3
 800041a:	4b06      	ldr	r3, [pc, #24]	; (8000434 <BQ27441_init+0x4c>)
 800041c:	429a      	cmp	r2, r3
 800041e:	d101      	bne.n	8000424 <BQ27441_init+0x3c>
        return true;
 8000420:	2301      	movs	r3, #1
 8000422:	e000      	b.n	8000426 <BQ27441_init+0x3e>
    } else
        return false;
 8000424:	2300      	movs	r3, #0
}
 8000426:	0018      	movs	r0, r3
 8000428:	46bd      	mov	sp, r7
 800042a:	b002      	add	sp, #8
 800042c:	bd80      	pop	{r7, pc}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	2000016c 	.word	0x2000016c
 8000434:	00000421 	.word	0x00000421

08000438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000438:	b5b0      	push	{r4, r5, r7, lr}
 800043a:	b086      	sub	sp, #24
 800043c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800043e:	f000 fb93 	bl	8000b68 <HAL_Init>
  /* USER CODE BEGIN Init */
  //BQ27441_init(&BQ27441);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000442:	f000 f8b5 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000446:	f000 f97b 	bl	8000740 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800044a:	f000 f949 	bl	80006e0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800044e:	f000 f907 	bl	8000660 <MX_I2C1_Init>
//      } else {
//          printf("HAL status: %d at 0x%02X\r\n", res, i);
//          fflush(stdout);
//      }
//  }
	printf("Starting I2C device scan...\r\n");
 8000452:	4b49      	ldr	r3, [pc, #292]	; (8000578 <main+0x140>)
 8000454:	0018      	movs	r0, r3
 8000456:	f003 fa75 	bl	8003944 <puts>
	HAL_StatusTypeDef res;
	uint8_t receiveBuffer[1];
	for(uint16_t i = 0; i < 128; i++) {
 800045a:	230e      	movs	r3, #14
 800045c:	18fb      	adds	r3, r7, r3
 800045e:	2200      	movs	r2, #0
 8000460:	801a      	strh	r2, [r3, #0]
 8000462:	e031      	b.n	80004c8 <main+0x90>
		res = HAL_I2C_Master_Receive(&hi2c1, (uint16_t)i << 1, receiveBuffer, sizeof(receiveBuffer), HAL_MAX_DELAY);
 8000464:	250e      	movs	r5, #14
 8000466:	197b      	adds	r3, r7, r5
 8000468:	881b      	ldrh	r3, [r3, #0]
 800046a:	18db      	adds	r3, r3, r3
 800046c:	b299      	uxth	r1, r3
 800046e:	1d7c      	adds	r4, r7, #5
 8000470:	1d3a      	adds	r2, r7, #4
 8000472:	4842      	ldr	r0, [pc, #264]	; (800057c <main+0x144>)
 8000474:	2301      	movs	r3, #1
 8000476:	425b      	negs	r3, r3
 8000478:	9300      	str	r3, [sp, #0]
 800047a:	2301      	movs	r3, #1
 800047c:	f000 feae 	bl	80011dc <HAL_I2C_Master_Receive>
 8000480:	0003      	movs	r3, r0
 8000482:	7023      	strb	r3, [r4, #0]
		if(res == HAL_OK) {
 8000484:	1d7b      	adds	r3, r7, #5
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d10d      	bne.n	80004a8 <main+0x70>
			printf("Device found at address 0x%02X\r\n", i);
 800048c:	197b      	adds	r3, r7, r5
 800048e:	881a      	ldrh	r2, [r3, #0]
 8000490:	4b3b      	ldr	r3, [pc, #236]	; (8000580 <main+0x148>)
 8000492:	0011      	movs	r1, r2
 8000494:	0018      	movs	r0, r3
 8000496:	f003 f9ef 	bl	8003878 <iprintf>
			fflush(stdout);
 800049a:	4b3a      	ldr	r3, [pc, #232]	; (8000584 <main+0x14c>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	689b      	ldr	r3, [r3, #8]
 80004a0:	0018      	movs	r0, r3
 80004a2:	f003 f90d 	bl	80036c0 <fflush>
 80004a6:	e009      	b.n	80004bc <main+0x84>
		} else {
			printf(" - ");
 80004a8:	4b37      	ldr	r3, [pc, #220]	; (8000588 <main+0x150>)
 80004aa:	0018      	movs	r0, r3
 80004ac:	f003 f9e4 	bl	8003878 <iprintf>
			fflush(stdout);
 80004b0:	4b34      	ldr	r3, [pc, #208]	; (8000584 <main+0x14c>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	689b      	ldr	r3, [r3, #8]
 80004b6:	0018      	movs	r0, r3
 80004b8:	f003 f902 	bl	80036c0 <fflush>
	for(uint16_t i = 0; i < 128; i++) {
 80004bc:	210e      	movs	r1, #14
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	881a      	ldrh	r2, [r3, #0]
 80004c2:	187b      	adds	r3, r7, r1
 80004c4:	3201      	adds	r2, #1
 80004c6:	801a      	strh	r2, [r3, #0]
 80004c8:	230e      	movs	r3, #14
 80004ca:	18fb      	adds	r3, r7, r3
 80004cc:	881b      	ldrh	r3, [r3, #0]
 80004ce:	2b7f      	cmp	r3, #127	; 0x7f
 80004d0:	d9c8      	bls.n	8000464 <main+0x2c>
		}
	}
  printf("Attempting to read BQ27441 device type...\r\n");
 80004d2:	4b2e      	ldr	r3, [pc, #184]	; (800058c <main+0x154>)
 80004d4:	0018      	movs	r0, r3
 80004d6:	f003 fa35 	bl	8003944 <puts>
  uint16_t deviceType = BQ27441_deviceType();
 80004da:	250c      	movs	r5, #12
 80004dc:	197c      	adds	r4, r7, r5
 80004de:	f7ff ff57 	bl	8000390 <BQ27441_deviceType>
 80004e2:	0003      	movs	r3, r0
 80004e4:	8023      	strh	r3, [r4, #0]
  if (deviceType != 0) {
 80004e6:	002a      	movs	r2, r5
 80004e8:	18bb      	adds	r3, r7, r2
 80004ea:	881b      	ldrh	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d007      	beq.n	8000500 <main+0xc8>
	  printf("BQ27441 Device Type: 0x%04X\r\n", deviceType);
 80004f0:	18bb      	adds	r3, r7, r2
 80004f2:	881a      	ldrh	r2, [r3, #0]
 80004f4:	4b26      	ldr	r3, [pc, #152]	; (8000590 <main+0x158>)
 80004f6:	0011      	movs	r1, r2
 80004f8:	0018      	movs	r0, r3
 80004fa:	f003 f9bd 	bl	8003878 <iprintf>
 80004fe:	e003      	b.n	8000508 <main+0xd0>
  } else {
	  printf("Failed to read BQ27441 device type.\r\n");
 8000500:	4b24      	ldr	r3, [pc, #144]	; (8000594 <main+0x15c>)
 8000502:	0018      	movs	r0, r3
 8000504:	f003 fa1e 	bl	8003944 <puts>
  }
  if (BQ27441_init(&BQ27441)) {
 8000508:	4b23      	ldr	r3, [pc, #140]	; (8000598 <main+0x160>)
 800050a:	0018      	movs	r0, r3
 800050c:	f7ff ff6c 	bl	80003e8 <BQ27441_init>
 8000510:	1e03      	subs	r3, r0, #0
 8000512:	d02c      	beq.n	800056e <main+0x136>
	  printf("BQ27441 initialization successful.\r\n");
 8000514:	4b21      	ldr	r3, [pc, #132]	; (800059c <main+0x164>)
 8000516:	0018      	movs	r0, r3
 8000518:	f003 fa14 	bl	8003944 <puts>
	  uint16_t socValue = BQ27441_soc(FILTERED);
 800051c:	250a      	movs	r5, #10
 800051e:	197c      	adds	r4, r7, r5
 8000520:	2000      	movs	r0, #0
 8000522:	f7ff fefa 	bl	800031a <BQ27441_soc>
 8000526:	0003      	movs	r3, r0
 8000528:	8023      	strh	r3, [r4, #0]
	    printf("State of Charge: %u%%\n", socValue);
 800052a:	197b      	adds	r3, r7, r5
 800052c:	881a      	ldrh	r2, [r3, #0]
 800052e:	4b1c      	ldr	r3, [pc, #112]	; (80005a0 <main+0x168>)
 8000530:	0011      	movs	r1, r2
 8000532:	0018      	movs	r0, r3
 8000534:	f003 f9a0 	bl	8003878 <iprintf>
	    uint16_t voltage = BQ27441_voltage();
 8000538:	2508      	movs	r5, #8
 800053a:	197c      	adds	r4, r7, r5
 800053c:	f7ff ff15 	bl	800036a <BQ27441_voltage>
 8000540:	0003      	movs	r3, r0
 8000542:	8023      	strh	r3, [r4, #0]
	    printf("Voltage: %umV\r\n", voltage);
 8000544:	197b      	adds	r3, r7, r5
 8000546:	881a      	ldrh	r2, [r3, #0]
 8000548:	4b16      	ldr	r3, [pc, #88]	; (80005a4 <main+0x16c>)
 800054a:	0011      	movs	r1, r2
 800054c:	0018      	movs	r0, r3
 800054e:	f003 f993 	bl	8003878 <iprintf>
	    uint16_t power = BQ27441_power();
 8000552:	f7ff ff13 	bl	800037c <BQ27441_power>
 8000556:	0003      	movs	r3, r0
 8000558:	001a      	movs	r2, r3
 800055a:	1dbb      	adds	r3, r7, #6
 800055c:	801a      	strh	r2, [r3, #0]
	    printf("Power: %umAh\r\n", power);
 800055e:	1dbb      	adds	r3, r7, #6
 8000560:	881a      	ldrh	r2, [r3, #0]
 8000562:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <main+0x170>)
 8000564:	0011      	movs	r1, r2
 8000566:	0018      	movs	r0, r3
 8000568:	f003 f986 	bl	8003878 <iprintf>
 800056c:	e003      	b.n	8000576 <main+0x13e>
  } else {
	  printf("BQ27441 initialization failed.\r\n");
 800056e:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <main+0x174>)
 8000570:	0018      	movs	r0, r3
 8000572:	f003 f9e7 	bl	8003944 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000576:	e7fe      	b.n	8000576 <main+0x13e>
 8000578:	08004530 	.word	0x08004530
 800057c:	20000090 	.word	0x20000090
 8000580:	08004550 	.word	0x08004550
 8000584:	20000070 	.word	0x20000070
 8000588:	08004574 	.word	0x08004574
 800058c:	08004578 	.word	0x08004578
 8000590:	080045a4 	.word	0x080045a4
 8000594:	080045c4 	.word	0x080045c4
 8000598:	20000000 	.word	0x20000000
 800059c:	080045ec 	.word	0x080045ec
 80005a0:	08004610 	.word	0x08004610
 80005a4:	08004628 	.word	0x08004628
 80005a8:	08004638 	.word	0x08004638
 80005ac:	08004648 	.word	0x08004648

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b590      	push	{r4, r7, lr}
 80005b2:	b099      	sub	sp, #100	; 0x64
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	242c      	movs	r4, #44	; 0x2c
 80005b8:	193b      	adds	r3, r7, r4
 80005ba:	0018      	movs	r0, r3
 80005bc:	2334      	movs	r3, #52	; 0x34
 80005be:	001a      	movs	r2, r3
 80005c0:	2100      	movs	r1, #0
 80005c2:	f003 fabb 	bl	8003b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c6:	231c      	movs	r3, #28
 80005c8:	18fb      	adds	r3, r7, r3
 80005ca:	0018      	movs	r0, r3
 80005cc:	2310      	movs	r3, #16
 80005ce:	001a      	movs	r2, r3
 80005d0:	2100      	movs	r1, #0
 80005d2:	f003 fab3 	bl	8003b3c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	0018      	movs	r0, r3
 80005da:	2318      	movs	r3, #24
 80005dc:	001a      	movs	r2, r3
 80005de:	2100      	movs	r1, #0
 80005e0:	f003 faac 	bl	8003b3c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e4:	0021      	movs	r1, r4
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2202      	movs	r2, #2
 80005ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2201      	movs	r2, #1
 80005f0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2210      	movs	r2, #16
 80005f6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2200      	movs	r2, #0
 80005fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	0018      	movs	r0, r3
 8000602:	f001 fd69 	bl	80020d8 <HAL_RCC_OscConfig>
 8000606:	1e03      	subs	r3, r0, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800060a:	f000 f8d7 	bl	80007bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060e:	211c      	movs	r1, #28
 8000610:	187b      	adds	r3, r7, r1
 8000612:	2207      	movs	r2, #7
 8000614:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000616:	187b      	adds	r3, r7, r1
 8000618:	2200      	movs	r2, #0
 800061a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2100      	movs	r1, #0
 800062c:	0018      	movs	r0, r3
 800062e:	f002 f8d9 	bl	80027e4 <HAL_RCC_ClockConfig>
 8000632:	1e03      	subs	r3, r0, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000636:	f000 f8c1 	bl	80007bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2220      	movs	r2, #32
 800063e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	0018      	movs	r0, r3
 800064a:	f002 fa37 	bl	8002abc <HAL_RCCEx_PeriphCLKConfig>
 800064e:	1e03      	subs	r3, r0, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000652:	f000 f8b3 	bl	80007bc <Error_Handler>
  }
}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	b019      	add	sp, #100	; 0x64
 800065c:	bd90      	pop	{r4, r7, pc}
	...

08000660 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000664:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <MX_I2C1_Init+0x74>)
 8000666:	4a1c      	ldr	r2, [pc, #112]	; (80006d8 <MX_I2C1_Init+0x78>)
 8000668:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401E26;
 800066a:	4b1a      	ldr	r3, [pc, #104]	; (80006d4 <MX_I2C1_Init+0x74>)
 800066c:	4a1b      	ldr	r2, [pc, #108]	; (80006dc <MX_I2C1_Init+0x7c>)
 800066e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000670:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <MX_I2C1_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000676:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <MX_I2C1_Init+0x74>)
 8000678:	2201      	movs	r2, #1
 800067a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <MX_I2C1_Init+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000682:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_I2C1_Init+0x74>)
 8000684:	2200      	movs	r2, #0
 8000686:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <MX_I2C1_Init+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_I2C1_Init+0x74>)
 8000690:	2200      	movs	r2, #0
 8000692:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_I2C1_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_I2C1_Init+0x74>)
 800069c:	0018      	movs	r0, r3
 800069e:	f000 fd07 	bl	80010b0 <HAL_I2C_Init>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d001      	beq.n	80006aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006a6:	f000 f889 	bl	80007bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006aa:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <MX_I2C1_Init+0x74>)
 80006ac:	2100      	movs	r1, #0
 80006ae:	0018      	movs	r0, r3
 80006b0:	f001 fc7a 	bl	8001fa8 <HAL_I2CEx_ConfigAnalogFilter>
 80006b4:	1e03      	subs	r3, r0, #0
 80006b6:	d001      	beq.n	80006bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006b8:	f000 f880 	bl	80007bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <MX_I2C1_Init+0x74>)
 80006be:	2100      	movs	r1, #0
 80006c0:	0018      	movs	r0, r3
 80006c2:	f001 fcbd 	bl	8002040 <HAL_I2CEx_ConfigDigitalFilter>
 80006c6:	1e03      	subs	r3, r0, #0
 80006c8:	d001      	beq.n	80006ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006ca:	f000 f877 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000090 	.word	0x20000090
 80006d8:	40005400 	.word	0x40005400
 80006dc:	00401e26 	.word	0x00401e26

080006e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e4:	4b14      	ldr	r3, [pc, #80]	; (8000738 <MX_USART2_UART_Init+0x58>)
 80006e6:	4a15      	ldr	r2, [pc, #84]	; (800073c <MX_USART2_UART_Init+0x5c>)
 80006e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ea:	4b13      	ldr	r3, [pc, #76]	; (8000738 <MX_USART2_UART_Init+0x58>)
 80006ec:	22e1      	movs	r2, #225	; 0xe1
 80006ee:	0252      	lsls	r2, r2, #9
 80006f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_USART2_UART_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_USART2_UART_Init+0x58>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_USART2_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_USART2_UART_Init+0x58>)
 8000706:	220c      	movs	r2, #12
 8000708:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <MX_USART2_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_USART2_UART_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <MX_USART2_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_USART2_UART_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000722:	4b05      	ldr	r3, [pc, #20]	; (8000738 <MX_USART2_UART_Init+0x58>)
 8000724:	0018      	movs	r0, r3
 8000726:	f002 fab7 	bl	8002c98 <HAL_UART_Init>
 800072a:	1e03      	subs	r3, r0, #0
 800072c:	d001      	beq.n	8000732 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800072e:	f000 f845 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	200000e4 	.word	0x200000e4
 800073c:	40004400 	.word	0x40004400

08000740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000740:	b590      	push	{r4, r7, lr}
 8000742:	b089      	sub	sp, #36	; 0x24
 8000744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	240c      	movs	r4, #12
 8000748:	193b      	adds	r3, r7, r4
 800074a:	0018      	movs	r0, r3
 800074c:	2314      	movs	r3, #20
 800074e:	001a      	movs	r2, r3
 8000750:	2100      	movs	r1, #0
 8000752:	f003 f9f3 	bl	8003b3c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000756:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <MX_GPIO_Init+0x78>)
 8000758:	695a      	ldr	r2, [r3, #20]
 800075a:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <MX_GPIO_Init+0x78>)
 800075c:	2180      	movs	r1, #128	; 0x80
 800075e:	03c9      	lsls	r1, r1, #15
 8000760:	430a      	orrs	r2, r1
 8000762:	615a      	str	r2, [r3, #20]
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_GPIO_Init+0x78>)
 8000766:	695a      	ldr	r2, [r3, #20]
 8000768:	2380      	movs	r3, #128	; 0x80
 800076a:	03db      	lsls	r3, r3, #15
 800076c:	4013      	ands	r3, r2
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_GPIO_Init+0x78>)
 8000774:	695a      	ldr	r2, [r3, #20]
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <MX_GPIO_Init+0x78>)
 8000778:	2180      	movs	r1, #128	; 0x80
 800077a:	0289      	lsls	r1, r1, #10
 800077c:	430a      	orrs	r2, r1
 800077e:	615a      	str	r2, [r3, #20]
 8000780:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <MX_GPIO_Init+0x78>)
 8000782:	695a      	ldr	r2, [r3, #20]
 8000784:	2380      	movs	r3, #128	; 0x80
 8000786:	029b      	lsls	r3, r3, #10
 8000788:	4013      	ands	r3, r2
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800078e:	193b      	adds	r3, r7, r4
 8000790:	2280      	movs	r2, #128	; 0x80
 8000792:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000794:	193b      	adds	r3, r7, r4
 8000796:	2200      	movs	r2, #0
 8000798:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	193b      	adds	r3, r7, r4
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a0:	193a      	adds	r2, r7, r4
 80007a2:	2390      	movs	r3, #144	; 0x90
 80007a4:	05db      	lsls	r3, r3, #23
 80007a6:	0011      	movs	r1, r2
 80007a8:	0018      	movs	r0, r3
 80007aa:	f000 fb19 	bl	8000de0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	b009      	add	sp, #36	; 0x24
 80007b4:	bd90      	pop	{r4, r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	40021000 	.word	0x40021000

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <Error_Handler+0x8>
	...

080007c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <HAL_MspInit+0x44>)
 80007d0:	699a      	ldr	r2, [r3, #24]
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <HAL_MspInit+0x44>)
 80007d4:	2101      	movs	r1, #1
 80007d6:	430a      	orrs	r2, r1
 80007d8:	619a      	str	r2, [r3, #24]
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <HAL_MspInit+0x44>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	2201      	movs	r2, #1
 80007e0:	4013      	ands	r3, r2
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <HAL_MspInit+0x44>)
 80007e8:	69da      	ldr	r2, [r3, #28]
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <HAL_MspInit+0x44>)
 80007ec:	2180      	movs	r1, #128	; 0x80
 80007ee:	0549      	lsls	r1, r1, #21
 80007f0:	430a      	orrs	r2, r1
 80007f2:	61da      	str	r2, [r3, #28]
 80007f4:	4b05      	ldr	r3, [pc, #20]	; (800080c <HAL_MspInit+0x44>)
 80007f6:	69da      	ldr	r2, [r3, #28]
 80007f8:	2380      	movs	r3, #128	; 0x80
 80007fa:	055b      	lsls	r3, r3, #21
 80007fc:	4013      	ands	r3, r2
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	b002      	add	sp, #8
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	40021000 	.word	0x40021000

08000810 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b08b      	sub	sp, #44	; 0x2c
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	2414      	movs	r4, #20
 800081a:	193b      	adds	r3, r7, r4
 800081c:	0018      	movs	r0, r3
 800081e:	2314      	movs	r3, #20
 8000820:	001a      	movs	r2, r3
 8000822:	2100      	movs	r1, #0
 8000824:	f003 f98a 	bl	8003b3c <memset>
  if(hi2c->Instance==I2C1)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a1c      	ldr	r2, [pc, #112]	; (80008a0 <HAL_I2C_MspInit+0x90>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d131      	bne.n	8000896 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000832:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <HAL_I2C_MspInit+0x94>)
 8000834:	695a      	ldr	r2, [r3, #20]
 8000836:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <HAL_I2C_MspInit+0x94>)
 8000838:	2180      	movs	r1, #128	; 0x80
 800083a:	03c9      	lsls	r1, r1, #15
 800083c:	430a      	orrs	r2, r1
 800083e:	615a      	str	r2, [r3, #20]
 8000840:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <HAL_I2C_MspInit+0x94>)
 8000842:	695a      	ldr	r2, [r3, #20]
 8000844:	2380      	movs	r3, #128	; 0x80
 8000846:	03db      	lsls	r3, r3, #15
 8000848:	4013      	ands	r3, r2
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PF0-OSC_IN     ------> I2C1_SDA
    PF1-OSC_OUT     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800084e:	0021      	movs	r1, r4
 8000850:	187b      	adds	r3, r7, r1
 8000852:	2203      	movs	r2, #3
 8000854:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000856:	187b      	adds	r3, r7, r1
 8000858:	2212      	movs	r2, #18
 800085a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	187b      	adds	r3, r7, r1
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000862:	187b      	adds	r3, r7, r1
 8000864:	2203      	movs	r2, #3
 8000866:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000868:	187b      	adds	r3, r7, r1
 800086a:	2201      	movs	r2, #1
 800086c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800086e:	187b      	adds	r3, r7, r1
 8000870:	4a0d      	ldr	r2, [pc, #52]	; (80008a8 <HAL_I2C_MspInit+0x98>)
 8000872:	0019      	movs	r1, r3
 8000874:	0010      	movs	r0, r2
 8000876:	f000 fab3 	bl	8000de0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800087a:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <HAL_I2C_MspInit+0x94>)
 800087c:	69da      	ldr	r2, [r3, #28]
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <HAL_I2C_MspInit+0x94>)
 8000880:	2180      	movs	r1, #128	; 0x80
 8000882:	0389      	lsls	r1, r1, #14
 8000884:	430a      	orrs	r2, r1
 8000886:	61da      	str	r2, [r3, #28]
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <HAL_I2C_MspInit+0x94>)
 800088a:	69da      	ldr	r2, [r3, #28]
 800088c:	2380      	movs	r3, #128	; 0x80
 800088e:	039b      	lsls	r3, r3, #14
 8000890:	4013      	ands	r3, r2
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	b00b      	add	sp, #44	; 0x2c
 800089c:	bd90      	pop	{r4, r7, pc}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	40005400 	.word	0x40005400
 80008a4:	40021000 	.word	0x40021000
 80008a8:	48001400 	.word	0x48001400

080008ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ac:	b590      	push	{r4, r7, lr}
 80008ae:	b08b      	sub	sp, #44	; 0x2c
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	2414      	movs	r4, #20
 80008b6:	193b      	adds	r3, r7, r4
 80008b8:	0018      	movs	r0, r3
 80008ba:	2314      	movs	r3, #20
 80008bc:	001a      	movs	r2, r3
 80008be:	2100      	movs	r1, #0
 80008c0:	f003 f93c 	bl	8003b3c <memset>
  if(huart->Instance==USART2)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a28      	ldr	r2, [pc, #160]	; (800096c <HAL_UART_MspInit+0xc0>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d149      	bne.n	8000962 <HAL_UART_MspInit+0xb6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ce:	4b28      	ldr	r3, [pc, #160]	; (8000970 <HAL_UART_MspInit+0xc4>)
 80008d0:	69da      	ldr	r2, [r3, #28]
 80008d2:	4b27      	ldr	r3, [pc, #156]	; (8000970 <HAL_UART_MspInit+0xc4>)
 80008d4:	2180      	movs	r1, #128	; 0x80
 80008d6:	0289      	lsls	r1, r1, #10
 80008d8:	430a      	orrs	r2, r1
 80008da:	61da      	str	r2, [r3, #28]
 80008dc:	4b24      	ldr	r3, [pc, #144]	; (8000970 <HAL_UART_MspInit+0xc4>)
 80008de:	69da      	ldr	r2, [r3, #28]
 80008e0:	2380      	movs	r3, #128	; 0x80
 80008e2:	029b      	lsls	r3, r3, #10
 80008e4:	4013      	ands	r3, r2
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	4b21      	ldr	r3, [pc, #132]	; (8000970 <HAL_UART_MspInit+0xc4>)
 80008ec:	695a      	ldr	r2, [r3, #20]
 80008ee:	4b20      	ldr	r3, [pc, #128]	; (8000970 <HAL_UART_MspInit+0xc4>)
 80008f0:	2180      	movs	r1, #128	; 0x80
 80008f2:	0289      	lsls	r1, r1, #10
 80008f4:	430a      	orrs	r2, r1
 80008f6:	615a      	str	r2, [r3, #20]
 80008f8:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <HAL_UART_MspInit+0xc4>)
 80008fa:	695a      	ldr	r2, [r3, #20]
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	029b      	lsls	r3, r3, #10
 8000900:	4013      	ands	r3, r2
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000906:	193b      	adds	r3, r7, r4
 8000908:	2204      	movs	r2, #4
 800090a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	193b      	adds	r3, r7, r4
 800090e:	2202      	movs	r2, #2
 8000910:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	193b      	adds	r3, r7, r4
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000918:	193b      	adds	r3, r7, r4
 800091a:	2203      	movs	r2, #3
 800091c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800091e:	193b      	adds	r3, r7, r4
 8000920:	2201      	movs	r2, #1
 8000922:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000924:	193a      	adds	r2, r7, r4
 8000926:	2390      	movs	r3, #144	; 0x90
 8000928:	05db      	lsls	r3, r3, #23
 800092a:	0011      	movs	r1, r2
 800092c:	0018      	movs	r0, r3
 800092e:	f000 fa57 	bl	8000de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000932:	0021      	movs	r1, r4
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2280      	movs	r2, #128	; 0x80
 8000938:	0212      	lsls	r2, r2, #8
 800093a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	187b      	adds	r3, r7, r1
 800093e:	2202      	movs	r2, #2
 8000940:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000942:	187b      	adds	r3, r7, r1
 8000944:	2201      	movs	r2, #1
 8000946:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000948:	187b      	adds	r3, r7, r1
 800094a:	2203      	movs	r2, #3
 800094c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800094e:	187b      	adds	r3, r7, r1
 8000950:	2201      	movs	r2, #1
 8000952:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000954:	187a      	adds	r2, r7, r1
 8000956:	2390      	movs	r3, #144	; 0x90
 8000958:	05db      	lsls	r3, r3, #23
 800095a:	0011      	movs	r1, r2
 800095c:	0018      	movs	r0, r3
 800095e:	f000 fa3f 	bl	8000de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	46bd      	mov	sp, r7
 8000966:	b00b      	add	sp, #44	; 0x2c
 8000968:	bd90      	pop	{r4, r7, pc}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	40004400 	.word	0x40004400
 8000970:	40021000 	.word	0x40021000

08000974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000978:	e7fe      	b.n	8000978 <NMI_Handler+0x4>

0800097a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097e:	e7fe      	b.n	800097e <HardFault_Handler+0x4>

08000980 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000984:	46c0      	nop			; (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000998:	f000 f92e 	bl	8000bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800099c:	46c0      	nop			; (mov r8, r8)
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b086      	sub	sp, #24
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	60f8      	str	r0, [r7, #12]
 80009aa:	60b9      	str	r1, [r7, #8]
 80009ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
 80009b2:	e00a      	b.n	80009ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009b4:	e000      	b.n	80009b8 <_read+0x16>
 80009b6:	bf00      	nop
 80009b8:	0001      	movs	r1, r0
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	1c5a      	adds	r2, r3, #1
 80009be:	60ba      	str	r2, [r7, #8]
 80009c0:	b2ca      	uxtb	r2, r1
 80009c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	3301      	adds	r3, #1
 80009c8:	617b      	str	r3, [r7, #20]
 80009ca:	697a      	ldr	r2, [r7, #20]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	429a      	cmp	r2, r3
 80009d0:	dbf0      	blt.n	80009b4 <_read+0x12>
  }

  return len;
 80009d2:	687b      	ldr	r3, [r7, #4]
}
 80009d4:	0018      	movs	r0, r3
 80009d6:	46bd      	mov	sp, r7
 80009d8:	b006      	add	sp, #24
 80009da:	bd80      	pop	{r7, pc}

080009dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
 80009ec:	e009      	b.n	8000a02 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	1c5a      	adds	r2, r3, #1
 80009f2:	60ba      	str	r2, [r7, #8]
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	0018      	movs	r0, r3
 80009f8:	f7ff fc1c 	bl	8000234 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	3301      	adds	r3, #1
 8000a00:	617b      	str	r3, [r7, #20]
 8000a02:	697a      	ldr	r2, [r7, #20]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	dbf1      	blt.n	80009ee <_write+0x12>
  }
  return len;
 8000a0a:	687b      	ldr	r3, [r7, #4]
}
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	b006      	add	sp, #24
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <_close>:

int _close(int file)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	425b      	negs	r3, r3
}
 8000a20:	0018      	movs	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b002      	add	sp, #8
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	2280      	movs	r2, #128	; 0x80
 8000a36:	0192      	lsls	r2, r2, #6
 8000a38:	605a      	str	r2, [r3, #4]
  return 0;
 8000a3a:	2300      	movs	r3, #0
}
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	b002      	add	sp, #8
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <_isatty>:

int _isatty(int file)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a4c:	2301      	movs	r3, #1
}
 8000a4e:	0018      	movs	r0, r3
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b002      	add	sp, #8
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b084      	sub	sp, #16
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	60f8      	str	r0, [r7, #12]
 8000a5e:	60b9      	str	r1, [r7, #8]
 8000a60:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a62:	2300      	movs	r3, #0
}
 8000a64:	0018      	movs	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b004      	add	sp, #16
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a74:	4a14      	ldr	r2, [pc, #80]	; (8000ac8 <_sbrk+0x5c>)
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <_sbrk+0x60>)
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a80:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <_sbrk+0x64>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d102      	bne.n	8000a8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <_sbrk+0x64>)
 8000a8a:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <_sbrk+0x68>)
 8000a8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a8e:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <_sbrk+0x64>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	18d3      	adds	r3, r2, r3
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d207      	bcs.n	8000aac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a9c:	f003 f8a4 	bl	8003be8 <__errno>
 8000aa0:	0003      	movs	r3, r0
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	425b      	negs	r3, r3
 8000aaa:	e009      	b.n	8000ac0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <_sbrk+0x64>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ab2:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <_sbrk+0x64>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	18d2      	adds	r2, r2, r3
 8000aba:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <_sbrk+0x64>)
 8000abc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000abe:	68fb      	ldr	r3, [r7, #12]
}
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	b006      	add	sp, #24
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20001800 	.word	0x20001800
 8000acc:	00000400 	.word	0x00000400
 8000ad0:	20000178 	.word	0x20000178
 8000ad4:	200002d0 	.word	0x200002d0

08000ad8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000adc:	46c0      	nop			; (mov r8, r8)
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ae4:	4813      	ldr	r0, [pc, #76]	; (8000b34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ae6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ae8:	f7ff fff6 	bl	8000ad8 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000aec:	4812      	ldr	r0, [pc, #72]	; (8000b38 <LoopForever+0x6>)
    LDR R1, [R0]
 8000aee:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000af0:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000af2:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <LoopForever+0xa>)
    CMP R1, R2
 8000af4:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000af6:	d105      	bne.n	8000b04 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000af8:	4811      	ldr	r0, [pc, #68]	; (8000b40 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000afa:	4912      	ldr	r1, [pc, #72]	; (8000b44 <LoopForever+0x12>)
    STR R1, [R0]
 8000afc:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000afe:	4812      	ldr	r0, [pc, #72]	; (8000b48 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000b00:	4912      	ldr	r1, [pc, #72]	; (8000b4c <LoopForever+0x1a>)
    STR R1, [R0]
 8000b02:	6001      	str	r1, [r0, #0]

08000b04 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b04:	4812      	ldr	r0, [pc, #72]	; (8000b50 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000b06:	4913      	ldr	r1, [pc, #76]	; (8000b54 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000b08:	4a13      	ldr	r2, [pc, #76]	; (8000b58 <LoopForever+0x26>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b0c:	e002      	b.n	8000b14 <LoopCopyDataInit>

08000b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b12:	3304      	adds	r3, #4

08000b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b18:	d3f9      	bcc.n	8000b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1a:	4a10      	ldr	r2, [pc, #64]	; (8000b5c <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000b1c:	4c10      	ldr	r4, [pc, #64]	; (8000b60 <LoopForever+0x2e>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b20:	e001      	b.n	8000b26 <LoopFillZerobss>

08000b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b24:	3204      	adds	r2, #4

08000b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b28:	d3fb      	bcc.n	8000b22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b2a:	f003 f863 	bl	8003bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b2e:	f7ff fc83 	bl	8000438 <main>

08000b32 <LoopForever>:

LoopForever:
    b LoopForever
 8000b32:	e7fe      	b.n	8000b32 <LoopForever>
  ldr   r0, =_estack
 8000b34:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000b38:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000b3c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000b40:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000b44:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000b48:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000b4c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b54:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b58:	080046dc 	.word	0x080046dc
  ldr r2, =_sbss
 8000b5c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b60:	200002cc 	.word	0x200002cc

08000b64 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b64:	e7fe      	b.n	8000b64 <ADC1_IRQHandler>
	...

08000b68 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b6c:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <HAL_Init+0x24>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_Init+0x24>)
 8000b72:	2110      	movs	r1, #16
 8000b74:	430a      	orrs	r2, r1
 8000b76:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f000 f809 	bl	8000b90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b7e:	f7ff fe23 	bl	80007c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b82:	2300      	movs	r3, #0
}
 8000b84:	0018      	movs	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	40022000 	.word	0x40022000

08000b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b90:	b590      	push	{r4, r7, lr}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b98:	4b14      	ldr	r3, [pc, #80]	; (8000bec <HAL_InitTick+0x5c>)
 8000b9a:	681c      	ldr	r4, [r3, #0]
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <HAL_InitTick+0x60>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	0019      	movs	r1, r3
 8000ba2:	23fa      	movs	r3, #250	; 0xfa
 8000ba4:	0098      	lsls	r0, r3, #2
 8000ba6:	f7ff fab9 	bl	800011c <__udivsi3>
 8000baa:	0003      	movs	r3, r0
 8000bac:	0019      	movs	r1, r3
 8000bae:	0020      	movs	r0, r4
 8000bb0:	f7ff fab4 	bl	800011c <__udivsi3>
 8000bb4:	0003      	movs	r3, r0
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f000 f905 	bl	8000dc6 <HAL_SYSTICK_Config>
 8000bbc:	1e03      	subs	r3, r0, #0
 8000bbe:	d001      	beq.n	8000bc4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	e00f      	b.n	8000be4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b03      	cmp	r3, #3
 8000bc8:	d80b      	bhi.n	8000be2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bca:	6879      	ldr	r1, [r7, #4]
 8000bcc:	2301      	movs	r3, #1
 8000bce:	425b      	negs	r3, r3
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f000 f8e2 	bl	8000d9c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_InitTick+0x64>)
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000bde:	2300      	movs	r3, #0
 8000be0:	e000      	b.n	8000be4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
}
 8000be4:	0018      	movs	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	b003      	add	sp, #12
 8000bea:	bd90      	pop	{r4, r7, pc}
 8000bec:	2000000c 	.word	0x2000000c
 8000bf0:	20000014 	.word	0x20000014
 8000bf4:	20000010 	.word	0x20000010

08000bf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <HAL_IncTick+0x1c>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	001a      	movs	r2, r3
 8000c02:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <HAL_IncTick+0x20>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	18d2      	adds	r2, r2, r3
 8000c08:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <HAL_IncTick+0x20>)
 8000c0a:	601a      	str	r2, [r3, #0]
}
 8000c0c:	46c0      	nop			; (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	20000014 	.word	0x20000014
 8000c18:	2000017c 	.word	0x2000017c

08000c1c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c20:	4b02      	ldr	r3, [pc, #8]	; (8000c2c <HAL_GetTick+0x10>)
 8000c22:	681b      	ldr	r3, [r3, #0]
}
 8000c24:	0018      	movs	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	2000017c 	.word	0x2000017c

08000c30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c38:	f7ff fff0 	bl	8000c1c <HAL_GetTick>
 8000c3c:	0003      	movs	r3, r0
 8000c3e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	3301      	adds	r3, #1
 8000c48:	d005      	beq.n	8000c56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <HAL_Delay+0x44>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	001a      	movs	r2, r3
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	189b      	adds	r3, r3, r2
 8000c54:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	f7ff ffe0 	bl	8000c1c <HAL_GetTick>
 8000c5c:	0002      	movs	r2, r0
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	68fa      	ldr	r2, [r7, #12]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d8f7      	bhi.n	8000c58 <HAL_Delay+0x28>
  {
  }
}
 8000c68:	46c0      	nop			; (mov r8, r8)
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	b004      	add	sp, #16
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	20000014 	.word	0x20000014

08000c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c78:	b590      	push	{r4, r7, lr}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	0002      	movs	r2, r0
 8000c80:	6039      	str	r1, [r7, #0]
 8000c82:	1dfb      	adds	r3, r7, #7
 8000c84:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c86:	1dfb      	adds	r3, r7, #7
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b7f      	cmp	r3, #127	; 0x7f
 8000c8c:	d828      	bhi.n	8000ce0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c8e:	4a2f      	ldr	r2, [pc, #188]	; (8000d4c <__NVIC_SetPriority+0xd4>)
 8000c90:	1dfb      	adds	r3, r7, #7
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	b25b      	sxtb	r3, r3
 8000c96:	089b      	lsrs	r3, r3, #2
 8000c98:	33c0      	adds	r3, #192	; 0xc0
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	589b      	ldr	r3, [r3, r2]
 8000c9e:	1dfa      	adds	r2, r7, #7
 8000ca0:	7812      	ldrb	r2, [r2, #0]
 8000ca2:	0011      	movs	r1, r2
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	400a      	ands	r2, r1
 8000ca8:	00d2      	lsls	r2, r2, #3
 8000caa:	21ff      	movs	r1, #255	; 0xff
 8000cac:	4091      	lsls	r1, r2
 8000cae:	000a      	movs	r2, r1
 8000cb0:	43d2      	mvns	r2, r2
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	019b      	lsls	r3, r3, #6
 8000cba:	22ff      	movs	r2, #255	; 0xff
 8000cbc:	401a      	ands	r2, r3
 8000cbe:	1dfb      	adds	r3, r7, #7
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	4003      	ands	r3, r0
 8000cc8:	00db      	lsls	r3, r3, #3
 8000cca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ccc:	481f      	ldr	r0, [pc, #124]	; (8000d4c <__NVIC_SetPriority+0xd4>)
 8000cce:	1dfb      	adds	r3, r7, #7
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	b25b      	sxtb	r3, r3
 8000cd4:	089b      	lsrs	r3, r3, #2
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	33c0      	adds	r3, #192	; 0xc0
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cde:	e031      	b.n	8000d44 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ce0:	4a1b      	ldr	r2, [pc, #108]	; (8000d50 <__NVIC_SetPriority+0xd8>)
 8000ce2:	1dfb      	adds	r3, r7, #7
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	0019      	movs	r1, r3
 8000ce8:	230f      	movs	r3, #15
 8000cea:	400b      	ands	r3, r1
 8000cec:	3b08      	subs	r3, #8
 8000cee:	089b      	lsrs	r3, r3, #2
 8000cf0:	3306      	adds	r3, #6
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	18d3      	adds	r3, r2, r3
 8000cf6:	3304      	adds	r3, #4
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	1dfa      	adds	r2, r7, #7
 8000cfc:	7812      	ldrb	r2, [r2, #0]
 8000cfe:	0011      	movs	r1, r2
 8000d00:	2203      	movs	r2, #3
 8000d02:	400a      	ands	r2, r1
 8000d04:	00d2      	lsls	r2, r2, #3
 8000d06:	21ff      	movs	r1, #255	; 0xff
 8000d08:	4091      	lsls	r1, r2
 8000d0a:	000a      	movs	r2, r1
 8000d0c:	43d2      	mvns	r2, r2
 8000d0e:	401a      	ands	r2, r3
 8000d10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	019b      	lsls	r3, r3, #6
 8000d16:	22ff      	movs	r2, #255	; 0xff
 8000d18:	401a      	ands	r2, r3
 8000d1a:	1dfb      	adds	r3, r7, #7
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	0018      	movs	r0, r3
 8000d20:	2303      	movs	r3, #3
 8000d22:	4003      	ands	r3, r0
 8000d24:	00db      	lsls	r3, r3, #3
 8000d26:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d28:	4809      	ldr	r0, [pc, #36]	; (8000d50 <__NVIC_SetPriority+0xd8>)
 8000d2a:	1dfb      	adds	r3, r7, #7
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	001c      	movs	r4, r3
 8000d30:	230f      	movs	r3, #15
 8000d32:	4023      	ands	r3, r4
 8000d34:	3b08      	subs	r3, #8
 8000d36:	089b      	lsrs	r3, r3, #2
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	3306      	adds	r3, #6
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	18c3      	adds	r3, r0, r3
 8000d40:	3304      	adds	r3, #4
 8000d42:	601a      	str	r2, [r3, #0]
}
 8000d44:	46c0      	nop			; (mov r8, r8)
 8000d46:	46bd      	mov	sp, r7
 8000d48:	b003      	add	sp, #12
 8000d4a:	bd90      	pop	{r4, r7, pc}
 8000d4c:	e000e100 	.word	0xe000e100
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	1e5a      	subs	r2, r3, #1
 8000d60:	2380      	movs	r3, #128	; 0x80
 8000d62:	045b      	lsls	r3, r3, #17
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d301      	bcc.n	8000d6c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e010      	b.n	8000d8e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d6c:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <SysTick_Config+0x44>)
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	3a01      	subs	r2, #1
 8000d72:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d74:	2301      	movs	r3, #1
 8000d76:	425b      	negs	r3, r3
 8000d78:	2103      	movs	r1, #3
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f7ff ff7c 	bl	8000c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <SysTick_Config+0x44>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d86:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <SysTick_Config+0x44>)
 8000d88:	2207      	movs	r2, #7
 8000d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	0018      	movs	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	b002      	add	sp, #8
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	e000e010 	.word	0xe000e010

08000d9c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60b9      	str	r1, [r7, #8]
 8000da4:	607a      	str	r2, [r7, #4]
 8000da6:	210f      	movs	r1, #15
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	1c02      	adds	r2, r0, #0
 8000dac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000dae:	68ba      	ldr	r2, [r7, #8]
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	b25b      	sxtb	r3, r3
 8000db6:	0011      	movs	r1, r2
 8000db8:	0018      	movs	r0, r3
 8000dba:	f7ff ff5d 	bl	8000c78 <__NVIC_SetPriority>
}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b004      	add	sp, #16
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f7ff ffbf 	bl	8000d54 <SysTick_Config>
 8000dd6:	0003      	movs	r3, r0
}
 8000dd8:	0018      	movs	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	b002      	add	sp, #8
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dee:	e149      	b.n	8001084 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2101      	movs	r1, #1
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	4091      	lsls	r1, r2
 8000dfa:	000a      	movs	r2, r1
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d100      	bne.n	8000e08 <HAL_GPIO_Init+0x28>
 8000e06:	e13a      	b.n	800107e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	4013      	ands	r3, r2
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d005      	beq.n	8000e20 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	2203      	movs	r2, #3
 8000e1a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d130      	bne.n	8000e82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	409a      	lsls	r2, r3
 8000e2e:	0013      	movs	r3, r2
 8000e30:	43da      	mvns	r2, r3
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	4013      	ands	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	68da      	ldr	r2, [r3, #12]
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	409a      	lsls	r2, r3
 8000e42:	0013      	movs	r3, r2
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e56:	2201      	movs	r2, #1
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	409a      	lsls	r2, r3
 8000e5c:	0013      	movs	r3, r2
 8000e5e:	43da      	mvns	r2, r3
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	4013      	ands	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	091b      	lsrs	r3, r3, #4
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	401a      	ands	r2, r3
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	409a      	lsls	r2, r3
 8000e74:	0013      	movs	r3, r2
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	2203      	movs	r2, #3
 8000e88:	4013      	ands	r3, r2
 8000e8a:	2b03      	cmp	r3, #3
 8000e8c:	d017      	beq.n	8000ebe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	68db      	ldr	r3, [r3, #12]
 8000e92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	2203      	movs	r2, #3
 8000e9a:	409a      	lsls	r2, r3
 8000e9c:	0013      	movs	r3, r2
 8000e9e:	43da      	mvns	r2, r3
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	689a      	ldr	r2, [r3, #8]
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	409a      	lsls	r2, r3
 8000eb0:	0013      	movs	r3, r2
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d123      	bne.n	8000f12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	08da      	lsrs	r2, r3, #3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	3208      	adds	r2, #8
 8000ed2:	0092      	lsls	r2, r2, #2
 8000ed4:	58d3      	ldr	r3, [r2, r3]
 8000ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	2207      	movs	r2, #7
 8000edc:	4013      	ands	r3, r2
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	220f      	movs	r2, #15
 8000ee2:	409a      	lsls	r2, r3
 8000ee4:	0013      	movs	r3, r2
 8000ee6:	43da      	mvns	r2, r3
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	691a      	ldr	r2, [r3, #16]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	2107      	movs	r1, #7
 8000ef6:	400b      	ands	r3, r1
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	409a      	lsls	r2, r3
 8000efc:	0013      	movs	r3, r2
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	08da      	lsrs	r2, r3, #3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3208      	adds	r2, #8
 8000f0c:	0092      	lsls	r2, r2, #2
 8000f0e:	6939      	ldr	r1, [r7, #16]
 8000f10:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	409a      	lsls	r2, r3
 8000f20:	0013      	movs	r3, r2
 8000f22:	43da      	mvns	r2, r3
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	2203      	movs	r2, #3
 8000f30:	401a      	ands	r2, r3
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	409a      	lsls	r2, r3
 8000f38:	0013      	movs	r3, r2
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685a      	ldr	r2, [r3, #4]
 8000f4a:	23c0      	movs	r3, #192	; 0xc0
 8000f4c:	029b      	lsls	r3, r3, #10
 8000f4e:	4013      	ands	r3, r2
 8000f50:	d100      	bne.n	8000f54 <HAL_GPIO_Init+0x174>
 8000f52:	e094      	b.n	800107e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f54:	4b51      	ldr	r3, [pc, #324]	; (800109c <HAL_GPIO_Init+0x2bc>)
 8000f56:	699a      	ldr	r2, [r3, #24]
 8000f58:	4b50      	ldr	r3, [pc, #320]	; (800109c <HAL_GPIO_Init+0x2bc>)
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	619a      	str	r2, [r3, #24]
 8000f60:	4b4e      	ldr	r3, [pc, #312]	; (800109c <HAL_GPIO_Init+0x2bc>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	2201      	movs	r2, #1
 8000f66:	4013      	ands	r3, r2
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f6c:	4a4c      	ldr	r2, [pc, #304]	; (80010a0 <HAL_GPIO_Init+0x2c0>)
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	089b      	lsrs	r3, r3, #2
 8000f72:	3302      	adds	r3, #2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	589b      	ldr	r3, [r3, r2]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	4013      	ands	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	220f      	movs	r2, #15
 8000f84:	409a      	lsls	r2, r3
 8000f86:	0013      	movs	r3, r2
 8000f88:	43da      	mvns	r2, r3
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	2390      	movs	r3, #144	; 0x90
 8000f94:	05db      	lsls	r3, r3, #23
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d00d      	beq.n	8000fb6 <HAL_GPIO_Init+0x1d6>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a41      	ldr	r2, [pc, #260]	; (80010a4 <HAL_GPIO_Init+0x2c4>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d007      	beq.n	8000fb2 <HAL_GPIO_Init+0x1d2>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a40      	ldr	r2, [pc, #256]	; (80010a8 <HAL_GPIO_Init+0x2c8>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d101      	bne.n	8000fae <HAL_GPIO_Init+0x1ce>
 8000faa:	2302      	movs	r3, #2
 8000fac:	e004      	b.n	8000fb8 <HAL_GPIO_Init+0x1d8>
 8000fae:	2305      	movs	r3, #5
 8000fb0:	e002      	b.n	8000fb8 <HAL_GPIO_Init+0x1d8>
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e000      	b.n	8000fb8 <HAL_GPIO_Init+0x1d8>
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	697a      	ldr	r2, [r7, #20]
 8000fba:	2103      	movs	r1, #3
 8000fbc:	400a      	ands	r2, r1
 8000fbe:	0092      	lsls	r2, r2, #2
 8000fc0:	4093      	lsls	r3, r2
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fc8:	4935      	ldr	r1, [pc, #212]	; (80010a0 <HAL_GPIO_Init+0x2c0>)
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	089b      	lsrs	r3, r3, #2
 8000fce:	3302      	adds	r3, #2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fd6:	4b35      	ldr	r3, [pc, #212]	; (80010ac <HAL_GPIO_Init+0x2cc>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	43da      	mvns	r2, r3
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685a      	ldr	r2, [r3, #4]
 8000fea:	2380      	movs	r3, #128	; 0x80
 8000fec:	035b      	lsls	r3, r3, #13
 8000fee:	4013      	ands	r3, r2
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ffa:	4b2c      	ldr	r3, [pc, #176]	; (80010ac <HAL_GPIO_Init+0x2cc>)
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001000:	4b2a      	ldr	r3, [pc, #168]	; (80010ac <HAL_GPIO_Init+0x2cc>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	43da      	mvns	r2, r3
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685a      	ldr	r2, [r3, #4]
 8001014:	2380      	movs	r3, #128	; 0x80
 8001016:	039b      	lsls	r3, r3, #14
 8001018:	4013      	ands	r3, r2
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	4313      	orrs	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001024:	4b21      	ldr	r3, [pc, #132]	; (80010ac <HAL_GPIO_Init+0x2cc>)
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800102a:	4b20      	ldr	r3, [pc, #128]	; (80010ac <HAL_GPIO_Init+0x2cc>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	43da      	mvns	r2, r3
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	2380      	movs	r3, #128	; 0x80
 8001040:	029b      	lsls	r3, r3, #10
 8001042:	4013      	ands	r3, r2
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4313      	orrs	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800104e:	4b17      	ldr	r3, [pc, #92]	; (80010ac <HAL_GPIO_Init+0x2cc>)
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001054:	4b15      	ldr	r3, [pc, #84]	; (80010ac <HAL_GPIO_Init+0x2cc>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	43da      	mvns	r2, r3
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685a      	ldr	r2, [r3, #4]
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	025b      	lsls	r3, r3, #9
 800106c:	4013      	ands	r3, r2
 800106e:	d003      	beq.n	8001078 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <HAL_GPIO_Init+0x2cc>)
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	3301      	adds	r3, #1
 8001082:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	40da      	lsrs	r2, r3
 800108c:	1e13      	subs	r3, r2, #0
 800108e:	d000      	beq.n	8001092 <HAL_GPIO_Init+0x2b2>
 8001090:	e6ae      	b.n	8000df0 <HAL_GPIO_Init+0x10>
  } 
}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	46c0      	nop			; (mov r8, r8)
 8001096:	46bd      	mov	sp, r7
 8001098:	b006      	add	sp, #24
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40021000 	.word	0x40021000
 80010a0:	40010000 	.word	0x40010000
 80010a4:	48000400 	.word	0x48000400
 80010a8:	48000800 	.word	0x48000800
 80010ac:	40010400 	.word	0x40010400

080010b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e082      	b.n	80011c8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2241      	movs	r2, #65	; 0x41
 80010c6:	5c9b      	ldrb	r3, [r3, r2]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d107      	bne.n	80010de <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2240      	movs	r2, #64	; 0x40
 80010d2:	2100      	movs	r1, #0
 80010d4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	0018      	movs	r0, r3
 80010da:	f7ff fb99 	bl	8000810 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2241      	movs	r2, #65	; 0x41
 80010e2:	2124      	movs	r1, #36	; 0x24
 80010e4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2101      	movs	r1, #1
 80010f2:	438a      	bics	r2, r1
 80010f4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4934      	ldr	r1, [pc, #208]	; (80011d0 <HAL_I2C_Init+0x120>)
 8001100:	400a      	ands	r2, r1
 8001102:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	689a      	ldr	r2, [r3, #8]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4931      	ldr	r1, [pc, #196]	; (80011d4 <HAL_I2C_Init+0x124>)
 8001110:	400a      	ands	r2, r1
 8001112:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d108      	bne.n	800112e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2180      	movs	r1, #128	; 0x80
 8001126:	0209      	lsls	r1, r1, #8
 8001128:	430a      	orrs	r2, r1
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	e007      	b.n	800113e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	689a      	ldr	r2, [r3, #8]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2184      	movs	r1, #132	; 0x84
 8001138:	0209      	lsls	r1, r1, #8
 800113a:	430a      	orrs	r2, r1
 800113c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	2b02      	cmp	r3, #2
 8001144:	d104      	bne.n	8001150 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2280      	movs	r2, #128	; 0x80
 800114c:	0112      	lsls	r2, r2, #4
 800114e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	491f      	ldr	r1, [pc, #124]	; (80011d8 <HAL_I2C_Init+0x128>)
 800115c:	430a      	orrs	r2, r1
 800115e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	68da      	ldr	r2, [r3, #12]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	491a      	ldr	r1, [pc, #104]	; (80011d4 <HAL_I2C_Init+0x124>)
 800116c:	400a      	ands	r2, r1
 800116e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	691a      	ldr	r2, [r3, #16]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	695b      	ldr	r3, [r3, #20]
 8001178:	431a      	orrs	r2, r3
 800117a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	430a      	orrs	r2, r1
 8001188:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	69d9      	ldr	r1, [r3, #28]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6a1a      	ldr	r2, [r3, #32]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	430a      	orrs	r2, r1
 8001198:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2101      	movs	r1, #1
 80011a6:	430a      	orrs	r2, r1
 80011a8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2241      	movs	r2, #65	; 0x41
 80011b4:	2120      	movs	r1, #32
 80011b6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2242      	movs	r2, #66	; 0x42
 80011c2:	2100      	movs	r1, #0
 80011c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	0018      	movs	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	b002      	add	sp, #8
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	f0ffffff 	.word	0xf0ffffff
 80011d4:	ffff7fff 	.word	0xffff7fff
 80011d8:	02008000 	.word	0x02008000

080011dc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80011dc:	b590      	push	{r4, r7, lr}
 80011de:	b089      	sub	sp, #36	; 0x24
 80011e0:	af02      	add	r7, sp, #8
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	0008      	movs	r0, r1
 80011e6:	607a      	str	r2, [r7, #4]
 80011e8:	0019      	movs	r1, r3
 80011ea:	230a      	movs	r3, #10
 80011ec:	18fb      	adds	r3, r7, r3
 80011ee:	1c02      	adds	r2, r0, #0
 80011f0:	801a      	strh	r2, [r3, #0]
 80011f2:	2308      	movs	r3, #8
 80011f4:	18fb      	adds	r3, r7, r3
 80011f6:	1c0a      	adds	r2, r1, #0
 80011f8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2241      	movs	r2, #65	; 0x41
 80011fe:	5c9b      	ldrb	r3, [r3, r2]
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b20      	cmp	r3, #32
 8001204:	d000      	beq.n	8001208 <HAL_I2C_Master_Receive+0x2c>
 8001206:	e0e8      	b.n	80013da <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2240      	movs	r2, #64	; 0x40
 800120c:	5c9b      	ldrb	r3, [r3, r2]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d101      	bne.n	8001216 <HAL_I2C_Master_Receive+0x3a>
 8001212:	2302      	movs	r3, #2
 8001214:	e0e2      	b.n	80013dc <HAL_I2C_Master_Receive+0x200>
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2240      	movs	r2, #64	; 0x40
 800121a:	2101      	movs	r1, #1
 800121c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800121e:	f7ff fcfd 	bl	8000c1c <HAL_GetTick>
 8001222:	0003      	movs	r3, r0
 8001224:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001226:	2380      	movs	r3, #128	; 0x80
 8001228:	0219      	lsls	r1, r3, #8
 800122a:	68f8      	ldr	r0, [r7, #12]
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	2319      	movs	r3, #25
 8001232:	2201      	movs	r2, #1
 8001234:	f000 fc24 	bl	8001a80 <I2C_WaitOnFlagUntilTimeout>
 8001238:	1e03      	subs	r3, r0, #0
 800123a:	d001      	beq.n	8001240 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e0cd      	b.n	80013dc <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2241      	movs	r2, #65	; 0x41
 8001244:	2122      	movs	r1, #34	; 0x22
 8001246:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2242      	movs	r2, #66	; 0x42
 800124c:	2110      	movs	r1, #16
 800124e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2200      	movs	r2, #0
 8001254:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2208      	movs	r2, #8
 8001260:	18ba      	adds	r2, r7, r2
 8001262:	8812      	ldrh	r2, [r2, #0]
 8001264:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2200      	movs	r2, #0
 800126a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001270:	b29b      	uxth	r3, r3
 8001272:	2bff      	cmp	r3, #255	; 0xff
 8001274:	d911      	bls.n	800129a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	22ff      	movs	r2, #255	; 0xff
 800127a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001280:	b2da      	uxtb	r2, r3
 8001282:	2380      	movs	r3, #128	; 0x80
 8001284:	045c      	lsls	r4, r3, #17
 8001286:	230a      	movs	r3, #10
 8001288:	18fb      	adds	r3, r7, r3
 800128a:	8819      	ldrh	r1, [r3, #0]
 800128c:	68f8      	ldr	r0, [r7, #12]
 800128e:	4b55      	ldr	r3, [pc, #340]	; (80013e4 <HAL_I2C_Master_Receive+0x208>)
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	0023      	movs	r3, r4
 8001294:	f000 fe4e 	bl	8001f34 <I2C_TransferConfig>
 8001298:	e076      	b.n	8001388 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800129e:	b29a      	uxth	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	2380      	movs	r3, #128	; 0x80
 80012ac:	049c      	lsls	r4, r3, #18
 80012ae:	230a      	movs	r3, #10
 80012b0:	18fb      	adds	r3, r7, r3
 80012b2:	8819      	ldrh	r1, [r3, #0]
 80012b4:	68f8      	ldr	r0, [r7, #12]
 80012b6:	4b4b      	ldr	r3, [pc, #300]	; (80013e4 <HAL_I2C_Master_Receive+0x208>)
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	0023      	movs	r3, r4
 80012bc:	f000 fe3a 	bl	8001f34 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80012c0:	e062      	b.n	8001388 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	0018      	movs	r0, r3
 80012ca:	f000 fcb1 	bl	8001c30 <I2C_WaitOnRXNEFlagUntilTimeout>
 80012ce:	1e03      	subs	r3, r0, #0
 80012d0:	d001      	beq.n	80012d6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e082      	b.n	80013dc <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e8:	1c5a      	adds	r2, r3, #1
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012f2:	3b01      	subs	r3, #1
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012fe:	b29b      	uxth	r3, r3
 8001300:	3b01      	subs	r3, #1
 8001302:	b29a      	uxth	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800130c:	b29b      	uxth	r3, r3
 800130e:	2b00      	cmp	r3, #0
 8001310:	d03a      	beq.n	8001388 <HAL_I2C_Master_Receive+0x1ac>
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001316:	2b00      	cmp	r3, #0
 8001318:	d136      	bne.n	8001388 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800131a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800131c:	68f8      	ldr	r0, [r7, #12]
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	0013      	movs	r3, r2
 8001324:	2200      	movs	r2, #0
 8001326:	2180      	movs	r1, #128	; 0x80
 8001328:	f000 fbaa 	bl	8001a80 <I2C_WaitOnFlagUntilTimeout>
 800132c:	1e03      	subs	r3, r0, #0
 800132e:	d001      	beq.n	8001334 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e053      	b.n	80013dc <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001338:	b29b      	uxth	r3, r3
 800133a:	2bff      	cmp	r3, #255	; 0xff
 800133c:	d911      	bls.n	8001362 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	22ff      	movs	r2, #255	; 0xff
 8001342:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001348:	b2da      	uxtb	r2, r3
 800134a:	2380      	movs	r3, #128	; 0x80
 800134c:	045c      	lsls	r4, r3, #17
 800134e:	230a      	movs	r3, #10
 8001350:	18fb      	adds	r3, r7, r3
 8001352:	8819      	ldrh	r1, [r3, #0]
 8001354:	68f8      	ldr	r0, [r7, #12]
 8001356:	2300      	movs	r3, #0
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	0023      	movs	r3, r4
 800135c:	f000 fdea 	bl	8001f34 <I2C_TransferConfig>
 8001360:	e012      	b.n	8001388 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001366:	b29a      	uxth	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001370:	b2da      	uxtb	r2, r3
 8001372:	2380      	movs	r3, #128	; 0x80
 8001374:	049c      	lsls	r4, r3, #18
 8001376:	230a      	movs	r3, #10
 8001378:	18fb      	adds	r3, r7, r3
 800137a:	8819      	ldrh	r1, [r3, #0]
 800137c:	68f8      	ldr	r0, [r7, #12]
 800137e:	2300      	movs	r3, #0
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	0023      	movs	r3, r4
 8001384:	f000 fdd6 	bl	8001f34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800138c:	b29b      	uxth	r3, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	d197      	bne.n	80012c2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	0018      	movs	r0, r3
 800139a:	f000 fc05 	bl	8001ba8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800139e:	1e03      	subs	r3, r0, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e01a      	b.n	80013dc <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2220      	movs	r2, #32
 80013ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	490b      	ldr	r1, [pc, #44]	; (80013e8 <HAL_I2C_Master_Receive+0x20c>)
 80013ba:	400a      	ands	r2, r1
 80013bc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2241      	movs	r2, #65	; 0x41
 80013c2:	2120      	movs	r1, #32
 80013c4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2242      	movs	r2, #66	; 0x42
 80013ca:	2100      	movs	r1, #0
 80013cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2240      	movs	r2, #64	; 0x40
 80013d2:	2100      	movs	r1, #0
 80013d4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	e000      	b.n	80013dc <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80013da:	2302      	movs	r3, #2
  }
}
 80013dc:	0018      	movs	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	b007      	add	sp, #28
 80013e2:	bd90      	pop	{r4, r7, pc}
 80013e4:	80002400 	.word	0x80002400
 80013e8:	fe00e800 	.word	0xfe00e800

080013ec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013ec:	b590      	push	{r4, r7, lr}
 80013ee:	b089      	sub	sp, #36	; 0x24
 80013f0:	af02      	add	r7, sp, #8
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	000c      	movs	r4, r1
 80013f6:	0010      	movs	r0, r2
 80013f8:	0019      	movs	r1, r3
 80013fa:	230a      	movs	r3, #10
 80013fc:	18fb      	adds	r3, r7, r3
 80013fe:	1c22      	adds	r2, r4, #0
 8001400:	801a      	strh	r2, [r3, #0]
 8001402:	2308      	movs	r3, #8
 8001404:	18fb      	adds	r3, r7, r3
 8001406:	1c02      	adds	r2, r0, #0
 8001408:	801a      	strh	r2, [r3, #0]
 800140a:	1dbb      	adds	r3, r7, #6
 800140c:	1c0a      	adds	r2, r1, #0
 800140e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2241      	movs	r2, #65	; 0x41
 8001414:	5c9b      	ldrb	r3, [r3, r2]
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2b20      	cmp	r3, #32
 800141a:	d000      	beq.n	800141e <HAL_I2C_Mem_Write+0x32>
 800141c:	e10c      	b.n	8001638 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800141e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001420:	2b00      	cmp	r3, #0
 8001422:	d004      	beq.n	800142e <HAL_I2C_Mem_Write+0x42>
 8001424:	232c      	movs	r3, #44	; 0x2c
 8001426:	18fb      	adds	r3, r7, r3
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d105      	bne.n	800143a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2280      	movs	r2, #128	; 0x80
 8001432:	0092      	lsls	r2, r2, #2
 8001434:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e0ff      	b.n	800163a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2240      	movs	r2, #64	; 0x40
 800143e:	5c9b      	ldrb	r3, [r3, r2]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d101      	bne.n	8001448 <HAL_I2C_Mem_Write+0x5c>
 8001444:	2302      	movs	r3, #2
 8001446:	e0f8      	b.n	800163a <HAL_I2C_Mem_Write+0x24e>
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2240      	movs	r2, #64	; 0x40
 800144c:	2101      	movs	r1, #1
 800144e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001450:	f7ff fbe4 	bl	8000c1c <HAL_GetTick>
 8001454:	0003      	movs	r3, r0
 8001456:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001458:	2380      	movs	r3, #128	; 0x80
 800145a:	0219      	lsls	r1, r3, #8
 800145c:	68f8      	ldr	r0, [r7, #12]
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	2319      	movs	r3, #25
 8001464:	2201      	movs	r2, #1
 8001466:	f000 fb0b 	bl	8001a80 <I2C_WaitOnFlagUntilTimeout>
 800146a:	1e03      	subs	r3, r0, #0
 800146c:	d001      	beq.n	8001472 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e0e3      	b.n	800163a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2241      	movs	r2, #65	; 0x41
 8001476:	2121      	movs	r1, #33	; 0x21
 8001478:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2242      	movs	r2, #66	; 0x42
 800147e:	2140      	movs	r1, #64	; 0x40
 8001480:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2200      	movs	r2, #0
 8001486:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800148c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	222c      	movs	r2, #44	; 0x2c
 8001492:	18ba      	adds	r2, r7, r2
 8001494:	8812      	ldrh	r2, [r2, #0]
 8001496:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2200      	movs	r2, #0
 800149c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800149e:	1dbb      	adds	r3, r7, #6
 80014a0:	881c      	ldrh	r4, [r3, #0]
 80014a2:	2308      	movs	r3, #8
 80014a4:	18fb      	adds	r3, r7, r3
 80014a6:	881a      	ldrh	r2, [r3, #0]
 80014a8:	230a      	movs	r3, #10
 80014aa:	18fb      	adds	r3, r7, r3
 80014ac:	8819      	ldrh	r1, [r3, #0]
 80014ae:	68f8      	ldr	r0, [r7, #12]
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	9301      	str	r3, [sp, #4]
 80014b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	0023      	movs	r3, r4
 80014ba:	f000 f9f9 	bl	80018b0 <I2C_RequestMemoryWrite>
 80014be:	1e03      	subs	r3, r0, #0
 80014c0:	d005      	beq.n	80014ce <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2240      	movs	r2, #64	; 0x40
 80014c6:	2100      	movs	r1, #0
 80014c8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e0b5      	b.n	800163a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	2bff      	cmp	r3, #255	; 0xff
 80014d6:	d911      	bls.n	80014fc <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	22ff      	movs	r2, #255	; 0xff
 80014dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	045c      	lsls	r4, r3, #17
 80014e8:	230a      	movs	r3, #10
 80014ea:	18fb      	adds	r3, r7, r3
 80014ec:	8819      	ldrh	r1, [r3, #0]
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	2300      	movs	r3, #0
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	0023      	movs	r3, r4
 80014f6:	f000 fd1d 	bl	8001f34 <I2C_TransferConfig>
 80014fa:	e012      	b.n	8001522 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001500:	b29a      	uxth	r2, r3
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800150a:	b2da      	uxtb	r2, r3
 800150c:	2380      	movs	r3, #128	; 0x80
 800150e:	049c      	lsls	r4, r3, #18
 8001510:	230a      	movs	r3, #10
 8001512:	18fb      	adds	r3, r7, r3
 8001514:	8819      	ldrh	r1, [r3, #0]
 8001516:	68f8      	ldr	r0, [r7, #12]
 8001518:	2300      	movs	r3, #0
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	0023      	movs	r3, r4
 800151e:	f000 fd09 	bl	8001f34 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	0018      	movs	r0, r3
 800152a:	f000 faf7 	bl	8001b1c <I2C_WaitOnTXISFlagUntilTimeout>
 800152e:	1e03      	subs	r3, r0, #0
 8001530:	d001      	beq.n	8001536 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e081      	b.n	800163a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153a:	781a      	ldrb	r2, [r3, #0]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001546:	1c5a      	adds	r2, r3, #1
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001550:	b29b      	uxth	r3, r3
 8001552:	3b01      	subs	r3, #1
 8001554:	b29a      	uxth	r2, r3
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800155e:	3b01      	subs	r3, #1
 8001560:	b29a      	uxth	r2, r3
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800156a:	b29b      	uxth	r3, r3
 800156c:	2b00      	cmp	r3, #0
 800156e:	d03a      	beq.n	80015e6 <HAL_I2C_Mem_Write+0x1fa>
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001574:	2b00      	cmp	r3, #0
 8001576:	d136      	bne.n	80015e6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800157a:	68f8      	ldr	r0, [r7, #12]
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	0013      	movs	r3, r2
 8001582:	2200      	movs	r2, #0
 8001584:	2180      	movs	r1, #128	; 0x80
 8001586:	f000 fa7b 	bl	8001a80 <I2C_WaitOnFlagUntilTimeout>
 800158a:	1e03      	subs	r3, r0, #0
 800158c:	d001      	beq.n	8001592 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e053      	b.n	800163a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001596:	b29b      	uxth	r3, r3
 8001598:	2bff      	cmp	r3, #255	; 0xff
 800159a:	d911      	bls.n	80015c0 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	22ff      	movs	r2, #255	; 0xff
 80015a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	045c      	lsls	r4, r3, #17
 80015ac:	230a      	movs	r3, #10
 80015ae:	18fb      	adds	r3, r7, r3
 80015b0:	8819      	ldrh	r1, [r3, #0]
 80015b2:	68f8      	ldr	r0, [r7, #12]
 80015b4:	2300      	movs	r3, #0
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	0023      	movs	r3, r4
 80015ba:	f000 fcbb 	bl	8001f34 <I2C_TransferConfig>
 80015be:	e012      	b.n	80015e6 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	2380      	movs	r3, #128	; 0x80
 80015d2:	049c      	lsls	r4, r3, #18
 80015d4:	230a      	movs	r3, #10
 80015d6:	18fb      	adds	r3, r7, r3
 80015d8:	8819      	ldrh	r1, [r3, #0]
 80015da:	68f8      	ldr	r0, [r7, #12]
 80015dc:	2300      	movs	r3, #0
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	0023      	movs	r3, r4
 80015e2:	f000 fca7 	bl	8001f34 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d198      	bne.n	8001522 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	0018      	movs	r0, r3
 80015f8:	f000 fad6 	bl	8001ba8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80015fc:	1e03      	subs	r3, r0, #0
 80015fe:	d001      	beq.n	8001604 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e01a      	b.n	800163a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2220      	movs	r2, #32
 800160a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	490b      	ldr	r1, [pc, #44]	; (8001644 <HAL_I2C_Mem_Write+0x258>)
 8001618:	400a      	ands	r2, r1
 800161a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2241      	movs	r2, #65	; 0x41
 8001620:	2120      	movs	r1, #32
 8001622:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2242      	movs	r2, #66	; 0x42
 8001628:	2100      	movs	r1, #0
 800162a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2240      	movs	r2, #64	; 0x40
 8001630:	2100      	movs	r1, #0
 8001632:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001634:	2300      	movs	r3, #0
 8001636:	e000      	b.n	800163a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001638:	2302      	movs	r3, #2
  }
}
 800163a:	0018      	movs	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	b007      	add	sp, #28
 8001640:	bd90      	pop	{r4, r7, pc}
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	fe00e800 	.word	0xfe00e800

08001648 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001648:	b590      	push	{r4, r7, lr}
 800164a:	b089      	sub	sp, #36	; 0x24
 800164c:	af02      	add	r7, sp, #8
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	000c      	movs	r4, r1
 8001652:	0010      	movs	r0, r2
 8001654:	0019      	movs	r1, r3
 8001656:	230a      	movs	r3, #10
 8001658:	18fb      	adds	r3, r7, r3
 800165a:	1c22      	adds	r2, r4, #0
 800165c:	801a      	strh	r2, [r3, #0]
 800165e:	2308      	movs	r3, #8
 8001660:	18fb      	adds	r3, r7, r3
 8001662:	1c02      	adds	r2, r0, #0
 8001664:	801a      	strh	r2, [r3, #0]
 8001666:	1dbb      	adds	r3, r7, #6
 8001668:	1c0a      	adds	r2, r1, #0
 800166a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2241      	movs	r2, #65	; 0x41
 8001670:	5c9b      	ldrb	r3, [r3, r2]
 8001672:	b2db      	uxtb	r3, r3
 8001674:	2b20      	cmp	r3, #32
 8001676:	d000      	beq.n	800167a <HAL_I2C_Mem_Read+0x32>
 8001678:	e110      	b.n	800189c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800167a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800167c:	2b00      	cmp	r3, #0
 800167e:	d004      	beq.n	800168a <HAL_I2C_Mem_Read+0x42>
 8001680:	232c      	movs	r3, #44	; 0x2c
 8001682:	18fb      	adds	r3, r7, r3
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d105      	bne.n	8001696 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2280      	movs	r2, #128	; 0x80
 800168e:	0092      	lsls	r2, r2, #2
 8001690:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e103      	b.n	800189e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2240      	movs	r2, #64	; 0x40
 800169a:	5c9b      	ldrb	r3, [r3, r2]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d101      	bne.n	80016a4 <HAL_I2C_Mem_Read+0x5c>
 80016a0:	2302      	movs	r3, #2
 80016a2:	e0fc      	b.n	800189e <HAL_I2C_Mem_Read+0x256>
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2240      	movs	r2, #64	; 0x40
 80016a8:	2101      	movs	r1, #1
 80016aa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016ac:	f7ff fab6 	bl	8000c1c <HAL_GetTick>
 80016b0:	0003      	movs	r3, r0
 80016b2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016b4:	2380      	movs	r3, #128	; 0x80
 80016b6:	0219      	lsls	r1, r3, #8
 80016b8:	68f8      	ldr	r0, [r7, #12]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	2319      	movs	r3, #25
 80016c0:	2201      	movs	r2, #1
 80016c2:	f000 f9dd 	bl	8001a80 <I2C_WaitOnFlagUntilTimeout>
 80016c6:	1e03      	subs	r3, r0, #0
 80016c8:	d001      	beq.n	80016ce <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e0e7      	b.n	800189e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2241      	movs	r2, #65	; 0x41
 80016d2:	2122      	movs	r1, #34	; 0x22
 80016d4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2242      	movs	r2, #66	; 0x42
 80016da:	2140      	movs	r1, #64	; 0x40
 80016dc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2200      	movs	r2, #0
 80016e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	222c      	movs	r2, #44	; 0x2c
 80016ee:	18ba      	adds	r2, r7, r2
 80016f0:	8812      	ldrh	r2, [r2, #0]
 80016f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2200      	movs	r2, #0
 80016f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016fa:	1dbb      	adds	r3, r7, #6
 80016fc:	881c      	ldrh	r4, [r3, #0]
 80016fe:	2308      	movs	r3, #8
 8001700:	18fb      	adds	r3, r7, r3
 8001702:	881a      	ldrh	r2, [r3, #0]
 8001704:	230a      	movs	r3, #10
 8001706:	18fb      	adds	r3, r7, r3
 8001708:	8819      	ldrh	r1, [r3, #0]
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	0023      	movs	r3, r4
 8001716:	f000 f92f 	bl	8001978 <I2C_RequestMemoryRead>
 800171a:	1e03      	subs	r3, r0, #0
 800171c:	d005      	beq.n	800172a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2240      	movs	r2, #64	; 0x40
 8001722:	2100      	movs	r1, #0
 8001724:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e0b9      	b.n	800189e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800172e:	b29b      	uxth	r3, r3
 8001730:	2bff      	cmp	r3, #255	; 0xff
 8001732:	d911      	bls.n	8001758 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	22ff      	movs	r2, #255	; 0xff
 8001738:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800173e:	b2da      	uxtb	r2, r3
 8001740:	2380      	movs	r3, #128	; 0x80
 8001742:	045c      	lsls	r4, r3, #17
 8001744:	230a      	movs	r3, #10
 8001746:	18fb      	adds	r3, r7, r3
 8001748:	8819      	ldrh	r1, [r3, #0]
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	4b56      	ldr	r3, [pc, #344]	; (80018a8 <HAL_I2C_Mem_Read+0x260>)
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	0023      	movs	r3, r4
 8001752:	f000 fbef 	bl	8001f34 <I2C_TransferConfig>
 8001756:	e012      	b.n	800177e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800175c:	b29a      	uxth	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001766:	b2da      	uxtb	r2, r3
 8001768:	2380      	movs	r3, #128	; 0x80
 800176a:	049c      	lsls	r4, r3, #18
 800176c:	230a      	movs	r3, #10
 800176e:	18fb      	adds	r3, r7, r3
 8001770:	8819      	ldrh	r1, [r3, #0]
 8001772:	68f8      	ldr	r0, [r7, #12]
 8001774:	4b4c      	ldr	r3, [pc, #304]	; (80018a8 <HAL_I2C_Mem_Read+0x260>)
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	0023      	movs	r3, r4
 800177a:	f000 fbdb 	bl	8001f34 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800177e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	0013      	movs	r3, r2
 8001788:	2200      	movs	r2, #0
 800178a:	2104      	movs	r1, #4
 800178c:	f000 f978 	bl	8001a80 <I2C_WaitOnFlagUntilTimeout>
 8001790:	1e03      	subs	r3, r0, #0
 8001792:	d001      	beq.n	8001798 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e082      	b.n	800189e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017aa:	1c5a      	adds	r2, r3, #1
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b4:	3b01      	subs	r3, #1
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	3b01      	subs	r3, #1
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d03a      	beq.n	800184a <HAL_I2C_Mem_Read+0x202>
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d136      	bne.n	800184a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	0013      	movs	r3, r2
 80017e6:	2200      	movs	r2, #0
 80017e8:	2180      	movs	r1, #128	; 0x80
 80017ea:	f000 f949 	bl	8001a80 <I2C_WaitOnFlagUntilTimeout>
 80017ee:	1e03      	subs	r3, r0, #0
 80017f0:	d001      	beq.n	80017f6 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e053      	b.n	800189e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	2bff      	cmp	r3, #255	; 0xff
 80017fe:	d911      	bls.n	8001824 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	22ff      	movs	r2, #255	; 0xff
 8001804:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800180a:	b2da      	uxtb	r2, r3
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	045c      	lsls	r4, r3, #17
 8001810:	230a      	movs	r3, #10
 8001812:	18fb      	adds	r3, r7, r3
 8001814:	8819      	ldrh	r1, [r3, #0]
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	2300      	movs	r3, #0
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	0023      	movs	r3, r4
 800181e:	f000 fb89 	bl	8001f34 <I2C_TransferConfig>
 8001822:	e012      	b.n	800184a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001828:	b29a      	uxth	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001832:	b2da      	uxtb	r2, r3
 8001834:	2380      	movs	r3, #128	; 0x80
 8001836:	049c      	lsls	r4, r3, #18
 8001838:	230a      	movs	r3, #10
 800183a:	18fb      	adds	r3, r7, r3
 800183c:	8819      	ldrh	r1, [r3, #0]
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	2300      	movs	r3, #0
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	0023      	movs	r3, r4
 8001846:	f000 fb75 	bl	8001f34 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800184e:	b29b      	uxth	r3, r3
 8001850:	2b00      	cmp	r3, #0
 8001852:	d194      	bne.n	800177e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	0018      	movs	r0, r3
 800185c:	f000 f9a4 	bl	8001ba8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001860:	1e03      	subs	r3, r0, #0
 8001862:	d001      	beq.n	8001868 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e01a      	b.n	800189e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2220      	movs	r2, #32
 800186e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	490c      	ldr	r1, [pc, #48]	; (80018ac <HAL_I2C_Mem_Read+0x264>)
 800187c:	400a      	ands	r2, r1
 800187e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2241      	movs	r2, #65	; 0x41
 8001884:	2120      	movs	r1, #32
 8001886:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2242      	movs	r2, #66	; 0x42
 800188c:	2100      	movs	r1, #0
 800188e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2240      	movs	r2, #64	; 0x40
 8001894:	2100      	movs	r1, #0
 8001896:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001898:	2300      	movs	r3, #0
 800189a:	e000      	b.n	800189e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800189c:	2302      	movs	r3, #2
  }
}
 800189e:	0018      	movs	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	b007      	add	sp, #28
 80018a4:	bd90      	pop	{r4, r7, pc}
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	80002400 	.word	0x80002400
 80018ac:	fe00e800 	.word	0xfe00e800

080018b0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80018b0:	b5b0      	push	{r4, r5, r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af02      	add	r7, sp, #8
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	000c      	movs	r4, r1
 80018ba:	0010      	movs	r0, r2
 80018bc:	0019      	movs	r1, r3
 80018be:	250a      	movs	r5, #10
 80018c0:	197b      	adds	r3, r7, r5
 80018c2:	1c22      	adds	r2, r4, #0
 80018c4:	801a      	strh	r2, [r3, #0]
 80018c6:	2308      	movs	r3, #8
 80018c8:	18fb      	adds	r3, r7, r3
 80018ca:	1c02      	adds	r2, r0, #0
 80018cc:	801a      	strh	r2, [r3, #0]
 80018ce:	1dbb      	adds	r3, r7, #6
 80018d0:	1c0a      	adds	r2, r1, #0
 80018d2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80018d4:	1dbb      	adds	r3, r7, #6
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	2380      	movs	r3, #128	; 0x80
 80018dc:	045c      	lsls	r4, r3, #17
 80018de:	197b      	adds	r3, r7, r5
 80018e0:	8819      	ldrh	r1, [r3, #0]
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	4b23      	ldr	r3, [pc, #140]	; (8001974 <I2C_RequestMemoryWrite+0xc4>)
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	0023      	movs	r3, r4
 80018ea:	f000 fb23 	bl	8001f34 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f0:	6a39      	ldr	r1, [r7, #32]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	0018      	movs	r0, r3
 80018f6:	f000 f911 	bl	8001b1c <I2C_WaitOnTXISFlagUntilTimeout>
 80018fa:	1e03      	subs	r3, r0, #0
 80018fc:	d001      	beq.n	8001902 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e033      	b.n	800196a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001902:	1dbb      	adds	r3, r7, #6
 8001904:	881b      	ldrh	r3, [r3, #0]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d107      	bne.n	800191a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800190a:	2308      	movs	r3, #8
 800190c:	18fb      	adds	r3, r7, r3
 800190e:	881b      	ldrh	r3, [r3, #0]
 8001910:	b2da      	uxtb	r2, r3
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	629a      	str	r2, [r3, #40]	; 0x28
 8001918:	e019      	b.n	800194e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800191a:	2308      	movs	r3, #8
 800191c:	18fb      	adds	r3, r7, r3
 800191e:	881b      	ldrh	r3, [r3, #0]
 8001920:	0a1b      	lsrs	r3, r3, #8
 8001922:	b29b      	uxth	r3, r3
 8001924:	b2da      	uxtb	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800192c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800192e:	6a39      	ldr	r1, [r7, #32]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	0018      	movs	r0, r3
 8001934:	f000 f8f2 	bl	8001b1c <I2C_WaitOnTXISFlagUntilTimeout>
 8001938:	1e03      	subs	r3, r0, #0
 800193a:	d001      	beq.n	8001940 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e014      	b.n	800196a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001940:	2308      	movs	r3, #8
 8001942:	18fb      	adds	r3, r7, r3
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	b2da      	uxtb	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800194e:	6a3a      	ldr	r2, [r7, #32]
 8001950:	68f8      	ldr	r0, [r7, #12]
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	0013      	movs	r3, r2
 8001958:	2200      	movs	r2, #0
 800195a:	2180      	movs	r1, #128	; 0x80
 800195c:	f000 f890 	bl	8001a80 <I2C_WaitOnFlagUntilTimeout>
 8001960:	1e03      	subs	r3, r0, #0
 8001962:	d001      	beq.n	8001968 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e000      	b.n	800196a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	0018      	movs	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	b004      	add	sp, #16
 8001970:	bdb0      	pop	{r4, r5, r7, pc}
 8001972:	46c0      	nop			; (mov r8, r8)
 8001974:	80002000 	.word	0x80002000

08001978 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001978:	b5b0      	push	{r4, r5, r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af02      	add	r7, sp, #8
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	000c      	movs	r4, r1
 8001982:	0010      	movs	r0, r2
 8001984:	0019      	movs	r1, r3
 8001986:	250a      	movs	r5, #10
 8001988:	197b      	adds	r3, r7, r5
 800198a:	1c22      	adds	r2, r4, #0
 800198c:	801a      	strh	r2, [r3, #0]
 800198e:	2308      	movs	r3, #8
 8001990:	18fb      	adds	r3, r7, r3
 8001992:	1c02      	adds	r2, r0, #0
 8001994:	801a      	strh	r2, [r3, #0]
 8001996:	1dbb      	adds	r3, r7, #6
 8001998:	1c0a      	adds	r2, r1, #0
 800199a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800199c:	1dbb      	adds	r3, r7, #6
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	197b      	adds	r3, r7, r5
 80019a4:	8819      	ldrh	r1, [r3, #0]
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	4b23      	ldr	r3, [pc, #140]	; (8001a38 <I2C_RequestMemoryRead+0xc0>)
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	2300      	movs	r3, #0
 80019ae:	f000 fac1 	bl	8001f34 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019b4:	6a39      	ldr	r1, [r7, #32]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	0018      	movs	r0, r3
 80019ba:	f000 f8af 	bl	8001b1c <I2C_WaitOnTXISFlagUntilTimeout>
 80019be:	1e03      	subs	r3, r0, #0
 80019c0:	d001      	beq.n	80019c6 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e033      	b.n	8001a2e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80019c6:	1dbb      	adds	r3, r7, #6
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d107      	bne.n	80019de <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80019ce:	2308      	movs	r3, #8
 80019d0:	18fb      	adds	r3, r7, r3
 80019d2:	881b      	ldrh	r3, [r3, #0]
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	629a      	str	r2, [r3, #40]	; 0x28
 80019dc:	e019      	b.n	8001a12 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80019de:	2308      	movs	r3, #8
 80019e0:	18fb      	adds	r3, r7, r3
 80019e2:	881b      	ldrh	r3, [r3, #0]
 80019e4:	0a1b      	lsrs	r3, r3, #8
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f2:	6a39      	ldr	r1, [r7, #32]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	0018      	movs	r0, r3
 80019f8:	f000 f890 	bl	8001b1c <I2C_WaitOnTXISFlagUntilTimeout>
 80019fc:	1e03      	subs	r3, r0, #0
 80019fe:	d001      	beq.n	8001a04 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e014      	b.n	8001a2e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a04:	2308      	movs	r3, #8
 8001a06:	18fb      	adds	r3, r7, r3
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001a12:	6a3a      	ldr	r2, [r7, #32]
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	0013      	movs	r3, r2
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2140      	movs	r1, #64	; 0x40
 8001a20:	f000 f82e 	bl	8001a80 <I2C_WaitOnFlagUntilTimeout>
 8001a24:	1e03      	subs	r3, r0, #0
 8001a26:	d001      	beq.n	8001a2c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	0018      	movs	r0, r3
 8001a30:	46bd      	mov	sp, r7
 8001a32:	b004      	add	sp, #16
 8001a34:	bdb0      	pop	{r4, r5, r7, pc}
 8001a36:	46c0      	nop			; (mov r8, r8)
 8001a38:	80002000 	.word	0x80002000

08001a3c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d103      	bne.n	8001a5a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2200      	movs	r2, #0
 8001a58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	2201      	movs	r2, #1
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d007      	beq.n	8001a78 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	699a      	ldr	r2, [r3, #24]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2101      	movs	r1, #1
 8001a74:	430a      	orrs	r2, r1
 8001a76:	619a      	str	r2, [r3, #24]
  }
}
 8001a78:	46c0      	nop			; (mov r8, r8)
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	b002      	add	sp, #8
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	603b      	str	r3, [r7, #0]
 8001a8c:	1dfb      	adds	r3, r7, #7
 8001a8e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a90:	e030      	b.n	8001af4 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	3301      	adds	r3, #1
 8001a96:	d02d      	beq.n	8001af4 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a98:	f7ff f8c0 	bl	8000c1c <HAL_GetTick>
 8001a9c:	0002      	movs	r2, r0
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d302      	bcc.n	8001aae <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d122      	bne.n	8001af4 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	68ba      	ldr	r2, [r7, #8]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	68ba      	ldr	r2, [r7, #8]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	425a      	negs	r2, r3
 8001abe:	4153      	adcs	r3, r2
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	001a      	movs	r2, r3
 8001ac4:	1dfb      	adds	r3, r7, #7
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d113      	bne.n	8001af4 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad0:	2220      	movs	r2, #32
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2241      	movs	r2, #65	; 0x41
 8001adc:	2120      	movs	r1, #32
 8001ade:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2242      	movs	r2, #66	; 0x42
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2240      	movs	r2, #64	; 0x40
 8001aec:	2100      	movs	r1, #0
 8001aee:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e00f      	b.n	8001b14 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	4013      	ands	r3, r2
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	425a      	negs	r2, r3
 8001b04:	4153      	adcs	r3, r2
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	001a      	movs	r2, r3
 8001b0a:	1dfb      	adds	r3, r7, #7
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d0bf      	beq.n	8001a92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	0018      	movs	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	b004      	add	sp, #16
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b28:	e032      	b.n	8001b90 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	68b9      	ldr	r1, [r7, #8]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	0018      	movs	r0, r3
 8001b32:	f000 f8ff 	bl	8001d34 <I2C_IsErrorOccurred>
 8001b36:	1e03      	subs	r3, r0, #0
 8001b38:	d001      	beq.n	8001b3e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e030      	b.n	8001ba0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	3301      	adds	r3, #1
 8001b42:	d025      	beq.n	8001b90 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b44:	f7ff f86a 	bl	8000c1c <HAL_GetTick>
 8001b48:	0002      	movs	r2, r0
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d302      	bcc.n	8001b5a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d11a      	bne.n	8001b90 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	2202      	movs	r2, #2
 8001b62:	4013      	ands	r3, r2
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d013      	beq.n	8001b90 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6c:	2220      	movs	r2, #32
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2241      	movs	r2, #65	; 0x41
 8001b78:	2120      	movs	r1, #32
 8001b7a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2242      	movs	r2, #66	; 0x42
 8001b80:	2100      	movs	r1, #0
 8001b82:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2240      	movs	r2, #64	; 0x40
 8001b88:	2100      	movs	r1, #0
 8001b8a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e007      	b.n	8001ba0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	2202      	movs	r2, #2
 8001b98:	4013      	ands	r3, r2
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d1c5      	bne.n	8001b2a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	b004      	add	sp, #16
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bb4:	e02f      	b.n	8001c16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	68b9      	ldr	r1, [r7, #8]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	f000 f8b9 	bl	8001d34 <I2C_IsErrorOccurred>
 8001bc2:	1e03      	subs	r3, r0, #0
 8001bc4:	d001      	beq.n	8001bca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e02d      	b.n	8001c26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bca:	f7ff f827 	bl	8000c1c <HAL_GetTick>
 8001bce:	0002      	movs	r2, r0
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	68ba      	ldr	r2, [r7, #8]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d302      	bcc.n	8001be0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d11a      	bne.n	8001c16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	2220      	movs	r2, #32
 8001be8:	4013      	ands	r3, r2
 8001bea:	2b20      	cmp	r3, #32
 8001bec:	d013      	beq.n	8001c16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2241      	movs	r2, #65	; 0x41
 8001bfe:	2120      	movs	r1, #32
 8001c00:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2242      	movs	r2, #66	; 0x42
 8001c06:	2100      	movs	r1, #0
 8001c08:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2240      	movs	r2, #64	; 0x40
 8001c0e:	2100      	movs	r1, #0
 8001c10:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e007      	b.n	8001c26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	4013      	ands	r3, r2
 8001c20:	2b20      	cmp	r3, #32
 8001c22:	d1c8      	bne.n	8001bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	0018      	movs	r0, r3
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	b004      	add	sp, #16
 8001c2c:	bd80      	pop	{r7, pc}
	...

08001c30 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001c3c:	e06b      	b.n	8001d16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	68b9      	ldr	r1, [r7, #8]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	0018      	movs	r0, r3
 8001c46:	f000 f875 	bl	8001d34 <I2C_IsErrorOccurred>
 8001c4a:	1e03      	subs	r3, r0, #0
 8001c4c:	d001      	beq.n	8001c52 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e069      	b.n	8001d26 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	2220      	movs	r2, #32
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	2b20      	cmp	r3, #32
 8001c5e:	d138      	bne.n	8001cd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	2204      	movs	r2, #4
 8001c68:	4013      	ands	r3, r2
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	d105      	bne.n	8001c7a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	e055      	b.n	8001d26 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	2210      	movs	r2, #16
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b10      	cmp	r3, #16
 8001c86:	d107      	bne.n	8001c98 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2210      	movs	r2, #16
 8001c8e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2204      	movs	r2, #4
 8001c94:	645a      	str	r2, [r3, #68]	; 0x44
 8001c96:	e002      	b.n	8001c9e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	491f      	ldr	r1, [pc, #124]	; (8001d30 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8001cb2:	400a      	ands	r2, r1
 8001cb4:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2241      	movs	r2, #65	; 0x41
 8001cba:	2120      	movs	r1, #32
 8001cbc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2242      	movs	r2, #66	; 0x42
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2240      	movs	r2, #64	; 0x40
 8001cca:	2100      	movs	r1, #0
 8001ccc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e029      	b.n	8001d26 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cd2:	f7fe ffa3 	bl	8000c1c <HAL_GetTick>
 8001cd6:	0002      	movs	r2, r0
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	68ba      	ldr	r2, [r7, #8]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d302      	bcc.n	8001ce8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d116      	bne.n	8001d16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	2204      	movs	r2, #4
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d00f      	beq.n	8001d16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	2220      	movs	r2, #32
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2241      	movs	r2, #65	; 0x41
 8001d06:	2120      	movs	r1, #32
 8001d08:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2240      	movs	r2, #64	; 0x40
 8001d0e:	2100      	movs	r1, #0
 8001d10:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e007      	b.n	8001d26 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	2204      	movs	r2, #4
 8001d1e:	4013      	ands	r3, r2
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	d18c      	bne.n	8001c3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	0018      	movs	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	b004      	add	sp, #16
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	46c0      	nop			; (mov r8, r8)
 8001d30:	fe00e800 	.word	0xfe00e800

08001d34 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d34:	b590      	push	{r4, r7, lr}
 8001d36:	b08b      	sub	sp, #44	; 0x2c
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d40:	2327      	movs	r3, #39	; 0x27
 8001d42:	18fb      	adds	r3, r7, r3
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	2210      	movs	r2, #16
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d100      	bne.n	8001d62 <I2C_IsErrorOccurred+0x2e>
 8001d60:	e082      	b.n	8001e68 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2210      	movs	r2, #16
 8001d68:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d6a:	e060      	b.n	8001e2e <I2C_IsErrorOccurred+0xfa>
 8001d6c:	2427      	movs	r4, #39	; 0x27
 8001d6e:	193b      	adds	r3, r7, r4
 8001d70:	193a      	adds	r2, r7, r4
 8001d72:	7812      	ldrb	r2, [r2, #0]
 8001d74:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	d058      	beq.n	8001e2e <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d7c:	f7fe ff4e 	bl	8000c1c <HAL_GetTick>
 8001d80:	0002      	movs	r2, r0
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d306      	bcc.n	8001d9a <I2C_IsErrorOccurred+0x66>
 8001d8c:	193b      	adds	r3, r7, r4
 8001d8e:	193a      	adds	r2, r7, r4
 8001d90:	7812      	ldrb	r2, [r2, #0]
 8001d92:	701a      	strb	r2, [r3, #0]
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d149      	bne.n	8001e2e <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	2380      	movs	r3, #128	; 0x80
 8001da2:	01db      	lsls	r3, r3, #7
 8001da4:	4013      	ands	r3, r2
 8001da6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001da8:	2013      	movs	r0, #19
 8001daa:	183b      	adds	r3, r7, r0
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	2142      	movs	r1, #66	; 0x42
 8001db0:	5c52      	ldrb	r2, [r2, r1]
 8001db2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	699a      	ldr	r2, [r3, #24]
 8001dba:	2380      	movs	r3, #128	; 0x80
 8001dbc:	021b      	lsls	r3, r3, #8
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	2380      	movs	r3, #128	; 0x80
 8001dc2:	021b      	lsls	r3, r3, #8
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d126      	bne.n	8001e16 <I2C_IsErrorOccurred+0xe2>
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	2380      	movs	r3, #128	; 0x80
 8001dcc:	01db      	lsls	r3, r3, #7
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d021      	beq.n	8001e16 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8001dd2:	183b      	adds	r3, r7, r0
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b20      	cmp	r3, #32
 8001dd8:	d01d      	beq.n	8001e16 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2180      	movs	r1, #128	; 0x80
 8001de6:	01c9      	lsls	r1, r1, #7
 8001de8:	430a      	orrs	r2, r1
 8001dea:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001dec:	f7fe ff16 	bl	8000c1c <HAL_GetTick>
 8001df0:	0003      	movs	r3, r0
 8001df2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001df4:	e00f      	b.n	8001e16 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001df6:	f7fe ff11 	bl	8000c1c <HAL_GetTick>
 8001dfa:	0002      	movs	r2, r0
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b19      	cmp	r3, #25
 8001e02:	d908      	bls.n	8001e16 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001e04:	6a3b      	ldr	r3, [r7, #32]
 8001e06:	2220      	movs	r2, #32
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001e0c:	2327      	movs	r3, #39	; 0x27
 8001e0e:	18fb      	adds	r3, r7, r3
 8001e10:	2201      	movs	r2, #1
 8001e12:	701a      	strb	r2, [r3, #0]

              break;
 8001e14:	e00b      	b.n	8001e2e <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2127      	movs	r1, #39	; 0x27
 8001e22:	187a      	adds	r2, r7, r1
 8001e24:	1879      	adds	r1, r7, r1
 8001e26:	7809      	ldrb	r1, [r1, #0]
 8001e28:	7011      	strb	r1, [r2, #0]
 8001e2a:	2b20      	cmp	r3, #32
 8001e2c:	d1e3      	bne.n	8001df6 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	2220      	movs	r2, #32
 8001e36:	4013      	ands	r3, r2
 8001e38:	2b20      	cmp	r3, #32
 8001e3a:	d004      	beq.n	8001e46 <I2C_IsErrorOccurred+0x112>
 8001e3c:	2327      	movs	r3, #39	; 0x27
 8001e3e:	18fb      	adds	r3, r7, r3
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d092      	beq.n	8001d6c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001e46:	2327      	movs	r3, #39	; 0x27
 8001e48:	18fb      	adds	r3, r7, r3
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d103      	bne.n	8001e58 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2220      	movs	r2, #32
 8001e56:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001e58:	6a3b      	ldr	r3, [r7, #32]
 8001e5a:	2204      	movs	r2, #4
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001e60:	2327      	movs	r3, #39	; 0x27
 8001e62:	18fb      	adds	r3, r7, r3
 8001e64:	2201      	movs	r2, #1
 8001e66:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	2380      	movs	r3, #128	; 0x80
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	4013      	ands	r3, r2
 8001e78:	d00c      	beq.n	8001e94 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001e7a:	6a3b      	ldr	r3, [r7, #32]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2280      	movs	r2, #128	; 0x80
 8001e88:	0052      	lsls	r2, r2, #1
 8001e8a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e8c:	2327      	movs	r3, #39	; 0x27
 8001e8e:	18fb      	adds	r3, r7, r3
 8001e90:	2201      	movs	r2, #1
 8001e92:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	2380      	movs	r3, #128	; 0x80
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d00c      	beq.n	8001eb8 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001e9e:	6a3b      	ldr	r3, [r7, #32]
 8001ea0:	2208      	movs	r2, #8
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2280      	movs	r2, #128	; 0x80
 8001eac:	00d2      	lsls	r2, r2, #3
 8001eae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001eb0:	2327      	movs	r3, #39	; 0x27
 8001eb2:	18fb      	adds	r3, r7, r3
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	2380      	movs	r3, #128	; 0x80
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d00c      	beq.n	8001edc <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2280      	movs	r2, #128	; 0x80
 8001ed0:	0092      	lsls	r2, r2, #2
 8001ed2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ed4:	2327      	movs	r3, #39	; 0x27
 8001ed6:	18fb      	adds	r3, r7, r3
 8001ed8:	2201      	movs	r2, #1
 8001eda:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001edc:	2327      	movs	r3, #39	; 0x27
 8001ede:	18fb      	adds	r3, r7, r3
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d01d      	beq.n	8001f22 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f7ff fda7 	bl	8001a3c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	490d      	ldr	r1, [pc, #52]	; (8001f30 <I2C_IsErrorOccurred+0x1fc>)
 8001efa:	400a      	ands	r2, r1
 8001efc:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f02:	6a3b      	ldr	r3, [r7, #32]
 8001f04:	431a      	orrs	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2241      	movs	r2, #65	; 0x41
 8001f0e:	2120      	movs	r1, #32
 8001f10:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2242      	movs	r2, #66	; 0x42
 8001f16:	2100      	movs	r1, #0
 8001f18:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2240      	movs	r2, #64	; 0x40
 8001f1e:	2100      	movs	r1, #0
 8001f20:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001f22:	2327      	movs	r3, #39	; 0x27
 8001f24:	18fb      	adds	r3, r7, r3
 8001f26:	781b      	ldrb	r3, [r3, #0]
}
 8001f28:	0018      	movs	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b00b      	add	sp, #44	; 0x2c
 8001f2e:	bd90      	pop	{r4, r7, pc}
 8001f30:	fe00e800 	.word	0xfe00e800

08001f34 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001f34:	b590      	push	{r4, r7, lr}
 8001f36:	b087      	sub	sp, #28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	0008      	movs	r0, r1
 8001f3e:	0011      	movs	r1, r2
 8001f40:	607b      	str	r3, [r7, #4]
 8001f42:	240a      	movs	r4, #10
 8001f44:	193b      	adds	r3, r7, r4
 8001f46:	1c02      	adds	r2, r0, #0
 8001f48:	801a      	strh	r2, [r3, #0]
 8001f4a:	2009      	movs	r0, #9
 8001f4c:	183b      	adds	r3, r7, r0
 8001f4e:	1c0a      	adds	r2, r1, #0
 8001f50:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f52:	193b      	adds	r3, r7, r4
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	059b      	lsls	r3, r3, #22
 8001f58:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f5a:	183b      	adds	r3, r7, r0
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	0419      	lsls	r1, r3, #16
 8001f60:	23ff      	movs	r3, #255	; 0xff
 8001f62:	041b      	lsls	r3, r3, #16
 8001f64:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f66:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	085b      	lsrs	r3, r3, #1
 8001f74:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f7e:	0d51      	lsrs	r1, r2, #21
 8001f80:	2280      	movs	r2, #128	; 0x80
 8001f82:	00d2      	lsls	r2, r2, #3
 8001f84:	400a      	ands	r2, r1
 8001f86:	4907      	ldr	r1, [pc, #28]	; (8001fa4 <I2C_TransferConfig+0x70>)
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	43d2      	mvns	r2, r2
 8001f8c:	401a      	ands	r2, r3
 8001f8e:	0011      	movs	r1, r2
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001f9a:	46c0      	nop			; (mov r8, r8)
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	b007      	add	sp, #28
 8001fa0:	bd90      	pop	{r4, r7, pc}
 8001fa2:	46c0      	nop			; (mov r8, r8)
 8001fa4:	03ff63ff 	.word	0x03ff63ff

08001fa8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2241      	movs	r2, #65	; 0x41
 8001fb6:	5c9b      	ldrb	r3, [r3, r2]
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b20      	cmp	r3, #32
 8001fbc:	d138      	bne.n	8002030 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2240      	movs	r2, #64	; 0x40
 8001fc2:	5c9b      	ldrb	r3, [r3, r2]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d101      	bne.n	8001fcc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e032      	b.n	8002032 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2240      	movs	r2, #64	; 0x40
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2241      	movs	r2, #65	; 0x41
 8001fd8:	2124      	movs	r1, #36	; 0x24
 8001fda:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	438a      	bics	r2, r1
 8001fea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4911      	ldr	r1, [pc, #68]	; (800203c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001ff8:	400a      	ands	r2, r1
 8001ffa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6819      	ldr	r1, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2101      	movs	r1, #1
 8002018:	430a      	orrs	r2, r1
 800201a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2241      	movs	r2, #65	; 0x41
 8002020:	2120      	movs	r1, #32
 8002022:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2240      	movs	r2, #64	; 0x40
 8002028:	2100      	movs	r1, #0
 800202a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	e000      	b.n	8002032 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002030:	2302      	movs	r3, #2
  }
}
 8002032:	0018      	movs	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	b002      	add	sp, #8
 8002038:	bd80      	pop	{r7, pc}
 800203a:	46c0      	nop			; (mov r8, r8)
 800203c:	ffffefff 	.word	0xffffefff

08002040 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2241      	movs	r2, #65	; 0x41
 800204e:	5c9b      	ldrb	r3, [r3, r2]
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b20      	cmp	r3, #32
 8002054:	d139      	bne.n	80020ca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2240      	movs	r2, #64	; 0x40
 800205a:	5c9b      	ldrb	r3, [r3, r2]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d101      	bne.n	8002064 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002060:	2302      	movs	r3, #2
 8002062:	e033      	b.n	80020cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2240      	movs	r2, #64	; 0x40
 8002068:	2101      	movs	r1, #1
 800206a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2241      	movs	r2, #65	; 0x41
 8002070:	2124      	movs	r1, #36	; 0x24
 8002072:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2101      	movs	r1, #1
 8002080:	438a      	bics	r2, r1
 8002082:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4a11      	ldr	r2, [pc, #68]	; (80020d4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002090:	4013      	ands	r3, r2
 8002092:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	021b      	lsls	r3, r3, #8
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	4313      	orrs	r3, r2
 800209c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2101      	movs	r1, #1
 80020b2:	430a      	orrs	r2, r1
 80020b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2241      	movs	r2, #65	; 0x41
 80020ba:	2120      	movs	r1, #32
 80020bc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2240      	movs	r2, #64	; 0x40
 80020c2:	2100      	movs	r1, #0
 80020c4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80020c6:	2300      	movs	r3, #0
 80020c8:	e000      	b.n	80020cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020ca:	2302      	movs	r3, #2
  }
}
 80020cc:	0018      	movs	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	b004      	add	sp, #16
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	fffff0ff 	.word	0xfffff0ff

080020d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b088      	sub	sp, #32
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d102      	bne.n	80020ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	f000 fb76 	bl	80027d8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2201      	movs	r2, #1
 80020f2:	4013      	ands	r3, r2
 80020f4:	d100      	bne.n	80020f8 <HAL_RCC_OscConfig+0x20>
 80020f6:	e08e      	b.n	8002216 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80020f8:	4bc5      	ldr	r3, [pc, #788]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	220c      	movs	r2, #12
 80020fe:	4013      	ands	r3, r2
 8002100:	2b04      	cmp	r3, #4
 8002102:	d00e      	beq.n	8002122 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002104:	4bc2      	ldr	r3, [pc, #776]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	220c      	movs	r2, #12
 800210a:	4013      	ands	r3, r2
 800210c:	2b08      	cmp	r3, #8
 800210e:	d117      	bne.n	8002140 <HAL_RCC_OscConfig+0x68>
 8002110:	4bbf      	ldr	r3, [pc, #764]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	23c0      	movs	r3, #192	; 0xc0
 8002116:	025b      	lsls	r3, r3, #9
 8002118:	401a      	ands	r2, r3
 800211a:	2380      	movs	r3, #128	; 0x80
 800211c:	025b      	lsls	r3, r3, #9
 800211e:	429a      	cmp	r2, r3
 8002120:	d10e      	bne.n	8002140 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002122:	4bbb      	ldr	r3, [pc, #748]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	2380      	movs	r3, #128	; 0x80
 8002128:	029b      	lsls	r3, r3, #10
 800212a:	4013      	ands	r3, r2
 800212c:	d100      	bne.n	8002130 <HAL_RCC_OscConfig+0x58>
 800212e:	e071      	b.n	8002214 <HAL_RCC_OscConfig+0x13c>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d000      	beq.n	800213a <HAL_RCC_OscConfig+0x62>
 8002138:	e06c      	b.n	8002214 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	f000 fb4c 	bl	80027d8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d107      	bne.n	8002158 <HAL_RCC_OscConfig+0x80>
 8002148:	4bb1      	ldr	r3, [pc, #708]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	4bb0      	ldr	r3, [pc, #704]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 800214e:	2180      	movs	r1, #128	; 0x80
 8002150:	0249      	lsls	r1, r1, #9
 8002152:	430a      	orrs	r2, r1
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	e02f      	b.n	80021b8 <HAL_RCC_OscConfig+0xe0>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10c      	bne.n	800217a <HAL_RCC_OscConfig+0xa2>
 8002160:	4bab      	ldr	r3, [pc, #684]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	4baa      	ldr	r3, [pc, #680]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 8002166:	49ab      	ldr	r1, [pc, #684]	; (8002414 <HAL_RCC_OscConfig+0x33c>)
 8002168:	400a      	ands	r2, r1
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	4ba8      	ldr	r3, [pc, #672]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	4ba7      	ldr	r3, [pc, #668]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 8002172:	49a9      	ldr	r1, [pc, #676]	; (8002418 <HAL_RCC_OscConfig+0x340>)
 8002174:	400a      	ands	r2, r1
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	e01e      	b.n	80021b8 <HAL_RCC_OscConfig+0xe0>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b05      	cmp	r3, #5
 8002180:	d10e      	bne.n	80021a0 <HAL_RCC_OscConfig+0xc8>
 8002182:	4ba3      	ldr	r3, [pc, #652]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	4ba2      	ldr	r3, [pc, #648]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 8002188:	2180      	movs	r1, #128	; 0x80
 800218a:	02c9      	lsls	r1, r1, #11
 800218c:	430a      	orrs	r2, r1
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	4b9f      	ldr	r3, [pc, #636]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	4b9e      	ldr	r3, [pc, #632]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 8002196:	2180      	movs	r1, #128	; 0x80
 8002198:	0249      	lsls	r1, r1, #9
 800219a:	430a      	orrs	r2, r1
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	e00b      	b.n	80021b8 <HAL_RCC_OscConfig+0xe0>
 80021a0:	4b9b      	ldr	r3, [pc, #620]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4b9a      	ldr	r3, [pc, #616]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 80021a6:	499b      	ldr	r1, [pc, #620]	; (8002414 <HAL_RCC_OscConfig+0x33c>)
 80021a8:	400a      	ands	r2, r1
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	4b98      	ldr	r3, [pc, #608]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	4b97      	ldr	r3, [pc, #604]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 80021b2:	4999      	ldr	r1, [pc, #612]	; (8002418 <HAL_RCC_OscConfig+0x340>)
 80021b4:	400a      	ands	r2, r1
 80021b6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d014      	beq.n	80021ea <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c0:	f7fe fd2c 	bl	8000c1c <HAL_GetTick>
 80021c4:	0003      	movs	r3, r0
 80021c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021ca:	f7fe fd27 	bl	8000c1c <HAL_GetTick>
 80021ce:	0002      	movs	r2, r0
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b64      	cmp	r3, #100	; 0x64
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e2fd      	b.n	80027d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021dc:	4b8c      	ldr	r3, [pc, #560]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	2380      	movs	r3, #128	; 0x80
 80021e2:	029b      	lsls	r3, r3, #10
 80021e4:	4013      	ands	r3, r2
 80021e6:	d0f0      	beq.n	80021ca <HAL_RCC_OscConfig+0xf2>
 80021e8:	e015      	b.n	8002216 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ea:	f7fe fd17 	bl	8000c1c <HAL_GetTick>
 80021ee:	0003      	movs	r3, r0
 80021f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021f4:	f7fe fd12 	bl	8000c1c <HAL_GetTick>
 80021f8:	0002      	movs	r2, r0
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b64      	cmp	r3, #100	; 0x64
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e2e8      	b.n	80027d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002206:	4b82      	ldr	r3, [pc, #520]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	2380      	movs	r3, #128	; 0x80
 800220c:	029b      	lsls	r3, r3, #10
 800220e:	4013      	ands	r3, r2
 8002210:	d1f0      	bne.n	80021f4 <HAL_RCC_OscConfig+0x11c>
 8002212:	e000      	b.n	8002216 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002214:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2202      	movs	r2, #2
 800221c:	4013      	ands	r3, r2
 800221e:	d100      	bne.n	8002222 <HAL_RCC_OscConfig+0x14a>
 8002220:	e06c      	b.n	80022fc <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002222:	4b7b      	ldr	r3, [pc, #492]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	220c      	movs	r2, #12
 8002228:	4013      	ands	r3, r2
 800222a:	d00e      	beq.n	800224a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800222c:	4b78      	ldr	r3, [pc, #480]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	220c      	movs	r2, #12
 8002232:	4013      	ands	r3, r2
 8002234:	2b08      	cmp	r3, #8
 8002236:	d11f      	bne.n	8002278 <HAL_RCC_OscConfig+0x1a0>
 8002238:	4b75      	ldr	r3, [pc, #468]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	23c0      	movs	r3, #192	; 0xc0
 800223e:	025b      	lsls	r3, r3, #9
 8002240:	401a      	ands	r2, r3
 8002242:	2380      	movs	r3, #128	; 0x80
 8002244:	021b      	lsls	r3, r3, #8
 8002246:	429a      	cmp	r2, r3
 8002248:	d116      	bne.n	8002278 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224a:	4b71      	ldr	r3, [pc, #452]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2202      	movs	r2, #2
 8002250:	4013      	ands	r3, r2
 8002252:	d005      	beq.n	8002260 <HAL_RCC_OscConfig+0x188>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d001      	beq.n	8002260 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e2bb      	b.n	80027d8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002260:	4b6b      	ldr	r3, [pc, #428]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	22f8      	movs	r2, #248	; 0xf8
 8002266:	4393      	bics	r3, r2
 8002268:	0019      	movs	r1, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	00da      	lsls	r2, r3, #3
 8002270:	4b67      	ldr	r3, [pc, #412]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 8002272:	430a      	orrs	r2, r1
 8002274:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002276:	e041      	b.n	80022fc <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d024      	beq.n	80022ca <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002280:	4b63      	ldr	r3, [pc, #396]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4b62      	ldr	r3, [pc, #392]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 8002286:	2101      	movs	r1, #1
 8002288:	430a      	orrs	r2, r1
 800228a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7fe fcc6 	bl	8000c1c <HAL_GetTick>
 8002290:	0003      	movs	r3, r0
 8002292:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002296:	f7fe fcc1 	bl	8000c1c <HAL_GetTick>
 800229a:	0002      	movs	r2, r0
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e297      	b.n	80027d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a8:	4b59      	ldr	r3, [pc, #356]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2202      	movs	r2, #2
 80022ae:	4013      	ands	r3, r2
 80022b0:	d0f1      	beq.n	8002296 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b2:	4b57      	ldr	r3, [pc, #348]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	22f8      	movs	r2, #248	; 0xf8
 80022b8:	4393      	bics	r3, r2
 80022ba:	0019      	movs	r1, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	00da      	lsls	r2, r3, #3
 80022c2:	4b53      	ldr	r3, [pc, #332]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 80022c4:	430a      	orrs	r2, r1
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	e018      	b.n	80022fc <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ca:	4b51      	ldr	r3, [pc, #324]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	4b50      	ldr	r3, [pc, #320]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 80022d0:	2101      	movs	r1, #1
 80022d2:	438a      	bics	r2, r1
 80022d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d6:	f7fe fca1 	bl	8000c1c <HAL_GetTick>
 80022da:	0003      	movs	r3, r0
 80022dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022e0:	f7fe fc9c 	bl	8000c1c <HAL_GetTick>
 80022e4:	0002      	movs	r2, r0
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e272      	b.n	80027d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022f2:	4b47      	ldr	r3, [pc, #284]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2202      	movs	r2, #2
 80022f8:	4013      	ands	r3, r2
 80022fa:	d1f1      	bne.n	80022e0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2208      	movs	r2, #8
 8002302:	4013      	ands	r3, r2
 8002304:	d036      	beq.n	8002374 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d019      	beq.n	8002342 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800230e:	4b40      	ldr	r3, [pc, #256]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 8002310:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002312:	4b3f      	ldr	r3, [pc, #252]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 8002314:	2101      	movs	r1, #1
 8002316:	430a      	orrs	r2, r1
 8002318:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231a:	f7fe fc7f 	bl	8000c1c <HAL_GetTick>
 800231e:	0003      	movs	r3, r0
 8002320:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002324:	f7fe fc7a 	bl	8000c1c <HAL_GetTick>
 8002328:	0002      	movs	r2, r0
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e250      	b.n	80027d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002336:	4b36      	ldr	r3, [pc, #216]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	2202      	movs	r2, #2
 800233c:	4013      	ands	r3, r2
 800233e:	d0f1      	beq.n	8002324 <HAL_RCC_OscConfig+0x24c>
 8002340:	e018      	b.n	8002374 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002342:	4b33      	ldr	r3, [pc, #204]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 8002344:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002346:	4b32      	ldr	r3, [pc, #200]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 8002348:	2101      	movs	r1, #1
 800234a:	438a      	bics	r2, r1
 800234c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234e:	f7fe fc65 	bl	8000c1c <HAL_GetTick>
 8002352:	0003      	movs	r3, r0
 8002354:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002358:	f7fe fc60 	bl	8000c1c <HAL_GetTick>
 800235c:	0002      	movs	r2, r0
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e236      	b.n	80027d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800236a:	4b29      	ldr	r3, [pc, #164]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236e:	2202      	movs	r2, #2
 8002370:	4013      	ands	r3, r2
 8002372:	d1f1      	bne.n	8002358 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2204      	movs	r2, #4
 800237a:	4013      	ands	r3, r2
 800237c:	d100      	bne.n	8002380 <HAL_RCC_OscConfig+0x2a8>
 800237e:	e0b5      	b.n	80024ec <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002380:	201f      	movs	r0, #31
 8002382:	183b      	adds	r3, r7, r0
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002388:	4b21      	ldr	r3, [pc, #132]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 800238a:	69da      	ldr	r2, [r3, #28]
 800238c:	2380      	movs	r3, #128	; 0x80
 800238e:	055b      	lsls	r3, r3, #21
 8002390:	4013      	ands	r3, r2
 8002392:	d110      	bne.n	80023b6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002394:	4b1e      	ldr	r3, [pc, #120]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 8002396:	69da      	ldr	r2, [r3, #28]
 8002398:	4b1d      	ldr	r3, [pc, #116]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 800239a:	2180      	movs	r1, #128	; 0x80
 800239c:	0549      	lsls	r1, r1, #21
 800239e:	430a      	orrs	r2, r1
 80023a0:	61da      	str	r2, [r3, #28]
 80023a2:	4b1b      	ldr	r3, [pc, #108]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 80023a4:	69da      	ldr	r2, [r3, #28]
 80023a6:	2380      	movs	r3, #128	; 0x80
 80023a8:	055b      	lsls	r3, r3, #21
 80023aa:	4013      	ands	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80023b0:	183b      	adds	r3, r7, r0
 80023b2:	2201      	movs	r2, #1
 80023b4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b6:	4b19      	ldr	r3, [pc, #100]	; (800241c <HAL_RCC_OscConfig+0x344>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	2380      	movs	r3, #128	; 0x80
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	4013      	ands	r3, r2
 80023c0:	d11a      	bne.n	80023f8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023c2:	4b16      	ldr	r3, [pc, #88]	; (800241c <HAL_RCC_OscConfig+0x344>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	4b15      	ldr	r3, [pc, #84]	; (800241c <HAL_RCC_OscConfig+0x344>)
 80023c8:	2180      	movs	r1, #128	; 0x80
 80023ca:	0049      	lsls	r1, r1, #1
 80023cc:	430a      	orrs	r2, r1
 80023ce:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023d0:	f7fe fc24 	bl	8000c1c <HAL_GetTick>
 80023d4:	0003      	movs	r3, r0
 80023d6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023da:	f7fe fc1f 	bl	8000c1c <HAL_GetTick>
 80023de:	0002      	movs	r2, r0
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b64      	cmp	r3, #100	; 0x64
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e1f5      	b.n	80027d8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_RCC_OscConfig+0x344>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	2380      	movs	r3, #128	; 0x80
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	4013      	ands	r3, r2
 80023f6:	d0f0      	beq.n	80023da <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d10f      	bne.n	8002420 <HAL_RCC_OscConfig+0x348>
 8002400:	4b03      	ldr	r3, [pc, #12]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 8002402:	6a1a      	ldr	r2, [r3, #32]
 8002404:	4b02      	ldr	r3, [pc, #8]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 8002406:	2101      	movs	r1, #1
 8002408:	430a      	orrs	r2, r1
 800240a:	621a      	str	r2, [r3, #32]
 800240c:	e036      	b.n	800247c <HAL_RCC_OscConfig+0x3a4>
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	40021000 	.word	0x40021000
 8002414:	fffeffff 	.word	0xfffeffff
 8002418:	fffbffff 	.word	0xfffbffff
 800241c:	40007000 	.word	0x40007000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d10c      	bne.n	8002442 <HAL_RCC_OscConfig+0x36a>
 8002428:	4bca      	ldr	r3, [pc, #808]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 800242a:	6a1a      	ldr	r2, [r3, #32]
 800242c:	4bc9      	ldr	r3, [pc, #804]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 800242e:	2101      	movs	r1, #1
 8002430:	438a      	bics	r2, r1
 8002432:	621a      	str	r2, [r3, #32]
 8002434:	4bc7      	ldr	r3, [pc, #796]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 8002436:	6a1a      	ldr	r2, [r3, #32]
 8002438:	4bc6      	ldr	r3, [pc, #792]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 800243a:	2104      	movs	r1, #4
 800243c:	438a      	bics	r2, r1
 800243e:	621a      	str	r2, [r3, #32]
 8002440:	e01c      	b.n	800247c <HAL_RCC_OscConfig+0x3a4>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2b05      	cmp	r3, #5
 8002448:	d10c      	bne.n	8002464 <HAL_RCC_OscConfig+0x38c>
 800244a:	4bc2      	ldr	r3, [pc, #776]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 800244c:	6a1a      	ldr	r2, [r3, #32]
 800244e:	4bc1      	ldr	r3, [pc, #772]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 8002450:	2104      	movs	r1, #4
 8002452:	430a      	orrs	r2, r1
 8002454:	621a      	str	r2, [r3, #32]
 8002456:	4bbf      	ldr	r3, [pc, #764]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 8002458:	6a1a      	ldr	r2, [r3, #32]
 800245a:	4bbe      	ldr	r3, [pc, #760]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 800245c:	2101      	movs	r1, #1
 800245e:	430a      	orrs	r2, r1
 8002460:	621a      	str	r2, [r3, #32]
 8002462:	e00b      	b.n	800247c <HAL_RCC_OscConfig+0x3a4>
 8002464:	4bbb      	ldr	r3, [pc, #748]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 8002466:	6a1a      	ldr	r2, [r3, #32]
 8002468:	4bba      	ldr	r3, [pc, #744]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 800246a:	2101      	movs	r1, #1
 800246c:	438a      	bics	r2, r1
 800246e:	621a      	str	r2, [r3, #32]
 8002470:	4bb8      	ldr	r3, [pc, #736]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 8002472:	6a1a      	ldr	r2, [r3, #32]
 8002474:	4bb7      	ldr	r3, [pc, #732]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 8002476:	2104      	movs	r1, #4
 8002478:	438a      	bics	r2, r1
 800247a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d014      	beq.n	80024ae <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002484:	f7fe fbca 	bl	8000c1c <HAL_GetTick>
 8002488:	0003      	movs	r3, r0
 800248a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800248c:	e009      	b.n	80024a2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800248e:	f7fe fbc5 	bl	8000c1c <HAL_GetTick>
 8002492:	0002      	movs	r2, r0
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	4aaf      	ldr	r2, [pc, #700]	; (8002758 <HAL_RCC_OscConfig+0x680>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e19a      	b.n	80027d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a2:	4bac      	ldr	r3, [pc, #688]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	2202      	movs	r2, #2
 80024a8:	4013      	ands	r3, r2
 80024aa:	d0f0      	beq.n	800248e <HAL_RCC_OscConfig+0x3b6>
 80024ac:	e013      	b.n	80024d6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ae:	f7fe fbb5 	bl	8000c1c <HAL_GetTick>
 80024b2:	0003      	movs	r3, r0
 80024b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b6:	e009      	b.n	80024cc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b8:	f7fe fbb0 	bl	8000c1c <HAL_GetTick>
 80024bc:	0002      	movs	r2, r0
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	4aa5      	ldr	r2, [pc, #660]	; (8002758 <HAL_RCC_OscConfig+0x680>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e185      	b.n	80027d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024cc:	4ba1      	ldr	r3, [pc, #644]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	2202      	movs	r2, #2
 80024d2:	4013      	ands	r3, r2
 80024d4:	d1f0      	bne.n	80024b8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024d6:	231f      	movs	r3, #31
 80024d8:	18fb      	adds	r3, r7, r3
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d105      	bne.n	80024ec <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024e0:	4b9c      	ldr	r3, [pc, #624]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 80024e2:	69da      	ldr	r2, [r3, #28]
 80024e4:	4b9b      	ldr	r3, [pc, #620]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 80024e6:	499d      	ldr	r1, [pc, #628]	; (800275c <HAL_RCC_OscConfig+0x684>)
 80024e8:	400a      	ands	r2, r1
 80024ea:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2210      	movs	r2, #16
 80024f2:	4013      	ands	r3, r2
 80024f4:	d063      	beq.n	80025be <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d12a      	bne.n	8002554 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80024fe:	4b95      	ldr	r3, [pc, #596]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 8002500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002502:	4b94      	ldr	r3, [pc, #592]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 8002504:	2104      	movs	r1, #4
 8002506:	430a      	orrs	r2, r1
 8002508:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800250a:	4b92      	ldr	r3, [pc, #584]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 800250c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800250e:	4b91      	ldr	r3, [pc, #580]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 8002510:	2101      	movs	r1, #1
 8002512:	430a      	orrs	r2, r1
 8002514:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002516:	f7fe fb81 	bl	8000c1c <HAL_GetTick>
 800251a:	0003      	movs	r3, r0
 800251c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002520:	f7fe fb7c 	bl	8000c1c <HAL_GetTick>
 8002524:	0002      	movs	r2, r0
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e152      	b.n	80027d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002532:	4b88      	ldr	r3, [pc, #544]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 8002534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002536:	2202      	movs	r2, #2
 8002538:	4013      	ands	r3, r2
 800253a:	d0f1      	beq.n	8002520 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800253c:	4b85      	ldr	r3, [pc, #532]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 800253e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002540:	22f8      	movs	r2, #248	; 0xf8
 8002542:	4393      	bics	r3, r2
 8002544:	0019      	movs	r1, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	00da      	lsls	r2, r3, #3
 800254c:	4b81      	ldr	r3, [pc, #516]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 800254e:	430a      	orrs	r2, r1
 8002550:	635a      	str	r2, [r3, #52]	; 0x34
 8002552:	e034      	b.n	80025be <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	3305      	adds	r3, #5
 800255a:	d111      	bne.n	8002580 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800255c:	4b7d      	ldr	r3, [pc, #500]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 800255e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002560:	4b7c      	ldr	r3, [pc, #496]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 8002562:	2104      	movs	r1, #4
 8002564:	438a      	bics	r2, r1
 8002566:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002568:	4b7a      	ldr	r3, [pc, #488]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 800256a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256c:	22f8      	movs	r2, #248	; 0xf8
 800256e:	4393      	bics	r3, r2
 8002570:	0019      	movs	r1, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	00da      	lsls	r2, r3, #3
 8002578:	4b76      	ldr	r3, [pc, #472]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 800257a:	430a      	orrs	r2, r1
 800257c:	635a      	str	r2, [r3, #52]	; 0x34
 800257e:	e01e      	b.n	80025be <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002580:	4b74      	ldr	r3, [pc, #464]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 8002582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002584:	4b73      	ldr	r3, [pc, #460]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 8002586:	2104      	movs	r1, #4
 8002588:	430a      	orrs	r2, r1
 800258a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800258c:	4b71      	ldr	r3, [pc, #452]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 800258e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002590:	4b70      	ldr	r3, [pc, #448]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 8002592:	2101      	movs	r1, #1
 8002594:	438a      	bics	r2, r1
 8002596:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002598:	f7fe fb40 	bl	8000c1c <HAL_GetTick>
 800259c:	0003      	movs	r3, r0
 800259e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80025a2:	f7fe fb3b 	bl	8000c1c <HAL_GetTick>
 80025a6:	0002      	movs	r2, r0
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e111      	b.n	80027d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80025b4:	4b67      	ldr	r3, [pc, #412]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 80025b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b8:	2202      	movs	r2, #2
 80025ba:	4013      	ands	r3, r2
 80025bc:	d1f1      	bne.n	80025a2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2220      	movs	r2, #32
 80025c4:	4013      	ands	r3, r2
 80025c6:	d05c      	beq.n	8002682 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80025c8:	4b62      	ldr	r3, [pc, #392]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	220c      	movs	r2, #12
 80025ce:	4013      	ands	r3, r2
 80025d0:	2b0c      	cmp	r3, #12
 80025d2:	d00e      	beq.n	80025f2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80025d4:	4b5f      	ldr	r3, [pc, #380]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	220c      	movs	r2, #12
 80025da:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d114      	bne.n	800260a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80025e0:	4b5c      	ldr	r3, [pc, #368]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	23c0      	movs	r3, #192	; 0xc0
 80025e6:	025b      	lsls	r3, r3, #9
 80025e8:	401a      	ands	r2, r3
 80025ea:	23c0      	movs	r3, #192	; 0xc0
 80025ec:	025b      	lsls	r3, r3, #9
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d10b      	bne.n	800260a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80025f2:	4b58      	ldr	r3, [pc, #352]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 80025f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025f6:	2380      	movs	r3, #128	; 0x80
 80025f8:	029b      	lsls	r3, r3, #10
 80025fa:	4013      	ands	r3, r2
 80025fc:	d040      	beq.n	8002680 <HAL_RCC_OscConfig+0x5a8>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d03c      	beq.n	8002680 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e0e6      	b.n	80027d8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d01b      	beq.n	800264a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002612:	4b50      	ldr	r3, [pc, #320]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 8002614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002616:	4b4f      	ldr	r3, [pc, #316]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 8002618:	2180      	movs	r1, #128	; 0x80
 800261a:	0249      	lsls	r1, r1, #9
 800261c:	430a      	orrs	r2, r1
 800261e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002620:	f7fe fafc 	bl	8000c1c <HAL_GetTick>
 8002624:	0003      	movs	r3, r0
 8002626:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800262a:	f7fe faf7 	bl	8000c1c <HAL_GetTick>
 800262e:	0002      	movs	r2, r0
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e0cd      	b.n	80027d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800263c:	4b45      	ldr	r3, [pc, #276]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 800263e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	029b      	lsls	r3, r3, #10
 8002644:	4013      	ands	r3, r2
 8002646:	d0f0      	beq.n	800262a <HAL_RCC_OscConfig+0x552>
 8002648:	e01b      	b.n	8002682 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800264a:	4b42      	ldr	r3, [pc, #264]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 800264c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800264e:	4b41      	ldr	r3, [pc, #260]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 8002650:	4943      	ldr	r1, [pc, #268]	; (8002760 <HAL_RCC_OscConfig+0x688>)
 8002652:	400a      	ands	r2, r1
 8002654:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002656:	f7fe fae1 	bl	8000c1c <HAL_GetTick>
 800265a:	0003      	movs	r3, r0
 800265c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002660:	f7fe fadc 	bl	8000c1c <HAL_GetTick>
 8002664:	0002      	movs	r2, r0
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e0b2      	b.n	80027d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002672:	4b38      	ldr	r3, [pc, #224]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 8002674:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002676:	2380      	movs	r3, #128	; 0x80
 8002678:	029b      	lsls	r3, r3, #10
 800267a:	4013      	ands	r3, r2
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0x588>
 800267e:	e000      	b.n	8002682 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002680:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	2b00      	cmp	r3, #0
 8002688:	d100      	bne.n	800268c <HAL_RCC_OscConfig+0x5b4>
 800268a:	e0a4      	b.n	80027d6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800268c:	4b31      	ldr	r3, [pc, #196]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	220c      	movs	r2, #12
 8002692:	4013      	ands	r3, r2
 8002694:	2b08      	cmp	r3, #8
 8002696:	d100      	bne.n	800269a <HAL_RCC_OscConfig+0x5c2>
 8002698:	e078      	b.n	800278c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d14c      	bne.n	800273c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a2:	4b2c      	ldr	r3, [pc, #176]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	4b2b      	ldr	r3, [pc, #172]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 80026a8:	492e      	ldr	r1, [pc, #184]	; (8002764 <HAL_RCC_OscConfig+0x68c>)
 80026aa:	400a      	ands	r2, r1
 80026ac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ae:	f7fe fab5 	bl	8000c1c <HAL_GetTick>
 80026b2:	0003      	movs	r3, r0
 80026b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026b8:	f7fe fab0 	bl	8000c1c <HAL_GetTick>
 80026bc:	0002      	movs	r2, r0
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e086      	b.n	80027d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ca:	4b22      	ldr	r3, [pc, #136]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	2380      	movs	r3, #128	; 0x80
 80026d0:	049b      	lsls	r3, r3, #18
 80026d2:	4013      	ands	r3, r2
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026d6:	4b1f      	ldr	r3, [pc, #124]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 80026d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026da:	220f      	movs	r2, #15
 80026dc:	4393      	bics	r3, r2
 80026de:	0019      	movs	r1, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026e4:	4b1b      	ldr	r3, [pc, #108]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 80026e6:	430a      	orrs	r2, r1
 80026e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80026ea:	4b1a      	ldr	r3, [pc, #104]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	4a1e      	ldr	r2, [pc, #120]	; (8002768 <HAL_RCC_OscConfig+0x690>)
 80026f0:	4013      	ands	r3, r2
 80026f2:	0019      	movs	r1, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fc:	431a      	orrs	r2, r3
 80026fe:	4b15      	ldr	r3, [pc, #84]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 8002700:	430a      	orrs	r2, r1
 8002702:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002704:	4b13      	ldr	r3, [pc, #76]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	4b12      	ldr	r3, [pc, #72]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 800270a:	2180      	movs	r1, #128	; 0x80
 800270c:	0449      	lsls	r1, r1, #17
 800270e:	430a      	orrs	r2, r1
 8002710:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002712:	f7fe fa83 	bl	8000c1c <HAL_GetTick>
 8002716:	0003      	movs	r3, r0
 8002718:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800271c:	f7fe fa7e 	bl	8000c1c <HAL_GetTick>
 8002720:	0002      	movs	r2, r0
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e054      	b.n	80027d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800272e:	4b09      	ldr	r3, [pc, #36]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	2380      	movs	r3, #128	; 0x80
 8002734:	049b      	lsls	r3, r3, #18
 8002736:	4013      	ands	r3, r2
 8002738:	d0f0      	beq.n	800271c <HAL_RCC_OscConfig+0x644>
 800273a:	e04c      	b.n	80027d6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800273c:	4b05      	ldr	r3, [pc, #20]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	4b04      	ldr	r3, [pc, #16]	; (8002754 <HAL_RCC_OscConfig+0x67c>)
 8002742:	4908      	ldr	r1, [pc, #32]	; (8002764 <HAL_RCC_OscConfig+0x68c>)
 8002744:	400a      	ands	r2, r1
 8002746:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002748:	f7fe fa68 	bl	8000c1c <HAL_GetTick>
 800274c:	0003      	movs	r3, r0
 800274e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002750:	e015      	b.n	800277e <HAL_RCC_OscConfig+0x6a6>
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	40021000 	.word	0x40021000
 8002758:	00001388 	.word	0x00001388
 800275c:	efffffff 	.word	0xefffffff
 8002760:	fffeffff 	.word	0xfffeffff
 8002764:	feffffff 	.word	0xfeffffff
 8002768:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800276c:	f7fe fa56 	bl	8000c1c <HAL_GetTick>
 8002770:	0002      	movs	r2, r0
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e02c      	b.n	80027d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800277e:	4b18      	ldr	r3, [pc, #96]	; (80027e0 <HAL_RCC_OscConfig+0x708>)
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	2380      	movs	r3, #128	; 0x80
 8002784:	049b      	lsls	r3, r3, #18
 8002786:	4013      	ands	r3, r2
 8002788:	d1f0      	bne.n	800276c <HAL_RCC_OscConfig+0x694>
 800278a:	e024      	b.n	80027d6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	2b01      	cmp	r3, #1
 8002792:	d101      	bne.n	8002798 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e01f      	b.n	80027d8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002798:	4b11      	ldr	r3, [pc, #68]	; (80027e0 <HAL_RCC_OscConfig+0x708>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800279e:	4b10      	ldr	r3, [pc, #64]	; (80027e0 <HAL_RCC_OscConfig+0x708>)
 80027a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	23c0      	movs	r3, #192	; 0xc0
 80027a8:	025b      	lsls	r3, r3, #9
 80027aa:	401a      	ands	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d10e      	bne.n	80027d2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	220f      	movs	r2, #15
 80027b8:	401a      	ands	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027be:	429a      	cmp	r2, r3
 80027c0:	d107      	bne.n	80027d2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	23f0      	movs	r3, #240	; 0xf0
 80027c6:	039b      	lsls	r3, r3, #14
 80027c8:	401a      	ands	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d001      	beq.n	80027d6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e000      	b.n	80027d8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	0018      	movs	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	b008      	add	sp, #32
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40021000 	.word	0x40021000

080027e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0bf      	b.n	8002978 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027f8:	4b61      	ldr	r3, [pc, #388]	; (8002980 <HAL_RCC_ClockConfig+0x19c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2201      	movs	r2, #1
 80027fe:	4013      	ands	r3, r2
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d911      	bls.n	800282a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002806:	4b5e      	ldr	r3, [pc, #376]	; (8002980 <HAL_RCC_ClockConfig+0x19c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2201      	movs	r2, #1
 800280c:	4393      	bics	r3, r2
 800280e:	0019      	movs	r1, r3
 8002810:	4b5b      	ldr	r3, [pc, #364]	; (8002980 <HAL_RCC_ClockConfig+0x19c>)
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002818:	4b59      	ldr	r3, [pc, #356]	; (8002980 <HAL_RCC_ClockConfig+0x19c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2201      	movs	r2, #1
 800281e:	4013      	ands	r3, r2
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	429a      	cmp	r2, r3
 8002824:	d001      	beq.n	800282a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e0a6      	b.n	8002978 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2202      	movs	r2, #2
 8002830:	4013      	ands	r3, r2
 8002832:	d015      	beq.n	8002860 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2204      	movs	r2, #4
 800283a:	4013      	ands	r3, r2
 800283c:	d006      	beq.n	800284c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800283e:	4b51      	ldr	r3, [pc, #324]	; (8002984 <HAL_RCC_ClockConfig+0x1a0>)
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	4b50      	ldr	r3, [pc, #320]	; (8002984 <HAL_RCC_ClockConfig+0x1a0>)
 8002844:	21e0      	movs	r1, #224	; 0xe0
 8002846:	00c9      	lsls	r1, r1, #3
 8002848:	430a      	orrs	r2, r1
 800284a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800284c:	4b4d      	ldr	r3, [pc, #308]	; (8002984 <HAL_RCC_ClockConfig+0x1a0>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	22f0      	movs	r2, #240	; 0xf0
 8002852:	4393      	bics	r3, r2
 8002854:	0019      	movs	r1, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	4b4a      	ldr	r3, [pc, #296]	; (8002984 <HAL_RCC_ClockConfig+0x1a0>)
 800285c:	430a      	orrs	r2, r1
 800285e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2201      	movs	r2, #1
 8002866:	4013      	ands	r3, r2
 8002868:	d04c      	beq.n	8002904 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d107      	bne.n	8002882 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002872:	4b44      	ldr	r3, [pc, #272]	; (8002984 <HAL_RCC_ClockConfig+0x1a0>)
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	2380      	movs	r3, #128	; 0x80
 8002878:	029b      	lsls	r3, r3, #10
 800287a:	4013      	ands	r3, r2
 800287c:	d120      	bne.n	80028c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e07a      	b.n	8002978 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d107      	bne.n	800289a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800288a:	4b3e      	ldr	r3, [pc, #248]	; (8002984 <HAL_RCC_ClockConfig+0x1a0>)
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	2380      	movs	r3, #128	; 0x80
 8002890:	049b      	lsls	r3, r3, #18
 8002892:	4013      	ands	r3, r2
 8002894:	d114      	bne.n	80028c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e06e      	b.n	8002978 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b03      	cmp	r3, #3
 80028a0:	d107      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80028a2:	4b38      	ldr	r3, [pc, #224]	; (8002984 <HAL_RCC_ClockConfig+0x1a0>)
 80028a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028a6:	2380      	movs	r3, #128	; 0x80
 80028a8:	029b      	lsls	r3, r3, #10
 80028aa:	4013      	ands	r3, r2
 80028ac:	d108      	bne.n	80028c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e062      	b.n	8002978 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b2:	4b34      	ldr	r3, [pc, #208]	; (8002984 <HAL_RCC_ClockConfig+0x1a0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2202      	movs	r2, #2
 80028b8:	4013      	ands	r3, r2
 80028ba:	d101      	bne.n	80028c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e05b      	b.n	8002978 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028c0:	4b30      	ldr	r3, [pc, #192]	; (8002984 <HAL_RCC_ClockConfig+0x1a0>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2203      	movs	r2, #3
 80028c6:	4393      	bics	r3, r2
 80028c8:	0019      	movs	r1, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	4b2d      	ldr	r3, [pc, #180]	; (8002984 <HAL_RCC_ClockConfig+0x1a0>)
 80028d0:	430a      	orrs	r2, r1
 80028d2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028d4:	f7fe f9a2 	bl	8000c1c <HAL_GetTick>
 80028d8:	0003      	movs	r3, r0
 80028da:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028dc:	e009      	b.n	80028f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028de:	f7fe f99d 	bl	8000c1c <HAL_GetTick>
 80028e2:	0002      	movs	r2, r0
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	4a27      	ldr	r2, [pc, #156]	; (8002988 <HAL_RCC_ClockConfig+0x1a4>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e042      	b.n	8002978 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f2:	4b24      	ldr	r3, [pc, #144]	; (8002984 <HAL_RCC_ClockConfig+0x1a0>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	220c      	movs	r2, #12
 80028f8:	401a      	ands	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	429a      	cmp	r2, r3
 8002902:	d1ec      	bne.n	80028de <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002904:	4b1e      	ldr	r3, [pc, #120]	; (8002980 <HAL_RCC_ClockConfig+0x19c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2201      	movs	r2, #1
 800290a:	4013      	ands	r3, r2
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	d211      	bcs.n	8002936 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002912:	4b1b      	ldr	r3, [pc, #108]	; (8002980 <HAL_RCC_ClockConfig+0x19c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2201      	movs	r2, #1
 8002918:	4393      	bics	r3, r2
 800291a:	0019      	movs	r1, r3
 800291c:	4b18      	ldr	r3, [pc, #96]	; (8002980 <HAL_RCC_ClockConfig+0x19c>)
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002924:	4b16      	ldr	r3, [pc, #88]	; (8002980 <HAL_RCC_ClockConfig+0x19c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2201      	movs	r2, #1
 800292a:	4013      	ands	r3, r2
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	429a      	cmp	r2, r3
 8002930:	d001      	beq.n	8002936 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e020      	b.n	8002978 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2204      	movs	r2, #4
 800293c:	4013      	ands	r3, r2
 800293e:	d009      	beq.n	8002954 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002940:	4b10      	ldr	r3, [pc, #64]	; (8002984 <HAL_RCC_ClockConfig+0x1a0>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	4a11      	ldr	r2, [pc, #68]	; (800298c <HAL_RCC_ClockConfig+0x1a8>)
 8002946:	4013      	ands	r3, r2
 8002948:	0019      	movs	r1, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	4b0d      	ldr	r3, [pc, #52]	; (8002984 <HAL_RCC_ClockConfig+0x1a0>)
 8002950:	430a      	orrs	r2, r1
 8002952:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002954:	f000 f820 	bl	8002998 <HAL_RCC_GetSysClockFreq>
 8002958:	0001      	movs	r1, r0
 800295a:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <HAL_RCC_ClockConfig+0x1a0>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	091b      	lsrs	r3, r3, #4
 8002960:	220f      	movs	r2, #15
 8002962:	4013      	ands	r3, r2
 8002964:	4a0a      	ldr	r2, [pc, #40]	; (8002990 <HAL_RCC_ClockConfig+0x1ac>)
 8002966:	5cd3      	ldrb	r3, [r2, r3]
 8002968:	000a      	movs	r2, r1
 800296a:	40da      	lsrs	r2, r3
 800296c:	4b09      	ldr	r3, [pc, #36]	; (8002994 <HAL_RCC_ClockConfig+0x1b0>)
 800296e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002970:	2000      	movs	r0, #0
 8002972:	f7fe f90d 	bl	8000b90 <HAL_InitTick>
  
  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	0018      	movs	r0, r3
 800297a:	46bd      	mov	sp, r7
 800297c:	b004      	add	sp, #16
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40022000 	.word	0x40022000
 8002984:	40021000 	.word	0x40021000
 8002988:	00001388 	.word	0x00001388
 800298c:	fffff8ff 	.word	0xfffff8ff
 8002990:	08004668 	.word	0x08004668
 8002994:	2000000c 	.word	0x2000000c

08002998 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	2300      	movs	r3, #0
 80029a4:	60bb      	str	r3, [r7, #8]
 80029a6:	2300      	movs	r3, #0
 80029a8:	617b      	str	r3, [r7, #20]
 80029aa:	2300      	movs	r3, #0
 80029ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80029b2:	4b2d      	ldr	r3, [pc, #180]	; (8002a68 <HAL_RCC_GetSysClockFreq+0xd0>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	220c      	movs	r2, #12
 80029bc:	4013      	ands	r3, r2
 80029be:	2b0c      	cmp	r3, #12
 80029c0:	d046      	beq.n	8002a50 <HAL_RCC_GetSysClockFreq+0xb8>
 80029c2:	d848      	bhi.n	8002a56 <HAL_RCC_GetSysClockFreq+0xbe>
 80029c4:	2b04      	cmp	r3, #4
 80029c6:	d002      	beq.n	80029ce <HAL_RCC_GetSysClockFreq+0x36>
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d003      	beq.n	80029d4 <HAL_RCC_GetSysClockFreq+0x3c>
 80029cc:	e043      	b.n	8002a56 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029ce:	4b27      	ldr	r3, [pc, #156]	; (8002a6c <HAL_RCC_GetSysClockFreq+0xd4>)
 80029d0:	613b      	str	r3, [r7, #16]
      break;
 80029d2:	e043      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	0c9b      	lsrs	r3, r3, #18
 80029d8:	220f      	movs	r2, #15
 80029da:	4013      	ands	r3, r2
 80029dc:	4a24      	ldr	r2, [pc, #144]	; (8002a70 <HAL_RCC_GetSysClockFreq+0xd8>)
 80029de:	5cd3      	ldrb	r3, [r2, r3]
 80029e0:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80029e2:	4b21      	ldr	r3, [pc, #132]	; (8002a68 <HAL_RCC_GetSysClockFreq+0xd0>)
 80029e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e6:	220f      	movs	r2, #15
 80029e8:	4013      	ands	r3, r2
 80029ea:	4a22      	ldr	r2, [pc, #136]	; (8002a74 <HAL_RCC_GetSysClockFreq+0xdc>)
 80029ec:	5cd3      	ldrb	r3, [r2, r3]
 80029ee:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	23c0      	movs	r3, #192	; 0xc0
 80029f4:	025b      	lsls	r3, r3, #9
 80029f6:	401a      	ands	r2, r3
 80029f8:	2380      	movs	r3, #128	; 0x80
 80029fa:	025b      	lsls	r3, r3, #9
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d109      	bne.n	8002a14 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a00:	68b9      	ldr	r1, [r7, #8]
 8002a02:	481a      	ldr	r0, [pc, #104]	; (8002a6c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a04:	f7fd fb8a 	bl	800011c <__udivsi3>
 8002a08:	0003      	movs	r3, r0
 8002a0a:	001a      	movs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4353      	muls	r3, r2
 8002a10:	617b      	str	r3, [r7, #20]
 8002a12:	e01a      	b.n	8002a4a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	23c0      	movs	r3, #192	; 0xc0
 8002a18:	025b      	lsls	r3, r3, #9
 8002a1a:	401a      	ands	r2, r3
 8002a1c:	23c0      	movs	r3, #192	; 0xc0
 8002a1e:	025b      	lsls	r3, r3, #9
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d109      	bne.n	8002a38 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a24:	68b9      	ldr	r1, [r7, #8]
 8002a26:	4814      	ldr	r0, [pc, #80]	; (8002a78 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002a28:	f7fd fb78 	bl	800011c <__udivsi3>
 8002a2c:	0003      	movs	r3, r0
 8002a2e:	001a      	movs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4353      	muls	r3, r2
 8002a34:	617b      	str	r3, [r7, #20]
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a38:	68b9      	ldr	r1, [r7, #8]
 8002a3a:	480c      	ldr	r0, [pc, #48]	; (8002a6c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a3c:	f7fd fb6e 	bl	800011c <__udivsi3>
 8002a40:	0003      	movs	r3, r0
 8002a42:	001a      	movs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4353      	muls	r3, r2
 8002a48:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	613b      	str	r3, [r7, #16]
      break;
 8002a4e:	e005      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002a50:	4b09      	ldr	r3, [pc, #36]	; (8002a78 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002a52:	613b      	str	r3, [r7, #16]
      break;
 8002a54:	e002      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a56:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a58:	613b      	str	r3, [r7, #16]
      break;
 8002a5a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002a5c:	693b      	ldr	r3, [r7, #16]
}
 8002a5e:	0018      	movs	r0, r3
 8002a60:	46bd      	mov	sp, r7
 8002a62:	b006      	add	sp, #24
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	007a1200 	.word	0x007a1200
 8002a70:	08004680 	.word	0x08004680
 8002a74:	08004690 	.word	0x08004690
 8002a78:	02dc6c00 	.word	0x02dc6c00

08002a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a80:	4b02      	ldr	r3, [pc, #8]	; (8002a8c <HAL_RCC_GetHCLKFreq+0x10>)
 8002a82:	681b      	ldr	r3, [r3, #0]
}
 8002a84:	0018      	movs	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	46c0      	nop			; (mov r8, r8)
 8002a8c:	2000000c 	.word	0x2000000c

08002a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002a94:	f7ff fff2 	bl	8002a7c <HAL_RCC_GetHCLKFreq>
 8002a98:	0001      	movs	r1, r0
 8002a9a:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	0a1b      	lsrs	r3, r3, #8
 8002aa0:	2207      	movs	r2, #7
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	4a04      	ldr	r2, [pc, #16]	; (8002ab8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002aa6:	5cd3      	ldrb	r3, [r2, r3]
 8002aa8:	40d9      	lsrs	r1, r3
 8002aaa:	000b      	movs	r3, r1
}    
 8002aac:	0018      	movs	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	08004678 	.word	0x08004678

08002abc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	025b      	lsls	r3, r3, #9
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	d100      	bne.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002ad8:	e08e      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002ada:	2017      	movs	r0, #23
 8002adc:	183b      	adds	r3, r7, r0
 8002ade:	2200      	movs	r2, #0
 8002ae0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ae2:	4b67      	ldr	r3, [pc, #412]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ae4:	69da      	ldr	r2, [r3, #28]
 8002ae6:	2380      	movs	r3, #128	; 0x80
 8002ae8:	055b      	lsls	r3, r3, #21
 8002aea:	4013      	ands	r3, r2
 8002aec:	d110      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002aee:	4b64      	ldr	r3, [pc, #400]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002af0:	69da      	ldr	r2, [r3, #28]
 8002af2:	4b63      	ldr	r3, [pc, #396]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002af4:	2180      	movs	r1, #128	; 0x80
 8002af6:	0549      	lsls	r1, r1, #21
 8002af8:	430a      	orrs	r2, r1
 8002afa:	61da      	str	r2, [r3, #28]
 8002afc:	4b60      	ldr	r3, [pc, #384]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002afe:	69da      	ldr	r2, [r3, #28]
 8002b00:	2380      	movs	r3, #128	; 0x80
 8002b02:	055b      	lsls	r3, r3, #21
 8002b04:	4013      	ands	r3, r2
 8002b06:	60bb      	str	r3, [r7, #8]
 8002b08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b0a:	183b      	adds	r3, r7, r0
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b10:	4b5c      	ldr	r3, [pc, #368]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	2380      	movs	r3, #128	; 0x80
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d11a      	bne.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b1c:	4b59      	ldr	r3, [pc, #356]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	4b58      	ldr	r3, [pc, #352]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002b22:	2180      	movs	r1, #128	; 0x80
 8002b24:	0049      	lsls	r1, r1, #1
 8002b26:	430a      	orrs	r2, r1
 8002b28:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b2a:	f7fe f877 	bl	8000c1c <HAL_GetTick>
 8002b2e:	0003      	movs	r3, r0
 8002b30:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b32:	e008      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b34:	f7fe f872 	bl	8000c1c <HAL_GetTick>
 8002b38:	0002      	movs	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b64      	cmp	r3, #100	; 0x64
 8002b40:	d901      	bls.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e097      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b46:	4b4f      	ldr	r3, [pc, #316]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	2380      	movs	r3, #128	; 0x80
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	4013      	ands	r3, r2
 8002b50:	d0f0      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b52:	4b4b      	ldr	r3, [pc, #300]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b54:	6a1a      	ldr	r2, [r3, #32]
 8002b56:	23c0      	movs	r3, #192	; 0xc0
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d034      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	23c0      	movs	r3, #192	; 0xc0
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d02c      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b74:	4b42      	ldr	r3, [pc, #264]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	4a43      	ldr	r2, [pc, #268]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b7e:	4b40      	ldr	r3, [pc, #256]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b80:	6a1a      	ldr	r2, [r3, #32]
 8002b82:	4b3f      	ldr	r3, [pc, #252]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b84:	2180      	movs	r1, #128	; 0x80
 8002b86:	0249      	lsls	r1, r1, #9
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b8c:	4b3c      	ldr	r3, [pc, #240]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b8e:	6a1a      	ldr	r2, [r3, #32]
 8002b90:	4b3b      	ldr	r3, [pc, #236]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b92:	493e      	ldr	r1, [pc, #248]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b94:	400a      	ands	r2, r1
 8002b96:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b98:	4b39      	ldr	r3, [pc, #228]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	d013      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba6:	f7fe f839 	bl	8000c1c <HAL_GetTick>
 8002baa:	0003      	movs	r3, r0
 8002bac:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bae:	e009      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb0:	f7fe f834 	bl	8000c1c <HAL_GetTick>
 8002bb4:	0002      	movs	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	4a35      	ldr	r2, [pc, #212]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e058      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc4:	4b2e      	ldr	r3, [pc, #184]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	2202      	movs	r2, #2
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d0f0      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bce:	4b2c      	ldr	r3, [pc, #176]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	4a2d      	ldr	r2, [pc, #180]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	0019      	movs	r1, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	4b28      	ldr	r3, [pc, #160]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002bde:	430a      	orrs	r2, r1
 8002be0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002be2:	2317      	movs	r3, #23
 8002be4:	18fb      	adds	r3, r7, r3
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d105      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bec:	4b24      	ldr	r3, [pc, #144]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002bee:	69da      	ldr	r2, [r3, #28]
 8002bf0:	4b23      	ldr	r3, [pc, #140]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002bf2:	4928      	ldr	r1, [pc, #160]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002bf4:	400a      	ands	r2, r1
 8002bf6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	4013      	ands	r3, r2
 8002c00:	d009      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c02:	4b1f      	ldr	r3, [pc, #124]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	2203      	movs	r2, #3
 8002c08:	4393      	bics	r3, r2
 8002c0a:	0019      	movs	r1, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c12:	430a      	orrs	r2, r1
 8002c14:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	d009      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c20:	4b17      	ldr	r3, [pc, #92]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c24:	2210      	movs	r2, #16
 8002c26:	4393      	bics	r3, r2
 8002c28:	0019      	movs	r1, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	4b14      	ldr	r3, [pc, #80]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c30:	430a      	orrs	r2, r1
 8002c32:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	2380      	movs	r3, #128	; 0x80
 8002c3a:	029b      	lsls	r3, r3, #10
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	d009      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c40:	4b0f      	ldr	r3, [pc, #60]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c44:	2280      	movs	r2, #128	; 0x80
 8002c46:	4393      	bics	r3, r2
 8002c48:	0019      	movs	r1, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695a      	ldr	r2, [r3, #20]
 8002c4e:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c50:	430a      	orrs	r2, r1
 8002c52:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	2380      	movs	r3, #128	; 0x80
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	d009      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c60:	4b07      	ldr	r3, [pc, #28]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	2240      	movs	r2, #64	; 0x40
 8002c66:	4393      	bics	r3, r2
 8002c68:	0019      	movs	r1, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691a      	ldr	r2, [r3, #16]
 8002c6e:	4b04      	ldr	r3, [pc, #16]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c70:	430a      	orrs	r2, r1
 8002c72:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	0018      	movs	r0, r3
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	b006      	add	sp, #24
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	46c0      	nop			; (mov r8, r8)
 8002c80:	40021000 	.word	0x40021000
 8002c84:	40007000 	.word	0x40007000
 8002c88:	fffffcff 	.word	0xfffffcff
 8002c8c:	fffeffff 	.word	0xfffeffff
 8002c90:	00001388 	.word	0x00001388
 8002c94:	efffffff 	.word	0xefffffff

08002c98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e044      	b.n	8002d34 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d107      	bne.n	8002cc2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2278      	movs	r2, #120	; 0x78
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f7fd fdf5 	bl	80008ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2224      	movs	r2, #36	; 0x24
 8002cc6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	438a      	bics	r2, r1
 8002cd6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f000 f8d0 	bl	8002e80 <UART_SetConfig>
 8002ce0:	0003      	movs	r3, r0
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d101      	bne.n	8002cea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e024      	b.n	8002d34 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f000 fa03 	bl	8003100 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	490d      	ldr	r1, [pc, #52]	; (8002d3c <HAL_UART_Init+0xa4>)
 8002d06:	400a      	ands	r2, r1
 8002d08:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	212a      	movs	r1, #42	; 0x2a
 8002d16:	438a      	bics	r2, r1
 8002d18:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2101      	movs	r1, #1
 8002d26:	430a      	orrs	r2, r1
 8002d28:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	f000 fa9b 	bl	8003268 <UART_CheckIdleState>
 8002d32:	0003      	movs	r3, r0
}
 8002d34:	0018      	movs	r0, r3
 8002d36:	46bd      	mov	sp, r7
 8002d38:	b002      	add	sp, #8
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	ffffb7ff 	.word	0xffffb7ff

08002d40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b08a      	sub	sp, #40	; 0x28
 8002d44:	af02      	add	r7, sp, #8
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	603b      	str	r3, [r7, #0]
 8002d4c:	1dbb      	adds	r3, r7, #6
 8002d4e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d54:	2b20      	cmp	r3, #32
 8002d56:	d000      	beq.n	8002d5a <HAL_UART_Transmit+0x1a>
 8002d58:	e08d      	b.n	8002e76 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <HAL_UART_Transmit+0x28>
 8002d60:	1dbb      	adds	r3, r7, #6
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e085      	b.n	8002e78 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	2380      	movs	r3, #128	; 0x80
 8002d72:	015b      	lsls	r3, r3, #5
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d109      	bne.n	8002d8c <HAL_UART_Transmit+0x4c>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d105      	bne.n	8002d8c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2201      	movs	r2, #1
 8002d84:	4013      	ands	r3, r2
 8002d86:	d001      	beq.n	8002d8c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e075      	b.n	8002e78 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2284      	movs	r2, #132	; 0x84
 8002d90:	2100      	movs	r1, #0
 8002d92:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2221      	movs	r2, #33	; 0x21
 8002d98:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d9a:	f7fd ff3f 	bl	8000c1c <HAL_GetTick>
 8002d9e:	0003      	movs	r3, r0
 8002da0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	1dba      	adds	r2, r7, #6
 8002da6:	2150      	movs	r1, #80	; 0x50
 8002da8:	8812      	ldrh	r2, [r2, #0]
 8002daa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	1dba      	adds	r2, r7, #6
 8002db0:	2152      	movs	r1, #82	; 0x52
 8002db2:	8812      	ldrh	r2, [r2, #0]
 8002db4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	2380      	movs	r3, #128	; 0x80
 8002dbc:	015b      	lsls	r3, r3, #5
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d108      	bne.n	8002dd4 <HAL_UART_Transmit+0x94>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d104      	bne.n	8002dd4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	61bb      	str	r3, [r7, #24]
 8002dd2:	e003      	b.n	8002ddc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ddc:	e030      	b.n	8002e40 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	0013      	movs	r3, r2
 8002de8:	2200      	movs	r2, #0
 8002dea:	2180      	movs	r1, #128	; 0x80
 8002dec:	f000 fae4 	bl	80033b8 <UART_WaitOnFlagUntilTimeout>
 8002df0:	1e03      	subs	r3, r0, #0
 8002df2:	d004      	beq.n	8002dfe <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2220      	movs	r2, #32
 8002df8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e03c      	b.n	8002e78 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10b      	bne.n	8002e1c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	881a      	ldrh	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	05d2      	lsls	r2, r2, #23
 8002e0e:	0dd2      	lsrs	r2, r2, #23
 8002e10:	b292      	uxth	r2, r2
 8002e12:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	3302      	adds	r3, #2
 8002e18:	61bb      	str	r3, [r7, #24]
 8002e1a:	e008      	b.n	8002e2e <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	781a      	ldrb	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	b292      	uxth	r2, r2
 8002e26:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2252      	movs	r2, #82	; 0x52
 8002e32:	5a9b      	ldrh	r3, [r3, r2]
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	3b01      	subs	r3, #1
 8002e38:	b299      	uxth	r1, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2252      	movs	r2, #82	; 0x52
 8002e3e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2252      	movs	r2, #82	; 0x52
 8002e44:	5a9b      	ldrh	r3, [r3, r2]
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1c8      	bne.n	8002dde <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	0013      	movs	r3, r2
 8002e56:	2200      	movs	r2, #0
 8002e58:	2140      	movs	r1, #64	; 0x40
 8002e5a:	f000 faad 	bl	80033b8 <UART_WaitOnFlagUntilTimeout>
 8002e5e:	1e03      	subs	r3, r0, #0
 8002e60:	d004      	beq.n	8002e6c <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2220      	movs	r2, #32
 8002e66:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e005      	b.n	8002e78 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	e000      	b.n	8002e78 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8002e76:	2302      	movs	r3, #2
  }
}
 8002e78:	0018      	movs	r0, r3
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	b008      	add	sp, #32
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b088      	sub	sp, #32
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e88:	231e      	movs	r3, #30
 8002e8a:	18fb      	adds	r3, r7, r3
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a8d      	ldr	r2, [pc, #564]	; (80030e4 <UART_SetConfig+0x264>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	0019      	movs	r1, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	4a88      	ldr	r2, [pc, #544]	; (80030e8 <UART_SetConfig+0x268>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	0019      	movs	r1, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	4a7f      	ldr	r2, [pc, #508]	; (80030ec <UART_SetConfig+0x26c>)
 8002eee:	4013      	ands	r3, r2
 8002ef0:	0019      	movs	r1, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a7b      	ldr	r2, [pc, #492]	; (80030f0 <UART_SetConfig+0x270>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d127      	bne.n	8002f56 <UART_SetConfig+0xd6>
 8002f06:	4b7b      	ldr	r3, [pc, #492]	; (80030f4 <UART_SetConfig+0x274>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	2203      	movs	r2, #3
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	2b03      	cmp	r3, #3
 8002f10:	d00d      	beq.n	8002f2e <UART_SetConfig+0xae>
 8002f12:	d81b      	bhi.n	8002f4c <UART_SetConfig+0xcc>
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d014      	beq.n	8002f42 <UART_SetConfig+0xc2>
 8002f18:	d818      	bhi.n	8002f4c <UART_SetConfig+0xcc>
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d002      	beq.n	8002f24 <UART_SetConfig+0xa4>
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d00a      	beq.n	8002f38 <UART_SetConfig+0xb8>
 8002f22:	e013      	b.n	8002f4c <UART_SetConfig+0xcc>
 8002f24:	231f      	movs	r3, #31
 8002f26:	18fb      	adds	r3, r7, r3
 8002f28:	2200      	movs	r2, #0
 8002f2a:	701a      	strb	r2, [r3, #0]
 8002f2c:	e021      	b.n	8002f72 <UART_SetConfig+0xf2>
 8002f2e:	231f      	movs	r3, #31
 8002f30:	18fb      	adds	r3, r7, r3
 8002f32:	2202      	movs	r2, #2
 8002f34:	701a      	strb	r2, [r3, #0]
 8002f36:	e01c      	b.n	8002f72 <UART_SetConfig+0xf2>
 8002f38:	231f      	movs	r3, #31
 8002f3a:	18fb      	adds	r3, r7, r3
 8002f3c:	2204      	movs	r2, #4
 8002f3e:	701a      	strb	r2, [r3, #0]
 8002f40:	e017      	b.n	8002f72 <UART_SetConfig+0xf2>
 8002f42:	231f      	movs	r3, #31
 8002f44:	18fb      	adds	r3, r7, r3
 8002f46:	2208      	movs	r2, #8
 8002f48:	701a      	strb	r2, [r3, #0]
 8002f4a:	e012      	b.n	8002f72 <UART_SetConfig+0xf2>
 8002f4c:	231f      	movs	r3, #31
 8002f4e:	18fb      	adds	r3, r7, r3
 8002f50:	2210      	movs	r2, #16
 8002f52:	701a      	strb	r2, [r3, #0]
 8002f54:	e00d      	b.n	8002f72 <UART_SetConfig+0xf2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a67      	ldr	r2, [pc, #412]	; (80030f8 <UART_SetConfig+0x278>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d104      	bne.n	8002f6a <UART_SetConfig+0xea>
 8002f60:	231f      	movs	r3, #31
 8002f62:	18fb      	adds	r3, r7, r3
 8002f64:	2200      	movs	r2, #0
 8002f66:	701a      	strb	r2, [r3, #0]
 8002f68:	e003      	b.n	8002f72 <UART_SetConfig+0xf2>
 8002f6a:	231f      	movs	r3, #31
 8002f6c:	18fb      	adds	r3, r7, r3
 8002f6e:	2210      	movs	r2, #16
 8002f70:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69da      	ldr	r2, [r3, #28]
 8002f76:	2380      	movs	r3, #128	; 0x80
 8002f78:	021b      	lsls	r3, r3, #8
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d15c      	bne.n	8003038 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8002f7e:	231f      	movs	r3, #31
 8002f80:	18fb      	adds	r3, r7, r3
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	2b08      	cmp	r3, #8
 8002f86:	d015      	beq.n	8002fb4 <UART_SetConfig+0x134>
 8002f88:	dc18      	bgt.n	8002fbc <UART_SetConfig+0x13c>
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	d00d      	beq.n	8002faa <UART_SetConfig+0x12a>
 8002f8e:	dc15      	bgt.n	8002fbc <UART_SetConfig+0x13c>
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d002      	beq.n	8002f9a <UART_SetConfig+0x11a>
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d005      	beq.n	8002fa4 <UART_SetConfig+0x124>
 8002f98:	e010      	b.n	8002fbc <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f9a:	f7ff fd79 	bl	8002a90 <HAL_RCC_GetPCLK1Freq>
 8002f9e:	0003      	movs	r3, r0
 8002fa0:	61bb      	str	r3, [r7, #24]
        break;
 8002fa2:	e012      	b.n	8002fca <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fa4:	4b55      	ldr	r3, [pc, #340]	; (80030fc <UART_SetConfig+0x27c>)
 8002fa6:	61bb      	str	r3, [r7, #24]
        break;
 8002fa8:	e00f      	b.n	8002fca <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002faa:	f7ff fcf5 	bl	8002998 <HAL_RCC_GetSysClockFreq>
 8002fae:	0003      	movs	r3, r0
 8002fb0:	61bb      	str	r3, [r7, #24]
        break;
 8002fb2:	e00a      	b.n	8002fca <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fb4:	2380      	movs	r3, #128	; 0x80
 8002fb6:	021b      	lsls	r3, r3, #8
 8002fb8:	61bb      	str	r3, [r7, #24]
        break;
 8002fba:	e006      	b.n	8002fca <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002fc0:	231e      	movs	r3, #30
 8002fc2:	18fb      	adds	r3, r7, r3
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	701a      	strb	r2, [r3, #0]
        break;
 8002fc8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d100      	bne.n	8002fd2 <UART_SetConfig+0x152>
 8002fd0:	e07a      	b.n	80030c8 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	005a      	lsls	r2, r3, #1
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	085b      	lsrs	r3, r3, #1
 8002fdc:	18d2      	adds	r2, r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	0019      	movs	r1, r3
 8002fe4:	0010      	movs	r0, r2
 8002fe6:	f7fd f899 	bl	800011c <__udivsi3>
 8002fea:	0003      	movs	r3, r0
 8002fec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	2b0f      	cmp	r3, #15
 8002ff2:	d91c      	bls.n	800302e <UART_SetConfig+0x1ae>
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	2380      	movs	r3, #128	; 0x80
 8002ff8:	025b      	lsls	r3, r3, #9
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d217      	bcs.n	800302e <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	b29a      	uxth	r2, r3
 8003002:	200e      	movs	r0, #14
 8003004:	183b      	adds	r3, r7, r0
 8003006:	210f      	movs	r1, #15
 8003008:	438a      	bics	r2, r1
 800300a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	085b      	lsrs	r3, r3, #1
 8003010:	b29b      	uxth	r3, r3
 8003012:	2207      	movs	r2, #7
 8003014:	4013      	ands	r3, r2
 8003016:	b299      	uxth	r1, r3
 8003018:	183b      	adds	r3, r7, r0
 800301a:	183a      	adds	r2, r7, r0
 800301c:	8812      	ldrh	r2, [r2, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	183a      	adds	r2, r7, r0
 8003028:	8812      	ldrh	r2, [r2, #0]
 800302a:	60da      	str	r2, [r3, #12]
 800302c:	e04c      	b.n	80030c8 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800302e:	231e      	movs	r3, #30
 8003030:	18fb      	adds	r3, r7, r3
 8003032:	2201      	movs	r2, #1
 8003034:	701a      	strb	r2, [r3, #0]
 8003036:	e047      	b.n	80030c8 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003038:	231f      	movs	r3, #31
 800303a:	18fb      	adds	r3, r7, r3
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b08      	cmp	r3, #8
 8003040:	d015      	beq.n	800306e <UART_SetConfig+0x1ee>
 8003042:	dc18      	bgt.n	8003076 <UART_SetConfig+0x1f6>
 8003044:	2b04      	cmp	r3, #4
 8003046:	d00d      	beq.n	8003064 <UART_SetConfig+0x1e4>
 8003048:	dc15      	bgt.n	8003076 <UART_SetConfig+0x1f6>
 800304a:	2b00      	cmp	r3, #0
 800304c:	d002      	beq.n	8003054 <UART_SetConfig+0x1d4>
 800304e:	2b02      	cmp	r3, #2
 8003050:	d005      	beq.n	800305e <UART_SetConfig+0x1de>
 8003052:	e010      	b.n	8003076 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003054:	f7ff fd1c 	bl	8002a90 <HAL_RCC_GetPCLK1Freq>
 8003058:	0003      	movs	r3, r0
 800305a:	61bb      	str	r3, [r7, #24]
        break;
 800305c:	e012      	b.n	8003084 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800305e:	4b27      	ldr	r3, [pc, #156]	; (80030fc <UART_SetConfig+0x27c>)
 8003060:	61bb      	str	r3, [r7, #24]
        break;
 8003062:	e00f      	b.n	8003084 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003064:	f7ff fc98 	bl	8002998 <HAL_RCC_GetSysClockFreq>
 8003068:	0003      	movs	r3, r0
 800306a:	61bb      	str	r3, [r7, #24]
        break;
 800306c:	e00a      	b.n	8003084 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800306e:	2380      	movs	r3, #128	; 0x80
 8003070:	021b      	lsls	r3, r3, #8
 8003072:	61bb      	str	r3, [r7, #24]
        break;
 8003074:	e006      	b.n	8003084 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003076:	2300      	movs	r3, #0
 8003078:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800307a:	231e      	movs	r3, #30
 800307c:	18fb      	adds	r3, r7, r3
 800307e:	2201      	movs	r2, #1
 8003080:	701a      	strb	r2, [r3, #0]
        break;
 8003082:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d01e      	beq.n	80030c8 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	085a      	lsrs	r2, r3, #1
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	18d2      	adds	r2, r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	0019      	movs	r1, r3
 800309a:	0010      	movs	r0, r2
 800309c:	f7fd f83e 	bl	800011c <__udivsi3>
 80030a0:	0003      	movs	r3, r0
 80030a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	2b0f      	cmp	r3, #15
 80030a8:	d90a      	bls.n	80030c0 <UART_SetConfig+0x240>
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	2380      	movs	r3, #128	; 0x80
 80030ae:	025b      	lsls	r3, r3, #9
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d205      	bcs.n	80030c0 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	60da      	str	r2, [r3, #12]
 80030be:	e003      	b.n	80030c8 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80030c0:	231e      	movs	r3, #30
 80030c2:	18fb      	adds	r3, r7, r3
 80030c4:	2201      	movs	r2, #1
 80030c6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80030d4:	231e      	movs	r3, #30
 80030d6:	18fb      	adds	r3, r7, r3
 80030d8:	781b      	ldrb	r3, [r3, #0]
}
 80030da:	0018      	movs	r0, r3
 80030dc:	46bd      	mov	sp, r7
 80030de:	b008      	add	sp, #32
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	efff69f3 	.word	0xefff69f3
 80030e8:	ffffcfff 	.word	0xffffcfff
 80030ec:	fffff4ff 	.word	0xfffff4ff
 80030f0:	40013800 	.word	0x40013800
 80030f4:	40021000 	.word	0x40021000
 80030f8:	40004400 	.word	0x40004400
 80030fc:	007a1200 	.word	0x007a1200

08003100 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	2201      	movs	r2, #1
 800310e:	4013      	ands	r3, r2
 8003110:	d00b      	beq.n	800312a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	4a4a      	ldr	r2, [pc, #296]	; (8003244 <UART_AdvFeatureConfig+0x144>)
 800311a:	4013      	ands	r3, r2
 800311c:	0019      	movs	r1, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	2202      	movs	r2, #2
 8003130:	4013      	ands	r3, r2
 8003132:	d00b      	beq.n	800314c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	4a43      	ldr	r2, [pc, #268]	; (8003248 <UART_AdvFeatureConfig+0x148>)
 800313c:	4013      	ands	r3, r2
 800313e:	0019      	movs	r1, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003150:	2204      	movs	r2, #4
 8003152:	4013      	ands	r3, r2
 8003154:	d00b      	beq.n	800316e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	4a3b      	ldr	r2, [pc, #236]	; (800324c <UART_AdvFeatureConfig+0x14c>)
 800315e:	4013      	ands	r3, r2
 8003160:	0019      	movs	r1, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	2208      	movs	r2, #8
 8003174:	4013      	ands	r3, r2
 8003176:	d00b      	beq.n	8003190 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	4a34      	ldr	r2, [pc, #208]	; (8003250 <UART_AdvFeatureConfig+0x150>)
 8003180:	4013      	ands	r3, r2
 8003182:	0019      	movs	r1, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	2210      	movs	r2, #16
 8003196:	4013      	ands	r3, r2
 8003198:	d00b      	beq.n	80031b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	4a2c      	ldr	r2, [pc, #176]	; (8003254 <UART_AdvFeatureConfig+0x154>)
 80031a2:	4013      	ands	r3, r2
 80031a4:	0019      	movs	r1, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	2220      	movs	r2, #32
 80031b8:	4013      	ands	r3, r2
 80031ba:	d00b      	beq.n	80031d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	4a25      	ldr	r2, [pc, #148]	; (8003258 <UART_AdvFeatureConfig+0x158>)
 80031c4:	4013      	ands	r3, r2
 80031c6:	0019      	movs	r1, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	2240      	movs	r2, #64	; 0x40
 80031da:	4013      	ands	r3, r2
 80031dc:	d01d      	beq.n	800321a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	4a1d      	ldr	r2, [pc, #116]	; (800325c <UART_AdvFeatureConfig+0x15c>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	0019      	movs	r1, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031fa:	2380      	movs	r3, #128	; 0x80
 80031fc:	035b      	lsls	r3, r3, #13
 80031fe:	429a      	cmp	r2, r3
 8003200:	d10b      	bne.n	800321a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	4a15      	ldr	r2, [pc, #84]	; (8003260 <UART_AdvFeatureConfig+0x160>)
 800320a:	4013      	ands	r3, r2
 800320c:	0019      	movs	r1, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321e:	2280      	movs	r2, #128	; 0x80
 8003220:	4013      	ands	r3, r2
 8003222:	d00b      	beq.n	800323c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	4a0e      	ldr	r2, [pc, #56]	; (8003264 <UART_AdvFeatureConfig+0x164>)
 800322c:	4013      	ands	r3, r2
 800322e:	0019      	movs	r1, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	430a      	orrs	r2, r1
 800323a:	605a      	str	r2, [r3, #4]
  }
}
 800323c:	46c0      	nop			; (mov r8, r8)
 800323e:	46bd      	mov	sp, r7
 8003240:	b002      	add	sp, #8
 8003242:	bd80      	pop	{r7, pc}
 8003244:	fffdffff 	.word	0xfffdffff
 8003248:	fffeffff 	.word	0xfffeffff
 800324c:	fffbffff 	.word	0xfffbffff
 8003250:	ffff7fff 	.word	0xffff7fff
 8003254:	ffffefff 	.word	0xffffefff
 8003258:	ffffdfff 	.word	0xffffdfff
 800325c:	ffefffff 	.word	0xffefffff
 8003260:	ff9fffff 	.word	0xff9fffff
 8003264:	fff7ffff 	.word	0xfff7ffff

08003268 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b092      	sub	sp, #72	; 0x48
 800326c:	af02      	add	r7, sp, #8
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2284      	movs	r2, #132	; 0x84
 8003274:	2100      	movs	r1, #0
 8003276:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003278:	f7fd fcd0 	bl	8000c1c <HAL_GetTick>
 800327c:	0003      	movs	r3, r0
 800327e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2208      	movs	r2, #8
 8003288:	4013      	ands	r3, r2
 800328a:	2b08      	cmp	r3, #8
 800328c:	d12c      	bne.n	80032e8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800328e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003290:	2280      	movs	r2, #128	; 0x80
 8003292:	0391      	lsls	r1, r2, #14
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	4a46      	ldr	r2, [pc, #280]	; (80033b0 <UART_CheckIdleState+0x148>)
 8003298:	9200      	str	r2, [sp, #0]
 800329a:	2200      	movs	r2, #0
 800329c:	f000 f88c 	bl	80033b8 <UART_WaitOnFlagUntilTimeout>
 80032a0:	1e03      	subs	r3, r0, #0
 80032a2:	d021      	beq.n	80032e8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032a4:	f3ef 8310 	mrs	r3, PRIMASK
 80032a8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80032ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80032ae:	2301      	movs	r3, #1
 80032b0:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b4:	f383 8810 	msr	PRIMASK, r3
}
 80032b8:	46c0      	nop			; (mov r8, r8)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2180      	movs	r1, #128	; 0x80
 80032c6:	438a      	bics	r2, r1
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d0:	f383 8810 	msr	PRIMASK, r3
}
 80032d4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2220      	movs	r2, #32
 80032da:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2278      	movs	r2, #120	; 0x78
 80032e0:	2100      	movs	r1, #0
 80032e2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e05f      	b.n	80033a8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2204      	movs	r2, #4
 80032f0:	4013      	ands	r3, r2
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d146      	bne.n	8003384 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032f8:	2280      	movs	r2, #128	; 0x80
 80032fa:	03d1      	lsls	r1, r2, #15
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	4a2c      	ldr	r2, [pc, #176]	; (80033b0 <UART_CheckIdleState+0x148>)
 8003300:	9200      	str	r2, [sp, #0]
 8003302:	2200      	movs	r2, #0
 8003304:	f000 f858 	bl	80033b8 <UART_WaitOnFlagUntilTimeout>
 8003308:	1e03      	subs	r3, r0, #0
 800330a:	d03b      	beq.n	8003384 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800330c:	f3ef 8310 	mrs	r3, PRIMASK
 8003310:	60fb      	str	r3, [r7, #12]
  return(result);
 8003312:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003314:	637b      	str	r3, [r7, #52]	; 0x34
 8003316:	2301      	movs	r3, #1
 8003318:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	f383 8810 	msr	PRIMASK, r3
}
 8003320:	46c0      	nop			; (mov r8, r8)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4921      	ldr	r1, [pc, #132]	; (80033b4 <UART_CheckIdleState+0x14c>)
 800332e:	400a      	ands	r2, r1
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003334:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f383 8810 	msr	PRIMASK, r3
}
 800333c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800333e:	f3ef 8310 	mrs	r3, PRIMASK
 8003342:	61bb      	str	r3, [r7, #24]
  return(result);
 8003344:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003346:	633b      	str	r3, [r7, #48]	; 0x30
 8003348:	2301      	movs	r3, #1
 800334a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	f383 8810 	msr	PRIMASK, r3
}
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2101      	movs	r1, #1
 8003360:	438a      	bics	r2, r1
 8003362:	609a      	str	r2, [r3, #8]
 8003364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003366:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	f383 8810 	msr	PRIMASK, r3
}
 800336e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2280      	movs	r2, #128	; 0x80
 8003374:	2120      	movs	r1, #32
 8003376:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2278      	movs	r2, #120	; 0x78
 800337c:	2100      	movs	r1, #0
 800337e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e011      	b.n	80033a8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2220      	movs	r2, #32
 8003388:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2280      	movs	r2, #128	; 0x80
 800338e:	2120      	movs	r1, #32
 8003390:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2278      	movs	r2, #120	; 0x78
 80033a2:	2100      	movs	r1, #0
 80033a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	0018      	movs	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	b010      	add	sp, #64	; 0x40
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	01ffffff 	.word	0x01ffffff
 80033b4:	fffffedf 	.word	0xfffffedf

080033b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	603b      	str	r3, [r7, #0]
 80033c4:	1dfb      	adds	r3, r7, #7
 80033c6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033c8:	e04b      	b.n	8003462 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	3301      	adds	r3, #1
 80033ce:	d048      	beq.n	8003462 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d0:	f7fd fc24 	bl	8000c1c <HAL_GetTick>
 80033d4:	0002      	movs	r2, r0
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d302      	bcc.n	80033e6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e04b      	b.n	8003482 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2204      	movs	r2, #4
 80033f2:	4013      	ands	r3, r2
 80033f4:	d035      	beq.n	8003462 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	2208      	movs	r2, #8
 80033fe:	4013      	ands	r3, r2
 8003400:	2b08      	cmp	r3, #8
 8003402:	d111      	bne.n	8003428 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2208      	movs	r2, #8
 800340a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	0018      	movs	r0, r3
 8003410:	f000 f83c 	bl	800348c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2284      	movs	r2, #132	; 0x84
 8003418:	2108      	movs	r1, #8
 800341a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2278      	movs	r2, #120	; 0x78
 8003420:	2100      	movs	r1, #0
 8003422:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e02c      	b.n	8003482 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	69da      	ldr	r2, [r3, #28]
 800342e:	2380      	movs	r3, #128	; 0x80
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	401a      	ands	r2, r3
 8003434:	2380      	movs	r3, #128	; 0x80
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	429a      	cmp	r2, r3
 800343a:	d112      	bne.n	8003462 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2280      	movs	r2, #128	; 0x80
 8003442:	0112      	lsls	r2, r2, #4
 8003444:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	0018      	movs	r0, r3
 800344a:	f000 f81f 	bl	800348c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2284      	movs	r2, #132	; 0x84
 8003452:	2120      	movs	r1, #32
 8003454:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2278      	movs	r2, #120	; 0x78
 800345a:	2100      	movs	r1, #0
 800345c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e00f      	b.n	8003482 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	4013      	ands	r3, r2
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	425a      	negs	r2, r3
 8003472:	4153      	adcs	r3, r2
 8003474:	b2db      	uxtb	r3, r3
 8003476:	001a      	movs	r2, r3
 8003478:	1dfb      	adds	r3, r7, #7
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	429a      	cmp	r2, r3
 800347e:	d0a4      	beq.n	80033ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	0018      	movs	r0, r3
 8003484:	46bd      	mov	sp, r7
 8003486:	b004      	add	sp, #16
 8003488:	bd80      	pop	{r7, pc}
	...

0800348c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b08e      	sub	sp, #56	; 0x38
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003494:	f3ef 8310 	mrs	r3, PRIMASK
 8003498:	617b      	str	r3, [r7, #20]
  return(result);
 800349a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800349c:	637b      	str	r3, [r7, #52]	; 0x34
 800349e:	2301      	movs	r3, #1
 80034a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	f383 8810 	msr	PRIMASK, r3
}
 80034a8:	46c0      	nop			; (mov r8, r8)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4926      	ldr	r1, [pc, #152]	; (8003550 <UART_EndRxTransfer+0xc4>)
 80034b6:	400a      	ands	r2, r1
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	f383 8810 	msr	PRIMASK, r3
}
 80034c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034c6:	f3ef 8310 	mrs	r3, PRIMASK
 80034ca:	623b      	str	r3, [r7, #32]
  return(result);
 80034cc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ce:	633b      	str	r3, [r7, #48]	; 0x30
 80034d0:	2301      	movs	r3, #1
 80034d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	f383 8810 	msr	PRIMASK, r3
}
 80034da:	46c0      	nop			; (mov r8, r8)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2101      	movs	r1, #1
 80034e8:	438a      	bics	r2, r1
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ee:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f2:	f383 8810 	msr	PRIMASK, r3
}
 80034f6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d118      	bne.n	8003532 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003500:	f3ef 8310 	mrs	r3, PRIMASK
 8003504:	60bb      	str	r3, [r7, #8]
  return(result);
 8003506:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003508:	62fb      	str	r3, [r7, #44]	; 0x2c
 800350a:	2301      	movs	r3, #1
 800350c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f383 8810 	msr	PRIMASK, r3
}
 8003514:	46c0      	nop			; (mov r8, r8)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2110      	movs	r1, #16
 8003522:	438a      	bics	r2, r1
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003528:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	f383 8810 	msr	PRIMASK, r3
}
 8003530:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2280      	movs	r2, #128	; 0x80
 8003536:	2120      	movs	r1, #32
 8003538:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	46bd      	mov	sp, r7
 800354a:	b00e      	add	sp, #56	; 0x38
 800354c:	bd80      	pop	{r7, pc}
 800354e:	46c0      	nop			; (mov r8, r8)
 8003550:	fffffedf 	.word	0xfffffedf

08003554 <__sflush_r>:
 8003554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003556:	898b      	ldrh	r3, [r1, #12]
 8003558:	0005      	movs	r5, r0
 800355a:	000c      	movs	r4, r1
 800355c:	071a      	lsls	r2, r3, #28
 800355e:	d45c      	bmi.n	800361a <__sflush_r+0xc6>
 8003560:	684a      	ldr	r2, [r1, #4]
 8003562:	2a00      	cmp	r2, #0
 8003564:	dc04      	bgt.n	8003570 <__sflush_r+0x1c>
 8003566:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003568:	2a00      	cmp	r2, #0
 800356a:	dc01      	bgt.n	8003570 <__sflush_r+0x1c>
 800356c:	2000      	movs	r0, #0
 800356e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003570:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003572:	2f00      	cmp	r7, #0
 8003574:	d0fa      	beq.n	800356c <__sflush_r+0x18>
 8003576:	2200      	movs	r2, #0
 8003578:	2080      	movs	r0, #128	; 0x80
 800357a:	682e      	ldr	r6, [r5, #0]
 800357c:	602a      	str	r2, [r5, #0]
 800357e:	001a      	movs	r2, r3
 8003580:	0140      	lsls	r0, r0, #5
 8003582:	6a21      	ldr	r1, [r4, #32]
 8003584:	4002      	ands	r2, r0
 8003586:	4203      	tst	r3, r0
 8003588:	d034      	beq.n	80035f4 <__sflush_r+0xa0>
 800358a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800358c:	89a3      	ldrh	r3, [r4, #12]
 800358e:	075b      	lsls	r3, r3, #29
 8003590:	d506      	bpl.n	80035a0 <__sflush_r+0x4c>
 8003592:	6863      	ldr	r3, [r4, #4]
 8003594:	1ac0      	subs	r0, r0, r3
 8003596:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <__sflush_r+0x4c>
 800359c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800359e:	1ac0      	subs	r0, r0, r3
 80035a0:	0002      	movs	r2, r0
 80035a2:	2300      	movs	r3, #0
 80035a4:	0028      	movs	r0, r5
 80035a6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80035a8:	6a21      	ldr	r1, [r4, #32]
 80035aa:	47b8      	blx	r7
 80035ac:	89a2      	ldrh	r2, [r4, #12]
 80035ae:	1c43      	adds	r3, r0, #1
 80035b0:	d106      	bne.n	80035c0 <__sflush_r+0x6c>
 80035b2:	6829      	ldr	r1, [r5, #0]
 80035b4:	291d      	cmp	r1, #29
 80035b6:	d82c      	bhi.n	8003612 <__sflush_r+0xbe>
 80035b8:	4b2a      	ldr	r3, [pc, #168]	; (8003664 <__sflush_r+0x110>)
 80035ba:	410b      	asrs	r3, r1
 80035bc:	07db      	lsls	r3, r3, #31
 80035be:	d428      	bmi.n	8003612 <__sflush_r+0xbe>
 80035c0:	2300      	movs	r3, #0
 80035c2:	6063      	str	r3, [r4, #4]
 80035c4:	6923      	ldr	r3, [r4, #16]
 80035c6:	6023      	str	r3, [r4, #0]
 80035c8:	04d2      	lsls	r2, r2, #19
 80035ca:	d505      	bpl.n	80035d8 <__sflush_r+0x84>
 80035cc:	1c43      	adds	r3, r0, #1
 80035ce:	d102      	bne.n	80035d6 <__sflush_r+0x82>
 80035d0:	682b      	ldr	r3, [r5, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d100      	bne.n	80035d8 <__sflush_r+0x84>
 80035d6:	6560      	str	r0, [r4, #84]	; 0x54
 80035d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035da:	602e      	str	r6, [r5, #0]
 80035dc:	2900      	cmp	r1, #0
 80035de:	d0c5      	beq.n	800356c <__sflush_r+0x18>
 80035e0:	0023      	movs	r3, r4
 80035e2:	3344      	adds	r3, #68	; 0x44
 80035e4:	4299      	cmp	r1, r3
 80035e6:	d002      	beq.n	80035ee <__sflush_r+0x9a>
 80035e8:	0028      	movs	r0, r5
 80035ea:	f000 fb2b 	bl	8003c44 <_free_r>
 80035ee:	2000      	movs	r0, #0
 80035f0:	6360      	str	r0, [r4, #52]	; 0x34
 80035f2:	e7bc      	b.n	800356e <__sflush_r+0x1a>
 80035f4:	2301      	movs	r3, #1
 80035f6:	0028      	movs	r0, r5
 80035f8:	47b8      	blx	r7
 80035fa:	1c43      	adds	r3, r0, #1
 80035fc:	d1c6      	bne.n	800358c <__sflush_r+0x38>
 80035fe:	682b      	ldr	r3, [r5, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0c3      	beq.n	800358c <__sflush_r+0x38>
 8003604:	2b1d      	cmp	r3, #29
 8003606:	d001      	beq.n	800360c <__sflush_r+0xb8>
 8003608:	2b16      	cmp	r3, #22
 800360a:	d101      	bne.n	8003610 <__sflush_r+0xbc>
 800360c:	602e      	str	r6, [r5, #0]
 800360e:	e7ad      	b.n	800356c <__sflush_r+0x18>
 8003610:	89a2      	ldrh	r2, [r4, #12]
 8003612:	2340      	movs	r3, #64	; 0x40
 8003614:	4313      	orrs	r3, r2
 8003616:	81a3      	strh	r3, [r4, #12]
 8003618:	e7a9      	b.n	800356e <__sflush_r+0x1a>
 800361a:	690e      	ldr	r6, [r1, #16]
 800361c:	2e00      	cmp	r6, #0
 800361e:	d0a5      	beq.n	800356c <__sflush_r+0x18>
 8003620:	680f      	ldr	r7, [r1, #0]
 8003622:	600e      	str	r6, [r1, #0]
 8003624:	1bba      	subs	r2, r7, r6
 8003626:	9201      	str	r2, [sp, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	079b      	lsls	r3, r3, #30
 800362c:	d100      	bne.n	8003630 <__sflush_r+0xdc>
 800362e:	694a      	ldr	r2, [r1, #20]
 8003630:	60a2      	str	r2, [r4, #8]
 8003632:	9b01      	ldr	r3, [sp, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	dd99      	ble.n	800356c <__sflush_r+0x18>
 8003638:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800363a:	0032      	movs	r2, r6
 800363c:	001f      	movs	r7, r3
 800363e:	0028      	movs	r0, r5
 8003640:	9b01      	ldr	r3, [sp, #4]
 8003642:	6a21      	ldr	r1, [r4, #32]
 8003644:	47b8      	blx	r7
 8003646:	2800      	cmp	r0, #0
 8003648:	dc06      	bgt.n	8003658 <__sflush_r+0x104>
 800364a:	2340      	movs	r3, #64	; 0x40
 800364c:	2001      	movs	r0, #1
 800364e:	89a2      	ldrh	r2, [r4, #12]
 8003650:	4240      	negs	r0, r0
 8003652:	4313      	orrs	r3, r2
 8003654:	81a3      	strh	r3, [r4, #12]
 8003656:	e78a      	b.n	800356e <__sflush_r+0x1a>
 8003658:	9b01      	ldr	r3, [sp, #4]
 800365a:	1836      	adds	r6, r6, r0
 800365c:	1a1b      	subs	r3, r3, r0
 800365e:	9301      	str	r3, [sp, #4]
 8003660:	e7e7      	b.n	8003632 <__sflush_r+0xde>
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	dfbffffe 	.word	0xdfbffffe

08003668 <_fflush_r>:
 8003668:	690b      	ldr	r3, [r1, #16]
 800366a:	b570      	push	{r4, r5, r6, lr}
 800366c:	0005      	movs	r5, r0
 800366e:	000c      	movs	r4, r1
 8003670:	2b00      	cmp	r3, #0
 8003672:	d102      	bne.n	800367a <_fflush_r+0x12>
 8003674:	2500      	movs	r5, #0
 8003676:	0028      	movs	r0, r5
 8003678:	bd70      	pop	{r4, r5, r6, pc}
 800367a:	2800      	cmp	r0, #0
 800367c:	d004      	beq.n	8003688 <_fflush_r+0x20>
 800367e:	6a03      	ldr	r3, [r0, #32]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <_fflush_r+0x20>
 8003684:	f000 f8c4 	bl	8003810 <__sinit>
 8003688:	220c      	movs	r2, #12
 800368a:	5ea3      	ldrsh	r3, [r4, r2]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0f1      	beq.n	8003674 <_fflush_r+0xc>
 8003690:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003692:	07d2      	lsls	r2, r2, #31
 8003694:	d404      	bmi.n	80036a0 <_fflush_r+0x38>
 8003696:	059b      	lsls	r3, r3, #22
 8003698:	d402      	bmi.n	80036a0 <_fflush_r+0x38>
 800369a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800369c:	f000 facf 	bl	8003c3e <__retarget_lock_acquire_recursive>
 80036a0:	0028      	movs	r0, r5
 80036a2:	0021      	movs	r1, r4
 80036a4:	f7ff ff56 	bl	8003554 <__sflush_r>
 80036a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036aa:	0005      	movs	r5, r0
 80036ac:	07db      	lsls	r3, r3, #31
 80036ae:	d4e2      	bmi.n	8003676 <_fflush_r+0xe>
 80036b0:	89a3      	ldrh	r3, [r4, #12]
 80036b2:	059b      	lsls	r3, r3, #22
 80036b4:	d4df      	bmi.n	8003676 <_fflush_r+0xe>
 80036b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036b8:	f000 fac2 	bl	8003c40 <__retarget_lock_release_recursive>
 80036bc:	e7db      	b.n	8003676 <_fflush_r+0xe>
	...

080036c0 <fflush>:
 80036c0:	0001      	movs	r1, r0
 80036c2:	b510      	push	{r4, lr}
 80036c4:	2800      	cmp	r0, #0
 80036c6:	d105      	bne.n	80036d4 <fflush+0x14>
 80036c8:	4a05      	ldr	r2, [pc, #20]	; (80036e0 <fflush+0x20>)
 80036ca:	4906      	ldr	r1, [pc, #24]	; (80036e4 <fflush+0x24>)
 80036cc:	4806      	ldr	r0, [pc, #24]	; (80036e8 <fflush+0x28>)
 80036ce:	f000 f8b7 	bl	8003840 <_fwalk_sglue>
 80036d2:	bd10      	pop	{r4, pc}
 80036d4:	4b05      	ldr	r3, [pc, #20]	; (80036ec <fflush+0x2c>)
 80036d6:	6818      	ldr	r0, [r3, #0]
 80036d8:	f7ff ffc6 	bl	8003668 <_fflush_r>
 80036dc:	e7f9      	b.n	80036d2 <fflush+0x12>
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	20000018 	.word	0x20000018
 80036e4:	08003669 	.word	0x08003669
 80036e8:	20000024 	.word	0x20000024
 80036ec:	20000070 	.word	0x20000070

080036f0 <std>:
 80036f0:	2300      	movs	r3, #0
 80036f2:	b510      	push	{r4, lr}
 80036f4:	0004      	movs	r4, r0
 80036f6:	6003      	str	r3, [r0, #0]
 80036f8:	6043      	str	r3, [r0, #4]
 80036fa:	6083      	str	r3, [r0, #8]
 80036fc:	8181      	strh	r1, [r0, #12]
 80036fe:	6643      	str	r3, [r0, #100]	; 0x64
 8003700:	81c2      	strh	r2, [r0, #14]
 8003702:	6103      	str	r3, [r0, #16]
 8003704:	6143      	str	r3, [r0, #20]
 8003706:	6183      	str	r3, [r0, #24]
 8003708:	0019      	movs	r1, r3
 800370a:	2208      	movs	r2, #8
 800370c:	305c      	adds	r0, #92	; 0x5c
 800370e:	f000 fa15 	bl	8003b3c <memset>
 8003712:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <std+0x50>)
 8003714:	6224      	str	r4, [r4, #32]
 8003716:	6263      	str	r3, [r4, #36]	; 0x24
 8003718:	4b0a      	ldr	r3, [pc, #40]	; (8003744 <std+0x54>)
 800371a:	62a3      	str	r3, [r4, #40]	; 0x28
 800371c:	4b0a      	ldr	r3, [pc, #40]	; (8003748 <std+0x58>)
 800371e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003720:	4b0a      	ldr	r3, [pc, #40]	; (800374c <std+0x5c>)
 8003722:	6323      	str	r3, [r4, #48]	; 0x30
 8003724:	4b0a      	ldr	r3, [pc, #40]	; (8003750 <std+0x60>)
 8003726:	429c      	cmp	r4, r3
 8003728:	d005      	beq.n	8003736 <std+0x46>
 800372a:	4b0a      	ldr	r3, [pc, #40]	; (8003754 <std+0x64>)
 800372c:	429c      	cmp	r4, r3
 800372e:	d002      	beq.n	8003736 <std+0x46>
 8003730:	4b09      	ldr	r3, [pc, #36]	; (8003758 <std+0x68>)
 8003732:	429c      	cmp	r4, r3
 8003734:	d103      	bne.n	800373e <std+0x4e>
 8003736:	0020      	movs	r0, r4
 8003738:	3058      	adds	r0, #88	; 0x58
 800373a:	f000 fa7f 	bl	8003c3c <__retarget_lock_init_recursive>
 800373e:	bd10      	pop	{r4, pc}
 8003740:	08003959 	.word	0x08003959
 8003744:	08003981 	.word	0x08003981
 8003748:	080039b9 	.word	0x080039b9
 800374c:	080039e5 	.word	0x080039e5
 8003750:	20000180 	.word	0x20000180
 8003754:	200001e8 	.word	0x200001e8
 8003758:	20000250 	.word	0x20000250

0800375c <stdio_exit_handler>:
 800375c:	b510      	push	{r4, lr}
 800375e:	4a03      	ldr	r2, [pc, #12]	; (800376c <stdio_exit_handler+0x10>)
 8003760:	4903      	ldr	r1, [pc, #12]	; (8003770 <stdio_exit_handler+0x14>)
 8003762:	4804      	ldr	r0, [pc, #16]	; (8003774 <stdio_exit_handler+0x18>)
 8003764:	f000 f86c 	bl	8003840 <_fwalk_sglue>
 8003768:	bd10      	pop	{r4, pc}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	20000018 	.word	0x20000018
 8003770:	08003669 	.word	0x08003669
 8003774:	20000024 	.word	0x20000024

08003778 <cleanup_stdio>:
 8003778:	6841      	ldr	r1, [r0, #4]
 800377a:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <cleanup_stdio+0x30>)
 800377c:	b510      	push	{r4, lr}
 800377e:	0004      	movs	r4, r0
 8003780:	4299      	cmp	r1, r3
 8003782:	d001      	beq.n	8003788 <cleanup_stdio+0x10>
 8003784:	f7ff ff70 	bl	8003668 <_fflush_r>
 8003788:	68a1      	ldr	r1, [r4, #8]
 800378a:	4b08      	ldr	r3, [pc, #32]	; (80037ac <cleanup_stdio+0x34>)
 800378c:	4299      	cmp	r1, r3
 800378e:	d002      	beq.n	8003796 <cleanup_stdio+0x1e>
 8003790:	0020      	movs	r0, r4
 8003792:	f7ff ff69 	bl	8003668 <_fflush_r>
 8003796:	68e1      	ldr	r1, [r4, #12]
 8003798:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <cleanup_stdio+0x38>)
 800379a:	4299      	cmp	r1, r3
 800379c:	d002      	beq.n	80037a4 <cleanup_stdio+0x2c>
 800379e:	0020      	movs	r0, r4
 80037a0:	f7ff ff62 	bl	8003668 <_fflush_r>
 80037a4:	bd10      	pop	{r4, pc}
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	20000180 	.word	0x20000180
 80037ac:	200001e8 	.word	0x200001e8
 80037b0:	20000250 	.word	0x20000250

080037b4 <global_stdio_init.part.0>:
 80037b4:	b510      	push	{r4, lr}
 80037b6:	4b09      	ldr	r3, [pc, #36]	; (80037dc <global_stdio_init.part.0+0x28>)
 80037b8:	4a09      	ldr	r2, [pc, #36]	; (80037e0 <global_stdio_init.part.0+0x2c>)
 80037ba:	2104      	movs	r1, #4
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	4809      	ldr	r0, [pc, #36]	; (80037e4 <global_stdio_init.part.0+0x30>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	f7ff ff95 	bl	80036f0 <std>
 80037c6:	2201      	movs	r2, #1
 80037c8:	2109      	movs	r1, #9
 80037ca:	4807      	ldr	r0, [pc, #28]	; (80037e8 <global_stdio_init.part.0+0x34>)
 80037cc:	f7ff ff90 	bl	80036f0 <std>
 80037d0:	2202      	movs	r2, #2
 80037d2:	2112      	movs	r1, #18
 80037d4:	4805      	ldr	r0, [pc, #20]	; (80037ec <global_stdio_init.part.0+0x38>)
 80037d6:	f7ff ff8b 	bl	80036f0 <std>
 80037da:	bd10      	pop	{r4, pc}
 80037dc:	200002b8 	.word	0x200002b8
 80037e0:	0800375d 	.word	0x0800375d
 80037e4:	20000180 	.word	0x20000180
 80037e8:	200001e8 	.word	0x200001e8
 80037ec:	20000250 	.word	0x20000250

080037f0 <__sfp_lock_acquire>:
 80037f0:	b510      	push	{r4, lr}
 80037f2:	4802      	ldr	r0, [pc, #8]	; (80037fc <__sfp_lock_acquire+0xc>)
 80037f4:	f000 fa23 	bl	8003c3e <__retarget_lock_acquire_recursive>
 80037f8:	bd10      	pop	{r4, pc}
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	200002c1 	.word	0x200002c1

08003800 <__sfp_lock_release>:
 8003800:	b510      	push	{r4, lr}
 8003802:	4802      	ldr	r0, [pc, #8]	; (800380c <__sfp_lock_release+0xc>)
 8003804:	f000 fa1c 	bl	8003c40 <__retarget_lock_release_recursive>
 8003808:	bd10      	pop	{r4, pc}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	200002c1 	.word	0x200002c1

08003810 <__sinit>:
 8003810:	b510      	push	{r4, lr}
 8003812:	0004      	movs	r4, r0
 8003814:	f7ff ffec 	bl	80037f0 <__sfp_lock_acquire>
 8003818:	6a23      	ldr	r3, [r4, #32]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <__sinit+0x14>
 800381e:	f7ff ffef 	bl	8003800 <__sfp_lock_release>
 8003822:	bd10      	pop	{r4, pc}
 8003824:	4b04      	ldr	r3, [pc, #16]	; (8003838 <__sinit+0x28>)
 8003826:	6223      	str	r3, [r4, #32]
 8003828:	4b04      	ldr	r3, [pc, #16]	; (800383c <__sinit+0x2c>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1f6      	bne.n	800381e <__sinit+0xe>
 8003830:	f7ff ffc0 	bl	80037b4 <global_stdio_init.part.0>
 8003834:	e7f3      	b.n	800381e <__sinit+0xe>
 8003836:	46c0      	nop			; (mov r8, r8)
 8003838:	08003779 	.word	0x08003779
 800383c:	200002b8 	.word	0x200002b8

08003840 <_fwalk_sglue>:
 8003840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003842:	0014      	movs	r4, r2
 8003844:	2600      	movs	r6, #0
 8003846:	9000      	str	r0, [sp, #0]
 8003848:	9101      	str	r1, [sp, #4]
 800384a:	68a5      	ldr	r5, [r4, #8]
 800384c:	6867      	ldr	r7, [r4, #4]
 800384e:	3f01      	subs	r7, #1
 8003850:	d504      	bpl.n	800385c <_fwalk_sglue+0x1c>
 8003852:	6824      	ldr	r4, [r4, #0]
 8003854:	2c00      	cmp	r4, #0
 8003856:	d1f8      	bne.n	800384a <_fwalk_sglue+0xa>
 8003858:	0030      	movs	r0, r6
 800385a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800385c:	89ab      	ldrh	r3, [r5, #12]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d908      	bls.n	8003874 <_fwalk_sglue+0x34>
 8003862:	220e      	movs	r2, #14
 8003864:	5eab      	ldrsh	r3, [r5, r2]
 8003866:	3301      	adds	r3, #1
 8003868:	d004      	beq.n	8003874 <_fwalk_sglue+0x34>
 800386a:	0029      	movs	r1, r5
 800386c:	9800      	ldr	r0, [sp, #0]
 800386e:	9b01      	ldr	r3, [sp, #4]
 8003870:	4798      	blx	r3
 8003872:	4306      	orrs	r6, r0
 8003874:	3568      	adds	r5, #104	; 0x68
 8003876:	e7ea      	b.n	800384e <_fwalk_sglue+0xe>

08003878 <iprintf>:
 8003878:	b40f      	push	{r0, r1, r2, r3}
 800387a:	b507      	push	{r0, r1, r2, lr}
 800387c:	4905      	ldr	r1, [pc, #20]	; (8003894 <iprintf+0x1c>)
 800387e:	ab04      	add	r3, sp, #16
 8003880:	6808      	ldr	r0, [r1, #0]
 8003882:	cb04      	ldmia	r3!, {r2}
 8003884:	6881      	ldr	r1, [r0, #8]
 8003886:	9301      	str	r3, [sp, #4]
 8003888:	f000 fb02 	bl	8003e90 <_vfiprintf_r>
 800388c:	b003      	add	sp, #12
 800388e:	bc08      	pop	{r3}
 8003890:	b004      	add	sp, #16
 8003892:	4718      	bx	r3
 8003894:	20000070 	.word	0x20000070

08003898 <_puts_r>:
 8003898:	6a03      	ldr	r3, [r0, #32]
 800389a:	b570      	push	{r4, r5, r6, lr}
 800389c:	0005      	movs	r5, r0
 800389e:	000e      	movs	r6, r1
 80038a0:	6884      	ldr	r4, [r0, #8]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <_puts_r+0x12>
 80038a6:	f7ff ffb3 	bl	8003810 <__sinit>
 80038aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038ac:	07db      	lsls	r3, r3, #31
 80038ae:	d405      	bmi.n	80038bc <_puts_r+0x24>
 80038b0:	89a3      	ldrh	r3, [r4, #12]
 80038b2:	059b      	lsls	r3, r3, #22
 80038b4:	d402      	bmi.n	80038bc <_puts_r+0x24>
 80038b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038b8:	f000 f9c1 	bl	8003c3e <__retarget_lock_acquire_recursive>
 80038bc:	89a3      	ldrh	r3, [r4, #12]
 80038be:	071b      	lsls	r3, r3, #28
 80038c0:	d502      	bpl.n	80038c8 <_puts_r+0x30>
 80038c2:	6923      	ldr	r3, [r4, #16]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d11f      	bne.n	8003908 <_puts_r+0x70>
 80038c8:	0021      	movs	r1, r4
 80038ca:	0028      	movs	r0, r5
 80038cc:	f000 f8d2 	bl	8003a74 <__swsetup_r>
 80038d0:	2800      	cmp	r0, #0
 80038d2:	d019      	beq.n	8003908 <_puts_r+0x70>
 80038d4:	2501      	movs	r5, #1
 80038d6:	426d      	negs	r5, r5
 80038d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038da:	07db      	lsls	r3, r3, #31
 80038dc:	d405      	bmi.n	80038ea <_puts_r+0x52>
 80038de:	89a3      	ldrh	r3, [r4, #12]
 80038e0:	059b      	lsls	r3, r3, #22
 80038e2:	d402      	bmi.n	80038ea <_puts_r+0x52>
 80038e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038e6:	f000 f9ab 	bl	8003c40 <__retarget_lock_release_recursive>
 80038ea:	0028      	movs	r0, r5
 80038ec:	bd70      	pop	{r4, r5, r6, pc}
 80038ee:	3601      	adds	r6, #1
 80038f0:	60a3      	str	r3, [r4, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	da04      	bge.n	8003900 <_puts_r+0x68>
 80038f6:	69a2      	ldr	r2, [r4, #24]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	dc16      	bgt.n	800392a <_puts_r+0x92>
 80038fc:	290a      	cmp	r1, #10
 80038fe:	d014      	beq.n	800392a <_puts_r+0x92>
 8003900:	6823      	ldr	r3, [r4, #0]
 8003902:	1c5a      	adds	r2, r3, #1
 8003904:	6022      	str	r2, [r4, #0]
 8003906:	7019      	strb	r1, [r3, #0]
 8003908:	68a3      	ldr	r3, [r4, #8]
 800390a:	7831      	ldrb	r1, [r6, #0]
 800390c:	3b01      	subs	r3, #1
 800390e:	2900      	cmp	r1, #0
 8003910:	d1ed      	bne.n	80038ee <_puts_r+0x56>
 8003912:	60a3      	str	r3, [r4, #8]
 8003914:	2b00      	cmp	r3, #0
 8003916:	da0f      	bge.n	8003938 <_puts_r+0xa0>
 8003918:	0028      	movs	r0, r5
 800391a:	0022      	movs	r2, r4
 800391c:	310a      	adds	r1, #10
 800391e:	f000 f867 	bl	80039f0 <__swbuf_r>
 8003922:	250a      	movs	r5, #10
 8003924:	3001      	adds	r0, #1
 8003926:	d1d7      	bne.n	80038d8 <_puts_r+0x40>
 8003928:	e7d4      	b.n	80038d4 <_puts_r+0x3c>
 800392a:	0022      	movs	r2, r4
 800392c:	0028      	movs	r0, r5
 800392e:	f000 f85f 	bl	80039f0 <__swbuf_r>
 8003932:	3001      	adds	r0, #1
 8003934:	d1e8      	bne.n	8003908 <_puts_r+0x70>
 8003936:	e7cd      	b.n	80038d4 <_puts_r+0x3c>
 8003938:	250a      	movs	r5, #10
 800393a:	6823      	ldr	r3, [r4, #0]
 800393c:	1c5a      	adds	r2, r3, #1
 800393e:	6022      	str	r2, [r4, #0]
 8003940:	701d      	strb	r5, [r3, #0]
 8003942:	e7c9      	b.n	80038d8 <_puts_r+0x40>

08003944 <puts>:
 8003944:	b510      	push	{r4, lr}
 8003946:	4b03      	ldr	r3, [pc, #12]	; (8003954 <puts+0x10>)
 8003948:	0001      	movs	r1, r0
 800394a:	6818      	ldr	r0, [r3, #0]
 800394c:	f7ff ffa4 	bl	8003898 <_puts_r>
 8003950:	bd10      	pop	{r4, pc}
 8003952:	46c0      	nop			; (mov r8, r8)
 8003954:	20000070 	.word	0x20000070

08003958 <__sread>:
 8003958:	b570      	push	{r4, r5, r6, lr}
 800395a:	000c      	movs	r4, r1
 800395c:	250e      	movs	r5, #14
 800395e:	5f49      	ldrsh	r1, [r1, r5]
 8003960:	f000 f91a 	bl	8003b98 <_read_r>
 8003964:	2800      	cmp	r0, #0
 8003966:	db03      	blt.n	8003970 <__sread+0x18>
 8003968:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800396a:	181b      	adds	r3, r3, r0
 800396c:	6563      	str	r3, [r4, #84]	; 0x54
 800396e:	bd70      	pop	{r4, r5, r6, pc}
 8003970:	89a3      	ldrh	r3, [r4, #12]
 8003972:	4a02      	ldr	r2, [pc, #8]	; (800397c <__sread+0x24>)
 8003974:	4013      	ands	r3, r2
 8003976:	81a3      	strh	r3, [r4, #12]
 8003978:	e7f9      	b.n	800396e <__sread+0x16>
 800397a:	46c0      	nop			; (mov r8, r8)
 800397c:	ffffefff 	.word	0xffffefff

08003980 <__swrite>:
 8003980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003982:	001f      	movs	r7, r3
 8003984:	898b      	ldrh	r3, [r1, #12]
 8003986:	0005      	movs	r5, r0
 8003988:	000c      	movs	r4, r1
 800398a:	0016      	movs	r6, r2
 800398c:	05db      	lsls	r3, r3, #23
 800398e:	d505      	bpl.n	800399c <__swrite+0x1c>
 8003990:	230e      	movs	r3, #14
 8003992:	5ec9      	ldrsh	r1, [r1, r3]
 8003994:	2200      	movs	r2, #0
 8003996:	2302      	movs	r3, #2
 8003998:	f000 f8ea 	bl	8003b70 <_lseek_r>
 800399c:	89a3      	ldrh	r3, [r4, #12]
 800399e:	4a05      	ldr	r2, [pc, #20]	; (80039b4 <__swrite+0x34>)
 80039a0:	0028      	movs	r0, r5
 80039a2:	4013      	ands	r3, r2
 80039a4:	81a3      	strh	r3, [r4, #12]
 80039a6:	0032      	movs	r2, r6
 80039a8:	230e      	movs	r3, #14
 80039aa:	5ee1      	ldrsh	r1, [r4, r3]
 80039ac:	003b      	movs	r3, r7
 80039ae:	f000 f907 	bl	8003bc0 <_write_r>
 80039b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039b4:	ffffefff 	.word	0xffffefff

080039b8 <__sseek>:
 80039b8:	b570      	push	{r4, r5, r6, lr}
 80039ba:	000c      	movs	r4, r1
 80039bc:	250e      	movs	r5, #14
 80039be:	5f49      	ldrsh	r1, [r1, r5]
 80039c0:	f000 f8d6 	bl	8003b70 <_lseek_r>
 80039c4:	89a3      	ldrh	r3, [r4, #12]
 80039c6:	1c42      	adds	r2, r0, #1
 80039c8:	d103      	bne.n	80039d2 <__sseek+0x1a>
 80039ca:	4a05      	ldr	r2, [pc, #20]	; (80039e0 <__sseek+0x28>)
 80039cc:	4013      	ands	r3, r2
 80039ce:	81a3      	strh	r3, [r4, #12]
 80039d0:	bd70      	pop	{r4, r5, r6, pc}
 80039d2:	2280      	movs	r2, #128	; 0x80
 80039d4:	0152      	lsls	r2, r2, #5
 80039d6:	4313      	orrs	r3, r2
 80039d8:	81a3      	strh	r3, [r4, #12]
 80039da:	6560      	str	r0, [r4, #84]	; 0x54
 80039dc:	e7f8      	b.n	80039d0 <__sseek+0x18>
 80039de:	46c0      	nop			; (mov r8, r8)
 80039e0:	ffffefff 	.word	0xffffefff

080039e4 <__sclose>:
 80039e4:	b510      	push	{r4, lr}
 80039e6:	230e      	movs	r3, #14
 80039e8:	5ec9      	ldrsh	r1, [r1, r3]
 80039ea:	f000 f8af 	bl	8003b4c <_close_r>
 80039ee:	bd10      	pop	{r4, pc}

080039f0 <__swbuf_r>:
 80039f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039f2:	0006      	movs	r6, r0
 80039f4:	000d      	movs	r5, r1
 80039f6:	0014      	movs	r4, r2
 80039f8:	2800      	cmp	r0, #0
 80039fa:	d004      	beq.n	8003a06 <__swbuf_r+0x16>
 80039fc:	6a03      	ldr	r3, [r0, #32]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <__swbuf_r+0x16>
 8003a02:	f7ff ff05 	bl	8003810 <__sinit>
 8003a06:	69a3      	ldr	r3, [r4, #24]
 8003a08:	60a3      	str	r3, [r4, #8]
 8003a0a:	89a3      	ldrh	r3, [r4, #12]
 8003a0c:	071b      	lsls	r3, r3, #28
 8003a0e:	d528      	bpl.n	8003a62 <__swbuf_r+0x72>
 8003a10:	6923      	ldr	r3, [r4, #16]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d025      	beq.n	8003a62 <__swbuf_r+0x72>
 8003a16:	6923      	ldr	r3, [r4, #16]
 8003a18:	6820      	ldr	r0, [r4, #0]
 8003a1a:	b2ef      	uxtb	r7, r5
 8003a1c:	1ac0      	subs	r0, r0, r3
 8003a1e:	6963      	ldr	r3, [r4, #20]
 8003a20:	b2ed      	uxtb	r5, r5
 8003a22:	4283      	cmp	r3, r0
 8003a24:	dc05      	bgt.n	8003a32 <__swbuf_r+0x42>
 8003a26:	0021      	movs	r1, r4
 8003a28:	0030      	movs	r0, r6
 8003a2a:	f7ff fe1d 	bl	8003668 <_fflush_r>
 8003a2e:	2800      	cmp	r0, #0
 8003a30:	d11d      	bne.n	8003a6e <__swbuf_r+0x7e>
 8003a32:	68a3      	ldr	r3, [r4, #8]
 8003a34:	3001      	adds	r0, #1
 8003a36:	3b01      	subs	r3, #1
 8003a38:	60a3      	str	r3, [r4, #8]
 8003a3a:	6823      	ldr	r3, [r4, #0]
 8003a3c:	1c5a      	adds	r2, r3, #1
 8003a3e:	6022      	str	r2, [r4, #0]
 8003a40:	701f      	strb	r7, [r3, #0]
 8003a42:	6963      	ldr	r3, [r4, #20]
 8003a44:	4283      	cmp	r3, r0
 8003a46:	d004      	beq.n	8003a52 <__swbuf_r+0x62>
 8003a48:	89a3      	ldrh	r3, [r4, #12]
 8003a4a:	07db      	lsls	r3, r3, #31
 8003a4c:	d507      	bpl.n	8003a5e <__swbuf_r+0x6e>
 8003a4e:	2d0a      	cmp	r5, #10
 8003a50:	d105      	bne.n	8003a5e <__swbuf_r+0x6e>
 8003a52:	0021      	movs	r1, r4
 8003a54:	0030      	movs	r0, r6
 8003a56:	f7ff fe07 	bl	8003668 <_fflush_r>
 8003a5a:	2800      	cmp	r0, #0
 8003a5c:	d107      	bne.n	8003a6e <__swbuf_r+0x7e>
 8003a5e:	0028      	movs	r0, r5
 8003a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a62:	0021      	movs	r1, r4
 8003a64:	0030      	movs	r0, r6
 8003a66:	f000 f805 	bl	8003a74 <__swsetup_r>
 8003a6a:	2800      	cmp	r0, #0
 8003a6c:	d0d3      	beq.n	8003a16 <__swbuf_r+0x26>
 8003a6e:	2501      	movs	r5, #1
 8003a70:	426d      	negs	r5, r5
 8003a72:	e7f4      	b.n	8003a5e <__swbuf_r+0x6e>

08003a74 <__swsetup_r>:
 8003a74:	4b30      	ldr	r3, [pc, #192]	; (8003b38 <__swsetup_r+0xc4>)
 8003a76:	b570      	push	{r4, r5, r6, lr}
 8003a78:	0005      	movs	r5, r0
 8003a7a:	6818      	ldr	r0, [r3, #0]
 8003a7c:	000c      	movs	r4, r1
 8003a7e:	2800      	cmp	r0, #0
 8003a80:	d004      	beq.n	8003a8c <__swsetup_r+0x18>
 8003a82:	6a03      	ldr	r3, [r0, #32]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <__swsetup_r+0x18>
 8003a88:	f7ff fec2 	bl	8003810 <__sinit>
 8003a8c:	230c      	movs	r3, #12
 8003a8e:	5ee2      	ldrsh	r2, [r4, r3]
 8003a90:	b293      	uxth	r3, r2
 8003a92:	0711      	lsls	r1, r2, #28
 8003a94:	d423      	bmi.n	8003ade <__swsetup_r+0x6a>
 8003a96:	06d9      	lsls	r1, r3, #27
 8003a98:	d407      	bmi.n	8003aaa <__swsetup_r+0x36>
 8003a9a:	2309      	movs	r3, #9
 8003a9c:	2001      	movs	r0, #1
 8003a9e:	602b      	str	r3, [r5, #0]
 8003aa0:	3337      	adds	r3, #55	; 0x37
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	81a3      	strh	r3, [r4, #12]
 8003aa6:	4240      	negs	r0, r0
 8003aa8:	bd70      	pop	{r4, r5, r6, pc}
 8003aaa:	075b      	lsls	r3, r3, #29
 8003aac:	d513      	bpl.n	8003ad6 <__swsetup_r+0x62>
 8003aae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ab0:	2900      	cmp	r1, #0
 8003ab2:	d008      	beq.n	8003ac6 <__swsetup_r+0x52>
 8003ab4:	0023      	movs	r3, r4
 8003ab6:	3344      	adds	r3, #68	; 0x44
 8003ab8:	4299      	cmp	r1, r3
 8003aba:	d002      	beq.n	8003ac2 <__swsetup_r+0x4e>
 8003abc:	0028      	movs	r0, r5
 8003abe:	f000 f8c1 	bl	8003c44 <_free_r>
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	6363      	str	r3, [r4, #52]	; 0x34
 8003ac6:	2224      	movs	r2, #36	; 0x24
 8003ac8:	89a3      	ldrh	r3, [r4, #12]
 8003aca:	4393      	bics	r3, r2
 8003acc:	81a3      	strh	r3, [r4, #12]
 8003ace:	2300      	movs	r3, #0
 8003ad0:	6063      	str	r3, [r4, #4]
 8003ad2:	6923      	ldr	r3, [r4, #16]
 8003ad4:	6023      	str	r3, [r4, #0]
 8003ad6:	2308      	movs	r3, #8
 8003ad8:	89a2      	ldrh	r2, [r4, #12]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	81a3      	strh	r3, [r4, #12]
 8003ade:	6923      	ldr	r3, [r4, #16]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10b      	bne.n	8003afc <__swsetup_r+0x88>
 8003ae4:	21a0      	movs	r1, #160	; 0xa0
 8003ae6:	2280      	movs	r2, #128	; 0x80
 8003ae8:	89a3      	ldrh	r3, [r4, #12]
 8003aea:	0089      	lsls	r1, r1, #2
 8003aec:	0092      	lsls	r2, r2, #2
 8003aee:	400b      	ands	r3, r1
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d003      	beq.n	8003afc <__swsetup_r+0x88>
 8003af4:	0021      	movs	r1, r4
 8003af6:	0028      	movs	r0, r5
 8003af8:	f000 fc8e 	bl	8004418 <__smakebuf_r>
 8003afc:	220c      	movs	r2, #12
 8003afe:	5ea3      	ldrsh	r3, [r4, r2]
 8003b00:	2001      	movs	r0, #1
 8003b02:	001a      	movs	r2, r3
 8003b04:	b299      	uxth	r1, r3
 8003b06:	4002      	ands	r2, r0
 8003b08:	4203      	tst	r3, r0
 8003b0a:	d00f      	beq.n	8003b2c <__swsetup_r+0xb8>
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	60a2      	str	r2, [r4, #8]
 8003b10:	6962      	ldr	r2, [r4, #20]
 8003b12:	4252      	negs	r2, r2
 8003b14:	61a2      	str	r2, [r4, #24]
 8003b16:	2000      	movs	r0, #0
 8003b18:	6922      	ldr	r2, [r4, #16]
 8003b1a:	4282      	cmp	r2, r0
 8003b1c:	d1c4      	bne.n	8003aa8 <__swsetup_r+0x34>
 8003b1e:	0609      	lsls	r1, r1, #24
 8003b20:	d5c2      	bpl.n	8003aa8 <__swsetup_r+0x34>
 8003b22:	2240      	movs	r2, #64	; 0x40
 8003b24:	4313      	orrs	r3, r2
 8003b26:	81a3      	strh	r3, [r4, #12]
 8003b28:	3801      	subs	r0, #1
 8003b2a:	e7bd      	b.n	8003aa8 <__swsetup_r+0x34>
 8003b2c:	0788      	lsls	r0, r1, #30
 8003b2e:	d400      	bmi.n	8003b32 <__swsetup_r+0xbe>
 8003b30:	6962      	ldr	r2, [r4, #20]
 8003b32:	60a2      	str	r2, [r4, #8]
 8003b34:	e7ef      	b.n	8003b16 <__swsetup_r+0xa2>
 8003b36:	46c0      	nop			; (mov r8, r8)
 8003b38:	20000070 	.word	0x20000070

08003b3c <memset>:
 8003b3c:	0003      	movs	r3, r0
 8003b3e:	1882      	adds	r2, r0, r2
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d100      	bne.n	8003b46 <memset+0xa>
 8003b44:	4770      	bx	lr
 8003b46:	7019      	strb	r1, [r3, #0]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	e7f9      	b.n	8003b40 <memset+0x4>

08003b4c <_close_r>:
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	b570      	push	{r4, r5, r6, lr}
 8003b50:	4d06      	ldr	r5, [pc, #24]	; (8003b6c <_close_r+0x20>)
 8003b52:	0004      	movs	r4, r0
 8003b54:	0008      	movs	r0, r1
 8003b56:	602b      	str	r3, [r5, #0]
 8003b58:	f7fc ff5c 	bl	8000a14 <_close>
 8003b5c:	1c43      	adds	r3, r0, #1
 8003b5e:	d103      	bne.n	8003b68 <_close_r+0x1c>
 8003b60:	682b      	ldr	r3, [r5, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d000      	beq.n	8003b68 <_close_r+0x1c>
 8003b66:	6023      	str	r3, [r4, #0]
 8003b68:	bd70      	pop	{r4, r5, r6, pc}
 8003b6a:	46c0      	nop			; (mov r8, r8)
 8003b6c:	200002bc 	.word	0x200002bc

08003b70 <_lseek_r>:
 8003b70:	b570      	push	{r4, r5, r6, lr}
 8003b72:	0004      	movs	r4, r0
 8003b74:	0008      	movs	r0, r1
 8003b76:	0011      	movs	r1, r2
 8003b78:	001a      	movs	r2, r3
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	4d05      	ldr	r5, [pc, #20]	; (8003b94 <_lseek_r+0x24>)
 8003b7e:	602b      	str	r3, [r5, #0]
 8003b80:	f7fc ff69 	bl	8000a56 <_lseek>
 8003b84:	1c43      	adds	r3, r0, #1
 8003b86:	d103      	bne.n	8003b90 <_lseek_r+0x20>
 8003b88:	682b      	ldr	r3, [r5, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d000      	beq.n	8003b90 <_lseek_r+0x20>
 8003b8e:	6023      	str	r3, [r4, #0]
 8003b90:	bd70      	pop	{r4, r5, r6, pc}
 8003b92:	46c0      	nop			; (mov r8, r8)
 8003b94:	200002bc 	.word	0x200002bc

08003b98 <_read_r>:
 8003b98:	b570      	push	{r4, r5, r6, lr}
 8003b9a:	0004      	movs	r4, r0
 8003b9c:	0008      	movs	r0, r1
 8003b9e:	0011      	movs	r1, r2
 8003ba0:	001a      	movs	r2, r3
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	4d05      	ldr	r5, [pc, #20]	; (8003bbc <_read_r+0x24>)
 8003ba6:	602b      	str	r3, [r5, #0]
 8003ba8:	f7fc fefb 	bl	80009a2 <_read>
 8003bac:	1c43      	adds	r3, r0, #1
 8003bae:	d103      	bne.n	8003bb8 <_read_r+0x20>
 8003bb0:	682b      	ldr	r3, [r5, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d000      	beq.n	8003bb8 <_read_r+0x20>
 8003bb6:	6023      	str	r3, [r4, #0]
 8003bb8:	bd70      	pop	{r4, r5, r6, pc}
 8003bba:	46c0      	nop			; (mov r8, r8)
 8003bbc:	200002bc 	.word	0x200002bc

08003bc0 <_write_r>:
 8003bc0:	b570      	push	{r4, r5, r6, lr}
 8003bc2:	0004      	movs	r4, r0
 8003bc4:	0008      	movs	r0, r1
 8003bc6:	0011      	movs	r1, r2
 8003bc8:	001a      	movs	r2, r3
 8003bca:	2300      	movs	r3, #0
 8003bcc:	4d05      	ldr	r5, [pc, #20]	; (8003be4 <_write_r+0x24>)
 8003bce:	602b      	str	r3, [r5, #0]
 8003bd0:	f7fc ff04 	bl	80009dc <_write>
 8003bd4:	1c43      	adds	r3, r0, #1
 8003bd6:	d103      	bne.n	8003be0 <_write_r+0x20>
 8003bd8:	682b      	ldr	r3, [r5, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d000      	beq.n	8003be0 <_write_r+0x20>
 8003bde:	6023      	str	r3, [r4, #0]
 8003be0:	bd70      	pop	{r4, r5, r6, pc}
 8003be2:	46c0      	nop			; (mov r8, r8)
 8003be4:	200002bc 	.word	0x200002bc

08003be8 <__errno>:
 8003be8:	4b01      	ldr	r3, [pc, #4]	; (8003bf0 <__errno+0x8>)
 8003bea:	6818      	ldr	r0, [r3, #0]
 8003bec:	4770      	bx	lr
 8003bee:	46c0      	nop			; (mov r8, r8)
 8003bf0:	20000070 	.word	0x20000070

08003bf4 <__libc_init_array>:
 8003bf4:	b570      	push	{r4, r5, r6, lr}
 8003bf6:	2600      	movs	r6, #0
 8003bf8:	4c0c      	ldr	r4, [pc, #48]	; (8003c2c <__libc_init_array+0x38>)
 8003bfa:	4d0d      	ldr	r5, [pc, #52]	; (8003c30 <__libc_init_array+0x3c>)
 8003bfc:	1b64      	subs	r4, r4, r5
 8003bfe:	10a4      	asrs	r4, r4, #2
 8003c00:	42a6      	cmp	r6, r4
 8003c02:	d109      	bne.n	8003c18 <__libc_init_array+0x24>
 8003c04:	2600      	movs	r6, #0
 8003c06:	f000 fc87 	bl	8004518 <_init>
 8003c0a:	4c0a      	ldr	r4, [pc, #40]	; (8003c34 <__libc_init_array+0x40>)
 8003c0c:	4d0a      	ldr	r5, [pc, #40]	; (8003c38 <__libc_init_array+0x44>)
 8003c0e:	1b64      	subs	r4, r4, r5
 8003c10:	10a4      	asrs	r4, r4, #2
 8003c12:	42a6      	cmp	r6, r4
 8003c14:	d105      	bne.n	8003c22 <__libc_init_array+0x2e>
 8003c16:	bd70      	pop	{r4, r5, r6, pc}
 8003c18:	00b3      	lsls	r3, r6, #2
 8003c1a:	58eb      	ldr	r3, [r5, r3]
 8003c1c:	4798      	blx	r3
 8003c1e:	3601      	adds	r6, #1
 8003c20:	e7ee      	b.n	8003c00 <__libc_init_array+0xc>
 8003c22:	00b3      	lsls	r3, r6, #2
 8003c24:	58eb      	ldr	r3, [r5, r3]
 8003c26:	4798      	blx	r3
 8003c28:	3601      	adds	r6, #1
 8003c2a:	e7f2      	b.n	8003c12 <__libc_init_array+0x1e>
 8003c2c:	080046d4 	.word	0x080046d4
 8003c30:	080046d4 	.word	0x080046d4
 8003c34:	080046d8 	.word	0x080046d8
 8003c38:	080046d4 	.word	0x080046d4

08003c3c <__retarget_lock_init_recursive>:
 8003c3c:	4770      	bx	lr

08003c3e <__retarget_lock_acquire_recursive>:
 8003c3e:	4770      	bx	lr

08003c40 <__retarget_lock_release_recursive>:
 8003c40:	4770      	bx	lr
	...

08003c44 <_free_r>:
 8003c44:	b570      	push	{r4, r5, r6, lr}
 8003c46:	0005      	movs	r5, r0
 8003c48:	2900      	cmp	r1, #0
 8003c4a:	d010      	beq.n	8003c6e <_free_r+0x2a>
 8003c4c:	1f0c      	subs	r4, r1, #4
 8003c4e:	6823      	ldr	r3, [r4, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	da00      	bge.n	8003c56 <_free_r+0x12>
 8003c54:	18e4      	adds	r4, r4, r3
 8003c56:	0028      	movs	r0, r5
 8003c58:	f000 f8e2 	bl	8003e20 <__malloc_lock>
 8003c5c:	4a1d      	ldr	r2, [pc, #116]	; (8003cd4 <_free_r+0x90>)
 8003c5e:	6813      	ldr	r3, [r2, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d105      	bne.n	8003c70 <_free_r+0x2c>
 8003c64:	6063      	str	r3, [r4, #4]
 8003c66:	6014      	str	r4, [r2, #0]
 8003c68:	0028      	movs	r0, r5
 8003c6a:	f000 f8e1 	bl	8003e30 <__malloc_unlock>
 8003c6e:	bd70      	pop	{r4, r5, r6, pc}
 8003c70:	42a3      	cmp	r3, r4
 8003c72:	d908      	bls.n	8003c86 <_free_r+0x42>
 8003c74:	6820      	ldr	r0, [r4, #0]
 8003c76:	1821      	adds	r1, r4, r0
 8003c78:	428b      	cmp	r3, r1
 8003c7a:	d1f3      	bne.n	8003c64 <_free_r+0x20>
 8003c7c:	6819      	ldr	r1, [r3, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	1809      	adds	r1, r1, r0
 8003c82:	6021      	str	r1, [r4, #0]
 8003c84:	e7ee      	b.n	8003c64 <_free_r+0x20>
 8003c86:	001a      	movs	r2, r3
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <_free_r+0x4e>
 8003c8e:	42a3      	cmp	r3, r4
 8003c90:	d9f9      	bls.n	8003c86 <_free_r+0x42>
 8003c92:	6811      	ldr	r1, [r2, #0]
 8003c94:	1850      	adds	r0, r2, r1
 8003c96:	42a0      	cmp	r0, r4
 8003c98:	d10b      	bne.n	8003cb2 <_free_r+0x6e>
 8003c9a:	6820      	ldr	r0, [r4, #0]
 8003c9c:	1809      	adds	r1, r1, r0
 8003c9e:	1850      	adds	r0, r2, r1
 8003ca0:	6011      	str	r1, [r2, #0]
 8003ca2:	4283      	cmp	r3, r0
 8003ca4:	d1e0      	bne.n	8003c68 <_free_r+0x24>
 8003ca6:	6818      	ldr	r0, [r3, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	1841      	adds	r1, r0, r1
 8003cac:	6011      	str	r1, [r2, #0]
 8003cae:	6053      	str	r3, [r2, #4]
 8003cb0:	e7da      	b.n	8003c68 <_free_r+0x24>
 8003cb2:	42a0      	cmp	r0, r4
 8003cb4:	d902      	bls.n	8003cbc <_free_r+0x78>
 8003cb6:	230c      	movs	r3, #12
 8003cb8:	602b      	str	r3, [r5, #0]
 8003cba:	e7d5      	b.n	8003c68 <_free_r+0x24>
 8003cbc:	6820      	ldr	r0, [r4, #0]
 8003cbe:	1821      	adds	r1, r4, r0
 8003cc0:	428b      	cmp	r3, r1
 8003cc2:	d103      	bne.n	8003ccc <_free_r+0x88>
 8003cc4:	6819      	ldr	r1, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	1809      	adds	r1, r1, r0
 8003cca:	6021      	str	r1, [r4, #0]
 8003ccc:	6063      	str	r3, [r4, #4]
 8003cce:	6054      	str	r4, [r2, #4]
 8003cd0:	e7ca      	b.n	8003c68 <_free_r+0x24>
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	200002c4 	.word	0x200002c4

08003cd8 <sbrk_aligned>:
 8003cd8:	b570      	push	{r4, r5, r6, lr}
 8003cda:	4e0f      	ldr	r6, [pc, #60]	; (8003d18 <sbrk_aligned+0x40>)
 8003cdc:	000d      	movs	r5, r1
 8003cde:	6831      	ldr	r1, [r6, #0]
 8003ce0:	0004      	movs	r4, r0
 8003ce2:	2900      	cmp	r1, #0
 8003ce4:	d102      	bne.n	8003cec <sbrk_aligned+0x14>
 8003ce6:	f000 fbf9 	bl	80044dc <_sbrk_r>
 8003cea:	6030      	str	r0, [r6, #0]
 8003cec:	0029      	movs	r1, r5
 8003cee:	0020      	movs	r0, r4
 8003cf0:	f000 fbf4 	bl	80044dc <_sbrk_r>
 8003cf4:	1c43      	adds	r3, r0, #1
 8003cf6:	d00a      	beq.n	8003d0e <sbrk_aligned+0x36>
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	1cc5      	adds	r5, r0, #3
 8003cfc:	439d      	bics	r5, r3
 8003cfe:	42a8      	cmp	r0, r5
 8003d00:	d007      	beq.n	8003d12 <sbrk_aligned+0x3a>
 8003d02:	1a29      	subs	r1, r5, r0
 8003d04:	0020      	movs	r0, r4
 8003d06:	f000 fbe9 	bl	80044dc <_sbrk_r>
 8003d0a:	3001      	adds	r0, #1
 8003d0c:	d101      	bne.n	8003d12 <sbrk_aligned+0x3a>
 8003d0e:	2501      	movs	r5, #1
 8003d10:	426d      	negs	r5, r5
 8003d12:	0028      	movs	r0, r5
 8003d14:	bd70      	pop	{r4, r5, r6, pc}
 8003d16:	46c0      	nop			; (mov r8, r8)
 8003d18:	200002c8 	.word	0x200002c8

08003d1c <_malloc_r>:
 8003d1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d1e:	2203      	movs	r2, #3
 8003d20:	1ccb      	adds	r3, r1, #3
 8003d22:	4393      	bics	r3, r2
 8003d24:	3308      	adds	r3, #8
 8003d26:	0006      	movs	r6, r0
 8003d28:	001f      	movs	r7, r3
 8003d2a:	2b0c      	cmp	r3, #12
 8003d2c:	d238      	bcs.n	8003da0 <_malloc_r+0x84>
 8003d2e:	270c      	movs	r7, #12
 8003d30:	42b9      	cmp	r1, r7
 8003d32:	d837      	bhi.n	8003da4 <_malloc_r+0x88>
 8003d34:	0030      	movs	r0, r6
 8003d36:	f000 f873 	bl	8003e20 <__malloc_lock>
 8003d3a:	4b38      	ldr	r3, [pc, #224]	; (8003e1c <_malloc_r+0x100>)
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	001c      	movs	r4, r3
 8003d42:	2c00      	cmp	r4, #0
 8003d44:	d133      	bne.n	8003dae <_malloc_r+0x92>
 8003d46:	0039      	movs	r1, r7
 8003d48:	0030      	movs	r0, r6
 8003d4a:	f7ff ffc5 	bl	8003cd8 <sbrk_aligned>
 8003d4e:	0004      	movs	r4, r0
 8003d50:	1c43      	adds	r3, r0, #1
 8003d52:	d15e      	bne.n	8003e12 <_malloc_r+0xf6>
 8003d54:	9b00      	ldr	r3, [sp, #0]
 8003d56:	681c      	ldr	r4, [r3, #0]
 8003d58:	0025      	movs	r5, r4
 8003d5a:	2d00      	cmp	r5, #0
 8003d5c:	d14e      	bne.n	8003dfc <_malloc_r+0xe0>
 8003d5e:	2c00      	cmp	r4, #0
 8003d60:	d051      	beq.n	8003e06 <_malloc_r+0xea>
 8003d62:	6823      	ldr	r3, [r4, #0]
 8003d64:	0029      	movs	r1, r5
 8003d66:	18e3      	adds	r3, r4, r3
 8003d68:	0030      	movs	r0, r6
 8003d6a:	9301      	str	r3, [sp, #4]
 8003d6c:	f000 fbb6 	bl	80044dc <_sbrk_r>
 8003d70:	9b01      	ldr	r3, [sp, #4]
 8003d72:	4283      	cmp	r3, r0
 8003d74:	d147      	bne.n	8003e06 <_malloc_r+0xea>
 8003d76:	6823      	ldr	r3, [r4, #0]
 8003d78:	0030      	movs	r0, r6
 8003d7a:	1aff      	subs	r7, r7, r3
 8003d7c:	0039      	movs	r1, r7
 8003d7e:	f7ff ffab 	bl	8003cd8 <sbrk_aligned>
 8003d82:	3001      	adds	r0, #1
 8003d84:	d03f      	beq.n	8003e06 <_malloc_r+0xea>
 8003d86:	6823      	ldr	r3, [r4, #0]
 8003d88:	19db      	adds	r3, r3, r7
 8003d8a:	6023      	str	r3, [r4, #0]
 8003d8c:	9b00      	ldr	r3, [sp, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d040      	beq.n	8003e16 <_malloc_r+0xfa>
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	42a2      	cmp	r2, r4
 8003d98:	d133      	bne.n	8003e02 <_malloc_r+0xe6>
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	605a      	str	r2, [r3, #4]
 8003d9e:	e014      	b.n	8003dca <_malloc_r+0xae>
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	dac5      	bge.n	8003d30 <_malloc_r+0x14>
 8003da4:	230c      	movs	r3, #12
 8003da6:	2500      	movs	r5, #0
 8003da8:	6033      	str	r3, [r6, #0]
 8003daa:	0028      	movs	r0, r5
 8003dac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003dae:	6821      	ldr	r1, [r4, #0]
 8003db0:	1bc9      	subs	r1, r1, r7
 8003db2:	d420      	bmi.n	8003df6 <_malloc_r+0xda>
 8003db4:	290b      	cmp	r1, #11
 8003db6:	d918      	bls.n	8003dea <_malloc_r+0xce>
 8003db8:	19e2      	adds	r2, r4, r7
 8003dba:	6027      	str	r7, [r4, #0]
 8003dbc:	42a3      	cmp	r3, r4
 8003dbe:	d112      	bne.n	8003de6 <_malloc_r+0xca>
 8003dc0:	9b00      	ldr	r3, [sp, #0]
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	6863      	ldr	r3, [r4, #4]
 8003dc6:	6011      	str	r1, [r2, #0]
 8003dc8:	6053      	str	r3, [r2, #4]
 8003dca:	0030      	movs	r0, r6
 8003dcc:	0025      	movs	r5, r4
 8003dce:	f000 f82f 	bl	8003e30 <__malloc_unlock>
 8003dd2:	2207      	movs	r2, #7
 8003dd4:	350b      	adds	r5, #11
 8003dd6:	1d23      	adds	r3, r4, #4
 8003dd8:	4395      	bics	r5, r2
 8003dda:	1aea      	subs	r2, r5, r3
 8003ddc:	429d      	cmp	r5, r3
 8003dde:	d0e4      	beq.n	8003daa <_malloc_r+0x8e>
 8003de0:	1b5b      	subs	r3, r3, r5
 8003de2:	50a3      	str	r3, [r4, r2]
 8003de4:	e7e1      	b.n	8003daa <_malloc_r+0x8e>
 8003de6:	605a      	str	r2, [r3, #4]
 8003de8:	e7ec      	b.n	8003dc4 <_malloc_r+0xa8>
 8003dea:	6862      	ldr	r2, [r4, #4]
 8003dec:	42a3      	cmp	r3, r4
 8003dee:	d1d5      	bne.n	8003d9c <_malloc_r+0x80>
 8003df0:	9b00      	ldr	r3, [sp, #0]
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	e7e9      	b.n	8003dca <_malloc_r+0xae>
 8003df6:	0023      	movs	r3, r4
 8003df8:	6864      	ldr	r4, [r4, #4]
 8003dfa:	e7a2      	b.n	8003d42 <_malloc_r+0x26>
 8003dfc:	002c      	movs	r4, r5
 8003dfe:	686d      	ldr	r5, [r5, #4]
 8003e00:	e7ab      	b.n	8003d5a <_malloc_r+0x3e>
 8003e02:	0013      	movs	r3, r2
 8003e04:	e7c4      	b.n	8003d90 <_malloc_r+0x74>
 8003e06:	230c      	movs	r3, #12
 8003e08:	0030      	movs	r0, r6
 8003e0a:	6033      	str	r3, [r6, #0]
 8003e0c:	f000 f810 	bl	8003e30 <__malloc_unlock>
 8003e10:	e7cb      	b.n	8003daa <_malloc_r+0x8e>
 8003e12:	6027      	str	r7, [r4, #0]
 8003e14:	e7d9      	b.n	8003dca <_malloc_r+0xae>
 8003e16:	605b      	str	r3, [r3, #4]
 8003e18:	deff      	udf	#255	; 0xff
 8003e1a:	46c0      	nop			; (mov r8, r8)
 8003e1c:	200002c4 	.word	0x200002c4

08003e20 <__malloc_lock>:
 8003e20:	b510      	push	{r4, lr}
 8003e22:	4802      	ldr	r0, [pc, #8]	; (8003e2c <__malloc_lock+0xc>)
 8003e24:	f7ff ff0b 	bl	8003c3e <__retarget_lock_acquire_recursive>
 8003e28:	bd10      	pop	{r4, pc}
 8003e2a:	46c0      	nop			; (mov r8, r8)
 8003e2c:	200002c0 	.word	0x200002c0

08003e30 <__malloc_unlock>:
 8003e30:	b510      	push	{r4, lr}
 8003e32:	4802      	ldr	r0, [pc, #8]	; (8003e3c <__malloc_unlock+0xc>)
 8003e34:	f7ff ff04 	bl	8003c40 <__retarget_lock_release_recursive>
 8003e38:	bd10      	pop	{r4, pc}
 8003e3a:	46c0      	nop			; (mov r8, r8)
 8003e3c:	200002c0 	.word	0x200002c0

08003e40 <__sfputc_r>:
 8003e40:	6893      	ldr	r3, [r2, #8]
 8003e42:	b510      	push	{r4, lr}
 8003e44:	3b01      	subs	r3, #1
 8003e46:	6093      	str	r3, [r2, #8]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	da04      	bge.n	8003e56 <__sfputc_r+0x16>
 8003e4c:	6994      	ldr	r4, [r2, #24]
 8003e4e:	42a3      	cmp	r3, r4
 8003e50:	db07      	blt.n	8003e62 <__sfputc_r+0x22>
 8003e52:	290a      	cmp	r1, #10
 8003e54:	d005      	beq.n	8003e62 <__sfputc_r+0x22>
 8003e56:	6813      	ldr	r3, [r2, #0]
 8003e58:	1c58      	adds	r0, r3, #1
 8003e5a:	6010      	str	r0, [r2, #0]
 8003e5c:	7019      	strb	r1, [r3, #0]
 8003e5e:	0008      	movs	r0, r1
 8003e60:	bd10      	pop	{r4, pc}
 8003e62:	f7ff fdc5 	bl	80039f0 <__swbuf_r>
 8003e66:	0001      	movs	r1, r0
 8003e68:	e7f9      	b.n	8003e5e <__sfputc_r+0x1e>

08003e6a <__sfputs_r>:
 8003e6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e6c:	0006      	movs	r6, r0
 8003e6e:	000f      	movs	r7, r1
 8003e70:	0014      	movs	r4, r2
 8003e72:	18d5      	adds	r5, r2, r3
 8003e74:	42ac      	cmp	r4, r5
 8003e76:	d101      	bne.n	8003e7c <__sfputs_r+0x12>
 8003e78:	2000      	movs	r0, #0
 8003e7a:	e007      	b.n	8003e8c <__sfputs_r+0x22>
 8003e7c:	7821      	ldrb	r1, [r4, #0]
 8003e7e:	003a      	movs	r2, r7
 8003e80:	0030      	movs	r0, r6
 8003e82:	f7ff ffdd 	bl	8003e40 <__sfputc_r>
 8003e86:	3401      	adds	r4, #1
 8003e88:	1c43      	adds	r3, r0, #1
 8003e8a:	d1f3      	bne.n	8003e74 <__sfputs_r+0xa>
 8003e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e90 <_vfiprintf_r>:
 8003e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e92:	b0a1      	sub	sp, #132	; 0x84
 8003e94:	000f      	movs	r7, r1
 8003e96:	0015      	movs	r5, r2
 8003e98:	001e      	movs	r6, r3
 8003e9a:	9003      	str	r0, [sp, #12]
 8003e9c:	2800      	cmp	r0, #0
 8003e9e:	d004      	beq.n	8003eaa <_vfiprintf_r+0x1a>
 8003ea0:	6a03      	ldr	r3, [r0, #32]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <_vfiprintf_r+0x1a>
 8003ea6:	f7ff fcb3 	bl	8003810 <__sinit>
 8003eaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003eac:	07db      	lsls	r3, r3, #31
 8003eae:	d405      	bmi.n	8003ebc <_vfiprintf_r+0x2c>
 8003eb0:	89bb      	ldrh	r3, [r7, #12]
 8003eb2:	059b      	lsls	r3, r3, #22
 8003eb4:	d402      	bmi.n	8003ebc <_vfiprintf_r+0x2c>
 8003eb6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003eb8:	f7ff fec1 	bl	8003c3e <__retarget_lock_acquire_recursive>
 8003ebc:	89bb      	ldrh	r3, [r7, #12]
 8003ebe:	071b      	lsls	r3, r3, #28
 8003ec0:	d502      	bpl.n	8003ec8 <_vfiprintf_r+0x38>
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d113      	bne.n	8003ef0 <_vfiprintf_r+0x60>
 8003ec8:	0039      	movs	r1, r7
 8003eca:	9803      	ldr	r0, [sp, #12]
 8003ecc:	f7ff fdd2 	bl	8003a74 <__swsetup_r>
 8003ed0:	2800      	cmp	r0, #0
 8003ed2:	d00d      	beq.n	8003ef0 <_vfiprintf_r+0x60>
 8003ed4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ed6:	07db      	lsls	r3, r3, #31
 8003ed8:	d503      	bpl.n	8003ee2 <_vfiprintf_r+0x52>
 8003eda:	2001      	movs	r0, #1
 8003edc:	4240      	negs	r0, r0
 8003ede:	b021      	add	sp, #132	; 0x84
 8003ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ee2:	89bb      	ldrh	r3, [r7, #12]
 8003ee4:	059b      	lsls	r3, r3, #22
 8003ee6:	d4f8      	bmi.n	8003eda <_vfiprintf_r+0x4a>
 8003ee8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003eea:	f7ff fea9 	bl	8003c40 <__retarget_lock_release_recursive>
 8003eee:	e7f4      	b.n	8003eda <_vfiprintf_r+0x4a>
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	ac08      	add	r4, sp, #32
 8003ef4:	6163      	str	r3, [r4, #20]
 8003ef6:	3320      	adds	r3, #32
 8003ef8:	7663      	strb	r3, [r4, #25]
 8003efa:	3310      	adds	r3, #16
 8003efc:	76a3      	strb	r3, [r4, #26]
 8003efe:	9607      	str	r6, [sp, #28]
 8003f00:	002e      	movs	r6, r5
 8003f02:	7833      	ldrb	r3, [r6, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <_vfiprintf_r+0x7c>
 8003f08:	2b25      	cmp	r3, #37	; 0x25
 8003f0a:	d148      	bne.n	8003f9e <_vfiprintf_r+0x10e>
 8003f0c:	1b73      	subs	r3, r6, r5
 8003f0e:	9305      	str	r3, [sp, #20]
 8003f10:	42ae      	cmp	r6, r5
 8003f12:	d00b      	beq.n	8003f2c <_vfiprintf_r+0x9c>
 8003f14:	002a      	movs	r2, r5
 8003f16:	0039      	movs	r1, r7
 8003f18:	9803      	ldr	r0, [sp, #12]
 8003f1a:	f7ff ffa6 	bl	8003e6a <__sfputs_r>
 8003f1e:	3001      	adds	r0, #1
 8003f20:	d100      	bne.n	8003f24 <_vfiprintf_r+0x94>
 8003f22:	e0af      	b.n	8004084 <_vfiprintf_r+0x1f4>
 8003f24:	6963      	ldr	r3, [r4, #20]
 8003f26:	9a05      	ldr	r2, [sp, #20]
 8003f28:	189b      	adds	r3, r3, r2
 8003f2a:	6163      	str	r3, [r4, #20]
 8003f2c:	7833      	ldrb	r3, [r6, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d100      	bne.n	8003f34 <_vfiprintf_r+0xa4>
 8003f32:	e0a7      	b.n	8004084 <_vfiprintf_r+0x1f4>
 8003f34:	2201      	movs	r2, #1
 8003f36:	2300      	movs	r3, #0
 8003f38:	4252      	negs	r2, r2
 8003f3a:	6062      	str	r2, [r4, #4]
 8003f3c:	a904      	add	r1, sp, #16
 8003f3e:	3254      	adds	r2, #84	; 0x54
 8003f40:	1852      	adds	r2, r2, r1
 8003f42:	1c75      	adds	r5, r6, #1
 8003f44:	6023      	str	r3, [r4, #0]
 8003f46:	60e3      	str	r3, [r4, #12]
 8003f48:	60a3      	str	r3, [r4, #8]
 8003f4a:	7013      	strb	r3, [r2, #0]
 8003f4c:	65a3      	str	r3, [r4, #88]	; 0x58
 8003f4e:	4b59      	ldr	r3, [pc, #356]	; (80040b4 <_vfiprintf_r+0x224>)
 8003f50:	2205      	movs	r2, #5
 8003f52:	0018      	movs	r0, r3
 8003f54:	7829      	ldrb	r1, [r5, #0]
 8003f56:	9305      	str	r3, [sp, #20]
 8003f58:	f000 fad2 	bl	8004500 <memchr>
 8003f5c:	1c6e      	adds	r6, r5, #1
 8003f5e:	2800      	cmp	r0, #0
 8003f60:	d11f      	bne.n	8003fa2 <_vfiprintf_r+0x112>
 8003f62:	6822      	ldr	r2, [r4, #0]
 8003f64:	06d3      	lsls	r3, r2, #27
 8003f66:	d504      	bpl.n	8003f72 <_vfiprintf_r+0xe2>
 8003f68:	2353      	movs	r3, #83	; 0x53
 8003f6a:	a904      	add	r1, sp, #16
 8003f6c:	185b      	adds	r3, r3, r1
 8003f6e:	2120      	movs	r1, #32
 8003f70:	7019      	strb	r1, [r3, #0]
 8003f72:	0713      	lsls	r3, r2, #28
 8003f74:	d504      	bpl.n	8003f80 <_vfiprintf_r+0xf0>
 8003f76:	2353      	movs	r3, #83	; 0x53
 8003f78:	a904      	add	r1, sp, #16
 8003f7a:	185b      	adds	r3, r3, r1
 8003f7c:	212b      	movs	r1, #43	; 0x2b
 8003f7e:	7019      	strb	r1, [r3, #0]
 8003f80:	782b      	ldrb	r3, [r5, #0]
 8003f82:	2b2a      	cmp	r3, #42	; 0x2a
 8003f84:	d016      	beq.n	8003fb4 <_vfiprintf_r+0x124>
 8003f86:	002e      	movs	r6, r5
 8003f88:	2100      	movs	r1, #0
 8003f8a:	200a      	movs	r0, #10
 8003f8c:	68e3      	ldr	r3, [r4, #12]
 8003f8e:	7832      	ldrb	r2, [r6, #0]
 8003f90:	1c75      	adds	r5, r6, #1
 8003f92:	3a30      	subs	r2, #48	; 0x30
 8003f94:	2a09      	cmp	r2, #9
 8003f96:	d94e      	bls.n	8004036 <_vfiprintf_r+0x1a6>
 8003f98:	2900      	cmp	r1, #0
 8003f9a:	d111      	bne.n	8003fc0 <_vfiprintf_r+0x130>
 8003f9c:	e017      	b.n	8003fce <_vfiprintf_r+0x13e>
 8003f9e:	3601      	adds	r6, #1
 8003fa0:	e7af      	b.n	8003f02 <_vfiprintf_r+0x72>
 8003fa2:	9b05      	ldr	r3, [sp, #20]
 8003fa4:	6822      	ldr	r2, [r4, #0]
 8003fa6:	1ac0      	subs	r0, r0, r3
 8003fa8:	2301      	movs	r3, #1
 8003faa:	4083      	lsls	r3, r0
 8003fac:	4313      	orrs	r3, r2
 8003fae:	0035      	movs	r5, r6
 8003fb0:	6023      	str	r3, [r4, #0]
 8003fb2:	e7cc      	b.n	8003f4e <_vfiprintf_r+0xbe>
 8003fb4:	9b07      	ldr	r3, [sp, #28]
 8003fb6:	1d19      	adds	r1, r3, #4
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	9107      	str	r1, [sp, #28]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	db01      	blt.n	8003fc4 <_vfiprintf_r+0x134>
 8003fc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8003fc2:	e004      	b.n	8003fce <_vfiprintf_r+0x13e>
 8003fc4:	425b      	negs	r3, r3
 8003fc6:	60e3      	str	r3, [r4, #12]
 8003fc8:	2302      	movs	r3, #2
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	6023      	str	r3, [r4, #0]
 8003fce:	7833      	ldrb	r3, [r6, #0]
 8003fd0:	2b2e      	cmp	r3, #46	; 0x2e
 8003fd2:	d10a      	bne.n	8003fea <_vfiprintf_r+0x15a>
 8003fd4:	7873      	ldrb	r3, [r6, #1]
 8003fd6:	2b2a      	cmp	r3, #42	; 0x2a
 8003fd8:	d135      	bne.n	8004046 <_vfiprintf_r+0x1b6>
 8003fda:	9b07      	ldr	r3, [sp, #28]
 8003fdc:	3602      	adds	r6, #2
 8003fde:	1d1a      	adds	r2, r3, #4
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	9207      	str	r2, [sp, #28]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	db2b      	blt.n	8004040 <_vfiprintf_r+0x1b0>
 8003fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8003fea:	4d33      	ldr	r5, [pc, #204]	; (80040b8 <_vfiprintf_r+0x228>)
 8003fec:	2203      	movs	r2, #3
 8003fee:	0028      	movs	r0, r5
 8003ff0:	7831      	ldrb	r1, [r6, #0]
 8003ff2:	f000 fa85 	bl	8004500 <memchr>
 8003ff6:	2800      	cmp	r0, #0
 8003ff8:	d006      	beq.n	8004008 <_vfiprintf_r+0x178>
 8003ffa:	2340      	movs	r3, #64	; 0x40
 8003ffc:	1b40      	subs	r0, r0, r5
 8003ffe:	4083      	lsls	r3, r0
 8004000:	6822      	ldr	r2, [r4, #0]
 8004002:	3601      	adds	r6, #1
 8004004:	4313      	orrs	r3, r2
 8004006:	6023      	str	r3, [r4, #0]
 8004008:	7831      	ldrb	r1, [r6, #0]
 800400a:	2206      	movs	r2, #6
 800400c:	482b      	ldr	r0, [pc, #172]	; (80040bc <_vfiprintf_r+0x22c>)
 800400e:	1c75      	adds	r5, r6, #1
 8004010:	7621      	strb	r1, [r4, #24]
 8004012:	f000 fa75 	bl	8004500 <memchr>
 8004016:	2800      	cmp	r0, #0
 8004018:	d043      	beq.n	80040a2 <_vfiprintf_r+0x212>
 800401a:	4b29      	ldr	r3, [pc, #164]	; (80040c0 <_vfiprintf_r+0x230>)
 800401c:	2b00      	cmp	r3, #0
 800401e:	d125      	bne.n	800406c <_vfiprintf_r+0x1dc>
 8004020:	2207      	movs	r2, #7
 8004022:	9b07      	ldr	r3, [sp, #28]
 8004024:	3307      	adds	r3, #7
 8004026:	4393      	bics	r3, r2
 8004028:	3308      	adds	r3, #8
 800402a:	9307      	str	r3, [sp, #28]
 800402c:	6963      	ldr	r3, [r4, #20]
 800402e:	9a04      	ldr	r2, [sp, #16]
 8004030:	189b      	adds	r3, r3, r2
 8004032:	6163      	str	r3, [r4, #20]
 8004034:	e764      	b.n	8003f00 <_vfiprintf_r+0x70>
 8004036:	4343      	muls	r3, r0
 8004038:	002e      	movs	r6, r5
 800403a:	2101      	movs	r1, #1
 800403c:	189b      	adds	r3, r3, r2
 800403e:	e7a6      	b.n	8003f8e <_vfiprintf_r+0xfe>
 8004040:	2301      	movs	r3, #1
 8004042:	425b      	negs	r3, r3
 8004044:	e7d0      	b.n	8003fe8 <_vfiprintf_r+0x158>
 8004046:	2300      	movs	r3, #0
 8004048:	200a      	movs	r0, #10
 800404a:	001a      	movs	r2, r3
 800404c:	3601      	adds	r6, #1
 800404e:	6063      	str	r3, [r4, #4]
 8004050:	7831      	ldrb	r1, [r6, #0]
 8004052:	1c75      	adds	r5, r6, #1
 8004054:	3930      	subs	r1, #48	; 0x30
 8004056:	2909      	cmp	r1, #9
 8004058:	d903      	bls.n	8004062 <_vfiprintf_r+0x1d2>
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0c5      	beq.n	8003fea <_vfiprintf_r+0x15a>
 800405e:	9209      	str	r2, [sp, #36]	; 0x24
 8004060:	e7c3      	b.n	8003fea <_vfiprintf_r+0x15a>
 8004062:	4342      	muls	r2, r0
 8004064:	002e      	movs	r6, r5
 8004066:	2301      	movs	r3, #1
 8004068:	1852      	adds	r2, r2, r1
 800406a:	e7f1      	b.n	8004050 <_vfiprintf_r+0x1c0>
 800406c:	aa07      	add	r2, sp, #28
 800406e:	9200      	str	r2, [sp, #0]
 8004070:	0021      	movs	r1, r4
 8004072:	003a      	movs	r2, r7
 8004074:	4b13      	ldr	r3, [pc, #76]	; (80040c4 <_vfiprintf_r+0x234>)
 8004076:	9803      	ldr	r0, [sp, #12]
 8004078:	e000      	b.n	800407c <_vfiprintf_r+0x1ec>
 800407a:	bf00      	nop
 800407c:	9004      	str	r0, [sp, #16]
 800407e:	9b04      	ldr	r3, [sp, #16]
 8004080:	3301      	adds	r3, #1
 8004082:	d1d3      	bne.n	800402c <_vfiprintf_r+0x19c>
 8004084:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004086:	07db      	lsls	r3, r3, #31
 8004088:	d405      	bmi.n	8004096 <_vfiprintf_r+0x206>
 800408a:	89bb      	ldrh	r3, [r7, #12]
 800408c:	059b      	lsls	r3, r3, #22
 800408e:	d402      	bmi.n	8004096 <_vfiprintf_r+0x206>
 8004090:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004092:	f7ff fdd5 	bl	8003c40 <__retarget_lock_release_recursive>
 8004096:	89bb      	ldrh	r3, [r7, #12]
 8004098:	065b      	lsls	r3, r3, #25
 800409a:	d500      	bpl.n	800409e <_vfiprintf_r+0x20e>
 800409c:	e71d      	b.n	8003eda <_vfiprintf_r+0x4a>
 800409e:	980d      	ldr	r0, [sp, #52]	; 0x34
 80040a0:	e71d      	b.n	8003ede <_vfiprintf_r+0x4e>
 80040a2:	aa07      	add	r2, sp, #28
 80040a4:	9200      	str	r2, [sp, #0]
 80040a6:	0021      	movs	r1, r4
 80040a8:	003a      	movs	r2, r7
 80040aa:	4b06      	ldr	r3, [pc, #24]	; (80040c4 <_vfiprintf_r+0x234>)
 80040ac:	9803      	ldr	r0, [sp, #12]
 80040ae:	f000 f87b 	bl	80041a8 <_printf_i>
 80040b2:	e7e3      	b.n	800407c <_vfiprintf_r+0x1ec>
 80040b4:	080046a0 	.word	0x080046a0
 80040b8:	080046a6 	.word	0x080046a6
 80040bc:	080046aa 	.word	0x080046aa
 80040c0:	00000000 	.word	0x00000000
 80040c4:	08003e6b 	.word	0x08003e6b

080040c8 <_printf_common>:
 80040c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040ca:	0016      	movs	r6, r2
 80040cc:	9301      	str	r3, [sp, #4]
 80040ce:	688a      	ldr	r2, [r1, #8]
 80040d0:	690b      	ldr	r3, [r1, #16]
 80040d2:	000c      	movs	r4, r1
 80040d4:	9000      	str	r0, [sp, #0]
 80040d6:	4293      	cmp	r3, r2
 80040d8:	da00      	bge.n	80040dc <_printf_common+0x14>
 80040da:	0013      	movs	r3, r2
 80040dc:	0022      	movs	r2, r4
 80040de:	6033      	str	r3, [r6, #0]
 80040e0:	3243      	adds	r2, #67	; 0x43
 80040e2:	7812      	ldrb	r2, [r2, #0]
 80040e4:	2a00      	cmp	r2, #0
 80040e6:	d001      	beq.n	80040ec <_printf_common+0x24>
 80040e8:	3301      	adds	r3, #1
 80040ea:	6033      	str	r3, [r6, #0]
 80040ec:	6823      	ldr	r3, [r4, #0]
 80040ee:	069b      	lsls	r3, r3, #26
 80040f0:	d502      	bpl.n	80040f8 <_printf_common+0x30>
 80040f2:	6833      	ldr	r3, [r6, #0]
 80040f4:	3302      	adds	r3, #2
 80040f6:	6033      	str	r3, [r6, #0]
 80040f8:	6822      	ldr	r2, [r4, #0]
 80040fa:	2306      	movs	r3, #6
 80040fc:	0015      	movs	r5, r2
 80040fe:	401d      	ands	r5, r3
 8004100:	421a      	tst	r2, r3
 8004102:	d027      	beq.n	8004154 <_printf_common+0x8c>
 8004104:	0023      	movs	r3, r4
 8004106:	3343      	adds	r3, #67	; 0x43
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	1e5a      	subs	r2, r3, #1
 800410c:	4193      	sbcs	r3, r2
 800410e:	6822      	ldr	r2, [r4, #0]
 8004110:	0692      	lsls	r2, r2, #26
 8004112:	d430      	bmi.n	8004176 <_printf_common+0xae>
 8004114:	0022      	movs	r2, r4
 8004116:	9901      	ldr	r1, [sp, #4]
 8004118:	9800      	ldr	r0, [sp, #0]
 800411a:	9d08      	ldr	r5, [sp, #32]
 800411c:	3243      	adds	r2, #67	; 0x43
 800411e:	47a8      	blx	r5
 8004120:	3001      	adds	r0, #1
 8004122:	d025      	beq.n	8004170 <_printf_common+0xa8>
 8004124:	2206      	movs	r2, #6
 8004126:	6823      	ldr	r3, [r4, #0]
 8004128:	2500      	movs	r5, #0
 800412a:	4013      	ands	r3, r2
 800412c:	2b04      	cmp	r3, #4
 800412e:	d105      	bne.n	800413c <_printf_common+0x74>
 8004130:	6833      	ldr	r3, [r6, #0]
 8004132:	68e5      	ldr	r5, [r4, #12]
 8004134:	1aed      	subs	r5, r5, r3
 8004136:	43eb      	mvns	r3, r5
 8004138:	17db      	asrs	r3, r3, #31
 800413a:	401d      	ands	r5, r3
 800413c:	68a3      	ldr	r3, [r4, #8]
 800413e:	6922      	ldr	r2, [r4, #16]
 8004140:	4293      	cmp	r3, r2
 8004142:	dd01      	ble.n	8004148 <_printf_common+0x80>
 8004144:	1a9b      	subs	r3, r3, r2
 8004146:	18ed      	adds	r5, r5, r3
 8004148:	2600      	movs	r6, #0
 800414a:	42b5      	cmp	r5, r6
 800414c:	d120      	bne.n	8004190 <_printf_common+0xc8>
 800414e:	2000      	movs	r0, #0
 8004150:	e010      	b.n	8004174 <_printf_common+0xac>
 8004152:	3501      	adds	r5, #1
 8004154:	68e3      	ldr	r3, [r4, #12]
 8004156:	6832      	ldr	r2, [r6, #0]
 8004158:	1a9b      	subs	r3, r3, r2
 800415a:	42ab      	cmp	r3, r5
 800415c:	ddd2      	ble.n	8004104 <_printf_common+0x3c>
 800415e:	0022      	movs	r2, r4
 8004160:	2301      	movs	r3, #1
 8004162:	9901      	ldr	r1, [sp, #4]
 8004164:	9800      	ldr	r0, [sp, #0]
 8004166:	9f08      	ldr	r7, [sp, #32]
 8004168:	3219      	adds	r2, #25
 800416a:	47b8      	blx	r7
 800416c:	3001      	adds	r0, #1
 800416e:	d1f0      	bne.n	8004152 <_printf_common+0x8a>
 8004170:	2001      	movs	r0, #1
 8004172:	4240      	negs	r0, r0
 8004174:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004176:	2030      	movs	r0, #48	; 0x30
 8004178:	18e1      	adds	r1, r4, r3
 800417a:	3143      	adds	r1, #67	; 0x43
 800417c:	7008      	strb	r0, [r1, #0]
 800417e:	0021      	movs	r1, r4
 8004180:	1c5a      	adds	r2, r3, #1
 8004182:	3145      	adds	r1, #69	; 0x45
 8004184:	7809      	ldrb	r1, [r1, #0]
 8004186:	18a2      	adds	r2, r4, r2
 8004188:	3243      	adds	r2, #67	; 0x43
 800418a:	3302      	adds	r3, #2
 800418c:	7011      	strb	r1, [r2, #0]
 800418e:	e7c1      	b.n	8004114 <_printf_common+0x4c>
 8004190:	0022      	movs	r2, r4
 8004192:	2301      	movs	r3, #1
 8004194:	9901      	ldr	r1, [sp, #4]
 8004196:	9800      	ldr	r0, [sp, #0]
 8004198:	9f08      	ldr	r7, [sp, #32]
 800419a:	321a      	adds	r2, #26
 800419c:	47b8      	blx	r7
 800419e:	3001      	adds	r0, #1
 80041a0:	d0e6      	beq.n	8004170 <_printf_common+0xa8>
 80041a2:	3601      	adds	r6, #1
 80041a4:	e7d1      	b.n	800414a <_printf_common+0x82>
	...

080041a8 <_printf_i>:
 80041a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041aa:	b08b      	sub	sp, #44	; 0x2c
 80041ac:	9206      	str	r2, [sp, #24]
 80041ae:	000a      	movs	r2, r1
 80041b0:	3243      	adds	r2, #67	; 0x43
 80041b2:	9307      	str	r3, [sp, #28]
 80041b4:	9005      	str	r0, [sp, #20]
 80041b6:	9204      	str	r2, [sp, #16]
 80041b8:	7e0a      	ldrb	r2, [r1, #24]
 80041ba:	000c      	movs	r4, r1
 80041bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80041be:	2a78      	cmp	r2, #120	; 0x78
 80041c0:	d809      	bhi.n	80041d6 <_printf_i+0x2e>
 80041c2:	2a62      	cmp	r2, #98	; 0x62
 80041c4:	d80b      	bhi.n	80041de <_printf_i+0x36>
 80041c6:	2a00      	cmp	r2, #0
 80041c8:	d100      	bne.n	80041cc <_printf_i+0x24>
 80041ca:	e0be      	b.n	800434a <_printf_i+0x1a2>
 80041cc:	497c      	ldr	r1, [pc, #496]	; (80043c0 <_printf_i+0x218>)
 80041ce:	9103      	str	r1, [sp, #12]
 80041d0:	2a58      	cmp	r2, #88	; 0x58
 80041d2:	d100      	bne.n	80041d6 <_printf_i+0x2e>
 80041d4:	e093      	b.n	80042fe <_printf_i+0x156>
 80041d6:	0026      	movs	r6, r4
 80041d8:	3642      	adds	r6, #66	; 0x42
 80041da:	7032      	strb	r2, [r6, #0]
 80041dc:	e022      	b.n	8004224 <_printf_i+0x7c>
 80041de:	0010      	movs	r0, r2
 80041e0:	3863      	subs	r0, #99	; 0x63
 80041e2:	2815      	cmp	r0, #21
 80041e4:	d8f7      	bhi.n	80041d6 <_printf_i+0x2e>
 80041e6:	f7fb ff8f 	bl	8000108 <__gnu_thumb1_case_shi>
 80041ea:	0016      	.short	0x0016
 80041ec:	fff6001f 	.word	0xfff6001f
 80041f0:	fff6fff6 	.word	0xfff6fff6
 80041f4:	001ffff6 	.word	0x001ffff6
 80041f8:	fff6fff6 	.word	0xfff6fff6
 80041fc:	fff6fff6 	.word	0xfff6fff6
 8004200:	003600a3 	.word	0x003600a3
 8004204:	fff60083 	.word	0xfff60083
 8004208:	00b4fff6 	.word	0x00b4fff6
 800420c:	0036fff6 	.word	0x0036fff6
 8004210:	fff6fff6 	.word	0xfff6fff6
 8004214:	0087      	.short	0x0087
 8004216:	0026      	movs	r6, r4
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	3642      	adds	r6, #66	; 0x42
 800421c:	1d11      	adds	r1, r2, #4
 800421e:	6019      	str	r1, [r3, #0]
 8004220:	6813      	ldr	r3, [r2, #0]
 8004222:	7033      	strb	r3, [r6, #0]
 8004224:	2301      	movs	r3, #1
 8004226:	e0a2      	b.n	800436e <_printf_i+0x1c6>
 8004228:	6818      	ldr	r0, [r3, #0]
 800422a:	6809      	ldr	r1, [r1, #0]
 800422c:	1d02      	adds	r2, r0, #4
 800422e:	060d      	lsls	r5, r1, #24
 8004230:	d50b      	bpl.n	800424a <_printf_i+0xa2>
 8004232:	6805      	ldr	r5, [r0, #0]
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	2d00      	cmp	r5, #0
 8004238:	da03      	bge.n	8004242 <_printf_i+0x9a>
 800423a:	232d      	movs	r3, #45	; 0x2d
 800423c:	9a04      	ldr	r2, [sp, #16]
 800423e:	426d      	negs	r5, r5
 8004240:	7013      	strb	r3, [r2, #0]
 8004242:	4b5f      	ldr	r3, [pc, #380]	; (80043c0 <_printf_i+0x218>)
 8004244:	270a      	movs	r7, #10
 8004246:	9303      	str	r3, [sp, #12]
 8004248:	e01b      	b.n	8004282 <_printf_i+0xda>
 800424a:	6805      	ldr	r5, [r0, #0]
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	0649      	lsls	r1, r1, #25
 8004250:	d5f1      	bpl.n	8004236 <_printf_i+0x8e>
 8004252:	b22d      	sxth	r5, r5
 8004254:	e7ef      	b.n	8004236 <_printf_i+0x8e>
 8004256:	680d      	ldr	r5, [r1, #0]
 8004258:	6819      	ldr	r1, [r3, #0]
 800425a:	1d08      	adds	r0, r1, #4
 800425c:	6018      	str	r0, [r3, #0]
 800425e:	062e      	lsls	r6, r5, #24
 8004260:	d501      	bpl.n	8004266 <_printf_i+0xbe>
 8004262:	680d      	ldr	r5, [r1, #0]
 8004264:	e003      	b.n	800426e <_printf_i+0xc6>
 8004266:	066d      	lsls	r5, r5, #25
 8004268:	d5fb      	bpl.n	8004262 <_printf_i+0xba>
 800426a:	680d      	ldr	r5, [r1, #0]
 800426c:	b2ad      	uxth	r5, r5
 800426e:	4b54      	ldr	r3, [pc, #336]	; (80043c0 <_printf_i+0x218>)
 8004270:	2708      	movs	r7, #8
 8004272:	9303      	str	r3, [sp, #12]
 8004274:	2a6f      	cmp	r2, #111	; 0x6f
 8004276:	d000      	beq.n	800427a <_printf_i+0xd2>
 8004278:	3702      	adds	r7, #2
 800427a:	0023      	movs	r3, r4
 800427c:	2200      	movs	r2, #0
 800427e:	3343      	adds	r3, #67	; 0x43
 8004280:	701a      	strb	r2, [r3, #0]
 8004282:	6863      	ldr	r3, [r4, #4]
 8004284:	60a3      	str	r3, [r4, #8]
 8004286:	2b00      	cmp	r3, #0
 8004288:	db03      	blt.n	8004292 <_printf_i+0xea>
 800428a:	2104      	movs	r1, #4
 800428c:	6822      	ldr	r2, [r4, #0]
 800428e:	438a      	bics	r2, r1
 8004290:	6022      	str	r2, [r4, #0]
 8004292:	2d00      	cmp	r5, #0
 8004294:	d102      	bne.n	800429c <_printf_i+0xf4>
 8004296:	9e04      	ldr	r6, [sp, #16]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00c      	beq.n	80042b6 <_printf_i+0x10e>
 800429c:	9e04      	ldr	r6, [sp, #16]
 800429e:	0028      	movs	r0, r5
 80042a0:	0039      	movs	r1, r7
 80042a2:	f7fb ffc1 	bl	8000228 <__aeabi_uidivmod>
 80042a6:	9b03      	ldr	r3, [sp, #12]
 80042a8:	3e01      	subs	r6, #1
 80042aa:	5c5b      	ldrb	r3, [r3, r1]
 80042ac:	7033      	strb	r3, [r6, #0]
 80042ae:	002b      	movs	r3, r5
 80042b0:	0005      	movs	r5, r0
 80042b2:	429f      	cmp	r7, r3
 80042b4:	d9f3      	bls.n	800429e <_printf_i+0xf6>
 80042b6:	2f08      	cmp	r7, #8
 80042b8:	d109      	bne.n	80042ce <_printf_i+0x126>
 80042ba:	6823      	ldr	r3, [r4, #0]
 80042bc:	07db      	lsls	r3, r3, #31
 80042be:	d506      	bpl.n	80042ce <_printf_i+0x126>
 80042c0:	6862      	ldr	r2, [r4, #4]
 80042c2:	6923      	ldr	r3, [r4, #16]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	dc02      	bgt.n	80042ce <_printf_i+0x126>
 80042c8:	2330      	movs	r3, #48	; 0x30
 80042ca:	3e01      	subs	r6, #1
 80042cc:	7033      	strb	r3, [r6, #0]
 80042ce:	9b04      	ldr	r3, [sp, #16]
 80042d0:	1b9b      	subs	r3, r3, r6
 80042d2:	6123      	str	r3, [r4, #16]
 80042d4:	9b07      	ldr	r3, [sp, #28]
 80042d6:	0021      	movs	r1, r4
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	9805      	ldr	r0, [sp, #20]
 80042dc:	9b06      	ldr	r3, [sp, #24]
 80042de:	aa09      	add	r2, sp, #36	; 0x24
 80042e0:	f7ff fef2 	bl	80040c8 <_printf_common>
 80042e4:	3001      	adds	r0, #1
 80042e6:	d147      	bne.n	8004378 <_printf_i+0x1d0>
 80042e8:	2001      	movs	r0, #1
 80042ea:	4240      	negs	r0, r0
 80042ec:	b00b      	add	sp, #44	; 0x2c
 80042ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042f0:	2220      	movs	r2, #32
 80042f2:	6809      	ldr	r1, [r1, #0]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	6022      	str	r2, [r4, #0]
 80042f8:	2278      	movs	r2, #120	; 0x78
 80042fa:	4932      	ldr	r1, [pc, #200]	; (80043c4 <_printf_i+0x21c>)
 80042fc:	9103      	str	r1, [sp, #12]
 80042fe:	0021      	movs	r1, r4
 8004300:	3145      	adds	r1, #69	; 0x45
 8004302:	700a      	strb	r2, [r1, #0]
 8004304:	6819      	ldr	r1, [r3, #0]
 8004306:	6822      	ldr	r2, [r4, #0]
 8004308:	c920      	ldmia	r1!, {r5}
 800430a:	0610      	lsls	r0, r2, #24
 800430c:	d402      	bmi.n	8004314 <_printf_i+0x16c>
 800430e:	0650      	lsls	r0, r2, #25
 8004310:	d500      	bpl.n	8004314 <_printf_i+0x16c>
 8004312:	b2ad      	uxth	r5, r5
 8004314:	6019      	str	r1, [r3, #0]
 8004316:	07d3      	lsls	r3, r2, #31
 8004318:	d502      	bpl.n	8004320 <_printf_i+0x178>
 800431a:	2320      	movs	r3, #32
 800431c:	4313      	orrs	r3, r2
 800431e:	6023      	str	r3, [r4, #0]
 8004320:	2710      	movs	r7, #16
 8004322:	2d00      	cmp	r5, #0
 8004324:	d1a9      	bne.n	800427a <_printf_i+0xd2>
 8004326:	2220      	movs	r2, #32
 8004328:	6823      	ldr	r3, [r4, #0]
 800432a:	4393      	bics	r3, r2
 800432c:	6023      	str	r3, [r4, #0]
 800432e:	e7a4      	b.n	800427a <_printf_i+0xd2>
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	680d      	ldr	r5, [r1, #0]
 8004334:	1d10      	adds	r0, r2, #4
 8004336:	6949      	ldr	r1, [r1, #20]
 8004338:	6018      	str	r0, [r3, #0]
 800433a:	6813      	ldr	r3, [r2, #0]
 800433c:	062e      	lsls	r6, r5, #24
 800433e:	d501      	bpl.n	8004344 <_printf_i+0x19c>
 8004340:	6019      	str	r1, [r3, #0]
 8004342:	e002      	b.n	800434a <_printf_i+0x1a2>
 8004344:	066d      	lsls	r5, r5, #25
 8004346:	d5fb      	bpl.n	8004340 <_printf_i+0x198>
 8004348:	8019      	strh	r1, [r3, #0]
 800434a:	2300      	movs	r3, #0
 800434c:	9e04      	ldr	r6, [sp, #16]
 800434e:	6123      	str	r3, [r4, #16]
 8004350:	e7c0      	b.n	80042d4 <_printf_i+0x12c>
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	1d11      	adds	r1, r2, #4
 8004356:	6019      	str	r1, [r3, #0]
 8004358:	6816      	ldr	r6, [r2, #0]
 800435a:	2100      	movs	r1, #0
 800435c:	0030      	movs	r0, r6
 800435e:	6862      	ldr	r2, [r4, #4]
 8004360:	f000 f8ce 	bl	8004500 <memchr>
 8004364:	2800      	cmp	r0, #0
 8004366:	d001      	beq.n	800436c <_printf_i+0x1c4>
 8004368:	1b80      	subs	r0, r0, r6
 800436a:	6060      	str	r0, [r4, #4]
 800436c:	6863      	ldr	r3, [r4, #4]
 800436e:	6123      	str	r3, [r4, #16]
 8004370:	2300      	movs	r3, #0
 8004372:	9a04      	ldr	r2, [sp, #16]
 8004374:	7013      	strb	r3, [r2, #0]
 8004376:	e7ad      	b.n	80042d4 <_printf_i+0x12c>
 8004378:	0032      	movs	r2, r6
 800437a:	6923      	ldr	r3, [r4, #16]
 800437c:	9906      	ldr	r1, [sp, #24]
 800437e:	9805      	ldr	r0, [sp, #20]
 8004380:	9d07      	ldr	r5, [sp, #28]
 8004382:	47a8      	blx	r5
 8004384:	3001      	adds	r0, #1
 8004386:	d0af      	beq.n	80042e8 <_printf_i+0x140>
 8004388:	6823      	ldr	r3, [r4, #0]
 800438a:	079b      	lsls	r3, r3, #30
 800438c:	d415      	bmi.n	80043ba <_printf_i+0x212>
 800438e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004390:	68e0      	ldr	r0, [r4, #12]
 8004392:	4298      	cmp	r0, r3
 8004394:	daaa      	bge.n	80042ec <_printf_i+0x144>
 8004396:	0018      	movs	r0, r3
 8004398:	e7a8      	b.n	80042ec <_printf_i+0x144>
 800439a:	0022      	movs	r2, r4
 800439c:	2301      	movs	r3, #1
 800439e:	9906      	ldr	r1, [sp, #24]
 80043a0:	9805      	ldr	r0, [sp, #20]
 80043a2:	9e07      	ldr	r6, [sp, #28]
 80043a4:	3219      	adds	r2, #25
 80043a6:	47b0      	blx	r6
 80043a8:	3001      	adds	r0, #1
 80043aa:	d09d      	beq.n	80042e8 <_printf_i+0x140>
 80043ac:	3501      	adds	r5, #1
 80043ae:	68e3      	ldr	r3, [r4, #12]
 80043b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043b2:	1a9b      	subs	r3, r3, r2
 80043b4:	42ab      	cmp	r3, r5
 80043b6:	dcf0      	bgt.n	800439a <_printf_i+0x1f2>
 80043b8:	e7e9      	b.n	800438e <_printf_i+0x1e6>
 80043ba:	2500      	movs	r5, #0
 80043bc:	e7f7      	b.n	80043ae <_printf_i+0x206>
 80043be:	46c0      	nop			; (mov r8, r8)
 80043c0:	080046b1 	.word	0x080046b1
 80043c4:	080046c2 	.word	0x080046c2

080043c8 <__swhatbuf_r>:
 80043c8:	b570      	push	{r4, r5, r6, lr}
 80043ca:	000e      	movs	r6, r1
 80043cc:	001d      	movs	r5, r3
 80043ce:	230e      	movs	r3, #14
 80043d0:	5ec9      	ldrsh	r1, [r1, r3]
 80043d2:	0014      	movs	r4, r2
 80043d4:	b096      	sub	sp, #88	; 0x58
 80043d6:	2900      	cmp	r1, #0
 80043d8:	da0c      	bge.n	80043f4 <__swhatbuf_r+0x2c>
 80043da:	89b2      	ldrh	r2, [r6, #12]
 80043dc:	2380      	movs	r3, #128	; 0x80
 80043de:	0011      	movs	r1, r2
 80043e0:	4019      	ands	r1, r3
 80043e2:	421a      	tst	r2, r3
 80043e4:	d013      	beq.n	800440e <__swhatbuf_r+0x46>
 80043e6:	2100      	movs	r1, #0
 80043e8:	3b40      	subs	r3, #64	; 0x40
 80043ea:	2000      	movs	r0, #0
 80043ec:	6029      	str	r1, [r5, #0]
 80043ee:	6023      	str	r3, [r4, #0]
 80043f0:	b016      	add	sp, #88	; 0x58
 80043f2:	bd70      	pop	{r4, r5, r6, pc}
 80043f4:	466a      	mov	r2, sp
 80043f6:	f000 f84d 	bl	8004494 <_fstat_r>
 80043fa:	2800      	cmp	r0, #0
 80043fc:	dbed      	blt.n	80043da <__swhatbuf_r+0x12>
 80043fe:	23f0      	movs	r3, #240	; 0xf0
 8004400:	9901      	ldr	r1, [sp, #4]
 8004402:	021b      	lsls	r3, r3, #8
 8004404:	4019      	ands	r1, r3
 8004406:	4b03      	ldr	r3, [pc, #12]	; (8004414 <__swhatbuf_r+0x4c>)
 8004408:	18c9      	adds	r1, r1, r3
 800440a:	424b      	negs	r3, r1
 800440c:	4159      	adcs	r1, r3
 800440e:	2380      	movs	r3, #128	; 0x80
 8004410:	00db      	lsls	r3, r3, #3
 8004412:	e7ea      	b.n	80043ea <__swhatbuf_r+0x22>
 8004414:	ffffe000 	.word	0xffffe000

08004418 <__smakebuf_r>:
 8004418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800441a:	2602      	movs	r6, #2
 800441c:	898b      	ldrh	r3, [r1, #12]
 800441e:	0005      	movs	r5, r0
 8004420:	000c      	movs	r4, r1
 8004422:	4233      	tst	r3, r6
 8004424:	d006      	beq.n	8004434 <__smakebuf_r+0x1c>
 8004426:	0023      	movs	r3, r4
 8004428:	3347      	adds	r3, #71	; 0x47
 800442a:	6023      	str	r3, [r4, #0]
 800442c:	6123      	str	r3, [r4, #16]
 800442e:	2301      	movs	r3, #1
 8004430:	6163      	str	r3, [r4, #20]
 8004432:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004434:	466a      	mov	r2, sp
 8004436:	ab01      	add	r3, sp, #4
 8004438:	f7ff ffc6 	bl	80043c8 <__swhatbuf_r>
 800443c:	9900      	ldr	r1, [sp, #0]
 800443e:	0007      	movs	r7, r0
 8004440:	0028      	movs	r0, r5
 8004442:	f7ff fc6b 	bl	8003d1c <_malloc_r>
 8004446:	2800      	cmp	r0, #0
 8004448:	d108      	bne.n	800445c <__smakebuf_r+0x44>
 800444a:	220c      	movs	r2, #12
 800444c:	5ea3      	ldrsh	r3, [r4, r2]
 800444e:	059a      	lsls	r2, r3, #22
 8004450:	d4ef      	bmi.n	8004432 <__smakebuf_r+0x1a>
 8004452:	2203      	movs	r2, #3
 8004454:	4393      	bics	r3, r2
 8004456:	431e      	orrs	r6, r3
 8004458:	81a6      	strh	r6, [r4, #12]
 800445a:	e7e4      	b.n	8004426 <__smakebuf_r+0xe>
 800445c:	2380      	movs	r3, #128	; 0x80
 800445e:	89a2      	ldrh	r2, [r4, #12]
 8004460:	6020      	str	r0, [r4, #0]
 8004462:	4313      	orrs	r3, r2
 8004464:	81a3      	strh	r3, [r4, #12]
 8004466:	9b00      	ldr	r3, [sp, #0]
 8004468:	6120      	str	r0, [r4, #16]
 800446a:	6163      	str	r3, [r4, #20]
 800446c:	9b01      	ldr	r3, [sp, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00c      	beq.n	800448c <__smakebuf_r+0x74>
 8004472:	0028      	movs	r0, r5
 8004474:	230e      	movs	r3, #14
 8004476:	5ee1      	ldrsh	r1, [r4, r3]
 8004478:	f000 f81e 	bl	80044b8 <_isatty_r>
 800447c:	2800      	cmp	r0, #0
 800447e:	d005      	beq.n	800448c <__smakebuf_r+0x74>
 8004480:	2303      	movs	r3, #3
 8004482:	89a2      	ldrh	r2, [r4, #12]
 8004484:	439a      	bics	r2, r3
 8004486:	3b02      	subs	r3, #2
 8004488:	4313      	orrs	r3, r2
 800448a:	81a3      	strh	r3, [r4, #12]
 800448c:	89a3      	ldrh	r3, [r4, #12]
 800448e:	433b      	orrs	r3, r7
 8004490:	81a3      	strh	r3, [r4, #12]
 8004492:	e7ce      	b.n	8004432 <__smakebuf_r+0x1a>

08004494 <_fstat_r>:
 8004494:	2300      	movs	r3, #0
 8004496:	b570      	push	{r4, r5, r6, lr}
 8004498:	4d06      	ldr	r5, [pc, #24]	; (80044b4 <_fstat_r+0x20>)
 800449a:	0004      	movs	r4, r0
 800449c:	0008      	movs	r0, r1
 800449e:	0011      	movs	r1, r2
 80044a0:	602b      	str	r3, [r5, #0]
 80044a2:	f7fc fac1 	bl	8000a28 <_fstat>
 80044a6:	1c43      	adds	r3, r0, #1
 80044a8:	d103      	bne.n	80044b2 <_fstat_r+0x1e>
 80044aa:	682b      	ldr	r3, [r5, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d000      	beq.n	80044b2 <_fstat_r+0x1e>
 80044b0:	6023      	str	r3, [r4, #0]
 80044b2:	bd70      	pop	{r4, r5, r6, pc}
 80044b4:	200002bc 	.word	0x200002bc

080044b8 <_isatty_r>:
 80044b8:	2300      	movs	r3, #0
 80044ba:	b570      	push	{r4, r5, r6, lr}
 80044bc:	4d06      	ldr	r5, [pc, #24]	; (80044d8 <_isatty_r+0x20>)
 80044be:	0004      	movs	r4, r0
 80044c0:	0008      	movs	r0, r1
 80044c2:	602b      	str	r3, [r5, #0]
 80044c4:	f7fc fabe 	bl	8000a44 <_isatty>
 80044c8:	1c43      	adds	r3, r0, #1
 80044ca:	d103      	bne.n	80044d4 <_isatty_r+0x1c>
 80044cc:	682b      	ldr	r3, [r5, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d000      	beq.n	80044d4 <_isatty_r+0x1c>
 80044d2:	6023      	str	r3, [r4, #0]
 80044d4:	bd70      	pop	{r4, r5, r6, pc}
 80044d6:	46c0      	nop			; (mov r8, r8)
 80044d8:	200002bc 	.word	0x200002bc

080044dc <_sbrk_r>:
 80044dc:	2300      	movs	r3, #0
 80044de:	b570      	push	{r4, r5, r6, lr}
 80044e0:	4d06      	ldr	r5, [pc, #24]	; (80044fc <_sbrk_r+0x20>)
 80044e2:	0004      	movs	r4, r0
 80044e4:	0008      	movs	r0, r1
 80044e6:	602b      	str	r3, [r5, #0]
 80044e8:	f7fc fac0 	bl	8000a6c <_sbrk>
 80044ec:	1c43      	adds	r3, r0, #1
 80044ee:	d103      	bne.n	80044f8 <_sbrk_r+0x1c>
 80044f0:	682b      	ldr	r3, [r5, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d000      	beq.n	80044f8 <_sbrk_r+0x1c>
 80044f6:	6023      	str	r3, [r4, #0]
 80044f8:	bd70      	pop	{r4, r5, r6, pc}
 80044fa:	46c0      	nop			; (mov r8, r8)
 80044fc:	200002bc 	.word	0x200002bc

08004500 <memchr>:
 8004500:	b2c9      	uxtb	r1, r1
 8004502:	1882      	adds	r2, r0, r2
 8004504:	4290      	cmp	r0, r2
 8004506:	d101      	bne.n	800450c <memchr+0xc>
 8004508:	2000      	movs	r0, #0
 800450a:	4770      	bx	lr
 800450c:	7803      	ldrb	r3, [r0, #0]
 800450e:	428b      	cmp	r3, r1
 8004510:	d0fb      	beq.n	800450a <memchr+0xa>
 8004512:	3001      	adds	r0, #1
 8004514:	e7f6      	b.n	8004504 <memchr+0x4>
	...

08004518 <_init>:
 8004518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800451a:	46c0      	nop			; (mov r8, r8)
 800451c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800451e:	bc08      	pop	{r3}
 8004520:	469e      	mov	lr, r3
 8004522:	4770      	bx	lr

08004524 <_fini>:
 8004524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004526:	46c0      	nop			; (mov r8, r8)
 8004528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800452a:	bc08      	pop	{r3}
 800452c:	469e      	mov	lr, r3
 800452e:	4770      	bx	lr
